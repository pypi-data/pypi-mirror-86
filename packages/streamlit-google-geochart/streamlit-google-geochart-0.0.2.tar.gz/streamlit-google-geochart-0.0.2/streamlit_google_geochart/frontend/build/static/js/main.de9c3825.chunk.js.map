{"version":3,"sources":["App.js","index.js"],"names":["defaultOptions","withStreamlitConnection","args","googleMapsApiKey","data","options","chartElement","useRef","useState","chart","setChart","hasError","setError","useEffect","GoogleCharts","load","createChart","parsedData","api","visualization","arrayToDataTable","Streamlit","setComponentValue","e","clearChart","error","setFrameHeight","draw","events","addListener","setTimeout","GeoChart","current","id","ref","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"8NAOMA,EAAiB,CACrB,OAAU,QA4DGC,mBAzDf,YAMkB,IAAD,IALfC,KACEC,EAIa,EAJbA,iBACAC,EAGa,EAHbA,KACAC,EAEa,EAFbA,QAGIC,EAAeC,iBAAO,MADb,EAEWC,qBAFX,mBAERC,EAFQ,KAEDC,EAFC,OAGcF,qBAHd,mBAGRG,EAHQ,KAGEC,EAHF,KAKfC,qBAAU,WACRC,IAAaC,KAAKC,EAAa,CAC7B,SAAY,CAAC,YACb,WAAcb,MAEf,IAEHU,qBAAU,WACR,IAAII,EACJ,GAAKH,IAAaI,IAAlB,CAEA,IACED,EAAaH,IAAaI,IAAIC,cAAcC,iBAAiBhB,GAC7DQ,GAAS,GACLD,GACFU,IAAUC,kBAAkB,IAEhC,MAAOC,GACAZ,IACHF,EAAMe,aACNH,IAAUC,kBAAkB,CAAEG,MAAO,wCACrCb,GAAS,GACTS,IAAUK,kBAGVjB,GAASQ,IACXR,EAAMkB,KACJV,EADF,2BAEOjB,GAAmBK,IAE1BS,IAAaI,IAAIC,cAAcS,OAAOC,YAAYpB,EAAO,QAASY,IAAUK,gBAG5EI,WAAWT,IAAUK,eAAgB,UAIzC,IAAMV,EAAc,WAClBN,EAAS,IAAII,IAAaI,IAAIC,cAAcY,SAASzB,EAAa0B,WAGpE,OACE,qBAAKC,GAAG,QAAQC,IAAK5B,OC5DzB6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.de9c3825.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport {\n  Streamlit,\n  withStreamlitConnection\n} from \"streamlit-component-lib\";\nimport { GoogleCharts } from 'google-charts';\n\nconst defaultOptions = {\n  'height': '100%',\n}\n\nfunction StreamlitGoogleGeoChart({\n  args: {\n    googleMapsApiKey,\n    data,\n    options\n  }\n}): ReactElement {\n  const chartElement = useRef(null)\n  const [chart, setChart] = useState()\n  const [hasError, setError] = useState()\n\n  useEffect(() => {\n    GoogleCharts.load(createChart, {\n      'packages': ['geochart'],\n      'mapsApiKey': googleMapsApiKey\n    });\n  }, [])\n\n  useEffect(() => {\n    let parsedData\n    if (!GoogleCharts.api) return\n\n    try {\n      parsedData = GoogleCharts.api.visualization.arrayToDataTable(data)\n      setError(false)\n      if (hasError)\n        Streamlit.setComponentValue({})\n    }\n    catch (e) {\n      if (!hasError) {\n        chart.clearChart()\n        Streamlit.setComponentValue({ error: \"Google Charts: unable to parse data\" })\n        setError(true)\n        Streamlit.setFrameHeight()\n      }\n    }\n    if (chart && parsedData) {\n      chart.draw(\n        parsedData,\n        { ...defaultOptions, ...options }\n      )\n      GoogleCharts.api.visualization.events.addListener(chart, 'ready', Streamlit.setFrameHeight)\n      // This fires very slowly... Let's try to set the height after a\n      // short wait in case the above takes too long\n      setTimeout(Streamlit.setFrameHeight, 200)\n    }\n  });\n\n  const createChart = () => {\n    setChart(new GoogleCharts.api.visualization.GeoChart(chartElement.current))\n  }\n\n  return (\n    <div id=\"chart\" ref={chartElement}/>\n  );\n}\n\nexport default withStreamlitConnection(StreamlitGoogleGeoChart)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}