# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/feature.ipynb (unless otherwise specified).

__all__ = ['laf_from_opencv_kpts', 'visualize_LAF', 'opencv_kpts_from_laf', 'cv2_matches_from_kornia',
           'kornia_matches_from_cv2', 'laf_from_opencv_ORB_kpts', 'laf_from_opencv_SIFT_kpts',
           'opencv_SIFT_kpts_from_laf', 'opencv_ORB_kpts_from_laf']

# Cell
import cv2
import torch
import kornia as K
from typing import List
import matplotlib.pyplot as plt

def laf_from_opencv_kpts(kpts: List[cv2.KeyPoint],
                         mrSize: float=6.0,
                         device: torch.device=torch.device('cpu')) -> torch.Tensor:
    N = len(kpts)
    xy = torch.tensor([(x.pt[0], x.pt[1]) for x in kpts ], device=device, dtype=torch.float).view(1, N, 2)
    scales = torch.tensor([(mrSize * x.size) for x in kpts ], device=device, dtype=torch.float).view(1, N, 1, 1)
    angles = torch.tensor([(-x.angle) for x in kpts ], device=device, dtype=torch.float).view(1, N, 1)
    laf = K.feature.laf_from_center_scale_ori(xy, scales, angles).reshape(1, -1, 2, 3)
    return laf.reshape(1, -1, 2, 3)

def visualize_LAF(img, LAF, img_idx = 0):
    x, y = K.feature.laf.get_laf_pts_to_draw(LAF, img_idx)
    plt.figure()
    plt.imshow(K.utils.tensor_to_image(img[img_idx]))
    plt.plot(x, y, 'r')
    plt.show()
    return

def opencv_kpts_from_laf(lafs: torch.Tensor,
                         mrSize: float = 1.0) -> List[cv2.KeyPoint]:
    XY = K.feature.get_laf_center(lafs)
    S = K.feature.get_laf_scale(lafs)
    Ang = K.feature.get_laf_orientation(lafs)
    cv_kpts = [cv2.KeyPoint(xy[0].item(), xy[1].item(), s.item()/ mrSize, -a.item())
               for xy, s, a in zip(XY.view(-1,2), S.view(-1, 1), Ang.view(-1, 1))]
    return cv_kpts

# Cell
def cv2_matches_from_kornia(match_dists: torch.Tensor, match_idxs: torch.Tensor) -> List[cv2.DMatch]:
    return [cv2.DMatch(idx[0].item(), idx[1].item(), d.item()) for idx, d in zip (match_idxs, match_dists)]

def kornia_matches_from_cv2(cv2_matches, device=torch.device('cpu')):
    num_matches = len(cv2_matches)
    match_dists = torch.zeros(num_matches, 1, device=device, dtype=torch.float)
    match_idxs = torch.zeros(num_matches, 2, device=device, dtype=torch.long)
    for i, m in enumerate(cv2_matches):
        match_dists[i, 0] = m.distance
        match_idxs[i, 0] = m.queryIdx
        match_idxs[i, 1] = m.trainIdx
    return match_dists, match_idxs



# Cell
def laf_from_opencv_ORB_kpts(kpts: List[cv2.KeyPoint],
                         device: torch.device=torch.device('cpu')) -> torch.Tensor:
    return laf_from_opencv_kpts(kpts, 0.5, device)

def laf_from_opencv_SIFT_kpts(kpts: List[cv2.KeyPoint],
                         device: torch.device=torch.device('cpu')) -> torch.Tensor:
    return laf_from_opencv_kpts(kpts, 6.0, device)


def opencv_SIFT_kpts_from_laf(lafs):
    return opencv_kpts_from_laf(lafs, 6.0);

def opencv_ORB_kpts_from_laf(lafs):
    return opencv_kpts_from_laf(lafs, 0.5);
