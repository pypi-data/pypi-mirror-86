# coding: utf-8

"""
    VeeRoute.LSS Account

    LSS Account Panel  # noqa: E501

    The version of the OpenAPI document: 3.6.163873
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_lss_account.configuration import Configuration


class AccountInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'name': 'str',
        'email': 'str',
        'phone': 'str',
        'company': 'str',
        'timezone': 'int'
    }

    attribute_map = {
        'username': 'username',
        'name': 'name',
        'email': 'email',
        'phone': 'phone',
        'company': 'company',
        'timezone': 'timezone'
    }

    def __init__(self, username=None, name=None, email=None, phone=None, company=None, timezone=0, local_vars_configuration=None):  # noqa: E501
        """AccountInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._username = None
        self._name = None
        self._email = None
        self._phone = None
        self._company = None
        self._timezone = None
        self.discriminator = None

        self.username = username
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if company is not None:
            self.company = company
        if timezone is not None:
            self.timezone = timezone

    @property
    def username(self):
        """Gets the username of this AccountInfo.  # noqa: E501

        Login, ID.  # noqa: E501

        :return: The username of this AccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AccountInfo.

        Login, ID.  # noqa: E501

        :param username: The username of this AccountInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) > 256):
            raise ValueError("Invalid value for `username`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) < 1):
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    @property
    def name(self):
        """Gets the name of this AccountInfo.  # noqa: E501

        Full name of user.  # noqa: E501

        :return: The name of this AccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountInfo.

        Full name of user.  # noqa: E501

        :param name: The name of this AccountInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 256):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this AccountInfo.  # noqa: E501

        User mail address.  # noqa: E501

        :return: The email of this AccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountInfo.

        User mail address.  # noqa: E501

        :param email: The email of this AccountInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 256):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) < 1):
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this AccountInfo.  # noqa: E501

        User phone.  # noqa: E501

        :return: The phone of this AccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AccountInfo.

        User phone.  # noqa: E501

        :param phone: The phone of this AccountInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                phone is not None and len(phone) > 256):
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                phone is not None and len(phone) < 1):
            raise ValueError("Invalid value for `phone`, length must be greater than or equal to `1`")  # noqa: E501

        self._phone = phone

    @property
    def company(self):
        """Gets the company of this AccountInfo.  # noqa: E501

        Сompany.  # noqa: E501

        :return: The company of this AccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this AccountInfo.

        Сompany.  # noqa: E501

        :param company: The company of this AccountInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                company is not None and len(company) > 256):
            raise ValueError("Invalid value for `company`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                company is not None and len(company) < 1):
            raise ValueError("Invalid value for `company`, length must be greater than or equal to `1`")  # noqa: E501

        self._company = company

    @property
    def timezone(self):
        """Gets the timezone of this AccountInfo.  # noqa: E501

        Basic time zone used for statistics.  # noqa: E501

        :return: The timezone of this AccountInfo.  # noqa: E501
        :rtype: int
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this AccountInfo.

        Basic time zone used for statistics.  # noqa: E501

        :param timezone: The timezone of this AccountInfo.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                timezone is not None and timezone > 12):  # noqa: E501
            raise ValueError("Invalid value for `timezone`, must be a value less than or equal to `12`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                timezone is not None and timezone < -12):  # noqa: E501
            raise ValueError("Invalid value for `timezone`, must be a value greater than or equal to `-12`")  # noqa: E501

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountInfo):
            return True

        return self.to_dict() != other.to_dict()
