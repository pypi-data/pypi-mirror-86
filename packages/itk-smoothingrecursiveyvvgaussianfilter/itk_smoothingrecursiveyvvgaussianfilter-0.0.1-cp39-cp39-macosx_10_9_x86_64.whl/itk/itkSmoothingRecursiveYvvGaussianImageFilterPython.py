# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _SmoothingRecursiveYvvGaussianFilterPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSmoothingRecursiveYvvGaussianImageFilterPython
else:
    import _itkSmoothingRecursiveYvvGaussianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSmoothingRecursiveYvvGaussianImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSmoothingRecursiveYvvGaussianImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkInPlaceImageFilterAPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def itkSmoothingRecursiveYvvGaussianImageFilterID2ID2_New():
    return itkSmoothingRecursiveYvvGaussianImageFilterID2ID2.New()

class itkSmoothingRecursiveYvvGaussianImageFilterID2ID2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkSmoothingRecursiveYvvGaussianImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID2ID2_Clone)
    SetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID2ID2_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID2ID2_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID2ID2_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID2ID2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID2ID2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID2ID2_GetNormalizeAcrossScale)
    InputHasNumericTraitsCheck = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.delete_itkSmoothingRecursiveYvvGaussianImageFilterID2ID2
    cast = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveYvvGaussianImageFilterID2ID2

        Create a new object of the class itkSmoothingRecursiveYvvGaussianImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveYvvGaussianImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveYvvGaussianImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveYvvGaussianImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveYvvGaussianImageFilterID2ID2 in _itkSmoothingRecursiveYvvGaussianImageFilterPython:
_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID2ID2_swigregister(itkSmoothingRecursiveYvvGaussianImageFilterID2ID2)
itkSmoothingRecursiveYvvGaussianImageFilterID2ID2___New_orig__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID2ID2___New_orig__
itkSmoothingRecursiveYvvGaussianImageFilterID2ID2_cast = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID2ID2_cast


def itkSmoothingRecursiveYvvGaussianImageFilterID3ID3_New():
    return itkSmoothingRecursiveYvvGaussianImageFilterID3ID3.New()

class itkSmoothingRecursiveYvvGaussianImageFilterID3ID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkSmoothingRecursiveYvvGaussianImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID3ID3_Clone)
    SetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID3ID3_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID3ID3_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID3ID3_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID3ID3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID3ID3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID3ID3_GetNormalizeAcrossScale)
    InputHasNumericTraitsCheck = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.delete_itkSmoothingRecursiveYvvGaussianImageFilterID3ID3
    cast = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveYvvGaussianImageFilterID3ID3

        Create a new object of the class itkSmoothingRecursiveYvvGaussianImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveYvvGaussianImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveYvvGaussianImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveYvvGaussianImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveYvvGaussianImageFilterID3ID3 in _itkSmoothingRecursiveYvvGaussianImageFilterPython:
_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID3ID3_swigregister(itkSmoothingRecursiveYvvGaussianImageFilterID3ID3)
itkSmoothingRecursiveYvvGaussianImageFilterID3ID3___New_orig__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID3ID3___New_orig__
itkSmoothingRecursiveYvvGaussianImageFilterID3ID3_cast = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterID3ID3_cast


def itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2_New():
    return itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2.New()

class itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2_Clone)
    SetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2_GetNormalizeAcrossScale)
    InputHasNumericTraitsCheck = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.delete_itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2
    cast = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2

        Create a new object of the class itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2 in _itkSmoothingRecursiveYvvGaussianImageFilterPython:
_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2_swigregister(itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2)
itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2___New_orig__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2___New_orig__
itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2_cast = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF2IF2_cast


def itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3_New():
    return itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3.New()

class itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3_Clone)
    SetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3_GetNormalizeAcrossScale)
    InputHasNumericTraitsCheck = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.delete_itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3
    cast = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3

        Create a new object of the class itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3 in _itkSmoothingRecursiveYvvGaussianImageFilterPython:
_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3_swigregister(itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3)
itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3___New_orig__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3___New_orig__
itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3_cast = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIF3IF3_cast


def itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2_New():
    return itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2.New()

class itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2_Clone)
    SetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2_GetNormalizeAcrossScale)
    InputHasNumericTraitsCheck = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.delete_itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2

        Create a new object of the class itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2 in _itkSmoothingRecursiveYvvGaussianImageFilterPython:
_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2_swigregister(itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2)
itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2___New_orig__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2___New_orig__
itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2_cast = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS2ISS2_cast


def itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3_New():
    return itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3.New()

class itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3_Clone)
    SetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3_GetNormalizeAcrossScale)
    InputHasNumericTraitsCheck = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.delete_itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3

        Create a new object of the class itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3 in _itkSmoothingRecursiveYvvGaussianImageFilterPython:
_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3_swigregister(itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3)
itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3___New_orig__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3___New_orig__
itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3_cast = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterISS3ISS3_cast


def itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2_New():
    return itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2.New()

class itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2_Clone)
    SetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2_GetNormalizeAcrossScale)
    InputHasNumericTraitsCheck = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.delete_itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2

        Create a new object of the class itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2 in _itkSmoothingRecursiveYvvGaussianImageFilterPython:
_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2_swigregister(itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2)
itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2___New_orig__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2___New_orig__
itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2_cast = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC2IUC2_cast


def itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3_New():
    return itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3.New()

class itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3_Clone)
    SetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3_GetNormalizeAcrossScale)
    InputHasNumericTraitsCheck = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.delete_itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3

        Create a new object of the class itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3 in _itkSmoothingRecursiveYvvGaussianImageFilterPython:
_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3_swigregister(itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3)
itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3___New_orig__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3___New_orig__
itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3_cast = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUC3IUC3_cast


def itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2_New():
    return itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2.New()

class itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2_Clone)
    SetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2_GetNormalizeAcrossScale)
    InputHasNumericTraitsCheck = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.delete_itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2

        Create a new object of the class itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2 in _itkSmoothingRecursiveYvvGaussianImageFilterPython:
_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2_swigregister(itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2)
itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2___New_orig__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2___New_orig__
itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2_cast = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS2IUS2_cast


def itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3_New():
    return itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3.New()

class itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3_Clone)
    SetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3_GetNormalizeAcrossScale)
    InputHasNumericTraitsCheck = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.delete_itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3

        Create a new object of the class itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3 in _itkSmoothingRecursiveYvvGaussianImageFilterPython:
_itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3_swigregister(itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3)
itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3___New_orig__ = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3___New_orig__
itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3_cast = _itkSmoothingRecursiveYvvGaussianImageFilterPython.itkSmoothingRecursiveYvvGaussianImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def smoothing_recursive_yvv_gaussian_image_filter(*args, **kwargs):
    """Procedural interface for SmoothingRecursiveYvvGaussianImageFilter"""
    import itk
    instance = itk.SmoothingRecursiveYvvGaussianImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def smoothing_recursive_yvv_gaussian_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SmoothingRecursiveYvvGaussianImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SmoothingRecursiveYvvGaussianImageFilter.values()[0]
    else:
        filter_object = itk.SmoothingRecursiveYvvGaussianImageFilter

    smoothing_recursive_yvv_gaussian_image_filter.__doc__ = filter_object.__doc__
    smoothing_recursive_yvv_gaussian_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    smoothing_recursive_yvv_gaussian_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.SmoothingRecursiveYvvGaussianImageFilter, itkTemplate.itkTemplate):
        smoothing_recursive_yvv_gaussian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        smoothing_recursive_yvv_gaussian_image_filter.__doc__ += "\n"
        smoothing_recursive_yvv_gaussian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        smoothing_recursive_yvv_gaussian_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



