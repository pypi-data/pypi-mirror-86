# coding: utf-8

"""
    VeeRoute.LSS Field Service Engineers

    VeeRoute.LSS Field Service Engineers API  # noqa: E501

    The version of the OpenAPI document: 3.6.163884
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import vrt_lss_fieldservice
from vrt_lss_fieldservice.models.plan_task import PlanTask  # noqa: E501
from vrt_lss_fieldservice.rest import ApiException

class TestPlanTask(unittest.TestCase):
    """PlanTask unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test PlanTask
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = vrt_lss_fieldservice.models.plan_task.PlanTask()  # noqa: E501
        if include_optional :
            return PlanTask(
                orders = [
                    vrt_lss_fieldservice.models.order.Order(
                        key = 'order0001', 
                        location = vrt_lss_fieldservice.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        time_windows = [
                            vrt_lss_fieldservice.models.time_window.TimeWindow(
                                from = '2020-11-21T09:30+03:00', 
                                to = '2020-11-21T19:45Z', )
                            ], 
                        duration = 30, 
                        cost = vrt_lss_fieldservice.models.order_cost.OrderCost(
                            reward = 199.1, 
                            penalty = vrt_lss_fieldservice.models.cost_penalty.CostPenalty(
                                start_time = '2020-11-21T17:00Z', 
                                period = 60, 
                                value = 1000, 
                                max_value = 10000, ), ), 
                        restrictions = ["Special"], 
                        blacklist = ["A0"], )
                    ], 
                performers = [
                    vrt_lss_fieldservice.models.performer.Performer(
                        key = 'performer0001', 
                        start_location = vrt_lss_fieldservice.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        finish_location = vrt_lss_fieldservice.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        features = ["B1","Special"], 
                        transport_type = 'CAR', 
                        shifts = [
                            vrt_lss_fieldservice.models.shift.Shift(
                                availability_time = vrt_lss_fieldservice.models.time_window.TimeWindow(
                                    from = '2020-11-21T09:30+03:00', 
                                    to = '2020-11-21T19:45Z', ), 
                                working_time = vrt_lss_fieldservice.models.time_window.TimeWindow(
                                    from = '2020-11-21T09:30+03:00', 
                                    to = '2020-11-21T19:45Z', ), )
                            ], 
                        tariff = vrt_lss_fieldservice.models.tariff.Tariff(
                            basic = vrt_lss_fieldservice.models.tariff_primary.TariffPrimary(
                                cost_per_shift = 1000, 
                                cost_per_meter = 0.1, 
                                max_length = 200000, 
                                cost_per_minute = 0.2, 
                                max_time = 480, ), 
                            extra = [
                                vrt_lss_fieldservice.models.tariff_primary.TariffPrimary(
                                    cost_per_shift = 1000, 
                                    cost_per_meter = 0.1, 
                                    max_length = 200000, 
                                    cost_per_minute = 0.2, 
                                    max_time = 480, )
                                ], ), )
                    ], 
                trips = [
                    vrt_lss_fieldservice.models.trip.Trip(
                        key = 'TRIP0001', 
                        trip_time = vrt_lss_fieldservice.models.time_window.TimeWindow(
                            from = '2020-11-21T09:30+03:00', 
                            to = '2020-11-21T19:45Z', ), 
                        performer_key = 'performer01', 
                        actions = [
                            vrt_lss_fieldservice.models.trip_action.TripAction(
                                order_key = 'order01', 
                                order_time = vrt_lss_fieldservice.models.time_window.TimeWindow(
                                    from = '2020-11-21T09:30+03:00', 
                                    to = '2020-11-21T19:45Z', ), 
                                location_time = vrt_lss_fieldservice.models.time_window.TimeWindow(
                                    from = '2020-11-21T09:30+03:00', 
                                    to = '2020-11-21T19:45Z', ), )
                            ], 
                        waitlist = ["order02"], )
                    ], 
                settings = vrt_lss_fieldservice.models.plan_settings.PlanSettings(
                    configuration = 'default', 
                    planning_time = 30, 
                    result_ttl = 10, 
                    result_timezone = 3, 
                    predict_slots = 2, 
                    transport_factor = [
                        vrt_lss_fieldservice.models.transport_factor.TransportFactor(
                            transport_type = 'CAR', 
                            speed = 2.5, )
                        ], 
                    capacity_factor = [
                        vrt_lss_fieldservice.models.capacity_factor.CapacityFactor(
                            transport_type = 'CAR', 
                            capacity = vrt_lss_fieldservice.models.capacity.Capacity(
                                mass = 10, 
                                volume = 2, 
                                capacity_x = 1, 
                                capacity_y = 2, 
                                capacity_z = 3, ), )
                        ], 
                    routing = [
                        vrt_lss_fieldservice.models.routing.Routing(
                            transport_type = 'CAR', 
                            matrix = {"waypoints":[{"latitude":59.9345,"longitude":30.1504},{"latitude":59.942383,"longitude":30.258951},{"latitude":59.9545,"longitude":30.2004},{"latitude":59.89527,"longitude":30.261747},{"latitude":59.9745,"longitude":30.5004}],"distances":[[0,5822,1820,14130,23304],[5936,0,4931,8365,17731],[1819,4853,0,13161,22335],[14859,9056,13854,0,21440],[21777,16306,20772,19290,0]],"durations":[[0,13,7,24,36],[13,0,9,13,25],[7,9,0,21,32],[26,14,22,0,30],[34,23,30,28,0]]}, 
                            traffic_jams = [
                                vrt_lss_fieldservice.models.traffic_factor.TrafficFactor(
                                    time_window = vrt_lss_fieldservice.models.time_window.TimeWindow(
                                        from = '2020-11-21T09:30+03:00', 
                                        to = '2020-11-21T19:45Z', ), 
                                    length_multiplier = 2, 
                                    length_additive = 20, 
                                    time_multiplier = 2, 
                                    time_additive = 30, )
                                ], )
                        ], 
                    assumptions = vrt_lss_fieldservice.models.plan_assumptions.PlanAssumptions(
                        toll_roads = False, 
                        ferry_crossing = False, 
                        flight_distance = True, 
                        disable_compatibility = True, 
                        disable_capacity = True, 
                        same_order_time_window = True, 
                        expand_shift_time_window = True, ), 
                    precision = 3, )
            )
        else :
            return PlanTask(
                orders = [
                    vrt_lss_fieldservice.models.order.Order(
                        key = 'order0001', 
                        location = vrt_lss_fieldservice.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        time_windows = [
                            vrt_lss_fieldservice.models.time_window.TimeWindow(
                                from = '2020-11-21T09:30+03:00', 
                                to = '2020-11-21T19:45Z', )
                            ], 
                        duration = 30, 
                        cost = vrt_lss_fieldservice.models.order_cost.OrderCost(
                            reward = 199.1, 
                            penalty = vrt_lss_fieldservice.models.cost_penalty.CostPenalty(
                                start_time = '2020-11-21T17:00Z', 
                                period = 60, 
                                value = 1000, 
                                max_value = 10000, ), ), 
                        restrictions = ["Special"], 
                        blacklist = ["A0"], )
                    ],
                performers = [
                    vrt_lss_fieldservice.models.performer.Performer(
                        key = 'performer0001', 
                        start_location = vrt_lss_fieldservice.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        finish_location = vrt_lss_fieldservice.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        features = ["B1","Special"], 
                        transport_type = 'CAR', 
                        shifts = [
                            vrt_lss_fieldservice.models.shift.Shift(
                                availability_time = vrt_lss_fieldservice.models.time_window.TimeWindow(
                                    from = '2020-11-21T09:30+03:00', 
                                    to = '2020-11-21T19:45Z', ), 
                                working_time = vrt_lss_fieldservice.models.time_window.TimeWindow(
                                    from = '2020-11-21T09:30+03:00', 
                                    to = '2020-11-21T19:45Z', ), )
                            ], 
                        tariff = vrt_lss_fieldservice.models.tariff.Tariff(
                            basic = vrt_lss_fieldservice.models.tariff_primary.TariffPrimary(
                                cost_per_shift = 1000, 
                                cost_per_meter = 0.1, 
                                max_length = 200000, 
                                cost_per_minute = 0.2, 
                                max_time = 480, ), 
                            extra = [
                                vrt_lss_fieldservice.models.tariff_primary.TariffPrimary(
                                    cost_per_shift = 1000, 
                                    cost_per_meter = 0.1, 
                                    max_length = 200000, 
                                    cost_per_minute = 0.2, 
                                    max_time = 480, )
                                ], ), )
                    ],
        )

    def testPlanTask(self):
        """Test PlanTask"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
