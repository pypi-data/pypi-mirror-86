# coding: utf-8

"""
    VeeRoute.LSS Field Service Engineers

    VeeRoute.LSS Field Service Engineers API  # noqa: E501

    The version of the OpenAPI document: 3.6.163884
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_lss_fieldservice.configuration import Configuration


class OrderCost(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reward': 'float',
        'penalty': 'CostPenalty'
    }

    attribute_map = {
        'reward': 'reward',
        'penalty': 'penalty'
    }

    def __init__(self, reward=1000, penalty=None, local_vars_configuration=None):  # noqa: E501
        """OrderCost - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._reward = None
        self._penalty = None
        self.discriminator = None

        self.reward = reward
        if penalty is not None:
            self.penalty = penalty

    @property
    def reward(self):
        """Gets the reward of this OrderCost.  # noqa: E501

        The basic reward for the order completion. Penalties for not completing the order on time are deducted from the reward.   # noqa: E501

        :return: The reward of this OrderCost.  # noqa: E501
        :rtype: float
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this OrderCost.

        The basic reward for the order completion. Penalties for not completing the order on time are deducted from the reward.   # noqa: E501

        :param reward: The reward of this OrderCost.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and reward is None:  # noqa: E501
            raise ValueError("Invalid value for `reward`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                reward is not None and reward > 1000000):  # noqa: E501
            raise ValueError("Invalid value for `reward`, must be a value less than or equal to `1000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                reward is not None and reward < 0):  # noqa: E501
            raise ValueError("Invalid value for `reward`, must be a value greater than or equal to `0`")  # noqa: E501

        self._reward = reward

    @property
    def penalty(self):
        """Gets the penalty of this OrderCost.  # noqa: E501


        :return: The penalty of this OrderCost.  # noqa: E501
        :rtype: CostPenalty
        """
        return self._penalty

    @penalty.setter
    def penalty(self, penalty):
        """Sets the penalty of this OrderCost.


        :param penalty: The penalty of this OrderCost.  # noqa: E501
        :type: CostPenalty
        """

        self._penalty = penalty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderCost):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderCost):
            return True

        return self.to_dict() != other.to_dict()
