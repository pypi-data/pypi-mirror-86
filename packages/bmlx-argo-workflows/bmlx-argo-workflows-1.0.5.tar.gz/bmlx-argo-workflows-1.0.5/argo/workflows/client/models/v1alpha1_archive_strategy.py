# coding: utf-8

"""
    Argo

    Python client for Argo Workflows  # noqa: E501

    The version of the OpenAPI document: 2.10.2
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from argo.workflows.client.configuration import Configuration


class V1alpha1ArchiveStrategy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_none': 'object',
        'tar': 'V1alpha1TarStrategy'
    }

    attribute_map = {
        '_none': 'none',
        'tar': 'tar'
    }

    def __init__(self, _none=None, tar=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1ArchiveStrategy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__none = None
        self._tar = None
        self.discriminator = None

        if _none is not None:
            self._none = _none
        if tar is not None:
            self.tar = tar

    @property
    def _none(self):
        """Gets the _none of this V1alpha1ArchiveStrategy.  # noqa: E501

        NoneStrategy indicates to skip tar process and upload the files or directory tree as independent files. Note that if the artifact is a directory, the artifact driver must support the ability to save/load the directory appropriately.  # noqa: E501

        :return: The _none of this V1alpha1ArchiveStrategy.  # noqa: E501
        :rtype: object
        """
        return self.__none

    @_none.setter
    def _none(self, _none):
        """Sets the _none of this V1alpha1ArchiveStrategy.

        NoneStrategy indicates to skip tar process and upload the files or directory tree as independent files. Note that if the artifact is a directory, the artifact driver must support the ability to save/load the directory appropriately.  # noqa: E501

        :param _none: The _none of this V1alpha1ArchiveStrategy.  # noqa: E501
        :type _none: object
        """

        self.__none = _none

    @property
    def tar(self):
        """Gets the tar of this V1alpha1ArchiveStrategy.  # noqa: E501


        :return: The tar of this V1alpha1ArchiveStrategy.  # noqa: E501
        :rtype: V1alpha1TarStrategy
        """
        return self._tar

    @tar.setter
    def tar(self, tar):
        """Sets the tar of this V1alpha1ArchiveStrategy.


        :param tar: The tar of this V1alpha1ArchiveStrategy.  # noqa: E501
        :type tar: V1alpha1TarStrategy
        """

        self._tar = tar

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                elif len(args) == 2:
                    return x.to_dict(serialize)
                else:
                    raise ValueError("Invalid argument size of to_dict")
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ArchiveStrategy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1ArchiveStrategy):
            return True

        return self.to_dict() != other.to_dict()
