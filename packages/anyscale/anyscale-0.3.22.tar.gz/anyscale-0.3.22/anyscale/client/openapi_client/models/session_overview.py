# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SessionOverview(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project_id': 'str',
        'project_name': 'str',
        'session_id': 'str',
        'active': 'bool',
        'session_name': 'str',
        'creator_email': 'str',
        'price_per_h': 'float',
        'price': 'float',
        'total_h': 'float'
    }

    attribute_map = {
        'project_id': 'project_id',
        'project_name': 'project_name',
        'session_id': 'session_id',
        'active': 'active',
        'session_name': 'session_name',
        'creator_email': 'creator_email',
        'price_per_h': 'price_per_h',
        'price': 'price',
        'total_h': 'total_h'
    }

    def __init__(self, project_id=None, project_name=None, session_id=None, active=None, session_name=None, creator_email=None, price_per_h=None, price=None, total_h=None, local_vars_configuration=None):  # noqa: E501
        """SessionOverview - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project_id = None
        self._project_name = None
        self._session_id = None
        self._active = None
        self._session_name = None
        self._creator_email = None
        self._price_per_h = None
        self._price = None
        self._total_h = None
        self.discriminator = None

        self.project_id = project_id
        self.project_name = project_name
        self.session_id = session_id
        self.active = active
        self.session_name = session_name
        self.creator_email = creator_email
        self.price_per_h = price_per_h
        self.price = price
        self.total_h = total_h

    @property
    def project_id(self):
        """Gets the project_id of this SessionOverview.  # noqa: E501


        :return: The project_id of this SessionOverview.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SessionOverview.


        :param project_id: The project_id of this SessionOverview.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this SessionOverview.  # noqa: E501


        :return: The project_name of this SessionOverview.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this SessionOverview.


        :param project_name: The project_name of this SessionOverview.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project_name is None:  # noqa: E501
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    @property
    def session_id(self):
        """Gets the session_id of this SessionOverview.  # noqa: E501


        :return: The session_id of this SessionOverview.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this SessionOverview.


        :param session_id: The session_id of this SessionOverview.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and session_id is None:  # noqa: E501
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def active(self):
        """Gets the active of this SessionOverview.  # noqa: E501


        :return: The active of this SessionOverview.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SessionOverview.


        :param active: The active of this SessionOverview.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and active is None:  # noqa: E501
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def session_name(self):
        """Gets the session_name of this SessionOverview.  # noqa: E501


        :return: The session_name of this SessionOverview.  # noqa: E501
        :rtype: str
        """
        return self._session_name

    @session_name.setter
    def session_name(self, session_name):
        """Sets the session_name of this SessionOverview.


        :param session_name: The session_name of this SessionOverview.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and session_name is None:  # noqa: E501
            raise ValueError("Invalid value for `session_name`, must not be `None`")  # noqa: E501

        self._session_name = session_name

    @property
    def creator_email(self):
        """Gets the creator_email of this SessionOverview.  # noqa: E501


        :return: The creator_email of this SessionOverview.  # noqa: E501
        :rtype: str
        """
        return self._creator_email

    @creator_email.setter
    def creator_email(self, creator_email):
        """Sets the creator_email of this SessionOverview.


        :param creator_email: The creator_email of this SessionOverview.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and creator_email is None:  # noqa: E501
            raise ValueError("Invalid value for `creator_email`, must not be `None`")  # noqa: E501

        self._creator_email = creator_email

    @property
    def price_per_h(self):
        """Gets the price_per_h of this SessionOverview.  # noqa: E501


        :return: The price_per_h of this SessionOverview.  # noqa: E501
        :rtype: float
        """
        return self._price_per_h

    @price_per_h.setter
    def price_per_h(self, price_per_h):
        """Sets the price_per_h of this SessionOverview.


        :param price_per_h: The price_per_h of this SessionOverview.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and price_per_h is None:  # noqa: E501
            raise ValueError("Invalid value for `price_per_h`, must not be `None`")  # noqa: E501

        self._price_per_h = price_per_h

    @property
    def price(self):
        """Gets the price of this SessionOverview.  # noqa: E501


        :return: The price of this SessionOverview.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SessionOverview.


        :param price: The price of this SessionOverview.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and price is None:  # noqa: E501
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def total_h(self):
        """Gets the total_h of this SessionOverview.  # noqa: E501


        :return: The total_h of this SessionOverview.  # noqa: E501
        :rtype: float
        """
        return self._total_h

    @total_h.setter
    def total_h(self, total_h):
        """Sets the total_h of this SessionOverview.


        :param total_h: The total_h of this SessionOverview.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and total_h is None:  # noqa: E501
            raise ValueError("Invalid value for `total_h`, must not be `None`")  # noqa: E501

        self._total_h = total_h

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionOverview):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SessionOverview):
            return True

        return self.to_dict() != other.to_dict()
