"""
Django settings for ts_middle_ground_server project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import sys
from datetime import timedelta

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'k71i@ori*y%^6_h=3evliums_7tnm55qzfp=xx*3t2yoq%xc!u'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']  # 当debug为false时


AUTH_USER_MODEL = 'users.User'  # 使用的用户表  auth.User：DRF自身的用户表

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'django_filters',
    'apps.users',
    'corsheaders',
    'data_middle',
    'data_apps.direct',
    'data_apps.tlms_wms_public_table',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 建议加在第一行，必须在CsrfViewMiddleware之前
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'silk.middleware.SilkyMiddleware'
]

# 跨域访问设置
# 允许携带cookie
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
# 指定域名（客户端）的允许跨域，与CORS_ORIGIN_ALLOW_ALL = True不共存：
CORS_ORIGIN_WHITELIST = (
    # 'localhost',
    # '127.0.0.1'
)
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'Access-Control-Allow-Origin',
    'x-requested-with',
)

ROOT_URLCONF = 'ts_middle_ground_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ts_middle_ground_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# 数据库配置 options模式
# 同盛

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': "wms",
#         'USER': 'wms',
#         'PASSWORD': 'wms',
#         # 'HOST': 'localhost',
#         'HOST': '172.31.41.102',
#         'PORT': '5432',
#         'OPTIONS': {
#             'options': '-c search_path=public,wms'
#         }
#     },
#     'wms': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': "wms",
#         'USER': 'wms',
#         'PASSWORD': 'wms',
#         # 'HOST': 'localhost',
#         'HOST': '172.31.41.102',
#         'PORT': '5432',
#         'OPTIONS': {
#             'options': '-c search_path=wms'
#         }
#     }
# }
# 同盛 ssg
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': "wms",
#         'USER': 'wms',
#         'PASSWORD': 'wms',
#         'HOST': '172.31.41.102',
#         'PORT': '5432',
#         'OPTIONS': {
#             'options': '-c search_path=public,wms_ssg'
#         }
#     },
#     'wms': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': "wms",
#         'USER': 'wms',
#         'PASSWORD': 'wms',
#         'HOST': '172.31.41.102',
#         'PORT': '5432',
#         'OPTIONS': {
#             'options': '-c search_path=wms_ssg'
#         }
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': "testdb",
        'USER': 'smuport',
        'PASSWORD': 'smuport',
        'HOST': 'ctas.shmtu.edu.cn',
        'PORT': '15432',
        # 'ATOMIC_REQUESTS': True, # 实现sql数据库事务特性
        # 'SCHEMAS': 'WMS',
        'OPTIONS': {
            'options': '-c search_path=public,wms'
        }
    },
    'wms': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': "testdb",
        'USER': 'smuport',
        'PASSWORD': 'smuport',
        'HOST': 'ctas.shmtu.edu.cn',
        'PORT': '15432',
        'OPTIONS': {
            'options': '-c search_path=wms'
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

# 时区
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'


# 定义异常返回的路径脚本位置
REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'utils.exception_handler.custom_exception_handler',
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    # authentication只会进行用户认证，仅仅是判断一个用户是否有资格进入系统，并不会做实际的拦截
    "DEFAULT_AUTHENTICATION_CLASSES": (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    "UNAUTHENTICATED_USER": None,  # 匿名，request.user = None
    "UNAUTHENTICATED_TOKEN": None,  # 匿名，request.auth = None
}


# 关于simple-jwt的配置
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=6),
    'REFRESH_TOKEN_LIFETIME': timedelta(hours=12),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,

    'AUTH_HEADER_TYPES': ('JWT',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    # 'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    # 'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}


# silky配置
# 使用Python的内置cProfile分析器
SILKY_PYTHON_PROFILER = True
# 生成.prof文件，silk产生的程序跟踪记录，详细记录来执行来哪个文件，哪一行，用了多少时间等信息
SILKY_PYTHON_PROFILER_BINARY = True
# .prof文件保存路径（最好不要像我这样设置在项目目录中）
# 如果没有本设置，prof文件将默认保存在MEDIA_ROOT里
SILKY_PYTHON_PROFILER_RESULT_PATH = os.path.join(BASE_DIR, 'logs')

