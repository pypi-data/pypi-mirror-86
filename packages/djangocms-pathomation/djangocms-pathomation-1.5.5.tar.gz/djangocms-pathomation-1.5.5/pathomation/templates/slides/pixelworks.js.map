{"version":3,"sources":["webpack://PMA/./node_modules/pixelworks/lib/processor.js","webpack://PMA/./node_modules/pixelworks/lib/index.js","webpack://PMA/./node_modules/pixelworks/lib/util.js"],"names":["newImageData","createMinion","operation","workerHasImageData","ImageData","_","newWorkerImageData","data","width","height","output","b","buffers","meta","imageOps","numBuffers","length","numBytes","byteLength","images","Array","Uint8ClampedArray","arrays","pixels","i","j","array","pixel","buffer","createWorker","config","onMessage","lines","Object","keys","lib","map","name","toString","concat","blob","Blob","type","source","URL","createObjectURL","worker","Worker","addEventListener","Processor","threads","this","_imageOps","workers","_onWorkerMessage","bind","minion","postMessage","setTimeout","createFauxWorker","_workers","_queue","_maxQueueLength","queue","Infinity","_running","_dataLookup","_job","prototype","process","inputs","callback","_enqueue","_dispatch","destroy","key","_destroyed","job","push","shift","input","segmentLength","Math","ceil","offset","slices","jj","slice","index","event","_resolveJob","set","module","exports","hasImageData","context","document","createElement","getContext","imageData","createImageData"],"mappings":"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","file":"pixelworks.js","sourcesContent":["var newImageData = require('./util').newImageData;\n\n/**\n * Create a function for running operations.  This function is serialized for\n * use in a worker.\n * @param {function(Array, Object):*} operation The operation.\n * @return {function(Object):ArrayBuffer} A function that takes an object with\n * buffers, meta, imageOps, width, and height properties and returns an array\n * buffer.\n */\nfunction createMinion(operation) {\n  var workerHasImageData = true;\n  try {\n    new ImageData(10, 10);\n  } catch (_) {\n    workerHasImageData = false;\n  }\n\n  function newWorkerImageData(data, width, height) {\n    if (workerHasImageData) {\n      return new ImageData(data, width, height);\n    } else {\n      return {data: data, width: width, height: height};\n    }\n  }\n\n  return function(data) {\n    // bracket notation for minification support\n    var buffers = data['buffers'];\n    var meta = data['meta'];\n    var imageOps = data['imageOps'];\n    var width = data['width'];\n    var height = data['height'];\n\n    var numBuffers = buffers.length;\n    var numBytes = buffers[0].byteLength;\n    var output, b;\n\n    if (imageOps) {\n      var images = new Array(numBuffers);\n      for (b = 0; b < numBuffers; ++b) {\n        images[b] = newWorkerImageData(\n            new Uint8ClampedArray(buffers[b]), width, height);\n      }\n      output = operation(images, meta).data;\n    } else {\n      output = new Uint8ClampedArray(numBytes);\n      var arrays = new Array(numBuffers);\n      var pixels = new Array(numBuffers);\n      for (b = 0; b < numBuffers; ++b) {\n        arrays[b] = new Uint8ClampedArray(buffers[b]);\n        pixels[b] = [0, 0, 0, 0];\n      }\n      for (var i = 0; i < numBytes; i += 4) {\n        for (var j = 0; j < numBuffers; ++j) {\n          var array = arrays[j];\n          pixels[j][0] = array[i];\n          pixels[j][1] = array[i + 1];\n          pixels[j][2] = array[i + 2];\n          pixels[j][3] = array[i + 3];\n        }\n        var pixel = operation(pixels, meta);\n        output[i] = pixel[0];\n        output[i + 1] = pixel[1];\n        output[i + 2] = pixel[2];\n        output[i + 3] = pixel[3];\n      }\n    }\n    return output.buffer;\n  };\n}\n\n/**\n * Create a worker for running operations.\n * @param {Object} config Configuration.\n * @param {function(MessageEvent)} onMessage Called with a message event.\n * @return {Worker} The worker.\n */\nfunction createWorker(config, onMessage) {\n  var lib = Object.keys(config.lib || {}).map(function(name) {\n    return 'var ' + name + ' = ' + config.lib[name].toString() + ';';\n  });\n\n  var lines = lib.concat([\n    'var __minion__ = (' + createMinion.toString() + ')(', config.operation.toString(), ');',\n    'self.addEventListener(\"message\", function(event) {',\n    '  var buffer = __minion__(event.data);',\n    '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);',\n    '});'\n  ]);\n\n  var blob = new Blob(lines, {type: 'text/javascript'});\n  var source = URL.createObjectURL(blob);\n  var worker = new Worker(source);\n  worker.addEventListener('message', onMessage);\n  return worker;\n}\n\n/**\n * Create a faux worker for running operations.\n * @param {Object} config Configuration.\n * @param {function(MessageEvent)} onMessage Called with a message event.\n * @return {Object} The faux worker.\n */\nfunction createFauxWorker(config, onMessage) {\n  var minion = createMinion(config.operation);\n  return {\n    postMessage: function(data) {\n      setTimeout(function() {\n        onMessage({'data': {'buffer': minion(data), 'meta': data['meta']}});\n      }, 0);\n    }\n  };\n}\n\n/**\n * A processor runs pixel or image operations in workers.\n * @param {Object} config Configuration.\n */\nfunction Processor(config) {\n  this._imageOps = !!config.imageOps;\n  var threads;\n  if (config.threads === 0) {\n    threads = 0;\n  } else if (this._imageOps) {\n    threads = 1;\n  } else {\n    threads = config.threads || 1;\n  }\n  var workers = [];\n  if (threads) {\n    for (var i = 0; i < threads; ++i) {\n      workers[i] = createWorker(config, this._onWorkerMessage.bind(this, i));\n    }\n  } else {\n    workers[0] = createFauxWorker(config, this._onWorkerMessage.bind(this, 0));\n  }\n  this._workers = workers;\n  this._queue = [];\n  this._maxQueueLength = config.queue || Infinity;\n  this._running = 0;\n  this._dataLookup = {};\n  this._job = null;\n}\n\n/**\n * Run operation on input data.\n * @param {Array.<Array|ImageData>} inputs Array of pixels or image data\n *     (depending on the operation type).\n * @param {Object} meta A user data object.  This is passed to all operations\n *     and must be serializable.\n * @param {function(Error, ImageData, Object)} callback Called when work\n *     completes.  The first argument is any error.  The second is the ImageData\n *     generated by operations.  The third is the user data object.\n */\nProcessor.prototype.process = function(inputs, meta, callback) {\n  this._enqueue({\n    inputs: inputs,\n    meta: meta,\n    callback: callback\n  });\n  this._dispatch();\n};\n\n/**\n * Stop responding to any completed work and destroy the processor.\n */\nProcessor.prototype.destroy = function() {\n  for (var key in this) {\n    this[key] = null;\n  }\n  this._destroyed = true;\n};\n\n/**\n * Add a job to the queue.\n * @param {Object} job The job.\n */\nProcessor.prototype._enqueue = function(job) {\n  this._queue.push(job);\n  while (this._queue.length > this._maxQueueLength) {\n    this._queue.shift().callback(null, null);\n  }\n};\n\n/**\n * Dispatch a job.\n */\nProcessor.prototype._dispatch = function() {\n  if (this._running === 0 && this._queue.length > 0) {\n    var job = this._job = this._queue.shift();\n    var width = job.inputs[0].width;\n    var height = job.inputs[0].height;\n    var buffers = job.inputs.map(function(input) {\n      return input.data.buffer;\n    });\n    var threads = this._workers.length;\n    this._running = threads;\n    if (threads === 1) {\n      this._workers[0].postMessage({\n        'buffers': buffers,\n        'meta': job.meta,\n        'imageOps': this._imageOps,\n        'width': width,\n        'height': height\n      }, buffers);\n    } else {\n      var length = job.inputs[0].data.length;\n      var segmentLength = 4 * Math.ceil(length / 4 / threads);\n      for (var i = 0; i < threads; ++i) {\n        var offset = i * segmentLength;\n        var slices = [];\n        for (var j = 0, jj = buffers.length; j < jj; ++j) {\n          slices.push(buffers[i].slice(offset, offset + segmentLength));\n        }\n        this._workers[i].postMessage({\n          'buffers': slices,\n          'meta': job.meta,\n          'imageOps': this._imageOps,\n          'width': width,\n          'height': height\n        }, slices);\n      }\n    }\n  }\n};\n\n/**\n * Handle messages from the worker.\n * @param {number} index The worker index.\n * @param {MessageEvent} event The message event.\n */\nProcessor.prototype._onWorkerMessage = function(index, event) {\n  if (this._destroyed) {\n    return;\n  }\n  this._dataLookup[index] = event.data;\n  --this._running;\n  if (this._running === 0) {\n    this._resolveJob();\n  }\n};\n\n/**\n * Resolve a job.  If there are no more worker threads, the processor callback\n * will be called.\n */\nProcessor.prototype._resolveJob = function() {\n  var job = this._job;\n  var threads = this._workers.length;\n  var data, meta;\n  if (threads === 1) {\n    data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);\n    meta = this._dataLookup[0]['meta'];\n  } else {\n    var length = job.inputs[0].data.length;\n    data = new Uint8ClampedArray(length);\n    meta = new Array(length);\n    var segmentLength = 4 * Math.ceil(length / 4 / threads);\n    for (var i = 0; i < threads; ++i) {\n      var buffer = this._dataLookup[i]['buffer'];\n      var offset = i * segmentLength;\n      data.set(new Uint8ClampedArray(buffer), offset);\n      meta[i] = this._dataLookup[i]['meta'];\n    }\n  }\n  this._job = null;\n  this._dataLookup = {};\n  job.callback(null,\n      newImageData(data, job.inputs[0].width, job.inputs[0].height), meta);\n  this._dispatch();\n};\n\nmodule.exports = Processor;\n","var Processor = require('./processor');\n\nexports.Processor = Processor;\n","var hasImageData = true;\ntry {\n  new ImageData(10, 10);\n} catch (_) {\n  hasImageData = false;\n}\n\nvar context = document.createElement('canvas').getContext('2d');\n\nfunction newImageData(data, width, height) {\n  if (hasImageData) {\n    return new ImageData(data, width, height);\n  } else {\n    var imageData = context.createImageData(width, height);\n    imageData.data.set(data);\n    return imageData;\n  }\n}\n\nexports.newImageData = newImageData;\n"],"sourceRoot":""}