{"version":3,"sources":["webpack://PMA/./node_modules/elm-pep/dist/elm-pep.js"],"names":["primaryTouchId","mouseCaptureTarget","addMouseToPointerListener","target","mouseType","pointerType","addEventListener","mouseEvent","pointerEvent","MouseEvent","pointerId","isPrimary","width","height","tiltX","tiltY","buttons","pressure","dispatchEvent","defaultPrevented","preventDefault","addTouchToPointerListener","touchType","touchEvent","changedTouches","nbTouches","length","t","CustomEvent","bubbles","cancelable","ctrlKey","shiftKey","altKey","metaKey","touch","item","clientX","clientY","screenX","screenY","pageX","pageY","rect","getBoundingClientRect","offsetX","left","offsetY","top","identifier","button","movementX","movementY","region","relatedTarget","x","y","window","Element","prototype","setPointerCapture","setCapture","releasePointerCapture","releaseCapture","document"],"mappings":"0FAMA,IAAIA,EAAiB,KAEjBC,EAAqB,KAqBzB,SAASC,EAA0BC,EAAQC,EAAWC,GAClDF,EAAOG,iBAAiBF,GAAW,SAAUG,GACzC,IAAIC,EAAe,IAAIC,WAAWJ,EAAaE,GAC/CC,EAAaE,UAAY,EACzBF,EAAaG,WAAY,EACzBH,EAAaH,YAAc,QAC3BG,EAAaI,MAAQ,EACrBJ,EAAaK,OAAS,EACtBL,EAAaM,MAAQ,EACrBN,EAAaO,MAAQ,EAErB,YAAaR,GAAqC,IAAvBA,EAAWS,QAC/BR,EAAaS,SAAW,GACxBT,EAAaS,SAAW,EAG/B,IAAId,EAASI,EAAWJ,OACG,OAAvBF,IACAE,EAASF,EACS,YAAdG,IACAH,EAAqB,OAG7BE,EAAOe,cAAcV,GACjBA,EAAaW,kBACbZ,EAAWa,oBAKvB,SAASC,EAA0BlB,EAAQmB,EAAWjB,GAClDF,EAAOG,iBAAiBgB,GAAW,SAAUC,GAGzC,IAFA,IAAIC,EAAiBD,EAAWC,eAC5BC,EAAYD,EAAeE,OACtBC,EAAI,EAAGA,EAAIF,EAAWE,IAAK,CAChC,IAAInB,EAAe,IAAIoB,YAAYvB,EAAa,CAC5CwB,SAAS,EACTC,YAAY,IAEhBtB,EAAauB,QAAUR,EAAWQ,QAClCvB,EAAawB,SAAWT,EAAWS,SACnCxB,EAAayB,OAASV,EAAWU,OACjCzB,EAAa0B,QAAUX,EAAWW,QAClC,IAAIC,EAAQX,EAAeY,KAAKT,GAChCnB,EAAa6B,QAAUF,EAAME,QAC7B7B,EAAa8B,QAAUH,EAAMG,QAC7B9B,EAAa+B,QAAUJ,EAAMI,QAC7B/B,EAAagC,QAAUL,EAAMK,QAC7BhC,EAAaiC,MAAQN,EAAMM,MAC3BjC,EAAakC,MAAQP,EAAMO,MAC3B,IAAIC,EAAOR,EAAMhC,OAAOyC,wBACxBpC,EAAaqC,QAAUV,EAAME,QAAUM,EAAKG,KAC5CtC,EAAauC,QAAUZ,EAAMG,QAAUK,EAAKK,IAC5CxC,EAAaE,UAAY,EAAIyB,EAAMc,WAEnCzC,EAAa0C,OAAS,EACtB1C,EAAaQ,QAAU,EACvBR,EAAa2C,UAAY,EACzB3C,EAAa4C,UAAY,EACzB5C,EAAa6C,OAAS,KACtB7C,EAAa8C,cAAgB,KAC7B9C,EAAa+C,EAAI/C,EAAa6B,QAC9B7B,EAAagD,EAAIhD,EAAa8B,QAE9B9B,EAAaH,YAAc,QAC3BG,EAAaI,MAAQ,EACrBJ,EAAaK,OAAS,EACtBL,EAAaM,MAAQ,EACrBN,EAAaO,MAAQ,EACrBP,EAAaS,SAAW,EAEN,eAAdK,GAAiD,OAAnBtB,IAC9BA,EAAiBmC,EAAMc,YAE3BzC,EAAaG,UAAYwB,EAAMc,aAAejD,EAE5B,aAAdsB,GAA4Bd,EAAaG,YACzCX,EAAiB,MAErBuB,EAAWpB,OAAOe,cAAcV,GAC5BA,EAAaW,kBACbI,EAAWH,qBArGrB,iBAAkBqC,SAgBpBC,QAAQC,UAAUC,kBAAoBF,QAAQC,UAAUE,WACxDH,QAAQC,UAAUG,sBAAwBJ,QAAQC,UAAUI,eAbtD,eAAgBN,SAClBvD,EAA0B8D,SAAU,YAAa,eACjD9D,EAA0B8D,SAAU,YAAa,eACjD9D,EAA0B8D,SAAU,UAAW,cAGnD3C,EAA0B2C,SAAU,aAAc,eAClD3C,EAA0B2C,SAAU,YAAa,eACjD3C,EAA0B2C,SAAU,WAAY","file":"elm-pep.js","sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n// Variable to hold current primary touch event identifier.\n// iOS needs this since it does not attribute\n// identifier 0 to primary touch event.\nvar primaryTouchId = null;\n// Variable to hold mouse pointer captures.\nvar mouseCaptureTarget = null;\nif (!(\"PointerEvent\" in window)) {\n    // Define {set,release}PointerCapture\n    definePointerCapture();\n    // Create Pointer polyfill from mouse events only on non-touch device\n    if (!(\"TouchEvent\" in window)) {\n        addMouseToPointerListener(document, \"mousedown\", \"pointerdown\");\n        addMouseToPointerListener(document, \"mousemove\", \"pointermove\");\n        addMouseToPointerListener(document, \"mouseup\", \"pointerup\");\n    }\n    // Define Pointer polyfill from touch events\n    addTouchToPointerListener(document, \"touchstart\", \"pointerdown\");\n    addTouchToPointerListener(document, \"touchmove\", \"pointermove\");\n    addTouchToPointerListener(document, \"touchend\", \"pointerup\");\n}\n// Function defining {set,release}PointerCapture from {set,releas}Capture\nfunction definePointerCapture() {\n    Element.prototype.setPointerCapture = Element.prototype.setCapture;\n    Element.prototype.releasePointerCapture = Element.prototype.releaseCapture;\n}\n// Function converting a Mouse event to a Pointer event.\nfunction addMouseToPointerListener(target, mouseType, pointerType) {\n    target.addEventListener(mouseType, function (mouseEvent) {\n        var pointerEvent = new MouseEvent(pointerType, mouseEvent);\n        pointerEvent.pointerId = 1;\n        pointerEvent.isPrimary = true;\n        pointerEvent.pointerType = \"mouse\";\n        pointerEvent.width = 1;\n        pointerEvent.height = 1;\n        pointerEvent.tiltX = 0;\n        pointerEvent.tiltY = 0;\n        // pressure is 0.5 if a button is holded\n        \"buttons\" in mouseEvent && mouseEvent.buttons !== 0\n            ? (pointerEvent.pressure = 0.5)\n            : (pointerEvent.pressure = 0);\n        // if already capturing mouse event, transfer target\n        // and don't forget implicit release on mouseup.\n        var target = mouseEvent.target;\n        if (mouseCaptureTarget !== null) {\n            target = mouseCaptureTarget;\n            if (mouseType === \"mouseup\") {\n                mouseCaptureTarget = null;\n            }\n        }\n        target.dispatchEvent(pointerEvent);\n        if (pointerEvent.defaultPrevented) {\n            mouseEvent.preventDefault();\n        }\n    });\n}\n// Function converting a Touch event to a Pointer event.\nfunction addTouchToPointerListener(target, touchType, pointerType) {\n    target.addEventListener(touchType, function (touchEvent) {\n        var changedTouches = touchEvent.changedTouches;\n        var nbTouches = changedTouches.length;\n        for (var t = 0; t < nbTouches; t++) {\n            var pointerEvent = new CustomEvent(pointerType, {\n                bubbles: true,\n                cancelable: true\n            });\n            pointerEvent.ctrlKey = touchEvent.ctrlKey;\n            pointerEvent.shiftKey = touchEvent.shiftKey;\n            pointerEvent.altKey = touchEvent.altKey;\n            pointerEvent.metaKey = touchEvent.metaKey;\n            var touch = changedTouches.item(t);\n            pointerEvent.clientX = touch.clientX;\n            pointerEvent.clientY = touch.clientY;\n            pointerEvent.screenX = touch.screenX;\n            pointerEvent.screenY = touch.screenY;\n            pointerEvent.pageX = touch.pageX;\n            pointerEvent.pageY = touch.pageY;\n            var rect = touch.target.getBoundingClientRect();\n            pointerEvent.offsetX = touch.clientX - rect.left;\n            pointerEvent.offsetY = touch.clientY - rect.top;\n            pointerEvent.pointerId = 1 + touch.identifier;\n            // Default values for standard MouseEvent fields.\n            pointerEvent.button = 0;\n            pointerEvent.buttons = 1;\n            pointerEvent.movementX = 0;\n            pointerEvent.movementY = 0;\n            pointerEvent.region = null;\n            pointerEvent.relatedTarget = null;\n            pointerEvent.x = pointerEvent.clientX;\n            pointerEvent.y = pointerEvent.clientY;\n            // Pointer event details\n            pointerEvent.pointerType = \"touch\";\n            pointerEvent.width = 1;\n            pointerEvent.height = 1;\n            pointerEvent.tiltX = 0;\n            pointerEvent.tiltY = 0;\n            pointerEvent.pressure = 1;\n            // First touch is the primary pointer event.\n            if (touchType === \"touchstart\" && primaryTouchId === null) {\n                primaryTouchId = touch.identifier;\n            }\n            pointerEvent.isPrimary = touch.identifier === primaryTouchId;\n            // If first touch ends, reset primary touch id.\n            if (touchType === \"touchend\" && pointerEvent.isPrimary) {\n                primaryTouchId = null;\n            }\n            touchEvent.target.dispatchEvent(pointerEvent);\n            if (pointerEvent.defaultPrevented) {\n                touchEvent.preventDefault();\n            }\n        }\n    });\n}\n//# sourceMappingURL=elm-pep.js.map"],"sourceRoot":""}