# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: intentionet/bfe/proto/datamodel/flow.proto

from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from intentionet.bfe.proto.datamodel import ip_primitives_pb2 as intentionet_dot_bfe_dot_proto_dot_datamodel_dot_ip__primitives__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='intentionet/bfe/proto/datamodel/flow.proto',
  package='com.intentionet.datamodel',
  syntax='proto3',
  serialized_options=b'P\001Z\004flow',
  serialized_pb=b'\n*intentionet/bfe/proto/datamodel/flow.proto\x12\x19\x63om.intentionet.datamodel\x1a\x33intentionet/bfe/proto/datamodel/ip_primitives.proto\"|\n\nIcmpHeader\x12\x36\n\ticmp_type\x18\x01 \x01(\x0b\x32#.com.intentionet.datamodel.IcmpType\x12\x36\n\ticmp_code\x18\x02 \x01(\x0b\x32#.com.intentionet.datamodel.IcmpCode\"\xa9\x01\n\tTcpHeader\x12\x31\n\x08src_port\x18\x01 \x01(\x0b\x32\x1f.com.intentionet.datamodel.Port\x12\x31\n\x08\x64st_port\x18\x02 \x01(\x0b\x32\x1f.com.intentionet.datamodel.Port\x12\x36\n\ttcp_flags\x18\x03 \x01(\x0b\x32#.com.intentionet.datamodel.TcpFlags\"q\n\tUdpHeader\x12\x31\n\x08src_port\x18\x01 \x01(\x0b\x32\x1f.com.intentionet.datamodel.Port\x12\x31\n\x08\x64st_port\x18\x02 \x01(\x0b\x32\x1f.com.intentionet.datamodel.Port\"\xe5\x03\n\x04\x46low\x12\x19\n\x11ingress_interface\x18\x01 \x01(\t\x12\x14\n\x0cingress_node\x18\x02 \x01(\t\x12\x13\n\x0bingress_vrf\x18\x03 \x01(\t\x12-\n\x06src_ip\x18\x04 \x01(\x0b\x32\x1d.com.intentionet.datamodel.Ip\x12-\n\x06\x64st_ip\x18\x05 \x01(\x0b\x32\x1d.com.intentionet.datamodel.Ip\x12\x0c\n\x04\x64scp\x18\x06 \x01(\r\x12\x0b\n\x03\x65\x63n\x18\x07 \x01(\r\x12\x17\n\x0f\x66ragment_offset\x18\x08 \x01(\r\x12\x15\n\rpacket_length\x18\t \x01(\r\x12:\n\x0bip_protocol\x18\n \x01(\x0b\x32%.com.intentionet.datamodel.IpProtocol\x12\x35\n\x04icmp\x18\x0b \x01(\x0b\x32%.com.intentionet.datamodel.IcmpHeaderH\x00\x12\x33\n\x03tcp\x18\x0c \x01(\x0b\x32$.com.intentionet.datamodel.TcpHeaderH\x00\x12\x33\n\x03udp\x18\r \x01(\x0b\x32$.com.intentionet.datamodel.UdpHeaderH\x00\x42\x11\n\x0fprotocol_header*\x8c\x03\n\x0f\x46lowDisposition\x12\x1c\n\x18\x46LOW_DISPOSITION_UNKNOWN\x10\x00\x12\x1d\n\x19\x46LOW_DISPOSITION_ACCEPTED\x10\x01\x12(\n$FLOW_DISPOSITION_DELIVERED_TO_SUBNET\x10\x02\x12\"\n\x1e\x46LOW_DISPOSITION_EXITS_NETWORK\x10\x03\x12\x1e\n\x1a\x46LOW_DISPOSITION_DENIED_IN\x10\x04\x12\x1f\n\x1b\x46LOW_DISPOSITION_DENIED_OUT\x10\x05\x12\x1d\n\x19\x46LOW_DISPOSITION_NO_ROUTE\x10\x06\x12 \n\x1c\x46LOW_DISPOSITION_NULL_ROUTED\x10\x07\x12)\n%FLOW_DISPOSITION_NEIGHBOR_UNREACHABLE\x10\x08\x12\x19\n\x15\x46LOW_DISPOSITION_LOOP\x10\t\x12&\n\"FLOW_DISPOSITION_INSUFFICIENT_INFO\x10\nB\x08P\x01Z\x04\x66lowb\x06proto3'
  ,
  dependencies=[intentionet_dot_bfe_dot_proto_dot_datamodel_dot_ip__primitives__pb2.DESCRIPTOR,])

_FLOWDISPOSITION = _descriptor.EnumDescriptor(
  name='FlowDisposition',
  full_name='com.intentionet.datamodel.FlowDisposition',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='FLOW_DISPOSITION_UNKNOWN', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLOW_DISPOSITION_ACCEPTED', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLOW_DISPOSITION_DELIVERED_TO_SUBNET', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLOW_DISPOSITION_EXITS_NETWORK', index=3, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLOW_DISPOSITION_DENIED_IN', index=4, number=4,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLOW_DISPOSITION_DENIED_OUT', index=5, number=5,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLOW_DISPOSITION_NO_ROUTE', index=6, number=6,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLOW_DISPOSITION_NULL_ROUTED', index=7, number=7,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLOW_DISPOSITION_NEIGHBOR_UNREACHABLE', index=8, number=8,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLOW_DISPOSITION_LOOP', index=9, number=9,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FLOW_DISPOSITION_INSUFFICIENT_INFO', index=10, number=10,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1028,
  serialized_end=1424,
)
_sym_db.RegisterEnumDescriptor(_FLOWDISPOSITION)

FlowDisposition = enum_type_wrapper.EnumTypeWrapper(_FLOWDISPOSITION)
FLOW_DISPOSITION_UNKNOWN = 0
FLOW_DISPOSITION_ACCEPTED = 1
FLOW_DISPOSITION_DELIVERED_TO_SUBNET = 2
FLOW_DISPOSITION_EXITS_NETWORK = 3
FLOW_DISPOSITION_DENIED_IN = 4
FLOW_DISPOSITION_DENIED_OUT = 5
FLOW_DISPOSITION_NO_ROUTE = 6
FLOW_DISPOSITION_NULL_ROUTED = 7
FLOW_DISPOSITION_NEIGHBOR_UNREACHABLE = 8
FLOW_DISPOSITION_LOOP = 9
FLOW_DISPOSITION_INSUFFICIENT_INFO = 10



_ICMPHEADER = _descriptor.Descriptor(
  name='IcmpHeader',
  full_name='com.intentionet.datamodel.IcmpHeader',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='icmp_type', full_name='com.intentionet.datamodel.IcmpHeader.icmp_type', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='icmp_code', full_name='com.intentionet.datamodel.IcmpHeader.icmp_code', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=126,
  serialized_end=250,
)


_TCPHEADER = _descriptor.Descriptor(
  name='TcpHeader',
  full_name='com.intentionet.datamodel.TcpHeader',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='src_port', full_name='com.intentionet.datamodel.TcpHeader.src_port', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='dst_port', full_name='com.intentionet.datamodel.TcpHeader.dst_port', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='tcp_flags', full_name='com.intentionet.datamodel.TcpHeader.tcp_flags', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=253,
  serialized_end=422,
)


_UDPHEADER = _descriptor.Descriptor(
  name='UdpHeader',
  full_name='com.intentionet.datamodel.UdpHeader',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='src_port', full_name='com.intentionet.datamodel.UdpHeader.src_port', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='dst_port', full_name='com.intentionet.datamodel.UdpHeader.dst_port', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=424,
  serialized_end=537,
)


_FLOW = _descriptor.Descriptor(
  name='Flow',
  full_name='com.intentionet.datamodel.Flow',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ingress_interface', full_name='com.intentionet.datamodel.Flow.ingress_interface', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ingress_node', full_name='com.intentionet.datamodel.Flow.ingress_node', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ingress_vrf', full_name='com.intentionet.datamodel.Flow.ingress_vrf', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='src_ip', full_name='com.intentionet.datamodel.Flow.src_ip', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='dst_ip', full_name='com.intentionet.datamodel.Flow.dst_ip', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='dscp', full_name='com.intentionet.datamodel.Flow.dscp', index=5,
      number=6, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ecn', full_name='com.intentionet.datamodel.Flow.ecn', index=6,
      number=7, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='fragment_offset', full_name='com.intentionet.datamodel.Flow.fragment_offset', index=7,
      number=8, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='packet_length', full_name='com.intentionet.datamodel.Flow.packet_length', index=8,
      number=9, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ip_protocol', full_name='com.intentionet.datamodel.Flow.ip_protocol', index=9,
      number=10, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='icmp', full_name='com.intentionet.datamodel.Flow.icmp', index=10,
      number=11, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='tcp', full_name='com.intentionet.datamodel.Flow.tcp', index=11,
      number=12, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='udp', full_name='com.intentionet.datamodel.Flow.udp', index=12,
      number=13, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='protocol_header', full_name='com.intentionet.datamodel.Flow.protocol_header',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=540,
  serialized_end=1025,
)

_ICMPHEADER.fields_by_name['icmp_type'].message_type = intentionet_dot_bfe_dot_proto_dot_datamodel_dot_ip__primitives__pb2._ICMPTYPE
_ICMPHEADER.fields_by_name['icmp_code'].message_type = intentionet_dot_bfe_dot_proto_dot_datamodel_dot_ip__primitives__pb2._ICMPCODE
_TCPHEADER.fields_by_name['src_port'].message_type = intentionet_dot_bfe_dot_proto_dot_datamodel_dot_ip__primitives__pb2._PORT
_TCPHEADER.fields_by_name['dst_port'].message_type = intentionet_dot_bfe_dot_proto_dot_datamodel_dot_ip__primitives__pb2._PORT
_TCPHEADER.fields_by_name['tcp_flags'].message_type = intentionet_dot_bfe_dot_proto_dot_datamodel_dot_ip__primitives__pb2._TCPFLAGS
_UDPHEADER.fields_by_name['src_port'].message_type = intentionet_dot_bfe_dot_proto_dot_datamodel_dot_ip__primitives__pb2._PORT
_UDPHEADER.fields_by_name['dst_port'].message_type = intentionet_dot_bfe_dot_proto_dot_datamodel_dot_ip__primitives__pb2._PORT
_FLOW.fields_by_name['src_ip'].message_type = intentionet_dot_bfe_dot_proto_dot_datamodel_dot_ip__primitives__pb2._IP
_FLOW.fields_by_name['dst_ip'].message_type = intentionet_dot_bfe_dot_proto_dot_datamodel_dot_ip__primitives__pb2._IP
_FLOW.fields_by_name['ip_protocol'].message_type = intentionet_dot_bfe_dot_proto_dot_datamodel_dot_ip__primitives__pb2._IPPROTOCOL
_FLOW.fields_by_name['icmp'].message_type = _ICMPHEADER
_FLOW.fields_by_name['tcp'].message_type = _TCPHEADER
_FLOW.fields_by_name['udp'].message_type = _UDPHEADER
_FLOW.oneofs_by_name['protocol_header'].fields.append(
  _FLOW.fields_by_name['icmp'])
_FLOW.fields_by_name['icmp'].containing_oneof = _FLOW.oneofs_by_name['protocol_header']
_FLOW.oneofs_by_name['protocol_header'].fields.append(
  _FLOW.fields_by_name['tcp'])
_FLOW.fields_by_name['tcp'].containing_oneof = _FLOW.oneofs_by_name['protocol_header']
_FLOW.oneofs_by_name['protocol_header'].fields.append(
  _FLOW.fields_by_name['udp'])
_FLOW.fields_by_name['udp'].containing_oneof = _FLOW.oneofs_by_name['protocol_header']
DESCRIPTOR.message_types_by_name['IcmpHeader'] = _ICMPHEADER
DESCRIPTOR.message_types_by_name['TcpHeader'] = _TCPHEADER
DESCRIPTOR.message_types_by_name['UdpHeader'] = _UDPHEADER
DESCRIPTOR.message_types_by_name['Flow'] = _FLOW
DESCRIPTOR.enum_types_by_name['FlowDisposition'] = _FLOWDISPOSITION
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

IcmpHeader = _reflection.GeneratedProtocolMessageType('IcmpHeader', (_message.Message,), {
  'DESCRIPTOR' : _ICMPHEADER,
  '__module__' : 'intentionet.bfe.proto.datamodel.flow_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.datamodel.IcmpHeader)
  })
_sym_db.RegisterMessage(IcmpHeader)

TcpHeader = _reflection.GeneratedProtocolMessageType('TcpHeader', (_message.Message,), {
  'DESCRIPTOR' : _TCPHEADER,
  '__module__' : 'intentionet.bfe.proto.datamodel.flow_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.datamodel.TcpHeader)
  })
_sym_db.RegisterMessage(TcpHeader)

UdpHeader = _reflection.GeneratedProtocolMessageType('UdpHeader', (_message.Message,), {
  'DESCRIPTOR' : _UDPHEADER,
  '__module__' : 'intentionet.bfe.proto.datamodel.flow_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.datamodel.UdpHeader)
  })
_sym_db.RegisterMessage(UdpHeader)

Flow = _reflection.GeneratedProtocolMessageType('Flow', (_message.Message,), {
  'DESCRIPTOR' : _FLOW,
  '__module__' : 'intentionet.bfe.proto.datamodel.flow_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.datamodel.Flow)
  })
_sym_db.RegisterMessage(Flow)


DESCRIPTOR._options = None
# @@protoc_insertion_point(module_scope)
