Metadata-Version: 2.1
Name: pyecs
Version: 0.18
Summary: A simple implementation of the Entity-Component pattern.
Home-page: https://github.com/timfi/pyecs
Author: Tim Fischer
Author-email: me@timfi.dev
License: MIT
Description: # pyecs
        _A simple implementation of the Entity-Component pattern._
        
        [![PyPI - Version](https://img.shields.io/pypi/v/pyecs)](https://pypi.org/project/pyecs)
        [![PyPI - Status](https://img.shields.io/pypi/status/pyecs)](https://pypi.org/project/pyecs)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pyecs)](https://pypi.org/project/pyecs)
        [![PyPI - License](https://img.shields.io/pypi/l/pyecs)](https://opensource.org/licenses/MIT)
        
        [![Build Status](https://img.shields.io/github/workflow/status/tim-fi/pyecs/Tests?logo=github)](https://github.com/tim-fi/pyecs/actions?query=workflow%3ATests)
        [![codecov](https://codecov.io/gh/tim-fi/pyecs/branch/master/graph/badge.svg)](https://codecov.io/gh/tim-fi/pyecs)
        [![codebeat badge](https://codebeat.co/badges/f8f52571-da05-4615-8ab8-6fee01f258cc)](https://codebeat.co/projects/github-com-tim-fi-pyecs-master)
        [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)
        [![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)
        
        ## Install
        This project is available on [PyPI](https://pypi.org/project/pyecs) so you can simply install it via
        ```sh
        pip install pyecs
        ```
        
        ## Example
        ```python
        from dataclasses import dataclass
        from typing import Tuple
        
        from pyecs import Store
        
        # 1. build your components
        @dataclass
        class Transform:
            position: Tuple[float, float] = (0.0, 0.0)
        
        
        @dataclass
        class Rigidbody:
            velocity: Tuple[float, float] = (0.0, 0.0)
            acceleration: Tuple[float, float] = (0.0, 0.0)
        
        
        if __name__ == "__main__":
            # 2. intialize entity-component store
            store = Store()
        
            # 3. add some entities
            scene = store.add_entity()
            scene.add_child(Transform(), Rigidbody(acceleration=(1.0, 0.0)))
            scene.add_child(Transform(), Rigidbody(acceleration=(0.0, 1.0)))
            scene.add_child(Transform(), Rigidbody(acceleration=(1.0, 1.0)))
        
            # 4. run everything
            while True:
                for entity in store.get_entities_with(Transform, Rigidbody):
                    transform, rigidbody = entity.get_components(Transform, Rigidbody)
                    rigidbody.velocity = (
                        rigidbody.velocity[0] + rigidbody.acceleration[0],
                        rigidbody.velocity[1] + rigidbody.acceleration[1],
                    )
                    transform.position = (
                        transform.position[0] + rigidbody.velocity[0],
                        transform.position[1] + rigidbody.velocity[1],
                    )
                    print(f"{transform=}\t{rigidbody=}")
        ```
        
        
        ## Dev Setup
        Simply install [pipenv](https://docs.pipenv.org/en/latest/) and run the following line:
        ```sh
        pipenv install --dev
        ```
        
        MIT License
        
        Copyright (c) 2020 Tim Fischer
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Operating System :: OS Independent
Classifier: Topic :: Games/Entertainment
Classifier: Typing :: Typed
Requires-Python: >=3.8
Description-Content-Type: text/markdown
