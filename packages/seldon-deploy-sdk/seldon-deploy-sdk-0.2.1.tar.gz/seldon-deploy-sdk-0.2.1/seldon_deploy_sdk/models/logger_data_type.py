# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LoggerDataType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment': 'str',
        'env': 'list[EnvVar]',
        'envstring': 'str',
        'image': 'str',
        'kind': 'str',
        'label': 'str',
        'name': 'str',
        'namespace': 'str',
        'url': 'str'
    }

    attribute_map = {
        'deployment': 'deployment',
        'env': 'env',
        'envstring': 'envstring',
        'image': 'image',
        'kind': 'kind',
        'label': 'label',
        'name': 'name',
        'namespace': 'namespace',
        'url': 'url'
    }

    def __init__(self, deployment=None, env=None, envstring=None, image=None, kind=None, label=None, name=None, namespace=None, url=None):  # noqa: E501
        """LoggerDataType - a model defined in Swagger"""  # noqa: E501

        self._deployment = None
        self._env = None
        self._envstring = None
        self._image = None
        self._kind = None
        self._label = None
        self._name = None
        self._namespace = None
        self._url = None
        self.discriminator = None

        if deployment is not None:
            self.deployment = deployment
        if env is not None:
            self.env = env
        if envstring is not None:
            self.envstring = envstring
        if image is not None:
            self.image = image
        if kind is not None:
            self.kind = kind
        if label is not None:
            self.label = label
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if url is not None:
            self.url = url

    @property
    def deployment(self):
        """Gets the deployment of this LoggerDataType.  # noqa: E501


        :return: The deployment of this LoggerDataType.  # noqa: E501
        :rtype: str
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this LoggerDataType.


        :param deployment: The deployment of this LoggerDataType.  # noqa: E501
        :type: str
        """

        self._deployment = deployment

    @property
    def env(self):
        """Gets the env of this LoggerDataType.  # noqa: E501


        :return: The env of this LoggerDataType.  # noqa: E501
        :rtype: list[EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this LoggerDataType.


        :param env: The env of this LoggerDataType.  # noqa: E501
        :type: list[EnvVar]
        """

        self._env = env

    @property
    def envstring(self):
        """Gets the envstring of this LoggerDataType.  # noqa: E501


        :return: The envstring of this LoggerDataType.  # noqa: E501
        :rtype: str
        """
        return self._envstring

    @envstring.setter
    def envstring(self, envstring):
        """Sets the envstring of this LoggerDataType.


        :param envstring: The envstring of this LoggerDataType.  # noqa: E501
        :type: str
        """

        self._envstring = envstring

    @property
    def image(self):
        """Gets the image of this LoggerDataType.  # noqa: E501


        :return: The image of this LoggerDataType.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this LoggerDataType.


        :param image: The image of this LoggerDataType.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def kind(self):
        """Gets the kind of this LoggerDataType.  # noqa: E501


        :return: The kind of this LoggerDataType.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LoggerDataType.


        :param kind: The kind of this LoggerDataType.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def label(self):
        """Gets the label of this LoggerDataType.  # noqa: E501


        :return: The label of this LoggerDataType.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LoggerDataType.


        :param label: The label of this LoggerDataType.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """Gets the name of this LoggerDataType.  # noqa: E501


        :return: The name of this LoggerDataType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoggerDataType.


        :param name: The name of this LoggerDataType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this LoggerDataType.  # noqa: E501


        :return: The namespace of this LoggerDataType.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this LoggerDataType.


        :param namespace: The namespace of this LoggerDataType.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def url(self):
        """Gets the url of this LoggerDataType.  # noqa: E501


        :return: The url of this LoggerDataType.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LoggerDataType.


        :param url: The url of this LoggerDataType.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoggerDataType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoggerDataType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
