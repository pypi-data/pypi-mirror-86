# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AlibiDetectorData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment': 'str',
        'deployment_namespace': 'str',
        'namespace': 'str',
        'params': 'AlibiDetectServerParams',
        'prom_scraping': 'bool',
        'url': 'str'
    }

    attribute_map = {
        'deployment': 'deployment',
        'deployment_namespace': 'deployment_namespace',
        'namespace': 'namespace',
        'params': 'params',
        'prom_scraping': 'prom_scraping',
        'url': 'url'
    }

    def __init__(self, deployment=None, deployment_namespace=None, namespace=None, params=None, prom_scraping=None, url=None):  # noqa: E501
        """AlibiDetectorData - a model defined in Swagger"""  # noqa: E501

        self._deployment = None
        self._deployment_namespace = None
        self._namespace = None
        self._params = None
        self._prom_scraping = None
        self._url = None
        self.discriminator = None

        if deployment is not None:
            self.deployment = deployment
        if deployment_namespace is not None:
            self.deployment_namespace = deployment_namespace
        if namespace is not None:
            self.namespace = namespace
        if params is not None:
            self.params = params
        if prom_scraping is not None:
            self.prom_scraping = prom_scraping
        if url is not None:
            self.url = url

    @property
    def deployment(self):
        """Gets the deployment of this AlibiDetectorData.  # noqa: E501


        :return: The deployment of this AlibiDetectorData.  # noqa: E501
        :rtype: str
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this AlibiDetectorData.


        :param deployment: The deployment of this AlibiDetectorData.  # noqa: E501
        :type: str
        """

        self._deployment = deployment

    @property
    def deployment_namespace(self):
        """Gets the deployment_namespace of this AlibiDetectorData.  # noqa: E501


        :return: The deployment_namespace of this AlibiDetectorData.  # noqa: E501
        :rtype: str
        """
        return self._deployment_namespace

    @deployment_namespace.setter
    def deployment_namespace(self, deployment_namespace):
        """Sets the deployment_namespace of this AlibiDetectorData.


        :param deployment_namespace: The deployment_namespace of this AlibiDetectorData.  # noqa: E501
        :type: str
        """

        self._deployment_namespace = deployment_namespace

    @property
    def namespace(self):
        """Gets the namespace of this AlibiDetectorData.  # noqa: E501


        :return: The namespace of this AlibiDetectorData.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this AlibiDetectorData.


        :param namespace: The namespace of this AlibiDetectorData.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def params(self):
        """Gets the params of this AlibiDetectorData.  # noqa: E501


        :return: The params of this AlibiDetectorData.  # noqa: E501
        :rtype: AlibiDetectServerParams
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this AlibiDetectorData.


        :param params: The params of this AlibiDetectorData.  # noqa: E501
        :type: AlibiDetectServerParams
        """

        self._params = params

    @property
    def prom_scraping(self):
        """Gets the prom_scraping of this AlibiDetectorData.  # noqa: E501


        :return: The prom_scraping of this AlibiDetectorData.  # noqa: E501
        :rtype: bool
        """
        return self._prom_scraping

    @prom_scraping.setter
    def prom_scraping(self, prom_scraping):
        """Sets the prom_scraping of this AlibiDetectorData.


        :param prom_scraping: The prom_scraping of this AlibiDetectorData.  # noqa: E501
        :type: bool
        """

        self._prom_scraping = prom_scraping

    @property
    def url(self):
        """Gets the url of this AlibiDetectorData.  # noqa: E501


        :return: The url of this AlibiDetectorData.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AlibiDetectorData.


        :param url: The url of this AlibiDetectorData.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlibiDetectorData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlibiDetectorData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
