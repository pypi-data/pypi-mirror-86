# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GitCommit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author_name': 'str',
        'author_when': 'datetime',
        'committer_name': 'str',
        'committer_when': 'datetime',
        'hash': 'str'
    }

    attribute_map = {
        'author_name': 'AuthorName',
        'author_when': 'AuthorWhen',
        'committer_name': 'CommitterName',
        'committer_when': 'CommitterWhen',
        'hash': 'Hash'
    }

    def __init__(self, author_name=None, author_when=None, committer_name=None, committer_when=None, hash=None):  # noqa: E501
        """GitCommit - a model defined in Swagger"""  # noqa: E501

        self._author_name = None
        self._author_when = None
        self._committer_name = None
        self._committer_when = None
        self._hash = None
        self.discriminator = None

        if author_name is not None:
            self.author_name = author_name
        if author_when is not None:
            self.author_when = author_when
        if committer_name is not None:
            self.committer_name = committer_name
        if committer_when is not None:
            self.committer_when = committer_when
        if hash is not None:
            self.hash = hash

    @property
    def author_name(self):
        """Gets the author_name of this GitCommit.  # noqa: E501


        :return: The author_name of this GitCommit.  # noqa: E501
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this GitCommit.


        :param author_name: The author_name of this GitCommit.  # noqa: E501
        :type: str
        """

        self._author_name = author_name

    @property
    def author_when(self):
        """Gets the author_when of this GitCommit.  # noqa: E501


        :return: The author_when of this GitCommit.  # noqa: E501
        :rtype: datetime
        """
        return self._author_when

    @author_when.setter
    def author_when(self, author_when):
        """Sets the author_when of this GitCommit.


        :param author_when: The author_when of this GitCommit.  # noqa: E501
        :type: datetime
        """

        self._author_when = author_when

    @property
    def committer_name(self):
        """Gets the committer_name of this GitCommit.  # noqa: E501


        :return: The committer_name of this GitCommit.  # noqa: E501
        :rtype: str
        """
        return self._committer_name

    @committer_name.setter
    def committer_name(self, committer_name):
        """Sets the committer_name of this GitCommit.


        :param committer_name: The committer_name of this GitCommit.  # noqa: E501
        :type: str
        """

        self._committer_name = committer_name

    @property
    def committer_when(self):
        """Gets the committer_when of this GitCommit.  # noqa: E501


        :return: The committer_when of this GitCommit.  # noqa: E501
        :rtype: datetime
        """
        return self._committer_when

    @committer_when.setter
    def committer_when(self, committer_when):
        """Sets the committer_when of this GitCommit.


        :param committer_when: The committer_when of this GitCommit.  # noqa: E501
        :type: datetime
        """

        self._committer_when = committer_when

    @property
    def hash(self):
        """Gets the hash of this GitCommit.  # noqa: E501


        :return: The hash of this GitCommit.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this GitCommit.


        :param hash: The hash of this GitCommit.  # noqa: E501
        :type: str
        """

        self._hash = hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GitCommit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GitCommit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
