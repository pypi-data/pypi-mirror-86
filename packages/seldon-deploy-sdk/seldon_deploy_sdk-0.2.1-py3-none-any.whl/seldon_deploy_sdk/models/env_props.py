# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EnvProps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analytics_props': 'AnalyticsProps',
        'cluster_info': 'ClusterInfo',
        'custom_theme': 'CustomThemeConfig',
        'user_info': 'UserInfo',
        'version_info': 'VersionInfo'
    }

    attribute_map = {
        'analytics_props': 'analyticsProps',
        'cluster_info': 'clusterInfo',
        'custom_theme': 'customTheme',
        'user_info': 'userInfo',
        'version_info': 'versionInfo'
    }

    def __init__(self, analytics_props=None, cluster_info=None, custom_theme=None, user_info=None, version_info=None):  # noqa: E501
        """EnvProps - a model defined in Swagger"""  # noqa: E501

        self._analytics_props = None
        self._cluster_info = None
        self._custom_theme = None
        self._user_info = None
        self._version_info = None
        self.discriminator = None

        if analytics_props is not None:
            self.analytics_props = analytics_props
        if cluster_info is not None:
            self.cluster_info = cluster_info
        if custom_theme is not None:
            self.custom_theme = custom_theme
        if user_info is not None:
            self.user_info = user_info
        if version_info is not None:
            self.version_info = version_info

    @property
    def analytics_props(self):
        """Gets the analytics_props of this EnvProps.  # noqa: E501


        :return: The analytics_props of this EnvProps.  # noqa: E501
        :rtype: AnalyticsProps
        """
        return self._analytics_props

    @analytics_props.setter
    def analytics_props(self, analytics_props):
        """Sets the analytics_props of this EnvProps.


        :param analytics_props: The analytics_props of this EnvProps.  # noqa: E501
        :type: AnalyticsProps
        """

        self._analytics_props = analytics_props

    @property
    def cluster_info(self):
        """Gets the cluster_info of this EnvProps.  # noqa: E501


        :return: The cluster_info of this EnvProps.  # noqa: E501
        :rtype: ClusterInfo
        """
        return self._cluster_info

    @cluster_info.setter
    def cluster_info(self, cluster_info):
        """Sets the cluster_info of this EnvProps.


        :param cluster_info: The cluster_info of this EnvProps.  # noqa: E501
        :type: ClusterInfo
        """

        self._cluster_info = cluster_info

    @property
    def custom_theme(self):
        """Gets the custom_theme of this EnvProps.  # noqa: E501


        :return: The custom_theme of this EnvProps.  # noqa: E501
        :rtype: CustomThemeConfig
        """
        return self._custom_theme

    @custom_theme.setter
    def custom_theme(self, custom_theme):
        """Sets the custom_theme of this EnvProps.


        :param custom_theme: The custom_theme of this EnvProps.  # noqa: E501
        :type: CustomThemeConfig
        """

        self._custom_theme = custom_theme

    @property
    def user_info(self):
        """Gets the user_info of this EnvProps.  # noqa: E501


        :return: The user_info of this EnvProps.  # noqa: E501
        :rtype: UserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this EnvProps.


        :param user_info: The user_info of this EnvProps.  # noqa: E501
        :type: UserInfo
        """

        self._user_info = user_info

    @property
    def version_info(self):
        """Gets the version_info of this EnvProps.  # noqa: E501


        :return: The version_info of this EnvProps.  # noqa: E501
        :rtype: VersionInfo
        """
        return self._version_info

    @version_info.setter
    def version_info(self, version_info):
        """Sets the version_info of this EnvProps.


        :param version_info: The version_info of this EnvProps.  # noqa: E501
        :type: VersionInfo
        """

        self._version_info = version_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnvProps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvProps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
