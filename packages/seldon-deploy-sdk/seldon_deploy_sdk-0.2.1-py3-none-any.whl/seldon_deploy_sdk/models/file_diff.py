# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FileDiff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'change_type': 'str',
        'commit_hash': 'str',
        'diff': 'str',
        'file_name': 'str',
        '_from': 'str',
        'git_hub_url': 'str',
        'prev_commit_hash': 'str',
        'to': 'str'
    }

    attribute_map = {
        'change_type': 'ChangeType',
        'commit_hash': 'CommitHash',
        'diff': 'Diff',
        'file_name': 'FileName',
        '_from': 'From',
        'git_hub_url': 'GitHubUrl',
        'prev_commit_hash': 'PrevCommitHash',
        'to': 'To'
    }

    def __init__(self, change_type=None, commit_hash=None, diff=None, file_name=None, _from=None, git_hub_url=None, prev_commit_hash=None, to=None):  # noqa: E501
        """FileDiff - a model defined in Swagger"""  # noqa: E501

        self._change_type = None
        self._commit_hash = None
        self._diff = None
        self._file_name = None
        self.__from = None
        self._git_hub_url = None
        self._prev_commit_hash = None
        self._to = None
        self.discriminator = None

        if change_type is not None:
            self.change_type = change_type
        if commit_hash is not None:
            self.commit_hash = commit_hash
        if diff is not None:
            self.diff = diff
        if file_name is not None:
            self.file_name = file_name
        if _from is not None:
            self._from = _from
        if git_hub_url is not None:
            self.git_hub_url = git_hub_url
        if prev_commit_hash is not None:
            self.prev_commit_hash = prev_commit_hash
        if to is not None:
            self.to = to

    @property
    def change_type(self):
        """Gets the change_type of this FileDiff.  # noqa: E501


        :return: The change_type of this FileDiff.  # noqa: E501
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this FileDiff.


        :param change_type: The change_type of this FileDiff.  # noqa: E501
        :type: str
        """

        self._change_type = change_type

    @property
    def commit_hash(self):
        """Gets the commit_hash of this FileDiff.  # noqa: E501


        :return: The commit_hash of this FileDiff.  # noqa: E501
        :rtype: str
        """
        return self._commit_hash

    @commit_hash.setter
    def commit_hash(self, commit_hash):
        """Sets the commit_hash of this FileDiff.


        :param commit_hash: The commit_hash of this FileDiff.  # noqa: E501
        :type: str
        """

        self._commit_hash = commit_hash

    @property
    def diff(self):
        """Gets the diff of this FileDiff.  # noqa: E501


        :return: The diff of this FileDiff.  # noqa: E501
        :rtype: str
        """
        return self._diff

    @diff.setter
    def diff(self, diff):
        """Sets the diff of this FileDiff.


        :param diff: The diff of this FileDiff.  # noqa: E501
        :type: str
        """

        self._diff = diff

    @property
    def file_name(self):
        """Gets the file_name of this FileDiff.  # noqa: E501


        :return: The file_name of this FileDiff.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FileDiff.


        :param file_name: The file_name of this FileDiff.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def _from(self):
        """Gets the _from of this FileDiff.  # noqa: E501


        :return: The _from of this FileDiff.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this FileDiff.


        :param _from: The _from of this FileDiff.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def git_hub_url(self):
        """Gets the git_hub_url of this FileDiff.  # noqa: E501


        :return: The git_hub_url of this FileDiff.  # noqa: E501
        :rtype: str
        """
        return self._git_hub_url

    @git_hub_url.setter
    def git_hub_url(self, git_hub_url):
        """Sets the git_hub_url of this FileDiff.


        :param git_hub_url: The git_hub_url of this FileDiff.  # noqa: E501
        :type: str
        """

        self._git_hub_url = git_hub_url

    @property
    def prev_commit_hash(self):
        """Gets the prev_commit_hash of this FileDiff.  # noqa: E501


        :return: The prev_commit_hash of this FileDiff.  # noqa: E501
        :rtype: str
        """
        return self._prev_commit_hash

    @prev_commit_hash.setter
    def prev_commit_hash(self, prev_commit_hash):
        """Sets the prev_commit_hash of this FileDiff.


        :param prev_commit_hash: The prev_commit_hash of this FileDiff.  # noqa: E501
        :type: str
        """

        self._prev_commit_hash = prev_commit_hash

    @property
    def to(self):
        """Gets the to of this FileDiff.  # noqa: E501


        :return: The to of this FileDiff.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this FileDiff.


        :param to: The to of this FileDiff.  # noqa: E501
        :type: str
        """

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileDiff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileDiff):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
