# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeploymentStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_replicas': 'int',
        'description': 'str',
        'explainer_for': 'str',
        'name': 'str',
        'replicas': 'int',
        'status': 'str'
    }

    attribute_map = {
        'available_replicas': 'availableReplicas',
        'description': 'description',
        'explainer_for': 'explainerFor',
        'name': 'name',
        'replicas': 'replicas',
        'status': 'status'
    }

    def __init__(self, available_replicas=None, description=None, explainer_for=None, name=None, replicas=None, status=None):  # noqa: E501
        """DeploymentStatus - a model defined in Swagger"""  # noqa: E501

        self._available_replicas = None
        self._description = None
        self._explainer_for = None
        self._name = None
        self._replicas = None
        self._status = None
        self.discriminator = None

        if available_replicas is not None:
            self.available_replicas = available_replicas
        if description is not None:
            self.description = description
        if explainer_for is not None:
            self.explainer_for = explainer_for
        if name is not None:
            self.name = name
        if replicas is not None:
            self.replicas = replicas
        if status is not None:
            self.status = status

    @property
    def available_replicas(self):
        """Gets the available_replicas of this DeploymentStatus.  # noqa: E501


        :return: The available_replicas of this DeploymentStatus.  # noqa: E501
        :rtype: int
        """
        return self._available_replicas

    @available_replicas.setter
    def available_replicas(self, available_replicas):
        """Sets the available_replicas of this DeploymentStatus.


        :param available_replicas: The available_replicas of this DeploymentStatus.  # noqa: E501
        :type: int
        """

        self._available_replicas = available_replicas

    @property
    def description(self):
        """Gets the description of this DeploymentStatus.  # noqa: E501


        :return: The description of this DeploymentStatus.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeploymentStatus.


        :param description: The description of this DeploymentStatus.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def explainer_for(self):
        """Gets the explainer_for of this DeploymentStatus.  # noqa: E501


        :return: The explainer_for of this DeploymentStatus.  # noqa: E501
        :rtype: str
        """
        return self._explainer_for

    @explainer_for.setter
    def explainer_for(self, explainer_for):
        """Sets the explainer_for of this DeploymentStatus.


        :param explainer_for: The explainer_for of this DeploymentStatus.  # noqa: E501
        :type: str
        """

        self._explainer_for = explainer_for

    @property
    def name(self):
        """Gets the name of this DeploymentStatus.  # noqa: E501


        :return: The name of this DeploymentStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeploymentStatus.


        :param name: The name of this DeploymentStatus.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def replicas(self):
        """Gets the replicas of this DeploymentStatus.  # noqa: E501


        :return: The replicas of this DeploymentStatus.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this DeploymentStatus.


        :param replicas: The replicas of this DeploymentStatus.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def status(self):
        """Gets the status of this DeploymentStatus.  # noqa: E501


        :return: The status of this DeploymentStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeploymentStatus.


        :param status: The status of this DeploymentStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
