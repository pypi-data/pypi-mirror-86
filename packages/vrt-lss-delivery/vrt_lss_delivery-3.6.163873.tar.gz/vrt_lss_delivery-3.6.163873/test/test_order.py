# coding: utf-8

"""
    VeeRoute.LSS Delivery

    VeeRoute.LSS Delivery API  # noqa: E501

    The version of the OpenAPI document: 3.6.163873
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import vrt_lss_delivery
from vrt_lss_delivery.models.order import Order  # noqa: E501
from vrt_lss_delivery.rest import ApiException

class TestOrder(unittest.TestCase):
    """Order unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Order
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = vrt_lss_delivery.models.order.Order()  # noqa: E501
        if include_optional :
            return Order(
                key = 'order0001', 
                type = 'DROP', 
                warehouse_keys = [
                    'whs0001'
                    ], 
                customer = vrt_lss_delivery.models.customer.Customer(
                    location = vrt_lss_delivery.models.location.Location(
                        latitude = 55.692789, 
                        longitude = 37.554554, 
                        arrival_duration = 15, 
                        departure_duration = 5, ), 
                    time_windows = [
                        vrt_lss_delivery.models.time_window.TimeWindow(
                            from = '2020-11-21T09:30+03:00', 
                            to = '2020-11-21T19:45Z', )
                        ], ), 
                cargos = [
                    vrt_lss_delivery.models.cargo.Cargo(
                        key = 'cargo01', 
                        capacity = vrt_lss_delivery.models.capacity.Capacity(
                            mass = 10, 
                            volume = 2, 
                            capacity_x = 1, 
                            capacity_y = 2, 
                            capacity_z = 3, ), 
                        rotation = ["ALL"], 
                        width = 1, 
                        height = 0.3, 
                        length = 2.2, 
                        max_storage_time = 60, 
                        restrictions = ["Freezer"], )
                    ], 
                warehouse_duration = 10, 
                customer_duration = 10, 
                cost = vrt_lss_delivery.models.order_cost.OrderCost(
                    reward = 199.1, 
                    penalty = vrt_lss_delivery.models.cost_penalty.CostPenalty(
                        start_time = '2020-11-21T17:00Z', 
                        period = 60, 
                        value = 1000, 
                        max_value = 10000, ), ), 
                order_features = ["Special"], 
                order_restrictions = ["Special"], 
                performer_restrictions = ["Special"], 
                performer_blacklist = ["A0"]
            )
        else :
            return Order(
                key = 'order0001',
                warehouse_keys = [
                    'whs0001'
                    ],
                customer = vrt_lss_delivery.models.customer.Customer(
                    location = vrt_lss_delivery.models.location.Location(
                        latitude = 55.692789, 
                        longitude = 37.554554, 
                        arrival_duration = 15, 
                        departure_duration = 5, ), 
                    time_windows = [
                        vrt_lss_delivery.models.time_window.TimeWindow(
                            from = '2020-11-21T09:30+03:00', 
                            to = '2020-11-21T19:45Z', )
                        ], ),
                cargos = [
                    vrt_lss_delivery.models.cargo.Cargo(
                        key = 'cargo01', 
                        capacity = vrt_lss_delivery.models.capacity.Capacity(
                            mass = 10, 
                            volume = 2, 
                            capacity_x = 1, 
                            capacity_y = 2, 
                            capacity_z = 3, ), 
                        rotation = ["ALL"], 
                        width = 1, 
                        height = 0.3, 
                        length = 2.2, 
                        max_storage_time = 60, 
                        restrictions = ["Freezer"], )
                    ],
        )

    def testOrder(self):
        """Test Order"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
