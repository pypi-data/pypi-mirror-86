# coding: utf-8

"""
    VeeRoute.LSS Delivery

    VeeRoute.LSS Delivery API  # noqa: E501

    The version of the OpenAPI document: 3.6.163909
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_lss_delivery.configuration import Configuration


class DeliverySettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'restrict_middle_warehouses': 'bool',
        'restrict_multiple_warehouses': 'bool',
        'restrict_multiple_order_types': 'bool'
    }

    attribute_map = {
        'restrict_middle_warehouses': 'restrict_middle_warehouses',
        'restrict_multiple_warehouses': 'restrict_multiple_warehouses',
        'restrict_multiple_order_types': 'restrict_multiple_order_types'
    }

    def __init__(self, restrict_middle_warehouses=True, restrict_multiple_warehouses=True, restrict_multiple_order_types=False, local_vars_configuration=None):  # noqa: E501
        """DeliverySettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._restrict_middle_warehouses = None
        self._restrict_multiple_warehouses = None
        self._restrict_multiple_order_types = None
        self.discriminator = None

        if restrict_middle_warehouses is not None:
            self.restrict_middle_warehouses = restrict_middle_warehouses
        if restrict_multiple_warehouses is not None:
            self.restrict_multiple_warehouses = restrict_multiple_warehouses
        if restrict_multiple_order_types is not None:
            self.restrict_multiple_order_types = restrict_multiple_order_types

    @property
    def restrict_middle_warehouses(self):
        """Gets the restrict_middle_warehouses of this DeliverySettings.  # noqa: E501

        Restrict to drive to a warehouse in the middle of the trip - always start or finish the trip at a warehouse.  # noqa: E501

        :return: The restrict_middle_warehouses of this DeliverySettings.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_middle_warehouses

    @restrict_middle_warehouses.setter
    def restrict_middle_warehouses(self, restrict_middle_warehouses):
        """Sets the restrict_middle_warehouses of this DeliverySettings.

        Restrict to drive to a warehouse in the middle of the trip - always start or finish the trip at a warehouse.  # noqa: E501

        :param restrict_middle_warehouses: The restrict_middle_warehouses of this DeliverySettings.  # noqa: E501
        :type: bool
        """

        self._restrict_middle_warehouses = restrict_middle_warehouses

    @property
    def restrict_multiple_warehouses(self):
        """Gets the restrict_multiple_warehouses of this DeliverySettings.  # noqa: E501

        Restrict to drive to more than one warehouse during the trip. It is possible only if all orders have the same warehouse. If one of orders has more than one warehouse and this option is enabled, the validation will show an error.   # noqa: E501

        :return: The restrict_multiple_warehouses of this DeliverySettings.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_multiple_warehouses

    @restrict_multiple_warehouses.setter
    def restrict_multiple_warehouses(self, restrict_multiple_warehouses):
        """Sets the restrict_multiple_warehouses of this DeliverySettings.

        Restrict to drive to more than one warehouse during the trip. It is possible only if all orders have the same warehouse. If one of orders has more than one warehouse and this option is enabled, the validation will show an error.   # noqa: E501

        :param restrict_multiple_warehouses: The restrict_multiple_warehouses of this DeliverySettings.  # noqa: E501
        :type: bool
        """

        self._restrict_multiple_warehouses = restrict_multiple_warehouses

    @property
    def restrict_multiple_order_types(self):
        """Gets the restrict_multiple_order_types of this DeliverySettings.  # noqa: E501

        Restrict to deliver both `PICKUP` and `DROP` in the same trip.   # noqa: E501

        :return: The restrict_multiple_order_types of this DeliverySettings.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_multiple_order_types

    @restrict_multiple_order_types.setter
    def restrict_multiple_order_types(self, restrict_multiple_order_types):
        """Sets the restrict_multiple_order_types of this DeliverySettings.

        Restrict to deliver both `PICKUP` and `DROP` in the same trip.   # noqa: E501

        :param restrict_multiple_order_types: The restrict_multiple_order_types of this DeliverySettings.  # noqa: E501
        :type: bool
        """

        self._restrict_multiple_order_types = restrict_multiple_order_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeliverySettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeliverySettings):
            return True

        return self.to_dict() != other.to_dict()
