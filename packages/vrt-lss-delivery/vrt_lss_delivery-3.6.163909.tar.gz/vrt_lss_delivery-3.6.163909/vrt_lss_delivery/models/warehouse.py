# coding: utf-8

"""
    VeeRoute.LSS Delivery

    VeeRoute.LSS Delivery API  # noqa: E501

    The version of the OpenAPI document: 3.6.163909
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_lss_delivery.configuration import Configuration


class Warehouse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key': 'str',
        'location': 'Location',
        'work_windows': 'list[TimeWindow]'
    }

    attribute_map = {
        'key': 'key',
        'location': 'location',
        'work_windows': 'work_windows'
    }

    def __init__(self, key=None, location=None, work_windows=None, local_vars_configuration=None):  # noqa: E501
        """Warehouse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self._location = None
        self._work_windows = None
        self.discriminator = None

        self.key = key
        self.location = location
        if work_windows is not None:
            self.work_windows = work_windows

    @property
    def key(self):
        """Gets the key of this Warehouse.  # noqa: E501

        Warehouse key, unique ID.  # noqa: E501

        :return: The key of this Warehouse.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Warehouse.

        Warehouse key, unique ID.  # noqa: E501

        :param key: The key of this Warehouse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and key is None:  # noqa: E501
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                key is not None and len(key) > 1024):
            raise ValueError("Invalid value for `key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                key is not None and len(key) < 1):
            raise ValueError("Invalid value for `key`, length must be greater than or equal to `1`")  # noqa: E501

        self._key = key

    @property
    def location(self):
        """Gets the location of this Warehouse.  # noqa: E501


        :return: The location of this Warehouse.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Warehouse.


        :param location: The location of this Warehouse.  # noqa: E501
        :type: Location
        """
        if self.local_vars_configuration.client_side_validation and location is None:  # noqa: E501
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def work_windows(self):
        """Gets the work_windows of this Warehouse.  # noqa: E501

        List of time windows for work. If windows are not specified, the location is open 24 hours a day.  # noqa: E501

        :return: The work_windows of this Warehouse.  # noqa: E501
        :rtype: list[TimeWindow]
        """
        return self._work_windows

    @work_windows.setter
    def work_windows(self, work_windows):
        """Sets the work_windows of this Warehouse.

        List of time windows for work. If windows are not specified, the location is open 24 hours a day.  # noqa: E501

        :param work_windows: The work_windows of this Warehouse.  # noqa: E501
        :type: list[TimeWindow]
        """

        self._work_windows = work_windows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Warehouse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Warehouse):
            return True

        return self.to_dict() != other.to_dict()
