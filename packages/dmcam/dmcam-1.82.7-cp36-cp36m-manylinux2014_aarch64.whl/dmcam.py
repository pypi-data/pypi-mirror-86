# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _dmcam.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dmcam')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dmcam')
    _dmcam = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dmcam', [dirname(__file__)])
        except ImportError:
            import _dmcam
            return _dmcam
        try:
            _mod = imp.load_module('_dmcam', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dmcam = swig_import_helper()
    del swig_import_helper
else:
    import _dmcam
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class dm_u8_p(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _dmcam.dm_u8_p_swiginit(self, _dmcam.new_dm_u8_p(nelements))
    __swig_destroy__ = _dmcam.delete_dm_u8_p
    frompointer = staticmethod(_dmcam.dm_u8_p_frompointer)
dm_u8_p.__getitem__ = new_instancemethod(_dmcam.dm_u8_p___getitem__, None, dm_u8_p)
dm_u8_p.__setitem__ = new_instancemethod(_dmcam.dm_u8_p___setitem__, None, dm_u8_p)
dm_u8_p.cast = new_instancemethod(_dmcam.dm_u8_p_cast, None, dm_u8_p)
dm_u8_p_swigregister = _dmcam.dm_u8_p_swigregister
dm_u8_p_swigregister(dm_u8_p)

def dm_u8_p_frompointer(t):
    return _dmcam.dm_u8_p_frompointer(t)
dm_u8_p_frompointer = _dmcam.dm_u8_p_frompointer

class dm_u16_p(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _dmcam.dm_u16_p_swiginit(self, _dmcam.new_dm_u16_p(nelements))
    __swig_destroy__ = _dmcam.delete_dm_u16_p
    frompointer = staticmethod(_dmcam.dm_u16_p_frompointer)
dm_u16_p.__getitem__ = new_instancemethod(_dmcam.dm_u16_p___getitem__, None, dm_u16_p)
dm_u16_p.__setitem__ = new_instancemethod(_dmcam.dm_u16_p___setitem__, None, dm_u16_p)
dm_u16_p.cast = new_instancemethod(_dmcam.dm_u16_p_cast, None, dm_u16_p)
dm_u16_p_swigregister = _dmcam.dm_u16_p_swigregister
dm_u16_p_swigregister(dm_u16_p)

def dm_u16_p_frompointer(t):
    return _dmcam.dm_u16_p_frompointer(t)
dm_u16_p_frompointer = _dmcam.dm_u16_p_frompointer

class dm_u32_p(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _dmcam.dm_u32_p_swiginit(self, _dmcam.new_dm_u32_p(nelements))
    __swig_destroy__ = _dmcam.delete_dm_u32_p
    frompointer = staticmethod(_dmcam.dm_u32_p_frompointer)
dm_u32_p.__getitem__ = new_instancemethod(_dmcam.dm_u32_p___getitem__, None, dm_u32_p)
dm_u32_p.__setitem__ = new_instancemethod(_dmcam.dm_u32_p___setitem__, None, dm_u32_p)
dm_u32_p.cast = new_instancemethod(_dmcam.dm_u32_p_cast, None, dm_u32_p)
dm_u32_p_swigregister = _dmcam.dm_u32_p_swigregister
dm_u32_p_swigregister(dm_u32_p)

def dm_u32_p_frompointer(t):
    return _dmcam.dm_u32_p_frompointer(t)
dm_u32_p_frompointer = _dmcam.dm_u32_p_frompointer

class dm_u64_p(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _dmcam.dm_u64_p_swiginit(self, _dmcam.new_dm_u64_p(nelements))
    __swig_destroy__ = _dmcam.delete_dm_u64_p
    frompointer = staticmethod(_dmcam.dm_u64_p_frompointer)
dm_u64_p.__getitem__ = new_instancemethod(_dmcam.dm_u64_p___getitem__, None, dm_u64_p)
dm_u64_p.__setitem__ = new_instancemethod(_dmcam.dm_u64_p___setitem__, None, dm_u64_p)
dm_u64_p.cast = new_instancemethod(_dmcam.dm_u64_p_cast, None, dm_u64_p)
dm_u64_p_swigregister = _dmcam.dm_u64_p_swigregister
dm_u64_p_swigregister(dm_u64_p)

def dm_u64_p_frompointer(t):
    return _dmcam.dm_u64_p_frompointer(t)
dm_u64_p_frompointer = _dmcam.dm_u64_p_frompointer

class dm_i8_p(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _dmcam.dm_i8_p_swiginit(self, _dmcam.new_dm_i8_p(nelements))
    __swig_destroy__ = _dmcam.delete_dm_i8_p
    frompointer = staticmethod(_dmcam.dm_i8_p_frompointer)
dm_i8_p.__getitem__ = new_instancemethod(_dmcam.dm_i8_p___getitem__, None, dm_i8_p)
dm_i8_p.__setitem__ = new_instancemethod(_dmcam.dm_i8_p___setitem__, None, dm_i8_p)
dm_i8_p.cast = new_instancemethod(_dmcam.dm_i8_p_cast, None, dm_i8_p)
dm_i8_p_swigregister = _dmcam.dm_i8_p_swigregister
dm_i8_p_swigregister(dm_i8_p)

def dm_i8_p_frompointer(t):
    return _dmcam.dm_i8_p_frompointer(t)
dm_i8_p_frompointer = _dmcam.dm_i8_p_frompointer

class dm_i16_p(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _dmcam.dm_i16_p_swiginit(self, _dmcam.new_dm_i16_p(nelements))
    __swig_destroy__ = _dmcam.delete_dm_i16_p
    frompointer = staticmethod(_dmcam.dm_i16_p_frompointer)
dm_i16_p.__getitem__ = new_instancemethod(_dmcam.dm_i16_p___getitem__, None, dm_i16_p)
dm_i16_p.__setitem__ = new_instancemethod(_dmcam.dm_i16_p___setitem__, None, dm_i16_p)
dm_i16_p.cast = new_instancemethod(_dmcam.dm_i16_p_cast, None, dm_i16_p)
dm_i16_p_swigregister = _dmcam.dm_i16_p_swigregister
dm_i16_p_swigregister(dm_i16_p)

def dm_i16_p_frompointer(t):
    return _dmcam.dm_i16_p_frompointer(t)
dm_i16_p_frompointer = _dmcam.dm_i16_p_frompointer

class dm_i32_p(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _dmcam.dm_i32_p_swiginit(self, _dmcam.new_dm_i32_p(nelements))
    __swig_destroy__ = _dmcam.delete_dm_i32_p
    frompointer = staticmethod(_dmcam.dm_i32_p_frompointer)
dm_i32_p.__getitem__ = new_instancemethod(_dmcam.dm_i32_p___getitem__, None, dm_i32_p)
dm_i32_p.__setitem__ = new_instancemethod(_dmcam.dm_i32_p___setitem__, None, dm_i32_p)
dm_i32_p.cast = new_instancemethod(_dmcam.dm_i32_p_cast, None, dm_i32_p)
dm_i32_p_swigregister = _dmcam.dm_i32_p_swigregister
dm_i32_p_swigregister(dm_i32_p)

def dm_i32_p_frompointer(t):
    return _dmcam.dm_i32_p_frompointer(t)
dm_i32_p_frompointer = _dmcam.dm_i32_p_frompointer

class dm_i64_p(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _dmcam.dm_i64_p_swiginit(self, _dmcam.new_dm_i64_p(nelements))
    __swig_destroy__ = _dmcam.delete_dm_i64_p
    frompointer = staticmethod(_dmcam.dm_i64_p_frompointer)
dm_i64_p.__getitem__ = new_instancemethod(_dmcam.dm_i64_p___getitem__, None, dm_i64_p)
dm_i64_p.__setitem__ = new_instancemethod(_dmcam.dm_i64_p___setitem__, None, dm_i64_p)
dm_i64_p.cast = new_instancemethod(_dmcam.dm_i64_p_cast, None, dm_i64_p)
dm_i64_p_swigregister = _dmcam.dm_i64_p_swigregister
dm_i64_p_swigregister(dm_i64_p)

def dm_i64_p_frompointer(t):
    return _dmcam.dm_i64_p_frompointer(t)
dm_i64_p_frompointer = _dmcam.dm_i64_p_frompointer

class dm_f32_p(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _dmcam.dm_f32_p_swiginit(self, _dmcam.new_dm_f32_p(nelements))
    __swig_destroy__ = _dmcam.delete_dm_f32_p
    frompointer = staticmethod(_dmcam.dm_f32_p_frompointer)
dm_f32_p.__getitem__ = new_instancemethod(_dmcam.dm_f32_p___getitem__, None, dm_f32_p)
dm_f32_p.__setitem__ = new_instancemethod(_dmcam.dm_f32_p___setitem__, None, dm_f32_p)
dm_f32_p.cast = new_instancemethod(_dmcam.dm_f32_p_cast, None, dm_f32_p)
dm_f32_p_swigregister = _dmcam.dm_f32_p_swigregister
dm_f32_p_swigregister(dm_f32_p)

def dm_f32_p_frompointer(t):
    return _dmcam.dm_f32_p_frompointer(t)
dm_f32_p_frompointer = _dmcam.dm_f32_p_frompointer

class dm_f64_p(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _dmcam.dm_f64_p_swiginit(self, _dmcam.new_dm_f64_p(nelements))
    __swig_destroy__ = _dmcam.delete_dm_f64_p
    frompointer = staticmethod(_dmcam.dm_f64_p_frompointer)
dm_f64_p.__getitem__ = new_instancemethod(_dmcam.dm_f64_p___getitem__, None, dm_f64_p)
dm_f64_p.__setitem__ = new_instancemethod(_dmcam.dm_f64_p___setitem__, None, dm_f64_p)
dm_f64_p.cast = new_instancemethod(_dmcam.dm_f64_p_cast, None, dm_f64_p)
dm_f64_p_swigregister = _dmcam.dm_f64_p_swigregister
dm_f64_p_swigregister(dm_f64_p)

def dm_f64_p_frompointer(t):
    return _dmcam.dm_f64_p_frompointer(t)
dm_f64_p_frompointer = _dmcam.dm_f64_p_frompointer

DM_NAME = _dmcam.DM_NAME
DM_VERSION_MAJOR = _dmcam.DM_VERSION_MAJOR
DM_VERSION_MINOR = _dmcam.DM_VERSION_MINOR
DM_VERSION_REV = _dmcam.DM_VERSION_REV
DM_VERSION_STR = _dmcam.DM_VERSION_STR
DMCAM_ERR_CAP_FRAME_DISCARD = _dmcam.DMCAM_ERR_CAP_FRAME_DISCARD
DMCAM_ERR_CAP_WRONG_STATE = _dmcam.DMCAM_ERR_CAP_WRONG_STATE
DMCAM_ERR_CAP_CANCEL = _dmcam.DMCAM_ERR_CAP_CANCEL
DMCAM_ERR_CAP_TIMEOUT = _dmcam.DMCAM_ERR_CAP_TIMEOUT
DMCAM_ERR_CAP_STALL = _dmcam.DMCAM_ERR_CAP_STALL
DMCAM_ERR_CAP_ERROR = _dmcam.DMCAM_ERR_CAP_ERROR
DMCAM_ERR_CAP_EOF = _dmcam.DMCAM_ERR_CAP_EOF
DMCAM_ERR_CAP_UNKNOWN = _dmcam.DMCAM_ERR_CAP_UNKNOWN
DM_SEEK_SET = _dmcam.DM_SEEK_SET
DM_SEEK_CUR = _dmcam.DM_SEEK_CUR
DM_SEEK_END = _dmcam.DM_SEEK_END
DEV_IF_USB = _dmcam.DEV_IF_USB
DEV_IF_ETH = _dmcam.DEV_IF_ETH
DEV_IF_FILE = _dmcam.DEV_IF_FILE
DEV_IF_NONE = _dmcam.DEV_IF_NONE
class dev_if_info_usb(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    usb_bus_num = _swig_property(_dmcam.dev_if_info_usb_usb_bus_num_get, _dmcam.dev_if_info_usb_usb_bus_num_set)
    usb_port_num = _swig_property(_dmcam.dev_if_info_usb_usb_port_num_get, _dmcam.dev_if_info_usb_usb_port_num_set)
    usb_dev_addr = _swig_property(_dmcam.dev_if_info_usb_usb_dev_addr_get, _dmcam.dev_if_info_usb_usb_dev_addr_set)
    usb_speed = _swig_property(_dmcam.dev_if_info_usb_usb_speed_get, _dmcam.dev_if_info_usb_usb_speed_set)
    product = _swig_property(_dmcam.dev_if_info_usb_product_get, _dmcam.dev_if_info_usb_product_set)
    vendor = _swig_property(_dmcam.dev_if_info_usb_vendor_get, _dmcam.dev_if_info_usb_vendor_set)

    def __init__(self):
        _dmcam.dev_if_info_usb_swiginit(self, _dmcam.new_dev_if_info_usb())
    __swig_destroy__ = _dmcam.delete_dev_if_info_usb
dev_if_info_usb_swigregister = _dmcam.dev_if_info_usb_swigregister
dev_if_info_usb_swigregister(dev_if_info_usb)

class dev_if_info_eth(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    addr = _swig_property(_dmcam.dev_if_info_eth_addr_get, _dmcam.dev_if_info_eth_addr_set)
    reserved = _swig_property(_dmcam.dev_if_info_eth_reserved_get, _dmcam.dev_if_info_eth_reserved_set)
    token = _swig_property(_dmcam.dev_if_info_eth_token_get, _dmcam.dev_if_info_eth_token_set)
    cid = _swig_property(_dmcam.dev_if_info_eth_cid_get, _dmcam.dev_if_info_eth_cid_set)

    def __init__(self):
        _dmcam.dev_if_info_eth_swiginit(self, _dmcam.new_dev_if_info_eth())
    __swig_destroy__ = _dmcam.delete_dev_if_info_eth
dev_if_info_eth_swigregister = _dmcam.dev_if_info_eth_swigregister
dev_if_info_eth_swigregister(dev_if_info_eth)

class dev_if_info_fil(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    fd = _swig_property(_dmcam.dev_if_info_fil_fd_get, _dmcam.dev_if_info_fil_fd_set)
    fname = _swig_property(_dmcam.dev_if_info_fil_fname_get, _dmcam.dev_if_info_fil_fname_set)

    def __init__(self):
        _dmcam.dev_if_info_fil_swiginit(self, _dmcam.new_dev_if_info_fil())
    __swig_destroy__ = _dmcam.delete_dev_if_info_fil
dev_if_info_fil_swigregister = _dmcam.dev_if_info_fil_swigregister
dev_if_info_fil_swigregister(dev_if_info_fil)

class dev_if_info_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_dmcam.dev_if_info_t_type_get, _dmcam.dev_if_info_t_type_set)
    info = _swig_property(_dmcam.dev_if_info_t_info_get)

    def __init__(self):
        _dmcam.dev_if_info_t_swiginit(self, _dmcam.new_dev_if_info_t())
    __swig_destroy__ = _dmcam.delete_dev_if_info_t
dev_if_info_t_swigregister = _dmcam.dev_if_info_t_swigregister
dev_if_info_t_swigregister(dev_if_info_t)

class dev_if_info_t_info(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    usb = _swig_property(_dmcam.dev_if_info_t_info_usb_get, _dmcam.dev_if_info_t_info_usb_set)
    eth = _swig_property(_dmcam.dev_if_info_t_info_eth_get, _dmcam.dev_if_info_t_info_eth_set)
    fil = _swig_property(_dmcam.dev_if_info_t_info_fil_get, _dmcam.dev_if_info_t_info_fil_set)

    def __init__(self):
        _dmcam.dev_if_info_t_info_swiginit(self, _dmcam.new_dev_if_info_t_info())
    __swig_destroy__ = _dmcam.delete_dev_if_info_t_info
dev_if_info_t_info_swigregister = _dmcam.dev_if_info_t_info_swigregister
dev_if_info_t_info_swigregister(dev_if_info_t_info)

class dev_ver_u(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    version = _swig_property(_dmcam.dev_ver_u_version_get, _dmcam.dev_ver_u_version_set)
    ver = _swig_property(_dmcam.dev_ver_u_ver_get)

    def __init__(self):
        _dmcam.dev_ver_u_swiginit(self, _dmcam.new_dev_ver_u())
    __swig_destroy__ = _dmcam.delete_dev_ver_u
dev_ver_u_swigregister = _dmcam.dev_ver_u_swigregister
dev_ver_u_swigregister(dev_ver_u)

class dev_ver_u_ver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    hw_ver = _swig_property(_dmcam.dev_ver_u_ver_hw_ver_get, _dmcam.dev_ver_u_ver_hw_ver_set)
    sw_ver = _swig_property(_dmcam.dev_ver_u_ver_sw_ver_get, _dmcam.dev_ver_u_ver_sw_ver_set)
    sw2_ver = _swig_property(_dmcam.dev_ver_u_ver_sw2_ver_get, _dmcam.dev_ver_u_ver_sw2_ver_set)
    hw2_ver = _swig_property(_dmcam.dev_ver_u_ver_hw2_ver_get, _dmcam.dev_ver_u_ver_hw2_ver_set)

    def __init__(self):
        _dmcam.dev_ver_u_ver_swiginit(self, _dmcam.new_dev_ver_u_ver())
    __swig_destroy__ = _dmcam.delete_dev_ver_u_ver
dev_ver_u_ver_swigregister = _dmcam.dev_ver_u_ver_swigregister
dev_ver_u_ver_swigregister(dev_ver_u_ver)

class dev_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    handler = _swig_property(_dmcam.dev_t_handler_get, _dmcam.dev_t_handler_set)
    if_info = _swig_property(_dmcam.dev_t_if_info_get, _dmcam.dev_t_if_info_set)
    product = _swig_property(_dmcam.dev_t_product_get, _dmcam.dev_t_product_set)
    vendor = _swig_property(_dmcam.dev_t_vendor_get, _dmcam.dev_t_vendor_set)
    serial = _swig_property(_dmcam.dev_t_serial_get, _dmcam.dev_t_serial_set)
    dev_id = _swig_property(_dmcam.dev_t_dev_id_get, _dmcam.dev_t_dev_id_set)
    version = _swig_property(_dmcam.dev_t_version_get, _dmcam.dev_t_version_set)
    expath = _swig_property(_dmcam.dev_t_expath_get, _dmcam.dev_t_expath_set)
    lock = _swig_property(_dmcam.dev_t_lock_get, _dmcam.dev_t_lock_set)
    user_data0 = _swig_property(_dmcam.dev_t_user_data0_get, _dmcam.dev_t_user_data0_set)
    user_data1 = _swig_property(_dmcam.dev_t_user_data1_get, _dmcam.dev_t_user_data1_set)
    init_flag = _swig_property(_dmcam.dev_t_init_flag_get, _dmcam.dev_t_init_flag_set)
    alloc_flag = _swig_property(_dmcam.dev_t_alloc_flag_get, _dmcam.dev_t_alloc_flag_set)
    api_flag = _swig_property(_dmcam.dev_t_api_flag_get, _dmcam.dev_t_api_flag_set)

    def __init__(self):
        _dmcam.dev_t_swiginit(self, _dmcam.new_dev_t())
    __swig_destroy__ = _dmcam.delete_dev_t
dev_t_swigregister = _dmcam.dev_t_swigregister
dev_t_swigregister(dev_t)

class len_param_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    cx = _swig_property(_dmcam.len_param_t_cx_get, _dmcam.len_param_t_cx_set)
    cy = _swig_property(_dmcam.len_param_t_cy_get, _dmcam.len_param_t_cy_set)
    fx = _swig_property(_dmcam.len_param_t_fx_get, _dmcam.len_param_t_fx_set)
    fy = _swig_property(_dmcam.len_param_t_fy_get, _dmcam.len_param_t_fy_set)
    dcoef = _swig_property(_dmcam.len_param_t_dcoef_get, _dmcam.len_param_t_dcoef_set)
    n_dcoef = _swig_property(_dmcam.len_param_t_n_dcoef_get, _dmcam.len_param_t_n_dcoef_set)

    def __init__(self):
        _dmcam.len_param_t_swiginit(self, _dmcam.new_len_param_t())
    __swig_destroy__ = _dmcam.delete_len_param_t
len_param_t_swigregister = _dmcam.len_param_t_swigregister
len_param_t_swigregister(len_param_t)

LOG_LEVEL_TRACE = _dmcam.LOG_LEVEL_TRACE
LOG_LEVEL_DEBUG = _dmcam.LOG_LEVEL_DEBUG
LOG_LEVEL_NOTICE1 = _dmcam.LOG_LEVEL_NOTICE1
LOG_LEVEL_NOTICE2 = _dmcam.LOG_LEVEL_NOTICE2
LOG_LEVEL_INFO = _dmcam.LOG_LEVEL_INFO
LOG_LEVEL_WARN = _dmcam.LOG_LEVEL_WARN
LOG_LEVEL_ERROR = _dmcam.LOG_LEVEL_ERROR
LOG_LEVEL_NONE = _dmcam.LOG_LEVEL_NONE
DEV_RST_DEV = _dmcam.DEV_RST_DEV
DEV_RST_CAM0 = _dmcam.DEV_RST_CAM0
DEV_RST_CAM1 = _dmcam.DEV_RST_CAM1
DEV_RST_USB = _dmcam.DEV_RST_USB
DEV_RST_IR1 = _dmcam.DEV_RST_IR1
DEV_RST_IR2 = _dmcam.DEV_RST_IR2
DEV_RST_MCU = _dmcam.DEV_RST_MCU
DEV_RST_CNT = _dmcam.DEV_RST_CNT
DEV_MODE_NORMAL = _dmcam.DEV_MODE_NORMAL
DEV_MODE_DFU = _dmcam.DEV_MODE_DFU
DEV_MODE_TEST = _dmcam.DEV_MODE_TEST
DEV_MODE_DATA_UP = _dmcam.DEV_MODE_DATA_UP
DEV_REG_RESERVED = _dmcam.DEV_REG_RESERVED
DEV_REG_CAM0 = _dmcam.DEV_REG_CAM0
DEV_REG_CAM1 = _dmcam.DEV_REG_CAM1
DEV_REG_IR_0 = _dmcam.DEV_REG_IR_0
DEV_REG_IR_1 = _dmcam.DEV_REG_IR_1
DEV_REG_IR_2 = _dmcam.DEV_REG_IR_2
DEV_REG_IR_3 = _dmcam.DEV_REG_IR_3
FRAME_FMT_DCSx1 = _dmcam.FRAME_FMT_DCSx1
FRAME_FMT_DUAL_MGX_SINE_PIDELAY_DCSx2 = _dmcam.FRAME_FMT_DUAL_MGX_SINE_PIDELAY_DCSx2
FRAME_FMT_SINGLE_MGX_SINE_PIDELAY_DCSx4 = _dmcam.FRAME_FMT_SINGLE_MGX_SINE_PIDELAY_DCSx4
FRAME_FMT_DUAL_MGX_PN_NOPIDELAY_DCSx1 = _dmcam.FRAME_FMT_DUAL_MGX_PN_NOPIDELAY_DCSx1
FRAME_FMT_DUAL_MGX_SINE_NOPIDELAY_DCSx1 = _dmcam.FRAME_FMT_DUAL_MGX_SINE_NOPIDELAY_DCSx1
FRAME_FMT_SINGLE_MGX_PN_PIDELAY_DCSx4 = _dmcam.FRAME_FMT_SINGLE_MGX_PN_PIDELAY_DCSx4
FRAME_FMT_DUAL_MGX_PN_PIDELAY_DCSx2 = _dmcam.FRAME_FMT_DUAL_MGX_PN_PIDELAY_DCSx2
FRAME_FMT_SINGLE_MGX_PN_NOPIDELAY_DCSx2 = _dmcam.FRAME_FMT_SINGLE_MGX_PN_NOPIDELAY_DCSx2
FRAME_FMT_SINGLE_MGX_SINE_NOPIDELAY_DCSx2 = _dmcam.FRAME_FMT_SINGLE_MGX_SINE_NOPIDELAY_DCSx2
FRAME_FMT_PHASE = _dmcam.FRAME_FMT_PHASE
FRAME_FMT_GRAY = _dmcam.FRAME_FMT_GRAY
FRAME_FMT_LOSSY = _dmcam.FRAME_FMT_LOSSY
FRAME_FMT_QI = _dmcam.FRAME_FMT_QI
FRAME_FMT_QI_DUAL_FREQ = _dmcam.FRAME_FMT_QI_DUAL_FREQ
FRAME_FMT_HDR_8DCS = _dmcam.FRAME_FMT_HDR_8DCS
FRAME_FMT_QI_SHIFT_LOSSLESS = _dmcam.FRAME_FMT_QI_SHIFT_LOSSLESS
FRAME_FMT_QI_SHIFT_LOSSLESS_DUAL_FREQ = _dmcam.FRAME_FMT_QI_SHIFT_LOSSLESS_DUAL_FREQ
FRAME_FMT_AB_DCSx4_RAW = _dmcam.FRAME_FMT_AB_DCSx4_RAW
FRAME_FMT_CNT = _dmcam.FRAME_FMT_CNT
PARAM_DEV_MODE = _dmcam.PARAM_DEV_MODE
PARAM_MOD_FREQ = _dmcam.PARAM_MOD_FREQ
PARAM_INFO_VENDOR = _dmcam.PARAM_INFO_VENDOR
PARAM_INFO_PRODUCT = _dmcam.PARAM_INFO_PRODUCT
PARAM_INFO_CAPABILITY = _dmcam.PARAM_INFO_CAPABILITY
PARAM_INFO_SERIAL = _dmcam.PARAM_INFO_SERIAL
PARAM_INFO_VERSION = _dmcam.PARAM_INFO_VERSION
PARAM_INFO_SENSOR = _dmcam.PARAM_INFO_SENSOR
PARAM_INFO_CALIB = _dmcam.PARAM_INFO_CALIB
PARAM_ROI = _dmcam.PARAM_ROI
PARAM_FRAME_FORMAT = _dmcam.PARAM_FRAME_FORMAT
PARAM_ILLUM_POWER = _dmcam.PARAM_ILLUM_POWER
PARAM_FRAME_RATE = _dmcam.PARAM_FRAME_RATE
PARAM_INTG_TIME = _dmcam.PARAM_INTG_TIME
PARAM_PHASE_CORR = _dmcam.PARAM_PHASE_CORR
PARAM_TEMP = _dmcam.PARAM_TEMP
PARAM_HDR_INTG_TIME = _dmcam.PARAM_HDR_INTG_TIME
PARAM_SYNC_DELAY = _dmcam.PARAM_SYNC_DELAY
PARAM_SYS_CALIB_COEFF = _dmcam.PARAM_SYS_CALIB_COEFF
PARAM_SYNC_SYS_TIME = _dmcam.PARAM_SYNC_SYS_TIME
PARAM_AMBIENT_LIGHT_COEFF = _dmcam.PARAM_AMBIENT_LIGHT_COEFF
PARAM_DUAL_MOD_FREQ = _dmcam.PARAM_DUAL_MOD_FREQ
PARAM_INFO_LENS = _dmcam.PARAM_INFO_LENS
PARAM_FLIP = _dmcam.PARAM_FLIP
PARAM_RESERVED = _dmcam.PARAM_RESERVED
PARAM_INFO_CALIB_FREQ = _dmcam.PARAM_INFO_CALIB_FREQ
PARAM_DEL_CALIB_DATA = _dmcam.PARAM_DEL_CALIB_DATA
PARAM_DEV_CAPTURE_CFG = _dmcam.PARAM_DEV_CAPTURE_CFG
PARAM_ILLUM1_POWER = _dmcam.PARAM_ILLUM1_POWER
PARAM_ILLUM2_POWER = _dmcam.PARAM_ILLUM2_POWER
PARAM_ILLUM3_POWER = _dmcam.PARAM_ILLUM3_POWER
PARAM_ENUM_COUNT = _dmcam.PARAM_ENUM_COUNT
BIN_DATA_TYPE_MCU = _dmcam.BIN_DATA_TYPE_MCU
BIN_DATA_TYPE_TFC = _dmcam.BIN_DATA_TYPE_TFC
BIN_DATA_TYPE_CALIB = _dmcam.BIN_DATA_TYPE_CALIB
DM_BINNING_1X1 = _dmcam.DM_BINNING_1X1
DM_BINNING_2X2 = _dmcam.DM_BINNING_2X2
DM_BINNING_4X4 = _dmcam.DM_BINNING_4X4
DM_BINNING_8X8 = _dmcam.DM_BINNING_8X8
DM_BINNING_2X4 = _dmcam.DM_BINNING_2X4
DM_BINNING_CNT = _dmcam.DM_BINNING_CNT
class param_roi_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    srow = _swig_property(_dmcam.param_roi_t_srow_get, _dmcam.param_roi_t_srow_set)
    erow = _swig_property(_dmcam.param_roi_t_erow_get, _dmcam.param_roi_t_erow_set)
    scol = _swig_property(_dmcam.param_roi_t_scol_get, _dmcam.param_roi_t_scol_set)
    ecol = _swig_property(_dmcam.param_roi_t_ecol_get, _dmcam.param_roi_t_ecol_set)
    binning = _swig_property(_dmcam.param_roi_t_binning_get, _dmcam.param_roi_t_binning_set)
    max_fsize = _swig_property(_dmcam.param_roi_t_max_fsize_get, _dmcam.param_roi_t_max_fsize_set)

    def __init__(self):
        _dmcam.param_roi_t_swiginit(self, _dmcam.new_param_roi_t())
    __swig_destroy__ = _dmcam.delete_param_roi_t
param_roi_t_swigregister = _dmcam.param_roi_t_swigregister
param_roi_t_swigregister(param_roi_t)

class cap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    max_frame_width = _swig_property(_dmcam.cap_max_frame_width_get, _dmcam.cap_max_frame_width_set)
    max_frame_height = _swig_property(_dmcam.cap_max_frame_height_get, _dmcam.cap_max_frame_height_set)
    max_frame_depth = _swig_property(_dmcam.cap_max_frame_depth_get, _dmcam.cap_max_frame_depth_set)
    max_fps = _swig_property(_dmcam.cap_max_fps_get, _dmcam.cap_max_fps_set)
    max_intg_us = _swig_property(_dmcam.cap_max_intg_us_get, _dmcam.cap_max_intg_us_set)
    illum_board_type = _swig_property(_dmcam.cap_illum_board_type_get, _dmcam.cap_illum_board_type_set)
    sensor_board_type = _swig_property(_dmcam.cap_sensor_board_type_get, _dmcam.cap_sensor_board_type_set)

    def __init__(self):
        _dmcam.cap_swiginit(self, _dmcam.new_cap())
    __swig_destroy__ = _dmcam.delete_cap
cap_swigregister = _dmcam.cap_swigregister
cap_swigregister(cap)

class param_val_u(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    raw = _swig_property(_dmcam.param_val_u_raw_get, _dmcam.param_val_u_raw_set)
    dev_mode = _swig_property(_dmcam.param_val_u_dev_mode_get, _dmcam.param_val_u_dev_mode_set)
    mod_freq = _swig_property(_dmcam.param_val_u_mod_freq_get, _dmcam.param_val_u_mod_freq_set)
    info_vendor = _swig_property(_dmcam.param_val_u_info_vendor_get, _dmcam.param_val_u_info_vendor_set)
    info_product = _swig_property(_dmcam.param_val_u_info_product_get, _dmcam.param_val_u_info_product_set)
    info_capability = _swig_property(_dmcam.param_val_u_info_capability_get, _dmcam.param_val_u_info_capability_set)
    info_serial = _swig_property(_dmcam.param_val_u_info_serial_get)
    info_version = _swig_property(_dmcam.param_val_u_info_version_get)
    chip_info = _swig_property(_dmcam.param_val_u_chip_info_get)
    cinfo = _swig_property(_dmcam.param_val_u_cinfo_get)
    lens_param = _swig_property(_dmcam.param_val_u_lens_param_get)
    calib_freq = _swig_property(_dmcam.param_val_u_calib_freq_get)
    frame_format = _swig_property(_dmcam.param_val_u_frame_format_get)
    frame_rate = _swig_property(_dmcam.param_val_u_frame_rate_get)
    sync_delay = _swig_property(_dmcam.param_val_u_sync_delay_get)
    roi = _swig_property(_dmcam.param_val_u_roi_get, _dmcam.param_val_u_roi_set)
    illum_power = _swig_property(_dmcam.param_val_u_illum_power_get)
    intg = _swig_property(_dmcam.param_val_u_intg_get)
    intg_hdr = _swig_property(_dmcam.param_val_u_intg_hdr_get)
    phase_corr = _swig_property(_dmcam.param_val_u_phase_corr_get)
    temp = _swig_property(_dmcam.param_val_u_temp_get)
    sys_calib_coeff = _swig_property(_dmcam.param_val_u_sys_calib_coeff_get)
    sync_time = _swig_property(_dmcam.param_val_u_sync_time_get)
    dual_freq = _swig_property(_dmcam.param_val_u_dual_freq_get)
    cap_cfg = _swig_property(_dmcam.param_val_u_cap_cfg_get)
    calib_data_type = _swig_property(_dmcam.param_val_u_calib_data_type_get, _dmcam.param_val_u_calib_data_type_set)
    ambient_light_coeff = _swig_property(_dmcam.param_val_u_ambient_light_coeff_get, _dmcam.param_val_u_ambient_light_coeff_set)

    def __init__(self):
        _dmcam.param_val_u_swiginit(self, _dmcam.new_param_val_u())
    __swig_destroy__ = _dmcam.delete_param_val_u
param_val_u_swigregister = _dmcam.param_val_u_swigregister
param_val_u_swigregister(param_val_u)

class param_val_u_cap_cfg(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    mode = _swig_property(_dmcam.param_val_u_cap_cfg_mode_get, _dmcam.param_val_u_cap_cfg_mode_set)
    frames_per_trig = _swig_property(_dmcam.param_val_u_cap_cfg_frames_per_trig_get, _dmcam.param_val_u_cap_cfg_frames_per_trig_set)

    def __init__(self):
        _dmcam.param_val_u_cap_cfg_swiginit(self, _dmcam.new_param_val_u_cap_cfg())
    __swig_destroy__ = _dmcam.delete_param_val_u_cap_cfg
param_val_u_cap_cfg_swigregister = _dmcam.param_val_u_cap_cfg_swigregister
param_val_u_cap_cfg_swigregister(param_val_u_cap_cfg)

class param_val_u_dual_freq(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    mod_freq0 = _swig_property(_dmcam.param_val_u_dual_freq_mod_freq0_get, _dmcam.param_val_u_dual_freq_mod_freq0_set)
    mod_freq1 = _swig_property(_dmcam.param_val_u_dual_freq_mod_freq1_get, _dmcam.param_val_u_dual_freq_mod_freq1_set)

    def __init__(self):
        _dmcam.param_val_u_dual_freq_swiginit(self, _dmcam.new_param_val_u_dual_freq())
    __swig_destroy__ = _dmcam.delete_param_val_u_dual_freq
param_val_u_dual_freq_swigregister = _dmcam.param_val_u_dual_freq_swigregister
param_val_u_dual_freq_swigregister(param_val_u_dual_freq)

class param_val_u_sync_time(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    sec = _swig_property(_dmcam.param_val_u_sync_time_sec_get, _dmcam.param_val_u_sync_time_sec_set)
    us = _swig_property(_dmcam.param_val_u_sync_time_us_get, _dmcam.param_val_u_sync_time_us_set)

    def __init__(self):
        _dmcam.param_val_u_sync_time_swiginit(self, _dmcam.new_param_val_u_sync_time())
    __swig_destroy__ = _dmcam.delete_param_val_u_sync_time
param_val_u_sync_time_swigregister = _dmcam.param_val_u_sync_time_swigregister
param_val_u_sync_time_swigregister(param_val_u_sync_time)

class param_val_u_sys_calib_coeff(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    mod_freq = _swig_property(_dmcam.param_val_u_sys_calib_coeff_mod_freq_get, _dmcam.param_val_u_sys_calib_coeff_mod_freq_set)
    offset = _swig_property(_dmcam.param_val_u_sys_calib_coeff_offset_get, _dmcam.param_val_u_sys_calib_coeff_offset_set)
    coeff = _swig_property(_dmcam.param_val_u_sys_calib_coeff_coeff_get, _dmcam.param_val_u_sys_calib_coeff_coeff_set)
    random_freq = _swig_property(_dmcam.param_val_u_sys_calib_coeff_random_freq_get, _dmcam.param_val_u_sys_calib_coeff_random_freq_set)
    valid = _swig_property(_dmcam.param_val_u_sys_calib_coeff_valid_get, _dmcam.param_val_u_sys_calib_coeff_valid_set)
    frm_format = _swig_property(_dmcam.param_val_u_sys_calib_coeff_frm_format_get, _dmcam.param_val_u_sys_calib_coeff_frm_format_set)

    def __init__(self):
        _dmcam.param_val_u_sys_calib_coeff_swiginit(self, _dmcam.new_param_val_u_sys_calib_coeff())
    __swig_destroy__ = _dmcam.delete_param_val_u_sys_calib_coeff
param_val_u_sys_calib_coeff_swigregister = _dmcam.param_val_u_sys_calib_coeff_swigregister
param_val_u_sys_calib_coeff_swigregister(param_val_u_sys_calib_coeff)

class param_val_u_temp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tl_cal = _swig_property(_dmcam.param_val_u_temp_tl_cal_get, _dmcam.param_val_u_temp_tl_cal_set)
    tr_cal = _swig_property(_dmcam.param_val_u_temp_tr_cal_get, _dmcam.param_val_u_temp_tr_cal_set)
    bl_cal = _swig_property(_dmcam.param_val_u_temp_bl_cal_get, _dmcam.param_val_u_temp_bl_cal_set)
    br_cal = _swig_property(_dmcam.param_val_u_temp_br_cal_get, _dmcam.param_val_u_temp_br_cal_set)
    ib_cal = _swig_property(_dmcam.param_val_u_temp_ib_cal_get, _dmcam.param_val_u_temp_ib_cal_set)

    def __init__(self):
        _dmcam.param_val_u_temp_swiginit(self, _dmcam.new_param_val_u_temp())
    __swig_destroy__ = _dmcam.delete_param_val_u_temp
param_val_u_temp_swigregister = _dmcam.param_val_u_temp_swigregister
param_val_u_temp_swigregister(param_val_u_temp)

class param_val_u_phase_corr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    corr1 = _swig_property(_dmcam.param_val_u_phase_corr_corr1_get, _dmcam.param_val_u_phase_corr_corr1_set)
    corr2 = _swig_property(_dmcam.param_val_u_phase_corr_corr2_get, _dmcam.param_val_u_phase_corr_corr2_set)

    def __init__(self):
        _dmcam.param_val_u_phase_corr_swiginit(self, _dmcam.new_param_val_u_phase_corr())
    __swig_destroy__ = _dmcam.delete_param_val_u_phase_corr
param_val_u_phase_corr_swigregister = _dmcam.param_val_u_phase_corr_swigregister
param_val_u_phase_corr_swigregister(param_val_u_phase_corr)

class param_val_u_intg_hdr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    intg_3dhdr = _swig_property(_dmcam.param_val_u_intg_hdr_intg_3dhdr_get, _dmcam.param_val_u_intg_hdr_intg_3dhdr_set)

    def __init__(self):
        _dmcam.param_val_u_intg_hdr_swiginit(self, _dmcam.new_param_val_u_intg_hdr())
    __swig_destroy__ = _dmcam.delete_param_val_u_intg_hdr
param_val_u_intg_hdr_swigregister = _dmcam.param_val_u_intg_hdr_swigregister
param_val_u_intg_hdr_swigregister(param_val_u_intg_hdr)

class param_val_u_intg(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    intg_us = _swig_property(_dmcam.param_val_u_intg_intg_us_get, _dmcam.param_val_u_intg_intg_us_set)
    intg_us_param = _swig_property(_dmcam.param_val_u_intg_intg_us_param_get, _dmcam.param_val_u_intg_intg_us_param_set)

    def __init__(self):
        _dmcam.param_val_u_intg_swiginit(self, _dmcam.new_param_val_u_intg())
    __swig_destroy__ = _dmcam.delete_param_val_u_intg
param_val_u_intg_swigregister = _dmcam.param_val_u_intg_swigregister
param_val_u_intg_swigregister(param_val_u_intg)

class param_val_u_illum_power(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    percent = _swig_property(_dmcam.param_val_u_illum_power_percent_get, _dmcam.param_val_u_illum_power_percent_set)
    ch = _swig_property(_dmcam.param_val_u_illum_power_ch_get, _dmcam.param_val_u_illum_power_ch_set)

    def __init__(self):
        _dmcam.param_val_u_illum_power_swiginit(self, _dmcam.new_param_val_u_illum_power())
    __swig_destroy__ = _dmcam.delete_param_val_u_illum_power
param_val_u_illum_power_swigregister = _dmcam.param_val_u_illum_power_swigregister
param_val_u_illum_power_swigregister(param_val_u_illum_power)

class param_val_u_sync_delay(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    random_delay_en = _swig_property(_dmcam.param_val_u_sync_delay_random_delay_en_get, _dmcam.param_val_u_sync_delay_random_delay_en_set)
    delay = _swig_property(_dmcam.param_val_u_sync_delay_delay_get, _dmcam.param_val_u_sync_delay_delay_set)

    def __init__(self):
        _dmcam.param_val_u_sync_delay_swiginit(self, _dmcam.new_param_val_u_sync_delay())
    __swig_destroy__ = _dmcam.delete_param_val_u_sync_delay
param_val_u_sync_delay_swigregister = _dmcam.param_val_u_sync_delay_swigregister
param_val_u_sync_delay_swigregister(param_val_u_sync_delay)

class param_val_u_frame_rate(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    fps = _swig_property(_dmcam.param_val_u_frame_rate_fps_get, _dmcam.param_val_u_frame_rate_fps_set)

    def __init__(self):
        _dmcam.param_val_u_frame_rate_swiginit(self, _dmcam.new_param_val_u_frame_rate())
    __swig_destroy__ = _dmcam.delete_param_val_u_frame_rate
param_val_u_frame_rate_swigregister = _dmcam.param_val_u_frame_rate_swigregister
param_val_u_frame_rate_swigregister(param_val_u_frame_rate)

class param_val_u_frame_format(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    format = _swig_property(_dmcam.param_val_u_frame_format_format_get, _dmcam.param_val_u_frame_format_format_set)

    def __init__(self):
        _dmcam.param_val_u_frame_format_swiginit(self, _dmcam.new_param_val_u_frame_format())
    __swig_destroy__ = _dmcam.delete_param_val_u_frame_format
param_val_u_frame_format_swigregister = _dmcam.param_val_u_frame_format_swigregister
param_val_u_frame_format_swigregister(param_val_u_frame_format)

class param_val_u_calib_freq(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    total_cnt = _swig_property(_dmcam.param_val_u_calib_freq_total_cnt_get, _dmcam.param_val_u_calib_freq_total_cnt_set)
    remain_cnt = _swig_property(_dmcam.param_val_u_calib_freq_remain_cnt_get, _dmcam.param_val_u_calib_freq_remain_cnt_set)
    freq = _swig_property(_dmcam.param_val_u_calib_freq_freq_get, _dmcam.param_val_u_calib_freq_freq_set)

    def __init__(self):
        _dmcam.param_val_u_calib_freq_swiginit(self, _dmcam.new_param_val_u_calib_freq())
    __swig_destroy__ = _dmcam.delete_param_val_u_calib_freq
param_val_u_calib_freq_swigregister = _dmcam.param_val_u_calib_freq_swigregister
param_val_u_calib_freq_swigregister(param_val_u_calib_freq)

class param_val_u_lens_param(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    cx = _swig_property(_dmcam.param_val_u_lens_param_cx_get, _dmcam.param_val_u_lens_param_cx_set)
    cy = _swig_property(_dmcam.param_val_u_lens_param_cy_get, _dmcam.param_val_u_lens_param_cy_set)
    fx = _swig_property(_dmcam.param_val_u_lens_param_fx_get, _dmcam.param_val_u_lens_param_fx_set)
    fy = _swig_property(_dmcam.param_val_u_lens_param_fy_get, _dmcam.param_val_u_lens_param_fy_set)

    def __init__(self):
        _dmcam.param_val_u_lens_param_swiginit(self, _dmcam.new_param_val_u_lens_param())
    __swig_destroy__ = _dmcam.delete_param_val_u_lens_param
param_val_u_lens_param_swigregister = _dmcam.param_val_u_lens_param_swigregister
param_val_u_lens_param_swigregister(param_val_u_lens_param)

class param_val_u_cinfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    valid = _swig_property(_dmcam.param_val_u_cinfo_valid_get, _dmcam.param_val_u_cinfo_valid_set)
    flag = _swig_property(_dmcam.param_val_u_cinfo_flag_get, _dmcam.param_val_u_cinfo_flag_set)
    ID = _swig_property(_dmcam.param_val_u_cinfo_ID_get, _dmcam.param_val_u_cinfo_ID_set)
    timestamp = _swig_property(_dmcam.param_val_u_cinfo_timestamp_get, _dmcam.param_val_u_cinfo_timestamp_set)
    fsize = _swig_property(_dmcam.param_val_u_cinfo_fsize_get, _dmcam.param_val_u_cinfo_fsize_set)
    datasize = _swig_property(_dmcam.param_val_u_cinfo_datasize_get, _dmcam.param_val_u_cinfo_datasize_set)

    def __init__(self):
        _dmcam.param_val_u_cinfo_swiginit(self, _dmcam.new_param_val_u_cinfo())
    __swig_destroy__ = _dmcam.delete_param_val_u_cinfo
param_val_u_cinfo_swigregister = _dmcam.param_val_u_cinfo_swigregister
param_val_u_cinfo_swigregister(param_val_u_cinfo)

class param_val_u_chip_info(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    part_ver = _swig_property(_dmcam.param_val_u_chip_info_part_ver_get, _dmcam.param_val_u_chip_info_part_ver_set)
    chip_id = _swig_property(_dmcam.param_val_u_chip_info_chip_id_get, _dmcam.param_val_u_chip_info_chip_id_set)
    wafer_id = _swig_property(_dmcam.param_val_u_chip_info_wafer_id_get, _dmcam.param_val_u_chip_info_wafer_id_set)

    def __init__(self):
        _dmcam.param_val_u_chip_info_swiginit(self, _dmcam.new_param_val_u_chip_info())
    __swig_destroy__ = _dmcam.delete_param_val_u_chip_info
param_val_u_chip_info_swigregister = _dmcam.param_val_u_chip_info_swigregister
param_val_u_chip_info_swigregister(param_val_u_chip_info)

class param_val_u_info_version(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    hw_ver = _swig_property(_dmcam.param_val_u_info_version_hw_ver_get, _dmcam.param_val_u_info_version_hw_ver_set)
    sw_ver = _swig_property(_dmcam.param_val_u_info_version_sw_ver_get, _dmcam.param_val_u_info_version_sw_ver_set)
    sw2_ver = _swig_property(_dmcam.param_val_u_info_version_sw2_ver_get, _dmcam.param_val_u_info_version_sw2_ver_set)
    hw2_ver = _swig_property(_dmcam.param_val_u_info_version_hw2_ver_get, _dmcam.param_val_u_info_version_hw2_ver_set)

    def __init__(self):
        _dmcam.param_val_u_info_version_swiginit(self, _dmcam.new_param_val_u_info_version())
    __swig_destroy__ = _dmcam.delete_param_val_u_info_version
param_val_u_info_version_swigregister = _dmcam.param_val_u_info_version_swigregister
param_val_u_info_version_swigregister(param_val_u_info_version)

class param_val_u_info_serial(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    serial = _swig_property(_dmcam.param_val_u_info_serial_serial_get, _dmcam.param_val_u_info_serial_serial_set)

    def __init__(self):
        _dmcam.param_val_u_info_serial_swiginit(self, _dmcam.new_param_val_u_info_serial())
    __swig_destroy__ = _dmcam.delete_param_val_u_info_serial
param_val_u_info_serial_swigregister = _dmcam.param_val_u_info_serial_swigregister
param_val_u_info_serial_swigregister(param_val_u_info_serial)

class param_item_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    param_id = _swig_property(_dmcam.param_item_t_param_id_get, _dmcam.param_item_t_param_id_set)
    param_val_len = _swig_property(_dmcam.param_item_t_param_val_len_get, _dmcam.param_item_t_param_val_len_set)
    param_val = _swig_property(_dmcam.param_item_t_param_val_get, _dmcam.param_item_t_param_val_set)

    def __init__(self):
        _dmcam.param_item_t_swiginit(self, _dmcam.new_param_item_t())
    __swig_destroy__ = _dmcam.delete_param_item_t
param_item_t_swigregister = _dmcam.param_item_t_swigregister
param_item_t_swigregister(param_item_t)

DM_FRAME_FMT_RAW_DIST = _dmcam.DM_FRAME_FMT_RAW_DIST
DM_FRAME_FMT_DISTANCE = _dmcam.DM_FRAME_FMT_DISTANCE
DM_FRAME_FMT_GRAY = _dmcam.DM_FRAME_FMT_GRAY
DM_FRAME_FMT_PCLOUD = _dmcam.DM_FRAME_FMT_PCLOUD
DM_FRAME_FMT_RGB = _dmcam.DM_FRAME_FMT_RGB
class frame_info_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    frame_size = _swig_property(_dmcam.frame_info_t_frame_size_get, _dmcam.frame_info_t_frame_size_set)
    frame_format = _swig_property(_dmcam.frame_info_t_frame_format_get, _dmcam.frame_info_t_frame_format_set)
    frame_idx = _swig_property(_dmcam.frame_info_t_frame_idx_get, _dmcam.frame_info_t_frame_idx_set)
    width = _swig_property(_dmcam.frame_info_t_width_get, _dmcam.frame_info_t_width_set)
    height = _swig_property(_dmcam.frame_info_t_height_get, _dmcam.frame_info_t_height_set)
    depth = _swig_property(_dmcam.frame_info_t_depth_get, _dmcam.frame_info_t_depth_set)
    pixel_format = _swig_property(_dmcam.frame_info_t_pixel_format_get, _dmcam.frame_info_t_pixel_format_set)
    priv_code = _swig_property(_dmcam.frame_info_t_priv_code_get, _dmcam.frame_info_t_priv_code_set)
    temp0 = _swig_property(_dmcam.frame_info_t_temp0_get, _dmcam.frame_info_t_temp0_set)
    temp1 = _swig_property(_dmcam.frame_info_t_temp1_get, _dmcam.frame_info_t_temp1_set)
    rx_ts = _swig_property(_dmcam.frame_info_t_rx_ts_get, _dmcam.frame_info_t_rx_ts_set)
    rx_us = _swig_property(_dmcam.frame_info_t_rx_us_get, _dmcam.frame_info_t_rx_us_set)
    dist_is_z = _swig_property(_dmcam.frame_info_t_dist_is_z_get, _dmcam.frame_info_t_dist_is_z_set)
    reserved = _swig_property(_dmcam.frame_info_t_reserved_get, _dmcam.frame_info_t_reserved_set)
    meta_size = _swig_property(_dmcam.frame_info_t_meta_size_get, _dmcam.frame_info_t_meta_size_set)
    meta_intg = _swig_property(_dmcam.frame_info_t_meta_intg_get, _dmcam.frame_info_t_meta_intg_set)
    reserved2 = _swig_property(_dmcam.frame_info_t_reserved2_get, _dmcam.frame_info_t_reserved2_set)

    def __init__(self):
        _dmcam.frame_info_t_swiginit(self, _dmcam.new_frame_info_t())
    __swig_destroy__ = _dmcam.delete_frame_info_t
frame_info_t_swigregister = _dmcam.frame_info_t_swigregister
frame_info_t_swigregister(frame_info_t)

class frame_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    frame_info = _swig_property(_dmcam.frame_t_frame_info_get, _dmcam.frame_t_frame_info_set)
    frame_data = _swig_property(_dmcam.frame_t_frame_data_get, _dmcam.frame_t_frame_data_set)

    def __init__(self):
        _dmcam.frame_t_swiginit(self, _dmcam.new_frame_t())
    __swig_destroy__ = _dmcam.delete_frame_t
frame_t_swigregister = _dmcam.frame_t_swigregister
frame_t_swigregister(frame_t)

class cap_cfg_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    cache_frames_cnt = _swig_property(_dmcam.cap_cfg_t_cache_frames_cnt_get, _dmcam.cap_cfg_t_cache_frames_cnt_set)
    on_frame_ready = _swig_property(_dmcam.cap_cfg_t_on_frame_ready_get, _dmcam.cap_cfg_t_on_frame_ready_set)
    on_error = _swig_property(_dmcam.cap_cfg_t_on_error_get, _dmcam.cap_cfg_t_on_error_set)
    en_save_manually = _swig_property(_dmcam.cap_cfg_t_en_save_manually_get, _dmcam.cap_cfg_t_en_save_manually_set)
    en_save_replay = _swig_property(_dmcam.cap_cfg_t_en_save_replay_get, _dmcam.cap_cfg_t_en_save_replay_set)
    en_save_dist_u16 = _swig_property(_dmcam.cap_cfg_t_en_save_dist_u16_get, _dmcam.cap_cfg_t_en_save_dist_u16_set)
    en_save_gray_u16 = _swig_property(_dmcam.cap_cfg_t_en_save_gray_u16_get, _dmcam.cap_cfg_t_en_save_gray_u16_set)
    fname_replay = _swig_property(_dmcam.cap_cfg_t_fname_replay_get, _dmcam.cap_cfg_t_fname_replay_set)
    en_fdev_rewind = _swig_property(_dmcam.cap_cfg_t_en_fdev_rewind_get, _dmcam.cap_cfg_t_en_fdev_rewind_set)

    def __init__(self):
        _dmcam.cap_cfg_t_swiginit(self, _dmcam.new_cap_cfg_t())
    __swig_destroy__ = _dmcam.delete_cap_cfg_t
cap_cfg_t_swigregister = _dmcam.cap_cfg_t_swigregister
cap_cfg_t_swigregister(cap_cfg_t)

class dev_info_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    desc = _swig_property(_dmcam.dev_info_t_desc_get)
    id = _swig_property(_dmcam.dev_info_t_id_get)
    ver = _swig_property(_dmcam.dev_info_t_ver_get)
    cap = _swig_property(_dmcam.dev_info_t_cap_get)
    chip = _swig_property(_dmcam.dev_info_t_chip_get)
    calib = _swig_property(_dmcam.dev_info_t_calib_get)
    lens = _swig_property(_dmcam.dev_info_t_lens_get, _dmcam.dev_info_t_lens_set)

    def __init__(self):
        _dmcam.dev_info_t_swiginit(self, _dmcam.new_dev_info_t())
    __swig_destroy__ = _dmcam.delete_dev_info_t
dev_info_t_swigregister = _dmcam.dev_info_t_swigregister
dev_info_t_swigregister(dev_info_t)

class dev_info_t_calib(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data_fpath = _swig_property(_dmcam.dev_info_t_calib_data_fpath_get, _dmcam.dev_info_t_calib_data_fpath_set)
    freq_list = _swig_property(_dmcam.dev_info_t_calib_freq_list_get, _dmcam.dev_info_t_calib_freq_list_set)
    n_freq = _swig_property(_dmcam.dev_info_t_calib_n_freq_get, _dmcam.dev_info_t_calib_n_freq_set)
    flag = _swig_property(_dmcam.dev_info_t_calib_flag_get, _dmcam.dev_info_t_calib_flag_set)
    timestamp = _swig_property(_dmcam.dev_info_t_calib_timestamp_get, _dmcam.dev_info_t_calib_timestamp_set)
    fsize = _swig_property(_dmcam.dev_info_t_calib_fsize_get, _dmcam.dev_info_t_calib_fsize_set)
    datasize = _swig_property(_dmcam.dev_info_t_calib_datasize_get, _dmcam.dev_info_t_calib_datasize_set)
    reserved = _swig_property(_dmcam.dev_info_t_calib_reserved_get, _dmcam.dev_info_t_calib_reserved_set)

    def __init__(self):
        _dmcam.dev_info_t_calib_swiginit(self, _dmcam.new_dev_info_t_calib())
    __swig_destroy__ = _dmcam.delete_dev_info_t_calib
dev_info_t_calib_swigregister = _dmcam.dev_info_t_calib_swigregister
dev_info_t_calib_swigregister(dev_info_t_calib)

class dev_info_t_chip(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_dmcam.dev_info_t_chip_name_get)
    type_id = _swig_property(_dmcam.dev_info_t_chip_type_id_get, _dmcam.dev_info_t_chip_type_id_set)
    uniq_id = _swig_property(_dmcam.dev_info_t_chip_uniq_id_get, _dmcam.dev_info_t_chip_uniq_id_set)
    reserved = _swig_property(_dmcam.dev_info_t_chip_reserved_get, _dmcam.dev_info_t_chip_reserved_set)

    def __init__(self):
        _dmcam.dev_info_t_chip_swiginit(self, _dmcam.new_dev_info_t_chip())
    __swig_destroy__ = _dmcam.delete_dev_info_t_chip
dev_info_t_chip_swigregister = _dmcam.dev_info_t_chip_swigregister
dev_info_t_chip_swigregister(dev_info_t_chip)

class dev_info_t_cap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    max_frame_width = _swig_property(_dmcam.dev_info_t_cap_max_frame_width_get, _dmcam.dev_info_t_cap_max_frame_width_set)
    max_frame_height = _swig_property(_dmcam.dev_info_t_cap_max_frame_height_get, _dmcam.dev_info_t_cap_max_frame_height_set)
    max_frame_depth = _swig_property(_dmcam.dev_info_t_cap_max_frame_depth_get, _dmcam.dev_info_t_cap_max_frame_depth_set)
    max_fps = _swig_property(_dmcam.dev_info_t_cap_max_fps_get, _dmcam.dev_info_t_cap_max_fps_set)
    max_intg_us = _swig_property(_dmcam.dev_info_t_cap_max_intg_us_get, _dmcam.dev_info_t_cap_max_intg_us_set)
    reserved = _swig_property(_dmcam.dev_info_t_cap_reserved_get, _dmcam.dev_info_t_cap_reserved_set)

    def __init__(self):
        _dmcam.dev_info_t_cap_swiginit(self, _dmcam.new_dev_info_t_cap())
    __swig_destroy__ = _dmcam.delete_dev_info_t_cap
dev_info_t_cap_swigregister = _dmcam.dev_info_t_cap_swigregister
dev_info_t_cap_swigregister(dev_info_t_cap)

class dev_info_t_ver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    hw_ver = _swig_property(_dmcam.dev_info_t_ver_hw_ver_get, _dmcam.dev_info_t_ver_hw_ver_set)
    sw_ver = _swig_property(_dmcam.dev_info_t_ver_sw_ver_get, _dmcam.dev_info_t_ver_sw_ver_set)
    sw2_ver = _swig_property(_dmcam.dev_info_t_ver_sw2_ver_get, _dmcam.dev_info_t_ver_sw2_ver_set)
    hw2_ver = _swig_property(_dmcam.dev_info_t_ver_hw2_ver_get, _dmcam.dev_info_t_ver_hw2_ver_set)
    reserved = _swig_property(_dmcam.dev_info_t_ver_reserved_get, _dmcam.dev_info_t_ver_reserved_set)

    def __init__(self):
        _dmcam.dev_info_t_ver_swiginit(self, _dmcam.new_dev_info_t_ver())
    __swig_destroy__ = _dmcam.delete_dev_info_t_ver
dev_info_t_ver_swigregister = _dmcam.dev_info_t_ver_swigregister
dev_info_t_ver_swigregister(dev_info_t_ver)

class dev_info_t_id(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    dev_id = _swig_property(_dmcam.dev_info_t_id_dev_id_get, _dmcam.dev_info_t_id_dev_id_set)
    uri = _swig_property(_dmcam.dev_info_t_id_uri_get, _dmcam.dev_info_t_id_uri_set)
    serial = _swig_property(_dmcam.dev_info_t_id_serial_get, _dmcam.dev_info_t_id_serial_set)
    reserved = _swig_property(_dmcam.dev_info_t_id_reserved_get, _dmcam.dev_info_t_id_reserved_set)

    def __init__(self):
        _dmcam.dev_info_t_id_swiginit(self, _dmcam.new_dev_info_t_id())
    __swig_destroy__ = _dmcam.delete_dev_info_t_id
dev_info_t_id_swigregister = _dmcam.dev_info_t_id_swigregister
dev_info_t_id_swigregister(dev_info_t_id)

class dev_info_t_desc(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    vendor = _swig_property(_dmcam.dev_info_t_desc_vendor_get, _dmcam.dev_info_t_desc_vendor_set)
    product = _swig_property(_dmcam.dev_info_t_desc_product_get, _dmcam.dev_info_t_desc_product_set)
    serial = _swig_property(_dmcam.dev_info_t_desc_serial_get, _dmcam.dev_info_t_desc_serial_set)
    reserved = _swig_property(_dmcam.dev_info_t_desc_reserved_get, _dmcam.dev_info_t_desc_reserved_set)

    def __init__(self):
        _dmcam.dev_info_t_desc_swiginit(self, _dmcam.new_dev_info_t_desc())
    __swig_destroy__ = _dmcam.delete_dev_info_t_desc
dev_info_t_desc_swigregister = _dmcam.dev_info_t_desc_swigregister
dev_info_t_desc_swigregister(dev_info_t_desc)


def init(log_fname):
    return _dmcam.init(log_fname)
init = _dmcam.init

def uninit():
    return _dmcam.uninit()
uninit = _dmcam.uninit

def log_cfg(console_level, file_level, usb_level):
    return _dmcam.log_cfg(console_level, file_level, usb_level)
log_cfg = _dmcam.log_cfg

def path_set(path):
    return _dmcam.path_set(path)
path_set = _dmcam.path_set

def path_get():
    return _dmcam.path_get()
path_get = _dmcam.path_get

def error_name(error_code):
    return _dmcam.error_name(error_code)
error_name = _dmcam.error_name

def dev_list():
    return _dmcam.dev_list()
dev_list = _dmcam.dev_list

def dev_open(dev):
    return _dmcam.dev_open(dev)
dev_open = _dmcam.dev_open

def dev_open_by_fd(fd):
    return _dmcam.dev_open_by_fd(fd)
dev_open_by_fd = _dmcam.dev_open_by_fd

def dev_open_by_uri(uri_str):
    return _dmcam.dev_open_by_uri(uri_str)
dev_open_by_uri = _dmcam.dev_open_by_uri

def dev_close(dev):
    return _dmcam.dev_close(dev)
dev_close = _dmcam.dev_close

def dev_get_uri(dev, uri_str):
    return _dmcam.dev_get_uri(dev, uri_str)
dev_get_uri = _dmcam.dev_get_uri

def dev_get_info(dev, info):
    return _dmcam.dev_get_info(dev, info)
dev_get_info = _dmcam.dev_get_info

def dev_reset(dev, target):
    return _dmcam.dev_reset(dev, target)
dev_reset = _dmcam.dev_reset

def reg_batch_write(dev, target, reg_base, reg_vals):
    return _dmcam.reg_batch_write(dev, target, reg_base, reg_vals)
reg_batch_write = _dmcam.reg_batch_write

def reg_batch_read(dev, target, reg_base, reg_vals):
    return _dmcam.reg_batch_read(dev, target, reg_base, reg_vals)
reg_batch_read = _dmcam.reg_batch_read

def param_batch_set(dev, param_items):
    return _dmcam.param_batch_set(dev, param_items)
param_batch_set = _dmcam.param_batch_set

def param_batch_get(dev, param_items):
    return _dmcam.param_batch_get(dev, param_items)
param_batch_get = _dmcam.param_batch_get

def cap_config_set(dev, cfg):
    return _dmcam.cap_config_set(dev, cfg)
cap_config_set = _dmcam.cap_config_set

def cap_config_get(dev, cfg):
    return _dmcam.cap_config_get(dev, cfg)
cap_config_get = _dmcam.cap_config_get

def cap_set_callback_on_frame_ready(*args):
    return _dmcam.cap_set_callback_on_frame_ready(*args)
cap_set_callback_on_frame_ready = _dmcam.cap_set_callback_on_frame_ready

def cap_set_callback_on_error(*args):
    return _dmcam.cap_set_callback_on_error(*args)
cap_set_callback_on_error = _dmcam.cap_set_callback_on_error

def cap_snapshot(dev, frame_data, frame):
    return _dmcam.cap_snapshot(dev, frame_data, frame)
cap_snapshot = _dmcam.cap_snapshot

def cap_is_ongoing(dev):
    return _dmcam.cap_is_ongoing(dev)
cap_is_ongoing = _dmcam.cap_is_ongoing

def cap_start(dev):
    return _dmcam.cap_start(dev)
cap_start = _dmcam.cap_start

def cap_stop(dev):
    return _dmcam.cap_stop(dev)
cap_stop = _dmcam.cap_stop

def cap_get_frames(dev, frame_num, frame_data, first_frame_info):
    return _dmcam.cap_get_frames(dev, frame_num, frame_data, first_frame_info)
cap_get_frames = _dmcam.cap_get_frames

def cap_get_frame(dev, frame_data, frame_info):
    return _dmcam.cap_get_frame(dev, frame_data, frame_info)
cap_get_frame = _dmcam.cap_get_frame

def cap_save_frame(dev, frame_data, frame_info):
    return _dmcam.cap_save_frame(dev, frame_data, frame_info)
cap_save_frame = _dmcam.cap_save_frame

def cap_seek_frame(dev, frame_cnt_offset, whence):
    return _dmcam.cap_seek_frame(dev, frame_cnt_offset, whence)
cap_seek_frame = _dmcam.cap_seek_frame

def firmware_upgrade(dev, type, version, file_name):
    return _dmcam.firmware_upgrade(dev, type, version, file_name)
firmware_upgrade = _dmcam.firmware_upgrade

def data_download(dev, name, type, version, addr):
    return _dmcam.data_download(dev, name, type, version, addr)
data_download = _dmcam.data_download

def data_upload(dev, type, file_name):
    return _dmcam.data_upload(dev, type, file_name)
data_upload = _dmcam.data_upload

def get_raw_frames_ex(dev, dst, src, fr_info):
    return _dmcam.get_raw_frames_ex(dev, dst, src, fr_info)
get_raw_frames_ex = _dmcam.get_raw_frames_ex

def frame_get_distance(dev, dst, src, finfo):
    return _dmcam.frame_get_distance(dev, dst, src, finfo)
frame_get_distance = _dmcam.frame_get_distance

def frame_get_dist_raw(dev, dst, src, finfo):
    return _dmcam.frame_get_dist_raw(dev, dst, src, finfo)
frame_get_dist_raw = _dmcam.frame_get_dist_raw

def frame_get_dist_f32(dev, dst, src, finfo):
    return _dmcam.frame_get_dist_f32(dev, dst, src, finfo)
frame_get_dist_f32 = _dmcam.frame_get_dist_f32

def frame_get_dist_u16(dev, dst, src, finfo):
    return _dmcam.frame_get_dist_u16(dev, dst, src, finfo)
frame_get_dist_u16 = _dmcam.frame_get_dist_u16

def frame_get_gray(dev, dst, src, finfo):
    return _dmcam.frame_get_gray(dev, dst, src, finfo)
frame_get_gray = _dmcam.frame_get_gray

def frame_get_gray_f32(dev, dst, src, finfo):
    return _dmcam.frame_get_gray_f32(dev, dst, src, finfo)
frame_get_gray_f32 = _dmcam.frame_get_gray_f32

def frame_get_gray_u16(dev, dst, src, finfo):
    return _dmcam.frame_get_gray_u16(dev, dst, src, finfo)
frame_get_gray_u16 = _dmcam.frame_get_gray_u16

def frame_get_pcl(dev, pcl, dist, img_w, img_h, p_cam_param):
    return _dmcam.frame_get_pcl(dev, pcl, dist, img_w, img_h, p_cam_param)
frame_get_pcl = _dmcam.frame_get_pcl

def frame_get_pcl_xyzd(dev, pcl, dist, img_w, img_h, pseudo_color, pseudo_range_min_mm, pseudo_range_max_mm, p_cam_param):
    return _dmcam.frame_get_pcl_xyzd(dev, pcl, dist, img_w, img_h, pseudo_color, pseudo_range_min_mm, pseudo_range_max_mm, p_cam_param)
frame_get_pcl_xyzd = _dmcam.frame_get_pcl_xyzd

def frame_get_pcl_xyzi(dev, pcl, dist, gray, img_w, img_h, ir_balance, p_cam_param):
    return _dmcam.frame_get_pcl_xyzi(dev, pcl, dist, gray, img_w, img_h, ir_balance, p_cam_param)
frame_get_pcl_xyzi = _dmcam.frame_get_pcl_xyzi
DMCAM_FILTER_ID_LEN_CALIB = _dmcam.DMCAM_FILTER_ID_LEN_CALIB
DMCAM_FILTER_ID_PIXEL_CALIB = _dmcam.DMCAM_FILTER_ID_PIXEL_CALIB
DMCAM_FILTER_ID_DEPTH_FILTER = _dmcam.DMCAM_FILTER_ID_DEPTH_FILTER
DMCAM_FILTER_ID_RESERVED = _dmcam.DMCAM_FILTER_ID_RESERVED
DMCAM_FILTER_ID_AMP = _dmcam.DMCAM_FILTER_ID_AMP
DMCAM_FILTER_ID_AUTO_INTG = _dmcam.DMCAM_FILTER_ID_AUTO_INTG
DMCAM_FILTER_ID_SYNC_DELAY = _dmcam.DMCAM_FILTER_ID_SYNC_DELAY
DMCAM_FILTER_ID_TEMP_MONITOR = _dmcam.DMCAM_FILTER_ID_TEMP_MONITOR
DMCAM_FILTER_ID_HDR = _dmcam.DMCAM_FILTER_ID_HDR
DMCAM_FILTER_ID_OFFSET = _dmcam.DMCAM_FILTER_ID_OFFSET
DMCAM_FILTER_ID_SPORT_MODE = _dmcam.DMCAM_FILTER_ID_SPORT_MODE
DMCAM_FILTER_ID_SYS_CALIB = _dmcam.DMCAM_FILTER_ID_SYS_CALIB
DMCAM_FILTER_ID_AMBIENT_LIGHT_CALIB = _dmcam.DMCAM_FILTER_ID_AMBIENT_LIGHT_CALIB
DMCAM_FILTER_ID_FLYNOISE = _dmcam.DMCAM_FILTER_ID_FLYNOISE
DMCAM_FILTER_ID_TEMP_CALIB = _dmcam.DMCAM_FILTER_ID_TEMP_CALIB
DMCAM_FILTER_ID_MEDIAN = _dmcam.DMCAM_FILTER_ID_MEDIAN
DMCAM_FILTER_CNT = _dmcam.DMCAM_FILTER_CNT
class filter_args_u(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    raw = _swig_property(_dmcam.filter_args_u_raw_get, _dmcam.filter_args_u_raw_set)
    case_idx = _swig_property(_dmcam.filter_args_u_case_idx_get, _dmcam.filter_args_u_case_idx_set)
    lens_id = _swig_property(_dmcam.filter_args_u_lens_id_get, _dmcam.filter_args_u_lens_id_set)
    min_amp = _swig_property(_dmcam.filter_args_u_min_amp_get, _dmcam.filter_args_u_min_amp_set)
    sat_ratio = _swig_property(_dmcam.filter_args_u_sat_ratio_get, _dmcam.filter_args_u_sat_ratio_set)
    sync_delay = _swig_property(_dmcam.filter_args_u_sync_delay_get, _dmcam.filter_args_u_sync_delay_set)
    temp_threshold = _swig_property(_dmcam.filter_args_u_temp_threshold_get, _dmcam.filter_args_u_temp_threshold_set)
    intg = _swig_property(_dmcam.filter_args_u_intg_get)
    median_ksize = _swig_property(_dmcam.filter_args_u_median_ksize_get, _dmcam.filter_args_u_median_ksize_set)
    offset_mm = _swig_property(_dmcam.filter_args_u_offset_mm_get, _dmcam.filter_args_u_offset_mm_set)
    scale_x1000 = _swig_property(_dmcam.filter_args_u_scale_x1000_get, _dmcam.filter_args_u_scale_x1000_set)
    sport_mode = _swig_property(_dmcam.filter_args_u_sport_mode_get, _dmcam.filter_args_u_sport_mode_set)
    k_ambient_light = _swig_property(_dmcam.filter_args_u_k_ambient_light_get, _dmcam.filter_args_u_k_ambient_light_set)
    binning_info = _swig_property(_dmcam.filter_args_u_binning_info_get)
    depth_filter_mode = _swig_property(_dmcam.filter_args_u_depth_filter_mode_get, _dmcam.filter_args_u_depth_filter_mode_set)
    depth_filter_strength = _swig_property(_dmcam.filter_args_u_depth_filter_strength_get, _dmcam.filter_args_u_depth_filter_strength_set)
    fly_noise_threshold = _swig_property(_dmcam.filter_args_u_fly_noise_threshold_get, _dmcam.filter_args_u_fly_noise_threshold_set)

    def __init__(self):
        _dmcam.filter_args_u_swiginit(self, _dmcam.new_filter_args_u())
    __swig_destroy__ = _dmcam.delete_filter_args_u
filter_args_u_swigregister = _dmcam.filter_args_u_swigregister
filter_args_u_swigregister(filter_args_u)

class filter_args_u_binning_info(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    col_reduction = _swig_property(_dmcam.filter_args_u_binning_info_col_reduction_get, _dmcam.filter_args_u_binning_info_col_reduction_set)
    row_reduction = _swig_property(_dmcam.filter_args_u_binning_info_row_reduction_get, _dmcam.filter_args_u_binning_info_row_reduction_set)

    def __init__(self):
        _dmcam.filter_args_u_binning_info_swiginit(self, _dmcam.new_filter_args_u_binning_info())
    __swig_destroy__ = _dmcam.delete_filter_args_u_binning_info
filter_args_u_binning_info_swigregister = _dmcam.filter_args_u_binning_info_swigregister
filter_args_u_binning_info_swigregister(filter_args_u_binning_info)

class filter_args_u_intg(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    intg_3d = _swig_property(_dmcam.filter_args_u_intg_intg_3d_get, _dmcam.filter_args_u_intg_intg_3d_set)
    intg_3dhdr = _swig_property(_dmcam.filter_args_u_intg_intg_3dhdr_get, _dmcam.filter_args_u_intg_intg_3dhdr_set)

    def __init__(self):
        _dmcam.filter_args_u_intg_swiginit(self, _dmcam.new_filter_args_u_intg())
    __swig_destroy__ = _dmcam.delete_filter_args_u_intg
filter_args_u_intg_swigregister = _dmcam.filter_args_u_intg_swigregister
filter_args_u_intg_swigregister(filter_args_u_intg)


def filter_enable(dev, filter_id, filter_arg, reserved):
    return _dmcam.filter_enable(dev, filter_id, filter_arg, reserved)
filter_enable = _dmcam.filter_enable

def filter_disable(dev, filter_id):
    return _dmcam.filter_disable(dev, filter_id)
filter_disable = _dmcam.filter_disable
DMCAM_CMAP_EPC = _dmcam.DMCAM_CMAP_EPC
DMCAM_CMAP_HSV = _dmcam.DMCAM_CMAP_HSV
DMCAM_CMAP_BWR = _dmcam.DMCAM_CMAP_BWR
DMCAM_CMAP_JET = _dmcam.DMCAM_CMAP_JET
DMCAM_CMAP_GIST_RAINBOW = _dmcam.DMCAM_CMAP_GIST_RAINBOW
DMCAM_CMAP_RAINBOW = _dmcam.DMCAM_CMAP_RAINBOW
DMCAM_CMAP_SPECTRAL = _dmcam.DMCAM_CMAP_SPECTRAL
DMCAM_CMAP_VIRIDIS = _dmcam.DMCAM_CMAP_VIRIDIS
DMCAM_CMAP_INFERNO = _dmcam.DMCAM_CMAP_INFERNO
DMCAM_CMAP_PLASMA = _dmcam.DMCAM_CMAP_PLASMA
DMCAM_CMAP_MAGMA = _dmcam.DMCAM_CMAP_MAGMA
DMCAM_CMAP_BLUES = _dmcam.DMCAM_CMAP_BLUES
DMCAM_CMAP_BUGN = _dmcam.DMCAM_CMAP_BUGN
DMCAM_CMAP_BUPU = _dmcam.DMCAM_CMAP_BUPU
DMCAM_CMAP_GNBU = _dmcam.DMCAM_CMAP_GNBU
DMCAM_CMAP_GREENS = _dmcam.DMCAM_CMAP_GREENS
DMCAM_CMAP_GREYS = _dmcam.DMCAM_CMAP_GREYS
DMCAM_CMAP_ORANGES = _dmcam.DMCAM_CMAP_ORANGES
DMCAM_CMAP_ORRD = _dmcam.DMCAM_CMAP_ORRD
DMCAM_CMAP_PUBU = _dmcam.DMCAM_CMAP_PUBU
DMCAM_CMAP_PUBUGN = _dmcam.DMCAM_CMAP_PUBUGN
DMCAM_CMAP_PURD = _dmcam.DMCAM_CMAP_PURD
DMCAM_CMAP_PURPLES = _dmcam.DMCAM_CMAP_PURPLES
DMCAM_CMAP_RDPU = _dmcam.DMCAM_CMAP_RDPU
DMCAM_CMAP_REDS = _dmcam.DMCAM_CMAP_REDS
DMCAM_CMAP_YLGN = _dmcam.DMCAM_CMAP_YLGN
DMCAM_CMAP_YLGNBU = _dmcam.DMCAM_CMAP_YLGNBU
DMCAM_CMAP_YLORBR = _dmcam.DMCAM_CMAP_YLORBR
DMCAM_CMAP_YLORRD = _dmcam.DMCAM_CMAP_YLORRD
DMCAM_CMAP_AFMHOT = _dmcam.DMCAM_CMAP_AFMHOT
DMCAM_CMAP_AUTUMN = _dmcam.DMCAM_CMAP_AUTUMN
DMCAM_CMAP_BONE = _dmcam.DMCAM_CMAP_BONE
DMCAM_CMAP_COOL = _dmcam.DMCAM_CMAP_COOL
DMCAM_CMAP_COPPER = _dmcam.DMCAM_CMAP_COPPER
DMCAM_CMAP_GIST_HEAT = _dmcam.DMCAM_CMAP_GIST_HEAT
DMCAM_CMAP_GRAY = _dmcam.DMCAM_CMAP_GRAY
DMCAM_CMAP_HOT = _dmcam.DMCAM_CMAP_HOT
DMCAM_CMAP_PINK = _dmcam.DMCAM_CMAP_PINK
DMCAM_CMAP_SPRING = _dmcam.DMCAM_CMAP_SPRING
DMCAM_CMAP_SUMMER = _dmcam.DMCAM_CMAP_SUMMER
DMCAM_CMAP_WINTER = _dmcam.DMCAM_CMAP_WINTER
DMCAM_CMAP_BRBG = _dmcam.DMCAM_CMAP_BRBG
DMCAM_CMAP_COOLWARM = _dmcam.DMCAM_CMAP_COOLWARM
DMCAM_CMAP_PIYG = _dmcam.DMCAM_CMAP_PIYG
DMCAM_CMAP_PRGN = _dmcam.DMCAM_CMAP_PRGN
DMCAM_CMAP_PUOR = _dmcam.DMCAM_CMAP_PUOR
DMCAM_CMAP_RDBU = _dmcam.DMCAM_CMAP_RDBU
DMCAM_CMAP_RDGY = _dmcam.DMCAM_CMAP_RDGY
DMCAM_CMAP_RDYLBU = _dmcam.DMCAM_CMAP_RDYLBU
DMCAM_CMAP_RDYLGN = _dmcam.DMCAM_CMAP_RDYLGN
DMCAM_CMAP_SEISMIC = _dmcam.DMCAM_CMAP_SEISMIC
DMCAM_CMAP_GIST_EARTH = _dmcam.DMCAM_CMAP_GIST_EARTH
DMCAM_CMAP_TERRAIN = _dmcam.DMCAM_CMAP_TERRAIN
DMCAM_CMAP_OCEAN = _dmcam.DMCAM_CMAP_OCEAN
DMCAM_CMAP_GIST_STERN = _dmcam.DMCAM_CMAP_GIST_STERN
DMCAM_CMAP_BRG = _dmcam.DMCAM_CMAP_BRG
DMCAM_CMAP_CMRMAP = _dmcam.DMCAM_CMAP_CMRMAP
DMCAM_CMAP_CUBEHELIX = _dmcam.DMCAM_CMAP_CUBEHELIX
DMCAM_CMAP_GNUPLOT = _dmcam.DMCAM_CMAP_GNUPLOT
DMCAM_CMAP_GNUPLOT2 = _dmcam.DMCAM_CMAP_GNUPLOT2
DMCAM_CMAP_GIST_NCAR = _dmcam.DMCAM_CMAP_GIST_NCAR
DMCAM_CMAP_NIPY_SPECTRAL = _dmcam.DMCAM_CMAP_NIPY_SPECTRAL
DMCAM_CMAP_FLAG = _dmcam.DMCAM_CMAP_FLAG
DMCAM_CMAP_PRISM = _dmcam.DMCAM_CMAP_PRISM
DMCAM_CMAP_COUNT = _dmcam.DMCAM_CMAP_COUNT
DMCAM_CMAP_OUTFMT_RGB = _dmcam.DMCAM_CMAP_OUTFMT_RGB
DMCAM_CMAP_OUTFMT_RGBA = _dmcam.DMCAM_CMAP_OUTFMT_RGBA
DMCAM_CMAP_OUTFMT_BGR = _dmcam.DMCAM_CMAP_OUTFMT_BGR
DMCAM_CMAP_OUTFMT_BGRA = _dmcam.DMCAM_CMAP_OUTFMT_BGRA
DMCAM_CMAP_OUTFMT_RGB32 = _dmcam.DMCAM_CMAP_OUTFMT_RGB32
DMCAM_CMAP_OUTFMT_BGR32 = _dmcam.DMCAM_CMAP_OUTFMT_BGR32
DMCAM_CMAP_OUTFMT_ARGB = _dmcam.DMCAM_CMAP_OUTFMT_ARGB
DMCAM_CMAP_OUTFMT_ABGR = _dmcam.DMCAM_CMAP_OUTFMT_ABGR
DMCAM_CMAP_OUTFMT_COUNT = _dmcam.DMCAM_CMAP_OUTFMT_COUNT
class cmap_cfg(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    color_palette = _swig_property(_dmcam.cmap_cfg_color_palette_get, _dmcam.cmap_cfg_color_palette_set)
    histeq_en = _swig_property(_dmcam.cmap_cfg_histeq_en_get, _dmcam.cmap_cfg_histeq_en_set)

    def __init__(self):
        _dmcam.cmap_cfg_swiginit(self, _dmcam.new_cmap_cfg())
    __swig_destroy__ = _dmcam.delete_cmap_cfg
cmap_cfg_swigregister = _dmcam.cmap_cfg_swigregister
cmap_cfg_swigregister(cmap_cfg)


def cmap_palette_set(cm):
    return _dmcam.cmap_palette_set(cm)
cmap_palette_set = _dmcam.cmap_palette_set

def cmap_palette_get():
    return _dmcam.cmap_palette_get()
cmap_palette_get = _dmcam.cmap_palette_get

def cmap_dist_f32_to_RGB(dst, src, outfmt, range_min_m, range_max_m, cfg):
    return _dmcam.cmap_dist_f32_to_RGB(dst, src, outfmt, range_min_m, range_max_m, cfg)
cmap_dist_f32_to_RGB = _dmcam.cmap_dist_f32_to_RGB

def cmap_dist_u16_to_RGB(dst, src, outfmt, range_min_mm, range_max_mm, cfg):
    return _dmcam.cmap_dist_u16_to_RGB(dst, src, outfmt, range_min_mm, range_max_mm, cfg)
cmap_dist_u16_to_RGB = _dmcam.cmap_dist_u16_to_RGB

def cmap_gray_u16_to_IR(dst, src, balance):
    return _dmcam.cmap_gray_u16_to_IR(dst, src, balance)
cmap_gray_u16_to_IR = _dmcam.cmap_gray_u16_to_IR

def cmap_gray_f32_to_IR(dst, src, balance):
    return _dmcam.cmap_gray_f32_to_IR(dst, src, balance)
cmap_gray_f32_to_IR = _dmcam.cmap_gray_f32_to_IR

def file_open(fname, mode):
    return _dmcam.file_open(fname, mode)
file_open = _dmcam.file_open

def file_close(fd):
    return _dmcam.file_close(fd)
file_close = _dmcam.file_close
DMCAM_FRAME_SAVE_FLOAT32 = _dmcam.DMCAM_FRAME_SAVE_FLOAT32
DMCAM_FRAME_SAVE_UINT32 = _dmcam.DMCAM_FRAME_SAVE_UINT32
DMCAM_FRAME_SAVE_UINT16 = _dmcam.DMCAM_FRAME_SAVE_UINT16
DMCAM_FRAME_SAVE_UINT8 = _dmcam.DMCAM_FRAME_SAVE_UINT8
DMCAM_PCL_FORMAT_XYZ = _dmcam.DMCAM_PCL_FORMAT_XYZ
DMCAM_PCL_FORMAT_XYZD = _dmcam.DMCAM_PCL_FORMAT_XYZD
DMCAM_PCL_FORMAT_XYZI = _dmcam.DMCAM_PCL_FORMAT_XYZI
DMCAM_PCL_CNT = _dmcam.DMCAM_PCL_CNT

def frame_save_ply(fd, pcl, pcl_format, ply_bin):
    return _dmcam.frame_save_ply(fd, pcl, pcl_format, ply_bin)
frame_save_ply = _dmcam.frame_save_ply

def frame_save_raw(fd, save_fmt, raw, img_w, img_h, dcs_cnt, raw_tag):
    return _dmcam.frame_save_raw(fd, save_fmt, raw, img_w, img_h, dcs_cnt, raw_tag)
frame_save_raw = _dmcam.frame_save_raw

def frame_save_distance(fd, save_fmt, dist, img_w, img_h):
    return _dmcam.frame_save_distance(fd, save_fmt, dist, img_w, img_h)
frame_save_distance = _dmcam.frame_save_distance

def frame_save_gray(fd, save_fmt, src, img_w, img_h):
    return _dmcam.frame_save_gray(fd, save_fmt, src, img_w, img_h)
frame_save_gray = _dmcam.frame_save_gray

def frame_load_raw(fd, dst, dst_w, dst_h, dst_dcsn, dst_tag, dst_tag_len):
    return _dmcam.frame_load_raw(fd, dst, dst_w, dst_h, dst_dcsn, dst_tag, dst_tag_len)
frame_load_raw = _dmcam.frame_load_raw

def frame_load_distance(fd, dst, dst_w, dst_h):
    return _dmcam.frame_load_distance(fd, dst, dst_w, dst_h)
frame_load_distance = _dmcam.frame_load_distance

def frame_load_gray(fd, dst, dst_w, dst_h):
    return _dmcam.frame_load_gray(fd, dst, dst_w, dst_h)
frame_load_gray = _dmcam.frame_load_gray
class lens_calib_cfg(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    en_2d_calib = _swig_property(_dmcam.lens_calib_cfg_en_2d_calib_get, _dmcam.lens_calib_cfg_en_2d_calib_set)
    en_3d_calib = _swig_property(_dmcam.lens_calib_cfg_en_3d_calib_get, _dmcam.lens_calib_cfg_en_3d_calib_set)
    en_dist_direct_z = _swig_property(_dmcam.lens_calib_cfg_en_dist_direct_z_get, _dmcam.lens_calib_cfg_en_dist_direct_z_set)

    def __init__(self):
        _dmcam.lens_calib_cfg_swiginit(self, _dmcam.new_lens_calib_cfg())
    __swig_destroy__ = _dmcam.delete_lens_calib_cfg
lens_calib_cfg_swigregister = _dmcam.lens_calib_cfg_swigregister
lens_calib_cfg_swigregister(lens_calib_cfg)


def lens_calib_config_set(dev, cfg):
    return _dmcam.lens_calib_config_set(dev, cfg)
lens_calib_config_set = _dmcam.lens_calib_config_set

def lens_calib_config_get(dev):
    return _dmcam.lens_calib_config_get(dev)
lens_calib_config_get = _dmcam.lens_calib_config_get

def lens_param_get(dev, param, id):
    return _dmcam.lens_param_get(dev, param, id)
lens_param_get = _dmcam.lens_param_get

def lens_param_filename(dev, name_buf, buf_len, bin_format, with_devid):
    return _dmcam.lens_param_filename(dev, name_buf, buf_len, bin_format, with_devid)
lens_param_filename = _dmcam.lens_param_filename

def lens_calib_apply_dist_f32(dev, dst, src, finfo, p_cam_param):
    return _dmcam.lens_calib_apply_dist_f32(dev, dst, src, finfo, p_cam_param)
lens_calib_apply_dist_f32 = _dmcam.lens_calib_apply_dist_f32

def lens_calib_apply_dist_u16(dev, dst, src, finfo, p_cam_param):
    return _dmcam.lens_calib_apply_dist_u16(dev, dst, src, finfo, p_cam_param)
lens_calib_apply_dist_u16 = _dmcam.lens_calib_apply_dist_u16

def lens_calib_apply_gray_f32(dev, dst, src, finfo, p_cam_param):
    return _dmcam.lens_calib_apply_gray_f32(dev, dst, src, finfo, p_cam_param)
lens_calib_apply_gray_f32 = _dmcam.lens_calib_apply_gray_f32

def lens_calib_apply_gray_u16(dev, dst, src, finfo, p_cam_param):
    return _dmcam.lens_calib_apply_gray_u16(dev, dst, src, finfo, p_cam_param)
lens_calib_apply_gray_u16 = _dmcam.lens_calib_apply_gray_u16
DMCAM_FUNC_ID_HDR = _dmcam.DMCAM_FUNC_ID_HDR
DMCAM_FUNC_ID_HIGH_PRECISION = _dmcam.DMCAM_FUNC_ID_HIGH_PRECISION
DMCAM_FUNC_ID_REGWR = _dmcam.DMCAM_FUNC_ID_REGWR
DMCAM_FUNC_ID_CNT = _dmcam.DMCAM_FUNC_ID_CNT

def func_activate(dev, id, key):
    return _dmcam.func_activate(dev, id, key)
func_activate = _dmcam.func_activate

def func_deactivate(dev, id):
    return _dmcam.func_deactivate(dev, id)
func_deactivate = _dmcam.func_deactivate

def func_activate_status_get(dev, id):
    return _dmcam.func_activate_status_get(dev, id)
func_activate_status_get = _dmcam.func_activate_status_get
class use_case_info_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    is_calibrated = _swig_property(_dmcam.use_case_info_t_is_calibrated_get, _dmcam.use_case_info_t_is_calibrated_set)
    fps = _swig_property(_dmcam.use_case_info_t_fps_get, _dmcam.use_case_info_t_fps_set)
    freq_cnt = _swig_property(_dmcam.use_case_info_t_freq_cnt_get, _dmcam.use_case_info_t_freq_cnt_set)
    uid = _swig_property(_dmcam.use_case_info_t_uid_get, _dmcam.use_case_info_t_uid_set)
    unambiguous_range = _swig_property(_dmcam.use_case_info_t_unambiguous_range_get, _dmcam.use_case_info_t_unambiguous_range_set)
    mod_freqs = _swig_property(_dmcam.use_case_info_t_mod_freqs_get, _dmcam.use_case_info_t_mod_freqs_set)
    name = _swig_property(_dmcam.use_case_info_t_name_get, _dmcam.use_case_info_t_name_set)

    def __init__(self):
        _dmcam.use_case_info_t_swiginit(self, _dmcam.new_use_case_info_t())
    __swig_destroy__ = _dmcam.delete_use_case_info_t
use_case_info_t_swigregister = _dmcam.use_case_info_t_swigregister
use_case_info_t_swigregister(use_case_info_t)


def use_case_list(dev):
    return _dmcam.use_case_list(dev)
use_case_list = _dmcam.use_case_list

def get_cur_use_case(dev, cur_case_info):
    return _dmcam.get_cur_use_case(dev, cur_case_info)
get_cur_use_case = _dmcam.get_cur_use_case

def use_case_set_uid(dev, uid):
    return _dmcam.use_case_set_uid(dev, uid)
use_case_set_uid = _dmcam.use_case_set_uid

def dmalgo_gauss2d_iir_u16(dst, src, sigma):
    return _dmcam.dmalgo_gauss2d_iir_u16(dst, src, sigma)
dmalgo_gauss2d_iir_u16 = _dmcam.dmalgo_gauss2d_iir_u16

def dmalgo_gauss2d_iir_f32(dst, src, sigma):
    return _dmcam.dmalgo_gauss2d_iir_f32(dst, src, sigma)
dmalgo_gauss2d_iir_f32 = _dmcam.dmalgo_gauss2d_iir_f32


