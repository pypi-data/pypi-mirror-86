# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-06-06 20:02
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('date_modified', models.DateTimeField(auto_now=True, null=True, verbose_name='date modified')),
                ('uuid', models.CharField(blank=True, max_length=255, unique=True, verbose_name='uuid')),
                ('title', models.CharField(blank=True, max_length=512, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('is_public', models.BooleanField(default=False)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='experiences', to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('experiences', models.ManyToManyField(blank=True, related_name='other_experiences', to='timeside_server.Experience', verbose_name='other experiences')),
            ],
            options={
                'db_table': 'timeside_experiences',
                'verbose_name': 'Experience',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('date_modified', models.DateTimeField(auto_now=True, null=True, verbose_name='date modified')),
                ('uuid', models.CharField(blank=True, max_length=255, unique=True, verbose_name='uuid')),
                ('title', models.CharField(blank=True, max_length=512, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('source_file', models.FileField(blank=True, max_length=1024, upload_to=b'items/%Y/%m/%d', verbose_name='file')),
                ('source_url', models.URLField(blank=True, max_length=1024, verbose_name='URL')),
                ('sha1', models.CharField(blank=True, max_length=512, verbose_name='sha1')),
                ('mime_type', models.CharField(blank=True, max_length=256, verbose_name='mime type')),
                ('hdf5', models.FileField(blank=True, max_length=1024, upload_to=b'results/%Y/%m/%d', verbose_name='HDF5 result file')),
                ('lock', models.BooleanField(default=False)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to=settings.AUTH_USER_MODEL, verbose_name='author')),
            ],
            options={
                'ordering': ['title'],
                'db_table': 'timeside_items',
                'verbose_name': 'item',
            },
        ),
        migrations.CreateModel(
            name='Preset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('date_modified', models.DateTimeField(auto_now=True, null=True, verbose_name='date modified')),
                ('uuid', models.CharField(blank=True, max_length=255, unique=True, verbose_name='uuid')),
                ('parameters', models.TextField(blank=True, default=b'{}', verbose_name='Parameters')),
                ('is_public', models.BooleanField(default=False)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='presets', to=settings.AUTH_USER_MODEL, verbose_name='author')),
            ],
            options={
                'db_table': 'timeside_presets',
                'verbose_name': 'Preset',
                'verbose_name_plural': 'Presets',
            },
        ),
        migrations.CreateModel(
            name='Processor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pid', models.CharField(choices=[(b'Analyzers', [(b'vamp_simple_host', b'vamp_simple_host'), (b'aubio_melenergy', b'aubio_melenergy'), (b'aubio_mfcc', b'aubio_mfcc'), (b'aubio_pitch', b'aubio_pitch'), (b'aubio_specdesc', b'aubio_specdesc'), (b'aubio_temporal', b'aubio_temporal'), (b'yaafe', b'yaafe'), (b'spectrogram_analyzer', b'spectrogram_analyzer'), (b'onset_detection_function', b'onset_detection_function'), (b'spectrogram_analyzer_buffer', b'spectrogram_analyzer_buffer'), (b'waveform_analyzer', b'waveform_analyzer'), (b'irit_diverg', b'irit_diverg'), (b'irit_diverg2', b'irit_diverg2'), (b'irit_harmo_tracking', b'irit_harmo_tracking'), (b'irit_harmo_cluster', b'irit_harmo_cluster'), (b'irit_monopoly', b'irit_monopoly'), (b'irit_music_sln', b'irit_music_sln'), (b'irit_music_snb', b'irit_music_snb'), (b'irit_startseg', b'irit_startseg'), (b'irit_singing', b'irit_singing'), (b'irit_speech_4hz', b'irit_speech_4hz'), (b'irit_speech_entropy', b'irit_speech_entropy'), (b'irit_tempogram', b'irit_tempogram'), (b'labri_singing', b'labri_singing'), (b'labri_speech_music_noise', b'labri_speech_music_noise'), (b'limsi_sad', b'limsi_sad'), (b'limsi_diarization', b'limsi_diarization'), (b'mean_dc_shift', b'mean_dc_shift'), (b'level', b'level')]), (b'Graphers', [(b'grapher_aubio_pitch', b'grapher_aubio_pitch'), (b'grapher_onset_detection_function', b'grapher_onset_detection_function'), (b'grapher_waveform', b'grapher_waveform'), (b'spectrogram_log', b'spectrogram_log'), (b'spectrogram_lin', b'spectrogram_lin'), (b'waveform_simple', b'waveform_simple'), (b'waveform_centroid', b'waveform_centroid'), (b'waveform_contour_black', b'waveform_contour_black'), (b'waveform_contour_white', b'waveform_contour_white'), (b'waveform_transparent', b'waveform_transparent'), (b'grapher_irit_monopoly_segments', b'grapher_irit_monopoly_segments'), (b'grapher_irit_music_sln_segments', b'grapher_irit_music_sln_segments'), (b'grapher_irit_music_snb_segments', b'grapher_irit_music_snb_segments'), (b'grapher_irit_startseg', b'grapher_irit_startseg'), (b'grapher_irit_singing_segments', b'grapher_irit_singing_segments'), (b'grapher_irit_speech_4hz_segments', b'grapher_irit_speech_4hz_segments'), (b'grapher_irit_speech_4hz_segments_median', b'grapher_irit_speech_4hz_segments_median'), (b'grapher_irit_speech_entropy_segments', b'grapher_irit_speech_entropy_segments'), (b'grapher_irit_tempogram', b'grapher_irit_tempogram'), (b'grapher_labri_singing', b'grapher_labri_singing'), (b'grapher_labri_smn_speech', b'grapher_labri_smn_speech'), (b'grapher_labri_smn_music', b'grapher_labri_smn_music'), (b'grapher_limsi_sad_etape', b'grapher_limsi_sad_etape'), (b'grapher_limsi_sad_maya', b'grapher_limsi_sad_maya'), (b'grapher_limsi_sad_adaptive', b'grapher_limsi_sad_adaptive'), (b'grapher_limsi_diarization_speakers', b'grapher_limsi_diarization_speakers'), (b'grapher_limsi_diarization_speakers_maya', b'grapher_limsi_diarization_speakers_maya')]), (b'Encoders', [(b'live_encoder', b'live_encoder'), (b'flac_encoder', b'flac_encoder'), (b'aac_encoder', b'aac_encoder'), (b'mp3_encoder', b'mp3_encoder'), (b'vorbis_encoder', b'vorbis_encoder'), (b'opus_encoder', b'opus_encoder'), (b'wav_encoder', b'wav_encoder'), (b'webm_encoder', b'webm_encoder')])], max_length=256, verbose_name='pid')),
                ('version', models.CharField(blank=True, max_length=64, verbose_name='version')),
            ],
            options={
                'db_table': 'timeside_processors',
                'verbose_name': 'processor',
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('date_modified', models.DateTimeField(auto_now=True, null=True, verbose_name='date modified')),
                ('uuid', models.CharField(blank=True, max_length=255, unique=True, verbose_name='uuid')),
                ('hdf5', models.FileField(blank=True, max_length=1024, upload_to=b'results/%Y/%m/%d', verbose_name='HDF5 result file')),
                ('file', models.FileField(blank=True, max_length=1024, upload_to=b'results/%Y/%m/%d', verbose_name='Output file')),
                ('mime_type', models.CharField(blank=True, max_length=256, verbose_name='Output file MIME type')),
                ('status', models.IntegerField(choices=[(0, 'failed'), (1, 'draft'), (2, 'pending'), (3, 'running'), (4, 'done')], default=1, verbose_name='status')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='results', to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='results', to='timeside_server.Item', verbose_name='item')),
                ('preset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='results', to='timeside_server.Preset', verbose_name='preset')),
            ],
            options={
                'db_table': 'timeside_results',
                'verbose_name': 'Result',
                'verbose_name_plural': 'Results',
            },
        ),
        migrations.CreateModel(
            name='Selection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('date_modified', models.DateTimeField(auto_now=True, null=True, verbose_name='date modified')),
                ('uuid', models.CharField(blank=True, max_length=255, unique=True, verbose_name='uuid')),
                ('title', models.CharField(blank=True, max_length=512, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='selections', to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('items', models.ManyToManyField(blank=True, related_name='selections', to='timeside_server.Item', verbose_name='items')),
                ('selections', models.ManyToManyField(blank=True, related_name='other_selections', to='timeside_server.Selection', verbose_name='other selections')),
            ],
            options={
                'db_table': 'timeside_selections',
                'verbose_name': 'selection',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('date_modified', models.DateTimeField(auto_now=True, null=True, verbose_name='date modified')),
                ('uuid', models.CharField(blank=True, max_length=255, unique=True, verbose_name='uuid')),
                ('status', models.IntegerField(choices=[(0, 'failed'), (1, 'draft'), (2, 'pending'), (3, 'running'), (4, 'done')], default=1, verbose_name='status')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('experience', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='task', to='timeside_server.Experience', verbose_name='experience')),
                ('selection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='task', to='timeside_server.Selection', verbose_name='selection')),
            ],
            options={
                'db_table': 'timeside_tasks',
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
            },
        ),
        migrations.AddField(
            model_name='preset',
            name='processor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='presets', to='timeside_server.Processor', verbose_name='processor'),
        ),
        migrations.AddField(
            model_name='experience',
            name='presets',
            field=models.ManyToManyField(blank=True, related_name='experiences', to='timeside_server.Preset', verbose_name='presets'),
        ),
    ]
