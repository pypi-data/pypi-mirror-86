# coding: utf-8

"""
    VeeRoute.LSS Clustering

    VeeRoute.LSS Clustering API  # noqa: E501

    The version of the OpenAPI document: 3.6.163909
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import vrt_lss_clustering
from vrt_lss_clustering.models.cluster_task import ClusterTask  # noqa: E501
from vrt_lss_clustering.rest import ApiException

class TestClusterTask(unittest.TestCase):
    """ClusterTask unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ClusterTask
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = vrt_lss_clustering.models.cluster_task.ClusterTask()  # noqa: E501
        if include_optional :
            return ClusterTask(
                points = [
                    vrt_lss_clustering.models.cluster_point.ClusterPoint(
                        key = 'location01', 
                        location = vrt_lss_clustering.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        duration = 30, )
                    ], 
                performers = [
                    vrt_lss_clustering.models.performer.Performer(
                        key = 'performer0001', 
                        home_location = vrt_lss_clustering.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        transport_type = 'CAR', 
                        cost_per_meter = 0.05, 
                        cost_per_minute = 0.12, 
                        limits = vrt_lss_clustering.models.cluster_limits.ClusterLimits(
                            min_points = 3, 
                            max_points = 3, ), )
                    ], 
                clusters = [
                    vrt_lss_clustering.models.cluster.Cluster(
                        performer_key = 'performer01', 
                        points_keys = [
                            'point01'
                            ], 
                        representer_key = 'point01', )
                    ], 
                settings = vrt_lss_clustering.models.cluster_settings.ClusterSettings(
                    configuration = 'default', 
                    calculation_time = 30, 
                    result_ttl = 10, 
                    transport_factor = [
                        vrt_lss_clustering.models.transport_factor.TransportFactor(
                            transport_type = 'CAR', 
                            speed = 2.5, )
                        ], 
                    routing = [
                        vrt_lss_clustering.models.routing.Routing(
                            transport_type = 'CAR', 
                            matrix = {"waypoints":[{"latitude":59.9345,"longitude":30.1504},{"latitude":59.942383,"longitude":30.258951},{"latitude":59.9545,"longitude":30.2004},{"latitude":59.89527,"longitude":30.261747},{"latitude":59.9745,"longitude":30.5004}],"distances":[[0,5822,1820,14130,23304],[5936,0,4931,8365,17731],[1819,4853,0,13161,22335],[14859,9056,13854,0,21440],[21777,16306,20772,19290,0]],"durations":[[0,13,7,24,36],[13,0,9,13,25],[7,9,0,21,32],[26,14,22,0,30],[34,23,30,28,0]]}, 
                            traffic_jams = [
                                vrt_lss_clustering.models.traffic_factor.TrafficFactor(
                                    time_window = vrt_lss_clustering.models.time_window.TimeWindow(
                                        from = '2020-11-21T09:30+03:00', 
                                        to = '2020-11-21T19:45Z', ), 
                                    length_multiplier = 2, 
                                    length_additive = 20, 
                                    time_multiplier = 2, 
                                    time_additive = 30, )
                                ], )
                        ], 
                    assumptions = vrt_lss_clustering.models.cluster_assumptions.ClusterAssumptions(
                        flight_distance = True, ), 
                    precision = 2, 
                    limits = vrt_lss_clustering.models.cluster_limits.ClusterLimits(
                        min_points = 3, 
                        max_points = 3, ), )
            )
        else :
            return ClusterTask(
                points = [
                    vrt_lss_clustering.models.cluster_point.ClusterPoint(
                        key = 'location01', 
                        location = vrt_lss_clustering.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        duration = 30, )
                    ],
                performers = [
                    vrt_lss_clustering.models.performer.Performer(
                        key = 'performer0001', 
                        home_location = vrt_lss_clustering.models.location.Location(
                            latitude = 55.692789, 
                            longitude = 37.554554, 
                            arrival_duration = 15, 
                            departure_duration = 5, ), 
                        transport_type = 'CAR', 
                        cost_per_meter = 0.05, 
                        cost_per_minute = 0.12, 
                        limits = vrt_lss_clustering.models.cluster_limits.ClusterLimits(
                            min_points = 3, 
                            max_points = 3, ), )
                    ],
        )

    def testClusterTask(self):
        """Test ClusterTask"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
