# -*- coding: utf-8 -*-

"""
    aws_apimatic

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import aws_apimatic.models.meta_data

class Item1(object):

    """Implementation of the 'Item1' model.

    TODO: type model description here.

    Attributes:
        asin (string): TODO: type description here.
        offer_listing_id (string): TODO: type description here.
        quantity (int): TODO: type description here.
        associate_tag (string): TODO: type description here.
        list_item_id (string): TODO: type description here.
        meta_data (list of MetaData): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "asin":'ASIN',
        "offer_listing_id":'OfferListingId',
        "quantity":'Quantity',
        "associate_tag":'AssociateTag',
        "list_item_id":'ListItemId',
        "meta_data":'MetaData'
    }

    def __init__(self,
                 asin=None,
                 offer_listing_id=None,
                 quantity=None,
                 associate_tag=None,
                 list_item_id=None,
                 meta_data=None):
        """Constructor for the Item1 class"""

        # Initialize members of the class
        self.asin = asin
        self.offer_listing_id = offer_listing_id
        self.quantity = quantity
        self.associate_tag = associate_tag
        self.list_item_id = list_item_id
        self.meta_data = meta_data


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        asin = dictionary.get('ASIN')
        offer_listing_id = dictionary.get('OfferListingId')
        quantity = dictionary.get('Quantity')
        associate_tag = dictionary.get('AssociateTag')
        list_item_id = dictionary.get('ListItemId')
        meta_data = None
        if dictionary.get('MetaData') != None:
            meta_data = list()
            for structure in dictionary.get('MetaData'):
                meta_data.append(aws_apimatic.models.meta_data.MetaData.from_dictionary(structure))

        # Return an object of this model
        return cls(asin,
                   offer_listing_id,
                   quantity,
                   associate_tag,
                   list_item_id,
                   meta_data)


