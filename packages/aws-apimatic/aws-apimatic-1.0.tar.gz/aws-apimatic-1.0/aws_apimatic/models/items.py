# -*- coding: utf-8 -*-

"""
    aws_apimatic

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import aws_apimatic.models.request
import aws_apimatic.models.corrected_query
import aws_apimatic.models.search_results_map
import aws_apimatic.models.item_3
import aws_apimatic.models.search_bin_sets

class Items(object):

    """Implementation of the 'Items' model.

    TODO: type model description here.

    Attributes:
        request (Request): TODO: type description here.
        corrected_query (CorrectedQuery): TODO: type description here.
        qid (string): TODO: type description here.
        engine_query (string): TODO: type description here.
        total_results (int): TODO: type description here.
        total_pages (int): TODO: type description here.
        more_search_results_url (string): TODO: type description here.
        search_results_map (SearchResultsMap): TODO: type description here.
        item (list of Item3): TODO: type description here.
        search_bin_sets (SearchBinSets): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "request":'Request',
        "corrected_query":'CorrectedQuery',
        "qid":'Qid',
        "engine_query":'EngineQuery',
        "total_results":'TotalResults',
        "total_pages":'TotalPages',
        "more_search_results_url":'MoreSearchResultsUrl',
        "search_results_map":'SearchResultsMap',
        "item":'Item',
        "search_bin_sets":'SearchBinSets'
    }

    def __init__(self,
                 request=None,
                 corrected_query=None,
                 qid=None,
                 engine_query=None,
                 total_results=None,
                 total_pages=None,
                 more_search_results_url=None,
                 search_results_map=None,
                 item=None,
                 search_bin_sets=None):
        """Constructor for the Items class"""

        # Initialize members of the class
        self.request = request
        self.corrected_query = corrected_query
        self.qid = qid
        self.engine_query = engine_query
        self.total_results = total_results
        self.total_pages = total_pages
        self.more_search_results_url = more_search_results_url
        self.search_results_map = search_results_map
        self.item = item
        self.search_bin_sets = search_bin_sets


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        request = aws_apimatic.models.request.Request.from_dictionary(dictionary.get('Request')) if dictionary.get('Request') else None
        corrected_query = aws_apimatic.models.corrected_query.CorrectedQuery.from_dictionary(dictionary.get('CorrectedQuery')) if dictionary.get('CorrectedQuery') else None
        qid = dictionary.get('Qid')
        engine_query = dictionary.get('EngineQuery')
        total_results = dictionary.get('TotalResults')
        total_pages = dictionary.get('TotalPages')
        more_search_results_url = dictionary.get('MoreSearchResultsUrl')
        search_results_map = aws_apimatic.models.search_results_map.SearchResultsMap.from_dictionary(dictionary.get('SearchResultsMap')) if dictionary.get('SearchResultsMap') else None
        item = None
        if dictionary.get('Item') != None:
            item = list()
            for structure in dictionary.get('Item'):
                item.append(aws_apimatic.models.item_3.Item3.from_dictionary(structure))
        search_bin_sets = aws_apimatic.models.search_bin_sets.SearchBinSets.from_dictionary(dictionary.get('SearchBinSets')) if dictionary.get('SearchBinSets') else None

        # Return an object of this model
        return cls(request,
                   corrected_query,
                   qid,
                   engine_query,
                   total_results,
                   total_pages,
                   more_search_results_url,
                   search_results_map,
                   item,
                   search_bin_sets)


