# -*- coding: utf-8 -*-

"""
    aws_apimatic

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import aws_apimatic.models.collection_summary
import aws_apimatic.models.collection_parent
import aws_apimatic.models.collection_item

class Collection(object):

    """Implementation of the 'Collection' model.

    TODO: type model description here.

    Attributes:
        collection_summary (CollectionSummary): TODO: type description here.
        collection_parent (CollectionParent): TODO: type description here.
        collection_item (list of CollectionItem): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "collection_summary":'CollectionSummary',
        "collection_parent":'CollectionParent',
        "collection_item":'CollectionItem'
    }

    def __init__(self,
                 collection_summary=None,
                 collection_parent=None,
                 collection_item=None):
        """Constructor for the Collection class"""

        # Initialize members of the class
        self.collection_summary = collection_summary
        self.collection_parent = collection_parent
        self.collection_item = collection_item


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        collection_summary = aws_apimatic.models.collection_summary.CollectionSummary.from_dictionary(dictionary.get('CollectionSummary')) if dictionary.get('CollectionSummary') else None
        collection_parent = aws_apimatic.models.collection_parent.CollectionParent.from_dictionary(dictionary.get('CollectionParent')) if dictionary.get('CollectionParent') else None
        collection_item = None
        if dictionary.get('CollectionItem') != None:
            collection_item = list()
            for structure in dictionary.get('CollectionItem'):
                collection_item.append(aws_apimatic.models.collection_item.CollectionItem.from_dictionary(structure))

        # Return an object of this model
        return cls(collection_summary,
                   collection_parent,
                   collection_item)


