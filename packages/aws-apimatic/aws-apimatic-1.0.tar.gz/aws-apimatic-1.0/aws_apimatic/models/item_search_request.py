# -*- coding: utf-8 -*-

"""
    aws_apimatic

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class ItemSearchRequest(object):

    """Implementation of the 'ItemSearchRequest' model.

    TODO: type model description here.

    Attributes:
        actor (string): TODO: type description here.
        artist (string): TODO: type description here.
        availability (AvailabilityEnum): TODO: type description here.
        audience_rating (list of AudienceRatingEnum): TODO: type description
            here.
        author (string): TODO: type description here.
        brand (string): TODO: type description here.
        browse_node (string): TODO: type description here.
        composer (string): TODO: type description here.
        condition (ConditionEnum): TODO: type description here.
        conductor (string): TODO: type description here.
        director (string): TODO: type description here.
        item_page (int): TODO: type description here.
        keywords (string): TODO: type description here.
        manufacturer (string): TODO: type description here.
        maximum_price (int): TODO: type description here.
        merchant_id (string): TODO: type description here.
        minimum_price (int): TODO: type description here.
        min_percentage_off (int): TODO: type description here.
        music_label (string): TODO: type description here.
        orchestra (string): TODO: type description here.
        power (string): TODO: type description here.
        publisher (string): TODO: type description here.
        related_item_page (object): TODO: type description here.
        relationship_type (list of string): TODO: type description here.
        response_group (list of string): TODO: type description here.
        search_index (string): TODO: type description here.
        sort (string): TODO: type description here.
        title (string): TODO: type description here.
        release_date (string): TODO: type description here.
        include_reviews_summary (string): TODO: type description here.
        truncate_reviews_at (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "actor":'Actor',
        "artist":'Artist',
        "availability":'Availability',
        "audience_rating":'AudienceRating',
        "author":'Author',
        "brand":'Brand',
        "browse_node":'BrowseNode',
        "composer":'Composer',
        "condition":'Condition',
        "conductor":'Conductor',
        "director":'Director',
        "item_page":'ItemPage',
        "keywords":'Keywords',
        "manufacturer":'Manufacturer',
        "maximum_price":'MaximumPrice',
        "merchant_id":'MerchantId',
        "minimum_price":'MinimumPrice',
        "min_percentage_off":'MinPercentageOff',
        "music_label":'MusicLabel',
        "orchestra":'Orchestra',
        "power":'Power',
        "publisher":'Publisher',
        "related_item_page":'RelatedItemPage',
        "relationship_type":'RelationshipType',
        "response_group":'ResponseGroup',
        "search_index":'SearchIndex',
        "sort":'Sort',
        "title":'Title',
        "release_date":'ReleaseDate',
        "include_reviews_summary":'IncludeReviewsSummary',
        "truncate_reviews_at":'TruncateReviewsAt'
    }

    def __init__(self,
                 actor=None,
                 artist=None,
                 availability=None,
                 audience_rating=None,
                 author=None,
                 brand=None,
                 browse_node=None,
                 composer=None,
                 condition=None,
                 conductor=None,
                 director=None,
                 item_page=None,
                 keywords=None,
                 manufacturer=None,
                 maximum_price=None,
                 merchant_id=None,
                 minimum_price=None,
                 min_percentage_off=None,
                 music_label=None,
                 orchestra=None,
                 power=None,
                 publisher=None,
                 related_item_page=None,
                 relationship_type=None,
                 response_group=None,
                 search_index=None,
                 sort=None,
                 title=None,
                 release_date=None,
                 include_reviews_summary=None,
                 truncate_reviews_at=None):
        """Constructor for the ItemSearchRequest class"""

        # Initialize members of the class
        self.actor = actor
        self.artist = artist
        self.availability = availability
        self.audience_rating = audience_rating
        self.author = author
        self.brand = brand
        self.browse_node = browse_node
        self.composer = composer
        self.condition = condition
        self.conductor = conductor
        self.director = director
        self.item_page = item_page
        self.keywords = keywords
        self.manufacturer = manufacturer
        self.maximum_price = maximum_price
        self.merchant_id = merchant_id
        self.minimum_price = minimum_price
        self.min_percentage_off = min_percentage_off
        self.music_label = music_label
        self.orchestra = orchestra
        self.power = power
        self.publisher = publisher
        self.related_item_page = related_item_page
        self.relationship_type = relationship_type
        self.response_group = response_group
        self.search_index = search_index
        self.sort = sort
        self.title = title
        self.release_date = release_date
        self.include_reviews_summary = include_reviews_summary
        self.truncate_reviews_at = truncate_reviews_at


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        actor = dictionary.get('Actor')
        artist = dictionary.get('Artist')
        availability = dictionary.get('Availability')
        audience_rating = dictionary.get('AudienceRating')
        author = dictionary.get('Author')
        brand = dictionary.get('Brand')
        browse_node = dictionary.get('BrowseNode')
        composer = dictionary.get('Composer')
        condition = dictionary.get('Condition')
        conductor = dictionary.get('Conductor')
        director = dictionary.get('Director')
        item_page = dictionary.get('ItemPage')
        keywords = dictionary.get('Keywords')
        manufacturer = dictionary.get('Manufacturer')
        maximum_price = dictionary.get('MaximumPrice')
        merchant_id = dictionary.get('MerchantId')
        minimum_price = dictionary.get('MinimumPrice')
        min_percentage_off = dictionary.get('MinPercentageOff')
        music_label = dictionary.get('MusicLabel')
        orchestra = dictionary.get('Orchestra')
        power = dictionary.get('Power')
        publisher = dictionary.get('Publisher')
        related_item_page = dictionary.get('RelatedItemPage')
        relationship_type = dictionary.get('RelationshipType')
        response_group = dictionary.get('ResponseGroup')
        search_index = dictionary.get('SearchIndex')
        sort = dictionary.get('Sort')
        title = dictionary.get('Title')
        release_date = dictionary.get('ReleaseDate')
        include_reviews_summary = dictionary.get('IncludeReviewsSummary')
        truncate_reviews_at = dictionary.get('TruncateReviewsAt')

        # Return an object of this model
        return cls(actor,
                   artist,
                   availability,
                   audience_rating,
                   author,
                   brand,
                   browse_node,
                   composer,
                   condition,
                   conductor,
                   director,
                   item_page,
                   keywords,
                   manufacturer,
                   maximum_price,
                   merchant_id,
                   minimum_price,
                   min_percentage_off,
                   music_label,
                   orchestra,
                   power,
                   publisher,
                   related_item_page,
                   relationship_type,
                   response_group,
                   search_index,
                   sort,
                   title,
                   release_date,
                   include_reviews_summary,
                   truncate_reviews_at)


