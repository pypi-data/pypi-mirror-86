# -*- coding: utf-8 -*-

"""
    aws_apimatic

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import aws_apimatic.models.offer

class Offers(object):

    """Implementation of the 'Offers' model.

    TODO: type model description here.

    Attributes:
        total_offers (int): TODO: type description here.
        total_offer_pages (int): TODO: type description here.
        more_offers_url (string): TODO: type description here.
        offer (list of Offer): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "total_offers":'TotalOffers',
        "total_offer_pages":'TotalOfferPages',
        "more_offers_url":'MoreOffersUrl',
        "offer":'Offer'
    }

    def __init__(self,
                 total_offers=None,
                 total_offer_pages=None,
                 more_offers_url=None,
                 offer=None):
        """Constructor for the Offers class"""

        # Initialize members of the class
        self.total_offers = total_offers
        self.total_offer_pages = total_offer_pages
        self.more_offers_url = more_offers_url
        self.offer = offer


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        total_offers = dictionary.get('TotalOffers')
        total_offer_pages = dictionary.get('TotalOfferPages')
        more_offers_url = dictionary.get('MoreOffersUrl')
        offer = None
        if dictionary.get('Offer') != None:
            offer = list()
            for structure in dictionary.get('Offer'):
                offer.append(aws_apimatic.models.offer.Offer.from_dictionary(structure))

        # Return an object of this model
        return cls(total_offers,
                   total_offer_pages,
                   more_offers_url,
                   offer)


