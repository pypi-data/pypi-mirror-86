# -*- coding: utf-8 -*-

"""
    aws_apimatic

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class TopItem(object):

    """Implementation of the 'TopItem' model.

    TODO: type model description here.

    Attributes:
        asin (string): TODO: type description here.
        title (string): TODO: type description here.
        detail_page_url (string): TODO: type description here.
        product_group (string): TODO: type description here.
        author (list of string): TODO: type description here.
        artist (list of string): TODO: type description here.
        actor (list of string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "asin":'ASIN',
        "title":'Title',
        "detail_page_url":'DetailPageURL',
        "product_group":'ProductGroup',
        "author":'Author',
        "artist":'Artist',
        "actor":'Actor'
    }

    def __init__(self,
                 asin=None,
                 title=None,
                 detail_page_url=None,
                 product_group=None,
                 author=None,
                 artist=None,
                 actor=None):
        """Constructor for the TopItem class"""

        # Initialize members of the class
        self.asin = asin
        self.title = title
        self.detail_page_url = detail_page_url
        self.product_group = product_group
        self.author = author
        self.artist = artist
        self.actor = actor


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        asin = dictionary.get('ASIN')
        title = dictionary.get('Title')
        detail_page_url = dictionary.get('DetailPageURL')
        product_group = dictionary.get('ProductGroup')
        author = dictionary.get('Author')
        artist = dictionary.get('Artist')
        actor = dictionary.get('Actor')

        # Return an object of this model
        return cls(asin,
                   title,
                   detail_page_url,
                   product_group,
                   author,
                   artist,
                   actor)


