# -*- coding: utf-8 -*-

"""
    aws_apimatic

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import aws_apimatic.models.decimal_with_units

class Image(object):

    """Implementation of the 'Image' model.

    TODO: type model description here.

    Attributes:
        url (string): TODO: type description here.
        height (DecimalWithUnits): TODO: type description here.
        width (DecimalWithUnits): TODO: type description here.
        is_verified (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "url":'URL',
        "height":'Height',
        "width":'Width',
        "is_verified":'IsVerified'
    }

    def __init__(self,
                 url=None,
                 height=None,
                 width=None,
                 is_verified=None):
        """Constructor for the Image class"""

        # Initialize members of the class
        self.url = url
        self.height = height
        self.width = width
        self.is_verified = is_verified


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        url = dictionary.get('URL')
        height = aws_apimatic.models.decimal_with_units.DecimalWithUnits.from_dictionary(dictionary.get('Height')) if dictionary.get('Height') else None
        width = aws_apimatic.models.decimal_with_units.DecimalWithUnits.from_dictionary(dictionary.get('Width')) if dictionary.get('Width') else None
        is_verified = dictionary.get('IsVerified')

        # Return an object of this model
        return cls(url,
                   height,
                   width,
                   is_verified)


