# -*- coding: utf-8 -*-

"""
    aws_apimatic

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class SimilarityLookupRequest(object):

    """Implementation of the 'SimilarityLookupRequest' model.

    TODO: type model description here.

    Attributes:
        condition (ConditionEnum): TODO: type description here.
        item_id (list of string): TODO: type description here.
        merchant_id (string): TODO: type description here.
        response_group (list of string): TODO: type description here.
        similarity_type (SimilarityTypeEnum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "condition":'Condition',
        "item_id":'ItemId',
        "merchant_id":'MerchantId',
        "response_group":'ResponseGroup',
        "similarity_type":'SimilarityType'
    }

    def __init__(self,
                 condition=None,
                 item_id=None,
                 merchant_id=None,
                 response_group=None,
                 similarity_type=None):
        """Constructor for the SimilarityLookupRequest class"""

        # Initialize members of the class
        self.condition = condition
        self.item_id = item_id
        self.merchant_id = merchant_id
        self.response_group = response_group
        self.similarity_type = similarity_type


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        condition = dictionary.get('Condition')
        item_id = dictionary.get('ItemId')
        merchant_id = dictionary.get('MerchantId')
        response_group = dictionary.get('ResponseGroup')
        similarity_type = dictionary.get('SimilarityType')

        # Return an object of this model
        return cls(condition,
                   item_id,
                   merchant_id,
                   response_group,
                   similarity_type)


