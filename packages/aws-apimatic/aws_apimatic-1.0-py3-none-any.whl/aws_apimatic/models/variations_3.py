# -*- coding: utf-8 -*-

"""
    aws_apimatic

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import aws_apimatic.models.variation_dimensions
import aws_apimatic.models.item_13

class Variations3(object):

    """Implementation of the 'Variations3' model.

    TODO: type model description here.

    Attributes:
        total_variations (int): TODO: type description here.
        total_variation_pages (int): TODO: type description here.
        variation_dimensions (VariationDimensions): TODO: type description
            here.
        name (Item13): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "total_variations":'TotalVariations',
        "total_variation_pages":'TotalVariationPages',
        "variation_dimensions":'VariationDimensions',
        "name":'name'
    }

    def __init__(self,
                 total_variations=None,
                 total_variation_pages=None,
                 variation_dimensions=None,
                 name=None):
        """Constructor for the Variations3 class"""

        # Initialize members of the class
        self.total_variations = total_variations
        self.total_variation_pages = total_variation_pages
        self.variation_dimensions = variation_dimensions
        self.name = name


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        total_variations = dictionary.get('TotalVariations')
        total_variation_pages = dictionary.get('TotalVariationPages')
        variation_dimensions = aws_apimatic.models.variation_dimensions.VariationDimensions.from_dictionary(dictionary.get('VariationDimensions')) if dictionary.get('VariationDimensions') else None
        name = aws_apimatic.models.item_13.Item13.from_dictionary(dictionary.get('name')) if dictionary.get('name') else None

        # Return an object of this model
        return cls(total_variations,
                   total_variation_pages,
                   variation_dimensions,
                   name)


