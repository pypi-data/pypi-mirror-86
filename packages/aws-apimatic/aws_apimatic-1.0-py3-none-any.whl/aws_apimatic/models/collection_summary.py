# -*- coding: utf-8 -*-

"""
    aws_apimatic

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import aws_apimatic.models.price

class CollectionSummary(object):

    """Implementation of the 'CollectionSummary' model.

    TODO: type model description here.

    Attributes:
        lowest_list_price (Price): TODO: type description here.
        highest_list_price (Price): TODO: type description here.
        lowest_sale_price (Price): TODO: type description here.
        highest_sale_price (Price): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "lowest_list_price":'LowestListPrice',
        "highest_list_price":'HighestListPrice',
        "lowest_sale_price":'LowestSalePrice',
        "highest_sale_price":'HighestSalePrice'
    }

    def __init__(self,
                 lowest_list_price=None,
                 highest_list_price=None,
                 lowest_sale_price=None,
                 highest_sale_price=None):
        """Constructor for the CollectionSummary class"""

        # Initialize members of the class
        self.lowest_list_price = lowest_list_price
        self.highest_list_price = highest_list_price
        self.lowest_sale_price = lowest_sale_price
        self.highest_sale_price = highest_sale_price


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        lowest_list_price = aws_apimatic.models.price.Price.from_dictionary(dictionary.get('LowestListPrice')) if dictionary.get('LowestListPrice') else None
        highest_list_price = aws_apimatic.models.price.Price.from_dictionary(dictionary.get('HighestListPrice')) if dictionary.get('HighestListPrice') else None
        lowest_sale_price = aws_apimatic.models.price.Price.from_dictionary(dictionary.get('LowestSalePrice')) if dictionary.get('LowestSalePrice') else None
        highest_sale_price = aws_apimatic.models.price.Price.from_dictionary(dictionary.get('HighestSalePrice')) if dictionary.get('HighestSalePrice') else None

        # Return an object of this model
        return cls(lowest_list_price,
                   highest_list_price,
                   lowest_sale_price,
                   highest_sale_price)


