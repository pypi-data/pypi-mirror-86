# -*- coding: utf-8 -*-

"""
    aws_apimatic

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import aws_apimatic.models.image

class ImageSet(object):

    """Implementation of the 'ImageSet' model.

    TODO: type model description here.

    Attributes:
        category (string): TODO: type description here.
        swatch_image (Image): TODO: type description here.
        small_image (Image): TODO: type description here.
        thumbnail_image (Image): TODO: type description here.
        tiny_image (Image): TODO: type description here.
        medium_image (Image): TODO: type description here.
        large_image (Image): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "category":'Category',
        "swatch_image":'SwatchImage',
        "small_image":'SmallImage',
        "thumbnail_image":'ThumbnailImage',
        "tiny_image":'TinyImage',
        "medium_image":'MediumImage',
        "large_image":'LargeImage'
    }

    def __init__(self,
                 category=None,
                 swatch_image=None,
                 small_image=None,
                 thumbnail_image=None,
                 tiny_image=None,
                 medium_image=None,
                 large_image=None):
        """Constructor for the ImageSet class"""

        # Initialize members of the class
        self.category = category
        self.swatch_image = swatch_image
        self.small_image = small_image
        self.thumbnail_image = thumbnail_image
        self.tiny_image = tiny_image
        self.medium_image = medium_image
        self.large_image = large_image


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        category = dictionary.get('Category')
        swatch_image = aws_apimatic.models.image.Image.from_dictionary(dictionary.get('SwatchImage')) if dictionary.get('SwatchImage') else None
        small_image = aws_apimatic.models.image.Image.from_dictionary(dictionary.get('SmallImage')) if dictionary.get('SmallImage') else None
        thumbnail_image = aws_apimatic.models.image.Image.from_dictionary(dictionary.get('ThumbnailImage')) if dictionary.get('ThumbnailImage') else None
        tiny_image = aws_apimatic.models.image.Image.from_dictionary(dictionary.get('TinyImage')) if dictionary.get('TinyImage') else None
        medium_image = aws_apimatic.models.image.Image.from_dictionary(dictionary.get('MediumImage')) if dictionary.get('MediumImage') else None
        large_image = aws_apimatic.models.image.Image.from_dictionary(dictionary.get('LargeImage')) if dictionary.get('LargeImage') else None

        # Return an object of this model
        return cls(category,
                   swatch_image,
                   small_image,
                   thumbnail_image,
                   tiny_image,
                   medium_image,
                   large_image)


