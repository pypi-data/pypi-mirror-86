# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _PhaseSymmetryPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSinusoidSpatialFunctionPython
else:
    import _itkSinusoidSpatialFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSinusoidSpatialFunctionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSinusoidSpatialFunctionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkSpatialFunctionPython
import itk.itkFunctionBasePython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkCovariantVectorPython
import itk.itkArrayPython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkContinuousIndexPython

def itkSinusoidSpatialFunctionD2PD2_New():
    return itkSinusoidSpatialFunctionD2PD2.New()

class itkSinusoidSpatialFunctionD2PD2(itk.itkSpatialFunctionPython.itkSpatialFunctionD2PD2):
    r"""Proxy of C++ itkSinusoidSpatialFunctionD2PD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD2PD2___New_orig__)
    Clone = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD2PD2_Clone)
    SetPhaseOffset = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD2PD2_SetPhaseOffset)
    GetPhaseOffset = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD2PD2_GetPhaseOffset)
    SetFrequency = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD2PD2_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD2PD2_GetFrequency)

    def New(*args, **kargs):
        """New() -> itkSinusoidSpatialFunctionD2PD2

        Create a new object of the class itkSinusoidSpatialFunctionD2PD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinusoidSpatialFunctionD2PD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinusoidSpatialFunctionD2PD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinusoidSpatialFunctionD2PD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinusoidSpatialFunctionD2PD2 in _itkSinusoidSpatialFunctionPython:
_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD2PD2_swigregister(itkSinusoidSpatialFunctionD2PD2)
itkSinusoidSpatialFunctionD2PD2___New_orig__ = _itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD2PD2___New_orig__


def itkSinusoidSpatialFunctionD3PD3_New():
    return itkSinusoidSpatialFunctionD3PD3.New()

class itkSinusoidSpatialFunctionD3PD3(itk.itkSpatialFunctionPython.itkSpatialFunctionD3PD3):
    r"""Proxy of C++ itkSinusoidSpatialFunctionD3PD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD3PD3___New_orig__)
    Clone = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD3PD3_Clone)
    SetPhaseOffset = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD3PD3_SetPhaseOffset)
    GetPhaseOffset = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD3PD3_GetPhaseOffset)
    SetFrequency = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD3PD3_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD3PD3_GetFrequency)

    def New(*args, **kargs):
        """New() -> itkSinusoidSpatialFunctionD3PD3

        Create a new object of the class itkSinusoidSpatialFunctionD3PD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinusoidSpatialFunctionD3PD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinusoidSpatialFunctionD3PD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinusoidSpatialFunctionD3PD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinusoidSpatialFunctionD3PD3 in _itkSinusoidSpatialFunctionPython:
_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD3PD3_swigregister(itkSinusoidSpatialFunctionD3PD3)
itkSinusoidSpatialFunctionD3PD3___New_orig__ = _itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionD3PD3___New_orig__


def itkSinusoidSpatialFunctionF2PD2_New():
    return itkSinusoidSpatialFunctionF2PD2.New()

class itkSinusoidSpatialFunctionF2PD2(itk.itkSpatialFunctionPython.itkSpatialFunctionF2PD2):
    r"""Proxy of C++ itkSinusoidSpatialFunctionF2PD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF2PD2___New_orig__)
    Clone = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF2PD2_Clone)
    SetPhaseOffset = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF2PD2_SetPhaseOffset)
    GetPhaseOffset = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF2PD2_GetPhaseOffset)
    SetFrequency = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF2PD2_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF2PD2_GetFrequency)

    def New(*args, **kargs):
        """New() -> itkSinusoidSpatialFunctionF2PD2

        Create a new object of the class itkSinusoidSpatialFunctionF2PD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinusoidSpatialFunctionF2PD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinusoidSpatialFunctionF2PD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinusoidSpatialFunctionF2PD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinusoidSpatialFunctionF2PD2 in _itkSinusoidSpatialFunctionPython:
_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF2PD2_swigregister(itkSinusoidSpatialFunctionF2PD2)
itkSinusoidSpatialFunctionF2PD2___New_orig__ = _itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF2PD2___New_orig__


def itkSinusoidSpatialFunctionF3PD3_New():
    return itkSinusoidSpatialFunctionF3PD3.New()

class itkSinusoidSpatialFunctionF3PD3(itk.itkSpatialFunctionPython.itkSpatialFunctionF3PD3):
    r"""Proxy of C++ itkSinusoidSpatialFunctionF3PD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF3PD3___New_orig__)
    Clone = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF3PD3_Clone)
    SetPhaseOffset = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF3PD3_SetPhaseOffset)
    GetPhaseOffset = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF3PD3_GetPhaseOffset)
    SetFrequency = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF3PD3_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF3PD3_GetFrequency)

    def New(*args, **kargs):
        """New() -> itkSinusoidSpatialFunctionF3PD3

        Create a new object of the class itkSinusoidSpatialFunctionF3PD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinusoidSpatialFunctionF3PD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinusoidSpatialFunctionF3PD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinusoidSpatialFunctionF3PD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinusoidSpatialFunctionF3PD3 in _itkSinusoidSpatialFunctionPython:
_itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF3PD3_swigregister(itkSinusoidSpatialFunctionF3PD3)
itkSinusoidSpatialFunctionF3PD3___New_orig__ = _itkSinusoidSpatialFunctionPython.itkSinusoidSpatialFunctionF3PD3___New_orig__



