# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class UserSetting(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'value': 'str',
        'setting_type': 'SettingType',
        'setting_entity': 'SettingEntity'
    }

    attribute_map = {
        'id': 'id',
        'value': 'value',
        'setting_type': 'settingType',
        'setting_entity': 'settingEntity'
    }

    def __init__(self, id=None, value=None, setting_type=None, setting_entity=None, local_vars_configuration=None):  # noqa: E501
        """UserSetting - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._value = None
        self._setting_type = None
        self._setting_entity = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if value is not None:
            self.value = value
        if setting_type is not None:
            self.setting_type = setting_type
        if setting_entity is not None:
            self.setting_entity = setting_entity

    @property
    def id(self):
        """Gets the id of this UserSetting.  # noqa: E501


        :return: The id of this UserSetting.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserSetting.


        :param id: The id of this UserSetting.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def value(self):
        """Gets the value of this UserSetting.  # noqa: E501


        :return: The value of this UserSetting.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this UserSetting.


        :param value: The value of this UserSetting.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                value is not None and len(value) > 64):
            raise ValueError("Invalid value for `value`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                value is not None and len(value) < 0):
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `0`")  # noqa: E501

        self._value = value

    @property
    def setting_type(self):
        """Gets the setting_type of this UserSetting.  # noqa: E501


        :return: The setting_type of this UserSetting.  # noqa: E501
        :rtype: SettingType
        """
        return self._setting_type

    @setting_type.setter
    def setting_type(self, setting_type):
        """Sets the setting_type of this UserSetting.


        :param setting_type: The setting_type of this UserSetting.  # noqa: E501
        :type: SettingType
        """

        self._setting_type = setting_type

    @property
    def setting_entity(self):
        """Gets the setting_entity of this UserSetting.  # noqa: E501


        :return: The setting_entity of this UserSetting.  # noqa: E501
        :rtype: SettingEntity
        """
        return self._setting_entity

    @setting_entity.setter
    def setting_entity(self, setting_entity):
        """Sets the setting_entity of this UserSetting.


        :param setting_entity: The setting_entity of this UserSetting.  # noqa: E501
        :type: SettingEntity
        """

        self._setting_entity = setting_entity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSetting):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSetting):
            return True

        return self.to_dict() != other.to_dict()
