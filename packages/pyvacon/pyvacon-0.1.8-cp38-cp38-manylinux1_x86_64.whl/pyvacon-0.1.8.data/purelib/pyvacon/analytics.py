# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _analytics
else:
    import _analytics

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _analytics.delete_SwigPyIterator

    def value(self):
        return _analytics.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _analytics.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _analytics.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _analytics.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _analytics.SwigPyIterator_equal(self, x)

    def copy(self):
        return _analytics.SwigPyIterator_copy(self)

    def next(self):
        return _analytics.SwigPyIterator_next(self)

    def __next__(self):
        return _analytics.SwigPyIterator___next__(self)

    def previous(self):
        return _analytics.SwigPyIterator_previous(self)

    def advance(self, n):
        return _analytics.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _analytics.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _analytics.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _analytics.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _analytics.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _analytics.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _analytics.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _analytics:
_analytics.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _analytics.SHARED_PTR_DISOWN
class vectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorInt___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorInt___bool__(self)

    def __len__(self):
        return _analytics.vectorInt___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorInt___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorInt_pop(self)

    def append(self, x):
        return _analytics.vectorInt_append(self, x)

    def empty(self):
        return _analytics.vectorInt_empty(self)

    def size(self):
        return _analytics.vectorInt_size(self)

    def swap(self, v):
        return _analytics.vectorInt_swap(self, v)

    def begin(self):
        return _analytics.vectorInt_begin(self)

    def end(self):
        return _analytics.vectorInt_end(self)

    def rbegin(self):
        return _analytics.vectorInt_rbegin(self)

    def rend(self):
        return _analytics.vectorInt_rend(self)

    def clear(self):
        return _analytics.vectorInt_clear(self)

    def get_allocator(self):
        return _analytics.vectorInt_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorInt_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorInt_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorInt_swiginit(self, _analytics.new_vectorInt(*args))

    def push_back(self, x):
        return _analytics.vectorInt_push_back(self, x)

    def front(self):
        return _analytics.vectorInt_front(self)

    def back(self):
        return _analytics.vectorInt_back(self)

    def assign(self, n, x):
        return _analytics.vectorInt_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorInt_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorInt_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorInt_reserve(self, n)

    def capacity(self):
        return _analytics.vectorInt_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorInt

# Register vectorInt in _analytics:
_analytics.vectorInt_swigregister(vectorInt)

class vectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorDouble___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorDouble___bool__(self)

    def __len__(self):
        return _analytics.vectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorDouble___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorDouble_pop(self)

    def append(self, x):
        return _analytics.vectorDouble_append(self, x)

    def empty(self):
        return _analytics.vectorDouble_empty(self)

    def size(self):
        return _analytics.vectorDouble_size(self)

    def swap(self, v):
        return _analytics.vectorDouble_swap(self, v)

    def begin(self):
        return _analytics.vectorDouble_begin(self)

    def end(self):
        return _analytics.vectorDouble_end(self)

    def rbegin(self):
        return _analytics.vectorDouble_rbegin(self)

    def rend(self):
        return _analytics.vectorDouble_rend(self)

    def clear(self):
        return _analytics.vectorDouble_clear(self)

    def get_allocator(self):
        return _analytics.vectorDouble_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorDouble_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorDouble_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorDouble_swiginit(self, _analytics.new_vectorDouble(*args))

    def push_back(self, x):
        return _analytics.vectorDouble_push_back(self, x)

    def front(self):
        return _analytics.vectorDouble_front(self)

    def back(self):
        return _analytics.vectorDouble_back(self)

    def assign(self, n, x):
        return _analytics.vectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorDouble_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorDouble_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorDouble_reserve(self, n)

    def capacity(self):
        return _analytics.vectorDouble_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorDouble

# Register vectorDouble in _analytics:
_analytics.vectorDouble_swigregister(vectorDouble)

class vectorVectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorVectorDouble___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorVectorDouble___bool__(self)

    def __len__(self):
        return _analytics.vectorVectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorVectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorVectorDouble___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorVectorDouble_pop(self)

    def append(self, x):
        return _analytics.vectorVectorDouble_append(self, x)

    def empty(self):
        return _analytics.vectorVectorDouble_empty(self)

    def size(self):
        return _analytics.vectorVectorDouble_size(self)

    def swap(self, v):
        return _analytics.vectorVectorDouble_swap(self, v)

    def begin(self):
        return _analytics.vectorVectorDouble_begin(self)

    def end(self):
        return _analytics.vectorVectorDouble_end(self)

    def rbegin(self):
        return _analytics.vectorVectorDouble_rbegin(self)

    def rend(self):
        return _analytics.vectorVectorDouble_rend(self)

    def clear(self):
        return _analytics.vectorVectorDouble_clear(self)

    def get_allocator(self):
        return _analytics.vectorVectorDouble_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorVectorDouble_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorVectorDouble_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorVectorDouble_swiginit(self, _analytics.new_vectorVectorDouble(*args))

    def push_back(self, x):
        return _analytics.vectorVectorDouble_push_back(self, x)

    def front(self):
        return _analytics.vectorVectorDouble_front(self)

    def back(self):
        return _analytics.vectorVectorDouble_back(self)

    def assign(self, n, x):
        return _analytics.vectorVectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorVectorDouble_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorVectorDouble_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorVectorDouble_reserve(self, n)

    def capacity(self):
        return _analytics.vectorVectorDouble_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorVectorDouble

# Register vectorVectorDouble in _analytics:
_analytics.vectorVectorDouble_swigregister(vectorVectorDouble)

class vectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorString___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorString___bool__(self)

    def __len__(self):
        return _analytics.vectorString___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorString___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorString_pop(self)

    def append(self, x):
        return _analytics.vectorString_append(self, x)

    def empty(self):
        return _analytics.vectorString_empty(self)

    def size(self):
        return _analytics.vectorString_size(self)

    def swap(self, v):
        return _analytics.vectorString_swap(self, v)

    def begin(self):
        return _analytics.vectorString_begin(self)

    def end(self):
        return _analytics.vectorString_end(self)

    def rbegin(self):
        return _analytics.vectorString_rbegin(self)

    def rend(self):
        return _analytics.vectorString_rend(self)

    def clear(self):
        return _analytics.vectorString_clear(self)

    def get_allocator(self):
        return _analytics.vectorString_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorString_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorString_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorString_swiginit(self, _analytics.new_vectorString(*args))

    def push_back(self, x):
        return _analytics.vectorString_push_back(self, x)

    def front(self):
        return _analytics.vectorString_front(self)

    def back(self):
        return _analytics.vectorString_back(self)

    def assign(self, n, x):
        return _analytics.vectorString_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorString_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorString_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorString_reserve(self, n)

    def capacity(self):
        return _analytics.vectorString_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorString

# Register vectorString in _analytics:
_analytics.vectorString_swigregister(vectorString)

class vectorBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorBool___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorBool___bool__(self)

    def __len__(self):
        return _analytics.vectorBool___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorBool___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorBool___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorBool___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorBool___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorBool___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorBool___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorBool_pop(self)

    def append(self, x):
        return _analytics.vectorBool_append(self, x)

    def empty(self):
        return _analytics.vectorBool_empty(self)

    def size(self):
        return _analytics.vectorBool_size(self)

    def swap(self, v):
        return _analytics.vectorBool_swap(self, v)

    def begin(self):
        return _analytics.vectorBool_begin(self)

    def end(self):
        return _analytics.vectorBool_end(self)

    def rbegin(self):
        return _analytics.vectorBool_rbegin(self)

    def rend(self):
        return _analytics.vectorBool_rend(self)

    def clear(self):
        return _analytics.vectorBool_clear(self)

    def get_allocator(self):
        return _analytics.vectorBool_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorBool_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorBool_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorBool_swiginit(self, _analytics.new_vectorBool(*args))

    def push_back(self, x):
        return _analytics.vectorBool_push_back(self, x)

    def front(self):
        return _analytics.vectorBool_front(self)

    def back(self):
        return _analytics.vectorBool_back(self)

    def assign(self, n, x):
        return _analytics.vectorBool_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorBool_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorBool_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorBool_reserve(self, n)

    def capacity(self):
        return _analytics.vectorBool_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorBool

# Register vectorBool in _analytics:
_analytics.vectorBool_swigregister(vectorBool)

class vectorPTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorPTime_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorPTime___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorPTime___bool__(self)

    def __len__(self):
        return _analytics.vectorPTime___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorPTime___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorPTime___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorPTime___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorPTime___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorPTime___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorPTime___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorPTime_pop(self)

    def append(self, x):
        return _analytics.vectorPTime_append(self, x)

    def empty(self):
        return _analytics.vectorPTime_empty(self)

    def size(self):
        return _analytics.vectorPTime_size(self)

    def swap(self, v):
        return _analytics.vectorPTime_swap(self, v)

    def begin(self):
        return _analytics.vectorPTime_begin(self)

    def end(self):
        return _analytics.vectorPTime_end(self)

    def rbegin(self):
        return _analytics.vectorPTime_rbegin(self)

    def rend(self):
        return _analytics.vectorPTime_rend(self)

    def clear(self):
        return _analytics.vectorPTime_clear(self)

    def get_allocator(self):
        return _analytics.vectorPTime_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorPTime_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorPTime_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorPTime_swiginit(self, _analytics.new_vectorPTime(*args))

    def push_back(self, x):
        return _analytics.vectorPTime_push_back(self, x)

    def front(self):
        return _analytics.vectorPTime_front(self)

    def back(self):
        return _analytics.vectorPTime_back(self)

    def assign(self, n, x):
        return _analytics.vectorPTime_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorPTime_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorPTime_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorPTime_reserve(self, n)

    def capacity(self):
        return _analytics.vectorPTime_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorPTime

# Register vectorPTime in _analytics:
_analytics.vectorPTime_swigregister(vectorPTime)

class vectorVectorPTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorVectorPTime_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorVectorPTime___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorVectorPTime___bool__(self)

    def __len__(self):
        return _analytics.vectorVectorPTime___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorVectorPTime___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorVectorPTime___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorVectorPTime___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorVectorPTime___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorVectorPTime___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorVectorPTime___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorVectorPTime_pop(self)

    def append(self, x):
        return _analytics.vectorVectorPTime_append(self, x)

    def empty(self):
        return _analytics.vectorVectorPTime_empty(self)

    def size(self):
        return _analytics.vectorVectorPTime_size(self)

    def swap(self, v):
        return _analytics.vectorVectorPTime_swap(self, v)

    def begin(self):
        return _analytics.vectorVectorPTime_begin(self)

    def end(self):
        return _analytics.vectorVectorPTime_end(self)

    def rbegin(self):
        return _analytics.vectorVectorPTime_rbegin(self)

    def rend(self):
        return _analytics.vectorVectorPTime_rend(self)

    def clear(self):
        return _analytics.vectorVectorPTime_clear(self)

    def get_allocator(self):
        return _analytics.vectorVectorPTime_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorVectorPTime_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorVectorPTime_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorVectorPTime_swiginit(self, _analytics.new_vectorVectorPTime(*args))

    def push_back(self, x):
        return _analytics.vectorVectorPTime_push_back(self, x)

    def front(self):
        return _analytics.vectorVectorPTime_front(self)

    def back(self):
        return _analytics.vectorVectorPTime_back(self)

    def assign(self, n, x):
        return _analytics.vectorVectorPTime_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorVectorPTime_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorVectorPTime_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorVectorPTime_reserve(self, n)

    def capacity(self):
        return _analytics.vectorVectorPTime_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorVectorPTime

# Register vectorVectorPTime in _analytics:
_analytics.vectorVectorPTime_swigregister(vectorVectorPTime)

class ptimePtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.ptimePtr_swiginit(self, _analytics.new_ptimePtr())
    __swig_destroy__ = _analytics.delete_ptimePtr

# Register ptimePtr in _analytics:
_analytics.ptimePtr_swigregister(ptimePtr)

class mapStringDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.mapStringDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.mapStringDouble___nonzero__(self)

    def __bool__(self):
        return _analytics.mapStringDouble___bool__(self)

    def __len__(self):
        return _analytics.mapStringDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _analytics.mapStringDouble___getitem__(self, key)

    def __delitem__(self, key):
        return _analytics.mapStringDouble___delitem__(self, key)

    def has_key(self, key):
        return _analytics.mapStringDouble_has_key(self, key)

    def keys(self):
        return _analytics.mapStringDouble_keys(self)

    def values(self):
        return _analytics.mapStringDouble_values(self)

    def items(self):
        return _analytics.mapStringDouble_items(self)

    def __contains__(self, key):
        return _analytics.mapStringDouble___contains__(self, key)

    def key_iterator(self):
        return _analytics.mapStringDouble_key_iterator(self)

    def value_iterator(self):
        return _analytics.mapStringDouble_value_iterator(self)

    def __setitem__(self, *args):
        return _analytics.mapStringDouble___setitem__(self, *args)

    def asdict(self):
        return _analytics.mapStringDouble_asdict(self)

    def __init__(self, *args):
        _analytics.mapStringDouble_swiginit(self, _analytics.new_mapStringDouble(*args))

    def empty(self):
        return _analytics.mapStringDouble_empty(self)

    def size(self):
        return _analytics.mapStringDouble_size(self)

    def swap(self, v):
        return _analytics.mapStringDouble_swap(self, v)

    def begin(self):
        return _analytics.mapStringDouble_begin(self)

    def end(self):
        return _analytics.mapStringDouble_end(self)

    def rbegin(self):
        return _analytics.mapStringDouble_rbegin(self)

    def rend(self):
        return _analytics.mapStringDouble_rend(self)

    def clear(self):
        return _analytics.mapStringDouble_clear(self)

    def get_allocator(self):
        return _analytics.mapStringDouble_get_allocator(self)

    def count(self, x):
        return _analytics.mapStringDouble_count(self, x)

    def erase(self, *args):
        return _analytics.mapStringDouble_erase(self, *args)

    def find(self, x):
        return _analytics.mapStringDouble_find(self, x)

    def lower_bound(self, x):
        return _analytics.mapStringDouble_lower_bound(self, x)

    def upper_bound(self, x):
        return _analytics.mapStringDouble_upper_bound(self, x)
    __swig_destroy__ = _analytics.delete_mapStringDouble

# Register mapStringDouble in _analytics:
_analytics.mapStringDouble_swigregister(mapStringDouble)

class ptime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.ptime_swiginit(self, _analytics.new_ptime(*args))

    def to_string(self):
        return _analytics.ptime_to_string(self)

    def addDays(self, result, days):
        return _analytics.ptime_addDays(self, result, days)

    def year(self):
        return _analytics.ptime_year(self)

    def month(self):
        return _analytics.ptime_month(self)

    def day(self):
        return _analytics.ptime_day(self)

    def hours(self):
        return _analytics.ptime_hours(self)

    def minutes(self):
        return _analytics.ptime_minutes(self)

    def seconds(self):
        return _analytics.ptime_seconds(self)
    __swig_destroy__ = _analytics.delete_ptime

# Register ptime in _analytics:
_analytics.ptime_swigregister(ptime)

class time_duration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.time_duration_swiginit(self, _analytics.new_time_duration(*args))

    @staticmethod
    def time_duration_infinite():
        return _analytics.time_duration_time_duration_infinite()
    __swig_destroy__ = _analytics.delete_time_duration

# Register time_duration in _analytics:
_analytics.time_duration_swigregister(time_duration)

def time_duration_time_duration_infinite():
    return _analytics.time_duration_time_duration_infinite()


def getVersionInfo():
    return _analytics.getVersionInfo()
class Clonable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getClassName(self):
        r""" get the class name (implemented via macro in all derived classes)"""
        return _analytics.Clonable_getClassName(self)

    @staticmethod
    def clone(obj):
        r"""
         clone a Clonable object :type obj: :py:class:`Clonable`
        :param obj: the object which will be cloned
        """
        return _analytics.Clonable_clone(obj)
    __swig_destroy__ = _analytics.delete_Clonable

# Register Clonable in _analytics:
_analytics.Clonable_swigregister(Clonable)

def Clonable_clone(obj):
    r"""
     clone a Clonable object :type obj: :py:class:`Clonable`
    :param obj: the object which will be cloned
    """
    return _analytics.Clonable_clone(obj)

class BaseObject(Clonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getObjectId(self):
        return _analytics.BaseObject_getObjectId(self)

    def getType(self):
        return _analytics.BaseObject_getType(self)

    def getCategory(self):
        return _analytics.BaseObject_getCategory(self)

    @staticmethod
    def getString(obj):
        return _analytics.BaseObject_getString(obj)

    def getClassName(self):
        return _analytics.BaseObject_getClassName(self)
    __swig_destroy__ = _analytics.delete_BaseObject

# Register BaseObject in _analytics:
_analytics.BaseObject_swigregister(BaseObject)

def BaseObject_getString(obj):
    return _analytics.BaseObject_getString(obj)

class HolidayCalendar(BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isHoliday(self, d):
        return _analytics.HolidayCalendar_isHoliday(self, d)

    def getClassName(self):
        return _analytics.HolidayCalendar_getClassName(self)
    __swig_destroy__ = _analytics.delete_HolidayCalendar

# Register HolidayCalendar in _analytics:
_analytics.HolidayCalendar_swigregister(HolidayCalendar)

class SimpleHolidayCalendar(HolidayCalendar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId):
        _analytics.SimpleHolidayCalendar_swiginit(self, _analytics.new_SimpleHolidayCalendar(objId))

    def setWeekdayAsHoliday(self, weekday):
        r""" set weekday as holidays, 0=sunday,...,6=saturday"""
        return _analytics.SimpleHolidayCalendar_setWeekdayAsHoliday(self, weekday)

    def setHolidays(self, holidays):
        return _analytics.SimpleHolidayCalendar_setHolidays(self, holidays)

    def isHoliday(self, d):
        return _analytics.SimpleHolidayCalendar_isHoliday(self, d)

    def getClassName(self):
        return _analytics.SimpleHolidayCalendar_getClassName(self)
    __swig_destroy__ = _analytics.delete_SimpleHolidayCalendar

# Register SimpleHolidayCalendar in _analytics:
_analytics.SimpleHolidayCalendar_swigregister(SimpleHolidayCalendar)

class Period(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Y, M, D):
        _analytics.Period_swiginit(self, _analytics.new_Period(Y, M, D))

    def getNumYears(self):
        return _analytics.Period_getNumYears(self)

    def getNumMonths(self):
        return _analytics.Period_getNumMonths(self)

    def getNumDays(self):
        return _analytics.Period_getNumDays(self)

    def calcBoostEndDate(self, startDate):
        return _analytics.Period_calcBoostEndDate(self, startDate)

    @staticmethod
    def buildFromString(s):
        return _analytics.Period_buildFromString(s)
    __swig_destroy__ = _analytics.delete_Period

# Register Period in _analytics:
_analytics.Period_swigregister(Period)

def Period_buildFromString(s):
    return _analytics.Period_buildFromString(s)

class ScheduleSpecification(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, start, end, period, stubFront, rollConvention, hol=0):
        _analytics.ScheduleSpecification_swiginit(self, _analytics.new_ScheduleSpecification(start, end, period, stubFront, rollConvention, hol))

    def generate(self):
        return _analytics.ScheduleSpecification_generate(self)
    __swig_destroy__ = _analytics.delete_ScheduleSpecification

# Register ScheduleSpecification in _analytics:
_analytics.ScheduleSpecification_swigregister(ScheduleSpecification)

class BaseInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _analytics.delete_BaseInterface

    def clearCache(self):
        return _analytics.BaseInterface_clearCache(self)

    def addObject(self, obj):
        return _analytics.BaseInterface_addObject(self, obj)

    def getObject(self, id, objectType, calcDate):
        return _analytics.BaseInterface_getObject(self, id, objectType, calcDate)

    def getVolatilitySurface(self, id, calcDate):
        return _analytics.BaseInterface_getVolatilitySurface(self, id, calcDate)

    def getDividendTable(self, id, calcDate):
        return _analytics.BaseInterface_getDividendTable(self, id, calcDate)

    def getEquityOptionQuoteTable(self, id, calcDate):
        return _analytics.BaseInterface_getEquityOptionQuoteTable(self, id, calcDate)

    def getDiscountCurve(self, id, calcDate):
        return _analytics.BaseInterface_getDiscountCurve(self, id, calcDate)

    def getSpecification(self, id, calcDate):
        return _analytics.BaseInterface_getSpecification(self, id, calcDate)

# Register BaseInterface in _analytics:
_analytics.BaseInterface_swigregister(BaseInterface)

class InMemoryInterface(BaseInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, readOnly):
        _analytics.InMemoryInterface_swiginit(self, _analytics.new_InMemoryInterface(readOnly))

    def addObject(self, obj):
        return _analytics.InMemoryInterface_addObject(self, obj)

    def addDiscountMapping(self, issuer, secLevel, currency, baseCurve, spreadCurve):
        return _analytics.InMemoryInterface_addDiscountMapping(self, issuer, secLevel, currency, baseCurve, spreadCurve)
    __swig_destroy__ = _analytics.delete_InMemoryInterface

# Register InMemoryInterface in _analytics:
_analytics.InMemoryInterface_swigregister(InMemoryInterface)

class InMemoryCache(BaseInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.InMemoryCache_swiginit(self, _analytics.new_InMemoryCache())

    def addObject(self, obj):
        return _analytics.InMemoryCache_addObject(self, obj)
    __swig_destroy__ = _analytics.delete_InMemoryCache

# Register InMemoryCache in _analytics:
_analytics.InMemoryCache_swigregister(InMemoryCache)

class DataTable(BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.DataTable_swiginit(self, _analytics.new_DataTable(*args))

    def addColumn(self, *args):
        return _analytics.DataTable_addColumn(self, *args)

    def nRows(self):
        return _analytics.DataTable_nRows(self)

    def nColumns(self):
        return _analytics.DataTable_nColumns(self)

    def getCellInformation(self, row, column):
        return _analytics.DataTable_getCellInformation(self, row, column)

    def getHeaderInformations(self):
        return _analytics.DataTable_getHeaderInformations(self)

    def getColumnDataType(self, i):
        return _analytics.DataTable_getColumnDataType(self, i)
    __swig_destroy__ = _analytics.delete_DataTable

# Register DataTable in _analytics:
_analytics.DataTable_swigregister(DataTable)

class LiborIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, period, dc, roll, fixingLag, holidays):
        _analytics.LiborIndex_swiginit(self, _analytics.new_LiborIndex(objId, period, dc, roll, fixingLag, holidays))
    __swig_destroy__ = _analytics.delete_LiborIndex

# Register LiborIndex in _analytics:
_analytics.LiborIndex_swigregister(LiborIndex)

class SwapIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, liborIndex, fixPeriod, fixDc, fixRoll, floatPeriod, floatDc, floatRoll, holidays):
        _analytics.SwapIndex_swiginit(self, _analytics.new_SwapIndex(objId, liborIndex, fixPeriod, fixDc, fixRoll, floatPeriod, floatDc, floatRoll, holidays))
    __swig_destroy__ = _analytics.delete_SwapIndex

# Register SwapIndex in _analytics:
_analytics.SwapIndex_swigregister(SwapIndex)

class vectorPlainVanillaMarketQuote(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorPlainVanillaMarketQuote_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorPlainVanillaMarketQuote___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorPlainVanillaMarketQuote___bool__(self)

    def __len__(self):
        return _analytics.vectorPlainVanillaMarketQuote___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorPlainVanillaMarketQuote___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorPlainVanillaMarketQuote___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorPlainVanillaMarketQuote___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorPlainVanillaMarketQuote___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorPlainVanillaMarketQuote___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorPlainVanillaMarketQuote___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorPlainVanillaMarketQuote_pop(self)

    def append(self, x):
        return _analytics.vectorPlainVanillaMarketQuote_append(self, x)

    def empty(self):
        return _analytics.vectorPlainVanillaMarketQuote_empty(self)

    def size(self):
        return _analytics.vectorPlainVanillaMarketQuote_size(self)

    def swap(self, v):
        return _analytics.vectorPlainVanillaMarketQuote_swap(self, v)

    def begin(self):
        return _analytics.vectorPlainVanillaMarketQuote_begin(self)

    def end(self):
        return _analytics.vectorPlainVanillaMarketQuote_end(self)

    def rbegin(self):
        return _analytics.vectorPlainVanillaMarketQuote_rbegin(self)

    def rend(self):
        return _analytics.vectorPlainVanillaMarketQuote_rend(self)

    def clear(self):
        return _analytics.vectorPlainVanillaMarketQuote_clear(self)

    def get_allocator(self):
        return _analytics.vectorPlainVanillaMarketQuote_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorPlainVanillaMarketQuote_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorPlainVanillaMarketQuote_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorPlainVanillaMarketQuote_swiginit(self, _analytics.new_vectorPlainVanillaMarketQuote(*args))

    def push_back(self, x):
        return _analytics.vectorPlainVanillaMarketQuote_push_back(self, x)

    def front(self):
        return _analytics.vectorPlainVanillaMarketQuote_front(self)

    def back(self):
        return _analytics.vectorPlainVanillaMarketQuote_back(self)

    def assign(self, n, x):
        return _analytics.vectorPlainVanillaMarketQuote_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorPlainVanillaMarketQuote_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorPlainVanillaMarketQuote_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorPlainVanillaMarketQuote_reserve(self, n)

    def capacity(self):
        return _analytics.vectorPlainVanillaMarketQuote_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorPlainVanillaMarketQuote

# Register vectorPlainVanillaMarketQuote in _analytics:
_analytics.vectorPlainVanillaMarketQuote_swigregister(vectorPlainVanillaMarketQuote)

class DayCounter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type):
        _analytics.DayCounter_swiginit(self, _analytics.new_DayCounter(type))

    def yf(self, *args):
        return _analytics.DayCounter_yf(self, *args)
    __swig_destroy__ = _analytics.delete_DayCounter

# Register DayCounter in _analytics:
_analytics.DayCounter_swigregister(DayCounter)

class MarketDataObject(BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getRefDate(self, *args):
        return _analytics.MarketDataObject_getRefDate(self, *args)
    __swig_destroy__ = _analytics.delete_MarketDataObject

# Register MarketDataObject in _analytics:
_analytics.MarketDataObject_swigregister(MarketDataObject)

class Quote(MarketDataObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, udl):
        _analytics.Quote_swiginit(self, _analytics.new_Quote(objId, refDate, udl))

    def addQuote(self, value):
        return _analytics.Quote_addQuote(self, value)

    def getClassName(self):
        return _analytics.Quote_getClassName(self)
    __swig_destroy__ = _analytics.delete_Quote

# Register Quote in _analytics:
_analytics.Quote_swigregister(Quote)

class Rating(MarketDataObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id, refDate, rating):
        _analytics.Rating_swiginit(self, _analytics.new_Rating(id, refDate, rating))

    @staticmethod
    def nRatings():
        r""" return number of different rating classes"""
        return _analytics.Rating_nRatings()

    def getRating(self):
        return _analytics.Rating_getRating(self)

    def setRating(self, r):
        return _analytics.Rating_setRating(self, r)

    def getWeights(self):
        return _analytics.Rating_getWeights(self)

    @staticmethod
    def getRatings():
        return _analytics.Rating_getRatings()

    def getClassName(self):
        return _analytics.Rating_getClassName(self)

    def getMainRating(self):
        return _analytics.Rating_getMainRating(self)
    __swig_destroy__ = _analytics.delete_Rating

# Register Rating in _analytics:
_analytics.Rating_swigregister(Rating)

def Rating_nRatings():
    r""" return number of different rating classes"""
    return _analytics.Rating_nRatings()

def Rating_getRatings():
    return _analytics.Rating_getRatings()

class Issuer(BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.Issuer_swiginit(self, _analytics.new_Issuer(*args))

    def getFullName(self):
        return _analytics.Issuer_getFullName(self)

    def getSector(self):
        return _analytics.Issuer_getSector(self)

    def getCountry(self):
        return _analytics.Issuer_getCountry(self)

    def getRating(self):
        return _analytics.Issuer_getRating(self)

    def getClassName(self):
        return _analytics.Issuer_getClassName(self)
    __swig_destroy__ = _analytics.delete_Issuer

# Register Issuer in _analytics:
_analytics.Issuer_swigregister(Issuer)

class CreditCluster(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, ratings, sectors, countries):
        _analytics.CreditCluster_swiginit(self, _analytics.new_CreditCluster(name, ratings, sectors, countries))

    def applies(self, issuer):
        r""" returns true if the given issuer belong to this credit cluster"""
        return _analytics.CreditCluster_applies(self, issuer)

    def getName(self):
        return _analytics.CreditCluster_getName(self)

    def getTransitionId(self):
        return _analytics.CreditCluster_getTransitionId(self)

    def getSurvivalId(self, issuer):
        return _analytics.CreditCluster_getSurvivalId(self, issuer)

    def getRatings(self):
        return _analytics.CreditCluster_getRatings(self)

    def getSectors(self):
        return _analytics.CreditCluster_getSectors(self)

    def getCountries(self):
        return _analytics.CreditCluster_getCountries(self)
    __swig_destroy__ = _analytics.delete_CreditCluster

# Register CreditCluster in _analytics:
_analytics.CreditCluster_swigregister(CreditCluster)

class IssuerToCreditMapping(BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getRecovery(self, issuer, curr, secLvl, calcDate, data):
        return _analytics.IssuerToCreditMapping_getRecovery(self, issuer, curr, secLvl, calcDate, data)

    def getRecoveryId(self, issuer, curr, secLvl):
        return _analytics.IssuerToCreditMapping_getRecoveryId(self, issuer, curr, secLvl)

    def getTransitionMatrix(self, issuer, calcDate, data):
        return _analytics.IssuerToCreditMapping_getTransitionMatrix(self, issuer, calcDate, data)

    def getSurvivalCurve(self, issuer, calcDate, data):
        return _analytics.IssuerToCreditMapping_getSurvivalCurve(self, issuer, calcDate, data)

    def getTransitionId(self, issuer):
        return _analytics.IssuerToCreditMapping_getTransitionId(self, issuer)

    def getSurvivalId(self, issuer):
        return _analytics.IssuerToCreditMapping_getSurvivalId(self, issuer)

    def addCluster(self, cluster):
        return _analytics.IssuerToCreditMapping_addCluster(self, cluster)

    def removeCluster(self, cluster):
        return _analytics.IssuerToCreditMapping_removeCluster(self, cluster)

    def getCluster(self, cluster):
        return _analytics.IssuerToCreditMapping_getCluster(self, cluster)

    def getClusterKeys(self):
        return _analytics.IssuerToCreditMapping_getClusterKeys(self)

    def getClassName(self):
        return _analytics.IssuerToCreditMapping_getClassName(self)

    def __init__(self):
        _analytics.IssuerToCreditMapping_swiginit(self, _analytics.new_IssuerToCreditMapping())
    __swig_destroy__ = _analytics.delete_IssuerToCreditMapping

# Register IssuerToCreditMapping in _analytics:
_analytics.IssuerToCreditMapping_swigregister(IssuerToCreditMapping)

class DefaultCurrencyMapping(BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.DefaultCurrencyMapping_swiginit(self, _analytics.new_DefaultCurrencyMapping())

    def getClassName(self):
        return _analytics.DefaultCurrencyMapping_getClassName(self)

    def addMapping(self, currency, irUdlId):
        return _analytics.DefaultCurrencyMapping_addMapping(self, currency, irUdlId)
    __swig_destroy__ = _analytics.delete_DefaultCurrencyMapping

# Register DefaultCurrencyMapping in _analytics:
_analytics.DefaultCurrencyMapping_swigregister(DefaultCurrencyMapping)

class RatingTransitionBase(MarketDataObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def computeDefaultProb(self, pd, rating, yf):
        return _analytics.RatingTransitionBase_computeDefaultProb(self, pd, rating, yf)

    def computeSurvivalCurve(self, *args):
        return _analytics.RatingTransitionBase_computeSurvivalCurve(self, *args)

    def computeTransition(self, result, yf):
        return _analytics.RatingTransitionBase_computeTransition(self, result, yf)
    __swig_destroy__ = _analytics.delete_RatingTransitionBase

# Register RatingTransitionBase in _analytics:
_analytics.RatingTransitionBase_swigregister(RatingTransitionBase)

class RatingTransition(RatingTransitionBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id, refDate):
        _analytics.RatingTransition_swiginit(self, _analytics.new_RatingTransition(id, refDate))

    def setEntry(self, i, j, value):
        return _analytics.RatingTransition_setEntry(self, i, j, value)

    def computeDefaultProb(self, pd, rating, yf):
        return _analytics.RatingTransition_computeDefaultProb(self, pd, rating, yf)

    def getClassName(self):
        return _analytics.RatingTransition_getClassName(self)
    __swig_destroy__ = _analytics.delete_RatingTransition

# Register RatingTransition in _analytics:
_analytics.RatingTransition_swigregister(RatingTransition)

class TimeScaledRatingTransition(RatingTransitionBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id, refDate, scaling):
        _analytics.TimeScaledRatingTransition_swiginit(self, _analytics.new_TimeScaledRatingTransition(id, refDate, scaling))

    def setEntry(self, i, j, value):
        return _analytics.TimeScaledRatingTransition_setEntry(self, i, j, value)

    def computeDefaultProb(self, pd, rating, yf):
        return _analytics.TimeScaledRatingTransition_computeDefaultProb(self, pd, rating, yf)

    def setScaling(self, *args):
        return _analytics.TimeScaledRatingTransition_setScaling(self, *args)

    def getClassName(self):
        return _analytics.TimeScaledRatingTransition_getClassName(self)
    __swig_destroy__ = _analytics.delete_TimeScaledRatingTransition

# Register TimeScaledRatingTransition in _analytics:
_analytics.TimeScaledRatingTransition_swigregister(TimeScaledRatingTransition)

class TimeDependentRatingTransition(RatingTransitionBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id, refDate):
        _analytics.TimeDependentRatingTransition_swiginit(self, _analytics.new_TimeDependentRatingTransition(id, refDate))

    def computeDefaultProb(self, pd, rating, yf):
        return _analytics.TimeDependentRatingTransition_computeDefaultProb(self, pd, rating, yf)

    def nTransitions(self):
        return _analytics.TimeDependentRatingTransition_nTransitions(self)

    def addTransition(self, time, transition):
        return _analytics.TimeDependentRatingTransition_addTransition(self, time, transition)

    def getClassName(self):
        return _analytics.TimeDependentRatingTransition_getClassName(self)
    __swig_destroy__ = _analytics.delete_TimeDependentRatingTransition

# Register TimeDependentRatingTransition in _analytics:
_analytics.TimeDependentRatingTransition_swigregister(TimeDependentRatingTransition)

class BaseUnderlying(BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    fullName = property(_analytics.BaseUnderlying_fullName_get, _analytics.BaseUnderlying_fullName_set)
    quoteKey = property(_analytics.BaseUnderlying_quoteKey_get, _analytics.BaseUnderlying_quoteKey_set)
    volDc = property(_analytics.BaseUnderlying_volDc_get, _analytics.BaseUnderlying_volDc_set)
    volKey = property(_analytics.BaseUnderlying_volKey_get, _analytics.BaseUnderlying_volKey_set)

    def setCurrency(self, curr):
        return _analytics.BaseUnderlying_setCurrency(self, curr)

    def getClassName(self):
        return _analytics.BaseUnderlying_getClassName(self)
    __swig_destroy__ = _analytics.delete_BaseUnderlying

# Register BaseUnderlying in _analytics:
_analytics.BaseUnderlying_swigregister(BaseUnderlying)

class EquityUnderlying(BaseUnderlying):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id):
        _analytics.EquityUnderlying_swiginit(self, _analytics.new_EquityUnderlying(id))
    issuerId = property(_analytics.EquityUnderlying_issuerId_get, _analytics.EquityUnderlying_issuerId_set)
    borrowKey = property(_analytics.EquityUnderlying_borrowKey_get, _analytics.EquityUnderlying_borrowKey_set)
    survivalKey = property(_analytics.EquityUnderlying_survivalKey_get, _analytics.EquityUnderlying_survivalKey_set)
    divKey = property(_analytics.EquityUnderlying_divKey_get, _analytics.EquityUnderlying_divKey_set)
    irKey = property(_analytics.EquityUnderlying_irKey_get, _analytics.EquityUnderlying_irKey_set)

    def getUnderlyingType(self):
        return _analytics.EquityUnderlying_getUnderlyingType(self)
    __swig_destroy__ = _analytics.delete_EquityUnderlying

# Register EquityUnderlying in _analytics:
_analytics.EquityUnderlying_swigregister(EquityUnderlying)

class IrUnderlying(BaseUnderlying):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id, discountCurve, period, dayCounter, rollConvention):
        _analytics.IrUnderlying_swiginit(self, _analytics.new_IrUnderlying(id, discountCurve, period, dayCounter, rollConvention))

    def getUnderlyingType(self):
        return _analytics.IrUnderlying_getUnderlyingType(self)
    __swig_destroy__ = _analytics.delete_IrUnderlying

# Register IrUnderlying in _analytics:
_analytics.IrUnderlying_swigregister(IrUnderlying)

class BaseDatedCurve(MarketDataObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def value(self, *args):
        return _analytics.BaseDatedCurve_value(self, *args)
    __swig_destroy__ = _analytics.delete_BaseDatedCurve

# Register BaseDatedCurve in _analytics:
_analytics.BaseDatedCurve_swigregister(BaseDatedCurve)

class DatedCurve(BaseDatedCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def value(self, *args):
        return _analytics.DatedCurve_value(self, *args)

    def __init__(self, *args):
        _analytics.DatedCurve_swiginit(self, _analytics.new_DatedCurve(*args))

    def getClassName(self):
        return _analytics.DatedCurve_getClassName(self)
    __swig_destroy__ = _analytics.delete_DatedCurve

# Register DatedCurve in _analytics:
_analytics.DatedCurve_swigregister(DatedCurve)

class DiscountCurve(BaseDatedCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getDayCounterType(self):
        return _analytics.DiscountCurve_getDayCounterType(self)

    def __init__(self, objId, refDate, dates, values, dc_string, interpolation_string, extrapolation_string):
        _analytics.DiscountCurve_swiginit(self, _analytics.new_DiscountCurve(objId, refDate, dates, values, dc_string, interpolation_string, extrapolation_string))
    __swig_destroy__ = _analytics.delete_DiscountCurve

    def value(self, *args):
        return _analytics.DiscountCurve_value(self, *args)

    def getNodeDates(self):
        return _analytics.DiscountCurve_getNodeDates(self)

    def getNodeValues(self):
        return _analytics.DiscountCurve_getNodeValues(self)

    def getClassName(self):
        return _analytics.DiscountCurve_getClassName(self)

# Register DiscountCurve in _analytics:
_analytics.DiscountCurve_swigregister(DiscountCurve)

class SurvivalCurve(BaseDatedCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, dates, values, isHazard=True):
        _analytics.SurvivalCurve_swiginit(self, _analytics.new_SurvivalCurve(objId, refDate, dates, values, isHazard))

    def value(self, *args):
        return _analytics.SurvivalCurve_value(self, *args)

    def getDayCounterType(self):
        return _analytics.SurvivalCurve_getDayCounterType(self)

    def getClassName(self):
        return _analytics.SurvivalCurve_getClassName(self)
    __swig_destroy__ = _analytics.delete_SurvivalCurve

# Register SurvivalCurve in _analytics:
_analytics.SurvivalCurve_swigregister(SurvivalCurve)

class DividendTable(MarketDataObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.DividendTable_swiginit(self, _analytics.new_DividendTable(*args))
    __swig_destroy__ = _analytics.delete_DividendTable

    def getClassName(self):
        return _analytics.DividendTable_getClassName(self)

    def getExDates(self):
        return _analytics.DividendTable_getExDates(self)

    def getPayDates(self):
        return _analytics.DividendTable_getPayDates(self)

    def getCashDivs(self):
        return _analytics.DividendTable_getCashDivs(self)

    def getYieldDivs(self):
        return _analytics.DividendTable_getYieldDivs(self)

    def getTaxFactors(self):
        return _analytics.DividendTable_getTaxFactors(self)

# Register DividendTable in _analytics:
_analytics.DividendTable_swigregister(DividendTable)

class ForwardCurve(BaseDatedCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def value(self, *args):
        return _analytics.ForwardCurve_value(self, *args)

    def getClassName(self):
        return _analytics.ForwardCurve_getClassName(self)

    def getIR(self):
        return _analytics.ForwardCurve_getIR(self)

    def getRefSpot(self):
        return _analytics.ForwardCurve_getRefSpot(self)

    def getBC(self):
        return _analytics.ForwardCurve_getBC(self)

    def getSC(self):
        r""" get the survival probability curve"""
        return _analytics.ForwardCurve_getSC(self)

    def getDIV(self):
        r""" get the dividend table"""
        return _analytics.ForwardCurve_getDIV(self)

    def discountedFutureCashDivs(self, calcDate, T):
        return _analytics.ForwardCurve_discountedFutureCashDivs(self, calcDate, T)
    __swig_destroy__ = _analytics.delete_ForwardCurve

# Register ForwardCurve in _analytics:
_analytics.ForwardCurve_swigregister(ForwardCurve)

class EquityForwardCurve(ForwardCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.EquityForwardCurve_swiginit(self, _analytics.new_EquityForwardCurve(*args))
    __swig_destroy__ = _analytics.delete_EquityForwardCurve

    def getClassName(self):
        return _analytics.EquityForwardCurve_getClassName(self)

# Register EquityForwardCurve in _analytics:
_analytics.EquityForwardCurve_swigregister(EquityForwardCurve)

class FxForwardCurve(ForwardCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.FxForwardCurve_swiginit(self, _analytics.new_FxForwardCurve(*args))
    __swig_destroy__ = _analytics.delete_FxForwardCurve

    def getClassName(self):
        return _analytics.FxForwardCurve_getClassName(self)

# Register FxForwardCurve in _analytics:
_analytics.FxForwardCurve_swigregister(FxForwardCurve)

class InflationIndexForwardCurve(DatedCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.InflationIndexForwardCurve_swiginit(self, _analytics.new_InflationIndexForwardCurve(*args))

    def value(self, *args):
        r"""
         Return an finlation index. If interpolation is not explicitely defined, the curves internal interpolation is used. :type refDate: :py:class:`ptime`
        :param refDate:: Reference date :type date: :py:class:`ptime`
        :param date:: The date for which the inflation index will be calculated. :type inflationInterp: string, optional
        :param inflationInterp:: String defining the interpolation (see Enum InflationInterpolation). If no interpolation is defined, the internal interpolation is used.
        """
        return _analytics.InflationIndexForwardCurve_value(self, *args)

    def getInterpolationMethod(self):
        return _analytics.InflationIndexForwardCurve_getInterpolationMethod(self)
    __swig_destroy__ = _analytics.delete_InflationIndexForwardCurve

# Register InflationIndexForwardCurve in _analytics:
_analytics.InflationIndexForwardCurve_swigregister(InflationIndexForwardCurve)

class LiborCurve(MarketDataObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, curve, liborIndex):
        _analytics.LiborCurve_swiginit(self, _analytics.new_LiborCurve(objId, refDate, curve, liborIndex))

    def getClassName(self):
        return _analytics.LiborCurve_getClassName(self)
    __swig_destroy__ = _analytics.delete_LiborCurve

# Register LiborCurve in _analytics:
_analytics.LiborCurve_swigregister(LiborCurve)

class SwapCurve(MarketDataObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, liborCurve, discountCurve, swapIndex):
        _analytics.SwapCurve_swiginit(self, _analytics.new_SwapCurve(objId, refDate, liborCurve, discountCurve, swapIndex))

    def getClassName(self):
        return _analytics.SwapCurve_getClassName(self)

    def getSwapRate(self, valDate, startDate, swapLength):
        return _analytics.SwapCurve_getSwapRate(self, valDate, startDate, swapLength)
    __swig_destroy__ = _analytics.delete_SwapCurve

# Register SwapCurve in _analytics:
_analytics.SwapCurve_swigregister(SwapCurve)

class VolatilityParametrization(Clonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def calcImpliedVol(self, ttm, xStrike):
        return _analytics.VolatilityParametrization_calcImpliedVol(self, ttm, xStrike)

    def getClassName(self):
        return _analytics.VolatilityParametrization_getClassName(self)
    __swig_destroy__ = _analytics.delete_VolatilityParametrization

# Register VolatilityParametrization in _analytics:
_analytics.VolatilityParametrization_swigregister(VolatilityParametrization)

class VolatilityParametrizationFlat(VolatilityParametrization):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vol):
        _analytics.VolatilityParametrizationFlat_swiginit(self, _analytics.new_VolatilityParametrizationFlat(vol))

    def calcImpliedVol(self, ttm, xStrike):
        return _analytics.VolatilityParametrizationFlat_calcImpliedVol(self, ttm, xStrike)
    __swig_destroy__ = _analytics.delete_VolatilityParametrizationFlat

# Register VolatilityParametrizationFlat in _analytics:
_analytics.VolatilityParametrizationFlat_swigregister(VolatilityParametrizationFlat)

class VolatilityParametrizationTerm(VolatilityParametrization):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, expiryTimes, atmfVols):
        _analytics.VolatilityParametrizationTerm_swiginit(self, _analytics.new_VolatilityParametrizationTerm(expiryTimes, atmfVols))

    def calcImpliedVol(self, ttm, xStrike):
        return _analytics.VolatilityParametrizationTerm_calcImpliedVol(self, ttm, xStrike)

    def getExpiryTimes(self):
        return _analytics.VolatilityParametrizationTerm_getExpiryTimes(self)

    def getAtmfVols(self):
        return _analytics.VolatilityParametrizationTerm_getAtmfVols(self)

    def set(self, expiryTimes, atmfVols):
        return _analytics.VolatilityParametrizationTerm_set(self, expiryTimes, atmfVols)
    __swig_destroy__ = _analytics.delete_VolatilityParametrizationTerm

# Register VolatilityParametrizationTerm in _analytics:
_analytics.VolatilityParametrizationTerm_swigregister(VolatilityParametrizationTerm)

class VolatilityParametrizationSSVI(VolatilityParametrizationTerm):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, expiryTimes, atmfVols, rho, eta, gamma):
        r""" Constructor for an SSVI parametrization."""
        _analytics.VolatilityParametrizationSSVI_swiginit(self, _analytics.new_VolatilityParametrizationSSVI(expiryTimes, atmfVols, rho, eta, gamma))

    @staticmethod
    def fromVolParametrization(param):
        return _analytics.VolatilityParametrizationSSVI_fromVolParametrization(param)

    def getRho(self):
        return _analytics.VolatilityParametrizationSSVI_getRho(self)

    def getEta(self):
        r""" return eta"""
        return _analytics.VolatilityParametrizationSSVI_getEta(self)

    def getGamma(self):
        r""" return gamma"""
        return _analytics.VolatilityParametrizationSSVI_getGamma(self)

    def calcImpliedVol(self, ttm, xStrike):
        return _analytics.VolatilityParametrizationSSVI_calcImpliedVol(self, ttm, xStrike)

    def set(self, rho, eta, gamma, expiryTimes, atmfVols):
        return _analytics.VolatilityParametrizationSSVI_set(self, rho, eta, gamma, expiryTimes, atmfVols)
    __swig_destroy__ = _analytics.delete_VolatilityParametrizationSSVI

# Register VolatilityParametrizationSSVI in _analytics:
_analytics.VolatilityParametrizationSSVI_swigregister(VolatilityParametrizationSSVI)

def VolatilityParametrizationSSVI_fromVolParametrization(param):
    return _analytics.VolatilityParametrizationSSVI_fromVolParametrization(param)

class VolatilityParametrizationTimeSlice(VolatilityParametrization):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.VolatilityParametrizationTimeSlice_swiginit(self, _analytics.new_VolatilityParametrizationTimeSlice(*args))

    def calcImpliedVol(self, ttm, xStrike):
        return _analytics.VolatilityParametrizationTimeSlice_calcImpliedVol(self, ttm, xStrike)
    __swig_destroy__ = _analytics.delete_VolatilityParametrizationTimeSlice

# Register VolatilityParametrizationTimeSlice in _analytics:
_analytics.VolatilityParametrizationTimeSlice_swigregister(VolatilityParametrizationTimeSlice)

class VolatilitySurface(MarketDataObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, fwdCurve, dc, volParam):
        _analytics.VolatilitySurface_swiginit(self, _analytics.new_VolatilitySurface(objId, refDate, fwdCurve, dc, volParam))

    def getCalibrationDate(self):
        return _analytics.VolatilitySurface_getCalibrationDate(self)

    def getForwardCurve(self):
        return _analytics.VolatilitySurface_getForwardCurve(self)

    def calcImpliedVol(self, calcDate, expiry, xStrike):
        return _analytics.VolatilitySurface_calcImpliedVol(self, calcDate, expiry, xStrike)

    def getDayCounter(self):
        return _analytics.VolatilitySurface_getDayCounter(self)

    def getVolParametrization(self):
        return _analytics.VolatilitySurface_getVolParametrization(self)

    def getDayCounterType(self):
        return _analytics.VolatilitySurface_getDayCounterType(self)

    @staticmethod
    def load(filename):
        return _analytics.VolatilitySurface_load(filename)

    @staticmethod
    def save(filename, data):
        return _analytics.VolatilitySurface_save(filename, data)

    @staticmethod
    def setStickynessAssumption(stickynessAssumption):
        return _analytics.VolatilitySurface_setStickynessAssumption(stickynessAssumption)

    @staticmethod
    def createVolatilitySurfaceShiftedFwd(vol, fwdCurve):
        return _analytics.VolatilitySurface_createVolatilitySurfaceShiftedFwd(vol, fwdCurve)

    def getBackBone(self):
        return _analytics.VolatilitySurface_getBackBone(self)

    def getClassName(self):
        return _analytics.VolatilitySurface_getClassName(self)
    __swig_destroy__ = _analytics.delete_VolatilitySurface

# Register VolatilitySurface in _analytics:
_analytics.VolatilitySurface_swigregister(VolatilitySurface)

def VolatilitySurface_load(filename):
    return _analytics.VolatilitySurface_load(filename)

def VolatilitySurface_save(filename, data):
    return _analytics.VolatilitySurface_save(filename, data)

def VolatilitySurface_setStickynessAssumption(stickynessAssumption):
    return _analytics.VolatilitySurface_setStickynessAssumption(stickynessAssumption)

def VolatilitySurface_createVolatilitySurfaceShiftedFwd(vol, fwdCurve):
    return _analytics.VolatilitySurface_createVolatilitySurfaceShiftedFwd(vol, fwdCurve)

class QuoteTable(MarketDataObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getUdlId(self):
        return _analytics.QuoteTable_getUdlId(self)

    def getIssuer(self):
        return _analytics.QuoteTable_getIssuer(self)

    def getRefSpot(self):
        return _analytics.QuoteTable_getRefSpot(self)

    def getQuoteTable(self):
        return _analytics.QuoteTable_getQuoteTable(self)

    def getExpiries(self, expiries):
        return _analytics.QuoteTable_getExpiries(self, expiries)

    def getSecLevel(self):
        return _analytics.QuoteTable_getSecLevel(self)

    def getCurrency(self):
        return _analytics.QuoteTable_getCurrency(self)

    def getClassName(self):
        return _analytics.QuoteTable_getClassName(self)
    __swig_destroy__ = _analytics.delete_QuoteTable

# Register QuoteTable in _analytics:
_analytics.QuoteTable_swigregister(QuoteTable)

class PlainVanillaMarketQuote(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        default constructor

        |

        *Overload 2:*
        constructor with full initialization

        |

        *Overload 3:*
        constructor with full initialization

        |

        *Overload 4:*
        constructor with full initialization
        """
        _analytics.PlainVanillaMarketQuote_swiginit(self, _analytics.new_PlainVanillaMarketQuote(*args))
    refDate = property(_analytics.PlainVanillaMarketQuote_refDate_get, _analytics.PlainVanillaMarketQuote_refDate_set, doc=r""" reference date of the quote""")
    isCall = property(_analytics.PlainVanillaMarketQuote_isCall_get, _analytics.PlainVanillaMarketQuote_isCall_set, doc=r""" P/C""")
    isEuropean = property(_analytics.PlainVanillaMarketQuote_isEuropean_get, _analytics.PlainVanillaMarketQuote_isEuropean_set, doc=r""" E/A""")
    K = property(_analytics.PlainVanillaMarketQuote_K_get, _analytics.PlainVanillaMarketQuote_K_set, doc=r""" Strike""")
    T = property(_analytics.PlainVanillaMarketQuote_T_get, _analytics.PlainVanillaMarketQuote_T_set, doc=r""" Expiry""")
    bid = property(_analytics.PlainVanillaMarketQuote_bid_get, _analytics.PlainVanillaMarketQuote_bid_set, doc=r""" Bid price, set to negative value if there is no bid price""")
    ask = property(_analytics.PlainVanillaMarketQuote_ask_get, _analytics.PlainVanillaMarketQuote_ask_set, doc=r""" Ask price, set to negative value if there is no ask price""")
    bidIV = property(_analytics.PlainVanillaMarketQuote_bidIV_get, _analytics.PlainVanillaMarketQuote_bidIV_set, doc=r""" Bid vol, negative if not yet calculated or not available""")
    askIV = property(_analytics.PlainVanillaMarketQuote_askIV_get, _analytics.PlainVanillaMarketQuote_askIV_set, doc=r""" Ask vol, negative if not yet calculated or not available""")
    __swig_destroy__ = _analytics.delete_PlainVanillaMarketQuote

# Register PlainVanillaMarketQuote in _analytics:
_analytics.PlainVanillaMarketQuote_swigregister(PlainVanillaMarketQuote)

class FxOptionQuoteTable(QuoteTable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getConvexityType(self):
        r""" get conv type"""
        return _analytics.FxOptionQuoteTable_getConvexityType(self)

    def getDeltaType(self):
        r""" get delta type"""
        return _analytics.FxOptionQuoteTable_getDeltaType(self)

    def getSpotDeltaBoundary(self):
        r""" get spot delta boundary"""
        return _analytics.FxOptionQuoteTable_getSpotDeltaBoundary(self)

    def __init__(self, *args):
        _analytics.FxOptionQuoteTable_swiginit(self, _analytics.new_FxOptionQuoteTable(*args))

    def getQuoteData(self, quotes, specs, mktMan):
        return _analytics.FxOptionQuoteTable_getQuoteData(self, quotes, specs, mktMan)

    def getPlainVanillaMarketQuotes(self, result, mktData):
        r""" get the plain vanilla market quotes"""
        return _analytics.FxOptionQuoteTable_getPlainVanillaMarketQuotes(self, result, mktData)

    def getClassName(self):
        return _analytics.FxOptionQuoteTable_getClassName(self)
    __swig_destroy__ = _analytics.delete_FxOptionQuoteTable

# Register FxOptionQuoteTable in _analytics:
_analytics.FxOptionQuoteTable_swigregister(FxOptionQuoteTable)

class EquityOptionQuoteTable(QuoteTable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def addQuotes(self, expiry, isEuropean, strikes, isCall, bid, ask):
        return _analytics.EquityOptionQuoteTable_addQuotes(self, expiry, isEuropean, strikes, isCall, bid, ask)

    def __init__(self, *args):
        _analytics.EquityOptionQuoteTable_swiginit(self, _analytics.new_EquityOptionQuoteTable(*args))

    def getPlainVanillaMarketQuotes(self, result, mktData):
        r""" get the plain vanilla market quotes"""
        return _analytics.EquityOptionQuoteTable_getPlainVanillaMarketQuotes(self, result, mktData)

    def getQuoteData(self, quotes, specs, mktMan):
        return _analytics.EquityOptionQuoteTable_getQuoteData(self, quotes, specs, mktMan)

    def getQuotes(self, expiries, strikes, bids, asks, isCall):
        return _analytics.EquityOptionQuoteTable_getQuotes(self, expiries, strikes, bids, asks, isCall)

    def getClassName(self):
        return _analytics.EquityOptionQuoteTable_getClassName(self)
    __swig_destroy__ = _analytics.delete_EquityOptionQuoteTable

# Register EquityOptionQuoteTable in _analytics:
_analytics.EquityOptionQuoteTable_swigregister(EquityOptionQuoteTable)

class SpotInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getTimeSeries(self, dates, values, quoteKey, startDate, endDate):
        return _analytics.SpotInterface_getTimeSeries(self, dates, values, quoteKey, startDate, endDate)

    def getReferenceSpot(self, quoteKey, timeStamp):
        return _analytics.SpotInterface_getReferenceSpot(self, quoteKey, timeStamp)
    __swig_destroy__ = _analytics.delete_SpotInterface

# Register SpotInterface in _analytics:
_analytics.SpotInterface_swigregister(SpotInterface)

class InMemorySpotInterface(SpotInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getReferenceSpot(self, quoteKey, timeStamp):
        return _analytics.InMemorySpotInterface_getReferenceSpot(self, quoteKey, timeStamp)

    def addReferenceSpot(self, quoteKey, timestamp, spot):
        return _analytics.InMemorySpotInterface_addReferenceSpot(self, quoteKey, timestamp, spot)

    def __init__(self):
        _analytics.InMemorySpotInterface_swiginit(self, _analytics.new_InMemorySpotInterface())
    __swig_destroy__ = _analytics.delete_InMemorySpotInterface

# Register InMemorySpotInterface in _analytics:
_analytics.InMemorySpotInterface_swigregister(InMemorySpotInterface)

class MarketDataScenario(BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _analytics.delete_MarketDataScenario

# Register MarketDataScenario in _analytics:
_analytics.MarketDataScenario_swigregister(MarketDataScenario)

class DividendScenario(MarketDataScenario):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, relativeDates, udls):
        _analytics.DividendScenario_swiginit(self, _analytics.new_DividendScenario(objId, refDate, relativeDates, udls))

    def setBucket(self, bucketFrom, bucketTo, relativeDates, cashShiftAbs, cashShiftRel, yieldShiftAbs, yieldShiftRel, taxShiftAbs=0.0, taxShiftRel=1.0):
        return _analytics.DividendScenario_setBucket(self, bucketFrom, bucketTo, relativeDates, cashShiftAbs, cashShiftRel, yieldShiftAbs, yieldShiftRel, taxShiftAbs, taxShiftRel)

    def apply(self, mktObj, refDate):
        return _analytics.DividendScenario_apply(self, mktObj, refDate)

    def getClassName(self):
        return _analytics.DividendScenario_getClassName(self)
    __swig_destroy__ = _analytics.delete_DividendScenario

# Register DividendScenario in _analytics:
_analytics.DividendScenario_swigregister(DividendScenario)

class DiscountCurveScenario(MarketDataScenario):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.DiscountCurveScenario_swiginit(self, _analytics.new_DiscountCurveScenario(*args))

    def setConstantBucketShift(self, fromBucket, toBucket, absShift, relShift):
        return _analytics.DiscountCurveScenario_setConstantBucketShift(self, fromBucket, toBucket, absShift, relShift)

    def setHatBucketShift(self, fromBucket, midBucket, toBucket, absShift, relShift):
        return _analytics.DiscountCurveScenario_setHatBucketShift(self, fromBucket, midBucket, toBucket, absShift, relShift)

    def apply(self, mktObj, refDate):
        return _analytics.DiscountCurveScenario_apply(self, mktObj, refDate)

    def getClassName(self):
        return _analytics.DiscountCurveScenario_getClassName(self)
    __swig_destroy__ = _analytics.delete_DiscountCurveScenario

# Register DiscountCurveScenario in _analytics:
_analytics.DiscountCurveScenario_swigregister(DiscountCurveScenario)

class VolatilitySurfaceBucketShifted(VolatilitySurface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vol, strikeBuckets, maturityBuckets, shiftSize):
        _analytics.VolatilitySurfaceBucketShifted_swiginit(self, _analytics.new_VolatilitySurfaceBucketShifted(vol, strikeBuckets, maturityBuckets, shiftSize))

    def setRBF(self, xScale, tScale):
        return _analytics.VolatilitySurfaceBucketShifted_setRBF(self, xScale, tScale)

    def setSimpleExponentialLocalSupport(self, xScale, tScale):
        return _analytics.VolatilitySurfaceBucketShifted_setSimpleExponentialLocalSupport(self, xScale, tScale)

    def setBucket(self, i, j):
        return _analytics.VolatilitySurfaceBucketShifted_setBucket(self, i, j)
    __swig_destroy__ = _analytics.delete_VolatilitySurfaceBucketShifted

# Register VolatilitySurfaceBucketShifted in _analytics:
_analytics.VolatilitySurfaceBucketShifted_swigregister(VolatilitySurfaceBucketShifted)

class BondQuoteTable(MarketDataObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, isins, quoteTimes, bid, ask):
        _analytics.BondQuoteTable_swiginit(self, _analytics.new_BondQuoteTable(objId, refDate, isins, quoteTimes, bid, ask))

    def getClassName(self):
        return _analytics.BondQuoteTable_getClassName(self)
    __swig_destroy__ = _analytics.delete_BondQuoteTable

# Register BondQuoteTable in _analytics:
_analytics.BondQuoteTable_swigregister(BondQuoteTable)

class MarketDataManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mkt, env, spot, calcDate, useDefaultDiscounting=True):
        r""" constructor with full initialization"""
        _analytics.MarketDataManager_swiginit(self, _analytics.new_MarketDataManager(mkt, env, spot, calcDate, useDefaultDiscounting))

    def setCalcDate(self, calcDate):
        return _analytics.MarketDataManager_setCalcDate(self, calcDate)

    def getMarketDataInterface(self):
        return _analytics.MarketDataManager_getMarketDataInterface(self)

    def getEnvironmentInterface(self):
        return _analytics.MarketDataManager_getEnvironmentInterface(self)

    def clearMarketDataCache(self):
        return _analytics.MarketDataManager_clearMarketDataCache(self)

    def getUnderlyingType(self, udlId):
        return _analytics.MarketDataManager_getUnderlyingType(self, udlId)

    def getEquityUnderlying(self, udl):
        r""" get equity underlying for given key, throws an exception if key does not exist"""
        return _analytics.MarketDataManager_getEquityUnderlying(self, udl)

    def getFxUnderlying(self, base, quote):
        r""" get fx underlying for given base and quote currency, throws an exception if key does not exist"""
        return _analytics.MarketDataManager_getFxUnderlying(self, base, quote)

    def getIrUnderlying(self, udl):
        r""" get ir underlying for given key"""
        return _analytics.MarketDataManager_getIrUnderlying(self, udl)

    def getDefaultIrUnderlying(self, currency):
        return _analytics.MarketDataManager_getDefaultIrUnderlying(self, currency)

    def getForwardCurve(self, udlKey, spot=-1.0):
        r""" get forward curve for underlying, throwing an exception if not existent"""
        return _analytics.MarketDataManager_getForwardCurve(self, udlKey, spot)

    def getVolatilitySurface(self, udlKey):
        r""" get volatility surface for underlying, throwing an exception if not existent"""
        return _analytics.MarketDataManager_getVolatilitySurface(self, udlKey)

    def getVolatility(self, volKey, fwdCurve):
        return _analytics.MarketDataManager_getVolatility(self, volKey, fwdCurve)

    def getSpot(self, udlKey):
        return _analytics.MarketDataManager_getSpot(self, udlKey)

    def getDiscountCurve(self, *args):
        return _analytics.MarketDataManager_getDiscountCurve(self, *args)

    def getEquityOptionQuoteTable(self, quoteTableId):
        return _analytics.MarketDataManager_getEquityOptionQuoteTable(self, quoteTableId)

    def getFxOptionQuoteTable(self, quoteTableId):
        return _analytics.MarketDataManager_getFxOptionQuoteTable(self, quoteTableId)

    def getCurrency(self, udlId):
        return _analytics.MarketDataManager_getCurrency(self, udlId)

    def getIssuerToCreditMapping(self):
        return _analytics.MarketDataManager_getIssuerToCreditMapping(self)

    def getIssuer(self, id):
        return _analytics.MarketDataManager_getIssuer(self, id)

    def getTransitionMatrix(self, issuer):
        return _analytics.MarketDataManager_getTransitionMatrix(self, issuer)

    def getSurvivalCurve(self, issuer):
        return _analytics.MarketDataManager_getSurvivalCurve(self, issuer)

    def getRecovery(self, issuer, currency, secLvl):
        return _analytics.MarketDataManager_getRecovery(self, issuer, currency, secLvl)
    __swig_destroy__ = _analytics.delete_MarketDataManager

# Register MarketDataManager in _analytics:
_analytics.MarketDataManager_swigregister(MarketDataManager)

class ParameterManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r""" constructor with full initialization"""
        _analytics.ParameterManager_swiginit(self, _analytics.new_ParameterManager(*args))

    def getCalibType(self):
        return _analytics.ParameterManager_getCalibType(self)

    def getSSVIParameter(self, id):
        return _analytics.ParameterManager_getSSVIParameter(self, id)

    def getGRIDParameter(self, id):
        return _analytics.ParameterManager_getGRIDParameter(self, id)

    def getParameterVCSP(self, id, type):
        r""" get the model for the given pricer and product type (currently we do not need the product type because we have only equity products)"""
        return _analytics.ParameterManager_getParameterVCSP(self, id, type)

    def getParameterVCGP(self, id, type):
        r""" get the model for the given pricer and product type (currently we do not need the product type because we have only equity products)"""
        return _analytics.ParameterManager_getParameterVCGP(self, id, type)

    def getParameterVCP(self, id, type):
        r""" get the model for the given pricer and product type (currently we do not need the product type because we have only equity products)"""
        return _analytics.ParameterManager_getParameterVCP(self, id, type)
    __swig_destroy__ = _analytics.delete_ParameterManager

# Register ParameterManager in _analytics:
_analytics.ParameterManager_swigregister(ParameterManager)

class barrierPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.barrierPtr_swiginit(self, _analytics.new_barrierPtr())
    __swig_destroy__ = _analytics.delete_barrierPtr

# Register barrierPtr in _analytics:
_analytics.barrierPtr_swigregister(barrierPtr)

class BaseSpecification(BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _analytics.delete_BaseSpecification

    def getObjectId(self):
        return _analytics.BaseSpecification_getObjectId(self)

    def getIssuer(self):
        return _analytics.BaseSpecification_getIssuer(self)

    def getClassName(self):
        return _analytics.BaseSpecification_getClassName(self)

    def getExpiry(self):
        return _analytics.BaseSpecification_getExpiry(self)

    def getSecuritizationLevel(self):
        return _analytics.BaseSpecification_getSecuritizationLevel(self)

    def getProductType(self):
        return _analytics.BaseSpecification_getProductType(self)

    def getObjectType(self):
        return _analytics.BaseSpecification_getObjectType(self)

    def getCurrency(self):
        return _analytics.BaseSpecification_getCurrency(self)

    def getObjectCategory(self):
        return _analytics.BaseSpecification_getObjectCategory(self)

    @staticmethod
    def load(filename):
        return _analytics.BaseSpecification_load(filename)

    @staticmethod
    def save(filename, data):
        return _analytics.BaseSpecification_save(filename, data)

# Register BaseSpecification in _analytics:
_analytics.BaseSpecification_swigregister(BaseSpecification)

def BaseSpecification_load(filename):
    return _analytics.BaseSpecification_load(filename)

def BaseSpecification_save(filename, data):
    return _analytics.BaseSpecification_save(filename, data)

class FixingTable(BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.FixingTable_swiginit(self, _analytics.new_FixingTable())

    def getClassName(self):
        return _analytics.FixingTable_getClassName(self)

    def add(self, key, fixingDate, value):
        r"""
         Adds a fixing :type key: string
        :param key: underlying key to identify fixing :type fixingDate: :py:class:`ptime`
        :param fixingDate: of fixing :type value: float
        :param value: fixing value
        """
        return _analytics.FixingTable_add(self, key, fixingDate, value)
    __swig_destroy__ = _analytics.delete_FixingTable

# Register FixingTable in _analytics:
_analytics.FixingTable_swigregister(FixingTable)

class ComboSpecification(BaseSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.ComboSpecification_swiginit(self, _analytics.new_ComboSpecification(*args))

    def getMemberSpecs(self):
        r""" return the member weights"""
        return _analytics.ComboSpecification_getMemberSpecs(self)

    def getMemberWeights(self):
        r""" return the member weights"""
        return _analytics.ComboSpecification_getMemberWeights(self)
    __swig_destroy__ = _analytics.delete_ComboSpecification

# Register ComboSpecification in _analytics:
_analytics.ComboSpecification_swigregister(ComboSpecification)

class vectorBaseSpecification(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorBaseSpecification_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorBaseSpecification___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorBaseSpecification___bool__(self)

    def __len__(self):
        return _analytics.vectorBaseSpecification___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorBaseSpecification___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorBaseSpecification___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorBaseSpecification___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorBaseSpecification___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorBaseSpecification___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorBaseSpecification___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorBaseSpecification_pop(self)

    def append(self, x):
        return _analytics.vectorBaseSpecification_append(self, x)

    def empty(self):
        return _analytics.vectorBaseSpecification_empty(self)

    def size(self):
        return _analytics.vectorBaseSpecification_size(self)

    def swap(self, v):
        return _analytics.vectorBaseSpecification_swap(self, v)

    def begin(self):
        return _analytics.vectorBaseSpecification_begin(self)

    def end(self):
        return _analytics.vectorBaseSpecification_end(self)

    def rbegin(self):
        return _analytics.vectorBaseSpecification_rbegin(self)

    def rend(self):
        return _analytics.vectorBaseSpecification_rend(self)

    def clear(self):
        return _analytics.vectorBaseSpecification_clear(self)

    def get_allocator(self):
        return _analytics.vectorBaseSpecification_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorBaseSpecification_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorBaseSpecification_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorBaseSpecification_swiginit(self, _analytics.new_vectorBaseSpecification(*args))

    def push_back(self, x):
        return _analytics.vectorBaseSpecification_push_back(self, x)

    def front(self):
        return _analytics.vectorBaseSpecification_front(self)

    def back(self):
        return _analytics.vectorBaseSpecification_back(self)

    def assign(self, n, x):
        return _analytics.vectorBaseSpecification_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorBaseSpecification_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorBaseSpecification_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorBaseSpecification_reserve(self, n)

    def capacity(self):
        return _analytics.vectorBaseSpecification_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorBaseSpecification

# Register vectorBaseSpecification in _analytics:
_analytics.vectorBaseSpecification_swigregister(vectorBaseSpecification)

class PayoffStructure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.PayoffStructure_swiginit(self, _analytics.new_PayoffStructure(*args))

    def getPayoffSpots(self):
        return _analytics.PayoffStructure_getPayoffSpots(self)

    def getPayoffValues(self):
        return _analytics.PayoffStructure_getPayoffValues(self)
    __swig_destroy__ = _analytics.delete_PayoffStructure

# Register PayoffStructure in _analytics:
_analytics.PayoffStructure_swigregister(PayoffStructure)

class BarrierDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierStart, barrierEnd, barrierPayoff, level, callable):
        _analytics.BarrierDefinition_swiginit(self, _analytics.new_BarrierDefinition(barrierStart, barrierEnd, barrierPayoff, level, callable))
    __swig_destroy__ = _analytics.delete_BarrierDefinition

# Register BarrierDefinition in _analytics:
_analytics.BarrierDefinition_swigregister(BarrierDefinition)

class BarrierSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.BarrierSchedule_swiginit(self, _analytics.new_BarrierSchedule(*args))

    def addUpBarrier(self, bUp):
        return _analytics.BarrierSchedule_addUpBarrier(self, bUp)

    def addDownBarrier(self, bDown):
        return _analytics.BarrierSchedule_addDownBarrier(self, bDown)
    __swig_destroy__ = _analytics.delete_BarrierSchedule

# Register BarrierSchedule in _analytics:
_analytics.BarrierSchedule_swigregister(BarrierSchedule)

class BarrierPayoff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.BarrierPayoff_swiginit(self, _analytics.new_BarrierPayoff(*args))
    __swig_destroy__ = _analytics.delete_BarrierPayoff

# Register BarrierPayoff in _analytics:
_analytics.BarrierPayoff_swigregister(BarrierPayoff)

class ExerciseSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.ExerciseSchedule_swiginit(self, _analytics.new_ExerciseSchedule())
    __swig_destroy__ = _analytics.delete_ExerciseSchedule

# Register ExerciseSchedule in _analytics:
_analytics.ExerciseSchedule_swigregister(ExerciseSchedule)

class CouponDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
         Constructor for CouponDescription.  A CouponDescription defines a coupon. A coupon can either be a fixed coupon :math:`c` or determind by a floating rate :math:`` plus a spread :math:`s`. :type accrualStart: :py:class:`ptime`
        :param accrualStart:: Start of accrual period for coupon. :type accrualEnd: :py:class:`ptime`
        :param accrualEnd:: End of accrual period for coupon. :type paymentDate: :py:class:`ptime`
        :param paymentDate:: The payment date of the coupon. :type dc: string
        :param dc:: Daycounter used to determine the yearfraction to compte the cash flow of the coupon by yf(acrualStart, accrualEnd)*coupon   where yf is the yearfraction between accrualStart and accrualEnd computed by the daycounter. :type anualizedFixedCoupon: float
        :param anualizedFixedCoupon:: The annualized fixed coupon. :type fixingDate: :py:class:`ptime`, optional
        :param fixingDate:: The fixing date of a coupondetermined by a floating rate. :type floatingPeriodStart: :py:class:`ptime`, optional
        :param floatingPeriodStart:: The floating rate's period end. :type floatingPeriodEnd: :py:class:`ptime`, optional
        :param floatingPeriodEnd:: The floating rate's period end. :type floatingSpread: float, optional
        :param floatingSpread:: Additive spread on floating rate. :type floatingRateCap: float, optional
        :param floatingRateCap:: Cap of the foatig rate. If not specified, no cap is applied. :type floatingRateFloor: float, optional
        :param floatingRateFloor:: Floor of floating rate. :type floatingFixingUdl: string, optional
        :param floatingFixingUdl:: The id of the floating rate underlying, if specified, the coupon is deermind als floating, otherwise as fixed.
        """
        _analytics.CouponDescription_swiginit(self, _analytics.new_CouponDescription(*args))

    def isFixedCoupon(self):
        return _analytics.CouponDescription_isFixedCoupon(self)

    def getFixingUdl(self):
        return _analytics.CouponDescription_getFixingUdl(self)

    def getPaymentDate(self):
        return _analytics.CouponDescription_getPaymentDate(self)

    def getFixingDate(self):
        return _analytics.CouponDescription_getFixingDate(self)

    def getCashflowFixedCoupon(self):
        return _analytics.CouponDescription_getCashflowFixedCoupon(self)

    def getCashflowSpread(self):
        return _analytics.CouponDescription_getCashflowSpread(self)

    def getCashflowFloatCoupon(self, valDate, fwdCurve, lastFixing):
        return _analytics.CouponDescription_getCashflowFloatCoupon(self, valDate, fwdCurve, lastFixing)

    def getAccrualStart(self):
        return _analytics.CouponDescription_getAccrualStart(self)

    def getAccruelEnd(self):
        return _analytics.CouponDescription_getAccruelEnd(self)

    def getAccrualPeriod(self):
        return _analytics.CouponDescription_getAccrualPeriod(self)

    def getFloatingStart(self):
        return _analytics.CouponDescription_getFloatingStart(self)

    def getFloatingEnd(self):
        return _analytics.CouponDescription_getFloatingEnd(self)

    def getFloatingCap(self):
        return _analytics.CouponDescription_getFloatingCap(self)

    def getFloatingFloor(self):
        return _analytics.CouponDescription_getFloatingFloor(self)

    def getFixedCoupon(self):
        return _analytics.CouponDescription_getFixedCoupon(self)
    __swig_destroy__ = _analytics.delete_CouponDescription

# Register CouponDescription in _analytics:
_analytics.CouponDescription_swigregister(CouponDescription)

class vectorCouponDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorCouponDescription_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorCouponDescription___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorCouponDescription___bool__(self)

    def __len__(self):
        return _analytics.vectorCouponDescription___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorCouponDescription___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorCouponDescription___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorCouponDescription___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorCouponDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorCouponDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorCouponDescription___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorCouponDescription_pop(self)

    def append(self, x):
        return _analytics.vectorCouponDescription_append(self, x)

    def empty(self):
        return _analytics.vectorCouponDescription_empty(self)

    def size(self):
        return _analytics.vectorCouponDescription_size(self)

    def swap(self, v):
        return _analytics.vectorCouponDescription_swap(self, v)

    def begin(self):
        return _analytics.vectorCouponDescription_begin(self)

    def end(self):
        return _analytics.vectorCouponDescription_end(self)

    def rbegin(self):
        return _analytics.vectorCouponDescription_rbegin(self)

    def rend(self):
        return _analytics.vectorCouponDescription_rend(self)

    def clear(self):
        return _analytics.vectorCouponDescription_clear(self)

    def get_allocator(self):
        return _analytics.vectorCouponDescription_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorCouponDescription_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorCouponDescription_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorCouponDescription_swiginit(self, _analytics.new_vectorCouponDescription(*args))

    def push_back(self, x):
        return _analytics.vectorCouponDescription_push_back(self, x)

    def front(self):
        return _analytics.vectorCouponDescription_front(self)

    def back(self):
        return _analytics.vectorCouponDescription_back(self)

    def assign(self, n, x):
        return _analytics.vectorCouponDescription_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorCouponDescription_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorCouponDescription_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorCouponDescription_reserve(self, n)

    def capacity(self):
        return _analytics.vectorCouponDescription_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorCouponDescription

# Register vectorCouponDescription in _analytics:
_analytics.vectorCouponDescription_swigregister(vectorCouponDescription)

class BondSpecification(BaseSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getCouponSchedule(self):
        return _analytics.BondSpecification_getCouponSchedule(self)

    def __init__(self, *args):
        _analytics.BondSpecification_swiginit(self, _analytics.new_BondSpecification(*args))

    def getNotional(self):
        return _analytics.BondSpecification_getNotional(self)

    def hasFloat(self):
        return _analytics.BondSpecification_hasFloat(self)

    def geFloatingRateUnderlying(self):
        return _analytics.BondSpecification_geFloatingRateUnderlying(self)
    __swig_destroy__ = _analytics.delete_BondSpecification

# Register BondSpecification in _analytics:
_analytics.BondSpecification_swigregister(BondSpecification)

class InflationLinkedBondSpecification(BondSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.InflationLinkedBondSpecification_swiginit(self, _analytics.new_InflationLinkedBondSpecification(*args))

    def getInflationLag(self):
        return _analytics.InflationLinkedBondSpecification_getInflationLag(self)

    def getInflationInterpolation(self):
        return _analytics.InflationLinkedBondSpecification_getInflationInterpolation(self)

    def getInflationIndex(self):
        return _analytics.InflationLinkedBondSpecification_getInflationIndex(self)

    def getReferenceInflationIndexDate(self):
        return _analytics.InflationLinkedBondSpecification_getReferenceInflationIndexDate(self)

    def getDeflationProtection(self):
        return _analytics.InflationLinkedBondSpecification_getDeflationProtection(self)
    __swig_destroy__ = _analytics.delete_InflationLinkedBondSpecification

# Register InflationLinkedBondSpecification in _analytics:
_analytics.InflationLinkedBondSpecification_swigregister(InflationLinkedBondSpecification)

class CallableBondSpecification(BondSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.CallableBondSpecification_swiginit(self, _analytics.new_CallableBondSpecification(*args))
    __swig_destroy__ = _analytics.delete_CallableBondSpecification

# Register CallableBondSpecification in _analytics:
_analytics.CallableBondSpecification_swigregister(CallableBondSpecification)

class BarrierSpecification(BaseSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id, issuer, secLvl, curr, udlId, expiry, barriers, payoff):
        _analytics.BarrierSpecification_swiginit(self, _analytics.new_BarrierSpecification(id, issuer, secLvl, curr, udlId, expiry, barriers, payoff))
    __swig_destroy__ = _analytics.delete_BarrierSpecification

# Register BarrierSpecification in _analytics:
_analytics.BarrierSpecification_swigregister(BarrierSpecification)

class EuropeanVanillaSpecification(BaseSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getUdlId(self):
        r""" return udl id"""
        return _analytics.EuropeanVanillaSpecification_getUdlId(self)

    def getOptionType(self):
        r""" return option type"""
        return _analytics.EuropeanVanillaSpecification_getOptionType(self)

    def getStrike(self):
        r""" return strike"""
        return _analytics.EuropeanVanillaSpecification_getStrike(self)

    def getShareRatio(self):
        r""" return shareRatio"""
        return _analytics.EuropeanVanillaSpecification_getShareRatio(self)

    def __init__(self, *args):
        _analytics.EuropeanVanillaSpecification_swiginit(self, _analytics.new_EuropeanVanillaSpecification(*args))

    def getOptionTypeString(self):
        r""" return option type"""
        return _analytics.EuropeanVanillaSpecification_getOptionTypeString(self)

    def getExpiry(self):
        r""" get the expiry"""
        return _analytics.EuropeanVanillaSpecification_getExpiry(self)
    __swig_destroy__ = _analytics.delete_EuropeanVanillaSpecification

# Register EuropeanVanillaSpecification in _analytics:
_analytics.EuropeanVanillaSpecification_swigregister(EuropeanVanillaSpecification)

class AmericanVanillaSpecification(EuropeanVanillaSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.AmericanVanillaSpecification_swiginit(self, _analytics.new_AmericanVanillaSpecification(*args))

    def convertIntoBarrierSpecification(self, *args):
        return _analytics.AmericanVanillaSpecification_convertIntoBarrierSpecification(self, *args)
    __swig_destroy__ = _analytics.delete_AmericanVanillaSpecification

# Register AmericanVanillaSpecification in _analytics:
_analytics.AmericanVanillaSpecification_swigregister(AmericanVanillaSpecification)

class IrSwapLegSpecification(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _analytics.IrSwapLegSpecification_getType(self)
    __swig_destroy__ = _analytics.delete_IrSwapLegSpecification

# Register IrSwapLegSpecification in _analytics:
_analytics.IrSwapLegSpecification_swigregister(IrSwapLegSpecification)

class IrFixedLegSpecification(IrSwapLegSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rate, notionals, startDates, endDates, payDates, cur, dc):
        _analytics.IrFixedLegSpecification_swiginit(self, _analytics.new_IrFixedLegSpecification(rate, notionals, startDates, endDates, payDates, cur, dc))

    def getType(self):
        return _analytics.IrFixedLegSpecification_getType(self)
    __swig_destroy__ = _analytics.delete_IrFixedLegSpecification

# Register IrFixedLegSpecification in _analytics:
_analytics.IrFixedLegSpecification_swigregister(IrFixedLegSpecification)

class IrFloatLegSpecification(IrSwapLegSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, notionals, resetDates, startDates, endDates, payDates, cur, udlId, dc, spread=0.0):
        _analytics.IrFloatLegSpecification_swiginit(self, _analytics.new_IrFloatLegSpecification(notionals, resetDates, startDates, endDates, payDates, cur, udlId, dc, spread))

    def getType(self):
        return _analytics.IrFloatLegSpecification_getType(self)
    __swig_destroy__ = _analytics.delete_IrFloatLegSpecification

# Register IrFloatLegSpecification in _analytics:
_analytics.IrFloatLegSpecification_swigregister(IrFloatLegSpecification)

class InterestRateSwapSpecification(BaseSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.InterestRateSwapSpecification_swiginit(self, _analytics.new_InterestRateSwapSpecification(*args))

    def getPayLeg(self):
        return _analytics.InterestRateSwapSpecification_getPayLeg(self)

    def getReceiveLeg(self):
        return _analytics.InterestRateSwapSpecification_getReceiveLeg(self)
    __swig_destroy__ = _analytics.delete_InterestRateSwapSpecification

# Register InterestRateSwapSpecification in _analytics:
_analytics.InterestRateSwapSpecification_swigregister(InterestRateSwapSpecification)

class InterestRateBasisSwapSpecification(BaseSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.InterestRateBasisSwapSpecification_swiginit(self, _analytics.new_InterestRateBasisSwapSpecification(*args))
    __swig_destroy__ = _analytics.delete_InterestRateBasisSwapSpecification

# Register InterestRateBasisSwapSpecification in _analytics:
_analytics.InterestRateBasisSwapSpecification_swigregister(InterestRateBasisSwapSpecification)

class RainbowUnderlyingSpec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, basket, underlyingWeights, underlyingCaps, underlyingFloors, weightsBeforeSort, weightsAfterSort, basketLevelCap, basketLevelFloor, additiveOffset, refTypeStr, refTimeAggTypeStr, referenceDates, floatingStrike, timeAggTypeStr, fixingDates, typeStr):
        _analytics.RainbowUnderlyingSpec_swiginit(self, _analytics.new_RainbowUnderlyingSpec(basket, underlyingWeights, underlyingCaps, underlyingFloors, weightsBeforeSort, weightsAfterSort, basketLevelCap, basketLevelFloor, additiveOffset, refTypeStr, refTimeAggTypeStr, referenceDates, floatingStrike, timeAggTypeStr, fixingDates, typeStr))

    @staticmethod
    def createWorstOf(*args):
        return _analytics.RainbowUnderlyingSpec_createWorstOf(*args)
    __swig_destroy__ = _analytics.delete_RainbowUnderlyingSpec

# Register RainbowUnderlyingSpec in _analytics:
_analytics.RainbowUnderlyingSpec_swigregister(RainbowUnderlyingSpec)

def RainbowUnderlyingSpec_createWorstOf(*args):
    return _analytics.RainbowUnderlyingSpec_createWorstOf(*args)

class RainbowBarrierSpec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.RainbowBarrierSpec_swiginit(self, _analytics.new_RainbowBarrierSpec(*args))
    __swig_destroy__ = _analytics.delete_RainbowBarrierSpec

# Register RainbowBarrierSpec in _analytics:
_analytics.RainbowBarrierSpec_swigregister(RainbowBarrierSpec)

class vectorRainbowBarrierSpec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorRainbowBarrierSpec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorRainbowBarrierSpec___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorRainbowBarrierSpec___bool__(self)

    def __len__(self):
        return _analytics.vectorRainbowBarrierSpec___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorRainbowBarrierSpec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorRainbowBarrierSpec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorRainbowBarrierSpec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorRainbowBarrierSpec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorRainbowBarrierSpec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorRainbowBarrierSpec___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorRainbowBarrierSpec_pop(self)

    def append(self, x):
        return _analytics.vectorRainbowBarrierSpec_append(self, x)

    def empty(self):
        return _analytics.vectorRainbowBarrierSpec_empty(self)

    def size(self):
        return _analytics.vectorRainbowBarrierSpec_size(self)

    def swap(self, v):
        return _analytics.vectorRainbowBarrierSpec_swap(self, v)

    def begin(self):
        return _analytics.vectorRainbowBarrierSpec_begin(self)

    def end(self):
        return _analytics.vectorRainbowBarrierSpec_end(self)

    def rbegin(self):
        return _analytics.vectorRainbowBarrierSpec_rbegin(self)

    def rend(self):
        return _analytics.vectorRainbowBarrierSpec_rend(self)

    def clear(self):
        return _analytics.vectorRainbowBarrierSpec_clear(self)

    def get_allocator(self):
        return _analytics.vectorRainbowBarrierSpec_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorRainbowBarrierSpec_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorRainbowBarrierSpec_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorRainbowBarrierSpec_swiginit(self, _analytics.new_vectorRainbowBarrierSpec(*args))

    def push_back(self, x):
        return _analytics.vectorRainbowBarrierSpec_push_back(self, x)

    def front(self):
        return _analytics.vectorRainbowBarrierSpec_front(self)

    def back(self):
        return _analytics.vectorRainbowBarrierSpec_back(self)

    def assign(self, n, x):
        return _analytics.vectorRainbowBarrierSpec_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorRainbowBarrierSpec_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorRainbowBarrierSpec_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorRainbowBarrierSpec_reserve(self, n)

    def capacity(self):
        return _analytics.vectorRainbowBarrierSpec_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorRainbowBarrierSpec

# Register vectorRainbowBarrierSpec in _analytics:
_analytics.vectorRainbowBarrierSpec_swigregister(vectorRainbowBarrierSpec)

class vectorRainbowUdlSpec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorRainbowUdlSpec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorRainbowUdlSpec___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorRainbowUdlSpec___bool__(self)

    def __len__(self):
        return _analytics.vectorRainbowUdlSpec___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorRainbowUdlSpec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorRainbowUdlSpec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorRainbowUdlSpec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorRainbowUdlSpec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorRainbowUdlSpec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorRainbowUdlSpec___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorRainbowUdlSpec_pop(self)

    def append(self, x):
        return _analytics.vectorRainbowUdlSpec_append(self, x)

    def empty(self):
        return _analytics.vectorRainbowUdlSpec_empty(self)

    def size(self):
        return _analytics.vectorRainbowUdlSpec_size(self)

    def swap(self, v):
        return _analytics.vectorRainbowUdlSpec_swap(self, v)

    def begin(self):
        return _analytics.vectorRainbowUdlSpec_begin(self)

    def end(self):
        return _analytics.vectorRainbowUdlSpec_end(self)

    def rbegin(self):
        return _analytics.vectorRainbowUdlSpec_rbegin(self)

    def rend(self):
        return _analytics.vectorRainbowUdlSpec_rend(self)

    def clear(self):
        return _analytics.vectorRainbowUdlSpec_clear(self)

    def get_allocator(self):
        return _analytics.vectorRainbowUdlSpec_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorRainbowUdlSpec_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorRainbowUdlSpec_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorRainbowUdlSpec_swiginit(self, _analytics.new_vectorRainbowUdlSpec(*args))

    def push_back(self, x):
        return _analytics.vectorRainbowUdlSpec_push_back(self, x)

    def front(self):
        return _analytics.vectorRainbowUdlSpec_front(self)

    def back(self):
        return _analytics.vectorRainbowUdlSpec_back(self)

    def assign(self, n, x):
        return _analytics.vectorRainbowUdlSpec_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorRainbowUdlSpec_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorRainbowUdlSpec_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorRainbowUdlSpec_reserve(self, n)

    def capacity(self):
        return _analytics.vectorRainbowUdlSpec_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorRainbowUdlSpec

# Register vectorRainbowUdlSpec in _analytics:
_analytics.vectorRainbowUdlSpec_swigregister(vectorRainbowUdlSpec)

class LocalVolMonteCarloSpecification(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _analytics.delete_LocalVolMonteCarloSpecification

# Register LocalVolMonteCarloSpecification in _analytics:
_analytics.LocalVolMonteCarloSpecification_swigregister(LocalVolMonteCarloSpecification)

class RainbowSpecification(BaseSpecification, LocalVolMonteCarloSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.RainbowSpecification_swiginit(self, _analytics.new_RainbowSpecification(*args))
    __swig_destroy__ = _analytics.delete_RainbowSpecification

# Register RainbowSpecification in _analytics:
_analytics.RainbowSpecification_swigregister(RainbowSpecification)

class MultiMemoryExpressSpecification(BaseSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.MultiMemoryExpressSpecification_swiginit(self, _analytics.new_MultiMemoryExpressSpecification(*args))

    def convertIntoRainbowSpecification(self, *args):
        return _analytics.MultiMemoryExpressSpecification_convertIntoRainbowSpecification(self, *args)
    __swig_destroy__ = _analytics.delete_MultiMemoryExpressSpecification

# Register MultiMemoryExpressSpecification in _analytics:
_analytics.MultiMemoryExpressSpecification_swigregister(MultiMemoryExpressSpecification)

class MemoryExpressSpecification(BaseSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.MemoryExpressSpecification_swiginit(self, _analytics.new_MemoryExpressSpecification(*args))

    def convertIntoRainbowSpecification(self, *args):
        return _analytics.MemoryExpressSpecification_convertIntoRainbowSpecification(self, *args)

    def convertIntoComboSpecification(self, *args):
        return _analytics.MemoryExpressSpecification_convertIntoComboSpecification(self, *args)
    __swig_destroy__ = _analytics.delete_MemoryExpressSpecification

# Register MemoryExpressSpecification in _analytics:
_analytics.MemoryExpressSpecification_swigregister(MemoryExpressSpecification)

class DepositSpecification(BaseSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.DepositSpecification_swiginit(self, _analytics.new_DepositSpecification(*args))
    __swig_destroy__ = _analytics.delete_DepositSpecification

# Register DepositSpecification in _analytics:
_analytics.DepositSpecification_swigregister(DepositSpecification)

class InterestRateFutureSpecification(BaseSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.InterestRateFutureSpecification_swiginit(self, _analytics.new_InterestRateFutureSpecification(*args))
    __swig_destroy__ = _analytics.delete_InterestRateFutureSpecification

# Register InterestRateFutureSpecification in _analytics:
_analytics.InterestRateFutureSpecification_swigregister(InterestRateFutureSpecification)

class ExpressPlusSpecification(BaseSpecification, LocalVolMonteCarloSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.ExpressPlusSpecification_swiginit(self, _analytics.new_ExpressPlusSpecification(*args))

    def convertIntoRainbowSpecification(self, *args):
        return _analytics.ExpressPlusSpecification_convertIntoRainbowSpecification(self, *args)
    __swig_destroy__ = _analytics.delete_ExpressPlusSpecification

# Register ExpressPlusSpecification in _analytics:
_analytics.ExpressPlusSpecification_swigregister(ExpressPlusSpecification)

class AsianVanillaSpecification(BaseSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.AsianVanillaSpecification_swiginit(self, _analytics.new_AsianVanillaSpecification())
    __swig_destroy__ = _analytics.delete_AsianVanillaSpecification

# Register AsianVanillaSpecification in _analytics:
_analytics.AsianVanillaSpecification_swigregister(AsianVanillaSpecification)

class RiskControlStrategy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         default constructor

        |

        *Overload 2:*
         constructor :type targetV: float
        :param targetV: target volatility :type volFactor: float
        :param volFactor: factor to adjust the volatility (252.0 should be used if risk control index daily rebalanced) :type nVolDays: std::vector< int,std::allocator< int > >
        :param nVolDays: number of days used to compute the different volatilities whose maximum is used to detrmine new weights :type maxWeight: float
        :param maxWeight: maximum weight allowed (leveraging) :type updateThreshold: float
        :param updateThreshold: threshold (between 0 and 1 ) determining if there is really a rebalancing (only if abs(1-newWeight/oldWeight) > updateThreshold) :type excessReturn: boolean
        :param excessReturn: true->excess return index
        """
        _analytics.RiskControlStrategy_swiginit(self, _analytics.new_RiskControlStrategy(*args))
    __swig_destroy__ = _analytics.delete_RiskControlStrategy

# Register RiskControlStrategy in _analytics:
_analytics.RiskControlStrategy_swigregister(RiskControlStrategy)

class AsianRiskControlSpecification(AsianVanillaSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.AsianRiskControlSpecification_swiginit(self, _analytics.new_AsianRiskControlSpecification(*args))
    __swig_destroy__ = _analytics.delete_AsianRiskControlSpecification

# Register AsianRiskControlSpecification in _analytics:
_analytics.AsianRiskControlSpecification_swigregister(AsianRiskControlSpecification)

class ProjectToCorrelation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def projectToCorrelationMatrix(A, rowIndex, colIndex, maxIter=100, tol=1e-5, minEigen=0.01):
        return _analytics.ProjectToCorrelation_projectToCorrelationMatrix(A, rowIndex, colIndex, maxIter, tol, minEigen)

    def __init__(self):
        _analytics.ProjectToCorrelation_swiginit(self, _analytics.new_ProjectToCorrelation())
    __swig_destroy__ = _analytics.delete_ProjectToCorrelation

# Register ProjectToCorrelation in _analytics:
_analytics.ProjectToCorrelation_swigregister(ProjectToCorrelation)

def ProjectToCorrelation_projectToCorrelationMatrix(A, rowIndex, colIndex, maxIter=100, tol=1e-5, minEigen=0.01):
    return _analytics.ProjectToCorrelation_projectToCorrelationMatrix(A, rowIndex, colIndex, maxIter, tol, minEigen)

class InterpolationMonotoneSpline1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def compute(self, x):
        return _analytics.InterpolationMonotoneSpline1D_compute(self, x)

    def __init__(self, xValues, yValues):
        _analytics.InterpolationMonotoneSpline1D_swiginit(self, _analytics.new_InterpolationMonotoneSpline1D(xValues, yValues))
    __swig_destroy__ = _analytics.delete_InterpolationMonotoneSpline1D

# Register InterpolationMonotoneSpline1D in _analytics:
_analytics.InterpolationMonotoneSpline1D_swigregister(InterpolationMonotoneSpline1D)

class InterpolationLinear1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def compute(self, x):
        return _analytics.InterpolationLinear1D_compute(self, x)

    def __init__(self, xValues, yValues):
        _analytics.InterpolationLinear1D_swiginit(self, _analytics.new_InterpolationLinear1D(xValues, yValues))
    __swig_destroy__ = _analytics.delete_InterpolationLinear1D

# Register InterpolationLinear1D in _analytics:
_analytics.InterpolationLinear1D_swigregister(InterpolationLinear1D)

class InterpolationNaturalSpline1D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def compute(self, x):
        return _analytics.InterpolationNaturalSpline1D_compute(self, x)

    def __init__(self, xValues, yValues):
        _analytics.InterpolationNaturalSpline1D_swiginit(self, _analytics.new_InterpolationNaturalSpline1D(xValues, yValues))
    __swig_destroy__ = _analytics.delete_InterpolationNaturalSpline1D

# Register InterpolationNaturalSpline1D in _analytics:
_analytics.InterpolationNaturalSpline1D_swigregister(InterpolationNaturalSpline1D)

class LevenbergMarquardtParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.LevenbergMarquardtParameter_swiginit(self, _analytics.new_LevenbergMarquardtParameter(*args))
    maxIter = property(_analytics.LevenbergMarquardtParameter_maxIter_get, _analytics.LevenbergMarquardtParameter_maxIter_set)
    fTol = property(_analytics.LevenbergMarquardtParameter_fTol_get, _analytics.LevenbergMarquardtParameter_fTol_set)
    xTol = property(_analytics.LevenbergMarquardtParameter_xTol_get, _analytics.LevenbergMarquardtParameter_xTol_set)
    gTol = property(_analytics.LevenbergMarquardtParameter_gTol_get, _analytics.LevenbergMarquardtParameter_gTol_set)
    epsfcn = property(_analytics.LevenbergMarquardtParameter_epsfcn_get, _analytics.LevenbergMarquardtParameter_epsfcn_set)
    maxFEval = property(_analytics.LevenbergMarquardtParameter_maxFEval_get, _analytics.LevenbergMarquardtParameter_maxFEval_set)
    __swig_destroy__ = _analytics.delete_LevenbergMarquardtParameter

# Register LevenbergMarquardtParameter in _analytics:
_analytics.LevenbergMarquardtParameter_swigregister(LevenbergMarquardtParameter)

class RegressionBaseParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _analytics.delete_RegressionBaseParameter

# Register RegressionBaseParameter in _analytics:
_analytics.RegressionBaseParameter_swigregister(RegressionBaseParameter)

class PolynomialRegression1DParameter(RegressionBaseParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.PolynomialRegression1DParameter_swiginit(self, _analytics.new_PolynomialRegression1DParameter(*args))
    degree = property(_analytics.PolynomialRegression1DParameter_degree_get, _analytics.PolynomialRegression1DParameter_degree_set, doc=r""" numer of polynomial degree used for regression""")
    __swig_destroy__ = _analytics.delete_PolynomialRegression1DParameter

# Register PolynomialRegression1DParameter in _analytics:
_analytics.PolynomialRegression1DParameter_swigregister(PolynomialRegression1DParameter)

class RBFRegressionParameter(RegressionBaseParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    includeLinearFunctions = property(_analytics.RBFRegressionParameter_includeLinearFunctions_get, _analytics.RBFRegressionParameter_includeLinearFunctions_set, doc=r""" if true, linear functions are added to the constant and the RBF""")
    nCenters = property(_analytics.RBFRegressionParameter_nCenters_get, _analytics.RBFRegressionParameter_nCenters_set, doc=r""" number of centers for radial basis functions""")
    scalingFactor = property(_analytics.RBFRegressionParameter_scalingFactor_get, _analytics.RBFRegressionParameter_scalingFactor_set, doc=r""" scaling factor""")

    def __init__(self):
        _analytics.RBFRegressionParameter_swiginit(self, _analytics.new_RBFRegressionParameter())
    __swig_destroy__ = _analytics.delete_RBFRegressionParameter

# Register RBFRegressionParameter in _analytics:
_analytics.RBFRegressionParameter_swigregister(RBFRegressionParameter)

class PiecewiseLinearRegression1DParameter(RegressionBaseParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.PiecewiseLinearRegression1DParameter_swiginit(self, _analytics.new_PiecewiseLinearRegression1DParameter(*args))
    smoothnessPenalty = property(_analytics.PiecewiseLinearRegression1DParameter_smoothnessPenalty_get, _analytics.PiecewiseLinearRegression1DParameter_smoothnessPenalty_set, doc=r""" numer of polynomial degree used for regression""")
    nGridPoints = property(_analytics.PiecewiseLinearRegression1DParameter_nGridPoints_get, _analytics.PiecewiseLinearRegression1DParameter_nGridPoints_set)
    __swig_destroy__ = _analytics.delete_PiecewiseLinearRegression1DParameter

# Register PiecewiseLinearRegression1DParameter in _analytics:
_analytics.PiecewiseLinearRegression1DParameter_swigregister(PiecewiseLinearRegression1DParameter)

class ModelToMktObjectSpecification(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId):
        _analytics.ModelToMktObjectSpecification_swiginit(self, _analytics.new_ModelToMktObjectSpecification(objId))
    __swig_destroy__ = _analytics.delete_ModelToMktObjectSpecification

# Register ModelToMktObjectSpecification in _analytics:
_analytics.ModelToMktObjectSpecification_swigregister(ModelToMktObjectSpecification)

class DiscountCurveGenerationDesription(ModelToMktObjectSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, dayCounter, daysToMaturity):
        _analytics.DiscountCurveGenerationDesription_swiginit(self, _analytics.new_DiscountCurveGenerationDesription(objId, dayCounter, daysToMaturity))
    __swig_destroy__ = _analytics.delete_DiscountCurveGenerationDesription

# Register DiscountCurveGenerationDesription in _analytics:
_analytics.DiscountCurveGenerationDesription_swigregister(DiscountCurveGenerationDesription)

class QuoteGenerationDesription(ModelToMktObjectSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refKey):
        _analytics.QuoteGenerationDesription_swiginit(self, _analytics.new_QuoteGenerationDesription(objId, refKey))
    __swig_destroy__ = _analytics.delete_QuoteGenerationDesription

# Register QuoteGenerationDesription in _analytics:
_analytics.QuoteGenerationDesription_swigregister(QuoteGenerationDesription)

class BaseModel(BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getObjectId(self):
        return _analytics.BaseModel_getObjectId(self)

    def getParameters(self, x):
        return _analytics.BaseModel_getParameters(self, x)

    def setParameters(self, x):
        return _analytics.BaseModel_setParameters(self, x)

    def getParameterDescripion(self):
        return _analytics.BaseModel_getParameterDescripion(self)

    def getClassName(self):
        return _analytics.BaseModel_getClassName(self)

    def getModelType(self):
        return _analytics.BaseModel_getModelType(self)

    @staticmethod
    def load(filename):
        return _analytics.BaseModel_load(filename)

    @staticmethod
    def save(filename, data):
        return _analytics.BaseModel_save(filename, data)

    def __init__(self):
        _analytics.BaseModel_swiginit(self, _analytics.new_BaseModel())
    __swig_destroy__ = _analytics.delete_BaseModel

# Register BaseModel in _analytics:
_analytics.BaseModel_swigregister(BaseModel)

def BaseModel_load(filename):
    return _analytics.BaseModel_load(filename)

def BaseModel_save(filename, data):
    return _analytics.BaseModel_save(filename, data)

class CorrelationModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _analytics.delete_CorrelationModel

# Register CorrelationModel in _analytics:
_analytics.CorrelationModel_swigregister(CorrelationModel)

class CorrelationModelLocalPairwise(CorrelationModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def createProcessRandomNumberGenerator(self):
        return _analytics.CorrelationModelLocalPairwise_createProcessRandomNumberGenerator(self)

    def simulateDividends(self):
        return _analytics.CorrelationModelLocalPairwise_simulateDividends(self)

    def __init__(self, baseCorrelation, highCorrelation, moneynessScales, moneynessGrid):
        _analytics.CorrelationModelLocalPairwise_swiginit(self, _analytics.new_CorrelationModelLocalPairwise(baseCorrelation, highCorrelation, moneynessScales, moneynessGrid))

    def addLocalCorrelationFunction(self, t, localCorrFunction):
        return _analytics.CorrelationModelLocalPairwise_addLocalCorrelationFunction(self, t, localCorrFunction)
    __swig_destroy__ = _analytics.delete_CorrelationModelLocalPairwise

# Register CorrelationModelLocalPairwise in _analytics:
_analytics.CorrelationModelLocalPairwise_swigregister(CorrelationModelLocalPairwise)

class RatesModel(BaseModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getObjectId(self):
        return _analytics.RatesModel_getObjectId(self)

    def calcZeroBond(self, maturity, refDate, state=None):
        return _analytics.RatesModel_calcZeroBond(self, maturity, refDate, state)
    __swig_destroy__ = _analytics.delete_RatesModel

# Register RatesModel in _analytics:
_analytics.RatesModel_swigregister(RatesModel)

class EquityFxModel(BaseModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, modelT):
        _analytics.EquityFxModel_swiginit(self, _analytics.new_EquityFxModel(objId, refDate, modelT))
    __swig_destroy__ = _analytics.delete_EquityFxModel

# Register EquityFxModel in _analytics:
_analytics.EquityFxModel_swigregister(EquityFxModel)

class BuehlerModel(EquityFxModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, baseModel, fwd, qtoCorr=0, fxVol=0):
        _analytics.BuehlerModel_swiginit(self, _analytics.new_BuehlerModel(objId, refDate, baseModel, fwd, qtoCorr, fxVol))
    __swig_destroy__ = _analytics.delete_BuehlerModel

# Register BuehlerModel in _analytics:
_analytics.BuehlerModel_swigregister(BuehlerModel)

class HestonModel(BaseModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, initialSpot, shortVariance, longVariance, speedOfMeanReversion, volOfVar, correlation):
        _analytics.HestonModel_swiginit(self, _analytics.new_HestonModel(objId, refDate, initialSpot, shortVariance, longVariance, speedOfMeanReversion, volOfVar, correlation))

    def calcEuropeanCall(self, *args):
        return _analytics.HestonModel_calcEuropeanCall(self, *args)
    __swig_destroy__ = _analytics.delete_HestonModel

# Register HestonModel in _analytics:
_analytics.HestonModel_swigregister(HestonModel)

class ScottChesneyModel(BaseModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, initialSpot, v0, _lambda, theta, eta, rho):
        _analytics.ScottChesneyModel_swiginit(self, _analytics.new_ScottChesneyModel(objId, refDate, initialSpot, v0, _lambda, theta, eta, rho))
    __swig_destroy__ = _analytics.delete_ScottChesneyModel

# Register ScottChesneyModel in _analytics:
_analytics.ScottChesneyModel_swigregister(ScottChesneyModel)

class ShortRateModel1D(RatesModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getObjectId(self):
        return _analytics.ShortRateModel1D_getObjectId(self)

    def calcZeroBond(self, maturity, refDate, state=None):
        return _analytics.ShortRateModel1D_calcZeroBond(self, maturity, refDate, state)
    __swig_destroy__ = _analytics.delete_ShortRateModel1D

# Register ShortRateModel1D in _analytics:
_analytics.ShortRateModel1D_swigregister(ShortRateModel1D)

class CIRModel(ShortRateModel1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, modelId, refDate, kappa, theta, sigma, r0):
        _analytics.CIRModel_swiginit(self, _analytics.new_CIRModel(modelId, refDate, kappa, theta, sigma, r0))
    __swig_destroy__ = _analytics.delete_CIRModel

# Register CIRModel in _analytics:
_analytics.CIRModel_swigregister(CIRModel)

class HullWhiteModel(ShortRateModel1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.HullWhiteModel_swiginit(self, _analytics.new_HullWhiteModel(*args))
    __swig_destroy__ = _analytics.delete_HullWhiteModel

# Register HullWhiteModel in _analytics:
_analytics.HullWhiteModel_swigregister(HullWhiteModel)

class ExponentialOrnsteinUhlenbeck(BaseModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, modelId, refDate, currentSpot, timesMRRate, mrRate, timesMRLevel, mrLevel, timesVol, vols, isAdditive):
        _analytics.ExponentialOrnsteinUhlenbeck_swiginit(self, _analytics.new_ExponentialOrnsteinUhlenbeck(modelId, refDate, currentSpot, timesMRRate, mrRate, timesMRLevel, mrLevel, timesVol, vols, isAdditive))
    __swig_destroy__ = _analytics.delete_ExponentialOrnsteinUhlenbeck

# Register ExponentialOrnsteinUhlenbeck in _analytics:
_analytics.ExponentialOrnsteinUhlenbeck_swigregister(ExponentialOrnsteinUhlenbeck)

class CalibrationStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, refDate, models):
        _analytics.CalibrationStorage_swiginit(self, _analytics.new_CalibrationStorage(refDate, models))

    def add(self, udl, model):
        return _analytics.CalibrationStorage_add(self, udl, model)

    def get(self, udl, model):
        return _analytics.CalibrationStorage_get(self, udl, model)
    __swig_destroy__ = _analytics.delete_CalibrationStorage

# Register CalibrationStorage in _analytics:
_analytics.CalibrationStorage_swigregister(CalibrationStorage)

class StochLocalVolFunctionCalibratorParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pgParam = property(_analytics.StochLocalVolFunctionCalibratorParameter_pgParam_get, _analytics.StochLocalVolFunctionCalibratorParameter_pgParam_set)
    regressionParam = property(_analytics.StochLocalVolFunctionCalibratorParameter_regressionParam_get, _analytics.StochLocalVolFunctionCalibratorParameter_regressionParam_set)
    maxLocalVol = property(_analytics.StochLocalVolFunctionCalibratorParameter_maxLocalVol_get, _analytics.StochLocalVolFunctionCalibratorParameter_maxLocalVol_set)

    def __init__(self):
        _analytics.StochLocalVolFunctionCalibratorParameter_swiginit(self, _analytics.new_StochLocalVolFunctionCalibratorParameter())
    __swig_destroy__ = _analytics.delete_StochLocalVolFunctionCalibratorParameter

# Register StochLocalVolFunctionCalibratorParameter in _analytics:
_analytics.StochLocalVolFunctionCalibratorParameter_swigregister(StochLocalVolFunctionCalibratorParameter)

class StochLocalVolFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def eval(self, timeGrid, spotGrid):
        return _analytics.StochLocalVolFunction_eval(self, timeGrid, spotGrid)
    __swig_destroy__ = _analytics.delete_StochLocalVolFunction

# Register StochLocalVolFunction in _analytics:
_analytics.StochLocalVolFunction_swigregister(StochLocalVolFunction)

class StochLocalVolFunctionCalibrator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def calibrate(refDate, param, tG, model, vol):
        return _analytics.StochLocalVolFunctionCalibrator_calibrate(refDate, param, tG, model, vol)

    def __init__(self):
        _analytics.StochLocalVolFunctionCalibrator_swiginit(self, _analytics.new_StochLocalVolFunctionCalibrator())
    __swig_destroy__ = _analytics.delete_StochLocalVolFunctionCalibrator

# Register StochLocalVolFunctionCalibrator in _analytics:
_analytics.StochLocalVolFunctionCalibrator_swigregister(StochLocalVolFunctionCalibrator)

def StochLocalVolFunctionCalibrator_calibrate(refDate, param, tG, model, vol):
    return _analytics.StochLocalVolFunctionCalibrator_calibrate(refDate, param, tG, model, vol)

class ModelLab(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model, refDate):
        _analytics.ModelLab_swiginit(self, _analytics.new_ModelLab(model, refDate))

    def simulate(self, simTimes, nSims, nTimesStepsPerYear, maxNumThreads, seed=42):
        return _analytics.ModelLab_simulate(self, simTimes, nSims, nTimesStepsPerYear, maxNumThreads, seed)

    def nSimTimePoints(self):
        return _analytics.ModelLab_nSimTimePoints(self)

    def getTimeSlice(self, spot, timePoint, variable):
        return _analytics.ModelLab_getTimeSlice(self, spot, timePoint, variable)

    def getPath(self, result, variable, nSim):
        return _analytics.ModelLab_getPath(self, result, variable, nSim)

    def setFromSimulatedValues(self, model, timePoint, numSim):
        return _analytics.ModelLab_setFromSimulatedValues(self, model, timePoint, numSim)

    def getNumSims(self):
        return _analytics.ModelLab_getNumSims(self)
    __swig_destroy__ = _analytics.delete_ModelLab

# Register ModelLab in _analytics:
_analytics.ModelLab_swigregister(ModelLab)

class StochasticLocalVolatility(BaseModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, stochVol, StochLocalVolFunction):
        _analytics.StochasticLocalVolatility_swiginit(self, _analytics.new_StochasticLocalVolatility(stochVol, StochLocalVolFunction))

    def getStochLocalVolFunction(self):
        return _analytics.StochasticLocalVolatility_getStochLocalVolFunction(self)

    def getStochasticVolModel(self):
        return _analytics.StochasticLocalVolatility_getStochasticVolModel(self)
    __swig_destroy__ = _analytics.delete_StochasticLocalVolatility

# Register StochasticLocalVolatility in _analytics:
_analytics.StochasticLocalVolatility_swigregister(StochasticLocalVolatility)

class BuehlerLocalVolModel(BaseModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, refDate, vol, qtoCorr=0, fxVol=0):
        _analytics.BuehlerLocalVolModel_swiginit(self, _analytics.new_BuehlerLocalVolModel(objId, refDate, vol, qtoCorr, fxVol))
    __swig_destroy__ = _analytics.delete_BuehlerLocalVolModel

# Register BuehlerLocalVolModel in _analytics:
_analytics.BuehlerLocalVolModel_swigregister(BuehlerLocalVolModel)


def registerSerialization(tmp):
    return _analytics.registerSerialization(tmp)

def getMaxDouble(arg1):
    return _analytics.getMaxDouble(arg1)
class CashflowSlices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cashflowSlices = property(_analytics.CashflowSlices_cashflowSlices_get, _analytics.CashflowSlices_cashflowSlices_set)

    def getFutureExposure(self):
        return _analytics.CashflowSlices_getFutureExposure(self)

    def __init__(self):
        _analytics.CashflowSlices_swiginit(self, _analytics.new_CashflowSlices())
    __swig_destroy__ = _analytics.delete_CashflowSlices

# Register CashflowSlices in _analytics:
_analytics.CashflowSlices_swigregister(CashflowSlices)

class PricingResults(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getPrice(self):
        return _analytics.PricingResults_getPrice(self)

    def getPriceStdError(self):
        return _analytics.PricingResults_getPriceStdError(self)

    def getMacaulayDuration(self):
        return _analytics.PricingResults_getMacaulayDuration(self)

    def getRho(self, yc):
        return _analytics.PricingResults_getRho(self, yc)

    def getCleanPrice(self):
        return _analytics.PricingResults_getCleanPrice(self)

    def getForward(self, key):
        return _analytics.PricingResults_getForward(self, key)

    def getTheta(self):
        return _analytics.PricingResults_getTheta(self)

    def getYTM(self):
        return _analytics.PricingResults_getYTM(self)

    def getConvexity(self):
        return _analytics.PricingResults_getConvexity(self)

    def getInsId(self):
        return _analytics.PricingResults_getInsId(self)

    def getCashflowSlices(self):
        return _analytics.PricingResults_getCashflowSlices(self)

    def getDelta1D(self):
        return _analytics.PricingResults_getDelta1D(self)

    def getGamma1D(self):
        return _analytics.PricingResults_getGamma1D(self)

    def getVega1D(self):
        return _analytics.PricingResults_getVega1D(self)

    def getVanna1D(self):
        return _analytics.PricingResults_getVanna1D(self)

    def getDeltas(self):
        return _analytics.PricingResults_getDeltas(self)

    def getVegas(self):
        return _analytics.PricingResults_getVegas(self)

    def getSplineX(self, x):
        return _analytics.PricingResults_getSplineX(self, x)

    def getSplineY(self, y):
        return _analytics.PricingResults_getSplineY(self, y)

    def getSpot(self, *args):
        return _analytics.PricingResults_getSpot(self, *args)

    @staticmethod
    def load(filename):
        return _analytics.PricingResults_load(filename)

    @staticmethod
    def save(filename, data):
        return _analytics.PricingResults_save(filename, data)

    def __init__(self):
        _analytics.PricingResults_swiginit(self, _analytics.new_PricingResults())
    __swig_destroy__ = _analytics.delete_PricingResults

# Register PricingResults in _analytics:
_analytics.PricingResults_swigregister(PricingResults)

def PricingResults_load(filename):
    return _analytics.PricingResults_load(filename)

def PricingResults_save(filename, data):
    return _analytics.PricingResults_save(filename, data)

class PricingRequest(BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.PricingRequest_swiginit(self, _analytics.new_PricingRequest())

    def getObjectType(self):
        return _analytics.PricingRequest_getObjectType(self)

    def setGridSizes(self, gridsizes):
        return _analytics.PricingRequest_setGridSizes(self, gridsizes)

    def setDeltaGamma(self, delta):
        return _analytics.PricingRequest_setDeltaGamma(self, delta)

    def setTheta(self, theta):
        return _analytics.PricingRequest_setTheta(self, theta)

    def setVega(self, vega):
        return _analytics.PricingRequest_setVega(self, vega)

    def setVanna(self, vanna):
        return _analytics.PricingRequest_setVanna(self, vanna)

    def setMacaulayDuration(self, macaulay):
        return _analytics.PricingRequest_setMacaulayDuration(self, macaulay)

    def setZSpread(self, zSpread):
        return _analytics.PricingRequest_setZSpread(self, zSpread)

    def setYTM(self, ytm):
        return _analytics.PricingRequest_setYTM(self, ytm)

    def setConvexity(self, convexity):
        return _analytics.PricingRequest_setConvexity(self, convexity)

    def setRho(self, rho):
        return _analytics.PricingRequest_setRho(self, rho)

    def setCleanPrice(self, clean):
        return _analytics.PricingRequest_setCleanPrice(self, clean)

    def setVegaScale(self, vegaScale):
        return _analytics.PricingRequest_setVegaScale(self, vegaScale)

    def setRhoScale(self, rhoScale):
        return _analytics.PricingRequest_setRhoScale(self, rhoScale)

    def setThetaScale(self, thetaScale):
        return _analytics.PricingRequest_setThetaScale(self, thetaScale)

    def setSpline(self, spline):
        return _analytics.PricingRequest_setSpline(self, spline)

    def getSpline(self):
        return _analytics.PricingRequest_getSpline(self)

    def setCashflowTimes(self, cashflowTimes):
        return _analytics.PricingRequest_setCashflowTimes(self, cashflowTimes)

    def setPricingData(self, pData):
        return _analytics.PricingRequest_setPricingData(self, pData)

    def getClassName(self):
        return _analytics.PricingRequest_getClassName(self)
    __swig_destroy__ = _analytics.delete_PricingRequest

# Register PricingRequest in _analytics:
_analytics.PricingRequest_swigregister(PricingRequest)

class BasePricingData(Clonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassName(self):
        return _analytics.BasePricingData_getClassName(self)
    valDate = property(_analytics.BasePricingData_valDate_get, _analytics.BasePricingData_valDate_set, doc=r""" valuation date""")
    pricer = property(_analytics.BasePricingData_pricer_get, _analytics.BasePricingData_pricer_set, doc=r""" name of pricer used to price the product for the given data""")
    pricingRequest = property(_analytics.BasePricingData_pricingRequest_get, _analytics.BasePricingData_pricingRequest_set, doc=r""" pricing request""")

    def validate(self):
        return _analytics.BasePricingData_validate(self)

    @staticmethod
    def load(filename):
        return _analytics.BasePricingData_load(filename)

    @staticmethod
    def save(filename, data):
        return _analytics.BasePricingData_save(filename, data)
    __swig_destroy__ = _analytics.delete_BasePricingData

# Register BasePricingData in _analytics:
_analytics.BasePricingData_swigregister(BasePricingData)

def BasePricingData_load(filename):
    return _analytics.BasePricingData_load(filename)

def BasePricingData_save(filename, data):
    return _analytics.BasePricingData_save(filename, data)

class SpecificationManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, specInterface):
        r""" constructor"""
        _analytics.SpecificationManager_swiginit(self, _analytics.new_SpecificationManager(specInterface))

    def addSpecification(self, spec):
        r""" add a specification"""
        return _analytics.SpecificationManager_addSpecification(self, spec)

    def prepareObjects(self, ids, calcDate):
        return _analytics.SpecificationManager_prepareObjects(self, ids, calcDate)

    def prepareAllObjects(self, ids, earliestCalcDate, latestCalcDate):
        return _analytics.SpecificationManager_prepareAllObjects(self, ids, earliestCalcDate, latestCalcDate)

    def getSpecification(self, specKey, calcDate):
        r""" get routine, throws on error"""
        return _analytics.SpecificationManager_getSpecification(self, specKey, calcDate)

    def getSpecifications(self, specs, wknRegEx, udlRegEx, typeRegEx, issuerRegEx):
        r""" get routine with regular expressions"""
        return _analytics.SpecificationManager_getSpecifications(self, specs, wknRegEx, udlRegEx, typeRegEx, issuerRegEx)
    __swig_destroy__ = _analytics.delete_SpecificationManager

# Register SpecificationManager in _analytics:
_analytics.SpecificationManager_swigregister(SpecificationManager)


def price(pricingData):
    return _analytics.price(pricingData)

def getPricingData(spec, valDate, mktData, pricingRequest, calibStore, param):
    return _analytics.getPricingData(spec, valDate, mktData, pricingRequest, calibStore, param)
class BondPricer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def computeZSpread(valDate, spec, dsc, price, isCleanPrice=True, maxIter=100):
        return _analytics.BondPricer_computeZSpread(valDate, spec, dsc, price, isCleanPrice, maxIter)

    @staticmethod
    def price(*args):
        return _analytics.BondPricer_price(*args)

    def __init__(self):
        _analytics.BondPricer_swiginit(self, _analytics.new_BondPricer())
    __swig_destroy__ = _analytics.delete_BondPricer

# Register BondPricer in _analytics:
_analytics.BondPricer_swigregister(BondPricer)

def BondPricer_computeZSpread(valDate, spec, dsc, price, isCleanPrice=True, maxIter=100):
    return _analytics.BondPricer_computeZSpread(valDate, spec, dsc, price, isCleanPrice, maxIter)

def BondPricer_price(*args):
    return _analytics.BondPricer_price(*args)

class InflationLinkedBondPricer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def price(results, valDate, spec, dsc, pricingRequest, inflFwd, inflationFixingReference1, inflationFixingReference2, inflationFixing1, inflationFixing2, fwd=0, fixing=0):
        return _analytics.InflationLinkedBondPricer_price(results, valDate, spec, dsc, pricingRequest, inflFwd, inflationFixingReference1, inflationFixingReference2, inflationFixing1, inflationFixing2, fwd, fixing)

    def __init__(self):
        _analytics.InflationLinkedBondPricer_swiginit(self, _analytics.new_InflationLinkedBondPricer())
    __swig_destroy__ = _analytics.delete_InflationLinkedBondPricer

# Register InflationLinkedBondPricer in _analytics:
_analytics.InflationLinkedBondPricer_swigregister(InflationLinkedBondPricer)

def InflationLinkedBondPricer_price(results, valDate, spec, dsc, pricingRequest, inflFwd, inflationFixingReference1, inflationFixingReference2, inflationFixing1, inflationFixing2, fwd=0, fixing=0):
    return _analytics.InflationLinkedBondPricer_price(results, valDate, spec, dsc, pricingRequest, inflFwd, inflationFixingReference1, inflationFixingReference2, inflationFixing1, inflationFixing2, fwd, fixing)

class CallableBondPdePricer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.CallableBondPdePricer_swiginit(self, _analytics.new_CallableBondPdePricer())
    __swig_destroy__ = _analytics.delete_CallableBondPdePricer

# Register CallableBondPdePricer in _analytics:
_analytics.CallableBondPdePricer_swigregister(CallableBondPdePricer)

class BaseParameter(BaseObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getClassName(self):
        return _analytics.BaseParameter_getClassName(self)
    __swig_destroy__ = _analytics.delete_BaseParameter

# Register BaseParameter in _analytics:
_analytics.BaseParameter_swigregister(BaseParameter)

class PricingParameter(BaseParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.PricingParameter_swiginit(self, _analytics.new_PricingParameter(*args))

    def getObjectType(self):
        return _analytics.PricingParameter_getObjectType(self)
    spotShift = property(_analytics.PricingParameter_spotShift_get, _analytics.PricingParameter_spotShift_set, doc=r""" Percentage shift of spot used to determine delta, gamma and vanna by Finite Difference. The default is 0.005""")
    volShift = property(_analytics.PricingParameter_volShift_get, _analytics.PricingParameter_volShift_set, doc=r""" vol shift to calculate vega/volga/vanna by Finite Difference. The default is 0.001""")
    numDaysTimeShift = property(_analytics.PricingParameter_numDaysTimeShift_get, _analytics.PricingParameter_numDaysTimeShift_set, doc=r""" time shift (in days) to calculate theta by Finite Difference. The default is 1""")
    rateShift = property(_analytics.PricingParameter_rateShift_get, _analytics.PricingParameter_rateShift_set, doc=r""" rate shift to calculate rho by Finite Difference. The default is 0.0001 (1bp)""")
    spotMinSpline = property(_analytics.PricingParameter_spotMinSpline_get, _analytics.PricingParameter_spotMinSpline_set, doc=r""" minimum spot for the pricing spline (as percentage from current spot)""")
    spotMaxSpline = property(_analytics.PricingParameter_spotMaxSpline_get, _analytics.PricingParameter_spotMaxSpline_set, doc=r""" maximum spot for the pricing spline (as percentage from current spot)""")
    nSplinePoints = property(_analytics.PricingParameter_nSplinePoints_get, _analytics.PricingParameter_nSplinePoints_set, doc=r""" this parameter determines the number of points used for the spline""")

    def getClassName(self):
        return _analytics.PricingParameter_getClassName(self)
    __swig_destroy__ = _analytics.delete_PricingParameter

# Register PricingParameter in _analytics:
_analytics.PricingParameter_swigregister(PricingParameter)

class PathGeneratorParameter(BaseParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.PathGeneratorParameter_swiginit(self, _analytics.new_PathGeneratorParameter())
    numberOfSimulations = property(_analytics.PathGeneratorParameter_numberOfSimulations_get, _analytics.PathGeneratorParameter_numberOfSimulations_set)
    numberOfTimeStepsPerYear = property(_analytics.PathGeneratorParameter_numberOfTimeStepsPerYear_get, _analytics.PathGeneratorParameter_numberOfTimeStepsPerYear_set)
    maxNumThreads = property(_analytics.PathGeneratorParameter_maxNumThreads_get, _analytics.PathGeneratorParameter_maxNumThreads_set)
    numberOfCheckpoints = property(_analytics.PathGeneratorParameter_numberOfCheckpoints_get, _analytics.PathGeneratorParameter_numberOfCheckpoints_set)
    includeSimTimesInCheckpoints = property(_analytics.PathGeneratorParameter_includeSimTimesInCheckpoints_get, _analytics.PathGeneratorParameter_includeSimTimesInCheckpoints_set)
    rngSeed = property(_analytics.PathGeneratorParameter_rngSeed_get, _analytics.PathGeneratorParameter_rngSeed_set)

    def getObjectType(self):
        return _analytics.PathGeneratorParameter_getObjectType(self)

    def getClassName(self):
        return _analytics.PathGeneratorParameter_getClassName(self)
    __swig_destroy__ = _analytics.delete_PathGeneratorParameter

# Register PathGeneratorParameter in _analytics:
_analytics.PathGeneratorParameter_swigregister(PathGeneratorParameter)

class BondPricingParameter(BaseParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.BondPricingParameter_swiginit(self, _analytics.new_BondPricingParameter(*args))

    def getObjectType(self):
        return _analytics.BondPricingParameter_getObjectType(self)
    useJLT = property(_analytics.BondPricingParameter_useJLT_get, _analytics.BondPricingParameter_useJLT_set)

    def getClassName(self):
        return _analytics.BondPricingParameter_getClassName(self)
    __swig_destroy__ = _analytics.delete_BondPricingParameter

# Register BondPricingParameter in _analytics:
_analytics.BondPricingParameter_swigregister(BondPricingParameter)

class CallableBondPdePricingParameter(BaseParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.CallableBondPdePricingParameter_swiginit(self, _analytics.new_CallableBondPdePricingParameter(*args))

    def getObjectType(self):
        return _analytics.CallableBondPdePricingParameter_getObjectType(self)
    nTimeStepsPerYear = property(_analytics.CallableBondPdePricingParameter_nTimeStepsPerYear_get, _analytics.CallableBondPdePricingParameter_nTimeStepsPerYear_set)
    nSpotSteps = property(_analytics.CallableBondPdePricingParameter_nSpotSteps_get, _analytics.CallableBondPdePricingParameter_nSpotSteps_set)
    model = property(_analytics.CallableBondPdePricingParameter_model_get, _analytics.CallableBondPdePricingParameter_model_set)
    includeTransition = property(_analytics.CallableBondPdePricingParameter_includeTransition_get, _analytics.CallableBondPdePricingParameter_includeTransition_set)

    def getClassName(self):
        return _analytics.CallableBondPdePricingParameter_getClassName(self)
    __swig_destroy__ = _analytics.delete_CallableBondPdePricingParameter

# Register CallableBondPdePricingParameter in _analytics:
_analytics.CallableBondPdePricingParameter_swigregister(CallableBondPdePricingParameter)

class PdePricingParameter(PricingParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.PdePricingParameter_swiginit(self, _analytics.new_PdePricingParameter(*args))

    def getObjectType(self):
        return _analytics.PdePricingParameter_getObjectType(self)
    nTimeStepsPerYear = property(_analytics.PdePricingParameter_nTimeStepsPerYear_get, _analytics.PdePricingParameter_nTimeStepsPerYear_set)
    nStdDev = property(_analytics.PdePricingParameter_nStdDev_get, _analytics.PdePricingParameter_nStdDev_set)
    nStdDevLimit = property(_analytics.PdePricingParameter_nStdDevLimit_get, _analytics.PdePricingParameter_nStdDevLimit_set)
    nSpotSteps = property(_analytics.PdePricingParameter_nSpotSteps_get, _analytics.PdePricingParameter_nSpotSteps_set)
    nEulerStepsAfterSingularity = property(_analytics.PdePricingParameter_nEulerStepsAfterSingularity_get, _analytics.PdePricingParameter_nEulerStepsAfterSingularity_set)
    minEulerDomainAfterSingularity = property(_analytics.PdePricingParameter_minEulerDomainAfterSingularity_get, _analytics.PdePricingParameter_minEulerDomainAfterSingularity_set)
    exceptionBarrierNotInGrid = property(_analytics.PdePricingParameter_exceptionBarrierNotInGrid_get, _analytics.PdePricingParameter_exceptionBarrierNotInGrid_set)
    splineLambda = property(_analytics.PdePricingParameter_splineLambda_get, _analytics.PdePricingParameter_splineLambda_set)

    def getClassName(self):
        return _analytics.PdePricingParameter_getClassName(self)
    __swig_destroy__ = _analytics.delete_PdePricingParameter

# Register PdePricingParameter in _analytics:
_analytics.PdePricingParameter_swigregister(PdePricingParameter)

class MonteCarloPricingParameter(PricingParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.MonteCarloPricingParameter_swiginit(self, _analytics.new_MonteCarloPricingParameter(*args))

    def getObjectType(self):
        return _analytics.MonteCarloPricingParameter_getObjectType(self)

    def getClassName(self):
        return _analytics.MonteCarloPricingParameter_getClassName(self)
    mcParam = property(_analytics.MonteCarloPricingParameter_mcParam_get, _analytics.MonteCarloPricingParameter_mcParam_set)
    __swig_destroy__ = _analytics.delete_MonteCarloPricingParameter

# Register MonteCarloPricingParameter in _analytics:
_analytics.MonteCarloPricingParameter_swigregister(MonteCarloPricingParameter)

class InterestRateSwapPricingParameter(PricingParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.InterestRateSwapPricingParameter_swiginit(self, _analytics.new_InterestRateSwapPricingParameter(*args))

    def getObjectType(self):
        return _analytics.InterestRateSwapPricingParameter_getObjectType(self)

    def getClassName(self):
        return _analytics.InterestRateSwapPricingParameter_getClassName(self)
    fixingGracePeriod = property(_analytics.InterestRateSwapPricingParameter_fixingGracePeriod_get, _analytics.InterestRateSwapPricingParameter_fixingGracePeriod_set)
    __swig_destroy__ = _analytics.delete_InterestRateSwapPricingParameter

# Register InterestRateSwapPricingParameter in _analytics:
_analytics.InterestRateSwapPricingParameter_swigregister(InterestRateSwapPricingParameter)


def setLogLevel(level):
    return _analytics.setLogLevel(level)

def setLogFile(level):
    return _analytics.setLogFile(level)

def calcEuropeanCallPrice(strike, maturity, discountFactor, forward, volatility):
    r"""
     compute the price of a European call :type strike: float
    :param strike: strike K :type forward: float
    :param forward: forward F :type maturity: float
    :param maturity: time to maturity as year-fraction w.r.t. vol-DayCount :type volatility: float
    :param volatility: BS-implied volatility :type discountFactor: float
    :param discountFactor: discount Factor for the maturity of the option
    """
    return _analytics.calcEuropeanCallPrice(strike, maturity, discountFactor, forward, volatility)

def calcEuropeanCallDelta(normalizedStrike, maturity, discountFactor, normalizedForward, volatility):
    r"""
     compute the delta of a European call :type normalizedStrike: float
    :param normalizedStrike: normalizedStrike = K/S :type normalizedForward: float
    :param normalizedForward: normalizedForward = F/S :type maturity: float
    :param maturity: time to maturity as year-fraction w.r.t. vol-DayCount :type volatility: float
    :param volatility: BS-implied volatility :type discountFactor: float
    :param discountFactor: discount Factor for the maturity of the option
    """
    return _analytics.calcEuropeanCallDelta(normalizedStrike, maturity, discountFactor, normalizedForward, volatility)

def calcEuropeanPutPrice(strike, maturity, discountFactor, forward, volatility):
    r"""
     compute the price of a European put :type strike: float
    :param strike: strike K :type forward: float
    :param forward: forward F :type maturity: float
    :param maturity: time to maturity as year-fraction w.r.t. vol-DayCount :type volatility: float
    :param volatility: BS-implied volatility :type discountFactor: float
    :param discountFactor: discount Factor for the maturity of the option
    """
    return _analytics.calcEuropeanPutPrice(strike, maturity, discountFactor, forward, volatility)

def calcEuropeanPutDelta(normalizedStrike, maturity, discountFactor, normalizedForward, volatility):
    r"""
     compute the delta of a European put :type normalizedStrike: float
    :param normalizedStrike: normalizedStrike = K/S :type normalizedForward: float
    :param normalizedForward: normalizedForward = F/S :type maturity: float
    :param maturity: time to maturity as year-fraction w.r.t. vol-DayCount :type volatility: float
    :param volatility: BS-implied volatility :type discountFactor: float
    :param discountFactor: discount Factor for the maturity of the option
    """
    return _analytics.calcEuropeanPutDelta(normalizedStrike, maturity, discountFactor, normalizedForward, volatility)

def calcEuropeanDigitalPutPrice(strike, maturity, discountFactor, forward, volatility, dkvolatility):
    r"""
     compute the price of a discounted European digital put Note, if discountFactor=1 this is the value of the marginal distribution function for the given strike :type strike: float
    :param strike: strike K :type forward: float
    :param forward: forward F :type maturity: float
    :param maturity: time to maturity as year-fraction w.r.t. vol-DayCount :type volatility: float
    :param volatility: BS-implied volatility :type discountFactor: float
    :param discountFactor: discount Factor for the maturity of the option :type dkvolatility: float
    :param dkvolatility: derivative of the volatility smile w.r.t. strike K in K: dSigma / dK (K)
    """
    return _analytics.calcEuropeanDigitalPutPrice(strike, maturity, discountFactor, forward, volatility, dkvolatility)

def calcEuropeanDigitalCallPrice(strike, maturity, discountFactor, forward, volatility, dkvolatility):
    r"""
     compute the price of a discounted European digital call :type strike: float
    :param strike: strike K :type forward: float
    :param forward: forward F :type maturity: float
    :param maturity: time to maturity as year-fraction w.r.t. vol-DayCount :type volatility: float
    :param volatility: BS-implied volatility :type discountFactor: float
    :param discountFactor: discount Factor for the maturity of the option :type dkvolatility: float
    :param dkvolatility: derivative of the volatility smile w.r.t. strike K in K: dSigma / dK (K)
    """
    return _analytics.calcEuropeanDigitalCallPrice(strike, maturity, discountFactor, forward, volatility, dkvolatility)

def calcImpliedVol(price, strike, maturity, discountFactor, forward, optionType, tol):
    return _analytics.calcImpliedVol(price, strike, maturity, discountFactor, forward, optionType, tol)

def computeRealStrike(strikeX, nonDefFwd, discFutureCashDiv):
    return _analytics.computeRealStrike(strikeX, nonDefFwd, discFutureCashDiv)

def computeXStrike(strike, nonDefFwd, discFutureCashDiv):
    return _analytics.computeXStrike(strike, nonDefFwd, discFutureCashDiv)

def computeBuehlerImpliedVolfromBS(valDate, T, bsStrike, volDC, fwd, dc, volBS):
    return _analytics.computeBuehlerImpliedVolfromBS(valDate, T, bsStrike, volDC, fwd, dc, volBS)
class InjectionDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    minVolumes = property(_analytics.InjectionDescription_minVolumes_get, _analytics.InjectionDescription_minVolumes_set)
    min = property(_analytics.InjectionDescription_min_get, _analytics.InjectionDescription_min_set)
    maxVolumes = property(_analytics.InjectionDescription_maxVolumes_get, _analytics.InjectionDescription_maxVolumes_set)
    max = property(_analytics.InjectionDescription_max_get, _analytics.InjectionDescription_max_set)
    costVolumes = property(_analytics.InjectionDescription_costVolumes_get, _analytics.InjectionDescription_costVolumes_set)
    cost = property(_analytics.InjectionDescription_cost_get, _analytics.InjectionDescription_cost_set)

    def __init__(self):
        _analytics.InjectionDescription_swiginit(self, _analytics.new_InjectionDescription())
    __swig_destroy__ = _analytics.delete_InjectionDescription

# Register InjectionDescription in _analytics:
_analytics.InjectionDescription_swigregister(InjectionDescription)

class GasStorageSpecification(BaseSpecification):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.GasStorageSpecification_swiginit(self, _analytics.new_GasStorageSpecification(*args))

    def append(self, startDate, minVol, maxVol, injection, withdrawal):
        return _analytics.GasStorageSpecification_append(self, startDate, minVol, maxVol, injection, withdrawal)
    __swig_destroy__ = _analytics.delete_GasStorageSpecification

# Register GasStorageSpecification in _analytics:
_analytics.GasStorageSpecification_swigregister(GasStorageSpecification)

class GasStorageIntrinsicPricer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def priceIntrinsic(intrinsicDispatch, valDate, spec, fwd, nVolumePoints, nInjections, bidAskTradedVolume, bidAskSpread, transactionTradedVolume, transactionCost):
        return _analytics.GasStorageIntrinsicPricer_priceIntrinsic(intrinsicDispatch, valDate, spec, fwd, nVolumePoints, nInjections, bidAskTradedVolume, bidAskSpread, transactionTradedVolume, transactionCost)

    def setupVolumeGrid(self, volumes, minIndex, maxIndex, storage, nPoints, nTimePoints):
        return _analytics.GasStorageIntrinsicPricer_setupVolumeGrid(self, volumes, minIndex, maxIndex, storage, nPoints, nTimePoints)

    def __init__(self):
        _analytics.GasStorageIntrinsicPricer_swiginit(self, _analytics.new_GasStorageIntrinsicPricer())
    __swig_destroy__ = _analytics.delete_GasStorageIntrinsicPricer

# Register GasStorageIntrinsicPricer in _analytics:
_analytics.GasStorageIntrinsicPricer_swigregister(GasStorageIntrinsicPricer)

def GasStorageIntrinsicPricer_priceIntrinsic(intrinsicDispatch, valDate, spec, fwd, nVolumePoints, nInjections, bidAskTradedVolume, bidAskSpread, transactionTradedVolume, transactionCost):
    return _analytics.GasStorageIntrinsicPricer_priceIntrinsic(intrinsicDispatch, valDate, spec, fwd, nVolumePoints, nInjections, bidAskTradedVolume, bidAskSpread, transactionTradedVolume, transactionCost)

class GasStorageLSMCPricer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def price(dispatch, valDate, spec, model, fwd, bidAskTradedVolume, bidAskSpread, transactionTradedVolume, transactionCost, param, massLevels):
        return _analytics.GasStorageLSMCPricer_price(dispatch, valDate, spec, model, fwd, bidAskTradedVolume, bidAskSpread, transactionTradedVolume, transactionCost, param, massLevels)

    def __init__(self):
        _analytics.GasStorageLSMCPricer_swiginit(self, _analytics.new_GasStorageLSMCPricer())
    __swig_destroy__ = _analytics.delete_GasStorageLSMCPricer

# Register GasStorageLSMCPricer in _analytics:
_analytics.GasStorageLSMCPricer_swigregister(GasStorageLSMCPricer)

def GasStorageLSMCPricer_price(dispatch, valDate, spec, model, fwd, bidAskTradedVolume, bidAskSpread, transactionTradedVolume, transactionCost, param, massLevels):
    return _analytics.GasStorageLSMCPricer_price(dispatch, valDate, spec, model, fwd, bidAskTradedVolume, bidAskSpread, transactionTradedVolume, transactionCost, param, massLevels)

class GasStoragePerfectForesightPricer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def pricePerfectForesight(dispatch, valDate, spec, model, fwd, nVolumePoints, nInjections, bidAskTradedVolume, bidAskSpread, transactionTradedVolume, transactionCost, param):
        return _analytics.GasStoragePerfectForesightPricer_pricePerfectForesight(dispatch, valDate, spec, model, fwd, nVolumePoints, nInjections, bidAskTradedVolume, bidAskSpread, transactionTradedVolume, transactionCost, param)

    def __init__(self):
        _analytics.GasStoragePerfectForesightPricer_swiginit(self, _analytics.new_GasStoragePerfectForesightPricer())
    __swig_destroy__ = _analytics.delete_GasStoragePerfectForesightPricer

# Register GasStoragePerfectForesightPricer in _analytics:
_analytics.GasStoragePerfectForesightPricer_swigregister(GasStoragePerfectForesightPricer)

def GasStoragePerfectForesightPricer_pricePerfectForesight(dispatch, valDate, spec, model, fwd, nVolumePoints, nInjections, bidAskTradedVolume, bidAskSpread, transactionTradedVolume, transactionCost, param):
    return _analytics.GasStoragePerfectForesightPricer_pricePerfectForesight(dispatch, valDate, spec, model, fwd, nVolumePoints, nInjections, bidAskTradedVolume, bidAskSpread, transactionTradedVolume, transactionCost, param)

class vectorBasePricingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorBasePricingData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorBasePricingData___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorBasePricingData___bool__(self)

    def __len__(self):
        return _analytics.vectorBasePricingData___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorBasePricingData___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorBasePricingData___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorBasePricingData___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorBasePricingData___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorBasePricingData___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorBasePricingData___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorBasePricingData_pop(self)

    def append(self, x):
        return _analytics.vectorBasePricingData_append(self, x)

    def empty(self):
        return _analytics.vectorBasePricingData_empty(self)

    def size(self):
        return _analytics.vectorBasePricingData_size(self)

    def swap(self, v):
        return _analytics.vectorBasePricingData_swap(self, v)

    def begin(self):
        return _analytics.vectorBasePricingData_begin(self)

    def end(self):
        return _analytics.vectorBasePricingData_end(self)

    def rbegin(self):
        return _analytics.vectorBasePricingData_rbegin(self)

    def rend(self):
        return _analytics.vectorBasePricingData_rend(self)

    def clear(self):
        return _analytics.vectorBasePricingData_clear(self)

    def get_allocator(self):
        return _analytics.vectorBasePricingData_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorBasePricingData_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorBasePricingData_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorBasePricingData_swiginit(self, _analytics.new_vectorBasePricingData(*args))

    def push_back(self, x):
        return _analytics.vectorBasePricingData_push_back(self, x)

    def front(self):
        return _analytics.vectorBasePricingData_front(self)

    def back(self):
        return _analytics.vectorBasePricingData_back(self)

    def assign(self, n, x):
        return _analytics.vectorBasePricingData_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorBasePricingData_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorBasePricingData_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorBasePricingData_reserve(self, n)

    def capacity(self):
        return _analytics.vectorBasePricingData_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorBasePricingData

# Register vectorBasePricingData in _analytics:
_analytics.vectorBasePricingData_swigregister(vectorBasePricingData)

class vectorLocalVolPdePricingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorLocalVolPdePricingData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorLocalVolPdePricingData___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorLocalVolPdePricingData___bool__(self)

    def __len__(self):
        return _analytics.vectorLocalVolPdePricingData___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorLocalVolPdePricingData___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorLocalVolPdePricingData___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorLocalVolPdePricingData___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorLocalVolPdePricingData___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorLocalVolPdePricingData___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorLocalVolPdePricingData___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorLocalVolPdePricingData_pop(self)

    def append(self, x):
        return _analytics.vectorLocalVolPdePricingData_append(self, x)

    def empty(self):
        return _analytics.vectorLocalVolPdePricingData_empty(self)

    def size(self):
        return _analytics.vectorLocalVolPdePricingData_size(self)

    def swap(self, v):
        return _analytics.vectorLocalVolPdePricingData_swap(self, v)

    def begin(self):
        return _analytics.vectorLocalVolPdePricingData_begin(self)

    def end(self):
        return _analytics.vectorLocalVolPdePricingData_end(self)

    def rbegin(self):
        return _analytics.vectorLocalVolPdePricingData_rbegin(self)

    def rend(self):
        return _analytics.vectorLocalVolPdePricingData_rend(self)

    def clear(self):
        return _analytics.vectorLocalVolPdePricingData_clear(self)

    def get_allocator(self):
        return _analytics.vectorLocalVolPdePricingData_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorLocalVolPdePricingData_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorLocalVolPdePricingData_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorLocalVolPdePricingData_swiginit(self, _analytics.new_vectorLocalVolPdePricingData(*args))

    def push_back(self, x):
        return _analytics.vectorLocalVolPdePricingData_push_back(self, x)

    def front(self):
        return _analytics.vectorLocalVolPdePricingData_front(self)

    def back(self):
        return _analytics.vectorLocalVolPdePricingData_back(self)

    def assign(self, n, x):
        return _analytics.vectorLocalVolPdePricingData_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorLocalVolPdePricingData_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorLocalVolPdePricingData_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorLocalVolPdePricingData_reserve(self, n)

    def capacity(self):
        return _analytics.vectorLocalVolPdePricingData_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorLocalVolPdePricingData

# Register vectorLocalVolPdePricingData in _analytics:
_analytics.vectorLocalVolPdePricingData_swigregister(vectorLocalVolPdePricingData)

class vectorBlack76PricingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorBlack76PricingData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorBlack76PricingData___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorBlack76PricingData___bool__(self)

    def __len__(self):
        return _analytics.vectorBlack76PricingData___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorBlack76PricingData___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorBlack76PricingData___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorBlack76PricingData___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorBlack76PricingData___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorBlack76PricingData___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorBlack76PricingData___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorBlack76PricingData_pop(self)

    def append(self, x):
        return _analytics.vectorBlack76PricingData_append(self, x)

    def empty(self):
        return _analytics.vectorBlack76PricingData_empty(self)

    def size(self):
        return _analytics.vectorBlack76PricingData_size(self)

    def swap(self, v):
        return _analytics.vectorBlack76PricingData_swap(self, v)

    def begin(self):
        return _analytics.vectorBlack76PricingData_begin(self)

    def end(self):
        return _analytics.vectorBlack76PricingData_end(self)

    def rbegin(self):
        return _analytics.vectorBlack76PricingData_rbegin(self)

    def rend(self):
        return _analytics.vectorBlack76PricingData_rend(self)

    def clear(self):
        return _analytics.vectorBlack76PricingData_clear(self)

    def get_allocator(self):
        return _analytics.vectorBlack76PricingData_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorBlack76PricingData_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorBlack76PricingData_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorBlack76PricingData_swiginit(self, _analytics.new_vectorBlack76PricingData(*args))

    def push_back(self, x):
        return _analytics.vectorBlack76PricingData_push_back(self, x)

    def front(self):
        return _analytics.vectorBlack76PricingData_front(self)

    def back(self):
        return _analytics.vectorBlack76PricingData_back(self)

    def assign(self, n, x):
        return _analytics.vectorBlack76PricingData_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorBlack76PricingData_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorBlack76PricingData_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorBlack76PricingData_reserve(self, n)

    def capacity(self):
        return _analytics.vectorBlack76PricingData_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorBlack76PricingData

# Register vectorBlack76PricingData in _analytics:
_analytics.vectorBlack76PricingData_swigregister(vectorBlack76PricingData)

class LocalVolPdePricingData(BasePricingData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_analytics.LocalVolPdePricingData_spec_get, _analytics.LocalVolPdePricingData_spec_set)
    vol = property(_analytics.LocalVolPdePricingData_vol_get, _analytics.LocalVolPdePricingData_vol_set)
    dsc = property(_analytics.LocalVolPdePricingData_dsc_get, _analytics.LocalVolPdePricingData_dsc_set)
    param = property(_analytics.LocalVolPdePricingData_param_get, _analytics.LocalVolPdePricingData_param_set)
    fxVol = property(_analytics.LocalVolPdePricingData_fxVol_get, _analytics.LocalVolPdePricingData_fxVol_set)
    qtoCorr = property(_analytics.LocalVolPdePricingData_qtoCorr_get, _analytics.LocalVolPdePricingData_qtoCorr_set)

    @staticmethod
    def load(filename):
        return _analytics.LocalVolPdePricingData_load(filename)

    @staticmethod
    def create_from(p):
        return _analytics.LocalVolPdePricingData_create_from(p)

    def __init__(self):
        _analytics.LocalVolPdePricingData_swiginit(self, _analytics.new_LocalVolPdePricingData())
    __swig_destroy__ = _analytics.delete_LocalVolPdePricingData

# Register LocalVolPdePricingData in _analytics:
_analytics.LocalVolPdePricingData_swigregister(LocalVolPdePricingData)

def LocalVolPdePricingData_load(filename):
    return _analytics.LocalVolPdePricingData_load(filename)

def LocalVolPdePricingData_create_from(p):
    return _analytics.LocalVolPdePricingData_create_from(p)

class ComboPricingData(BasePricingData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_analytics.ComboPricingData_spec_get, _analytics.ComboPricingData_spec_set)
    pricingData = property(_analytics.ComboPricingData_pricingData_get, _analytics.ComboPricingData_pricingData_set, doc=r""" the pricing data for each combo constituent""")

    def addPricingData(self, prData):
        return _analytics.ComboPricingData_addPricingData(self, prData)

    def __init__(self, *args):
        _analytics.ComboPricingData_swiginit(self, _analytics.new_ComboPricingData(*args))

    @staticmethod
    def create_from(p):
        return _analytics.ComboPricingData_create_from(p)

    def getLocalVolPdePricingData(self):
        return _analytics.ComboPricingData_getLocalVolPdePricingData(self)
    __swig_destroy__ = _analytics.delete_ComboPricingData

# Register ComboPricingData in _analytics:
_analytics.ComboPricingData_swigregister(ComboPricingData)

def ComboPricingData_create_from(p):
    return _analytics.ComboPricingData_create_from(p)

class AsianRiskControlPricingData(BasePricingData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_analytics.AsianRiskControlPricingData_spec_get, _analytics.AsianRiskControlPricingData_spec_set)
    vol = property(_analytics.AsianRiskControlPricingData_vol_get, _analytics.AsianRiskControlPricingData_vol_set)
    dsc = property(_analytics.AsianRiskControlPricingData_dsc_get, _analytics.AsianRiskControlPricingData_dsc_set)
    model = property(_analytics.AsianRiskControlPricingData_model_get, _analytics.AsianRiskControlPricingData_model_set)
    param = property(_analytics.AsianRiskControlPricingData_param_get, _analytics.AsianRiskControlPricingData_param_set)
    fxVol = property(_analytics.AsianRiskControlPricingData_fxVol_get, _analytics.AsianRiskControlPricingData_fxVol_set)
    qtoCorr = property(_analytics.AsianRiskControlPricingData_qtoCorr_get, _analytics.AsianRiskControlPricingData_qtoCorr_set)
    spotFixings = property(_analytics.AsianRiskControlPricingData_spotFixings_get, _analytics.AsianRiskControlPricingData_spotFixings_set)
    indexFixings = property(_analytics.AsianRiskControlPricingData_indexFixings_get, _analytics.AsianRiskControlPricingData_indexFixings_set)
    lastWeight = property(_analytics.AsianRiskControlPricingData_lastWeight_get, _analytics.AsianRiskControlPricingData_lastWeight_set)
    currentRCI = property(_analytics.AsianRiskControlPricingData_currentRCI_get, _analytics.AsianRiskControlPricingData_currentRCI_set)

    def __init__(self):
        _analytics.AsianRiskControlPricingData_swiginit(self, _analytics.new_AsianRiskControlPricingData())
    __swig_destroy__ = _analytics.delete_AsianRiskControlPricingData

# Register AsianRiskControlPricingData in _analytics:
_analytics.AsianRiskControlPricingData_swigregister(AsianRiskControlPricingData)

class InterestRateSwapLegPricingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_analytics.InterestRateSwapLegPricingData_spec_get, _analytics.InterestRateSwapLegPricingData_spec_set)
    discountCurve = property(_analytics.InterestRateSwapLegPricingData_discountCurve_get, _analytics.InterestRateSwapLegPricingData_discountCurve_set)
    fxRate = property(_analytics.InterestRateSwapLegPricingData_fxRate_get, _analytics.InterestRateSwapLegPricingData_fxRate_set)
    weight = property(_analytics.InterestRateSwapLegPricingData_weight_get, _analytics.InterestRateSwapLegPricingData_weight_set)

    def __init__(self):
        _analytics.InterestRateSwapLegPricingData_swiginit(self, _analytics.new_InterestRateSwapLegPricingData())
    __swig_destroy__ = _analytics.delete_InterestRateSwapLegPricingData

# Register InterestRateSwapLegPricingData in _analytics:
_analytics.InterestRateSwapLegPricingData_swigregister(InterestRateSwapLegPricingData)

class InterestRateSwapFloatLegPricingData(InterestRateSwapLegPricingData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fixingCurve = property(_analytics.InterestRateSwapFloatLegPricingData_fixingCurve_get, _analytics.InterestRateSwapFloatLegPricingData_fixingCurve_set)

    def __init__(self):
        _analytics.InterestRateSwapFloatLegPricingData_swiginit(self, _analytics.new_InterestRateSwapFloatLegPricingData())
    __swig_destroy__ = _analytics.delete_InterestRateSwapFloatLegPricingData

# Register InterestRateSwapFloatLegPricingData in _analytics:
_analytics.InterestRateSwapFloatLegPricingData_swigregister(InterestRateSwapFloatLegPricingData)

class InterestRateSwapPricingData(BasePricingData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    legPricingData = property(_analytics.InterestRateSwapPricingData_legPricingData_get, _analytics.InterestRateSwapPricingData_legPricingData_set)
    param = property(_analytics.InterestRateSwapPricingData_param_get, _analytics.InterestRateSwapPricingData_param_set)
    swapCurr = property(_analytics.InterestRateSwapPricingData_swapCurr_get, _analytics.InterestRateSwapPricingData_swapCurr_set)

    def setCurr(self, c):
        return _analytics.InterestRateSwapPricingData_setCurr(self, c)

    def addLegData(self, legData):
        return _analytics.InterestRateSwapPricingData_addLegData(self, legData)

    def __init__(self):
        _analytics.InterestRateSwapPricingData_swiginit(self, _analytics.new_InterestRateSwapPricingData())
    __swig_destroy__ = _analytics.delete_InterestRateSwapPricingData

# Register InterestRateSwapPricingData in _analytics:
_analytics.InterestRateSwapPricingData_swigregister(InterestRateSwapPricingData)

class BondPricingData(BasePricingData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_analytics.BondPricingData_spec_get, _analytics.BondPricingData_spec_set)
    discountCurve = property(_analytics.BondPricingData_discountCurve_get, _analytics.BondPricingData_discountCurve_set)
    fixingCurve = property(_analytics.BondPricingData_fixingCurve_get, _analytics.BondPricingData_fixingCurve_set)
    sc = property(_analytics.BondPricingData_sc_get, _analytics.BondPricingData_sc_set)
    recoveryCurve = property(_analytics.BondPricingData_recoveryCurve_get, _analytics.BondPricingData_recoveryCurve_set)
    param = property(_analytics.BondPricingData_param_get, _analytics.BondPricingData_param_set)
    pastFixing = property(_analytics.BondPricingData_pastFixing_get, _analytics.BondPricingData_pastFixing_set)

    def __init__(self):
        _analytics.BondPricingData_swiginit(self, _analytics.new_BondPricingData())
    __swig_destroy__ = _analytics.delete_BondPricingData

# Register BondPricingData in _analytics:
_analytics.BondPricingData_swigregister(BondPricingData)

class InflationLinkedBondPricingData(BondPricingData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    inflationFwdCurve = property(_analytics.InflationLinkedBondPricingData_inflationFwdCurve_get, _analytics.InflationLinkedBondPricingData_inflationFwdCurve_set, doc=r""" inflation index forward curve""")
    inflationFixingReference1 = property(_analytics.InflationLinkedBondPricingData_inflationFixingReference1_get, _analytics.InflationLinkedBondPricingData_inflationFixingReference1_set, doc=r""" fixed inflation of month for reference index""")
    inflationFixingReference2 = property(_analytics.InflationLinkedBondPricingData_inflationFixingReference2_get, _analytics.InflationLinkedBondPricingData_inflationFixingReference2_set, doc=r""" fixed inflation of month following the reference month (for interpolation)""")
    inflationFixing1 = property(_analytics.InflationLinkedBondPricingData_inflationFixing1_get, _analytics.InflationLinkedBondPricingData_inflationFixing1_set, doc=r""" fixed inflation""")
    inflationFixing2 = property(_analytics.InflationLinkedBondPricingData_inflationFixing2_get, _analytics.InflationLinkedBondPricingData_inflationFixing2_set, doc=r""" fixed inflation of following month needed for interpolation""")

    def __init__(self):
        _analytics.InflationLinkedBondPricingData_swiginit(self, _analytics.new_InflationLinkedBondPricingData())
    __swig_destroy__ = _analytics.delete_InflationLinkedBondPricingData

# Register InflationLinkedBondPricingData in _analytics:
_analytics.InflationLinkedBondPricingData_swigregister(InflationLinkedBondPricingData)

class CallableBondPdePricingData(BasePricingData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_analytics.CallableBondPdePricingData_spec_get, _analytics.CallableBondPdePricingData_spec_set)
    riskfreeCurve = property(_analytics.CallableBondPdePricingData_riskfreeCurve_get, _analytics.CallableBondPdePricingData_riskfreeCurve_set)
    model = property(_analytics.CallableBondPdePricingData_model_get, _analytics.CallableBondPdePricingData_model_set)
    recovery = property(_analytics.CallableBondPdePricingData_recovery_get, _analytics.CallableBondPdePricingData_recovery_set)
    sc = property(_analytics.CallableBondPdePricingData_sc_get, _analytics.CallableBondPdePricingData_sc_set)
    param = property(_analytics.CallableBondPdePricingData_param_get, _analytics.CallableBondPdePricingData_param_set)
    issuerRating = property(_analytics.CallableBondPdePricingData_issuerRating_get, _analytics.CallableBondPdePricingData_issuerRating_set)
    transition = property(_analytics.CallableBondPdePricingData_transition_get, _analytics.CallableBondPdePricingData_transition_set)
    pastFixing = property(_analytics.CallableBondPdePricingData_pastFixing_get, _analytics.CallableBondPdePricingData_pastFixing_set)

    def __init__(self):
        _analytics.CallableBondPdePricingData_swiginit(self, _analytics.new_CallableBondPdePricingData())
    __swig_destroy__ = _analytics.delete_CallableBondPdePricingData

# Register CallableBondPdePricingData in _analytics:
_analytics.CallableBondPdePricingData_swigregister(CallableBondPdePricingData)

class Black76PricingData(BasePricingData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_analytics.Black76PricingData_spec_get, _analytics.Black76PricingData_spec_set)
    vol = property(_analytics.Black76PricingData_vol_get, _analytics.Black76PricingData_vol_set)
    dsc = property(_analytics.Black76PricingData_dsc_get, _analytics.Black76PricingData_dsc_set)
    param = property(_analytics.Black76PricingData_param_get, _analytics.Black76PricingData_param_set)

    @staticmethod
    def create_from(p):
        return _analytics.Black76PricingData_create_from(p)

    def __init__(self):
        _analytics.Black76PricingData_swiginit(self, _analytics.new_Black76PricingData())
    __swig_destroy__ = _analytics.delete_Black76PricingData

# Register Black76PricingData in _analytics:
_analytics.Black76PricingData_swigregister(Black76PricingData)

def Black76PricingData_create_from(p):
    return _analytics.Black76PricingData_create_from(p)

class vectorConstVolatilities(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorConstVolatilities_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorConstVolatilities___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorConstVolatilities___bool__(self)

    def __len__(self):
        return _analytics.vectorConstVolatilities___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorConstVolatilities___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorConstVolatilities___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorConstVolatilities___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorConstVolatilities___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorConstVolatilities___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorConstVolatilities___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorConstVolatilities_pop(self)

    def append(self, x):
        return _analytics.vectorConstVolatilities_append(self, x)

    def empty(self):
        return _analytics.vectorConstVolatilities_empty(self)

    def size(self):
        return _analytics.vectorConstVolatilities_size(self)

    def swap(self, v):
        return _analytics.vectorConstVolatilities_swap(self, v)

    def begin(self):
        return _analytics.vectorConstVolatilities_begin(self)

    def end(self):
        return _analytics.vectorConstVolatilities_end(self)

    def rbegin(self):
        return _analytics.vectorConstVolatilities_rbegin(self)

    def rend(self):
        return _analytics.vectorConstVolatilities_rend(self)

    def clear(self):
        return _analytics.vectorConstVolatilities_clear(self)

    def get_allocator(self):
        return _analytics.vectorConstVolatilities_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorConstVolatilities_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorConstVolatilities_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorConstVolatilities_swiginit(self, _analytics.new_vectorConstVolatilities(*args))

    def push_back(self, x):
        return _analytics.vectorConstVolatilities_push_back(self, x)

    def front(self):
        return _analytics.vectorConstVolatilities_front(self)

    def back(self):
        return _analytics.vectorConstVolatilities_back(self)

    def assign(self, n, x):
        return _analytics.vectorConstVolatilities_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorConstVolatilities_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorConstVolatilities_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorConstVolatilities_reserve(self, n)

    def capacity(self):
        return _analytics.vectorConstVolatilities_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorConstVolatilities

# Register vectorConstVolatilities in _analytics:
_analytics.vectorConstVolatilities_swigregister(vectorConstVolatilities)

class LocalVolMonteCarloPricingData(BasePricingData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spec = property(_analytics.LocalVolMonteCarloPricingData_spec_get, _analytics.LocalVolMonteCarloPricingData_spec_set)
    vols = property(_analytics.LocalVolMonteCarloPricingData_vols_get, _analytics.LocalVolMonteCarloPricingData_vols_set)
    qtoCorrs = property(_analytics.LocalVolMonteCarloPricingData_qtoCorrs_get, _analytics.LocalVolMonteCarloPricingData_qtoCorrs_set)
    fxVols = property(_analytics.LocalVolMonteCarloPricingData_fxVols_get, _analytics.LocalVolMonteCarloPricingData_fxVols_set)
    dsc = property(_analytics.LocalVolMonteCarloPricingData_dsc_get, _analytics.LocalVolMonteCarloPricingData_dsc_set)
    param = property(_analytics.LocalVolMonteCarloPricingData_param_get, _analytics.LocalVolMonteCarloPricingData_param_set)
    correlationModel = property(_analytics.LocalVolMonteCarloPricingData_correlationModel_get, _analytics.LocalVolMonteCarloPricingData_correlationModel_set)

    def setCorrelations(self, correlations):
        return _analytics.LocalVolMonteCarloPricingData_setCorrelations(self, correlations)

    def getCorrelations(self, correlations):
        return _analytics.LocalVolMonteCarloPricingData_getCorrelations(self, correlations)

    def __init__(self):
        _analytics.LocalVolMonteCarloPricingData_swiginit(self, _analytics.new_LocalVolMonteCarloPricingData())
    __swig_destroy__ = _analytics.delete_LocalVolMonteCarloPricingData

# Register LocalVolMonteCarloPricingData in _analytics:
_analytics.LocalVolMonteCarloPricingData_swigregister(LocalVolMonteCarloPricingData)

class vectorConstModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorConstModel_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorConstModel___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorConstModel___bool__(self)

    def __len__(self):
        return _analytics.vectorConstModel___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorConstModel___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorConstModel___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorConstModel___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorConstModel___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorConstModel___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorConstModel___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorConstModel_pop(self)

    def append(self, x):
        return _analytics.vectorConstModel_append(self, x)

    def empty(self):
        return _analytics.vectorConstModel_empty(self)

    def size(self):
        return _analytics.vectorConstModel_size(self)

    def swap(self, v):
        return _analytics.vectorConstModel_swap(self, v)

    def begin(self):
        return _analytics.vectorConstModel_begin(self)

    def end(self):
        return _analytics.vectorConstModel_end(self)

    def rbegin(self):
        return _analytics.vectorConstModel_rbegin(self)

    def rend(self):
        return _analytics.vectorConstModel_rend(self)

    def clear(self):
        return _analytics.vectorConstModel_clear(self)

    def get_allocator(self):
        return _analytics.vectorConstModel_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorConstModel_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorConstModel_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorConstModel_swiginit(self, _analytics.new_vectorConstModel(*args))

    def push_back(self, x):
        return _analytics.vectorConstModel_push_back(self, x)

    def front(self):
        return _analytics.vectorConstModel_front(self)

    def back(self):
        return _analytics.vectorConstModel_back(self)

    def assign(self, n, x):
        return _analytics.vectorConstModel_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorConstModel_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorConstModel_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorConstModel_reserve(self, n)

    def capacity(self):
        return _analytics.vectorConstModel_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorConstModel

# Register vectorConstModel in _analytics:
_analytics.vectorConstModel_swigregister(vectorConstModel)

class StochasticVolMonteCarloPricingData(LocalVolMonteCarloPricingData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    models = property(_analytics.StochasticVolMonteCarloPricingData_models_get, _analytics.StochasticVolMonteCarloPricingData_models_set)

    def setSpotVarianceCorrelations(self, correlations):
        return _analytics.StochasticVolMonteCarloPricingData_setSpotVarianceCorrelations(self, correlations)

    def setVarianceVarianceCorrelations(self, correlations):
        return _analytics.StochasticVolMonteCarloPricingData_setVarianceVarianceCorrelations(self, correlations)

    def __init__(self):
        _analytics.StochasticVolMonteCarloPricingData_swiginit(self, _analytics.new_StochasticVolMonteCarloPricingData())
    __swig_destroy__ = _analytics.delete_StochasticVolMonteCarloPricingData

# Register StochasticVolMonteCarloPricingData in _analytics:
_analytics.StochasticVolMonteCarloPricingData_swigregister(StochasticVolMonteCarloPricingData)

class DiscountCurveConstructor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, targetId, ttm):
        _analytics.DiscountCurveConstructor_swiginit(self, _analytics.new_DiscountCurveConstructor(targetId, ttm))

    def setSpreads(self, spreads):
        return _analytics.DiscountCurveConstructor_setSpreads(self, spreads)

    def addModel(self, model, weight):
        return _analytics.DiscountCurveConstructor_addModel(self, model, weight)

    def addSpreadCurve(self, spreadCurve, weight):
        return _analytics.DiscountCurveConstructor_addSpreadCurve(self, spreadCurve, weight)

    def create(self, models, data, refDate):
        return _analytics.DiscountCurveConstructor_create(self, models, data, refDate)
    __swig_destroy__ = _analytics.delete_DiscountCurveConstructor

# Register DiscountCurveConstructor in _analytics:
_analytics.DiscountCurveConstructor_swigregister(DiscountCurveConstructor)

class ModelToMktInterface(BaseInterface, SpotInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fallback):
        _analytics.ModelToMktInterface_swiginit(self, _analytics.new_ModelToMktInterface(fallback))

    def getReferenceSpot(self, udlKey, timeStamp):
        return _analytics.ModelToMktInterface_getReferenceSpot(self, udlKey, timeStamp)

    def addDiscountCurveConstructor(self, constructor):
        return _analytics.ModelToMktInterface_addDiscountCurveConstructor(self, constructor)

    def setModelForSpot(self, model, udl):
        return _analytics.ModelToMktInterface_setModelForSpot(self, model, udl)

    def setModel(self, model):
        return _analytics.ModelToMktInterface_setModel(self, model)
    __swig_destroy__ = _analytics.delete_ModelToMktInterface

# Register ModelToMktInterface in _analytics:
_analytics.ModelToMktInterface_swigregister(ModelToMktInterface)

class YieldCurveBootstrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def compute(*args):
        return _analytics.YieldCurveBootstrapper_compute(*args)

    def __init__(self):
        _analytics.YieldCurveBootstrapper_swiginit(self, _analytics.new_YieldCurveBootstrapper())
    __swig_destroy__ = _analytics.delete_YieldCurveBootstrapper

# Register YieldCurveBootstrapper in _analytics:
_analytics.YieldCurveBootstrapper_swigregister(YieldCurveBootstrapper)

def YieldCurveBootstrapper_compute(*args):
    return _analytics.YieldCurveBootstrapper_compute(*args)

class CalibrationRequest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _analytics.delete_CalibrationRequest

# Register CalibrationRequest in _analytics:
_analytics.CalibrationRequest_swigregister(CalibrationRequest)

class CalibrationResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _analytics.delete_CalibrationResult

# Register CalibrationResult in _analytics:
_analytics.CalibrationResult_swigregister(CalibrationResult)

class BaseCalibrationData(Clonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    calDate = property(_analytics.BaseCalibrationData_calDate_get, _analytics.BaseCalibrationData_calDate_set, doc=r""" calibration date""")
    calibrator = property(_analytics.BaseCalibrationData_calibrator_get, _analytics.BaseCalibrationData_calibrator_set, doc=r""" name of calibrator used to calibrate the request""")
    calibrationRequest = property(_analytics.BaseCalibrationData_calibrationRequest_get, _analytics.BaseCalibrationData_calibrationRequest_set, doc=r""" calibration request""")
    __swig_destroy__ = _analytics.delete_BaseCalibrationData

# Register BaseCalibrationData in _analytics:
_analytics.BaseCalibrationData_swigregister(BaseCalibrationData)

class BaseCalibrator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def calibrate(*args):
        return _analytics.BaseCalibrator_calibrate(*args)
    __swig_destroy__ = _analytics.delete_BaseCalibrator

# Register BaseCalibrator in _analytics:
_analytics.BaseCalibrator_swigregister(BaseCalibrator)

def BaseCalibrator_calibrate(*args):
    return _analytics.BaseCalibrator_calibrate(*args)

class TransitionMatrixCalibrationRequest(CalibrationRequest):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, calibrationSetId, paramId, bondPricingParam, transitionMatrixId):
        _analytics.TransitionMatrixCalibrationRequest_swiginit(self, _analytics.new_TransitionMatrixCalibrationRequest(objId, calibrationSetId, paramId, bondPricingParam, transitionMatrixId))
    __swig_destroy__ = _analytics.delete_TransitionMatrixCalibrationRequest

# Register TransitionMatrixCalibrationRequest in _analytics:
_analytics.TransitionMatrixCalibrationRequest_swigregister(TransitionMatrixCalibrationRequest)

class TransitionMatrixCalibrationParameter(BaseParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.TransitionMatrixCalibrationParameter_swiginit(self, _analytics.new_TransitionMatrixCalibrationParameter(*args))
    timeGrid = property(_analytics.TransitionMatrixCalibrationParameter_timeGrid_get, _analytics.TransitionMatrixCalibrationParameter_timeGrid_set, doc=r""" The used timegrid""")
    lmParam = property(_analytics.TransitionMatrixCalibrationParameter_lmParam_get, _analytics.TransitionMatrixCalibrationParameter_lmParam_set)
    __swig_destroy__ = _analytics.delete_TransitionMatrixCalibrationParameter

# Register TransitionMatrixCalibrationParameter in _analytics:
_analytics.TransitionMatrixCalibrationParameter_swigregister(TransitionMatrixCalibrationParameter)

class TransitionMatrixCalibrationData(BaseCalibrationData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _analytics.delete_TransitionMatrixCalibrationData

# Register TransitionMatrixCalibrationData in _analytics:
_analytics.TransitionMatrixCalibrationData_swigregister(TransitionMatrixCalibrationData)

class TransitionMatrixCalibrationResult(CalibrationResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.TransitionMatrixCalibrationResult_swiginit(self, _analytics.new_TransitionMatrixCalibrationResult())

    def set_results(self, res):
        return _analytics.TransitionMatrixCalibrationResult_set_results(self, res)
    transitionMatrix = property(_analytics.TransitionMatrixCalibrationResult_transitionMatrix_get, _analytics.TransitionMatrixCalibrationResult_transitionMatrix_set)
    __swig_destroy__ = _analytics.delete_TransitionMatrixCalibrationResult

# Register TransitionMatrixCalibrationResult in _analytics:
_analytics.TransitionMatrixCalibrationResult_swigregister(TransitionMatrixCalibrationResult)

class CalibrationSwaptionPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.CalibrationSwaptionPtr_swiginit(self, _analytics.new_CalibrationSwaptionPtr())
    __swig_destroy__ = _analytics.delete_CalibrationSwaptionPtr

# Register CalibrationSwaptionPtr in _analytics:
_analytics.CalibrationSwaptionPtr_swigregister(CalibrationSwaptionPtr)

class vectorCalibrationSwaptionPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorCalibrationSwaptionPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorCalibrationSwaptionPtr___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorCalibrationSwaptionPtr___bool__(self)

    def __len__(self):
        return _analytics.vectorCalibrationSwaptionPtr___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorCalibrationSwaptionPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorCalibrationSwaptionPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorCalibrationSwaptionPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorCalibrationSwaptionPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorCalibrationSwaptionPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorCalibrationSwaptionPtr___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorCalibrationSwaptionPtr_pop(self)

    def append(self, x):
        return _analytics.vectorCalibrationSwaptionPtr_append(self, x)

    def empty(self):
        return _analytics.vectorCalibrationSwaptionPtr_empty(self)

    def size(self):
        return _analytics.vectorCalibrationSwaptionPtr_size(self)

    def swap(self, v):
        return _analytics.vectorCalibrationSwaptionPtr_swap(self, v)

    def begin(self):
        return _analytics.vectorCalibrationSwaptionPtr_begin(self)

    def end(self):
        return _analytics.vectorCalibrationSwaptionPtr_end(self)

    def rbegin(self):
        return _analytics.vectorCalibrationSwaptionPtr_rbegin(self)

    def rend(self):
        return _analytics.vectorCalibrationSwaptionPtr_rend(self)

    def clear(self):
        return _analytics.vectorCalibrationSwaptionPtr_clear(self)

    def get_allocator(self):
        return _analytics.vectorCalibrationSwaptionPtr_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorCalibrationSwaptionPtr_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorCalibrationSwaptionPtr_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorCalibrationSwaptionPtr_swiginit(self, _analytics.new_vectorCalibrationSwaptionPtr(*args))

    def push_back(self, x):
        return _analytics.vectorCalibrationSwaptionPtr_push_back(self, x)

    def front(self):
        return _analytics.vectorCalibrationSwaptionPtr_front(self)

    def back(self):
        return _analytics.vectorCalibrationSwaptionPtr_back(self)

    def assign(self, n, x):
        return _analytics.vectorCalibrationSwaptionPtr_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorCalibrationSwaptionPtr_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorCalibrationSwaptionPtr_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorCalibrationSwaptionPtr_reserve(self, n)

    def capacity(self):
        return _analytics.vectorCalibrationSwaptionPtr_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorCalibrationSwaptionPtr

# Register vectorCalibrationSwaptionPtr in _analytics:
_analytics.vectorCalibrationSwaptionPtr_swigregister(vectorCalibrationSwaptionPtr)

class mapSwapCurves(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.mapSwapCurves_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.mapSwapCurves___nonzero__(self)

    def __bool__(self):
        return _analytics.mapSwapCurves___bool__(self)

    def __len__(self):
        return _analytics.mapSwapCurves___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _analytics.mapSwapCurves___getitem__(self, key)

    def __delitem__(self, key):
        return _analytics.mapSwapCurves___delitem__(self, key)

    def has_key(self, key):
        return _analytics.mapSwapCurves_has_key(self, key)

    def keys(self):
        return _analytics.mapSwapCurves_keys(self)

    def values(self):
        return _analytics.mapSwapCurves_values(self)

    def items(self):
        return _analytics.mapSwapCurves_items(self)

    def __contains__(self, key):
        return _analytics.mapSwapCurves___contains__(self, key)

    def key_iterator(self):
        return _analytics.mapSwapCurves_key_iterator(self)

    def value_iterator(self):
        return _analytics.mapSwapCurves_value_iterator(self)

    def __setitem__(self, *args):
        return _analytics.mapSwapCurves___setitem__(self, *args)

    def asdict(self):
        return _analytics.mapSwapCurves_asdict(self)

    def __init__(self, *args):
        _analytics.mapSwapCurves_swiginit(self, _analytics.new_mapSwapCurves(*args))

    def empty(self):
        return _analytics.mapSwapCurves_empty(self)

    def size(self):
        return _analytics.mapSwapCurves_size(self)

    def swap(self, v):
        return _analytics.mapSwapCurves_swap(self, v)

    def begin(self):
        return _analytics.mapSwapCurves_begin(self)

    def end(self):
        return _analytics.mapSwapCurves_end(self)

    def clear(self):
        return _analytics.mapSwapCurves_clear(self)

    def get_allocator(self):
        return _analytics.mapSwapCurves_get_allocator(self)

    def count(self, x):
        return _analytics.mapSwapCurves_count(self, x)

    def erase(self, *args):
        return _analytics.mapSwapCurves_erase(self, *args)

    def find(self, x):
        return _analytics.mapSwapCurves_find(self, x)
    __swig_destroy__ = _analytics.delete_mapSwapCurves

# Register mapSwapCurves in _analytics:
_analytics.mapSwapCurves_swigregister(mapSwapCurves)

class CalibrationSwaption(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def createSwaption(valuationDate, swapIndex, payer, swaptionExpiry, swapLength, swapRate):
        return _analytics.CalibrationSwaption_createSwaption(valuationDate, swapIndex, payer, swaptionExpiry, swapLength, swapRate)
    __swig_destroy__ = _analytics.delete_CalibrationSwaption

# Register CalibrationSwaption in _analytics:
_analytics.CalibrationSwaption_swigregister(CalibrationSwaption)

def CalibrationSwaption_createSwaption(valuationDate, swapIndex, payer, swaptionExpiry, swapLength, swapRate):
    return _analytics.CalibrationSwaption_createSwaption(valuationDate, swapIndex, payer, swaptionExpiry, swapLength, swapRate)

class HullWhiteCalibrationParameter(BaseParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.HullWhiteCalibrationParameter_swiginit(self, _analytics.new_HullWhiteCalibrationParameter())
    __swig_destroy__ = _analytics.delete_HullWhiteCalibrationParameter

# Register HullWhiteCalibrationParameter in _analytics:
_analytics.HullWhiteCalibrationParameter_swigregister(HullWhiteCalibrationParameter)

class HullWhiteParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _analytics.delete_HullWhiteParameters

# Register HullWhiteParameters in _analytics:
_analytics.HullWhiteParameters_swigregister(HullWhiteParameters)

class HullWhiteParametersConstCoeff(HullWhiteParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, meanRev, sigma):
        _analytics.HullWhiteParametersConstCoeff_swiginit(self, _analytics.new_HullWhiteParametersConstCoeff(meanRev, sigma))

    def getKappa(self):
        return _analytics.HullWhiteParametersConstCoeff_getKappa(self)

    def getSigma(self):
        return _analytics.HullWhiteParametersConstCoeff_getSigma(self)
    __swig_destroy__ = _analytics.delete_HullWhiteParametersConstCoeff

# Register HullWhiteParametersConstCoeff in _analytics:
_analytics.HullWhiteParametersConstCoeff_swigregister(HullWhiteParametersConstCoeff)

class HullWhiteParametersPwConstCoeff(HullWhiteParameters):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, grid, kappa, sigma):
        _analytics.HullWhiteParametersPwConstCoeff_swiginit(self, _analytics.new_HullWhiteParametersPwConstCoeff(grid, kappa, sigma))

    def getKappa(self):
        return _analytics.HullWhiteParametersPwConstCoeff_getKappa(self)

    def getSigma(self):
        return _analytics.HullWhiteParametersPwConstCoeff_getSigma(self)

    def getGrid(self):
        return _analytics.HullWhiteParametersPwConstCoeff_getGrid(self)
    __swig_destroy__ = _analytics.delete_HullWhiteParametersPwConstCoeff

# Register HullWhiteParametersPwConstCoeff in _analytics:
_analytics.HullWhiteParametersPwConstCoeff_swigregister(HullWhiteParametersPwConstCoeff)

class vectorSwaptionData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorSwaptionData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorSwaptionData___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorSwaptionData___bool__(self)

    def __len__(self):
        return _analytics.vectorSwaptionData___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorSwaptionData___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorSwaptionData___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorSwaptionData___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorSwaptionData___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorSwaptionData___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorSwaptionData___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorSwaptionData_pop(self)

    def append(self, x):
        return _analytics.vectorSwaptionData_append(self, x)

    def empty(self):
        return _analytics.vectorSwaptionData_empty(self)

    def size(self):
        return _analytics.vectorSwaptionData_size(self)

    def swap(self, v):
        return _analytics.vectorSwaptionData_swap(self, v)

    def begin(self):
        return _analytics.vectorSwaptionData_begin(self)

    def end(self):
        return _analytics.vectorSwaptionData_end(self)

    def rbegin(self):
        return _analytics.vectorSwaptionData_rbegin(self)

    def rend(self):
        return _analytics.vectorSwaptionData_rend(self)

    def clear(self):
        return _analytics.vectorSwaptionData_clear(self)

    def get_allocator(self):
        return _analytics.vectorSwaptionData_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorSwaptionData_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorSwaptionData_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorSwaptionData_swiginit(self, _analytics.new_vectorSwaptionData(*args))

    def push_back(self, x):
        return _analytics.vectorSwaptionData_push_back(self, x)

    def front(self):
        return _analytics.vectorSwaptionData_front(self)

    def back(self):
        return _analytics.vectorSwaptionData_back(self)

    def assign(self, n, x):
        return _analytics.vectorSwaptionData_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorSwaptionData_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorSwaptionData_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorSwaptionData_reserve(self, n)

    def capacity(self):
        return _analytics.vectorSwaptionData_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorSwaptionData

# Register vectorSwaptionData in _analytics:
_analytics.vectorSwaptionData_swigregister(vectorSwaptionData)

class HullWhiteCalibrationResult(CalibrationResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getParams(self):
        return _analytics.HullWhiteCalibrationResult_getParams(self)

    def getR2(self):
        return _analytics.HullWhiteCalibrationResult_getR2(self)

    def getNSwaptions(self):
        return _analytics.HullWhiteCalibrationResult_getNSwaptions(self)

    def getSwaptionMarketPrice(self, i):
        return _analytics.HullWhiteCalibrationResult_getSwaptionMarketPrice(self, i)

    def getSwaptionCalibratedPrice(self, i):
        return _analytics.HullWhiteCalibrationResult_getSwaptionCalibratedPrice(self, i)

    def getSwaptionMarketVola(self, i):
        return _analytics.HullWhiteCalibrationResult_getSwaptionMarketVola(self, i)

    def getSwaptionCalibratedVola(self, i):
        return _analytics.HullWhiteCalibrationResult_getSwaptionCalibratedVola(self, i)
    __swig_destroy__ = _analytics.delete_HullWhiteCalibrationResult

# Register HullWhiteCalibrationResult in _analytics:
_analytics.HullWhiteCalibrationResult_swigregister(HullWhiteCalibrationResult)

class HullWhiteCalibrator(BaseCalibrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Method_ConstantParameters = _analytics.HullWhiteCalibrator_Method_ConstantParameters
    Method_PwConstantParameters = _analytics.HullWhiteCalibrator_Method_PwConstantParameters

    def calibrate(self, method, calDate, swaptions, quotes, weights, discountCurve, swapCurves, param):
        return _analytics.HullWhiteCalibrator_calibrate(self, method, calDate, swaptions, quotes, weights, discountCurve, swapCurves, param)

    def __init__(self):
        _analytics.HullWhiteCalibrator_swiginit(self, _analytics.new_HullWhiteCalibrator())
    __swig_destroy__ = _analytics.delete_HullWhiteCalibrator

# Register HullWhiteCalibrator in _analytics:
_analytics.HullWhiteCalibrator_swigregister(HullWhiteCalibrator)

class PreprocessingParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.PreprocessingParameter_swiginit(self, _analytics.new_PreprocessingParameter(*args))
    minExpiry = property(_analytics.PreprocessingParameter_minExpiry_get, _analytics.PreprocessingParameter_minExpiry_set, doc=r""" minimum expiry for not ATM-quotes to be used in the calibration process""")
    maxExpiry = property(_analytics.PreprocessingParameter_maxExpiry_get, _analytics.PreprocessingParameter_maxExpiry_set, doc=r""" maximum expiry for not-ATM quotes to be used in the calibration process""")
    maxCallMoneyness = property(_analytics.PreprocessingParameter_maxCallMoneyness_get, _analytics.PreprocessingParameter_maxCallMoneyness_set, doc=r""" maximum moneyness for Calls used in the calibration ((K/F <= maxCallMoneyness)""")
    minCallMoneyness = property(_analytics.PreprocessingParameter_minCallMoneyness_get, _analytics.PreprocessingParameter_minCallMoneyness_set, doc=r""" minimum moneyness for Calls used in the calibration ((K/F >= minCallMoneyness)""")
    maxPutMoneyness = property(_analytics.PreprocessingParameter_maxPutMoneyness_get, _analytics.PreprocessingParameter_maxPutMoneyness_set, doc=r""" maximum moneyness for Puts used in the calibration ((K/F <= maxPutMoneyness)""")
    minPutMoneyness = property(_analytics.PreprocessingParameter_minPutMoneyness_get, _analytics.PreprocessingParameter_minPutMoneyness_set, doc=r""" minimum moneyness for Puts used in the calibration (K/F >= minPutMoneyness)""")
    minNumberOfQuotesPerExpiry = property(_analytics.PreprocessingParameter_minNumberOfQuotesPerExpiry_get, _analytics.PreprocessingParameter_minNumberOfQuotesPerExpiry_set, doc=r""" minimum number of quotes such that an expiry is used in the calibration""")
    targetNumberOfPutQuotesPerExpiry = property(_analytics.PreprocessingParameter_targetNumberOfPutQuotesPerExpiry_get, _analytics.PreprocessingParameter_targetNumberOfPutQuotesPerExpiry_set, doc=r""" target number of put quotes to be used in the calibration""")
    targetNumberOfCallQuotesPerExpiry = property(_analytics.PreprocessingParameter_targetNumberOfCallQuotesPerExpiry_get, _analytics.PreprocessingParameter_targetNumberOfCallQuotesPerExpiry_set, doc=r""" target number of call quotes to be used in the calibration""")
    exceptionLMNotConverged = property(_analytics.PreprocessingParameter_exceptionLMNotConverged_get, _analytics.PreprocessingParameter_exceptionLMNotConverged_set, doc=r""" determines if an exception is thrown if Levenberg Marquardt did not converge (true) otherwise just an error to the logfile is written""")
    dilateSettleQuotes = property(_analytics.PreprocessingParameter_dilateSettleQuotes_get, _analytics.PreprocessingParameter_dilateSettleQuotes_set, doc=r""" determines whether settlement quotes are dilated if true, bid/ask spreads are artificially generated according to the rules defined by the parameters atmfVolSpread and wingVolSpread.""")
    atmfVolSpread = property(_analytics.PreprocessingParameter_atmfVolSpread_get, _analytics.PreprocessingParameter_atmfVolSpread_set, doc=r""" atmVolSpread (only relevant if dilateSettleQuotes == true)""")
    wingVolSpread = property(_analytics.PreprocessingParameter_wingVolSpread_get, _analytics.PreprocessingParameter_wingVolSpread_set, doc=r""" wingVolSpread (only relevant if dilateSettleQuotes == true)""")
    __swig_destroy__ = _analytics.delete_PreprocessingParameter

# Register PreprocessingParameter in _analytics:
_analytics.PreprocessingParameter_swigregister(PreprocessingParameter)

class VolatilityCalibratorParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    americanAsEuropean = property(_analytics.VolatilityCalibratorParameter_americanAsEuropean_get, _analytics.VolatilityCalibratorParameter_americanAsEuropean_set, doc=r""" if true, american quotes are transformed by computing implied vols from american prices and using these implied vols to compute european prices""")
    nSpotStepsImpliedVol = property(_analytics.VolatilityCalibratorParameter_nSpotStepsImpliedVol_get, _analytics.VolatilityCalibratorParameter_nSpotStepsImpliedVol_set, doc=r""" number of spotsteps used when determining implied vols for american options, only relevant for american options and if americanAsEuropean==true""")
    nTimeStepsPerYearImpliedVol = property(_analytics.VolatilityCalibratorParameter_nTimeStepsPerYearImpliedVol_get, _analytics.VolatilityCalibratorParameter_nTimeStepsPerYearImpliedVol_set, doc=r""" number of timesteps per year used when determining implied vols for american options, only relevant for american options and if americanAsEuropean==true""")
    calibrateToVols = property(_analytics.VolatilityCalibratorParameter_calibrateToVols_get, _analytics.VolatilityCalibratorParameter_calibrateToVols_set, doc=r""" if true, the cost function is based on implied vols, otherwise on prices""")
    spreadDependentWeights = property(_analytics.VolatilityCalibratorParameter_spreadDependentWeights_get, _analytics.VolatilityCalibratorParameter_spreadDependentWeights_set, doc=r""" if true, the ost function includes the bid-ask spread width as weighting in the cost function, otherwise not""")

    def getCalibType(self):
        return _analytics.VolatilityCalibratorParameter_getCalibType(self)
    prepParam = property(_analytics.VolatilityCalibratorParameter_prepParam_get, _analytics.VolatilityCalibratorParameter_prepParam_set)
    __swig_destroy__ = _analytics.delete_VolatilityCalibratorParameter

# Register VolatilityCalibratorParameter in _analytics:
_analytics.VolatilityCalibratorParameter_swigregister(VolatilityCalibratorParameter)

class VolatilityCalibratorSSVIParameter(VolatilityCalibratorParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        default constructor for serialization purposes only

        |

        *Overload 2:*
        full constructor

        |

        *Overload 3:*
        full constructor

        |

        *Overload 4:*
        full constructor

        |

        *Overload 5:*
        full constructor

        |

        *Overload 6:*
        full constructor

        |

        *Overload 7:*
        full constructor

        |

        *Overload 8:*
        full constructor

        |

        *Overload 9:*
        full constructor

        |

        *Overload 10:*
        full constructor

        |

        *Overload 11:*
        full constructor

        |

        *Overload 12:*
        full constructor

        |

        *Overload 13:*
        full constructor

        |

        *Overload 14:*
        full constructor

        |

        *Overload 15:*
        full constructor

        |

        *Overload 16:*
        full constructor

        |

        *Overload 17:*
        full constructor

        |

        *Overload 18:*
        full constructor

        |

        *Overload 19:*
        full constructor

        |

        *Overload 20:*
        full constructor
        """
        _analytics.VolatilityCalibratorSSVIParameter_swiginit(self, _analytics.new_VolatilityCalibratorSSVIParameter(*args))

    def getCalibType(self):
        return _analytics.VolatilityCalibratorSSVIParameter_getCalibType(self)
    lmParam = property(_analytics.VolatilityCalibratorSSVIParameter_lmParam_get, _analytics.VolatilityCalibratorSSVIParameter_lmParam_set, doc=r""" optimization parameters""")
    __swig_destroy__ = _analytics.delete_VolatilityCalibratorSSVIParameter

# Register VolatilityCalibratorSSVIParameter in _analytics:
_analytics.VolatilityCalibratorSSVIParameter_swigregister(VolatilityCalibratorSSVIParameter)

class VolatilityCalibratorGridParameter(VolatilityCalibratorParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        default constructor for serialization purposes only

        |

        *Overload 2:*
        full constructor	

        |

        *Overload 3:*
        full constructor	

        |

        *Overload 4:*
        full constructor	

        |

        *Overload 5:*
        full constructor	

        |

        *Overload 6:*
        full constructor	

        |

        *Overload 7:*
        full constructor	

        |

        *Overload 8:*
        full constructor	

        |

        *Overload 9:*
        full constructor	

        |

        *Overload 10:*
        full constructor	

        |

        *Overload 11:*
        full constructor	

        |

        *Overload 12:*
        full constructor	

        |

        *Overload 13:*
        full constructor	

        |

        *Overload 14:*
        full constructor	

        |

        *Overload 15:*
        full constructor	

        |

        *Overload 16:*
        full constructor	

        |

        *Overload 17:*
        full constructor	

        |

        *Overload 18:*
        full constructor	

        |

        *Overload 19:*
        full constructor	

        |

        *Overload 20:*
        full constructor	

        |

        *Overload 21:*
        full constructor	

        |

        *Overload 22:*
        full constructor	

        |

        *Overload 23:*
        full constructor	

        |

        *Overload 24:*
        full constructor	

        |

        *Overload 25:*
        full constructor	

        |

        *Overload 26:*
        full constructor	

        |

        *Overload 27:*
        full constructor	

        |

        *Overload 28:*
        full constructor	

        |

        *Overload 29:*
        full constructor	

        |

        *Overload 30:*
        full constructor	

        |

        *Overload 31:*
        full constructor	

        |

        *Overload 32:*
        full constructor	
        """
        _analytics.VolatilityCalibratorGridParameter_swiginit(self, _analytics.new_VolatilityCalibratorGridParameter(*args))

    def getCalibType(self):
        return _analytics.VolatilityCalibratorGridParameter_getCalibType(self)
    problemType = property(_analytics.VolatilityCalibratorGridParameter_problemType_get, _analytics.VolatilityCalibratorGridParameter_problemType_set, doc=r""" Specifies the optimization problem used to do the calibration, i.e.  either Linear or Quadratic""")
    solverEps = property(_analytics.VolatilityCalibratorGridParameter_solverEps_get, _analytics.VolatilityCalibratorGridParameter_solverEps_set, doc=r""" Epsilon used to determine when the solver stops""")
    minVol = property(_analytics.VolatilityCalibratorGridParameter_minVol_get, _analytics.VolatilityCalibratorGridParameter_minVol_set, doc=r""" minimum attainable volatility (used to determine the lower bound if no bid quote is given)""")
    maxVol = property(_analytics.VolatilityCalibratorGridParameter_maxVol_get, _analytics.VolatilityCalibratorGridParameter_maxVol_set, doc=r""" maximum attainable vol (used to determine upper bound if no ask vol is given)""")
    closeToBid = property(_analytics.VolatilityCalibratorGridParameter_closeToBid_get, _analytics.VolatilityCalibratorGridParameter_closeToBid_set, doc=r""" flag determining if we search for a solution closest to  bid prices 1 or closest to ask prices 0 or closest to mid -1""")
    useFixedGrid = property(_analytics.VolatilityCalibratorGridParameter_useFixedGrid_get, _analytics.VolatilityCalibratorGridParameter_useFixedGrid_set, doc=r""" boolean determining if the calibration is done on the set of all xstrikes contained in the  set of quotes or if a fixed grid is used""")
    minStrike = property(_analytics.VolatilityCalibratorGridParameter_minStrike_get, _analytics.VolatilityCalibratorGridParameter_minStrike_set, doc=r""" minimum X-strike used for the fixed grid""")
    maxStrike = property(_analytics.VolatilityCalibratorGridParameter_maxStrike_get, _analytics.VolatilityCalibratorGridParameter_maxStrike_set, doc=r""" maximum X-strike used for the fixed grid""")
    nStrikes = property(_analytics.VolatilityCalibratorGridParameter_nStrikes_get, _analytics.VolatilityCalibratorGridParameter_nStrikes_set, doc=r""" number of strike sused for the fixed grid""")
    strikeInterpolation = property(_analytics.VolatilityCalibratorGridParameter_strikeInterpolation_get, _analytics.VolatilityCalibratorGridParameter_strikeInterpolation_set, doc=r""" specifies vol interpolation type in strike direction (STANDARD=Natural Spline, MONOTONE=montone preserving spline)""")
    nSmoothingSteps = property(_analytics.VolatilityCalibratorGridParameter_nSmoothingSteps_get, _analytics.VolatilityCalibratorGridParameter_nSmoothingSteps_set, doc=r""" number of smoothing steps to smooth the bid-ask quotess""")
    convexityCondition = property(_analytics.VolatilityCalibratorGridParameter_convexityCondition_get, _analytics.VolatilityCalibratorGridParameter_convexityCondition_set, doc=r""" the constraint to avoid butterfly arbitrage is _{KK} C >= 0  (C is Call price according to Buehlers X-Space)  and is integrated into the costraints for optimization. To relax or strengthen the condition, we check _{KK} C >= convexityCorrection""")
    calendarSpreadCondition = property(_analytics.VolatilityCalibratorGridParameter_calendarSpreadCondition_get, _analytics.VolatilityCalibratorGridParameter_calendarSpreadCondition_set, doc=r""" to avoid avoid calendar arbitrage we include the constraint _T C >= 0 (C is Call price according to Buehlers X-Space). To releax or strengthen the condition , we check _T C >= calendarSpreadCondition""")
    __swig_destroy__ = _analytics.delete_VolatilityCalibratorGridParameter

# Register VolatilityCalibratorGridParameter in _analytics:
_analytics.VolatilityCalibratorGridParameter_swigregister(VolatilityCalibratorGridParameter)

class VolatilityCalibrator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def computeImpliedVols(quoteTable, valDate, fwd, dsc, pdeParam, americanAsEuropeanVols):
        return _analytics.VolatilityCalibrator_computeImpliedVols(quoteTable, valDate, fwd, dsc, pdeParam, americanAsEuropeanVols)

    @staticmethod
    def calibrateBorrowCurve(*args):
        return _analytics.VolatilityCalibrator_calibrateBorrowCurve(*args)

    @staticmethod
    def checkArbitrage(arbStrike, arbExpiry, arbType, vol, Xmin, Xmax, stepX, expiries, valDate, tol):
        return _analytics.VolatilityCalibrator_checkArbitrage(arbStrike, arbExpiry, arbType, vol, Xmin, Xmax, stepX, expiries, valDate, tol)

    @staticmethod
    def preprocessQuotes(result, quotes, refDate, fwd, params):
        return _analytics.VolatilityCalibrator_preprocessQuotes(result, quotes, refDate, fwd, params)

    @staticmethod
    def generateCheckReport(checkReport, vol, quoteTableId, cache, param):
        return _analytics.VolatilityCalibrator_generateCheckReport(checkReport, vol, quoteTableId, cache, param)

    @staticmethod
    def calibrate(udlId, volId, borrowId, quoteTableId, refDate, mktData, param, cache):
        return _analytics.VolatilityCalibrator_calibrate(udlId, volId, borrowId, quoteTableId, refDate, mktData, param, cache)

    @staticmethod
    def calibrateFwdAdjustmentCurve(udlId, curveId, quoteTableId, calibDate, mktData, param, cache):
        return _analytics.VolatilityCalibrator_calibrateFwdAdjustmentCurve(udlId, curveId, quoteTableId, calibDate, mktData, param, cache)

    def __init__(self):
        _analytics.VolatilityCalibrator_swiginit(self, _analytics.new_VolatilityCalibrator())
    __swig_destroy__ = _analytics.delete_VolatilityCalibrator

# Register VolatilityCalibrator in _analytics:
_analytics.VolatilityCalibrator_swigregister(VolatilityCalibrator)

def VolatilityCalibrator_computeImpliedVols(quoteTable, valDate, fwd, dsc, pdeParam, americanAsEuropeanVols):
    return _analytics.VolatilityCalibrator_computeImpliedVols(quoteTable, valDate, fwd, dsc, pdeParam, americanAsEuropeanVols)

def VolatilityCalibrator_calibrateBorrowCurve(*args):
    return _analytics.VolatilityCalibrator_calibrateBorrowCurve(*args)

def VolatilityCalibrator_checkArbitrage(arbStrike, arbExpiry, arbType, vol, Xmin, Xmax, stepX, expiries, valDate, tol):
    return _analytics.VolatilityCalibrator_checkArbitrage(arbStrike, arbExpiry, arbType, vol, Xmin, Xmax, stepX, expiries, valDate, tol)

def VolatilityCalibrator_preprocessQuotes(result, quotes, refDate, fwd, params):
    return _analytics.VolatilityCalibrator_preprocessQuotes(result, quotes, refDate, fwd, params)

def VolatilityCalibrator_generateCheckReport(checkReport, vol, quoteTableId, cache, param):
    return _analytics.VolatilityCalibrator_generateCheckReport(checkReport, vol, quoteTableId, cache, param)

def VolatilityCalibrator_calibrate(udlId, volId, borrowId, quoteTableId, refDate, mktData, param, cache):
    return _analytics.VolatilityCalibrator_calibrate(udlId, volId, borrowId, quoteTableId, refDate, mktData, param, cache)

def VolatilityCalibrator_calibrateFwdAdjustmentCurve(udlId, curveId, quoteTableId, calibDate, mktData, param, cache):
    return _analytics.VolatilityCalibrator_calibrateFwdAdjustmentCurve(udlId, curveId, quoteTableId, calibDate, mktData, param, cache)

class OptionQuote(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNDEFINED = property(_analytics.OptionQuote_UNDEFINED_get, _analytics.OptionQuote_UNDEFINED_set)
    bidCall = property(_analytics.OptionQuote_bidCall_get, _analytics.OptionQuote_bidCall_set)
    bidPut = property(_analytics.OptionQuote_bidPut_get, _analytics.OptionQuote_bidPut_set)
    askCall = property(_analytics.OptionQuote_askCall_get, _analytics.OptionQuote_askCall_set)
    askPut = property(_analytics.OptionQuote_askPut_get, _analytics.OptionQuote_askPut_set)
    strike = property(_analytics.OptionQuote_strike_get, _analytics.OptionQuote_strike_set)

    def isValid(self, *args):
        return _analytics.OptionQuote_isValid(self, *args)

    def midCall(self):
        return _analytics.OptionQuote_midCall(self)

    def midPut(self):
        return _analytics.OptionQuote_midPut(self)

    def __init__(self):
        _analytics.OptionQuote_swiginit(self, _analytics.new_OptionQuote())
    __swig_destroy__ = _analytics.delete_OptionQuote

# Register OptionQuote in _analytics:
_analytics.OptionQuote_swigregister(OptionQuote)
cvar = _analytics.cvar

class BorrowCalibratorEuropeanParameter(BaseParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.BorrowCalibratorEuropeanParameter_swiginit(self, _analytics.new_BorrowCalibratorEuropeanParameter(*args))
    scaler = property(_analytics.BorrowCalibratorEuropeanParameter_scaler_get, _analytics.BorrowCalibratorEuropeanParameter_scaler_set)
    __swig_destroy__ = _analytics.delete_BorrowCalibratorEuropeanParameter

# Register BorrowCalibratorEuropeanParameter in _analytics:
_analytics.BorrowCalibratorEuropeanParameter_swigregister(BorrowCalibratorEuropeanParameter)

class BorrowCalibrationRequest(CalibrationRequest):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId, european):
        _analytics.BorrowCalibrationRequest_swiginit(self, _analytics.new_BorrowCalibrationRequest(objId, european))
    udl = property(_analytics.BorrowCalibrationRequest_udl_get, _analytics.BorrowCalibrationRequest_udl_set)
    quoteTable = property(_analytics.BorrowCalibrationRequest_quoteTable_get, _analytics.BorrowCalibrationRequest_quoteTable_set)
    targetId = property(_analytics.BorrowCalibrationRequest_targetId_get, _analytics.BorrowCalibrationRequest_targetId_set, doc=r""" object id of resulting borrow""")
    param = property(_analytics.BorrowCalibrationRequest_param_get, _analytics.BorrowCalibrationRequest_param_set)
    __swig_destroy__ = _analytics.delete_BorrowCalibrationRequest

# Register BorrowCalibrationRequest in _analytics:
_analytics.BorrowCalibrationRequest_swigregister(BorrowCalibrationRequest)

class BorrowCalibrationData(BaseCalibrationData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.BorrowCalibrationData_swiginit(self, _analytics.new_BorrowCalibrationData())
    quoteTable = property(_analytics.BorrowCalibrationData_quoteTable_get, _analytics.BorrowCalibrationData_quoteTable_set)
    fwdCurve = property(_analytics.BorrowCalibrationData_fwdCurve_get, _analytics.BorrowCalibrationData_fwdCurve_set)
    dsc = property(_analytics.BorrowCalibrationData_dsc_get, _analytics.BorrowCalibrationData_dsc_set)
    param = property(_analytics.BorrowCalibrationData_param_get, _analytics.BorrowCalibrationData_param_set)
    targetId = property(_analytics.BorrowCalibrationData_targetId_get, _analytics.BorrowCalibrationData_targetId_set)

    def getClassName(self):
        return _analytics.BorrowCalibrationData_getClassName(self)
    __swig_destroy__ = _analytics.delete_BorrowCalibrationData

# Register BorrowCalibrationData in _analytics:
_analytics.BorrowCalibrationData_swigregister(BorrowCalibrationData)

class BorrowCalibratorResult(CalibrationResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, objId):
        _analytics.BorrowCalibratorResult_swiginit(self, _analytics.new_BorrowCalibratorResult(objId))
    bc = property(_analytics.BorrowCalibratorResult_bc_get, _analytics.BorrowCalibratorResult_bc_set)
    __swig_destroy__ = _analytics.delete_BorrowCalibratorResult

# Register BorrowCalibratorResult in _analytics:
_analytics.BorrowCalibratorResult_swigregister(BorrowCalibratorResult)

class vectorOptionQuote(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analytics.vectorOptionQuote_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analytics.vectorOptionQuote___nonzero__(self)

    def __bool__(self):
        return _analytics.vectorOptionQuote___bool__(self)

    def __len__(self):
        return _analytics.vectorOptionQuote___len__(self)

    def __getslice__(self, i, j):
        return _analytics.vectorOptionQuote___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analytics.vectorOptionQuote___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analytics.vectorOptionQuote___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analytics.vectorOptionQuote___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analytics.vectorOptionQuote___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analytics.vectorOptionQuote___setitem__(self, *args)

    def pop(self):
        return _analytics.vectorOptionQuote_pop(self)

    def append(self, x):
        return _analytics.vectorOptionQuote_append(self, x)

    def empty(self):
        return _analytics.vectorOptionQuote_empty(self)

    def size(self):
        return _analytics.vectorOptionQuote_size(self)

    def swap(self, v):
        return _analytics.vectorOptionQuote_swap(self, v)

    def begin(self):
        return _analytics.vectorOptionQuote_begin(self)

    def end(self):
        return _analytics.vectorOptionQuote_end(self)

    def rbegin(self):
        return _analytics.vectorOptionQuote_rbegin(self)

    def rend(self):
        return _analytics.vectorOptionQuote_rend(self)

    def clear(self):
        return _analytics.vectorOptionQuote_clear(self)

    def get_allocator(self):
        return _analytics.vectorOptionQuote_get_allocator(self)

    def pop_back(self):
        return _analytics.vectorOptionQuote_pop_back(self)

    def erase(self, *args):
        return _analytics.vectorOptionQuote_erase(self, *args)

    def __init__(self, *args):
        _analytics.vectorOptionQuote_swiginit(self, _analytics.new_vectorOptionQuote(*args))

    def push_back(self, x):
        return _analytics.vectorOptionQuote_push_back(self, x)

    def front(self):
        return _analytics.vectorOptionQuote_front(self)

    def back(self):
        return _analytics.vectorOptionQuote_back(self)

    def assign(self, n, x):
        return _analytics.vectorOptionQuote_assign(self, n, x)

    def resize(self, *args):
        return _analytics.vectorOptionQuote_resize(self, *args)

    def insert(self, *args):
        return _analytics.vectorOptionQuote_insert(self, *args)

    def reserve(self, n):
        return _analytics.vectorOptionQuote_reserve(self, n)

    def capacity(self):
        return _analytics.vectorOptionQuote_capacity(self)
    __swig_destroy__ = _analytics.delete_vectorOptionQuote

# Register vectorOptionQuote in _analytics:
_analytics.vectorOptionQuote_swigregister(vectorOptionQuote)

class QuoteTableNew(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analytics.QuoteTableNew_swiginit(self, _analytics.new_QuoteTableNew(*args))

    def getExpiries(self):
        return _analytics.QuoteTableNew_getExpiries(self)

    def get(self, *args):
        return _analytics.QuoteTableNew_get(self, *args)
    __swig_destroy__ = _analytics.delete_QuoteTableNew

# Register QuoteTableNew in _analytics:
_analytics.QuoteTableNew_swigregister(QuoteTableNew)

class BorrowCalibratorEuropean(BaseCalibrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getCalibrationData(self, calibStore, calDate, mktData, paramStore, calibrationRequest, specManager=0):
        return _analytics.BorrowCalibratorEuropean_getCalibrationData(self, calibStore, calDate, mktData, paramStore, calibrationRequest, specManager)

    @staticmethod
    def castCalibData(calibData):
        return _analytics.BorrowCalibratorEuropean_castCalibData(calibData)

    def computeFwd(self, quotes, df):
        return _analytics.BorrowCalibratorEuropean_computeFwd(self, quotes, df)

    @staticmethod
    def getATMScore(q):
        return _analytics.BorrowCalibratorEuropean_getATMScore(q)

    @staticmethod
    def calibrate(*args):
        return _analytics.BorrowCalibratorEuropean_calibrate(*args)

    def __init__(self):
        _analytics.BorrowCalibratorEuropean_swiginit(self, _analytics.new_BorrowCalibratorEuropean())
    __swig_destroy__ = _analytics.delete_BorrowCalibratorEuropean

# Register BorrowCalibratorEuropean in _analytics:
_analytics.BorrowCalibratorEuropean_swigregister(BorrowCalibratorEuropean)

def BorrowCalibratorEuropean_castCalibData(calibData):
    return _analytics.BorrowCalibratorEuropean_castCalibData(calibData)

def BorrowCalibratorEuropean_getATMScore(q):
    return _analytics.BorrowCalibratorEuropean_getATMScore(q)

def BorrowCalibratorEuropean_calibrate(*args):
    return _analytics.BorrowCalibratorEuropean_calibrate(*args)

class BorrowCalibratorAmericanParameter(BorrowCalibratorEuropeanParameter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analytics.BorrowCalibratorAmericanParameter_swiginit(self, _analytics.new_BorrowCalibratorAmericanParameter())
    __swig_destroy__ = _analytics.delete_BorrowCalibratorAmericanParameter

# Register BorrowCalibratorAmericanParameter in _analytics:
_analytics.BorrowCalibratorAmericanParameter_swigregister(BorrowCalibratorAmericanParameter)

class BorrowCalibratorAmerican(BaseCalibrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def calibrate(valDate, id, quotes, dsc, fwdCurve, atmScoreMax, maxIter):
        return _analytics.BorrowCalibratorAmerican_calibrate(valDate, id, quotes, dsc, fwdCurve, atmScoreMax, maxIter)

    @staticmethod
    def computeFwd(quotes, valDate, expiry, dc, fwd, atmScoreMax, maxIter):
        return _analytics.BorrowCalibratorAmerican_computeFwd(quotes, valDate, expiry, dc, fwd, atmScoreMax, maxIter)

    @staticmethod
    def preprocess(quotes, atmScoreMax):
        return _analytics.BorrowCalibratorAmerican_preprocess(quotes, atmScoreMax)

    def __init__(self):
        _analytics.BorrowCalibratorAmerican_swiginit(self, _analytics.new_BorrowCalibratorAmerican())
    __swig_destroy__ = _analytics.delete_BorrowCalibratorAmerican

# Register BorrowCalibratorAmerican in _analytics:
_analytics.BorrowCalibratorAmerican_swigregister(BorrowCalibratorAmerican)

def BorrowCalibratorAmerican_calibrate(valDate, id, quotes, dsc, fwdCurve, atmScoreMax, maxIter):
    return _analytics.BorrowCalibratorAmerican_calibrate(valDate, id, quotes, dsc, fwdCurve, atmScoreMax, maxIter)

def BorrowCalibratorAmerican_computeFwd(quotes, valDate, expiry, dc, fwd, atmScoreMax, maxIter):
    return _analytics.BorrowCalibratorAmerican_computeFwd(quotes, valDate, expiry, dc, fwd, atmScoreMax, maxIter)

def BorrowCalibratorAmerican_preprocess(quotes, atmScoreMax):
    return _analytics.BorrowCalibratorAmerican_preprocess(quotes, atmScoreMax)



