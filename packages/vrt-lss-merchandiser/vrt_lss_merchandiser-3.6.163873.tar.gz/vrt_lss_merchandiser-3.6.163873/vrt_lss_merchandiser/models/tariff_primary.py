# coding: utf-8

"""
    VeeRoute.LSS Merchandiser

    VeeRoute.LSS Merchandiser API  # noqa: E501

    The version of the OpenAPI document: 3.6.163873
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_lss_merchandiser.configuration import Configuration


class TariffPrimary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cost_per_shift': 'float',
        'cost_per_meter': 'float',
        'max_length': 'int',
        'cost_per_minute': 'float',
        'max_time': 'int'
    }

    attribute_map = {
        'cost_per_shift': 'cost_per_shift',
        'cost_per_meter': 'cost_per_meter',
        'max_length': 'max_length',
        'cost_per_minute': 'cost_per_minute',
        'max_time': 'max_time'
    }

    def __init__(self, cost_per_shift=0.001, cost_per_meter=0.001, max_length=100000000, cost_per_minute=0.001, max_time=43800, local_vars_configuration=None):  # noqa: E501
        """TariffPrimary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cost_per_shift = None
        self._cost_per_meter = None
        self._max_length = None
        self._cost_per_minute = None
        self._max_time = None
        self.discriminator = None

        self.cost_per_shift = cost_per_shift
        self.cost_per_meter = cost_per_meter
        self.max_length = max_length
        self.cost_per_minute = cost_per_minute
        self.max_time = max_time

    @property
    def cost_per_shift(self):
        """Gets the cost_per_shift of this TariffPrimary.  # noqa: E501

        The cost of the performer's shift.  # noqa: E501

        :return: The cost_per_shift of this TariffPrimary.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_shift

    @cost_per_shift.setter
    def cost_per_shift(self, cost_per_shift):
        """Sets the cost_per_shift of this TariffPrimary.

        The cost of the performer's shift.  # noqa: E501

        :param cost_per_shift: The cost_per_shift of this TariffPrimary.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and cost_per_shift is None:  # noqa: E501
            raise ValueError("Invalid value for `cost_per_shift`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cost_per_shift is not None and cost_per_shift > 1000000):  # noqa: E501
            raise ValueError("Invalid value for `cost_per_shift`, must be a value less than or equal to `1000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cost_per_shift is not None and cost_per_shift < 0):  # noqa: E501
            raise ValueError("Invalid value for `cost_per_shift`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cost_per_shift = cost_per_shift

    @property
    def cost_per_meter(self):
        """Gets the cost_per_meter of this TariffPrimary.  # noqa: E501

        The cost for driving in one meter.  # noqa: E501

        :return: The cost_per_meter of this TariffPrimary.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_meter

    @cost_per_meter.setter
    def cost_per_meter(self, cost_per_meter):
        """Sets the cost_per_meter of this TariffPrimary.

        The cost for driving in one meter.  # noqa: E501

        :param cost_per_meter: The cost_per_meter of this TariffPrimary.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and cost_per_meter is None:  # noqa: E501
            raise ValueError("Invalid value for `cost_per_meter`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cost_per_meter is not None and cost_per_meter > 10000):  # noqa: E501
            raise ValueError("Invalid value for `cost_per_meter`, must be a value less than or equal to `10000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cost_per_meter is not None and cost_per_meter < 0):  # noqa: E501
            raise ValueError("Invalid value for `cost_per_meter`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cost_per_meter = cost_per_meter

    @property
    def max_length(self):
        """Gets the max_length of this TariffPrimary.  # noqa: E501

        The maximum tariff duration in meters should be more than zero.  # noqa: E501

        :return: The max_length of this TariffPrimary.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this TariffPrimary.

        The maximum tariff duration in meters should be more than zero.  # noqa: E501

        :param max_length: The max_length of this TariffPrimary.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and max_length is None:  # noqa: E501
            raise ValueError("Invalid value for `max_length`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_length is not None and max_length > 100000000):  # noqa: E501
            raise ValueError("Invalid value for `max_length`, must be a value less than or equal to `100000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_length is not None and max_length < 1):  # noqa: E501
            raise ValueError("Invalid value for `max_length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_length = max_length

    @property
    def cost_per_minute(self):
        """Gets the cost_per_minute of this TariffPrimary.  # noqa: E501

        Cost per one minute.  # noqa: E501

        :return: The cost_per_minute of this TariffPrimary.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_minute

    @cost_per_minute.setter
    def cost_per_minute(self, cost_per_minute):
        """Sets the cost_per_minute of this TariffPrimary.

        Cost per one minute.  # noqa: E501

        :param cost_per_minute: The cost_per_minute of this TariffPrimary.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and cost_per_minute is None:  # noqa: E501
            raise ValueError("Invalid value for `cost_per_minute`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cost_per_minute is not None and cost_per_minute > 10000):  # noqa: E501
            raise ValueError("Invalid value for `cost_per_minute`, must be a value less than or equal to `10000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cost_per_minute is not None and cost_per_minute < 0):  # noqa: E501
            raise ValueError("Invalid value for `cost_per_minute`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cost_per_minute = cost_per_minute

    @property
    def max_time(self):
        """Gets the max_time of this TariffPrimary.  # noqa: E501

        The maximum tariff duration in meters should be more than zero.  # noqa: E501

        :return: The max_time of this TariffPrimary.  # noqa: E501
        :rtype: int
        """
        return self._max_time

    @max_time.setter
    def max_time(self, max_time):
        """Sets the max_time of this TariffPrimary.

        The maximum tariff duration in meters should be more than zero.  # noqa: E501

        :param max_time: The max_time of this TariffPrimary.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and max_time is None:  # noqa: E501
            raise ValueError("Invalid value for `max_time`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_time is not None and max_time > 43800):  # noqa: E501
            raise ValueError("Invalid value for `max_time`, must be a value less than or equal to `43800`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_time is not None and max_time < 1):  # noqa: E501
            raise ValueError("Invalid value for `max_time`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_time = max_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TariffPrimary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TariffPrimary):
            return True

        return self.to_dict() != other.to_dict()
