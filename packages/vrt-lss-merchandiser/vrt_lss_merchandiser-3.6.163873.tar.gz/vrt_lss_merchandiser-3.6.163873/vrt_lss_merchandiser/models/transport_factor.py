# coding: utf-8

"""
    VeeRoute.LSS Merchandiser

    VeeRoute.LSS Merchandiser API  # noqa: E501

    The version of the OpenAPI document: 3.6.163873
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_lss_merchandiser.configuration import Configuration


class TransportFactor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transport_type': 'TransportType',
        'speed': 'float'
    }

    attribute_map = {
        'transport_type': 'transport_type',
        'speed': 'speed'
    }

    def __init__(self, transport_type=None, speed=None, local_vars_configuration=None):  # noqa: E501
        """TransportFactor - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._transport_type = None
        self._speed = None
        self.discriminator = None

        self.transport_type = transport_type
        self.speed = speed

    @property
    def transport_type(self):
        """Gets the transport_type of this TransportFactor.  # noqa: E501


        :return: The transport_type of this TransportFactor.  # noqa: E501
        :rtype: TransportType
        """
        return self._transport_type

    @transport_type.setter
    def transport_type(self, transport_type):
        """Sets the transport_type of this TransportFactor.


        :param transport_type: The transport_type of this TransportFactor.  # noqa: E501
        :type: TransportType
        """
        if self.local_vars_configuration.client_side_validation and transport_type is None:  # noqa: E501
            raise ValueError("Invalid value for `transport_type`, must not be `None`")  # noqa: E501

        self._transport_type = transport_type

    @property
    def speed(self):
        """Gets the speed of this TransportFactor.  # noqa: E501

        Average vehicle speed multiplier.  # noqa: E501

        :return: The speed of this TransportFactor.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this TransportFactor.

        Average vehicle speed multiplier.  # noqa: E501

        :param speed: The speed of this TransportFactor.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and speed is None:  # noqa: E501
            raise ValueError("Invalid value for `speed`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                speed is not None and speed > 1000):  # noqa: E501
            raise ValueError("Invalid value for `speed`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                speed is not None and speed < 0.1):  # noqa: E501
            raise ValueError("Invalid value for `speed`, must be a value greater than or equal to `0.1`")  # noqa: E501

        self._speed = speed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportFactor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransportFactor):
            return True

        return self.to_dict() != other.to_dict()
