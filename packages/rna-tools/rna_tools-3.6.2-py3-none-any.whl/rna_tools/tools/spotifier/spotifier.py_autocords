#!/usr/bin/env python
"""

"""
import argparse
from PIL import Image, ImageChops, Image, ImageDraw, ImageFont, ImageStat
import os

def trim(im):
    """
    https://stackoverflow.com/questions/10615901/trim-whitespace-using-pil
    """
    bg = Image.new(im.mode, im.size, im.getpixel((1,1)))
    diff = ImageChops.difference(im, bg)
    diff = ImageChops.add(diff, diff, 2.0, -100)
    bbox = diff.getbbox()
    if bbox:
        return im.crop(bbox)
    else: return im

def get_parser():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)

    #parser.add_argument('-', "--", help="", default="")

    parser.add_argument("-v", "--verbose",
                        action="store_true", help="be verbose")
    parser.add_argument("-d", "--debug",
                        action="store_true", help="be verbose")
    parser.add_argument("-t", "--trim",
                        action="store_true", help="be verbose")
    parser.add_argument("-x", default=30, type=int)
    parser.add_argument("-y", default=30, type=int)
    parser.add_argument("file", help="pre-processed image", default="")# , nargs='+')
    return parser



def get_rms(im):
    stat = ImageStat.Stat(im)
    #r,g,b = stat.mean
    if 0:
        print('bg sum', stat.sum[0])
        print('bg mean', stat.mean[0])
        print('bg rms', stat.rms[0])
        print(mean)
    return stat.rms[0]


if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()

    img = Image.open(args.file)

    # parameters
    xshift = 121
    yshift = 110
    size = 100

    x0 = args.x #46
    y0 = args.y 

    # format of the plate
    PLATE_FORMAT = [
            [0, 0, 1, 1, 1, 1, 0, 0],
            [0, 1, 1, 1, 1, 1, 1, 0],
            [1, 1, 1, 1, 1, 1, 1, 1],       
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1],
            [0, 1, 1, 1, 1, 1, 1, 0],
            [0, 0, 1, 1, 1, 1, 1, 0],
            ]
    pix = [
           [338, 119],
           [525, 117],
           [661, 121],
           [796, 117],
           ]
           
    figure = [
              [1, 2, 3],
              [4, 5, 6],
              [7, 8, 9],
               [10, 11, 12],
               [13, 14, 15],
               [16, 17, 18],
               [19, 20, 21],
               [22, 23, 24],
               [25, 26, 27],
               [28, 29, 30],
               [31, 32, 33],
               [34, 35, 36],
               [37, 38, 39],
               [40, 41, 42],
               [43, 44, 45],
               [46, 48, 49],
               [61, 50, 51],
               [52, 53, 54],
               [55, 56, 57],
               [58, 59, 60],      
              ]

    x_id = 0
    y_id = 0

    spots = []
    spot_id = 1
    for row in PLATE_FORMAT:
        for i in row:
            x = x0 + (xshift * x_id)  # 150 * 3
            y = y0 + (yshift * y_id) # 120 * 3
            #print(x, y)
            if i: #  and y_id == 1:
                area = (x, y, x+size, y+size)
                cropped_img = img.crop(area)
                rms = get_rms(img)
                if args.trim and rms > 50:
                    cropped_img = trim(cropped_img)
                if args.debug:
                    cropped_img.save('auto-' + str(y_id) + '-' + str(x_id) + '.png')
                print(spot_id, '----------------',)
                spot_id += 1
                spots.append(cropped_img)
            x_id += 1
        y_id += 1 # move row down
        x_id = 0

    fig = Image.new('RGB', (len(figure[0]) * 100, len(figure) * 100))
    draw = ImageDraw.Draw(fig)
    x = 0; y = 0
    #font = ImageFont.truetype('Pillow/Tests/fonts/FreeMono.ttf', 40)
    #fnt = '/usr/local/lib/python2.7/site-packages/matplotlib/mpl-data/fonts/ttf/Helvetica.ttf'
    #font = ImageFont.truetype(fnt, 40)#, encoding="unic") # "/usr/share/fonts/truetype/freefont/FreeMono.ttf", 
    for row in figure:
        for s in row:  # spot in row
            # for center something like this https://stackoverflow.com/questions/1970807/center-middle-align-text-with-pil
            fig.paste(spots[s - 1], (x, y)) # s - 1 # index from 0
            x += 100
        # str(x) + '-' + str(y) 
        # draw.text((x + 10, y + 10), 'prp8-10', font = font, fill ="white", align="center")#, , align ="right")
        y += 100
        x = 0
    fig.show()

    outfn = os.path.splitext(args.file)[0] + '_spots.png'
    fig.save(outfn)

