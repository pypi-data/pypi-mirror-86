# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _MontagePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPhaseCorrelationOperatorPython
else:
    import _itkPhaseCorrelationOperatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPhaseCorrelationOperatorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPhaseCorrelationOperatorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
class vectoritkImageCD2(object):
    r"""Proxy of C++ std::vector< itkImageCD2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2___nonzero__)
    __bool__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2___bool__)
    __len__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2___len__)
    __getslice__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2___getslice__)
    __setslice__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2___setslice__)
    __delslice__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2___delslice__)
    __delitem__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2___delitem__)
    __getitem__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2___setitem__)
    pop = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_pop)
    append = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_append)
    empty = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_empty)
    size = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_size)
    swap = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_swap)
    begin = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_begin)
    end = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_end)
    rbegin = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_rbegin)
    rend = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_rend)
    clear = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_clear)
    get_allocator = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_get_allocator)
    pop_back = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_pop_back)
    erase = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageCD2 self) -> vectoritkImageCD2
        __init__(vectoritkImageCD2 self, vectoritkImageCD2 other) -> vectoritkImageCD2
        __init__(vectoritkImageCD2 self, std::vector< itkImageCD2_Pointer >::size_type size) -> vectoritkImageCD2
        __init__(vectoritkImageCD2 self, std::vector< itkImageCD2_Pointer >::size_type size, std::vector< itkImageCD2_Pointer >::value_type const & value) -> vectoritkImageCD2
        """
        _itkPhaseCorrelationOperatorPython.vectoritkImageCD2_swiginit(self, _itkPhaseCorrelationOperatorPython.new_vectoritkImageCD2(*args))
    push_back = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_push_back)
    front = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_front)
    back = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_back)
    assign = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_assign)
    resize = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_resize)
    insert = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_insert)
    reserve = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_reserve)
    capacity = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_capacity)
    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_vectoritkImageCD2

# Register vectoritkImageCD2 in _itkPhaseCorrelationOperatorPython:
_itkPhaseCorrelationOperatorPython.vectoritkImageCD2_swigregister(vectoritkImageCD2)

class vectoritkImageCD3(object):
    r"""Proxy of C++ std::vector< itkImageCD3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3___nonzero__)
    __bool__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3___bool__)
    __len__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3___len__)
    __getslice__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3___getslice__)
    __setslice__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3___setslice__)
    __delslice__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3___delslice__)
    __delitem__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3___delitem__)
    __getitem__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3___setitem__)
    pop = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_pop)
    append = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_append)
    empty = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_empty)
    size = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_size)
    swap = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_swap)
    begin = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_begin)
    end = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_end)
    rbegin = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_rbegin)
    rend = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_rend)
    clear = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_clear)
    get_allocator = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_get_allocator)
    pop_back = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_pop_back)
    erase = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageCD3 self) -> vectoritkImageCD3
        __init__(vectoritkImageCD3 self, vectoritkImageCD3 other) -> vectoritkImageCD3
        __init__(vectoritkImageCD3 self, std::vector< itkImageCD3_Pointer >::size_type size) -> vectoritkImageCD3
        __init__(vectoritkImageCD3 self, std::vector< itkImageCD3_Pointer >::size_type size, std::vector< itkImageCD3_Pointer >::value_type const & value) -> vectoritkImageCD3
        """
        _itkPhaseCorrelationOperatorPython.vectoritkImageCD3_swiginit(self, _itkPhaseCorrelationOperatorPython.new_vectoritkImageCD3(*args))
    push_back = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_push_back)
    front = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_front)
    back = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_back)
    assign = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_assign)
    resize = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_resize)
    insert = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_insert)
    reserve = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_reserve)
    capacity = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_capacity)
    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_vectoritkImageCD3

# Register vectoritkImageCD3 in _itkPhaseCorrelationOperatorPython:
_itkPhaseCorrelationOperatorPython.vectoritkImageCD3_swigregister(vectoritkImageCD3)


def itkImageCD2_New():
    return itkImageCD2.New()

class itkImageCD2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkImageCD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkImageCD2___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD2_Clone)
    Allocate = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD2_Allocate)
    FillBuffer = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD2_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD2_SetPixel)
    GetPixel = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD2_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD2_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD2_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD2_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD2_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD2_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD2_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkImageCD2
    cast = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkImageCD2_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCD2

        Create a new object of the class itkImageCD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCD2 in _itkPhaseCorrelationOperatorPython:
_itkPhaseCorrelationOperatorPython.itkImageCD2_swigregister(itkImageCD2)
itkImageCD2___New_orig__ = _itkPhaseCorrelationOperatorPython.itkImageCD2___New_orig__
itkImageCD2_cast = _itkPhaseCorrelationOperatorPython.itkImageCD2_cast


def itkImageCD3_New():
    return itkImageCD3.New()

class itkImageCD3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageCD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkImageCD3___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD3_Clone)
    Allocate = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD3_Allocate)
    FillBuffer = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD3_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD3_SetPixel)
    GetPixel = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD3_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD3_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD3_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD3_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD3_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD3_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageCD3_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkImageCD3
    cast = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkImageCD3_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCD3

        Create a new object of the class itkImageCD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCD3 in _itkPhaseCorrelationOperatorPython:
_itkPhaseCorrelationOperatorPython.itkImageCD3_swigregister(itkImageCD3)
itkImageCD3___New_orig__ = _itkPhaseCorrelationOperatorPython.itkImageCD3___New_orig__
itkImageCD3_cast = _itkPhaseCorrelationOperatorPython.itkImageCD3_cast

class itkImageSourceICD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageSourceICD2_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageSourceICD2_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageSourceICD2_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageSourceICD2_MakeOutput)
    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkImageSourceICD2
    cast = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkImageSourceICD2_cast)

# Register itkImageSourceICD2 in _itkPhaseCorrelationOperatorPython:
_itkPhaseCorrelationOperatorPython.itkImageSourceICD2_swigregister(itkImageSourceICD2)
itkImageSourceICD2_cast = _itkPhaseCorrelationOperatorPython.itkImageSourceICD2_cast

class itkImageSourceICD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageSourceICD3_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageSourceICD3_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageSourceICD3_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageSourceICD3_MakeOutput)
    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkImageSourceICD3
    cast = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkImageSourceICD3_cast)

# Register itkImageSourceICD3 in _itkPhaseCorrelationOperatorPython:
_itkPhaseCorrelationOperatorPython.itkImageSourceICD3_swigregister(itkImageSourceICD3)
itkImageSourceICD3_cast = _itkPhaseCorrelationOperatorPython.itkImageSourceICD3_cast

class itkImageToImageFilterICD2ICD2(itkImageSourceICD2):
    r"""Proxy of C++ itkImageToImageFilterICD2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_SetInput)
    GetInput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_GetDirectionTolerance)
    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkImageToImageFilterICD2ICD2
    cast = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_cast)

# Register itkImageToImageFilterICD2ICD2 in _itkPhaseCorrelationOperatorPython:
_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_swigregister(itkImageToImageFilterICD2ICD2)
itkImageToImageFilterICD2ICD2_cast = _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_cast

class itkImageToImageFilterICD3ICD3(itkImageSourceICD3):
    r"""Proxy of C++ itkImageToImageFilterICD3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_SetInput)
    GetInput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_GetDirectionTolerance)
    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkImageToImageFilterICD3ICD3
    cast = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_cast)

# Register itkImageToImageFilterICD3ICD3 in _itkPhaseCorrelationOperatorPython:
_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_swigregister(itkImageToImageFilterICD3ICD3)
itkImageToImageFilterICD3ICD3_cast = _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_cast


def itkPhaseCorrelationOperatorD2_New():
    return itkPhaseCorrelationOperatorD2.New()

class itkPhaseCorrelationOperatorD2(itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkPhaseCorrelationOperatorD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_SetMovingImage)
    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkPhaseCorrelationOperatorD2
    cast = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseCorrelationOperatorD2

        Create a new object of the class itkPhaseCorrelationOperatorD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseCorrelationOperatorD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseCorrelationOperatorD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseCorrelationOperatorD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseCorrelationOperatorD2 in _itkPhaseCorrelationOperatorPython:
_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_swigregister(itkPhaseCorrelationOperatorD2)
itkPhaseCorrelationOperatorD2___New_orig__ = _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2___New_orig__
itkPhaseCorrelationOperatorD2_cast = _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_cast


def itkPhaseCorrelationOperatorD3_New():
    return itkPhaseCorrelationOperatorD3.New()

class itkPhaseCorrelationOperatorD3(itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkPhaseCorrelationOperatorD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_SetMovingImage)
    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkPhaseCorrelationOperatorD3
    cast = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseCorrelationOperatorD3

        Create a new object of the class itkPhaseCorrelationOperatorD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseCorrelationOperatorD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseCorrelationOperatorD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseCorrelationOperatorD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseCorrelationOperatorD3 in _itkPhaseCorrelationOperatorPython:
_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_swigregister(itkPhaseCorrelationOperatorD3)
itkPhaseCorrelationOperatorD3___New_orig__ = _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3___New_orig__
itkPhaseCorrelationOperatorD3_cast = _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_cast


def itkPhaseCorrelationOperatorF2_New():
    return itkPhaseCorrelationOperatorF2.New()

class itkPhaseCorrelationOperatorF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkPhaseCorrelationOperatorF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_SetMovingImage)
    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkPhaseCorrelationOperatorF2
    cast = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseCorrelationOperatorF2

        Create a new object of the class itkPhaseCorrelationOperatorF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseCorrelationOperatorF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseCorrelationOperatorF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseCorrelationOperatorF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseCorrelationOperatorF2 in _itkPhaseCorrelationOperatorPython:
_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_swigregister(itkPhaseCorrelationOperatorF2)
itkPhaseCorrelationOperatorF2___New_orig__ = _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2___New_orig__
itkPhaseCorrelationOperatorF2_cast = _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_cast


def itkPhaseCorrelationOperatorF3_New():
    return itkPhaseCorrelationOperatorF3.New()

class itkPhaseCorrelationOperatorF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkPhaseCorrelationOperatorF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_SetMovingImage)
    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkPhaseCorrelationOperatorF3
    cast = _swig_new_static_method(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseCorrelationOperatorF3

        Create a new object of the class itkPhaseCorrelationOperatorF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseCorrelationOperatorF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseCorrelationOperatorF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseCorrelationOperatorF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseCorrelationOperatorF3 in _itkPhaseCorrelationOperatorPython:
_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_swigregister(itkPhaseCorrelationOperatorF3)
itkPhaseCorrelationOperatorF3___New_orig__ = _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3___New_orig__
itkPhaseCorrelationOperatorF3_cast = _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def phase_correlation_operator(*args, **kwargs):
    """Procedural interface for PhaseCorrelationOperator"""
    import itk
    instance = itk.PhaseCorrelationOperator.New(*args, **kwargs)
    return instance.__internal_call__()

def phase_correlation_operator_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.PhaseCorrelationOperator, itkTemplate.itkTemplate):
        filter_object = itk.PhaseCorrelationOperator.values()[0]
    else:
        filter_object = itk.PhaseCorrelationOperator

    phase_correlation_operator.__doc__ = filter_object.__doc__
    phase_correlation_operator.__doc__ += "\n Args are Input(s) to the filter.\n"
    phase_correlation_operator.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.PhaseCorrelationOperator, itkTemplate.itkTemplate):
        phase_correlation_operator.__doc__ += itkHelpers.filter_args(filter_object)[0]
        phase_correlation_operator.__doc__ += "\n"
        phase_correlation_operator.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        phase_correlation_operator.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_source(*args, **kwargs):
    """Procedural interface for ImageSource"""
    import itk
    instance = itk.ImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def image_source_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageSource, itkTemplate.itkTemplate):
        filter_object = itk.ImageSource.values()[0]
    else:
        filter_object = itk.ImageSource

    image_source.__doc__ = filter_object.__doc__
    image_source.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_source.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ImageSource, itkTemplate.itkTemplate):
        image_source.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_source.__doc__ += "\n"
        image_source.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_source.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk
    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ImageToImageFilter.values()[0]
    else:
        filter_object = itk.ImageToImageFilter

    image_to_image_filter.__doc__ = filter_object.__doc__
    image_to_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_to_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        image_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_to_image_filter.__doc__ += "\n"
        image_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_to_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



