.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.pubsub.core.topicdefnprovider

.. highlight:: python



.. _wx.lib.pubsub.core.topicdefnprovider.TopicDefnDeserialClass:

==========================================================================================================================================
|phoenix_title|  **wx.lib.pubsub.core.topicdefnprovider.TopicDefnDeserialClass**
==========================================================================================================================================

Convert a nested class tree as a topic definition tree. Format: the class
name is the topic name, its doc string is its description. The topic's
message data specification is determined by inspecting a class method called
the same as SPEC_METHOD_NAME. The doc string of that method is parsed to
extract the description for each message data.
 



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>TopicDefnDeserialClass</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.pubsub.core.topicdefnprovider.TopicDefnDeserialClass_inheritance.png" alt="Inheritance diagram of TopicDefnDeserialClass" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.pubsub.core.topicdefnprovider.TopicDefnDeserialClass.html" title="wx.lib.pubsub.core.topicdefnprovider.TopicDefnDeserialClass" alt="" coords="5,83,424,112"/> <area shape="rect" id="node2" href="wx.lib.pubsub.core.topicdefnprovider.ITopicDefnDeserializer.html" title="wx.lib.pubsub.core.topicdefnprovider.ITopicDefnDeserializer" alt="" coords="9,5,421,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.lib.pubsub.core.topicdefnprovider.ITopicDefnDeserializer`

|


|method_summary| Methods Summary
================================

===================================================================================== ================================================================================
:meth:`~wx.lib.pubsub.core.topicdefnprovider.TopicDefnDeserialClass.__init__`         If pyClassObj is given, it is an object that contains nested
:meth:`~wx.lib.pubsub.core.topicdefnprovider.TopicDefnDeserialClass.getDefinedTopics` 
:meth:`~wx.lib.pubsub.core.topicdefnprovider.TopicDefnDeserialClass.getNextTopic`     Get the next topic definition available from the data. The return
:meth:`~wx.lib.pubsub.core.topicdefnprovider.TopicDefnDeserialClass.getTreeDoc`       Get the docstring for the topic tree.
:meth:`~wx.lib.pubsub.core.topicdefnprovider.TopicDefnDeserialClass.resetIter`        Called by the TopicDefnProvider if it needs to
===================================================================================== ================================================================================


|


|api| Class API
===============


.. class:: TopicDefnDeserialClass(ITopicDefnDeserializer)

   Convert a nested class tree as a topic definition tree. Format: the class
   name is the topic name, its doc string is its description. The topic's
   message data specification is determined by inspecting a class method called
   the same as SPEC_METHOD_NAME. The doc string of that method is parsed to
   extract the description for each message data.
    

   .. method:: __init__(self, pyClassObj=None)

      If pyClassObj is given, it is an object that contains nested
      classes defining root topics; the root topics contain nested
      classes defining subtopics; etc.


   .. method:: getDefinedTopics(self)


   .. method:: getNextTopic(self)

      Get the next topic definition available from the data. The return
      must be an instance of TopicDefn. Must return None when no topics
      are left.


   .. method:: getTreeDoc(self)

      Get the docstring for the topic tree.


   .. method:: resetIter(self)

      Called by the TopicDefnProvider if it needs to
      restart the topic iteration. Override this only if special action needed,
      such as resetting a file pointer to beginning of file.


