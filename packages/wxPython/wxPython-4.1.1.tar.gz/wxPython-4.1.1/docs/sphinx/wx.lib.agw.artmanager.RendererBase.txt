.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.artmanager

.. highlight:: python



.. _wx.lib.agw.artmanager.RendererBase:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.artmanager.RendererBase**
==========================================================================================================================================

Base class for all theme renderers. 



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>RendererBase</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.artmanager.RendererBase_inheritance.png" alt="Inheritance diagram of RendererBase" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.artmanager.RendererBase.html" title="wx.lib.agw.artmanager.RendererBase" alt="" coords="5,5,269,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:class:`wx.lib.agw.artmanager.RendererMSOffice2007`, :class:`wx.lib.agw.artmanager.RendererXP`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.artmanager.RendererBase.__init__`                             Default class constructor. Intentionally empty.
:meth:`~wx.lib.agw.artmanager.RendererBase.DrawBitmapArea`                       Draws the area below a bitmap and the bitmap itself using a gradient shading.
:meth:`~wx.lib.agw.artmanager.RendererBase.DrawBitmapBorders`                    Draws borders for a bitmap.
:meth:`~wx.lib.agw.artmanager.RendererBase.DrawButtonBorders`                    Draws borders for buttons.
:meth:`~wx.lib.agw.artmanager.RendererBase.GetFont`                              Returns the font used for text.
:meth:`~wx.lib.agw.artmanager.RendererBase.GetMenuFaceColour`                    Returns the foreground colour for the menu.
:meth:`~wx.lib.agw.artmanager.RendererBase.GetTextColourDisable`                 Returns the colour used for text colour when disabled.
:meth:`~wx.lib.agw.artmanager.RendererBase.GetTextColourEnable`                  Returns the colour used for text colour when enabled.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: RendererBase(object)

   Base class for all theme renderers. 

   .. method:: __init__(self)

      Default class constructor. Intentionally empty. 


   .. method:: DrawBitmapArea(self, dc, xpm_name, rect, baseColour, flipSide)

      Draws the area below a bitmap and the bitmap itself using a gradient shading.
      
      :param `dc`: an instance of :class:`wx.DC`;
      :param string `xpm_name`: a name of a XPM bitmap;
      :param wx.Rect `rect`: the bitmap client rectangle;
      :param `baseColour`: a valid :class:`wx.Colour` for the bitmap background;
      :param bool `flipSide`: ``True`` to flip the gradient direction, ``False`` otherwise.


   .. method:: DrawBitmapBorders(self, dc, rect, penColour, bitmapBorderUpperLeftPen)

      Draws borders for a bitmap.
      
      :param `dc`: an instance of :class:`wx.DC`;
      :param wx.Rect `rect`: the button's client rectangle;
      :param `penColour`: a valid :class:`wx.Colour` for the pen border;
      :param `bitmapBorderUpperLeftPen`: a valid :class:`wx.Colour` for the pen upper
       left border.


   .. method:: DrawButtonBorders(self, dc, rect, penColour, brushColour)

      Draws borders for buttons.
      
      :param `dc`: an instance of :class:`wx.DC`;
      :param wx.Rect `rect`: the button's client rectangle;
      :param `penColour`: a valid :class:`wx.Colour` for the pen border;
      :param `brushColour`: a valid :class:`wx.Colour` for the brush.


   .. method:: GetFont(self)

      Returns the font used for text.
      
      :return: An instance of :class:`wx.Font`.


   .. method:: GetMenuFaceColour(self)

      Returns the foreground colour for the menu.
      
      :return: An instance of :class:`wx.Colour`.


   .. method:: GetTextColourDisable(self)

      Returns the colour used for text colour when disabled.
      
      :return: An instance of :class:`wx.Colour`.


   .. method:: GetTextColourEnable(self)

      Returns the colour used for text colour when enabled.
      
      :return: An instance of :class:`wx.Colour`.


