.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.Scrolled:

==========================================================================================================================================
|phoenix_title|  **wx.Scrolled**
==========================================================================================================================================

The :ref:`wx.Scrolled`  class manages scrolling for its client area, transforming the coordinates according to the scrollbar positions, and setting the scroll positions, thumb sizes and ranges according to the area in view.          

There are two commonly used (but not the only possible!) specializations of this class: 



- :ref:`wx.ScrolledWindow`, aka Scrolled<wxPanel>, is equivalent to :ref:`wx.ScrolledWindow`  from earlier versions. Derived from :ref:`wx.Panel`, it shares :ref:`wx.Panel`'s behaviour with regard to ``TAB`` traversal and focus handling. Use this if the scrolled window will have child controls. 
- :ref:`wx.ScrolledCanvas`, aka Scrolled<wxWindow>, derives from :ref:`wx.Window`  and so doesn't handle children specially. This is suitable e.g. for implementing scrollable controls such as tree or list controls. 





Starting from version 2.4 of wxWidgets, there are several ways to use a  :ref:`wx.ScrolledWindow`  (and now :ref:`wx.Scrolled`). In particular, there are three ways to set the size of the scrolling area: 

One way is to set the scrollbars directly using a call to :meth:`~wx.Scrolled.SetScrollbars`. This is the way it used to be in any previous version of wxWidgets and it will be kept for backwards compatibility. 

An additional method of manual control, which requires a little less computation of your own, is to set the total size of the scrolling area by calling either :meth:`wx.Window.SetVirtualSize` , or :meth:`wx.Window.FitInside` , and setting the scrolling increments for it by calling :meth:`~wx.Scrolled.SetScrollRate`. Scrolling in some orientation is enabled by setting a non-zero increment for it. 

The most automatic and newest way is to simply let sizers determine the scrolling area. This is now the default when you set an interior sizer into a :ref:`wx.Scrolled`  with :meth:`wx.Window.SetSizer` . The scrolling area will be set to the size requested by the sizer and the scrollbars will be assigned for each orientation according to the need for them and the scrolling increment set by :meth:`~wx.Scrolled.SetScrollRate`. As above, scrolling is only enabled in orientations with a non-zero increment. You can influence the minimum size of the scrolled area controlled by a sizer by calling `Window.SetVirtualSizeHints().` (Calling :meth:`~wx.Scrolled.SetScrollbars`  has analogous effects in wxWidgets 2.4 â€“  in later versions it may not continue to override the sizer.) 

Note that if maximum size hints are still supported by `Window.SetVirtualSizeHints(),` use them at your own dire risk. They may or may not have been removed for 2.4, but it really only makes sense to set minimum size hints here. We should probably replace `Window.SetVirtualSizeHints()` with `Window.SetMinVirtualSize()` or similar and remove it entirely in future. 



As with all windows, an application can draw onto a :ref:`wx.Scrolled`  using a :ref:`device context <device contexts>`. 

You have the option of handling the OnPaint handler or overriding the :meth:`wx.Scrolled.OnDraw`   function, which is passed a pre-scrolled device context (prepared by :meth:`wx.Scrolled.DoPrepareDC` ). 

If you don't wish to calculate your own scrolling, you must call :meth:`~wx.Scrolled.DoPrepareDC`  when not drawing from within :meth:`~wx.Scrolled.OnDraw`, to set the device origin for the device context according to the current scroll position. 

A :ref:`wx.Scrolled`  will normally scroll itself and therefore its child windows as well. It might however be desired to scroll a different window than itself: e.g. when designing a spreadsheet, you will normally only have to scroll the (usually white) cell area, whereas the (usually grey) label area will scroll very differently. For this special purpose, you can call :meth:`~wx.Scrolled.SetTargetWindow`  which means that pressing the scrollbars will scroll a different window. 

Note that the underlying system knows nothing about scrolling coordinates, so that all system functions (mouse events, expose events, refresh calls etc) as well as the position of subwindows are relative to the "physical" origin of the scrolled window. If the user insert a child window at position (10,10) and scrolls the window down 100 pixels (moving the child window out of the visible area), the child window will report a position of (10,-90). 





.. _Scrolled-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  

- ``wx.HSCROLL``: If this style is specified and ``VSCROLL``  isn't, the window will be scrollable only in horizontal direction (by default, i.e. if neither this style nor ``VSCROLL``  is specified, it scrolls in both directions).  
- ``wx.VSCROLL``: If this style is specified and ``HSCROLL``  isn't, the window will be scrollable only in vertical direction (by default, i.e. if neither this style nor ``HSCROLL``  is specified, it scrolls in both directions).  
- ``wx.ALWAYS_SHOW_SB``: Since wxWidgets 2.9.5, specifying this style makes the window always show its scrollbars, even if they are not used. See :meth:`~wx.Scrolled.ShowScrollbars`.  
- ``wx.RETAINED``: Uses a backing pixmap to speed refreshes. Motif only.  








.. _Scrolled-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.ScrollWinEvent` parameter.


- EVT_SCROLLWIN: Process all scroll events.  
- EVT_SCROLLWIN_TOP: Process  ``wxEVT_SCROLLWIN_TOP``   scroll-to-top events.   
- EVT_SCROLLWIN_BOTTOM: Process  ``wxEVT_SCROLLWIN_BOTTOM``   scroll-to-bottom events.   
- EVT_SCROLLWIN_LINEUP: Process  ``wxEVT_SCROLLWIN_LINEUP``   line up events.   
- EVT_SCROLLWIN_LINEDOWN: Process  ``wxEVT_SCROLLWIN_LINEDOWN``   line down events.   
- EVT_SCROLLWIN_PAGEUP: Process  ``wxEVT_SCROLLWIN_PAGEUP``   page up events.   
- EVT_SCROLLWIN_PAGEDOWN: Process  ``wxEVT_SCROLLWIN_PAGEDOWN``   page down events.   
- EVT_SCROLLWIN_THUMBTRACK: Process  ``wxEVT_SCROLLWIN_THUMBTRACK``   thumbtrack events (frequent events sent as the user drags the thumbtrack).   
- EVT_SCROLLWIN_THUMBRELEASE: Process  ``wxEVT_SCROLLWIN_THUMBRELEASE``   thumb release events.   








         



.. versionadded:: 2.9.0
   The :ref:`wx.Scrolled`  template exists since version 2.9.0. In older versions, only :ref:`wx.ScrolledWindow`  (equivalent of Scrolled<wxPanel>) was available.  







.. note:: 

   Use :ref:`wx.Scrolled`  for applications where the user scrolls by a fixed amount, and where a 'page' can be interpreted to be the current visible portion of the window. For more sophisticated applications, use the :ref:`wx.Scrolled`  implementation as a guide to build your own scroll behaviour or use :ref:`wx.VScrolledWindow`  or its variants.  







.. note:: 

   See :meth:`wx.Scrolled.Create`   if you want to use :ref:`wx.Scrolled`  with a custom class.  







.. note:: 

   Don't confuse ScrollWinEvents generated by this class with :ref:`wx.ScrollEvent`  objects generated by :ref:`wx.ScrollBar`  and :ref:`wx.Slider`.  







.. seealso:: :ref:`wx.ScrollBar`, :ref:`wx.ClientDC`, :ref:`wx.PaintDC`, :ref:`wx.VScrolledWindow`, :ref:`wx.HScrolledWindow`, :ref:`wx.HVScrolledWindow`,   







.. todo:: review docs for this class replacing SetVirtualSizeHints() with SetMinClientSize().   







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Scrolled</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.Scrolled_inheritance.png" alt="Inheritance diagram of Scrolled" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Scrolled.html" title="wx.Scrolled" alt="" coords="5,101,103,131"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.grid.Grid`, :ref:`wx.html.HtmlWindow`, :ref:`wx.PreviewCanvas`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.Scrolled.__init__`                                                    Default constructor.
:meth:`~wx.Scrolled.AdjustScrollbars`                                            
:meth:`~wx.Scrolled.CalcScrolledPosition`                                        Translates the logical coordinates to the device ones.
:meth:`~wx.Scrolled.CalcUnscrolledPosition`                                      Translates the device coordinates to the logical ones.
:meth:`~wx.Scrolled.Create`                                                      Creates the window for two-step construction.
:meth:`~wx.Scrolled.DisableKeyboardScrolling`                                    Disable use of keyboard keys for scrolling.
:meth:`~wx.Scrolled.DoPrepareDC`                                                 Call this function to prepare the device context for drawing a scrolled image.
:meth:`~wx.Scrolled.EnableScrolling`                                             Enable or disable use of :meth:`wx.Window.ScrollWindow`   for scrolling.
:meth:`~wx.Scrolled.GetClassDefaultAttributes`                                   
:meth:`~wx.Scrolled.GetScaleX`                                                   
:meth:`~wx.Scrolled.GetScaleY`                                                   
:meth:`~wx.Scrolled.GetScrollLines`                                              
:meth:`~wx.Scrolled.GetScrollPageSize`                                           
:meth:`~wx.Scrolled.GetScrollPixelsPerUnit`                                      Get the number of pixels per scroll unit (line), in each direction, as set by :meth:`~Scrolled.SetScrollbars` .
:meth:`~wx.Scrolled.GetSizeAvailableForScrollTarget`                             Function which must be overridden to implement the size available for the scroll target for the given size of the main window.
:meth:`~wx.Scrolled.GetTargetRect`                                               
:meth:`~wx.Scrolled.GetTargetWindow`                                             
:meth:`~wx.Scrolled.GetViewStart`                                                Get the position at which the visible portion of the window starts.
:meth:`~wx.Scrolled.IsAutoScrolling`                                             Are we generating the autoscroll events?
:meth:`~wx.Scrolled.IsRetained`                                                  Motif only: ``True`` if the window has a backing bitmap.
:meth:`~wx.Scrolled.OnDraw`                                                      Called by the default paint event handler to allow the application to define painting behaviour without having to worry about calling :meth:`~Scrolled.DoPrepareDC` .
:meth:`~wx.Scrolled.PrepareDC`                                                   This function is for backwards compatibility only and simply calls :meth:`~Scrolled.DoPrepareDC`   now.
:meth:`~wx.Scrolled.Scroll`                                                      Scrolls a window so the view start is at the given point.
:meth:`~wx.Scrolled.SendAutoScrollEvents`                                        This method can be overridden in a derived class to forbid sending the auto scroll events - note that unlike :meth:`~Scrolled.StopAutoScrolling`   it doesn't stop the timer, so it will be called repeatedly and will typically return different values depending on the current mouse position.
:meth:`~wx.Scrolled.SetScale`                                                    
:meth:`~wx.Scrolled.SetScrollPageSize`                                           
:meth:`~wx.Scrolled.SetScrollRate`                                               Set the horizontal and vertical scrolling increment only.
:meth:`~wx.Scrolled.SetScrollbars`                                               Sets up vertical and/or horizontal scrollbars.
:meth:`~wx.Scrolled.SetTargetRect`                                               
:meth:`~wx.Scrolled.SetTargetWindow`                                             Call this function to tell :ref:`wx.Scrolled`  to perform the actual scrolling on a different window (and not on itself).
:meth:`~wx.Scrolled.ShouldScrollToChildOnFocus`                                  This method can be overridden in a derived class to prevent scrolling the child window into view automatically when it gets focus.
:meth:`~wx.Scrolled.ShowScrollbars`                                              Set the scrollbar visibility.
:meth:`~wx.Scrolled.StopAutoScrolling`                                           Stop generating the scroll events when mouse is held outside the window.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.Scrolled.ScaleX`                                                      See :meth:`~wx.Scrolled.GetScaleX`
:attr:`~wx.Scrolled.ScaleY`                                                      See :meth:`~wx.Scrolled.GetScaleY`
:attr:`~wx.Scrolled.TargetRect`                                                  See :meth:`~wx.Scrolled.GetTargetRect` and :meth:`~wx.Scrolled.SetTargetRect`
:attr:`~wx.Scrolled.TargetWindow`                                                See :meth:`~wx.Scrolled.GetTargetWindow` and :meth:`~wx.Scrolled.SetTargetWindow`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.Scrolled(T)

   **Possible constructors**::

       Scrolled()
       
       Scrolled(parent, id=-1, pos=DefaultPosition, size=DefaultSize,
                style=HSCROLL|VSCROLL, name="scrolledWindow")
       
   
   The Scrolled class manages scrolling for its client area,
   transforming the coordinates according to the scrollbar positions, and
   setting the scroll positions, thumb sizes and ranges according to the
   area in view.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=-1, pos=DefaultPosition, size=DefaultSize, style=HSCROLL|VSCROLL, name="scrolledWindow")`
      
      Constructor.                  
      
      
      
      
      :param `parent`: Parent window.   
      :type `parent`: wx.Window
      :param `id`: Window identifier. The value  ``ID_ANY``   indicates a default value.    
      :type `id`: wx.WindowID
      :param `pos`: Window position. If a position of :ref:`wx.DefaultPosition`  is specified then a default position is chosen.   
      :type `pos`: wx.Point
      :param `size`: Window size. If a size of :ref:`wx.DefaultSize`  is specified then the window is sized appropriately.   
      :type `size`: wx.Size
      :param `style`: Window style. See :ref:`wx.Scrolled`.   
      :type `style`: long
      :param `name`: Window name.  
      :type `name`: string
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. note:: 
      
         The window is initially created without visible scrollbars. Call :meth:`SetScrollbars`   to specify how big the virtual window size should be.   
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AdjustScrollbars(self)






   .. method:: CalcScrolledPosition(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **CalcScrolledPosition** `(self, x, y)`
      
      Translates the logical coordinates to the device ones.                  
      
      For example, if a window is scrolled 10 pixels to the bottom, the device coordinates of the origin are (0, 0) (as always), but the logical coordinates are (0, 10) and so the call to CalcScrolledPosition(0, 10, xx, yy) will return 0 in yy. 
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **CalcScrolledPosition** `(self, pt)`
      
      
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      :rtype: :ref:`wx.Point`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: CalcUnscrolledPosition(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **CalcUnscrolledPosition** `(self, x, y)`
      
      Translates the device coordinates to the logical ones.                  
      
      For example, if a window is scrolled 10 pixels to the bottom, the device coordinates of the origin are (0, 0) (as always), but the logical coordinates are (0, 10) and so the call to CalcUnscrolledPosition(0, 0, xx, yy) will return 10 in yy. 
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **CalcUnscrolledPosition** `(self, pt)`
      
      
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      :rtype: :ref:`wx.Point`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Create(self, parent, id=-1, pos=DefaultPosition, size=DefaultSize, style=HSCROLL|VSCROLL, name="scrolledWindow")

      Creates the window for two-step construction.                  

      Derived classes should call or replace this function. If it is not replaced, bear in mind that it calls `T.Create()` through the global function :meth:`CreateScrolled`   so if `T.Create()` has a different signature than :meth:`wx.Scrolled.Create`   you should implement overloaded :meth:`CreateScrolled`   which would call `T.Create()` in the correct manner. 

                


      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string




      :rtype: `bool`







      .. seealso:: :meth:`Scrolled.__init__`   and :meth:`CreateScrolled`   for details.   








   .. method:: DisableKeyboardScrolling(self)

      Disable use of keyboard keys for scrolling.                  

      By default cursor movement keys (including Home, End, Page Up and Down) are used to scroll the window appropriately. If the derived class uses these keys for something else, e.g. changing the currently selected item, this function can be used to disable this behaviour as it's not only not necessary then but can actually be actively harmful if another object forwards a keyboard event corresponding to one of the above keys to us using ProcessWindowEvent() because the event will always be processed which can be undesirable. 

                 



      .. versionadded:: 2.9.1 
     








   .. method:: DoPrepareDC(self, dc)

      Call this function to prepare the device context for drawing a scrolled image.                  

      It sets the device origin according to the current scroll position. :meth:`DoPrepareDC`   is called automatically within the default  ``wxEVT_PAINT``   event handler, so your  :meth:`OnDraw`   override will be passed an already 'pre-scrolled' device context. However, if you wish to draw from outside of :meth:`OnDraw`   (e.g. from your own  ``wxEVT_PAINT``   handler), you must call this function yourself. 

      For example: ::

                  def OnEvent(self, event):

                      dc = wx.ClientDC(self)
                      self.DoPrepareDC(dc)

                      dc.SetPen(wx.BLACK_PEN)

                      x, y = event.GetPosition()

                      if (xpos > -1 and ypos > -1 and event.Dragging()):
                          dc.DrawLine(xpos, ypos, x, y)

                      xpos = x
                      ypos = y



      Notice that the function sets the origin by moving it relatively to the current origin position, so you shouldn't change the origin before calling :meth:`DoPrepareDC`   or, if you do, reset it to (0, 0) later. If you call :meth:`DoPrepareDC`   immediately after device context creation, as in the example above, this problem doesn't arise, of course, so it is customary to do it like this.                  


      :param `dc`: 
      :type `dc`: wx.DC







   .. method:: EnableScrolling(self, xScrolling, yScrolling)

      Enable or disable use of :meth:`wx.Window.ScrollWindow`   for scrolling.                  

      By default, when a scrolled window is logically scrolled, :meth:`wx.Window.ScrollWindow`   is called on the underlying window which scrolls the window contents and only invalidates the part of the window newly brought into view. If ``False`` is passed as an argument, then this "physical scrolling" is disabled and the window is entirely invalidated whenever it is scrolled by calling :meth:`wx.Window.Refresh` . 

      It should be rarely necessary to disable physical scrolling, so this method shouldn't be called in normal circumstances. 




      :param `xScrolling`: If ``True``, enables physical scrolling in the x direction.   
      :type `xScrolling`: bool
      :param `yScrolling`: If ``True``, enables physical scrolling in the y direction.   
      :type `yScrolling`: bool






                  





   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: GetScaleX(self)



      :rtype: `float`








   .. method:: GetScaleY(self)



      :rtype: `float`








   .. method:: GetScrollLines(self, orient)




      :param `orient`: 
      :type `orient`: int




      :rtype: `int`








   .. method:: GetScrollPageSize(self, orient)




      :param `orient`: 
      :type `orient`: int




      :rtype: `int`








   .. method:: GetScrollPixelsPerUnit(self)

      Get the number of pixels per scroll unit (line), in each direction, as set by :meth:`SetScrollbars` .                  

      A value of zero indicates no scrolling in that direction. 







      :rtype: `tuple`



      




   .. method:: GetSizeAvailableForScrollTarget(self, size)

      Function which must be overridden to implement the size available for the scroll target for the given size of the main window.                  

      This method must be overridden if :meth:`SetTargetWindow`   is used (it is never called otherwise). The implementation should decrease the `size`  to account for the size of the non-scrollable parts of the main window and return only the size available for the scrollable window itself. E.g. in the example given in :meth:`SetTargetWindow`   documentation the function would subtract the height of the header window from the vertical component of `size`.                  


      :param `size`: 
      :type `size`: wx.Size




      :rtype: :ref:`wx.Size`








   .. method:: GetTargetRect(self)



      :rtype: :ref:`wx.Rect`








   .. method:: GetTargetWindow(self)



      :rtype: :ref:`wx.Window`








   .. method:: GetViewStart(self)

      Get the position at which the visible portion of the window starts.                  







      :rtype: `tuple`



      




   .. method:: IsAutoScrolling(self)

      Are we generating the autoscroll events?                  

      :rtype: `bool`








   .. method:: IsRetained(self)

      Motif only: ``True`` if the window has a backing bitmap.                  

      :rtype: `bool`








   .. method:: OnDraw(self, dc)

      Called by the default paint event handler to allow the application to define painting behaviour without having to worry about calling :meth:`DoPrepareDC` .                  

      Instead of overriding this function you may also just process the paint event in the derived class as usual, but then you will have to call :meth:`DoPrepareDC`   yourself.                  


      :param `dc`: 
      :type `dc`: wx.DC







   .. method:: PrepareDC(self, dc)

      This function is for backwards compatibility only and simply calls :meth:`DoPrepareDC`   now.                  

      Notice that it is not called by the default paint event handle (:meth:`DoPrepareDC`   is), so overriding this method in your derived class is useless.                  


      :param `dc`: 
      :type `dc`: wx.DC







   .. method:: Scroll(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **Scroll** `(self, x, y)`
      
      Scrolls a window so the view start is at the given point.                  
      
      
      
      
      :param `x`: The x position to scroll to, in scroll units.   
      :type `x`: int
      :param `y`: The y position to scroll to, in scroll units.  
      :type `y`: int
      
      
      
      
      
      
                        
      
      
      
      .. note:: 
      
         The positions are in scroll units, not pixels, so to convert to pixels you will have to multiply by the number of pixels per scroll increment. If either parameter is :ref:`wx.DefaultCoord`  (-1), that position will be ignored (no change in that direction).  
      
      
      
      
      
      
      
      .. seealso:: :meth:`SetScrollbars` , :meth:`GetScrollPixelsPerUnit`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **Scroll** `(self, pt)`
      
      This is an overload of :meth:`Scroll` ; see that function for more info.                  
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SendAutoScrollEvents(self, event)

      This method can be overridden in a derived class to forbid sending the auto scroll events - note that unlike :meth:`StopAutoScrolling`   it doesn't stop the timer, so it will be called repeatedly and will typically return different values depending on the current mouse position.                  

      The base class version just returns ``True``.                  


      :param `event`: 
      :type `event`: wx.ScrollWinEvent




      :rtype: `bool`








   .. method:: SetScale(self, xs, ys)




      :param `xs`: 
      :type `xs`: float
      :param `ys`: 
      :type `ys`: float







   .. method:: SetScrollPageSize(self, orient, pageSize)




      :param `orient`: 
      :type `orient`: int
      :param `pageSize`: 
      :type `pageSize`: int







   .. method:: SetScrollRate(self, xstep, ystep)

      Set the horizontal and vertical scrolling increment only.                  

      See the pixelsPerUnit parameter in :meth:`SetScrollbars` .                  


      :param `xstep`: 
      :type `xstep`: int
      :param `ystep`: 
      :type `ystep`: int







   .. method:: SetScrollbars(self, pixelsPerUnitX, pixelsPerUnitY, noUnitsX, noUnitsY, xPos=0, yPos=0, noRefresh=False)

      Sets up vertical and/or horizontal scrollbars.                  

      The first pair of parameters give the number of pixels per 'scroll step', i.e. amount moved when the up or down scroll arrows are pressed. The second pair gives the length of scrollbar in scroll steps, which sets the size of the virtual window. 

      `xPos`  and `yPos`  optionally specify a position to scroll to immediately. 

      For example, the following gives a window horizontal and vertical scrollbars with 20 pixels per scroll step, and a size of 50 steps (1000 pixels) in each direction: ::

                  window.SetScrollbars(20, 20, 50, 50)



      :ref:`wx.Scrolled`  manages the page size itself, using the current client window size as the page size. 

      Note that for more sophisticated scrolling applications, for example where scroll steps may be variable according to the position in the document, it will be necessary to derive a new class from :ref:`wx.Window`, overriding OnSize() and adjusting the scrollbars appropriately. 




      :param `pixelsPerUnitX`: Pixels per scroll unit in the horizontal direction.   
      :type `pixelsPerUnitX`: int
      :param `pixelsPerUnitY`: Pixels per scroll unit in the vertical direction.   
      :type `pixelsPerUnitY`: int
      :param `noUnitsX`: Number of units in the horizontal direction.   
      :type `noUnitsX`: int
      :param `noUnitsY`: Number of units in the vertical direction.   
      :type `noUnitsY`: int
      :param `xPos`: Position to initialize the scrollbars in the horizontal direction, in scroll units.   
      :type `xPos`: int
      :param `yPos`: Position to initialize the scrollbars in the vertical direction, in scroll units.   
      :type `yPos`: int
      :param `noRefresh`: Will not refresh window if ``True``.  
      :type `noRefresh`: bool
















                  



      .. seealso:: :meth:`wx.Window.SetVirtualSize`     








   .. method:: SetTargetRect(self, rect)




      :param `rect`: 
      :type `rect`: wx.Rect







   .. method:: SetTargetWindow(self, window)

      Call this function to tell :ref:`wx.Scrolled`  to perform the actual scrolling on a different window (and not on itself).                  

      This method is useful when only a part of the window should be scrolled. A typical example is a control consisting of a fixed header and the scrollable contents window: the scrollbars are attached to the main window itself, hence it, and not the contents window must be derived from :ref:`wx.Scrolled`, but only the contents window scrolls when the scrollbars are used. To implement such setup, you need to call this method with the contents window as argument. 

      Notice that if this method is used, :meth:`GetSizeAvailableForScrollTarget`   method must be overridden.                  


      :param `window`: 
      :type `window`: wx.Window







   .. method:: ShouldScrollToChildOnFocus(self, child)

      This method can be overridden in a derived class to prevent scrolling the child window into view automatically when it gets focus.                  

      The default behaviour is to scroll this window to show its currently focused child automatically, to ensure that the user can interact with it. This is usually helpful, but can be undesirable for some windows, in which case this method can be overridden to return ``False`` for them to prevent any scrolling from taking place when such windows get focus. 

                


      :param `child`: 
      :type `child`: wx.Window




      :rtype: `bool`







      .. versionadded:: 4.1/wxWidgets-3.1.3  
     








   .. method:: ShowScrollbars(self, horz, vert)

      Set the scrollbar visibility.                  

      By default the scrollbar in the corresponding direction is only shown if it is needed, i.e. if the virtual size of the scrolled window in this direction is greater than the current physical window size. Using this function the scrollbar visibility can be changed to be:

      - ``wx.SHOW_SB_ALWAYS``: To always show the scrollbar, even if it is not needed currently (wx``wx.ALWAYS_SHOW_SB`` style can be used during the window creation to achieve the same effect but it applies in both directions). 
      - ``wx.SHOW_SB_NEVER``: To never show the scrollbar at all. In this case the program should presumably provide some other way for the user to scroll the window. 
      - ``wx.SHOW_SB_DEFAULT``: To restore the default behaviour described above. 




      Note that the window must be created before calling this method. 




      :param `horz`: The desired visibility for the horizontal scrollbar.   
      :type `horz`: wx.ScrollbarVisibility
      :param `vert`: The desired visibility for the vertical scrollbar.  
      :type `vert`: wx.ScrollbarVisibility






                  



      .. versionadded:: 2.9.0 
     








   .. method:: StopAutoScrolling(self)

      Stop generating the scroll events when mouse is held outside the window.                   





   .. attribute:: ScaleX

      See :meth:`~wx.Scrolled.GetScaleX`


   .. attribute:: ScaleY

      See :meth:`~wx.Scrolled.GetScaleY`


   .. attribute:: TargetRect

      See :meth:`~wx.Scrolled.GetTargetRect` and :meth:`~wx.Scrolled.SetTargetRect`


   .. attribute:: TargetWindow

      See :meth:`~wx.Scrolled.GetTargetWindow` and :meth:`~wx.Scrolled.SetTargetWindow`

