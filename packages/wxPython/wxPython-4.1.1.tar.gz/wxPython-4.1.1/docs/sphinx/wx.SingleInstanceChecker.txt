.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.SingleInstanceChecker:

==========================================================================================================================================
|phoenix_title|  **wx.SingleInstanceChecker**
==========================================================================================================================================

:ref:`wx.SingleInstanceChecker`  class allows checking that only a single instance of a program is running.          

To do it, you should create an object of this class. As long as this object is alive, calls to :meth:`wx.SingleInstanceChecker.IsAnotherRunning`   from other processes will return ``True``. 

As the object should have the life span as big as possible, it makes sense to create it either as a global or in :meth:`wx.App.OnInit` . For example: 

::

        def OnInit(self):

            self.name = "SingleApp-%s" % wx.GetUserId()
            self.instance = wx.SingleInstanceChecker(self.name)

            if self.instance.IsAnotherRunning():
                wx.MessageBox("Another instance is running", "ERROR")
                return False

            frame = SingleAppFrame(None, "SingleApp")
            frame.Show()
            return True



Note that by default :meth:`wx.SingleInstanceChecker.CreateDefault`   is used to create the checker meaning that it will be initialized differently for different users and thus will allow different users to run the application concurrently which is usually the required behaviour. However if only a single instance of a program should be running system-wide, you need to call :meth:`~wx.SingleInstanceChecker.Create`  with a custom name which does `not`  include :ref:`wx.GetUserId`. 

This class is implemented for Win32 and Unix platforms (supporting  ``fcntl()``   system call, but almost all of modern Unix systems do) only. 









|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>SingleInstanceChecker</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.SingleInstanceChecker_inheritance.png" alt="Inheritance diagram of SingleInstanceChecker" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.SingleInstanceChecker.html" title="wx.SingleInstanceChecker" alt="" coords="5,5,199,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.SingleInstanceChecker.__init__`                                       Default constructor.
:meth:`~wx.SingleInstanceChecker.Create`                                         Initialize the object if it had been created using the default constructor.
:meth:`~wx.SingleInstanceChecker.CreateDefault`                                  Calls :meth:`~SingleInstanceChecker.Create`   with default name.
:meth:`~wx.SingleInstanceChecker.IsAnotherRunning`                               Returns ``True`` if another copy of this program is already running and ``False`` otherwise.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.SingleInstanceChecker(object)

   **Possible constructors**::

       SingleInstanceChecker()
       
       SingleInstanceChecker(name, path=EmptyString)
       
   
   SingleInstanceChecker class allows checking that only a single
   instance of a program is running.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                  
      
      You may call :meth:`Create`   after using it or directly call :meth:`IsAnotherRunning`   in which case :meth:`CreateDefault`   will be implicitly used.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, name, path=EmptyString)`
      
      Constructor calling :meth:`Create` .                  
      
      This constructor does exactly the same thing as :meth:`Create`   but doesn't allow to check for errors.                  
      
      
      :param `name`: 
      :type `name`: string
      :param `path`: 
      :type `path`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Create(self, name, path=EmptyString)

      Initialize the object if it had been created using the default constructor.                  

      Note that you can't call :meth:`Create`   more than once, so calling it if the non default constructor had been used is an error. 




      :param `name`: Must be given and be as unique as possible. It is used as the mutex name under Win32 and the lock file name under Unix. :meth:`wx.App.GetAppName`   and :ref:`wx.GetUserId`  are commonly used to construct this parameter.   
      :type `name`: string
      :param `path`: The path is optional and is ignored under Win32 and used as the directory to create the lock file in under Unix (default is :ref:`wx.GetHomeDir`).  
      :type `path`: string








      :rtype: `bool`



                  



      :returns: 

         Returns ``False`` if initialization failed, it doesn't mean that another instance is running â€“:meth:`IsAnotherRunning`   to check for it.  







      .. note:: 

         One of possible reasons while :meth:`Create`   may fail on Unix is that the lock file used for checking already exists but was not created by the user. Therefore applications shouldn't treat failure of this function as fatal condition, because doing so would open them to the possibility of a Denial of Service attack. Instead, they should alert the user about the problem and offer to continue execution without checking if another instance is running.   








   .. method:: CreateDefault(self)

      Calls :meth:`Create`   with default name.                  

      This method simply calls :meth:`Create`   with a string composed of :meth:`wx.App.GetAppName`   and :ref:`wx.GetUserId`. 

      Because this method uses :meth:`wx.App.GetAppName` , it may only be called after the global application was constructed. 

                

      :rtype: `bool`







      .. versionadded:: 2.9.1 
     








   .. method:: IsAnotherRunning(self)

      Returns ``True`` if another copy of this program is already running and ``False`` otherwise.                  

      Notice that if the object was created using the default constructor :meth:`Create`   hadn't been called before this method, it will call :meth:`CreateDefault`   automatically.                  

      :rtype: `bool`







