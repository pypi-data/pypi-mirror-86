.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.UpdateUIEvent:

==========================================================================================================================================
|phoenix_title|  **wx.UpdateUIEvent**
==========================================================================================================================================

This class is used for pseudo-events which are called by wxWidgets to give an application the chance to update various user interface elements.          

Without update UI events, an application has to work hard to check/uncheck, enable/disable, show/hide, and set the text for elements such as menu items and toolbar buttons. The code for doing this has to be mixed up with the code that is invoked when an action is invoked for a menu item or button. 

With update UI events, you define an event handler to look at the state of the application and change UI elements accordingly. wxWidgets will call your member functions in idle time, so you don't have to worry where to call this code. 

In addition to being a clearer and more declarative method, it also means you don't have to worry whether you're updating a toolbar or menubar identifier. The same handler can update a menu item and toolbar button, if the identifier is the same. Instead of directly manipulating the menu or button, you call functions in the event object, such as :meth:`wx.UpdateUIEvent.Check` . wxWidgets will determine whether such a call has been made, and which UI element to update. 

These events will work for popup menus as well as menubars. Just before a menu is popped up, :meth:`wx.Menu.UpdateUI`   is called to process any UI events for the window that owns the menu. 

If you find that the overhead of UI update processing is affecting your application, you can do one or both of the following: 

- Call :meth:`wx.UpdateUIEvent.SetMode`   with a value of ``wx.UPDATE_UI_PROCESS_SPECIFIED``, and set the extra style ``wx.WS_EX_PROCESS_UI_UPDATES`` for every window that should receive update events. No other windows will receive update events.  
- Call :meth:`wx.UpdateUIEvent.SetUpdateInterval`   with a millisecond value to set the delay between updates. You may need to call :meth:`wx.Window.UpdateWindowUI`   at critical points, for example when a dialog is about to be shown, in case the user sees a slight delay before windows are updated. 

Note that although events are sent in idle time, defining a
:ref:`wx.IdleEvent`  handler for a window does not affect this because the events are sent from :meth:`wx.Window.OnInternalIdle`   which is always called in idle time. 

wxWidgets tries to optimize update events on some platforms. On Windows and GTK+, events for menubar items are only sent when the menu is about to be shown, and not in idle time. 







.. _UpdateUIEvent-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.UpdateUIEvent` parameter.

Event macros: 

- EVT_UPDATE_UI: Process a  ``wxEVT_UPDATE_UI``   event for the command with the given id.   
- EVT_UPDATE_UI_RANGE: Process a  ``wxEVT_UPDATE_UI``   event for any command with id included in the given range.   








         



.. seealso:: :ref:`Events and Event Handling <events and event handling>`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>UpdateUIEvent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.UpdateUIEvent_inheritance.png" alt="Inheritance diagram of UpdateUIEvent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.UpdateUIEvent.html" title="wx.UpdateUIEvent" alt="" coords="9,237,151,267"/> <area shape="rect" id="node2" href="wx.CommandEvent.html" title="wx.CommandEvent" alt="" coords="5,160,155,189"/> <area shape="rect" id="node3" href="wx.Event.html" title="wx.Event" alt="" coords="39,83,121,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="37,5,123,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.UpdateUIEvent.__init__`                                               Constructor.
:meth:`~wx.UpdateUIEvent.CanUpdate`                                              Returns ``True`` if it is appropriate to update (send UI update events to) this window.
:meth:`~wx.UpdateUIEvent.Check`                                                  Check or uncheck the UI element.
:meth:`~wx.UpdateUIEvent.Enable`                                                 Enable or disable the UI element.
:meth:`~wx.UpdateUIEvent.GetChecked`                                             Returns ``True`` if the UI element should be checked.
:meth:`~wx.UpdateUIEvent.GetEnabled`                                             Returns ``True`` if the UI element should be enabled.
:meth:`~wx.UpdateUIEvent.GetMode`                                                Static function returning a value specifying how wxWidgets will send update events: to all windows, or only to those which specify that they will process the events.
:meth:`~wx.UpdateUIEvent.GetSetChecked`                                          Returns ``True`` if the application has called :meth:`~UpdateUIEvent.Check` .
:meth:`~wx.UpdateUIEvent.GetSetEnabled`                                          Returns ``True`` if the application has called :meth:`~UpdateUIEvent.Enable` .
:meth:`~wx.UpdateUIEvent.GetSetShown`                                            Returns ``True`` if the application has called :meth:`~UpdateUIEvent.Show` .
:meth:`~wx.UpdateUIEvent.GetSetText`                                             Returns ``True`` if the application has called :meth:`~UpdateUIEvent.SetText` .
:meth:`~wx.UpdateUIEvent.GetShown`                                               Returns ``True`` if the UI element should be shown.
:meth:`~wx.UpdateUIEvent.GetText`                                                Returns the text that should be set for the UI element.
:meth:`~wx.UpdateUIEvent.GetUpdateInterval`                                      Returns the current interval between updates in milliseconds.
:meth:`~wx.UpdateUIEvent.IsCheckable`                                            Returns ``True`` if the UI element can be checked.
:meth:`~wx.UpdateUIEvent.ResetUpdateTime`                                        Used internally to reset the last-updated time to the current time.
:meth:`~wx.UpdateUIEvent.SetMode`                                                Specify how wxWidgets will send update events: to all windows, or only to those which specify that they will process the events.
:meth:`~wx.UpdateUIEvent.SetText`                                                Sets the text for this UI element.
:meth:`~wx.UpdateUIEvent.SetUpdateInterval`                                      Sets the interval between updates in milliseconds.
:meth:`~wx.UpdateUIEvent.Show`                                                   Show or hide the UI element.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.UpdateUIEvent.Checked`                                                See :meth:`~wx.UpdateUIEvent.GetChecked` and :meth:`~wx.UpdateUIEvent.Check`
:attr:`~wx.UpdateUIEvent.Enabled`                                                See :meth:`~wx.UpdateUIEvent.GetEnabled` and :meth:`~wx.UpdateUIEvent.Enable`
:attr:`~wx.UpdateUIEvent.Shown`                                                  See :meth:`~wx.UpdateUIEvent.GetShown` and :meth:`~wx.UpdateUIEvent.Show`
:attr:`~wx.UpdateUIEvent.Text`                                                   See :meth:`~wx.UpdateUIEvent.GetText` and :meth:`~wx.UpdateUIEvent.SetText`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.UpdateUIEvent(CommandEvent)

   **Possible constructors**::

       UpdateUIEvent(commandId=0)
       
   
   This class is used for pseudo-events which are called by wxWidgets to
   give an application the chance to update various user interface
   elements.



   .. method:: __init__(self, commandId=0)

      Constructor.                  


      :param `commandId`: 
      :type `commandId`: wx.WindowID







   .. staticmethod:: CanUpdate(window)

      Returns ``True`` if it is appropriate to update (send UI update events to) this window.                  

      This function looks at the mode used (see :meth:`wx.UpdateUIEvent.SetMode` ), the ``wx.WS_EX_PROCESS_UI_UPDATES`` flag in `window`, the time update events were last sent in idle time, and the update interval, to determine whether events should be sent to this window now. By default this will always return ``True`` because the update mode is initially ``wx.UPDATE_UI_PROCESS_ALL`` and the interval is set to 0; so update events will be sent as often as possible. You can reduce the frequency that events are sent by changing the mode and/or setting an update interval. 

                


      :param `window`: 
      :type `window`: wx.Window




      :rtype: `bool`







      .. seealso:: :meth:`ResetUpdateTime` , :meth:`SetUpdateInterval` , :meth:`SetMode`     








   .. method:: Check(self, check)

      Check or uncheck the UI element.                  


      :param `check`: 
      :type `check`: bool







   .. method:: Enable(self, enable)

      Enable or disable the UI element.                  


      :param `enable`: 
      :type `enable`: bool







   .. method:: GetChecked(self)

      Returns ``True`` if the UI element should be checked.                  

      :rtype: `bool`








   .. method:: GetEnabled(self)

      Returns ``True`` if the UI element should be enabled.                  

      :rtype: `bool`








   .. staticmethod:: GetMode()

      Static function returning a value specifying how wxWidgets will send update events: to all windows, or only to those which specify that they will process the events.                  

                

      :rtype: :ref:`wx.UpdateUIMode`







      .. seealso:: :meth:`SetMode`     








   .. method:: GetSetChecked(self)

      Returns ``True`` if the application has called :meth:`Check` .                  

      For wxWidgets internal use only.                  

      :rtype: `bool`








   .. method:: GetSetEnabled(self)

      Returns ``True`` if the application has called :meth:`Enable` .                  

      For wxWidgets internal use only.                  

      :rtype: `bool`








   .. method:: GetSetShown(self)

      Returns ``True`` if the application has called :meth:`Show` .                  

      For wxWidgets internal use only.                  

      :rtype: `bool`








   .. method:: GetSetText(self)

      Returns ``True`` if the application has called :meth:`SetText` .                  

      For wxWidgets internal use only.                  

      :rtype: `bool`








   .. method:: GetShown(self)

      Returns ``True`` if the UI element should be shown.                  

      :rtype: `bool`








   .. method:: GetText(self)

      Returns the text that should be set for the UI element.                  

      :rtype: `string`








   .. staticmethod:: GetUpdateInterval()

      Returns the current interval between updates in milliseconds.                  

      The value -1 disables updates, 0 updates as frequently as possible. 

                

      :rtype: `long`







      .. seealso:: :meth:`SetUpdateInterval` .   








   .. method:: IsCheckable(self)

      Returns ``True`` if the UI element can be checked.                  

      For the event handlers that can be used for multiple items, not all of which can be checked, this method can be useful to determine whether to call :meth:`Check`   on the event object or not, i.e. the main use case for this method is: ::

          def OnUpdateUI(self, event):
              ....
              if event.IsCheckable()
                  event.Check(...some condition...)



                

      :rtype: `bool`







      .. versionadded:: 4.1/wxWidgets-3.1.5  
     








   .. staticmethod:: ResetUpdateTime()

      Used internally to reset the last-updated time to the current time.                  

      It is assumed that update events are normally sent in idle time, so this is called at the end of idle processing. 

                 



      .. seealso:: :meth:`CanUpdate` , :meth:`SetUpdateInterval` , :meth:`SetMode`     








   .. staticmethod:: SetMode(mode)

      Specify how wxWidgets will send update events: to all windows, or only to those which specify that they will process the events.                  




      :param `mode`: this parameter may be one of the :ref:`wx.UpdateUIMode`  enumeration values. The default mode is ``wx.UPDATE_UI_PROCESS_ALL``.   
      :type `mode`: wx.UpdateUIMode




                  





   .. method:: SetText(self, text)

      Sets the text for this UI element.                  


      :param `text`: 
      :type `text`: string







   .. staticmethod:: SetUpdateInterval(updateInterval)

      Sets the interval between updates in milliseconds.                  

      Set to -1 to disable updates, or to 0 to update as frequently as possible. The default is 0. 

      Use this to reduce the overhead of UI update events if your application has a lot of windows. If you set the value to -1 or greater than 0, you may also need to call :meth:`wx.Window.UpdateWindowUI`   at appropriate points in your application, such as when a dialog is about to be shown.                  


      :param `updateInterval`: 
      :type `updateInterval`: long







   .. method:: Show(self, show)

      Show or hide the UI element.                  


      :param `show`: 
      :type `show`: bool







   .. attribute:: Checked

      See :meth:`~wx.UpdateUIEvent.GetChecked` and :meth:`~wx.UpdateUIEvent.Check`


   .. attribute:: Enabled

      See :meth:`~wx.UpdateUIEvent.GetEnabled` and :meth:`~wx.UpdateUIEvent.Enable`


   .. attribute:: Shown

      See :meth:`~wx.UpdateUIEvent.GetShown` and :meth:`~wx.UpdateUIEvent.Show`


   .. attribute:: Text

      See :meth:`~wx.UpdateUIEvent.GetText` and :meth:`~wx.UpdateUIEvent.SetText`

