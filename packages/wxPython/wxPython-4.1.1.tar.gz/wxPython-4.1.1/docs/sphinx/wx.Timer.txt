.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.Timer:

==========================================================================================================================================
|phoenix_title|  **wx.Timer**
==========================================================================================================================================

The :ref:`wx.Timer`  class allows you to execute code at specified intervals.          

Its precision is platform-dependent, but in general will not be better than  ``1ms``   nor worse than   ``1s`` . 

There are three different ways to use this class: 



- You may derive a new class from :ref:`wx.Timer`  and override the :meth:`wx.Timer.Notify`   member to perform the required action. 
- You may redirect the notifications to any :ref:`wx.EvtHandler`  derived object by using the non-default constructor or :meth:`wx.Timer.SetOwner` . Then use the  ``EVT_TIMER``   macro to connect it to the event handler which will receive  :ref:`wx.TimerEvent`  notifications. 
- You may use a derived class and the  ``EVT_TIMER``   macro to connect it to an event handler defined in the derived class. If the default constructor is used, the timer object will be its own owner object, since it is derived from  :ref:`wx.EvtHandler`. 




In any case, you must start the timer with :meth:`wx.Timer.Start`   after constructing it before it actually starts sending notifications. It can be stopped later with :meth:`wx.Timer.Stop` . 







         



.. note:: 

   A timer can only be used from the main thread.  







.. seealso:: :ref:`wx.StopWatch`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Timer</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.Timer_inheritance.png" alt="Inheritance diagram of Timer" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Timer.html" title="wx.Timer" alt="" coords="67,160,150,189"/> <area shape="rect" id="node2" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node4" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.Timer.__init__`                                                       Default constructor.
:meth:`~wx.Timer.GetId`                                                          Returns the ``ID`` of the events generated by this timer.
:meth:`~wx.Timer.GetInterval`                                                    Returns the current interval for the timer (in milliseconds).
:meth:`~wx.Timer.GetOwner`                                                       Returns the current `owner`  of the timer.
:meth:`~wx.Timer.IsOneShot`                                                      Returns ``True`` if the timer is one shot, i.e. if it will stop after firing the first notification automatically.
:meth:`~wx.Timer.IsRunning`                                                      Returns ``True`` if the timer is running, ``False`` if it is stopped.
:meth:`~wx.Timer.Notify`                                                         This member should be overridden by the user if the default constructor was used and :meth:`~Timer.SetOwner`   wasn't called.
:meth:`~wx.Timer.SetOwner`                                                       Associates the timer with the given `owner`  object.
:meth:`~wx.Timer.Start`                                                          (Re)starts the timer.
:meth:`~wx.Timer.StartOnce`                                                      Starts the timer for a once-only notification.
:meth:`~wx.Timer.Stop`                                                           Stops the timer.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.Timer.Id`                                                             See :meth:`~wx.Timer.GetId`
:attr:`~wx.Timer.Interval`                                                       See :meth:`~wx.Timer.GetInterval`
:attr:`~wx.Timer.Owner`                                                          See :meth:`~wx.Timer.GetOwner` and :meth:`~wx.Timer.SetOwner`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.Timer(EvtHandler)

   **Possible constructors**::

       Timer()
       
       Timer(owner, id=-1)
       
   
   The Timer class allows you to execute code at specified intervals.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                  
      
      If you use it to construct the object and don't call :meth:`SetOwner`   later, you must override :meth:`Notify`   method to process the notifications.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, owner, id=-1)`
      
      Creates a timer and associates it with `owner`.                  
      
      Please see :meth:`SetOwner`   for the description of parameters.                  
      
      
      :param `owner`: 
      :type `owner`: wx.EvtHandler
      :param `id`: 
      :type `id`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: GetId(self)

      Returns the ``ID`` of the events generated by this timer.                  

      :rtype: `int`








   .. method:: GetInterval(self)

      Returns the current interval for the timer (in milliseconds).                  

      :rtype: `int`








   .. method:: GetOwner(self)

      Returns the current `owner`  of the timer.                  

      If non-NULL this is the event handler which will receive the timer events (see :ref:`wx.TimerEvent`) when the timer is running.                  

      :rtype: :ref:`wx.EvtHandler`








   .. method:: IsOneShot(self)

      Returns ``True`` if the timer is one shot, i.e. if it will stop after firing the first notification automatically.                  

      :rtype: `bool`








   .. method:: IsRunning(self)

      Returns ``True`` if the timer is running, ``False`` if it is stopped.                  

      :rtype: `bool`








   .. method:: Notify(self)

      This member should be overridden by the user if the default constructor was used and :meth:`SetOwner`   wasn't called.                  

      Perform whatever action which is to be taken periodically here. 

      Notice that throwing exceptions from this method is currently not supported, use event-based timer handling approach if an exception can be thrown while handling timer notifications.                   





   .. method:: SetOwner(self, owner, id=-1)

      Associates the timer with the given `owner`  object.                  

      When the timer is running, the owner will receive timer events (see :ref:`wx.TimerEvent`) with `id`  equal to `id`  specified here.                  


      :param `owner`: 
      :type `owner`: wx.EvtHandler
      :param `id`: 
      :type `id`: int







   .. method:: Start(self, milliseconds=-1, oneShot=TIMER_CONTINUOUS)

      (Re)starts the timer.                  

      If `milliseconds`  parameter is -1 (value by default), the previous value is used. Returns ``False`` if the timer could not be started, ``True`` otherwise (in MS Windows timers are a limited resource). 

      If `oneShot`  is ``False`` (the default), the :meth:`Notify`   function will be called repeatedly until the timer is stopped. If ``True``, it will be called only once and the timer will stop automatically. 

      To make your code more readable you may also use the following symbolic constants:

      - ``wx.TIMER_CONTINUOUS``: Start a normal, continuously running, timer 
      - ``wx.TIMER_ONE_SHOT``: Start a one shot timer Alternatively, use :meth:`StartOnce` . 




      If the timer was already running, it will be stopped by this method before restarting it.                  


      :param `milliseconds`: 
      :type `milliseconds`: int
      :param `oneShot`: 
      :type `oneShot`: bool




      :rtype: `bool`








   .. method:: StartOnce(self, milliseconds=-1)

      Starts the timer for a once-only notification.                  

      This is a simple wrapper for :meth:`Start`   with  ``TIMER_ONE_SHOT``   parameter. 

                


      :param `milliseconds`: 
      :type `milliseconds`: int




      :rtype: `bool`







      .. versionadded:: 2.9.5 
     








   .. method:: Stop(self)

      Stops the timer.                   





   .. attribute:: Id

      See :meth:`~wx.Timer.GetId`


   .. attribute:: Interval

      See :meth:`~wx.Timer.GetInterval`


   .. attribute:: Owner

      See :meth:`~wx.Timer.GetOwner` and :meth:`~wx.Timer.SetOwner`

