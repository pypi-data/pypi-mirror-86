.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.Accessible:

==========================================================================================================================================
|phoenix_title|  **wx.Accessible**
==========================================================================================================================================

The :ref:`wx.Accessible`  class allows wxWidgets applications, and wxWidgets itself, to return extended information about user interface elements to client applications such as screen readers.          

This is the main way in which wxWidgets implements accessibility features. 

At present, only Microsoft Active Accessibility is supported by this class. 

To use this class, derive from :ref:`wx.Accessible`, implement appropriate functions, and associate an object of the class with a window using :meth:`wx.Window.SetAccessible` . 

All functions return an indication of success, failure, or not implemented using values of the AccStatus enum type. 

If you return  ``ACC_NOT_IMPLEMENTED``   from any function, the system will try to implement the appropriate functionality. However this will not work with all functions. 

Most functions work with an object `id`, which can be zero to refer to 'this' UI element, or greater than zero to refer to the nth child element. This allows you to specify elements that don't have a corresponding :ref:`wx.Window`  or :ref:`wx.Accessible`; for example, the sash of a splitter window. 

For details on the semantics of functions and types, please refer to the Microsoft Active Accessibility 1.2 documentation. 

This class is compiled into wxWidgets only if the  ``USE_ACCESSIBILITY``   setup symbol is set to 1. 









         



.. availability:: Only available for MSW.  







.. seealso:: :ref:`Accessibility Sample <accessibility sample>`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Accessible</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.Accessible_inheritance.png" alt="Inheritance diagram of Accessible" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Accessible.html" title="wx.Accessible" alt="" coords="5,83,120,112"/> <area shape="rect" id="node2" href="wx.Object.html" title="wx.Object" alt="" coords="19,5,106,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.Accessible.__init__`                                                  Constructor, taking an optional window.
:meth:`~wx.Accessible.DoDefaultAction`                                           Performs the default action for the object.
:meth:`~wx.Accessible.GetChild`                                                  Gets the specified child (starting from 1).
:meth:`~wx.Accessible.GetChildCount`                                             Returns the number of children in `childCount`.
:meth:`~wx.Accessible.GetDefaultAction`                                          Gets the default action for this object (0) or a child (greater than 0).
:meth:`~wx.Accessible.GetDescription`                                            Returns the description for this object or a child.
:meth:`~wx.Accessible.GetFocus`                                                  Gets the window with the keyboard focus.
:meth:`~wx.Accessible.GetHelpText`                                               Returns help text for this object or a child, similar to tooltip text.
:meth:`~wx.Accessible.GetKeyboardShortcut`                                       Returns the keyboard shortcut for this object or child.
:meth:`~wx.Accessible.GetLocation`                                               Returns the rectangle for this object (id is 0) or a child element (id is greater than 0).
:meth:`~wx.Accessible.GetName`                                                   Gets the name of the specified object.
:meth:`~wx.Accessible.GetParent`                                                 Returns the parent of this object, or ``None``.
:meth:`~wx.Accessible.GetRole`                                                   Returns a role constant describing this object.
:meth:`~wx.Accessible.GetSelections`                                             Gets a variant representing the selected children of this object.
:meth:`~wx.Accessible.GetState`                                                  Returns a state constant.
:meth:`~wx.Accessible.GetValue`                                                  Returns a localized string representing the value for the object or child.
:meth:`~wx.Accessible.GetWindow`                                                 Returns the window associated with this object.
:meth:`~wx.Accessible.HitTest`                                                   Returns a status value and object id to indicate whether the given point was on this or a child object.
:meth:`~wx.Accessible.Navigate`                                                  Navigates from `fromId`  to `toId`  or to `toObject`.
:meth:`~wx.Accessible.NotifyEvent`                                               Allows the application to send an event when something changes in an accessible object.
:meth:`~wx.Accessible.Select`                                                    Selects the object or child.
:meth:`~wx.Accessible.SetWindow`                                                 Sets the window associated with this object.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.Accessible.Window`                                                    See :meth:`~wx.Accessible.GetWindow` and :meth:`~wx.Accessible.SetWindow`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.Accessible(Object)

   **Possible constructors**::

       Accessible(win=None)
       
   
   The Accessible class allows wxWidgets applications, and wxWidgets
   itself, to return extended information about user interface elements
   to client applications such as screen readers.



   .. method:: __init__(self, win=None)

      Constructor, taking an optional window.                  

      The object can be associated with a window later.                  


      :param `win`: 
      :type `win`: wx.Window







   .. method:: DoDefaultAction(self, childId)

      Performs the default action for the object.                  

      `childId`  is 0 (the action for this object) or greater than 0 (the action for a child). 

                


      :param `childId`: 
      :type `childId`: int




      :rtype: :ref:`wx.AccStatus`







      :returns: 

         ``wx.ACC_NOT_SUPPORTED`` if there is no default action for this window (e.g. an edit control).   








   .. method:: GetChild(self, childId)

      Gets the specified child (starting from 1).                  

      If `child`  is ``None`` and the return value is ``wx.ACC_OK``, this means that the child is a simple element and not an accessible object.                  


      :param `childId`: 
      :type `childId`: int




      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `child` ) 








   .. method:: GetChildCount(self)

      Returns the number of children in `childCount`.                  

      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `childCount` ) 








   .. method:: GetDefaultAction(self, childId)

      Gets the default action for this object (0) or a child (greater than 0).                  

      Return ``wx.ACC_OK`` even if there is no action. `actionName`  is the action, or the empty string if there is no action. The retrieved string describes the action that is performed on an object, not what the object does as a result. For example, a toolbar button that prints a document has a default action of "Press" rather than "Prints
      the current document."                  


      :param `childId`: 
      :type `childId`: int




      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `actionName` ) 








   .. method:: GetDescription(self, childId)

      Returns the description for this object or a child.                  


      :param `childId`: 
      :type `childId`: int




      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `description` ) 








   .. method:: GetFocus(self, childId)

      Gets the window with the keyboard focus.                  

      If childId is 0 and child is ``None``, no object in this subhierarchy has the focus. If this object has the focus, child should be 'this'.                  


      :param `childId`: 
      :type `childId`: int




      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `child` ) 








   .. method:: GetHelpText(self, childId)

      Returns help text for this object or a child, similar to tooltip text.                  


      :param `childId`: 
      :type `childId`: int




      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `helpText` ) 








   .. method:: GetKeyboardShortcut(self, childId)

      Returns the keyboard shortcut for this object or child.                  

      Returns e.g. ``ALT+K``.                  


      :param `childId`: 
      :type `childId`: int




      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `shortcut` ) 








   .. method:: GetLocation(self, elementId)

      Returns the rectangle for this object (id is 0) or a child element (id is greater than 0).                  

      `rect`  is in screen coordinates.                  


      :param `elementId`: 
      :type `elementId`: int




      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `rect` ) 








   .. method:: GetName(self, childId)

      Gets the name of the specified object.                  


      :param `childId`: 
      :type `childId`: int




      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `name` ) 








   .. method:: GetParent(self)

      Returns the parent of this object, or ``None``.                  

      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `parent` ) 








   .. method:: GetRole(self, childId)

      Returns a role constant describing this object.                  

      See AccRole for a list of these roles.                  


      :param `childId`: 
      :type `childId`: int




      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `role` ) 








   .. method:: GetSelections(self)

      Gets a variant representing the selected children of this object.                  

      Acceptable values are: 

      - a null variant ( ``IsNull()``   returns ``True``) if no children are selected   
      - a  ``void*``   pointer to a  :ref:`wx.Accessible`  of selected child object  
      - an integer representing the selected child element, or 0 if this object is selected ( ``GetType()``       ``==``       ``"long"`` )   
      - a list variant ( ``GetType()``       ``==``       ``"list"`` ) if multiple child objects are selected   


                 

      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `selections` ) 








   .. method:: GetState(self, childId)

      Returns a state constant.                  

      See AccStatus for a list of these states.                  


      :param `childId`: 
      :type `childId`: int




      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `state` ) 








   .. method:: GetValue(self, childId)

      Returns a localized string representing the value for the object or child.                  


      :param `childId`: 
      :type `childId`: int




      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.AccStatus`, `strValue` ) 








   .. method:: GetWindow(self)

      Returns the window associated with this object.                  

      :rtype: :ref:`wx.Window`








   .. method:: HitTest(self, pt, childId, childObject)

      Returns a status value and object id to indicate whether the given point was on this or a child object.                  

      Can return either a child object, or an integer representing the child element, starting from 1. 

      `pt`  is in screen coordinates.                  


      :param `pt`: 
      :type `pt`: wx.Point
      :param `childId`: 
      :type `childId`: int
      :param `childObject`: 
      :type `childObject`: Accessible




      :rtype: :ref:`wx.AccStatus`








   .. method:: Navigate(self, navDir, fromId, toId, toObject)

      Navigates from `fromId`  to `toId`  or to `toObject`.                  


      :param `navDir`: 
      :type `navDir`: wx.NavDir
      :param `fromId`: 
      :type `fromId`: int
      :param `toId`: 
      :type `toId`: int
      :param `toObject`: 
      :type `toObject`: Accessible




      :rtype: :ref:`wx.AccStatus`








   .. staticmethod:: NotifyEvent(eventType, window, objectType, objectId)

      Allows the application to send an event when something changes in an accessible object.                  


      :param `eventType`: 
      :type `eventType`: int
      :param `window`: 
      :type `window`: wx.Window
      :param `objectType`: 
      :type `objectType`: wx.AccObject
      :param `objectId`: 
      :type `objectId`: int







   .. method:: Select(self, childId, selectFlags)

      Selects the object or child.                  

      See AccSelectionFlags for a list of the selection actions.                  


      :param `childId`: 
      :type `childId`: int
      :param `selectFlags`: 
      :type `selectFlags`: wx.AccSelectionFlags




      :rtype: :ref:`wx.AccStatus`








   .. method:: SetWindow(self, window)

      Sets the window associated with this object.                  


      :param `window`: 
      :type `window`: wx.Window







   .. attribute:: Window

      See :meth:`~wx.Accessible.GetWindow` and :meth:`~wx.Accessible.SetWindow`

