.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.richtext.RichTextHTMLHandler:

==========================================================================================================================================
|phoenix_title|  **wx.richtext.RichTextHTMLHandler**
==========================================================================================================================================

Handles HTML output (only) for :ref:`wx.richtext.RichTextCtrl`  content.          

The most flexible way to use this class is to create a temporary object and call its functions directly, rather than use :meth:`wx.richtext.RichTextBuffer.SaveFile`   or :meth:`wx.richtext.RichTextCtrl.SaveFile` . 

Image handling requires a little extra work from the application, to choose an appropriate image format for the target HTML viewer and to clean up the temporary images later. If you are planning to load the HTML into a standard web browser, you can specify the handler flag ``wx.richtext.RICHTEXT_HANDLER_SAVE_IMAGES_TO_BASE64`` (the default) and no extra work is required: the images will be written with the HTML. 

However, if you want HTML compatibility, you will need to use  ``RICHTEXT_HANDLER_SAVE_IMAGES_TO_MEMORY``   or   ``RICHTEXT_HANDLER_SAVE_IMAGES_TO_FILES`` . 

In this case, you must either call :meth:`wx.richtext.RichTextHTMLHandler.DeleteTemporaryImages`   before the next load operation, or you must store the image locations and delete them yourself when appropriate. 

You can call :meth:`wx.richtext.RichTextHTMLHandler.GetTemporaryImageLocations`   to get the array of temporary image names. 



|phoenix_title| Handler flags
=============================

The following flags can be used with this handler, via the handler's :meth:`~wx.richtext.RichTextHTMLHandler.SetFlags`  function or the buffer or control's SetHandlerFlags() function: 

- ``wx.richtext.RICHTEXT_HANDLER_SAVE_IMAGES_TO_MEMORY`` Images are saved to the memory filesystem: suitable for showing HTML windows. 
- ``wx.richtext.RICHTEXT_HANDLER_SAVE_IMAGES_TO_FILES`` Images are saved to temporary files: suitable for showing in HTML windows. 
- ``wx.richtext.RICHTEXT_HANDLER_SAVE_IMAGES_TO_BASE64`` Images are written with the HTML files in Base 64 format: suitable for showing in web browsers. 
- ``wx.richtext.RICHTEXT_HANDLER_NO_HEADER_FOOTER`` Don't include header and footer tags (HTML, ``HEAD``, ``BODY``), so that the HTML can be used as part of a larger document. 
- ``wx.richtext.RICHTEXT_HANDLER_USE_CSS`` Use CSS where possible, otherwise use workarounds that will show in :ref:`wx.html.HtmlWindow`. 






|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>RichTextHTMLHandler</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.richtext.RichTextHTMLHandler_inheritance.png" alt="Inheritance diagram of RichTextHTMLHandler" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.richtext.RichTextHTMLHandler.html" title="wx.richtext.RichTextHTMLHandler" alt="" coords="5,160,247,189"/> <area shape="rect" id="node2" href="wx.richtext.RichTextFileHandler.html" title="wx.richtext.RichTextFileHandler" alt="" coords="13,83,239,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="83,5,169,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.richtext.RichTextHTMLHandler.__init__`                                Constructor.
:meth:`~wx.richtext.RichTextHTMLHandler.ClearTemporaryImageLocations`            Clears the image locations generated by the last operation.
:meth:`~wx.richtext.RichTextHTMLHandler.DeleteTemporaryImages`                   Deletes the in-memory or temporary files generated by the last operation.
:meth:`~wx.richtext.RichTextHTMLHandler.GetFontSizeMapping`                      Returns the mapping for converting point sizes to HTML font sizes.
:meth:`~wx.richtext.RichTextHTMLHandler.GetTempDir`                              Returns the directory used to store temporary image files.
:meth:`~wx.richtext.RichTextHTMLHandler.GetTemporaryImageLocations`              Returns the image locations for the last operation.
:meth:`~wx.richtext.RichTextHTMLHandler.SetFileCounter`                          Reset the file counter, in case, for example, the same names are required each time.
:meth:`~wx.richtext.RichTextHTMLHandler.SetFontSizeMapping`                      Sets the mapping for converting point sizes to HTML font sizes.
:meth:`~wx.richtext.RichTextHTMLHandler.SetTempDir`                              Sets the directory for storing temporary files.
:meth:`~wx.richtext.RichTextHTMLHandler.SetTemporaryImageLocations`              Sets the list of image locations generated by the last operation.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.richtext.RichTextHTMLHandler.FontSizeMapping`                         See :meth:`~wx.richtext.RichTextHTMLHandler.GetFontSizeMapping` and :meth:`~wx.richtext.RichTextHTMLHandler.SetFontSizeMapping`
:attr:`~wx.richtext.RichTextHTMLHandler.TempDir`                                 See :meth:`~wx.richtext.RichTextHTMLHandler.GetTempDir` and :meth:`~wx.richtext.RichTextHTMLHandler.SetTempDir`
:attr:`~wx.richtext.RichTextHTMLHandler.TemporaryImageLocations`                 See :meth:`~wx.richtext.RichTextHTMLHandler.GetTemporaryImageLocations` and :meth:`~wx.richtext.RichTextHTMLHandler.SetTemporaryImageLocations`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.richtext.RichTextHTMLHandler(RichTextFileHandler)

   **Possible constructors**::

       RichTextHTMLHandler(name="HTML", ext="html", type=RICHTEXT_TYPE_HTML)
       
   
   Handles HTML output (only) for RichTextCtrl content.



   .. method:: __init__(self, name="HTML", ext="html", type=RICHTEXT_TYPE_HTML)

      Constructor.                  


      :param `name`: 
      :type `name`: string
      :param `ext`: 
      :type `ext`: string
      :param `type`: 
      :type `type`: int







   .. method:: ClearTemporaryImageLocations(self)

      Clears the image locations generated by the last operation.                   





   .. method:: DeleteTemporaryImages(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DeleteTemporaryImages** `(self)`
      
      Deletes the in-memory or temporary files generated by the last operation.                  
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DeleteTemporaryImages** `(flags, imageLocations)`
      
      Delete the in-memory or temporary files generated by the last operation.                  
      
      This is a static function that can be used to delete the saved locations from an earlier operation, for example after the user has viewed the HTML file.                  
      
      
      :param `flags`: 
      :type `flags`: int
      :param `imageLocations`: 
      :type `imageLocations`: list of strings
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: GetFontSizeMapping(self)

      Returns the mapping for converting point sizes to HTML font sizes.                  

      :rtype: `list of integers`








   .. method:: GetTempDir(self)

      Returns the directory used to store temporary image files.                  

      :rtype: `string`








   .. method:: GetTemporaryImageLocations(self)

      Returns the image locations for the last operation.                  

      :rtype: `list of strings`








   .. staticmethod:: SetFileCounter(counter)

      Reset the file counter, in case, for example, the same names are required each time.                  


      :param `counter`: 
      :type `counter`: int







   .. method:: SetFontSizeMapping(self, fontSizeMapping)

      Sets the mapping for converting point sizes to HTML font sizes.                  

      There should be 7 elements, one for each HTML font size, each element specifying the maximum point size for that HTML font size. For example: ::

          fontSizeMapping = [7, 9, 11, 12, 14, 22, 100]
          htmlHandler.SetFontSizeMapping(fontSizeMapping)

                 


      :param `fontSizeMapping`: 
      :type `fontSizeMapping`: list of integers







   .. method:: SetTempDir(self, tempDir)

      Sets the directory for storing temporary files.                  

      If empty, the system temporary directory will be used.                  


      :param `tempDir`: 
      :type `tempDir`: string







   .. method:: SetTemporaryImageLocations(self, locations)

      Sets the list of image locations generated by the last operation.                  


      :param `locations`: 
      :type `locations`: list of strings







   .. attribute:: FontSizeMapping

      See :meth:`~wx.richtext.RichTextHTMLHandler.GetFontSizeMapping` and :meth:`~wx.richtext.RichTextHTMLHandler.SetFontSizeMapping`


   .. attribute:: TempDir

      See :meth:`~wx.richtext.RichTextHTMLHandler.GetTempDir` and :meth:`~wx.richtext.RichTextHTMLHandler.SetTempDir`


   .. attribute:: TemporaryImageLocations

      See :meth:`~wx.richtext.RichTextHTMLHandler.GetTemporaryImageLocations` and :meth:`~wx.richtext.RichTextHTMLHandler.SetTemporaryImageLocations`

