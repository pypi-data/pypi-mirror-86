.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.artmanager

.. highlight:: python



.. _wx.lib.agw.artmanager.RendererMSOffice2007:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.artmanager.RendererMSOffice2007**
==========================================================================================================================================

Windows MS Office 2007 style. 



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>RendererMSOffice2007</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.artmanager.RendererMSOffice2007_inheritance.png" alt="Inheritance diagram of RendererMSOffice2007" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.artmanager.RendererMSOffice2007.html" title="wx.lib.agw.artmanager.RendererMSOffice2007" alt="" coords="5,83,327,112"/> <area shape="rect" id="node2" href="wx.lib.agw.artmanager.RendererBase.html" title="wx.lib.agw.artmanager.RendererBase" alt="" coords="34,5,298,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.lib.agw.artmanager.RendererBase`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.artmanager.RendererMSOffice2007.__init__`                     Default class constructor.
:meth:`~wx.lib.agw.artmanager.RendererMSOffice2007.DrawButton`                   Draws a button using the MS Office 2007 theme.
:meth:`~wx.lib.agw.artmanager.RendererMSOffice2007.DrawButtonColour`             Draws a button using the MS Office 2007 theme.
:meth:`~wx.lib.agw.artmanager.RendererMSOffice2007.DrawMenuBarBg`                Draws the menu bar background according to the active theme.
:meth:`~wx.lib.agw.artmanager.RendererMSOffice2007.DrawToolBarBg`                Draws the toolbar background according to the active theme.
:meth:`~wx.lib.agw.artmanager.RendererMSOffice2007.GetColoursAccordingToState`   Returns a :class:`wx.Colour` according to the menu item state.
:meth:`~wx.lib.agw.artmanager.RendererMSOffice2007.GetTextColourEnable`          Returns the colour used for text colour when enabled.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: RendererMSOffice2007(RendererBase)

   Windows MS Office 2007 style. 

   .. method:: __init__(self)

      Default class constructor. 


   .. method:: DrawButton(self, dc, rect, state, useLightColours)

      Draws a button using the MS Office 2007 theme.
      
      :param `dc`: an instance of :class:`wx.DC`;
      :param wx.Rect `rect`: the button's client rectangle;
      :param integer `state`: the button state;
      :param bool `useLightColours`: ``True`` to use light colours, ``False`` otherwise.


   .. method:: DrawButtonColour(self, dc, rect, state, colour)

      Draws a button using the MS Office 2007 theme.
      
      :param `dc`: an instance of :class:`wx.DC`;
      :param wx.Rect `rect`: the button's client rectangle;
      :param integer `state`: the button state;
      :param `colour`: a valid :class:`wx.Colour` instance.


   .. method:: DrawMenuBarBg(self, dc, rect)

      Draws the menu bar background according to the active theme.
      
      :param `dc`: an instance of :class:`wx.DC`;
      :param wx.Rect `rect`: the menu bar's client rectangle.


   .. method:: DrawToolBarBg(self, dc, rect)

      Draws the toolbar background according to the active theme.
      
      :param `dc`: an instance of :class:`wx.DC`;
      :param wx.Rect `rect`: the toolbar's client rectangle.


   .. method:: GetColoursAccordingToState(self, state)

      Returns a :class:`wx.Colour` according to the menu item state.
      
      :param integer `state`: one of the following bits:
      
       ==================== ======= ==========================
       Item State            Value  Description
       ==================== ======= ==========================
       ``ControlPressed``         0 The item is pressed
       ``ControlFocus``           1 The item is focused
       ``ControlDisabled``        2 The item is disabled
       ``ControlNormal``          3 Normal state
       ==================== ======= ==========================
      
      :return: An instance of :class:`wx.Colour`.


   .. method:: GetTextColourEnable(self)

      Returns the colour used for text colour when enabled.
      
      :return: An instance of :class:`wx.Colour`.


