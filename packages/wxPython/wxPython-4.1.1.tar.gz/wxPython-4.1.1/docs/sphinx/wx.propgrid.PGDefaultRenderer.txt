.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.propgrid.PGDefaultRenderer:

==========================================================================================================================================
|phoenix_title|  **wx.propgrid.PGDefaultRenderer**
==========================================================================================================================================

Default cell renderer, that can handles the common scenarios.          









|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>PGDefaultRenderer</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.propgrid.PGDefaultRenderer_inheritance.png" alt="Inheritance diagram of PGDefaultRenderer" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.propgrid.PGDefaultRenderer.html" title="wx.propgrid.PGDefaultRenderer" alt="" coords="5,160,232,189"/> <area shape="rect" id="node2" href="wx.propgrid.PGCellRenderer.html" title="wx.propgrid.PGCellRenderer" alt="" coords="17,83,221,112"/> <area shape="rect" id="node3" href="wx.ObjectRefData.html" title="wx.ObjectRefData" alt="" coords="49,5,188,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.propgrid.PGDefaultRenderer.GetImageSize`                              Returns size of the image in front of the editable area.
:meth:`~wx.propgrid.PGDefaultRenderer.Render`                                    Returns ``True`` if rendered something in the foreground (text or bitmap.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.propgrid.PGDefaultRenderer(PGCellRenderer)

   Default cell renderer, that can handles the common scenarios.



   .. method:: GetImageSize(self, property, column, item)

      Returns size of the image in front of the editable area.                  

                


      :param `property`: 
      :type `property`: wx.propgrid.PGProperty
      :param `column`: 
      :type `column`: int
      :param `item`: 
      :type `item`: int




      :rtype: :ref:`Size`







      .. note:: 

         If property is ``None``, then this call is for a custom value. In that case the item is index to :ref:`wx.propgrid.PropertyGrid`'s custom values.   








   .. method:: Render(self, dc, rect, propertyGrid, property, column, item, flags)

      Returns ``True`` if rendered something in the foreground (text or bitmap.                  




      :param `dc`: :ref:`wx.DC`  to paint on.  
      :type `dc`: wx.DC
      :param `rect`: Box reserved for drawing.  
      :type `rect`: wx.Rect
      :param `propertyGrid`: Property grid in which property is displayed.  
      :type `propertyGrid`: wx.propgrid.PropertyGrid
      :param `property`: Property to be rendered.  
      :type `property`: wx.propgrid.PGProperty
      :param `column`: Property cell column.  
      :type `column`: int
      :param `item`: Index of chosen item if combo popup is drawn, -1 otherwise.  
      :type `item`: int
      :param `flags`: See :ref:`list of render flags <wx.propgrid.PGCellRenderer>`.   
      :type `flags`: int


















      :rtype: `bool`



                  




