.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.adv.DatePickerCtrl:

==========================================================================================================================================
|phoenix_title|  **wx.adv.DatePickerCtrl**
==========================================================================================================================================

This control allows the user to select a date.          

Unlike :ref:`wx.adv.CalendarCtrl`, which is a relatively big control, :ref:`wx.adv.DatePickerCtrl`  is implemented as a small window showing the currently selected date. The control can be edited using the keyboard, and can also display a popup window for more user-friendly date selection, depending on the styles used and the platform. 

It is only available if  ``USE_DATEPICKCTRL``   is set to 1. 





.. _DatePickerCtrl-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  

- ``wx.adv.DP_SPIN``: Creates a control without a month calendar drop down but with spin-control-like arrows to change individual date components. This style is not supported by the generic version.  
- ``wx.adv.DP_DROPDOWN``: Creates a control with a month calendar drop-down part from which the user can select a date. This style is not supported in OSX/Cocoa native version.  
- ``wx.adv.DP_DEFAULT``: Creates a control with the style that is best supported for the current platform (currently ``wx.adv.DP_SPIN`` under Windows and OSX/Cocoa and ``wx.adv.DP_DROPDOWN`` elsewhere).  
- ``wx.adv.DP_ALLOWNONE``: With this style, the control allows the user to not enter any valid date at all. Without it - the default - the control always has some valid date. This style is not supported in OSX/Cocoa native version.  
- ``wx.adv.DP_SHOWCENTURY``: Forces display of the century in the default date format. Without this style the century could be displayed, or not, depending on the default date representation in the system. This style is not supported in OSX/Cocoa native version currently.  

As can be seen from the remarks above, most of the control style are only supported in the native MSW implementation. In portable code it's recommended to use
 ``DP_DEFAULT``   style only, possibly combined with   ``DP_SHOWCENTURY``   (this is also the style used by default if none is specified). 







.. _DatePickerCtrl-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.adv.DateEvent` parameter.


- EVT_DATE_CHANGED: Process a wxEVT_DATE_CHANGED event, which fires when the user changes the current selection in the control.  








         



.. seealso:: :ref:`wx.adv.TimePickerCtrl`, :ref:`wx.adv.CalendarCtrl`, :ref:`wx.adv.DateEvent`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>DatePickerCtrl</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.adv.DatePickerCtrl_inheritance.png" alt="Inheritance diagram of DatePickerCtrl" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.adv.DatePickerCtrl.html" title="wx.adv.DatePickerCtrl" alt="" coords="25,315,192,344"/> <area shape="rect" id="node2" href="wx.Control.html" title="wx.Control" alt="" coords="63,237,155,267"/> <area shape="rect" id="node3" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node4" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node6" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|appearance| Control Appearance
===============================

|

.. figure:: _static/images/widgets/fullsize/wxmsw/wx.adv.datepickerctrl.png
   :alt: wxMSW
   :figclass: floatleft

   **wxMSW**


.. figure:: _static/images/widgets/fullsize/wxmac/wx.adv.datepickerctrl.png
   :alt: wxMAC
   :figclass: floatright

   **wxMAC**


.. figure:: _static/images/widgets/fullsize/wxgtk/wx.adv.datepickerctrl.png
   :alt: wxGTK
   :figclass: floatcenter

   **wxGTK**


|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.adv.DatePickerCtrl.__init__`                                          Default constructor.
:meth:`~wx.adv.DatePickerCtrl.Create`                                            Create the control window.
:meth:`~wx.adv.DatePickerCtrl.GetClassDefaultAttributes`                         
:meth:`~wx.adv.DatePickerCtrl.GetRange`                                          If the control had been previously limited to a range of dates using :meth:`~DatePickerCtrl.SetRange` , returns the lower and upper bounds of this range.
:meth:`~wx.adv.DatePickerCtrl.GetValue`                                          Returns the currently entered date.
:meth:`~wx.adv.DatePickerCtrl.SetNullText`                                       Set the text to show when there is no valid value.
:meth:`~wx.adv.DatePickerCtrl.SetRange`                                          Sets the valid range for the date selection.
:meth:`~wx.adv.DatePickerCtrl.SetValue`                                          Changes the current value of the control.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.adv.DatePickerCtrl.Value`                                             See :meth:`~wx.adv.DatePickerCtrl.GetValue` and :meth:`~wx.adv.DatePickerCtrl.SetValue`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.adv.DatePickerCtrl(Control)

   **Possible constructors**::

       DatePickerCtrl()
       
       DatePickerCtrl(parent, id=ID_ANY, dt=DefaultDateTime,
                      pos=DefaultPosition, size=DefaultSize, style=DP_DEFAULT|DP_SHOWCENTURY,
                      validator=DefaultValidator, name="datectrl")
       
   
   This control allows the user to select a date.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, dt=DefaultDateTime, pos=DefaultPosition, size=DefaultSize, style=DP_DEFAULT|DP_SHOWCENTURY, validator=DefaultValidator, name="datectrl")`
      
      Initializes the object and calls :meth:`Create`   with all the parameters.                  
      
      
      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `dt`: 
      :type `dt`: wx.DateTime
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `validator`: 
      :type `validator`: wx.Validator
      :param `name`: 
      :type `name`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Create(self, parent, id=ID_ANY, dt=DefaultDateTime, pos=DefaultPosition, size=DefaultSize, style=DP_DEFAULT|DP_SHOWCENTURY, validator=DefaultValidator, name="datectrl")

      Create the control window.                  

      This method should only be used for objects created using default constructor. 




      :param `parent`: Parent window, must not be non-NULL.   
      :type `parent`: wx.Window
      :param `id`: The identifier for the control.   
      :type `id`: wx.WindowID
      :param `dt`: The initial value of the control, if an invalid date (such as the default value) is used, the control is set to today.   
      :type `dt`: wx.DateTime
      :param `pos`: Initial position.   
      :type `pos`: wx.Point
      :param `size`: Initial size. If left at default value, the control chooses its own best size by using the height approximately equal to a text control and width large enough to show the date string fully.   
      :type `size`: wx.Size
      :param `style`: The window style, see the description of the styles in the class documentation.   
      :type `style`: long
      :param `validator`: Validator which can be used for additional date checks.   
      :type `validator`: wx.Validator
      :param `name`: Control name.  
      :type `name`: string




















      :rtype: `bool`



                  



      :returns: 

         ``True`` if the control was successfully created or ``False`` if creation failed.   








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`VisualAttributes`








   .. method:: GetRange(self)

      If the control had been previously limited to a range of dates using :meth:`SetRange` , returns the lower and upper bounds of this range.                  

      If no range is set (or only one of the bounds is set), `dt1`  and/or `dt2`  are set to be invalid. 

      Notice that when using a native MSW implementation of this control the lower range is always set, even if :meth:`SetRange`   hadn't been called explicitly, as the native control only supports dates later than year 1601. 







      :rtype: `tuple`



                  



      :returns: 

         ( `bool`, `dt1`, `dt2` ) 








   .. method:: GetValue(self)

      Returns the currently entered date.                  

      For a control with  ``DP_ALLOWNONE``   style the returned value may be invalid if no date is entered, otherwise it is always valid.                   

      :rtype: :ref:`DateTime`








   .. method:: SetNullText(self, text)

      Set the text to show when there is no valid value.                  

      For the controls with  ``DP_ALLOWNONE``   style, set the string displayed when the control doesn't have any valid value. Currently this is only actually used under MSW, where it can be used to override the previous value which is still displayed by the control in this case, and ignored elsewhere. 

      Notably, `text`  can be empty to completely hide the date if no valid date is specified. 

                


      :param `text`: 
      :type `text`: string






      .. versionadded:: 4.1/wxWidgets-3.1.5  
     








   .. method:: SetRange(self, dt1, dt2)

      Sets the valid range for the date selection.                  

      If `dt1`  is valid, it becomes the earliest date (inclusive) accepted by the control. If `dt2`  is valid, it becomes the latest possible date. 

      Notice that if the current value is not inside the new range, it will be adjusted to lie inside it, i.e. calling this method can change the control value, however no events are generated by it. 

                


      :param `dt1`: 
      :type `dt1`: wx.DateTime
      :param `dt2`: 
      :type `dt2`: wx.DateTime






      .. note:: 

         If the current value of the control is outside of the newly set range bounds, the behaviour is undefined.   








   .. method:: SetValue(self, dt)

      Changes the current value of the control.                  

      The date should be valid unless the control was created with  ``DP_ALLOWNONE``   style and included in the currently selected range, if any. 

      Calling this method does not result in a date change event.                  


      :param `dt`: 
      :type `dt`: wx.DateTime







   .. attribute:: Value

      See :meth:`~wx.adv.DatePickerCtrl.GetValue` and :meth:`~wx.adv.DatePickerCtrl.SetValue`

