.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.SpinCtrl:

==========================================================================================================================================
|phoenix_title|  **wx.SpinCtrl**
==========================================================================================================================================

:ref:`wx.SpinCtrl`  combines :ref:`wx.TextCtrl`  and :ref:`wx.SpinButton`  in one control.          





.. _SpinCtrl-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  

- ``wx.SP_ARROW_KEYS``: The user can use arrow keys to change the value.  
- ``wx.SP_WRAP``: The value wraps at the minimum and maximum.  
- ``wx.TE_PROCESS_ENTER``: Indicates that the control should generate  ``wxEVT_TEXT_ENTER``   events. Using this style will prevent the user from using the Enter key for dialog navigation (e.g. activating the default button in the dialog) under MSW.   
- ``wx.ALIGN_LEFT``: Same as ``wx.TE_LEFT`` for :ref:`wx.TextCtrl`: the text is left aligned (this is the default).  
- ``wx.ALIGN_CENTRE_HORIZONTAL``: Same as ``wx.TE_CENTRE`` for :ref:`wx.TextCtrl`: the text is centered.  
- ``wx.ALIGN_RIGHT``: Same as ``wx.TE_RIGHT`` for :ref:`wx.TextCtrl`: the text is right aligned.  








.. _SpinCtrl-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.SpinEvent` parameter.


- EVT_SPINCTRL: Process a wxEVT_SPINCTRL event, which is generated whenever the numeric value of the spin control is updated.  

You may also use the
:ref:`wx.SpinButton`  event macros, however the corresponding events will not be generated under all platforms. Finally, if the user modifies the text in the edit part of the spin control directly, the ``EVT_TEXT`` is generated, like for the :ref:`wx.TextCtrl`. When the use enters text into the text area, the text is not validated until the control loses focus (e.g. by using the ``TAB`` key). The value is then adjusted to the range and a :ref:`wx.SpinEvent`  sent then if the value is different from the last value sent. 







         



.. seealso:: :ref:`wx.SpinButton`, :ref:`wx.SpinCtrlDouble`, :ref:`wx.Control`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>SpinCtrl</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.SpinCtrl_inheritance.png" alt="Inheritance diagram of SpinCtrl" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.SpinCtrl.html" title="wx.SpinCtrl" alt="" coords="61,315,157,344"/> <area shape="rect" id="node2" href="wx.Control.html" title="wx.Control" alt="" coords="63,237,155,267"/> <area shape="rect" id="node3" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node4" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node6" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|appearance| Control Appearance
===============================

|

.. figure:: _static/images/widgets/fullsize/wxmsw/wx.spinctrl.png
   :alt: wxMSW
   :figclass: floatleft

   **wxMSW**


.. figure:: _static/images/widgets/fullsize/wxmac/wx.spinctrl.png
   :alt: wxMAC
   :figclass: floatright

   **wxMAC**


.. figure:: _static/images/widgets/fullsize/wxgtk/wx.spinctrl.png
   :alt: wxGTK
   :figclass: floatcenter

   **wxGTK**


|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.SpinCtrl.__init__`                                                    Default constructor.
:meth:`~wx.SpinCtrl.Create`                                                      Creation function called by the spin control constructor.
:meth:`~wx.SpinCtrl.GetBase`                                                     Returns the numerical base being currently used, 10 by default.
:meth:`~wx.SpinCtrl.GetClassDefaultAttributes`                                   
:meth:`~wx.SpinCtrl.GetMax`                                                      Gets maximal allowable value.
:meth:`~wx.SpinCtrl.GetMin`                                                      Gets minimal allowable value.
:meth:`~wx.SpinCtrl.GetRange`                                                    
:meth:`~wx.SpinCtrl.GetValue`                                                    Gets the value of the spin control.
:meth:`~wx.SpinCtrl.SetBase`                                                     Sets the base to use for the numbers in this control.
:meth:`~wx.SpinCtrl.SetMax`                                                      
:meth:`~wx.SpinCtrl.SetMin`                                                      
:meth:`~wx.SpinCtrl.SetRange`                                                    Sets range of allowable values.
:meth:`~wx.SpinCtrl.SetSelection`                                                Select the text in the text part of the control between positions `from`  (inclusive) and `to`  (exclusive).
:meth:`~wx.SpinCtrl.SetValue`                                                    Sets the value of the spin control.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.SpinCtrl.Base`                                                        See :meth:`~wx.SpinCtrl.GetBase` and :meth:`~wx.SpinCtrl.SetBase`
:attr:`~wx.SpinCtrl.Max`                                                         See :meth:`~wx.SpinCtrl.GetMax` and :meth:`~wx.SpinCtrl.SetMax`
:attr:`~wx.SpinCtrl.Min`                                                         See :meth:`~wx.SpinCtrl.GetMin` and :meth:`~wx.SpinCtrl.SetMin`
:attr:`~wx.SpinCtrl.Range`                                                       See :meth:`~wx.SpinCtrl.GetRange`
:attr:`~wx.SpinCtrl.Value`                                                       See :meth:`~wx.SpinCtrl.GetValue` and :meth:`~wx.SpinCtrl.SetValue`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.SpinCtrl(Control)

   **Possible constructors**::

       SpinCtrl()
       
       SpinCtrl(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition,
                size=DefaultSize, style=SP_ARROW_KEYS, min=0, max=100, initial=0,
                name="wxSpinCtrl")
       
   
   SpinCtrl combines TextCtrl and SpinButton in one control.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=SP_ARROW_KEYS, min=0, max=100, initial=0, name="wxSpinCtrl")`
      
      Constructor, creating and showing a spin control.                  
      
      If `value`  is non-empty, it will be shown in the text entry part of the control and if it has numeric value, the initial numeric value of the control, as returned by :meth:`GetValue`   will also be determined by it instead of by `initial`. Hence, it only makes sense to specify `initial`  if `value`  is an empty string or is not convertible to a number, otherwise `initial`  is simply ignored and the number specified by `value`  is used. 
      
      
      
      
      :param `parent`: Parent window. Must not be ``None``.   
      :type `parent`: wx.Window
      :param `id`: Window identifier. The value ``wx.ID_ANY`` indicates a default value.   
      :type `id`: wx.WindowID
      :param `value`: Default value (as text).   
      :type `value`: string
      :param `pos`: Window position. If :ref:`wx.DefaultPosition`  is specified then a default position is chosen.   
      :type `pos`: wx.Point
      :param `size`: Window size. If :ref:`wx.DefaultSize`  is specified then a default size is chosen.   
      :type `size`: wx.Size
      :param `style`: Window style. See :ref:`wx.SpinButton`.   
      :type `style`: long
      :param `min`: Minimal value.   
      :type `min`: int
      :param `max`: Maximal value.   
      :type `max`: int
      :param `initial`: Initial value.   
      :type `initial`: int
      :param `name`: Window name.  
      :type `name`: string
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. seealso:: :meth:`Create`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Create(self, parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=SP_ARROW_KEYS, min=0, max=100, initial=0, name="wxSpinCtrl")

      Creation function called by the spin control constructor.                  

      See :ref:`wx.SpinCtrl`  for details.                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `value`: 
      :type `value`: string
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `min`: 
      :type `min`: int
      :param `max`: 
      :type `max`: int
      :param `initial`: 
      :type `initial`: int
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. method:: GetBase(self)

      Returns the numerical base being currently used, 10 by default.                  

                

      :rtype: `int`







      .. versionadded:: 2.9.5 
     







      .. seealso:: :meth:`SetBase`   








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: GetMax(self)

      Gets maximal allowable value.                  

      :rtype: `int`








   .. method:: GetMin(self)

      Gets minimal allowable value.                  

      :rtype: `int`








   .. method:: GetRange(self)




   .. method:: GetValue(self)

      Gets the value of the spin control.                  

      :rtype: `int`








   .. method:: SetBase(self, base)

      Sets the base to use for the numbers in this control.                  

      Currently the only supported values are 10 (which is the default) and 16. 

      Changing the base allows the user to enter the numbers in the specified base, e.g. with "0x" prefix for hexadecimal numbers, and also displays the numbers in the specified base when they are changed using the spin control arrows. 




      :param `base`: Numeric base, currently only 10 and 16 are supported.   
      :type `base`: int






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the base was successfully changed or ``False`` if it failed, usually meaning that either the base is not 10 or 16 or that the base is not supported for values in the current range.  







      .. versionadded:: 2.9.5 
     







      .. note:: 

         Setting a base to 16 is allowed only if current range does not include negative values.  








   .. method:: SetMax(self, maxVal)




   .. method:: SetMin(self, minVal)




   .. method:: SetRange(self, minVal, maxVal)

      Sets range of allowable values.                  

      Notice that calling this method may change the value of the control if it's not inside the new valid range, e.g. it will become `minVal`  if it is less than it now. However no  ``wxEVT_SPINCTRL``   event is generated, even if it the value does change. 

                


      :param `minVal`: 
      :type `minVal`: int
      :param `maxVal`: 
      :type `maxVal`: int






      .. note:: 

         Setting a range including negative values is silently ignored if current base is set to 16.   








   .. method:: SetSelection(self, from_, to_)

      Select the text in the text part of the control between positions `from`  (inclusive) and `to`  (exclusive).                  

      This is similar to :meth:`wx.TextCtrl.SetSelection` . 

                


      :param `from_`: 
      :type `from_`: long
      :param `to_`: 
      :type `to_`: long






      .. note:: 

         this is currently only implemented for Windows and generic versions of the control.   








   .. method:: SetValue(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetValue** `(self, text)`
      
      Sets the value of the spin control.                  
      
      It is recommended to use the overload taking an integer value instead. 
      
      Notice that, unlike :meth:`wx.TextCtrl.SetValue` , but like most of the other setter methods in wxWidgets, calling this method does not generate any events as events are only generated for the user actions.                  
      
      
      :param `text`: 
      :type `text`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetValue** `(self, value)`
      
      Sets the value of the spin control.                  
      
      Calling this method doesn't generate any  ``wxEVT_SPINCTRL``   events.                   
      
      
      :param `value`: 
      :type `value`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. attribute:: Base

      See :meth:`~wx.SpinCtrl.GetBase` and :meth:`~wx.SpinCtrl.SetBase`


   .. attribute:: Max

      See :meth:`~wx.SpinCtrl.GetMax` and :meth:`~wx.SpinCtrl.SetMax`


   .. attribute:: Min

      See :meth:`~wx.SpinCtrl.GetMin` and :meth:`~wx.SpinCtrl.SetMin`


   .. attribute:: Range

      See :meth:`~wx.SpinCtrl.GetRange`


   .. attribute:: Value

      See :meth:`~wx.SpinCtrl.GetValue` and :meth:`~wx.SpinCtrl.SetValue`

