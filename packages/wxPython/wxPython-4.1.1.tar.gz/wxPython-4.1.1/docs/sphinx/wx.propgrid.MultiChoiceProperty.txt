.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.propgrid.MultiChoiceProperty:

==========================================================================================================================================
|phoenix_title|  **wx.propgrid.MultiChoiceProperty**
==========================================================================================================================================

Property that manages a value resulting from :ref:`wx.MultiChoiceDialog`.          

Value is array of strings. You can get value as array of choice values/indices by calling :meth:`wx.propgrid.MultiChoiceProperty.GetValueAsArrayInt` . 

**Supported special attributes:**

- ``PG_ATTR_MULTICHOICE_USERSTRINGMODE``: If > 0, allow user to manually enter strings that are not in the list of choices. If this value is 1, user strings are preferably placed in front of valid choices. If value is 2, then those strings will placed behind valid choices. 
- ``PG_DIALOG_TITLE``: Sets a specific title for the editor dialog (since 3.1.3).  


          




|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>MultiChoiceProperty</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.propgrid.MultiChoiceProperty_inheritance.png" alt="Inheritance diagram of MultiChoiceProperty" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.propgrid.MultiChoiceProperty.html" title="wx.propgrid.MultiChoiceProperty" alt="" coords="7,237,242,267"/> <area shape="rect" id="node2" href="wx.propgrid.EditorDialogProperty.html" title="wx.propgrid.EditorDialogProperty" alt="" coords="5,160,244,189"/> <area shape="rect" id="node3" href="wx.propgrid.PGProperty.html" title="wx.propgrid.PGProperty" alt="" coords="37,83,213,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="81,5,168,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.propgrid.MultiChoiceProperty.__init__`                                
:meth:`~wx.propgrid.MultiChoiceProperty.DisplayEditorDialog`                     Shows editor dialog.
:meth:`~wx.propgrid.MultiChoiceProperty.GetValueAsArrayInt`                      
:meth:`~wx.propgrid.MultiChoiceProperty.OnSetValue`                              This virtual function is called after m_value has been set.
:meth:`~wx.propgrid.MultiChoiceProperty.StringToValue`                           Converts text into :ref:`Variant`  value appropriate for this property.
:meth:`~wx.propgrid.MultiChoiceProperty.ValueToString`                           Converts property value into a text representation.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.propgrid.MultiChoiceProperty.ValueAsArrayInt`                         See :meth:`~wx.propgrid.MultiChoiceProperty.GetValueAsArrayInt`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.propgrid.MultiChoiceProperty(EditorDialogProperty)

   **Possible constructors**::

       MultiChoiceProperty(label, name=PG_LABEL, choices=[], value=[])
       
       MultiChoiceProperty(label, name, choices, value=[])
       
       MultiChoiceProperty(label=PG_LABEL, name=PG_LABEL, value=[])
       
   
   Property that manages a value resulting from MultiChoiceDialog.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, label, name=PG_LABEL, choices=[], value=[])`
      
      
      
      
      :param `label`: 
      :type `label`: string
      :param `name`: 
      :type `name`: string
      :param `choices`: 
      :type `choices`: list of strings
      :param `value`: 
      :type `value`: list of strings
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, label, name, choices, value=[])`
      
      
      
      
      :param `label`: 
      :type `label`: string
      :param `name`: 
      :type `name`: string
      :param `choices`: 
      :type `choices`: wx.propgrid.PGChoices
      :param `value`: 
      :type `value`: list of strings
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, label=PG_LABEL, name=PG_LABEL, value=[])`
      
      
      
      
      :param `label`: 
      :type `label`: string
      :param `name`: 
      :type `name`: string
      :param `value`: 
      :type `value`: list of strings
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DisplayEditorDialog(self, pg, value)

      Shows editor dialog.                  

      Value to be edited should be read from `value`, and if dialog is not cancelled, it should be stored back and ``True`` should be returned. 




      :param `pg`: Property grid in which property is displayed.  
      :type `pg`: wx.propgrid.PropertyGrid
      :param `value`: Value to be edited.  
      :type `value`: PGVariant








      :rtype: `tuple`



                  



      :returns: 

         ( `bool`, `value` ) 








   .. method:: GetValueAsArrayInt(self)



      :rtype: `list of integers`








   .. method:: OnSetValue(self)

      This virtual function is called after m_value has been set.                  

                 



      .. note:: 

   

         - If m_value was set to Null variant (i.e. unspecified value), :meth:`OnSetValue`   will not be called. 
         - m_value may be of any variant type. Typically properties internally support only one variant type, and as such :meth:`OnSetValue`   provides a good opportunity to convert supported values into internal type. 
         - Default implementation does nothing.  











   .. method:: StringToValue(self, text, argFlags=0)

      Converts text into :ref:`Variant`  value appropriate for this property.                  




      :param `text`: Text to be translated into variant.  
      :type `text`: string
      :param `argFlags`: If ``PG_FULL_VALUE``  is set, returns complete, storable value instead of displayable one (they may be different). If ``PG_COMPOSITE_FRAGMENT``  is set, text is interpreted as a part of composite property string value (as generated by :meth:`ValueToString`   called with this same flag).  
      :type `argFlags`: int










      :rtype: `tuple`




      You might want to take into account that m_value is Null variant if property value is unspecified (which is usually only case if you explicitly enabled that sort behaviour).                    



      :returns: 

         ( `bool`, `variant` ) 







      .. note:: 

         Default implementation converts semicolon delimited tokens into child values. Only works for properties with children.  








   .. method:: ValueToString(self, value, argFlags=0)

      Converts property value into a text representation.                  




      :param `value`: Value to be converted.   
      :type `value`: PGVariant
      :param `argFlags`: If 0 (default value), then displayed string is returned. If ``PG_FULL_VALUE``  is set, returns complete, storable string value instead of displayable. If ``PG_EDITABLE_VALUE``  is set, returns string value that must be editable in textctrl. If ``PG_COMPOSITE_FRAGMENT``  is set, returns text that is appropriate to display as a part of string property's composite text representation.  
      :type `argFlags`: int








      :rtype: `string`



                  



      .. note:: 

         Default implementation calls :meth:`GenerateComposedValue` .   








   .. attribute:: ValueAsArrayInt

      See :meth:`~wx.propgrid.MultiChoiceProperty.GetValueAsArrayInt`

