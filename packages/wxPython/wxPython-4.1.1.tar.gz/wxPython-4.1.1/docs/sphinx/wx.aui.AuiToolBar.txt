.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.aui.AuiToolBar:

==========================================================================================================================================
|phoenix_title|  **wx.aui.AuiToolBar**
==========================================================================================================================================

:ref:`wx.aui.AuiToolBar`  is a dockable toolbar, part of the ``AUI`` class framework.          

See also :ref:`AUI Overview <aui overview>`. 

The appearance of this class is configurable and can be changed by calling :meth:`wx.aui.AuiToolBar.SetArtProvider` . By default, native art provider is used if available (currently only in wxMSW) and AuiGenericToolBarArt otherwise. 





.. _AuiToolBar-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  

- ``wx.aui.AUI_TB_TEXT``: Display the label strings on the toolbar buttons.  
- ``wx.aui.AUI_TB_NO_TOOLTIPS``: Do not show tooltips for the toolbar items.  
- ``wx.aui.AUI_TB_NO_AUTORESIZE``: Do not automatically resize the toolbar when new tools are added.  
- ``wx.aui.AUI_TB_GRIPPER``: Show the toolbar's gripper control. If the toolbar is added to an ``AUI`` pane that contains a gripper, this style will be automatically set.  
- ``wx.aui.AUI_TB_OVERFLOW``: Show an overflow menu containing toolbar items that can't fit on the toolbar if it is too small.  
- ``wx.aui.AUI_TB_VERTICAL``: Using this style forces the toolbar to be vertical and be only dockable to the left or right sides of the window whereas by default it can be horizontal or vertical and be docked anywhere.  
- ``wx.aui.AUI_TB_HORZ_LAYOUT``:  
- ``wx.aui.AUI_TB_HORIZONTAL``: Analogous to ``wx.aui.AUI_TB_VERTICAL``, but forces the toolbar to be horizontal.  
- ``wx.aui.AUI_TB_PLAIN_BACKGROUND``: Draw a plain background (based on parent) instead of the default gradient background.  
- ``wx.aui.AUI_TB_HORZ_TEXT``: Equivalent to ``wx.aui.AUI_TB_HORZ_LAYOUT`` | ``wx.aui.AUI_TB_TEXT``  
- ``wx.aui.AUI_TB_DEFAULT_STYLE``: The default is to have no styles.  








.. _AuiToolBar-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.aui.AuiToolBarEvent` parameter.


- EVT_AUITOOLBAR_TOOL_DROPDOWN: Process a wxEVT_AUITOOLBAR_TOOL_DROPDOWN event  
- EVT_AUITOOLBAR_OVERFLOW_CLICK: Process a wxEVT_AUITOOLBAR_OVERFLOW_CLICK event  
- EVT_AUITOOLBAR_RIGHT_CLICK: Process a wxEVT_AUITOOLBAR_RIGHT_CLICK event  
- EVT_AUITOOLBAR_MIDDLE_CLICK: Process a wxEVT_AUITOOLBAR_MIDDLE_CLICK event  
- EVT_AUITOOLBAR_BEGIN_DRAG: Process a wxEVT_AUITOOLBAR_BEGIN_DRAG event  










|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>AuiToolBar</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.aui.AuiToolBar_inheritance.png" alt="Inheritance diagram of AuiToolBar" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.aui.AuiToolBar.html" title="wx.aui.AuiToolBar" alt="" coords="39,315,178,344"/> <area shape="rect" id="node2" href="wx.Control.html" title="wx.Control" alt="" coords="63,237,155,267"/> <area shape="rect" id="node3" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node4" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node6" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.aui.AuiToolBar.__init__`                                              Default constructor, use :meth:`~AuiToolBar.Create`   later.
:meth:`~wx.aui.AuiToolBar.AddControl`                                            
:meth:`~wx.aui.AuiToolBar.AddLabel`                                              
:meth:`~wx.aui.AuiToolBar.AddSeparator`                                          
:meth:`~wx.aui.AuiToolBar.AddSpacer`                                             
:meth:`~wx.aui.AuiToolBar.AddStretchSpacer`                                      
:meth:`~wx.aui.AuiToolBar.AddTool`                                               
:meth:`~wx.aui.AuiToolBar.Clear`                                                 
:meth:`~wx.aui.AuiToolBar.ClearTools`                                            
:meth:`~wx.aui.AuiToolBar.Create`                                                Really create :ref:`wx.aui.AuiToolBar`  created using default constructor.
:meth:`~wx.aui.AuiToolBar.DeleteByIndex`                                         Removes the tool at the given position from the toolbar.
:meth:`~wx.aui.AuiToolBar.DeleteTool`                                            Removes the tool with the given ``ID`` from the toolbar.
:meth:`~wx.aui.AuiToolBar.DestroyTool`                                           Destroys the tool with the given ``ID`` and its associated window, if any.
:meth:`~wx.aui.AuiToolBar.DestroyToolByIndex`                                    Destroys the tool at the given position and its associated window, if any.
:meth:`~wx.aui.AuiToolBar.EnableTool`                                            
:meth:`~wx.aui.AuiToolBar.FindControl`                                           
:meth:`~wx.aui.AuiToolBar.FindTool`                                              
:meth:`~wx.aui.AuiToolBar.FindToolByIndex`                                       
:meth:`~wx.aui.AuiToolBar.FindToolByPosition`                                    
:meth:`~wx.aui.AuiToolBar.GetArtProvider`                                        
:meth:`~wx.aui.AuiToolBar.GetClassDefaultAttributes`                             
:meth:`~wx.aui.AuiToolBar.GetGripperVisible`                                     
:meth:`~wx.aui.AuiToolBar.GetHintSize`                                           get size of hint rectangle for a particular dock location
:meth:`~wx.aui.AuiToolBar.GetOverflowVisible`                                    
:meth:`~wx.aui.AuiToolBar.GetToolBarFits`                                        
:meth:`~wx.aui.AuiToolBar.GetToolBitmap`                                         
:meth:`~wx.aui.AuiToolBar.GetToolBitmapSize`                                     
:meth:`~wx.aui.AuiToolBar.GetToolBorderPadding`                                  
:meth:`~wx.aui.AuiToolBar.GetToolCount`                                          
:meth:`~wx.aui.AuiToolBar.GetToolDropDown`                                       Returns whether the specified toolbar item has an associated drop down button.
:meth:`~wx.aui.AuiToolBar.GetToolEnabled`                                        
:meth:`~wx.aui.AuiToolBar.GetToolFits`                                           
:meth:`~wx.aui.AuiToolBar.GetToolFitsByIndex`                                    
:meth:`~wx.aui.AuiToolBar.GetToolIndex`                                          
:meth:`~wx.aui.AuiToolBar.GetToolLabel`                                          
:meth:`~wx.aui.AuiToolBar.GetToolLongHelp`                                       
:meth:`~wx.aui.AuiToolBar.GetToolPacking`                                        
:meth:`~wx.aui.AuiToolBar.GetToolPos`                                            
:meth:`~wx.aui.AuiToolBar.GetToolProportion`                                     
:meth:`~wx.aui.AuiToolBar.GetToolRect`                                           
:meth:`~wx.aui.AuiToolBar.GetToolSeparation`                                     
:meth:`~wx.aui.AuiToolBar.GetToolShortHelp`                                      
:meth:`~wx.aui.AuiToolBar.GetToolSticky`                                         
:meth:`~wx.aui.AuiToolBar.GetToolTextOrientation`                                
:meth:`~wx.aui.AuiToolBar.GetToolToggled`                                        
:meth:`~wx.aui.AuiToolBar.GetWindowStyleFlag`                                    Gets the window style that was passed to the constructor or :meth:`~AuiToolBar.Create`   method.
:meth:`~wx.aui.AuiToolBar.IsPaneValid`                                           
:meth:`~wx.aui.AuiToolBar.Realize`                                               
:meth:`~wx.aui.AuiToolBar.SetArtProvider`                                        
:meth:`~wx.aui.AuiToolBar.SetCustomOverflowItems`                                Add toolbar items that are always displayed in the overflow menu.
:meth:`~wx.aui.AuiToolBar.SetFont`                                               Sets the font for this window.
:meth:`~wx.aui.AuiToolBar.SetGripperVisible`                                     
:meth:`~wx.aui.AuiToolBar.SetMargins`                                            
:meth:`~wx.aui.AuiToolBar.SetOverflowVisible`                                    
:meth:`~wx.aui.AuiToolBar.SetToolBitmap`                                         
:meth:`~wx.aui.AuiToolBar.SetToolBitmapSize`                                     
:meth:`~wx.aui.AuiToolBar.SetToolBorderPadding`                                  
:meth:`~wx.aui.AuiToolBar.SetToolDropDown`                                       Set whether the specified toolbar item has a drop down button.
:meth:`~wx.aui.AuiToolBar.SetToolLabel`                                          
:meth:`~wx.aui.AuiToolBar.SetToolLongHelp`                                       
:meth:`~wx.aui.AuiToolBar.SetToolPacking`                                        
:meth:`~wx.aui.AuiToolBar.SetToolProportion`                                     
:meth:`~wx.aui.AuiToolBar.SetToolSeparation`                                     
:meth:`~wx.aui.AuiToolBar.SetToolShortHelp`                                      
:meth:`~wx.aui.AuiToolBar.SetToolSticky`                                         
:meth:`~wx.aui.AuiToolBar.SetToolTextOrientation`                                
:meth:`~wx.aui.AuiToolBar.SetWindowStyleFlag`                                    Sets the style of the window.
:meth:`~wx.aui.AuiToolBar.ToggleTool`                                            
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.aui.AuiToolBar.ArtProvider`                                           See :meth:`~wx.aui.AuiToolBar.GetArtProvider` and :meth:`~wx.aui.AuiToolBar.SetArtProvider`
:attr:`~wx.aui.AuiToolBar.GripperVisible`                                        See :meth:`~wx.aui.AuiToolBar.GetGripperVisible` and :meth:`~wx.aui.AuiToolBar.SetGripperVisible`
:attr:`~wx.aui.AuiToolBar.OverflowVisible`                                       See :meth:`~wx.aui.AuiToolBar.GetOverflowVisible` and :meth:`~wx.aui.AuiToolBar.SetOverflowVisible`
:attr:`~wx.aui.AuiToolBar.ToolBarFits`                                           See :meth:`~wx.aui.AuiToolBar.GetToolBarFits`
:attr:`~wx.aui.AuiToolBar.ToolBitmapSize`                                        See :meth:`~wx.aui.AuiToolBar.GetToolBitmapSize` and :meth:`~wx.aui.AuiToolBar.SetToolBitmapSize`
:attr:`~wx.aui.AuiToolBar.ToolBorderPadding`                                     See :meth:`~wx.aui.AuiToolBar.GetToolBorderPadding` and :meth:`~wx.aui.AuiToolBar.SetToolBorderPadding`
:attr:`~wx.aui.AuiToolBar.ToolCount`                                             See :meth:`~wx.aui.AuiToolBar.GetToolCount`
:attr:`~wx.aui.AuiToolBar.ToolPacking`                                           See :meth:`~wx.aui.AuiToolBar.GetToolPacking` and :meth:`~wx.aui.AuiToolBar.SetToolPacking`
:attr:`~wx.aui.AuiToolBar.ToolSeparation`                                        See :meth:`~wx.aui.AuiToolBar.GetToolSeparation` and :meth:`~wx.aui.AuiToolBar.SetToolSeparation`
:attr:`~wx.aui.AuiToolBar.ToolTextOrientation`                                   See :meth:`~wx.aui.AuiToolBar.GetToolTextOrientation` and :meth:`~wx.aui.AuiToolBar.SetToolTextOrientation`
:attr:`~wx.aui.AuiToolBar.WindowStyleFlag`                                       See :meth:`~wx.aui.AuiToolBar.GetWindowStyleFlag` and :meth:`~wx.aui.AuiToolBar.SetWindowStyleFlag`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.aui.AuiToolBar(Control)

   **Possible constructors**::

       AuiToolBar()
       
       AuiToolBar(parent, id=ID_ANY, position=DefaultPosition,
                  size=DefaultSize, style=AUI_TB_DEFAULT_STYLE)
       
   
   AuiToolBar is a dockable toolbar, part of the ``AUI`` class framework.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor, use :meth:`Create`   later.                  
      
                       
      
      
      
      .. versionadded:: 2.9.5 
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, position=DefaultPosition, size=DefaultSize, style=AUI_TB_DEFAULT_STYLE)`
      
      Constructor creating and initializing the object.                  
      
      
      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `position`: 
      :type `position`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AddControl(self, control, label=EmptyString)




      :param `control`: 
      :type `control`: wx.Control
      :param `label`: 
      :type `label`: string




      :rtype: :ref:`wx.aui.AuiToolBarItem`








   .. method:: AddLabel(self, toolId, label=EmptyString, width=-1)




      :param `toolId`: 
      :type `toolId`: int
      :param `label`: 
      :type `label`: string
      :param `width`: 
      :type `width`: int




      :rtype: :ref:`wx.aui.AuiToolBarItem`








   .. method:: AddSeparator(self)



      :rtype: :ref:`wx.aui.AuiToolBarItem`








   .. method:: AddSpacer(self, pixels)




      :param `pixels`: 
      :type `pixels`: int




      :rtype: :ref:`wx.aui.AuiToolBarItem`








   .. method:: AddStretchSpacer(self, proportion=1)




      :param `proportion`: 
      :type `proportion`: int




      :rtype: :ref:`wx.aui.AuiToolBarItem`








   .. method:: AddTool(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **AddTool** `(self, toolId, label, bitmap, short_help_string=EmptyString, kind=ITEM_NORMAL)`
      
      
      
      
      :param `toolId`: 
      :type `toolId`: int
      :param `label`: 
      :type `label`: string
      :param `bitmap`: 
      :type `bitmap`: wx.Bitmap
      :param `short_help_string`: 
      :type `short_help_string`: string
      :param `kind`: 
      :type `kind`: wx.ItemKind
      
      
      
      
      :rtype: :ref:`wx.aui.AuiToolBarItem`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **AddTool** `(self, toolId, label, bitmap, disabled_bitmap, kind, short_help_string, long_help_string, client_data)`
      
      
      
      
      :param `toolId`: 
      :type `toolId`: int
      :param `label`: 
      :type `label`: string
      :param `bitmap`: 
      :type `bitmap`: wx.Bitmap
      :param `disabled_bitmap`: 
      :type `disabled_bitmap`: wx.Bitmap
      :param `kind`: 
      :type `kind`: wx.ItemKind
      :param `short_help_string`: 
      :type `short_help_string`: string
      :param `long_help_string`: 
      :type `long_help_string`: string
      :param `client_data`: 
      :type `client_data`: wx.Object
      
      
      
      
      :rtype: :ref:`wx.aui.AuiToolBarItem`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **AddTool** `(self, toolId, bitmap, disabled_bitmap, toggle=False, client_data=None, short_help_string=EmptyString, long_help_string=EmptyString)`
      
      
      
      
      :param `toolId`: 
      :type `toolId`: int
      :param `bitmap`: 
      :type `bitmap`: wx.Bitmap
      :param `disabled_bitmap`: 
      :type `disabled_bitmap`: wx.Bitmap
      :param `toggle`: 
      :type `toggle`: bool
      :param `client_data`: 
      :type `client_data`: wx.Object
      :param `short_help_string`: 
      :type `short_help_string`: string
      :param `long_help_string`: 
      :type `long_help_string`: string
      
      
      
      
      :rtype: :ref:`wx.aui.AuiToolBarItem`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Clear(self)






   .. method:: ClearTools(self)






   .. method:: Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=AUI_TB_DEFAULT_STYLE)

      Really create :ref:`wx.aui.AuiToolBar`  created using default constructor.                  

                


      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long




      :rtype: `bool`







      .. versionadded:: 2.9.5 
     








   .. method:: DeleteByIndex(self, idx)

      Removes the tool at the given position from the toolbar.                  

      Note that if this tool was added by :meth:`AddControl` , the associated control is `not`  deleted and must either be reused (e.g. by reparenting it under a different window) or destroyed by caller. If this behaviour is unwanted, prefer using :meth:`DestroyToolByIndex`   instead. 




      :param `idx`: The index, or position, of a previously added tool.   
      :type `idx`: int






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the tool was removed or ``False`` otherwise, e.g. if the provided index is out of range.   








   .. method:: DeleteTool(self, toolId)

      Removes the tool with the given ``ID`` from the toolbar.                  

      Note that if this tool was added by :meth:`AddControl` , the associated control is `not`  deleted and must either be reused (e.g. by reparenting it under a different window) or destroyed by caller. If this behaviour is unwanted, prefer using :meth:`DestroyTool`   instead. 




      :param `toolId`: ``ID`` of a previously added tool.   
      :type `toolId`: int






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the tool was removed or ``False`` otherwise, e.g. if the tool with the given ``ID`` was not found.   








   .. method:: DestroyTool(self, toolId)

      Destroys the tool with the given ``ID`` and its associated window, if any.                  




      :param `toolId`: ``ID`` of a previously added tool.   
      :type `toolId`: int






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the tool was destroyed or ``False`` otherwise, e.g. if the tool with the given ``ID`` was not found.  







      .. versionadded:: 4.1/wxWidgets-3.1.4  
     








   .. method:: DestroyToolByIndex(self, idx)

      Destroys the tool at the given position and its associated window, if any.                  




      :param `idx`: The index, or position, of a previously added tool.   
      :type `idx`: int






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the tool was destroyed or ``False`` otherwise, e.g. if the provided index is out of range.   








   .. method:: EnableTool(self, toolId, state)




      :param `toolId`: 
      :type `toolId`: int
      :param `state`: 
      :type `state`: bool







   .. method:: FindControl(self, window_id)




      :param `window_id`: 
      :type `window_id`: int




      :rtype: :ref:`Control`








   .. method:: FindTool(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: :ref:`wx.aui.AuiToolBarItem`








   .. method:: FindToolByIndex(self, idx)




      :param `idx`: 
      :type `idx`: int




      :rtype: :ref:`wx.aui.AuiToolBarItem`








   .. method:: FindToolByPosition(self, x, y)




      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int




      :rtype: :ref:`wx.aui.AuiToolBarItem`








   .. method:: GetArtProvider(self)



      :rtype: :ref:`wx.aui.AuiToolBarArt`








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`VisualAttributes`








   .. method:: GetGripperVisible(self)



      :rtype: `bool`








   .. method:: GetHintSize(self, dock_direction)

      get size of hint rectangle for a particular dock location                  


      :param `dock_direction`: 
      :type `dock_direction`: int




      :rtype: :ref:`Size`








   .. method:: GetOverflowVisible(self)



      :rtype: `bool`








   .. method:: GetToolBarFits(self)



      :rtype: `bool`








   .. method:: GetToolBitmap(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: :ref:`Bitmap`








   .. method:: GetToolBitmapSize(self)



      :rtype: :ref:`Size`








   .. method:: GetToolBorderPadding(self)



      :rtype: `int`








   .. method:: GetToolCount(self)



      :rtype: `int`








   .. method:: GetToolDropDown(self, toolId)

      Returns whether the specified toolbar item has an associated drop down button.                  

                


      :param `toolId`: 
      :type `toolId`: int




      :rtype: `bool`







      .. seealso:: :meth:`wx.aui.AuiToolBarItem.HasDropDown`     








   .. method:: GetToolEnabled(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: `bool`








   .. method:: GetToolFits(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: `bool`








   .. method:: GetToolFitsByIndex(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: `bool`








   .. method:: GetToolIndex(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: `int`








   .. method:: GetToolLabel(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: `string`








   .. method:: GetToolLongHelp(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: `string`








   .. method:: GetToolPacking(self)



      :rtype: `int`








   .. method:: GetToolPos(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: `int`








   .. method:: GetToolProportion(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: `int`








   .. method:: GetToolRect(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: :ref:`Rect`








   .. method:: GetToolSeparation(self)



      :rtype: `int`








   .. method:: GetToolShortHelp(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: `string`








   .. method:: GetToolSticky(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: `bool`








   .. method:: GetToolTextOrientation(self)



      :rtype: `int`








   .. method:: GetToolToggled(self, toolId)




      :param `toolId`: 
      :type `toolId`: int




      :rtype: `bool`








   .. method:: GetWindowStyleFlag(self)

      Gets the window style that was passed to the constructor or :meth:`Create`   method.                  

      :meth:`GetWindowStyle`   is another name for the same function.                  

      :rtype: `long`








   .. method:: IsPaneValid(self, pane)




      :param `pane`: 
      :type `pane`: wx.aui.AuiPaneInfo




      :rtype: `bool`








   .. method:: Realize(self)



      :rtype: `bool`








   .. method:: SetArtProvider(self, art)




      :param `art`: 
      :type `art`: wx.aui.AuiToolBarArt







   .. method:: SetCustomOverflowItems(self, prepend, append)

      Add toolbar items that are always displayed in the overflow menu.                  

      If there are custom items set, then the overflow menu will be displayed even if there are no items from the main toolbar that overflow. 




      :param `prepend`: are the items to show before any overflow items   
      :type `prepend`: AuiToolBarItemArray
      :param `append`: are the items to show after any overflow items  
      :type `append`: AuiToolBarItemArray






                  



      .. note:: 

         The toolbar must have the  ``AUI_TB_OVERFLOW``   style.    








   .. method:: SetFont(self, font)

      Sets the font for this window.                  

      This function should not be called for the parent window if you don't want its font to be inherited by its children, use :meth:`SetOwnFont`   instead in this case and see :meth:`InheritAttributes`   for more explanations. 

      Please notice that the given font is not automatically used for :ref:`wx.PaintDC`  objects associated with this window, you need to call :meth:`wx.DC.SetFont`   too. However this font is used by any standard controls for drawing their text as well as by :meth:`GetTextExtent` . 




      :param `font`: Font to associate with this window, pass NullFont to reset to the default font.  
      :type `font`: wx.Font






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the font was really changed, ``False`` if it was already set to this font and nothing was done.  







      .. seealso:: :meth:`GetFont` , :meth:`InheritAttributes`     








   .. method:: SetGripperVisible(self, visible)




      :param `visible`: 
      :type `visible`: bool







   .. method:: SetMargins(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetMargins** `(self, size)`
      
      
      
      
      :param `size`: 
      :type `size`: wx.Size
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetMargins** `(self, x, y)`
      
      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetMargins** `(self, left, right, top, bottom)`
      
      
      
      
      :param `left`: 
      :type `left`: int
      :param `right`: 
      :type `right`: int
      :param `top`: 
      :type `top`: int
      :param `bottom`: 
      :type `bottom`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetOverflowVisible(self, visible)




      :param `visible`: 
      :type `visible`: bool







   .. method:: SetToolBitmap(self, toolId, bitmap)




      :param `toolId`: 
      :type `toolId`: int
      :param `bitmap`: 
      :type `bitmap`: wx.Bitmap







   .. method:: SetToolBitmapSize(self, size)




      :param `size`: 
      :type `size`: wx.Size







   .. method:: SetToolBorderPadding(self, padding)




      :param `padding`: 
      :type `padding`: int







   .. method:: SetToolDropDown(self, toolId, dropdown)

      Set whether the specified toolbar item has a drop down button.                  

      This is only valid for ``wx.ITEM_NORMAL`` tools. 

                


      :param `toolId`: 
      :type `toolId`: int
      :param `dropdown`: 
      :type `dropdown`: bool






      .. seealso:: :meth:`wx.aui.AuiToolBarItem.SetHasDropDown`     








   .. method:: SetToolLabel(self, toolId, label)




      :param `toolId`: 
      :type `toolId`: int
      :param `label`: 
      :type `label`: string







   .. method:: SetToolLongHelp(self, toolId, help_string)




      :param `toolId`: 
      :type `toolId`: int
      :param `help_string`: 
      :type `help_string`: string







   .. method:: SetToolPacking(self, packing)




      :param `packing`: 
      :type `packing`: int







   .. method:: SetToolProportion(self, toolId, proportion)




      :param `toolId`: 
      :type `toolId`: int
      :param `proportion`: 
      :type `proportion`: int







   .. method:: SetToolSeparation(self, separation)




      :param `separation`: 
      :type `separation`: int







   .. method:: SetToolShortHelp(self, toolId, help_string)




      :param `toolId`: 
      :type `toolId`: int
      :param `help_string`: 
      :type `help_string`: string







   .. method:: SetToolSticky(self, toolId, sticky)




      :param `toolId`: 
      :type `toolId`: int
      :param `sticky`: 
      :type `sticky`: bool







   .. method:: SetToolTextOrientation(self, orientation)




      :param `orientation`: 
      :type `orientation`: int







   .. method:: SetWindowStyleFlag(self, style)

      Sets the style of the window.                  

      Please note that some styles cannot be changed after the window creation and that :meth:`Refresh`   might need to be called after changing the others for the change to take place immediately. 

      See :ref:`Window styles <window styles>`  for more information about flags. 

                


      :param `style`: 
      :type `style`: long






      .. seealso:: :meth:`GetWindowStyleFlag`     








   .. method:: ToggleTool(self, toolId, state)




      :param `toolId`: 
      :type `toolId`: int
      :param `state`: 
      :type `state`: bool







   .. attribute:: ArtProvider

      See :meth:`~wx.aui.AuiToolBar.GetArtProvider` and :meth:`~wx.aui.AuiToolBar.SetArtProvider`


   .. attribute:: GripperVisible

      See :meth:`~wx.aui.AuiToolBar.GetGripperVisible` and :meth:`~wx.aui.AuiToolBar.SetGripperVisible`


   .. attribute:: OverflowVisible

      See :meth:`~wx.aui.AuiToolBar.GetOverflowVisible` and :meth:`~wx.aui.AuiToolBar.SetOverflowVisible`


   .. attribute:: ToolBarFits

      See :meth:`~wx.aui.AuiToolBar.GetToolBarFits`


   .. attribute:: ToolBitmapSize

      See :meth:`~wx.aui.AuiToolBar.GetToolBitmapSize` and :meth:`~wx.aui.AuiToolBar.SetToolBitmapSize`


   .. attribute:: ToolBorderPadding

      See :meth:`~wx.aui.AuiToolBar.GetToolBorderPadding` and :meth:`~wx.aui.AuiToolBar.SetToolBorderPadding`


   .. attribute:: ToolCount

      See :meth:`~wx.aui.AuiToolBar.GetToolCount`


   .. attribute:: ToolPacking

      See :meth:`~wx.aui.AuiToolBar.GetToolPacking` and :meth:`~wx.aui.AuiToolBar.SetToolPacking`


   .. attribute:: ToolSeparation

      See :meth:`~wx.aui.AuiToolBar.GetToolSeparation` and :meth:`~wx.aui.AuiToolBar.SetToolSeparation`


   .. attribute:: ToolTextOrientation

      See :meth:`~wx.aui.AuiToolBar.GetToolTextOrientation` and :meth:`~wx.aui.AuiToolBar.SetToolTextOrientation`


   .. attribute:: WindowStyleFlag

      See :meth:`~wx.aui.AuiToolBar.GetWindowStyleFlag` and :meth:`~wx.aui.AuiToolBar.SetWindowStyleFlag`

