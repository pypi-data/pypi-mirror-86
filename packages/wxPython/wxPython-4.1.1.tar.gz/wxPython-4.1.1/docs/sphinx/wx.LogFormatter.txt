.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.LogFormatter:

==========================================================================================================================================
|phoenix_title|  **wx.LogFormatter**
==========================================================================================================================================

:ref:`wx.LogFormatter`  class is used to format the log messages.          

It implements the default formatting and can be derived from to create custom formatters. 

The default implementation formats the message into a string containing the time stamp, level-dependent prefix and the message itself. 

To change it, you can derive from it and override its :meth:`~wx.LogFormatter.Format`  method. For example, to include the thread id in the log messages you can use ::

            class LogFormatterWithThread(wx.LogFormatter):
                def Format(level, msg, info):
                    return "[%d] %s(%d) : %s" % \
                           (info.threadId, info.filename, info.line, msg)

And then associate it with :ref:`wx.Log`  instance using its SetFormatter(). Then, if you call: 

::

            wx.LogMessage("*** Application started ***")



the log output could be something like: 









         



.. versionadded:: 2.9.4 
     







.. seealso:: :ref:`Logging Overview <logging overview>`  







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>LogFormatter</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.LogFormatter_inheritance.png" alt="Inheritance diagram of LogFormatter" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.LogFormatter.html" title="wx.LogFormatter" alt="" coords="5,5,137,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.LogFormatter.__init__`                                                The default constructor does nothing.
:meth:`~wx.LogFormatter.Format`                                                  This function creates the full log message string.
:meth:`~wx.LogFormatter.FormatTime`                                              This function formats the time stamp part of the log message.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.LogFormatter(object)

   **Possible constructors**::

       LogFormatter()
       
   
   LogFormatter class is used to format the log messages.



   .. method:: __init__(self)

      The default constructor does nothing.                   





   .. method:: Format(self, level, msg, info)

      This function creates the full log message string.                  

      Override it to customize the output string format. 




      :param `level`: The level of this log record, e.g. :ref:`wx.LOG_Error`.   
      :type `level`: wx.LogLevel
      :param `msg`: The log message itself.   
      :type `msg`: string
      :param `info`: All the other information (such as time, component, location...) associated with this log record.  
      :type `info`: wx.LogRecordInfo










      :rtype: `string`



                  



      :returns: 

         The formatted message.  







      .. note:: 

         Time stamping is disabled for Visual C++ users in debug builds by default because otherwise it would be impossible to directly go to the line from which the log message was generated by simply clicking in the debugger window on the corresponding error message. If you wish to enable it, override :meth:`FormatTime` .   








   .. method:: FormatTime(self, time)

      This function formats the time stamp part of the log message.                  

      Override this function if you need to customize just the time stamp. 




      :param `time`: Time to format.  
      :type `time`: int






      :rtype: `string`



                  



      :returns: 

         The formatted time string, may be empty.   







