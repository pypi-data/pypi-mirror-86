.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.TextDataObject:

==========================================================================================================================================
|phoenix_title|  **wx.TextDataObject**
==========================================================================================================================================

:ref:`wx.TextDataObject`  is a specialization of :ref:`wx.DataObjectSimple`  for text data.          

It can be used without change to paste data into the :ref:`wx.Clipboard`  or a :ref:`wx.DropSource`. A user may wish to derive a new class from this class for providing text on-demand in order to minimize memory consumption when offering data in several formats, such as plain text and ``RTF`` because by default the text is stored in a string in this class, but it might as well be generated when requested. For this, :meth:`~wx.TextDataObject.GetTextLength`  and :meth:`~wx.TextDataObject.GetText`  will have to be overridden. 

Note that if you already have the text inside a string, you will not achieve any efficiency gain by overriding these functions because copying Strings is already a very efficient operation (data is not actually copied because Strings are reference counted). 







         



.. seealso:: :ref:`Drag and Drop Overview <drag and drop overview>`, :ref:`wx.DataObject`, :ref:`wx.DataObjectSimple`, :ref:`wx.FileDataObject`, :ref:`wx.BitmapDataObject`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>TextDataObject</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.TextDataObject_inheritance.png" alt="Inheritance diagram of TextDataObject" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.TextDataObject.html" title="wx.TextDataObject" alt="" coords="14,160,159,189"/> <area shape="rect" id="node2" href="wx.DataObjectSimple.html" title="wx.DataObjectSimple" alt="" coords="5,83,168,112"/> <area shape="rect" id="node3" href="wx.DataObject.html" title="wx.DataObject" alt="" coords="27,5,146,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.TextDataObject.__init__`                                              Constructor, may be used to initialise the text (otherwise :meth:`~TextDataObject.SetText`   should be used later).
:meth:`~wx.TextDataObject.GetAllFormats`                                         Returns a list of wx.DataFormat objects which this data object
:meth:`~wx.TextDataObject.GetFormat`                                             Returns the preferred format supported by this object.
:meth:`~wx.TextDataObject.GetFormatCount`                                        Returns 2 under Mac and wxGTK, where text data coming from the clipboard may be provided as ``ANSI`` ( ``DF_TEXT`` ) or as Unicode text ( ``DF_UNICODETEXT`` , but only when   ``USE_UNICODE==1`` ).
:meth:`~wx.TextDataObject.GetText`                                               Returns the text associated with the data object.
:meth:`~wx.TextDataObject.GetTextLength`                                         Returns the data size.
:meth:`~wx.TextDataObject.SetData`                                               
:meth:`~wx.TextDataObject.SetText`                                               Sets the text associated with the data object.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.TextDataObject.AllFormats`                                            See :meth:`~wx.TextDataObject.GetAllFormats`
:attr:`~wx.TextDataObject.Format`                                                See :meth:`~wx.TextDataObject.GetFormat`
:attr:`~wx.TextDataObject.FormatCount`                                           See :meth:`~wx.TextDataObject.GetFormatCount`
:attr:`~wx.TextDataObject.Text`                                                  See :meth:`~wx.TextDataObject.GetText` and :meth:`~wx.TextDataObject.SetText`
:attr:`~wx.TextDataObject.TextLength`                                            See :meth:`~wx.TextDataObject.GetTextLength`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.TextDataObject(DataObjectSimple)

   **Possible constructors**::

       TextDataObject(text=EmptyString)
       
   
   TextDataObject is a specialization of DataObjectSimple for text
   data.



   .. method:: __init__(self, text=EmptyString)

      Constructor, may be used to initialise the text (otherwise :meth:`SetText`   should be used later).                  


      :param `text`: 
      :type `text`: string







   .. method:: GetAllFormats(self, dir=DataObject.Get)

                              Returns a list of wx.DataFormat objects which this data object
                              supports transferring in the given direction.  





   .. method:: GetFormat(self)

      Returns the preferred format supported by this object.                  

      This is  ``DF_TEXT``   or   ``DF_UNICODETEXT``   depending on the platform and from the build mode (i.e. from   ``USE_UNICODE`` ).                   

      :rtype: :ref:`wx.DataFormat`








   .. method:: GetFormatCount(self, dir=DataObject.Get)

      Returns 2 under Mac and wxGTK, where text data coming from the clipboard may be provided as ``ANSI`` ( ``DF_TEXT`` ) or as Unicode text ( ``DF_UNICODETEXT`` , but only when   ``USE_UNICODE==1`` ).                   

      Returns 1 under other platforms (e.g. wxMSW) or when building in ``ANSI`` mode ( ``USE_UNICODE==0`` ).                   


      :param `dir`: 
      :type `dir`: DataObject.Direction




      :rtype: `int`








   .. method:: GetText(self)

      Returns the text associated with the data object.                  

      You may wish to override this method when offering data on-demand, but this is not required by wxWidgets' internals. Use this method to get data in text form from the :ref:`wx.Clipboard`.                  

      :rtype: `string`








   .. method:: GetTextLength(self)

      Returns the data size.                  

      By default, returns the size of the text data set in the constructor or using :meth:`SetText` . This can be overridden to provide text size data on-demand. It is recommended to return the text length plus 1 for a trailing zero, but this is not strictly required.                  

      :rtype: `int`








   .. method:: SetData(self, format, buf)



      :rtype: `bool`








   .. method:: SetText(self, strText)

      Sets the text associated with the data object.                  

      This method is called when the data object receives the data and, by default, copies the text into the member variable. If you want to process the text on the fly you may wish to override this function.                  


      :param `strText`: 
      :type `strText`: string







   .. attribute:: AllFormats

      See :meth:`~wx.TextDataObject.GetAllFormats`


   .. attribute:: Format

      See :meth:`~wx.TextDataObject.GetFormat`


   .. attribute:: FormatCount

      See :meth:`~wx.TextDataObject.GetFormatCount`


   .. attribute:: Text

      See :meth:`~wx.TextDataObject.GetText` and :meth:`~wx.TextDataObject.SetText`


   .. attribute:: TextLength

      See :meth:`~wx.TextDataObject.GetTextLength`

