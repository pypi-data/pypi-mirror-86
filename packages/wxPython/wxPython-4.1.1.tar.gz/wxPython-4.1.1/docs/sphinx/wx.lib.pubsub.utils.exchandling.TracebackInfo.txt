.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.pubsub.utils.exchandling

.. highlight:: python



.. _wx.lib.pubsub.utils.exchandling.TracebackInfo:

==========================================================================================================================================
|phoenix_title|  **wx.lib.pubsub.utils.exchandling.TracebackInfo**
==========================================================================================================================================

Represent the traceback information for when an exception is
raised -- but not caught -- in a listener. The complete
traceback cannot be stored since this leads to circular
references (see docs for sys.exc_info()) which keeps
listeners alive even after the application is no longer
referring to them.

Instances of this object are given to listeners of the
'uncaughtExcInListener' topic as the excTraceback kwarg.
The instance calls sys.exc_info() to get the traceback
info but keeps only the following info:

 * self.ExcClass: the class of exception that was raised and not caught
 * self.excArg: the argument given to exception when raised
 * self.traceback: list of quadruples as returned by traceback.extract_tb()

Normally you just need to call one of the two getFormatted() methods.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>TracebackInfo</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.pubsub.utils.exchandling.TracebackInfo_inheritance.png" alt="Inheritance diagram of TracebackInfo" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.pubsub.utils.exchandling.TracebackInfo.html" title="wx.lib.pubsub.utils.exchandling.TracebackInfo" alt="" coords="5,5,327,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.pubsub.utils.exchandling.TracebackInfo.__init__`                  Initialize self.  See help(type(self)) for accurate signature.
:meth:`~wx.lib.pubsub.utils.exchandling.TracebackInfo.getFormattedList`          Get a list of strings as returned by the traceback module's
:meth:`~wx.lib.pubsub.utils.exchandling.TracebackInfo.getFormattedString`        Get a string similar to the stack trace that gets printed
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: TracebackInfo

   Represent the traceback information for when an exception is
   raised -- but not caught -- in a listener. The complete
   traceback cannot be stored since this leads to circular
   references (see docs for sys.exc_info()) which keeps
   listeners alive even after the application is no longer
   referring to them.
   
   Instances of this object are given to listeners of the
   'uncaughtExcInListener' topic as the excTraceback kwarg.
   The instance calls sys.exc_info() to get the traceback
   info but keeps only the following info:
   
    * self.ExcClass: the class of exception that was raised and not caught
    * self.excArg: the argument given to exception when raised
    * self.traceback: list of quadruples as returned by traceback.extract_tb()
   
   Normally you just need to call one of the two getFormatted() methods.

   .. method:: __init__(self)

      Initialize self.  See help(type(self)) for accurate signature.


   .. method:: getFormattedList(self)

      Get a list of strings as returned by the traceback module's
      format_list() and format_exception_only() functions.


   .. method:: getFormattedString(self)

      Get a string similar to the stack trace that gets printed
      to stdout by Python interpreter when an exception is not caught.


