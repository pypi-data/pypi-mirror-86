.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.Log:

==========================================================================================================================================
|phoenix_title|  **wx.Log**
==========================================================================================================================================

:ref:`wx.Log`  class defines the interface for the `log targets`  used by wxWidgets logging functions as explained in the :ref:`Logging Overview <logging overview>`.          

The only situations when you need to directly use this class is when you want to derive your own log target because the existing ones don't satisfy your needs. 

Otherwise, it is completely hidden behind the :ref:`LogXXX`  and you may not even know about its existence. 







         



.. note:: 

   For console-mode applications, the default target is :ref:`wx.LogStderr`, so that all `LogXXX()`  functions print on  ``stderr``   when   ``USE_GUI``   = 0.  







.. seealso:: :ref:`Logging Overview <logging overview>`, :ref:`LogXXX`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Log</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.Log_inheritance.png" alt="Inheritance diagram of Log" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Log.html" title="wx.Log" alt="" coords="5,5,77,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.LogBuffer`, :ref:`wx.LogChain`, :ref:`wx.LogGui`, :ref:`wx.LogStderr`, :ref:`LogStream`, :ref:`wx.LogTextCtrl`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.Log.AddTraceMask`                                                     Add the `mask`  to the list of allowed masks for :ref:`wx.LogTrace`.
:meth:`~wx.Log.ClearTraceMasks`                                                  Removes all trace masks previously set with :meth:`~Log.AddTraceMask` .
:meth:`~wx.Log.DisableTimestamp`                                                 Disables time stamping of the log messages.
:meth:`~wx.Log.DoLogRecord`                                                      Called to log a new record.
:meth:`~wx.Log.DoLogText`                                                        Called to log the specified string.
:meth:`~wx.Log.DoLogTextAtLevel`                                                 Called to log the specified string at given level.
:meth:`~wx.Log.DontCreateOnDemand`                                               Instructs :ref:`wx.Log`  to not create new log targets on the fly if there is none currently (see :meth:`~Log.GetActiveTarget` ).
:meth:`~wx.Log.EnableLogging`                                                    Globally enable or disable logging.
:meth:`~wx.Log.Flush`                                                            Show all pending output and clear the buffer.
:meth:`~wx.Log.FlushActive`                                                      Flushes the current log target if any, does nothing if there is none.
:meth:`~wx.Log.GetActiveTarget`                                                  Returns the pointer to the active log target (may be ``None``).
:meth:`~wx.Log.GetLogLevel`                                                      Returns the current log level limit.
:meth:`~wx.Log.GetRepetitionCounting`                                            Returns whether the repetition counting mode is enabled.
:meth:`~wx.Log.GetTimestamp`                                                     Returns the current timestamp format string.
:meth:`~wx.Log.GetTraceMasks`                                                    Returns the currently allowed list of string trace masks.
:meth:`~wx.Log.GetVerbose`                                                       Returns whether the verbose mode is currently active.
:meth:`~wx.Log.IsAllowedTraceMask`                                               Returns ``True`` if the `mask`  is one of allowed masks for :ref:`wx.LogTrace`.
:meth:`~wx.Log.IsEnabled`                                                        Returns ``True`` if logging is enabled at all now.
:meth:`~wx.Log.IsLevelEnabled`                                                   Returns ``True`` if logging at this level is enabled for the current thread.
:meth:`~wx.Log.LogRecord`                                                        Log the given record.
:meth:`~wx.Log.RemoveTraceMask`                                                  Remove the `mask`  from the list of allowed masks for :ref:`wx.LogTrace`.
:meth:`~wx.Log.Resume`                                                           Resumes logging previously suspended by a call to :meth:`~Log.Suspend` .
:meth:`~wx.Log.SetActiveTarget`                                                  Sets the specified log target as the active one.
:meth:`~wx.Log.SetComponentLevel`                                                Sets the log level for the given component.
:meth:`~wx.Log.SetFormatter`                                                     Sets the specified formatter as the active one.
:meth:`~wx.Log.SetLogLevel`                                                      Specifies that log messages with level greater (numerically) than `logLevel`  should be ignored and not sent to the active log target.
:meth:`~wx.Log.SetRepetitionCounting`                                            Enables logging mode in which a log message is logged once, and in case exactly the same message successively repeats one or more times, only the number of repetitions is logged.
:meth:`~wx.Log.SetThreadActiveTarget`                                            Sets a thread-specific log target.
:meth:`~wx.Log.SetTimestamp`                                                     Sets the timestamp format prepended by the default log targets to all messages.
:meth:`~wx.Log.SetVerbose`                                                       Activates or deactivates verbose mode in which the verbose messages are logged as the normal ones instead of being silently dropped.
:meth:`~wx.Log.Suspend`                                                          Suspends the logging until :meth:`~Log.Resume`   is called.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.Log(object)

   Log class defines the interface for the log targets used by
   wxWidgets logging functions as explained in the Logging Overview.



   .. staticmethod:: AddTraceMask(mask)

      Add the `mask`  to the list of allowed masks for :ref:`wx.LogTrace`.                  

                


      :param `mask`: 
      :type `mask`: string






      .. seealso:: :meth:`RemoveTraceMask` , :meth:`GetTraceMasks`     








   .. staticmethod:: ClearTraceMasks()

      Removes all trace masks previously set with :meth:`AddTraceMask` .                  

                 



      .. seealso:: :meth:`RemoveTraceMask`     








   .. staticmethod:: DisableTimestamp()

      Disables time stamping of the log messages.                  

      Notice that the current time stamp is only used by the default log formatter and custom formatters may ignore calls to this function. 

                 



      .. versionadded:: 2.9.0 
     








   .. method:: DoLogRecord(self, level, msg, info)

      Called to log a new record.                  

      Any log message created by LogXXX() functions is passed to this method of the active log target. The default implementation prepends the timestamp and, for some log levels (e.g. error and warning), the corresponding prefix to `msg`  and passes it to :meth:`DoLogTextAtLevel` . 

      You may override this method to implement custom formatting of the log messages or to implement custom filtering of log messages (e.g. you could discard all log messages coming from the given source file).                  


      :param `level`: 
      :type `level`: wx.LogLevel
      :param `msg`: 
      :type `msg`: string
      :param `info`: 
      :type `info`: wx.LogRecordInfo







   .. method:: DoLogText(self, msg)

      Called to log the specified string.                  

      A simple implementation might just send the string to  ``stdout``   or   ``stderr``   or save it in a file (of course, the already existing  :ref:`wx.LogStderr`  can be used for this). 

      The base class version of this function asserts so it must be overridden if you don't override :meth:`DoLogRecord`   or :meth:`DoLogTextAtLevel` .                  


      :param `msg`: 
      :type `msg`: string







   .. method:: DoLogTextAtLevel(self, level, msg)

      Called to log the specified string at given level.                  

      The base class versions logs debug and trace messages on the system default debug output channel and passes all the other messages to :meth:`DoLogText` .                  


      :param `level`: 
      :type `level`: wx.LogLevel
      :param `msg`: 
      :type `msg`: string







   .. staticmethod:: DontCreateOnDemand()

      Instructs :ref:`wx.Log`  to not create new log targets on the fly if there is none currently (see :meth:`GetActiveTarget` ).                  

      (Almost) for internal use only: it is supposed to be called by the application shutdown code (where you don't want the log target to be automatically created anymore). 

      Note that this function also calls :meth:`ClearTraceMasks` .                   





   .. staticmethod:: EnableLogging(enable=True)

      Globally enable or disable logging.                  

      Calling this function with ``False`` argument disables all log messages for the current thread. 

                


      :param `enable`: 
      :type `enable`: bool




      :rtype: `bool`







      :returns: 

         The old state, i.e. ``True`` if logging was previously enabled and ``False`` if it was disabled.   







      .. seealso:: :ref:`wx.LogNull`, :meth:`IsEnabled`   








   .. method:: Flush(self)

      Show all pending output and clear the buffer.                  

      Some of :ref:`wx.Log`  implementations, most notably the standard :ref:`wx.LogGui`  class, buffer the messages (for example, to avoid showing the user a zillion of modal message boxes one after another –  which would be really annoying). This function shows them all and clears the buffer contents. If the buffer is already empty, nothing happens. 

      If you override this method in a derived class, call the base class version first, before doing anything else.                   





   .. staticmethod:: FlushActive()

      Flushes the current log target if any, does nothing if there is none.                  

      When this method is called from the main thread context, it also flushes any previously buffered messages logged by the other threads. When it is called from the other threads it simply calls :meth:`Flush`   on the currently active log target, so it mostly makes sense to do this if a thread has its own logger set with :meth:`SetThreadActiveTarget` .                   





   .. staticmethod:: GetActiveTarget()

      Returns the pointer to the active log target (may be ``None``).                  

      Notice that if :meth:`SetActiveTarget`   hadn't been previously explicitly called, this function will by default try to create a log target by calling :meth:`wx.AppTraits.CreateLogTarget`   which may be overridden in a user-defined traits class to change the default behaviour. You may also call :meth:`DontCreateOnDemand`   to disable this behaviour. 

      When this function is called from threads other than main one, auto-creation doesn't happen. But if the thread has a thread-specific log target previously set by :meth:`SetThreadActiveTarget` , it is returned instead of the global one. Otherwise, the global log target is returned.                  

      :rtype: :ref:`wx.Log`








   .. staticmethod:: GetLogLevel()

      Returns the current log level limit.                  

      All messages at levels strictly greater than the value returned by this function are not logged at all. 

                

      :rtype: :ref:`wx.LogLevel`







      .. seealso:: :meth:`SetLogLevel` , :meth:`IsLevelEnabled`     








   .. staticmethod:: GetRepetitionCounting()

      Returns whether the repetition counting mode is enabled.                  

      :rtype: `bool`








   .. staticmethod:: GetTimestamp()

      Returns the current timestamp format string.                  

      Notice that the current time stamp is only used by the default log formatter and custom formatters may ignore this format.                  

      :rtype: `string`








   .. staticmethod:: GetTraceMasks()

      Returns the currently allowed list of string trace masks.                  

                

      :rtype: `list of strings`







      .. seealso:: :meth:`AddTraceMask` .   








   .. staticmethod:: GetVerbose()

      Returns whether the verbose mode is currently active.                  

      :rtype: `bool`








   .. staticmethod:: IsAllowedTraceMask(mask)

      Returns ``True`` if the `mask`  is one of allowed masks for :ref:`wx.LogTrace`.                  

      See also: :meth:`AddTraceMask` , :meth:`RemoveTraceMask`                    


      :param `mask`: 
      :type `mask`: string




      :rtype: `bool`








   .. staticmethod:: IsEnabled()

      Returns ``True`` if logging is enabled at all now.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`IsLevelEnabled` , :meth:`EnableLogging`     








   .. staticmethod:: IsLevelEnabled(level, component)

      Returns ``True`` if logging at this level is enabled for the current thread.                  

      This function only returns ``True`` if logging is globally enabled and if `level`  is less than or equal to the maximal log level enabled for the given `component`. 

                


      :param `level`: 
      :type `level`: wx.LogLevel
      :param `component`: 
      :type `component`: string




      :rtype: `bool`







      .. versionadded:: 2.9.1 
     







      .. seealso:: :meth:`IsEnabled` , :meth:`SetLogLevel` , :meth:`GetLogLevel` , :meth:`SetComponentLevel`   








   .. method:: LogRecord(self, level, msg, info)

      Log the given record.                  

      This function should only be called from the DoLog() implementations in the derived classes if they need to call :meth:`DoLogRecord`   on another log object (they can, of course, just use :meth:`wx.Log.DoLogRecord`   call syntax to call it on the object itself). It should not be used for logging new messages which can be only sent to the currently active logger using OnLog() which also checks if the logging (for this level) is enabled while this method just directly calls DoLog(). 

      Example of use of this class from :ref:`wx.LogChain`: ::

                  def DoLogRecord(self, level, msg, info):

                      # let the previous logger show it
                      if self.logOld and IsPassingMessages():
                          self.logOld.LogRecord(level, msg, info)

                      # and also send it to the one
                      if self.logNew and self.logNew != self:
                          self.logNew.LogRecord(level, msg, info)



                


      :param `level`: 
      :type `level`: wx.LogLevel
      :param `msg`: 
      :type `msg`: string
      :param `info`: 
      :type `info`: wx.LogRecordInfo






      .. versionadded:: 2.9.1 
     








   .. staticmethod:: RemoveTraceMask(mask)

      Remove the `mask`  from the list of allowed masks for :ref:`wx.LogTrace`.                  

                


      :param `mask`: 
      :type `mask`: string






      .. seealso:: :meth:`AddTraceMask`     








   .. staticmethod:: Resume()

      Resumes logging previously suspended by a call to :meth:`Suspend` .                  

      All messages logged in the meanwhile will be flushed soon.                   





   .. staticmethod:: SetActiveTarget(logtarget)

      Sets the specified log target as the active one.                  

      Returns the pointer to the previous active log target (may be ``None``). To suppress logging use a new instance of :ref:`wx.LogNull`  not ``None``. If the active log target is set to ``None`` a new default log target will be created when logging occurs. 

                


      :param `logtarget`: 
      :type `logtarget`: wx.Log




      :rtype: :ref:`wx.Log`







      .. seealso:: :meth:`SetThreadActiveTarget`     








   .. staticmethod:: SetComponentLevel(component, level)

      Sets the log level for the given component.                  

      For example, to disable all but error messages from wxWidgets network classes you may use ::

                      wx.Log.SetComponentLevel("wx./net", wx.LOG_Error)



      :meth:`SetLogLevel`   may be used to set the global log level. 




      :param `component`: Non-empty component name, possibly using slashes ( ``/`` ) to separate it into several parts.    
      :type `component`: string
      :param `level`: Maximal level of log messages from this component which will be handled instead of being simply discarded.  
      :type `level`: wx.LogLevel






                  



      .. versionadded:: 2.9.1 
     








   .. method:: SetFormatter(self, formatter)

      Sets the specified formatter as the active one.                  




      :param `formatter`: The new formatter. If ``None``, reset to the default formatter.  
      :type `formatter`: wx.LogFormatter






      :rtype: :ref:`wx.LogFormatter`



      :ref:`wx.Log`  object later. 

                 



      .. versionadded:: 2.9.4 
     








   .. staticmethod:: SetLogLevel(logLevel)

      Specifies that log messages with level greater (numerically) than `logLevel`  should be ignored and not sent to the active log target.                  

                


      :param `logLevel`: 
      :type `logLevel`: wx.LogLevel






      .. seealso:: :meth:`SetComponentLevel`     








   .. staticmethod:: SetRepetitionCounting(repetCounting=True)

      Enables logging mode in which a log message is logged once, and in case exactly the same message successively repeats one or more times, only the number of repetitions is logged.                  


      :param `repetCounting`: 
      :type `repetCounting`: bool







   .. staticmethod:: SetThreadActiveTarget(logger)

      Sets a thread-specific log target.                  

      The log target passed to this function will be used for all messages logged by the current thread using the usual :ref:`wx.Log`  functions. This shouldn't be called from the main thread which never uses a thread- specific log target but can be used for the other threads to handle thread logging completely separately; instead of buffering thread log messages in the main thread logger. 

      Notice that unlike for :meth:`SetActiveTarget` , wxWidgets does not destroy the thread-specific log targets when the thread terminates so doing this is your responsibility. 

      This method is only available if  ``USE_THREADS``   is 1, i.e. wxWidgets was compiled with threads support. 




      :param `logger`: The new thread-specific log target, possibly ``None``.   
      :type `logger`: wx.Log






      :rtype: :ref:`wx.Log`



                  



      :returns: 

         The previous thread-specific log target, initially ``None``.  







      .. versionadded:: 2.9.1 
     








   .. staticmethod:: SetTimestamp(format)

      Sets the timestamp format prepended by the default log targets to all messages.                  

      The string may contain any normal characters as well as % prefixed format specifiers, see `strftime()`  manual for details. Passing an empty string to this function disables message time stamping. 

      Notice that the current time stamp is only used by the default log formatter and custom formatters may ignore this format. You can also define a custom :ref:`wx.LogFormatter`  to customize the time stamp handling beyond changing its format.                  


      :param `format`: 
      :type `format`: string







   .. staticmethod:: SetVerbose(verbose=True)

      Activates or deactivates verbose mode in which the verbose messages are logged as the normal ones instead of being silently dropped.                  

      The verbose messages are the trace messages which are not disabled in the release mode and are generated by :ref:`wx.LogVerbose`. 

                


      :param `verbose`: 
      :type `verbose`: bool






      .. seealso:: :ref:`Logging Overview <logging overview>`    








   .. staticmethod:: Suspend()

      Suspends the logging until :meth:`Resume`   is called.                  

      Note that the latter must be called the same number of times as the former to undo it, i.e. if you call :meth:`Suspend`   twice you must call :meth:`Resume`   twice as well. 

      Note that suspending the logging means that the log sink won't be flushed periodically, it doesn't have any effect if the current log target does the logging immediately without waiting for :meth:`Flush`   to be called (the standard GUI log target only shows the log dialog when it is flushed, so :meth:`Suspend`   works as expected with it). 

                 



      .. seealso:: :meth:`Resume` , :ref:`wx.LogNull`    







