.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.MenuItem:

==========================================================================================================================================
|phoenix_title|  **wx.MenuItem**
==========================================================================================================================================

A menu item represents an item in a menu.          

Note that you usually don't have to deal with it directly as :ref:`wx.Menu`  methods usually construct an object of this class for you. 

Also please note that the methods related to fonts and bitmaps are currently only implemented for Windows, Mac and GTK+. 







.. _MenuItem-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive one of the :ref:`wx.CommandEvent`:ref:`wx.MenuEvent` parameters.


- EVT_MENU: Process a  ``wxEVT_MENU``   command, which is generated by a menu item. This type of event is sent as  :ref:`wx.CommandEvent`.  
- EVT_MENU_RANGE: Process a  ``wxEVT_MENU``   command, which is generated by a range of menu items. This type of event is sent as  :ref:`wx.CommandEvent`.  
- EVT_MENU_OPEN: A menu is about to be opened. On Windows, this is only sent once for each navigation of the menubar (up until all menus have closed). This type of event is sent as :ref:`wx.MenuEvent`.  
- EVT_MENU_CLOSE: A menu has been just closed. This type of event is sent as :ref:`wx.MenuEvent`.  
- EVT_MENU_HIGHLIGHT: The menu item with the specified id has been highlighted. If the id is ``ID_NONE``, highlighting has been removed from the previously highlighted menu item and there is no highlighted item any more. This is used by :ref:`wx.Frame`  to show help prompts in the status bar. This type of event is sent as :ref:`wx.MenuEvent`.  
- EVT_MENU_HIGHLIGHT_ALL: A menu item has been highlighted, i.e. the currently selected menu item has changed. This type of event is sent as :ref:`wx.MenuEvent`.  








         



.. seealso:: :ref:`wx.MenuBar`, :ref:`wx.Menu`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>MenuItem</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.MenuItem_inheritance.png" alt="Inheritance diagram of MenuItem" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.MenuItem.html" title="wx.MenuItem" alt="" coords="5,83,116,112"/> <area shape="rect" id="node2" href="wx.Object.html" title="wx.Object" alt="" coords="17,5,104,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.MenuItem.__init__`                                                    Constructs a :ref:`wx.MenuItem`  object.
:meth:`~wx.MenuItem.Check`                                                       Checks or unchecks the menu item.
:meth:`~wx.MenuItem.Enable`                                                      Enables or disables the menu item.
:meth:`~wx.MenuItem.GetAccel`                                                    Get our accelerator or ``None`` (caller must delete the pointer)
:meth:`~wx.MenuItem.GetBackgroundColour`                                         Returns the background colour associated with the menu item.
:meth:`~wx.MenuItem.GetBitmap`                                                   Returns the checked or unchecked bitmap.
:meth:`~wx.MenuItem.GetDisabledBitmap`                                           Returns the bitmap to be used for disabled items.
:meth:`~wx.MenuItem.GetFont`                                                     Returns the font associated with the menu item.
:meth:`~wx.MenuItem.GetHelp`                                                     Returns the help string associated with the menu item.
:meth:`~wx.MenuItem.GetId`                                                       Returns the menu item identifier.
:meth:`~wx.MenuItem.GetItemLabel`                                                Returns the text associated with the menu item including any accelerator characters that were passed to the constructor or :meth:`~MenuItem.SetItemLabel` .
:meth:`~wx.MenuItem.GetItemLabelText`                                            Returns the text associated with the menu item, without any accelerator characters.
:meth:`~wx.MenuItem.GetKind`                                                     Returns the item kind, one of  ``ITEM_SEPARATOR`` ,   ``ITEM_NORMAL`` ,   ``ITEM_CHECK``   or   ``ITEM_RADIO`` .
:meth:`~wx.MenuItem.GetLabelText`                                                Strips all accelerator characters and mnemonics from the given `text`.
:meth:`~wx.MenuItem.GetMarginWidth`                                              Gets the width of the menu item checkmark bitmap.
:meth:`~wx.MenuItem.GetMenu`                                                     Returns the menu this menu item is in, or ``None`` if this menu item is not attached.
:meth:`~wx.MenuItem.GetSubMenu`                                                  Returns the submenu associated with the menu item, or ``None`` if there isn't one.
:meth:`~wx.MenuItem.GetTextColour`                                               Returns the text colour associated with the menu item.
:meth:`~wx.MenuItem.IsCheck`                                                     Returns ``True`` if the item is a check item.
:meth:`~wx.MenuItem.IsCheckable`                                                 Returns ``True`` if the item is checkable.
:meth:`~wx.MenuItem.IsChecked`                                                   Returns ``True`` if the item is checked.
:meth:`~wx.MenuItem.IsEnabled`                                                   Returns ``True`` if the item is enabled.
:meth:`~wx.MenuItem.IsRadio`                                                     Returns ``True`` if the item is a radio button.
:meth:`~wx.MenuItem.IsSeparator`                                                 Returns ``True`` if the item is a separator.
:meth:`~wx.MenuItem.IsSubMenu`                                                   Returns ``True`` if the item is a submenu.
:meth:`~wx.MenuItem.SetAccel`                                                    Set the accel for this item - this may also be done indirectly with :meth:`~MenuItem.SetText`
:meth:`~wx.MenuItem.SetBackgroundColour`                                         Sets the background colour associated with the menu item.
:meth:`~wx.MenuItem.SetBitmap`                                                   Sets the bitmap for the menu item.
:meth:`~wx.MenuItem.SetBitmaps`                                                  Sets the checked/unchecked bitmaps for the menu item.
:meth:`~wx.MenuItem.SetDisabledBitmap`                                           Sets the to be used for disabled menu items.
:meth:`~wx.MenuItem.SetFont`                                                     Sets the font associated with the menu item.
:meth:`~wx.MenuItem.SetHelp`                                                     Sets the help string.
:meth:`~wx.MenuItem.SetItemLabel`                                                Sets the label associated with the menu item.
:meth:`~wx.MenuItem.SetMarginWidth`                                              Sets the width of the menu item checkmark bitmap.
:meth:`~wx.MenuItem.SetMenu`                                                     Sets the parent menu which will contain this menu item.
:meth:`~wx.MenuItem.SetSubMenu`                                                  Sets the submenu of this menu item.
:meth:`~wx.MenuItem.SetTextColour`                                               Sets the text colour associated with the menu item.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.MenuItem.Accel`                                                       See :meth:`~wx.MenuItem.GetAccel` and :meth:`~wx.MenuItem.SetAccel`
:attr:`~wx.MenuItem.BackgroundColour`                                            See :meth:`~wx.MenuItem.GetBackgroundColour` and :meth:`~wx.MenuItem.SetBackgroundColour`
:attr:`~wx.MenuItem.Bitmap`                                                      See :meth:`~wx.MenuItem.GetBitmap` and :meth:`~wx.MenuItem.SetBitmap`
:attr:`~wx.MenuItem.DisabledBitmap`                                              See :meth:`~wx.MenuItem.GetDisabledBitmap` and :meth:`~wx.MenuItem.SetDisabledBitmap`
:attr:`~wx.MenuItem.Enabled`                                                     See :meth:`~wx.MenuItem.IsEnabled` and :meth:`~wx.MenuItem.Enable`
:attr:`~wx.MenuItem.Font`                                                        See :meth:`~wx.MenuItem.GetFont` and :meth:`~wx.MenuItem.SetFont`
:attr:`~wx.MenuItem.Help`                                                        See :meth:`~wx.MenuItem.GetHelp` and :meth:`~wx.MenuItem.SetHelp`
:attr:`~wx.MenuItem.Id`                                                          See :meth:`~wx.MenuItem.GetId`
:attr:`~wx.MenuItem.ItemLabel`                                                   See :meth:`~wx.MenuItem.GetItemLabel` and :meth:`~wx.MenuItem.SetItemLabel`
:attr:`~wx.MenuItem.ItemLabelText`                                               See :meth:`~wx.MenuItem.GetItemLabelText`
:attr:`~wx.MenuItem.Kind`                                                        See :meth:`~wx.MenuItem.GetKind`
:attr:`~wx.MenuItem.MarginWidth`                                                 See :meth:`~wx.MenuItem.GetMarginWidth` and :meth:`~wx.MenuItem.SetMarginWidth`
:attr:`~wx.MenuItem.Menu`                                                        See :meth:`~wx.MenuItem.GetMenu` and :meth:`~wx.MenuItem.SetMenu`
:attr:`~wx.MenuItem.SubMenu`                                                     See :meth:`~wx.MenuItem.GetSubMenu` and :meth:`~wx.MenuItem.SetSubMenu`
:attr:`~wx.MenuItem.TextColour`                                                  See :meth:`~wx.MenuItem.GetTextColour` and :meth:`~wx.MenuItem.SetTextColour`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.MenuItem(Object)

   **Possible constructors**::

       MenuItem(parentMenu=None, id=ID_SEPARATOR, text=EmptyString,
                helpString=EmptyString, kind=ITEM_NORMAL, subMenu=None)
       
   
   A menu item represents an item in a menu.



   .. method:: __init__(self, parentMenu=None, id=ID_SEPARATOR, text=EmptyString, helpString=EmptyString, kind=ITEM_NORMAL, subMenu=None)

      Constructs a :ref:`wx.MenuItem`  object.                  

      Menu items can be standard, or "stock menu items", or custom. For the standard menu items (such as commands to open a file, exit the program and so on, see :ref:`Stock Items <stock items>`  for the full list) it is enough to specify just the stock ``ID`` and leave `text`  and `helpString`  empty. Some platforms (currently wxGTK only, and see the remark in :meth:`SetBitmap`   documentation) will also show standard bitmaps for stock menu items. 

      Leaving at least `text`  empty for the stock menu items is actually strongly recommended as they will have appearance and keyboard interface (including standard accelerators) familiar to the user. 

      For the custom (non-stock) menu items, `text`  must be specified and while `helpString`  may be left empty, it's recommended to pass the item description (which is automatically shown by the library in the status bar when the menu item is selected) in this parameter. 

      Finally note that you can e.g. use a stock menu label without using its stock help string: 

      ::

                  # use all stock properties:
                  helpMenu.Append(wx.ID_ABOUT)

                  # use the stock label and the stock accelerator but not the stock help string:
                  helpMenu.Append(wx.ID_ABOUT, "", "My custom help string")

                  # use all stock properties except for the bitmap:
                  mymenu = wx.MenuItem(helpMenu, wx.ID_ABOUT)
                  mymenu.SetBitmap(wx.ArtProvider.GetBitmap(wx.ART_WARNING))
                  helpMenu.Append(mymenu)



      that is, stock properties are set independently one from the other. 




      :param `parentMenu`: Menu that the menu item belongs to. Can be ``None`` if the item is going to be added to the menu later.   
      :type `parentMenu`: wx.Menu
      :param `id`: Identifier for this menu item. May be  ``ID_SEPARATOR`` , in which case the given kind is ignored and taken to be   ``ITEM_SEPARATOR``   instead.    
      :type `id`: int
      :param `text`: Text for the menu item, as shown on the menu. See :meth:`SetItemLabel`   for more info.   
      :type `text`: string
      :param `helpString`: Optional help string that will be shown on the status bar.   
      :type `helpString`: string
      :param `kind`: May be  ``ITEM_SEPARATOR`` ,   ``ITEM_NORMAL`` ,   ``ITEM_CHECK``   or   ``ITEM_RADIO`` .    
      :type `kind`: wx.ItemKind
      :param `subMenu`: If non-NULL, indicates that the menu item is a submenu.   
      :type `subMenu`: wx.Menu














                  





   .. method:: Check(self, check=True)

      Checks or unchecks the menu item.                  

      Note that this only works when the item is already appended to a menu.                  


      :param `check`: 
      :type `check`: bool







   .. method:: Enable(self, enable=True)

      Enables or disables the menu item.                  


      :param `enable`: 
      :type `enable`: bool







   .. method:: GetAccel(self)

      Get our accelerator or ``None`` (caller must delete the pointer)                  

      :rtype: :ref:`wx.AcceleratorEntry`








   .. method:: GetBackgroundColour(self)

      Returns the background colour associated with the menu item.                  



      :rtype: :ref:`wx.Colour`







      .. availability:: Only available for MSW.  








   .. method:: GetBitmap(self, checked=True)

      Returns the checked or unchecked bitmap.                  




      :param `checked`: 
      :type `checked`: bool




      :rtype: :ref:`wx.Bitmap`







      .. availability:: Only available for MSW.  








   .. method:: GetDisabledBitmap(self)

      Returns the bitmap to be used for disabled items.                  



      :rtype: :ref:`wx.Bitmap`







      .. availability:: Only available for MSW.  








   .. method:: GetFont(self)

      Returns the font associated with the menu item.                  



      :rtype: :ref:`wx.Font`







      .. availability:: Only available for MSW.  








   .. method:: GetHelp(self)

      Returns the help string associated with the menu item.                  

      :rtype: `string`








   .. method:: GetId(self)

      Returns the menu item identifier.                  

      :rtype: `int`








   .. method:: GetItemLabel(self)

      Returns the text associated with the menu item including any accelerator characters that were passed to the constructor or :meth:`SetItemLabel` .                  

                

      :rtype: `string`







      .. seealso:: :meth:`GetItemLabelText` , :meth:`GetLabelText`     








   .. method:: GetItemLabelText(self)

      Returns the text associated with the menu item, without any accelerator characters.                  

                

      :rtype: `string`







      .. seealso:: :meth:`GetItemLabel` , :meth:`GetLabelText`     








   .. method:: GetKind(self)

      Returns the item kind, one of  ``ITEM_SEPARATOR`` ,   ``ITEM_NORMAL`` ,   ``ITEM_CHECK``   or   ``ITEM_RADIO`` .                   

      :rtype: :ref:`wx.ItemKind`








   .. staticmethod:: GetLabelText(text)

      Strips all accelerator characters and mnemonics from the given `text`.                  

      For example: 

      ::

                    wx.MenuItem.GetLabelfromText("&Hello\tCtrl-h")



      will return just  ``"Hello"`` . 

                


      :param `text`: 
      :type `text`: string




      :rtype: `string`







      .. seealso:: :meth:`GetItemLabelText` , :meth:`GetItemLabel`     








   .. method:: GetMarginWidth(self)

      Gets the width of the menu item checkmark bitmap.                  



      :rtype: `int`







      .. availability:: Only available for MSW.  








   .. method:: GetMenu(self)

      Returns the menu this menu item is in, or ``None`` if this menu item is not attached.                  

      :rtype: :ref:`wx.Menu`








   .. method:: GetSubMenu(self)

      Returns the submenu associated with the menu item, or ``None`` if there isn't one.                  

      :rtype: :ref:`wx.Menu`








   .. method:: GetTextColour(self)

      Returns the text colour associated with the menu item.                  



      :rtype: :ref:`wx.Colour`







      .. availability:: Only available for MSW.  








   .. method:: IsCheck(self)

      Returns ``True`` if the item is a check item.                  

      Unlike :meth:`IsCheckable`   this doesn't return ``True`` for the radio buttons. 

                

      :rtype: `bool`







      .. versionadded:: 2.9.5 
     








   .. method:: IsCheckable(self)

      Returns ``True`` if the item is checkable.                  

      Notice that the radio buttons are considered to be checkable as well, so this method returns ``True`` for them too. Use :meth:`IsCheck`   if you want to test for the check items only.                  

      :rtype: `bool`








   .. method:: IsChecked(self)

      Returns ``True`` if the item is checked.                  

      :rtype: `bool`








   .. method:: IsEnabled(self)

      Returns ``True`` if the item is enabled.                  

      :rtype: `bool`








   .. method:: IsRadio(self)

      Returns ``True`` if the item is a radio button.                  

                

      :rtype: `bool`







      .. versionadded:: 2.9.5 
     








   .. method:: IsSeparator(self)

      Returns ``True`` if the item is a separator.                  

      :rtype: `bool`








   .. method:: IsSubMenu(self)

      Returns ``True`` if the item is a submenu.                  

      :rtype: `bool`








   .. method:: SetAccel(self, accel)

      Set the accel for this item - this may also be done indirectly with :meth:`SetText`                    


      :param `accel`: 
      :type `accel`: wx.AcceleratorEntry







   .. method:: SetBackgroundColour(self, colour)

      Sets the background colour associated with the menu item.                  




      :param `colour`: 
      :type `colour`: wx.Colour






      .. availability:: Only available for MSW.  








   .. method:: SetBitmap(self, bmp, checked=True)

      Sets the bitmap for the menu item.                  

      It is equivalent to `MenuItem.SetBitmaps(bmp,` NullBitmap) if `checked`  is ``True`` (default value) or SetBitmaps(wxNullBitmap, bmp) otherwise. 

      :meth:`SetBitmap`   must be called before the item is appended to the menu, i.e. appending the item without a bitmap and setting one later is not guaranteed to work. But the bitmap can be changed or reset later if it had been set up initially. 

      Notice that GTK+ uses a global setting called  ``gtk-menu-images``   to determine if the images should be shown in the menus at all. If it is off (which is the case in e.g. Gnome 2.28 by default), no images will be shown, consistently with the native behaviour. 




      :param `bmp`: 
      :type `bmp`: wx.Bitmap
      :param `checked`: 
      :type `checked`: bool






      .. availability:: Only available for MSW, OSX, GTK.  








   .. method:: SetBitmaps(self, checked, unchecked=NullBitmap)

      Sets the checked/unchecked bitmaps for the menu item.                  

      The first bitmap is also used as the single bitmap for uncheckable menu items. 




      :param `checked`: 
      :type `checked`: wx.Bitmap
      :param `unchecked`: 
      :type `unchecked`: wx.Bitmap






      .. availability:: Only available for MSW.  








   .. method:: SetDisabledBitmap(self, disabled)

      Sets the to be used for disabled menu items.                  




      :param `disabled`: 
      :type `disabled`: wx.Bitmap






      .. availability:: Only available for MSW.  








   .. method:: SetFont(self, font)

      Sets the font associated with the menu item.                  




      :param `font`: 
      :type `font`: wx.Font






      .. availability:: Only available for MSW.  








   .. method:: SetHelp(self, helpString)

      Sets the help string.                  


      :param `helpString`: 
      :type `helpString`: string







   .. method:: SetItemLabel(self, label)

      Sets the label associated with the menu item.                  

      Note that if the ``ID`` of this menu item corresponds to a stock ``ID``, then it is not necessary to specify a label: wxWidgets will automatically use the stock item label associated with that ``ID``. See the :meth:`constructor`   for more info. 

      The label string for the normal menu items (not separators) may include the accelerator which can be used to activate the menu item from keyboard. An accelerator key can be specified using the ampersand  ``&``   character. In order to embed an ampersand character in the menu item text, the ampersand must be doubled. 

      Optionally you can specify also an accelerator string appending a tab character  ``\t``   followed by a valid key combination (e.g.   ``CTRL+V`` ). Its general syntax is any combination of   ``"CTRL"`` ,   ``"RAWCTRL"`` ,   ``"ALT"``   and   ``"SHIFT"``   strings (case doesn't matter) separated by either   ``'-'``   or   ``'+'``   characters and followed by the accelerator itself. Notice that   ``CTRL``   corresponds to the "Ctrl" key on most platforms but not under macOS where it is mapped to "Cmd" key on Mac keyboard. Usually this is exactly what you want in portable code but if you really need to use the (rarely used for this purpose) "Ctrl" key even under Mac, you may use   ``RAWCTRL``   to prevent this mapping. Under the other platforms   ``RAWCTRL``   is the same as plain   ``CTRL`` . 

      The accelerator may be any alphanumeric character, any function key (from  ``F1``   to   ``F12`` ), any numpad digit key using   ``KP_``   prefix (i.e. from   ``KP_0``   to   ``KP_9`` ) or one of the special strings listed below (again, case doesn't matter) corresponding to the specified key code:

      -  ``Del``   or   ``Delete:``   ``wx.WXK_DELETE`` 
      -  ``Back:``   ``wx.WXK_BACK`` 
      -  ``Ins``   or   ``Insert:``   ``wx.WXK_INSERT`` 
      -  ``Enter``   or   ``Return:``   ``wx.WXK_RETURN`` 
      -  ``PgUp``   or   ``PageUp:``   ``wx.WXK_PAGEUP`` 
      -  ``PgDn``   or   ``PageDown:``   ``wx.WXK_PAGEDOWN`` 
      -  ``Left:``   ``wx.WXK_LEFT`` 
      -  ``Right:``   ``wx.WXK_RIGHT`` 
      -  ``Up:``   ``wx.WXK_UP`` 
      -  ``Down:``   ``wx.WXK_DOWN`` 
      -  ``Home:``   ``wx.WXK_HOME`` 
      -  ``End:``   ``wx.WXK_END`` 
      -  ``Space:``   ``wx.WXK_SPACE`` 
      -  ``Tab:``   ``wx.WXK_TAB`` 
      -  ``Esc``   or   ``Escape:``   ``wx.WXK_ESCAPE`` 
      -  ``Cancel:``   ``wx.WXK_CANCEL`` 
      -  ``Clear:``   ``wx.WXK_CLEAR`` 
      -  ``Menu:``   ``wx.WXK_MENU`` 
      -  ``Pause:``   ``wx.WXK_PAUSE`` 
      -  ``Capital:``   ``wx.WXK_CAPITAL`` 
      -  ``Select:``   ``wx.WXK_SELECT`` 
      -  ``Print:``   ``wx.WXK_PRINT`` 
      -  ``Execute:``   ``wx.WXK_EXECUTE`` 
      -  ``Snapshot:``   ``wx.WXK_SNAPSHOT`` 
      -  ``Help:``   ``wx.WXK_HELP`` 
      -  ``Add:``   ``wx.WXK_ADD`` 
      -  ``Separator:``   ``wx.WXK_SEPARATOR`` 
      -  ``Subtract:``   ``wx.WXK_SUBTRACT`` 
      -  ``Decimal:``   ``wx.WXK_DECIMAL`` 
      -  ``Divide:``   ``wx.WXK_DIVIDE`` 
      -  ``Num_lock:``   ``wx.WXK_NUMLOCK`` 
      -  ``Scroll_lock:``   ``wx.WXK_SCROLL`` 
      -  ``KP_Space:``   ``wx.WXK_NUMPAD_SPACE`` 
      -  ``KP_Tab:``   ``wx.WXK_NUMPAD_TAB`` 
      -  ``KP_Enter:``   ``wx.WXK_NUMPAD_ENTER`` 
      -  ``KP_Home:``   ``wx.WXK_NUMPAD_HOME`` 
      -  ``KP_Left:``   ``wx.WXK_NUMPAD_LEFT`` 
      -  ``KP_Up:``   ``wx.WXK_NUMPAD_UP`` 
      -  ``KP_Right:``   ``wx.WXK_NUMPAD_RIGHT`` 
      -  ``KP_Down:``   ``wx.WXK_NUMPAD_DOWN`` 
      -  ``KP_PageUp:``   ``wx.WXK_NUMPAD_PAGEUP`` 
      -  ``KP_PageDown:``   ``wx.WXK_NUMPAD_PAGEDOWN`` 
      -  ``KP_Prior:``   ``wx.WXK_NUMPAD_PAGEUP`` 
      -  ``KP_Next:``   ``wx.WXK_NUMPAD_PAGEDOWN`` 
      -  ``KP_End:``   ``wx.WXK_NUMPAD_END`` 
      -  ``KP_Begin:``   ``wx.WXK_NUMPAD_BEGIN`` 
      -  ``KP_Insert:``   ``wx.WXK_NUMPAD_INSERT`` 
      -  ``KP_Delete:``   ``wx.WXK_NUMPAD_DELETE`` 
      -  ``KP_Equal:``   ``wx.WXK_NUMPAD_EQUAL`` 
      -  ``KP_Multiply:``   ``wx.WXK_NUMPAD_MULTIPLY`` 
      -  ``KP_Add:``   ``wx.WXK_NUMPAD_ADD`` 
      -  ``KP_Separator:``   ``wx.WXK_NUMPAD_SEPARATOR`` 
      -  ``KP_Subtract:``   ``wx.WXK_NUMPAD_SUBTRACT`` 
      -  ``KP_Decimal:``   ``wx.WXK_NUMPAD_DECIMAL`` 
      -  ``KP_Divide:``   ``wx.WXK_NUMPAD_DIVIDE`` 
      -  ``Windows_Left:``   ``wx.WXK_WINDOWS_LEFT`` 
      -  ``Windows_Right:``   ``wx.WXK_WINDOWS_RIGHT`` 
      -  ``Windows_Menu:``   ``wx.WXK_WINDOWS_MENU`` 
      -  ``Command:``   ``wx.WXK_COMMAND`` 




      Examples: 

      ::

                  self.myMenuItem.SetItemLabel("My &item\tCTRL+I")
                  self.myMenuItem2.SetItemLabel("Clean and build\tF7")
                  self.myMenuItem3.SetItemLabel("Simple item")
                  self.myMenuItem4.SetItemLabel("Item with &accelerator")



                


      :param `label`: 
      :type `label`: string






      .. note:: 

         In wxGTK using  ``"SHIFT"``   with non-alphabetic characters currently doesn't work, even in combination with other modifiers, due to GTK+ limitation. E.g.   ``Shift+Ctrl+A``   works but   ``Shift+Ctrl+1``   or   ``Shift+/``   do not, so avoid using accelerators of this form in portable code.  







      .. note:: 

         In GTk, the left/right/up/down arrow keys do not work as accelerator keys for a menu item unless a modifier key is used. Additionally, the following keycodes are not supported as menu accelerator keys:

         - WXK_COMMAND/WXK_CONTROL 
         - ``wx.WXK_SHIFT`` 
         - ``wx.WXK_ALT`` 
         - ``wx.WXK_SCROLL`` 
         - ``wx.WXK_CAPITAL`` 
         - ``wx.WXK_NUMLOCK`` 
         - ``wx.WXK_NUMPAD_TAB`` 
         - ``wx.WXK_TAB`` 
         - ``wx.WXK_WINDOWS_LEFT`` 
         - ``wx.WXK_WINDOWS_RIGHT`` 
         - ``wx.WXK_ADD`` 
         - ``wx.WXK_SEPARATOR`` 
         - ``wx.WXK_SUBTRACT`` 
         - ``wx.WXK_DECIMAL`` 
         - ``wx.WXK_DIVIDE`` 
         - ``wx.WXK_SNAPSHOT`` 










      .. seealso:: :meth:`GetItemLabel` , :meth:`GetItemLabelText`     








   .. method:: SetMarginWidth(self, width)

      Sets the width of the menu item checkmark bitmap.                  




      :param `width`: 
      :type `width`: int






      .. availability:: Only available for MSW.  








   .. method:: SetMenu(self, menu)

      Sets the parent menu which will contain this menu item.                  


      :param `menu`: 
      :type `menu`: wx.Menu







   .. method:: SetSubMenu(self, menu)

      Sets the submenu of this menu item.                  


      :param `menu`: 
      :type `menu`: wx.Menu







   .. method:: SetTextColour(self, colour)

      Sets the text colour associated with the menu item.                  




      :param `colour`: 
      :type `colour`: wx.Colour






      .. availability:: Only available for MSW.  








   .. attribute:: Accel

      See :meth:`~wx.MenuItem.GetAccel` and :meth:`~wx.MenuItem.SetAccel`


   .. attribute:: BackgroundColour

      See :meth:`~wx.MenuItem.GetBackgroundColour` and :meth:`~wx.MenuItem.SetBackgroundColour`


   .. attribute:: Bitmap

      See :meth:`~wx.MenuItem.GetBitmap` and :meth:`~wx.MenuItem.SetBitmap`


   .. attribute:: DisabledBitmap

      See :meth:`~wx.MenuItem.GetDisabledBitmap` and :meth:`~wx.MenuItem.SetDisabledBitmap`


   .. attribute:: Enabled

      See :meth:`~wx.MenuItem.IsEnabled` and :meth:`~wx.MenuItem.Enable`


   .. attribute:: Font

      See :meth:`~wx.MenuItem.GetFont` and :meth:`~wx.MenuItem.SetFont`


   .. attribute:: Help

      See :meth:`~wx.MenuItem.GetHelp` and :meth:`~wx.MenuItem.SetHelp`


   .. attribute:: Id

      See :meth:`~wx.MenuItem.GetId`


   .. attribute:: ItemLabel

      See :meth:`~wx.MenuItem.GetItemLabel` and :meth:`~wx.MenuItem.SetItemLabel`


   .. attribute:: ItemLabelText

      See :meth:`~wx.MenuItem.GetItemLabelText`


   .. attribute:: Kind

      See :meth:`~wx.MenuItem.GetKind`


   .. attribute:: MarginWidth

      See :meth:`~wx.MenuItem.GetMarginWidth` and :meth:`~wx.MenuItem.SetMarginWidth`


   .. attribute:: Menu

      See :meth:`~wx.MenuItem.GetMenu` and :meth:`~wx.MenuItem.SetMenu`


   .. attribute:: SubMenu

      See :meth:`~wx.MenuItem.GetSubMenu` and :meth:`~wx.MenuItem.SetSubMenu`


   .. attribute:: TextColour

      See :meth:`~wx.MenuItem.GetTextColour` and :meth:`~wx.MenuItem.SetTextColour`

