.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.Font:

==========================================================================================================================================
|phoenix_title|  **wx.Font**
==========================================================================================================================================

A font is an object which determines the appearance of text.          

Fonts are used for drawing text to a device context, and setting the appearance of a window's text, see :meth:`wx.DC.SetFont`   and :meth:`wx.Window.SetFont` . 

The easiest way to create a custom font is to use :ref:`wx.FontInfo`  object to specify the font attributes and then use :meth:`Font.__init__`   constructor. Alternatively, you could start with one of the pre-defined fonts or use :meth:`wx.Window.GetFont`   and modify the font, e.g. by increasing its size using :meth:`~wx.Font.MakeLarger`  or changing its weight using :meth:`~wx.Font.MakeBold`. 

This class uses :ref:`reference counting and copy-on-write <reference counting>`  internally so that assignments between two instances of this class are very cheap. You can therefore use actual objects instead of pointers without efficiency problems. If an instance of this class is changed it will create its own data internally so that other instances, which previously shared the data using the reference counting, are not affected. 

You can retrieve the current system font settings with :ref:`wx.SystemSettings`. 









         



.. seealso:: :ref:`Font Overview <font overview>`, :meth:`wx.DC.SetFont` , :meth:`wx.DC.DrawText` , :meth:`wx.DC.GetTextExtent` , :ref:`wx.FontDialog`, :ref:`wx.SystemSettings`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Font</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.Font_inheritance.png" alt="Inheritance diagram of Font" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Font.html" title="wx.Font" alt="" coords="24,160,97,189"/> <area shape="rect" id="node2" href="wx.GDIObject.html" title="wx.GDIObject" alt="" coords="5,83,116,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="17,5,104,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.Font.__init__`                                                        Default constructor.
:meth:`~wx.Font.AddPrivateFont`                                                  Specify the name of a file containing a TrueType font to be made available to the current application.
:meth:`~wx.Font.Bold`                                                            Returns a bold version of this font.
:meth:`~wx.Font.CanUsePrivateFont`                                               Returns ``True`` if this build of wxPython supports using :meth:`AddPrivateFont`.
:meth:`~wx.Font.GetBaseFont`                                                     Returns a font with the same face/size as the given one but with normal weight and style and not underlined nor stricken through.
:meth:`~wx.Font.GetDefaultEncoding`                                              Returns the current application's default encoding.
:meth:`~wx.Font.GetEncoding`                                                     Returns the encoding of this font.
:meth:`~wx.Font.GetFaceName`                                                     Returns the face name associated with the font, or the empty string if there is no face information.
:meth:`~wx.Font.GetFamily`                                                       Gets the font family if possible.
:meth:`~wx.Font.GetFractionalPointSize`                                          Gets the point size as a floating number.
:meth:`~wx.Font.GetHFONT`                                                        Returns the font's native handle.
:meth:`~wx.Font.GetNativeFontInfo`                                               Returns a font with the same face/size as the given one but with normal weight and style and not underlined nor stricken through.
:meth:`~wx.Font.GetNativeFontInfoDesc`                                           Returns the platform-dependent string completely describing this font.
:meth:`~wx.Font.GetNativeFontInfoUserDesc`                                       Returns a user-friendly string for this font object.
:meth:`~wx.Font.GetNumericWeight`                                                Gets the font weight as an integer value.
:meth:`~wx.Font.GetNumericWeightOf`                                              Get the raw weight value corresponding to the given symbolic constant.
:meth:`~wx.Font.GetPangoFontDescription`                                         Returns the font's native handle.
:meth:`~wx.Font.GetPixelSize`                                                    Gets the pixel size.
:meth:`~wx.Font.GetPointSize`                                                    Gets the point size as an integer number.
:meth:`~wx.Font.GetStrikethrough`                                                Returns ``True`` if the font is stricken-through, ``False`` otherwise.
:meth:`~wx.Font.GetStyle`                                                        Gets the font style.
:meth:`~wx.Font.GetUnderlined`                                                   Returns ``True`` if the font is underlined, ``False`` otherwise.
:meth:`~wx.Font.GetWeight`                                                       Gets the font weight.
:meth:`~wx.Font.IsFixedWidth`                                                    Returns ``True`` if the font is a fixed width (or monospaced) font, ``False`` if it is a proportional one or font is invalid.
:meth:`~wx.Font.IsOk`                                                            Returns ``True`` if this object is a valid font, ``False`` otherwise.
:meth:`~wx.Font.Italic`                                                          Returns an italic version of this font.
:meth:`~wx.Font.Larger`                                                          Returns a larger version of this font.
:meth:`~wx.Font.MakeBold`                                                        Changes this font to be bold.
:meth:`~wx.Font.MakeItalic`                                                      Changes this font to be italic.
:meth:`~wx.Font.MakeLarger`                                                      Changes this font to be larger.
:meth:`~wx.Font.MakeSmaller`                                                     Changes this font to be smaller.
:meth:`~wx.Font.MakeStrikethrough`                                               Changes this font to be stricken-through.
:meth:`~wx.Font.MakeUnderlined`                                                  Changes this font to be underlined.
:meth:`~wx.Font.New`                                                             This function takes the same parameters as the relative :ref:`Font constructor <wx.Font>`  and returns a new font object allocated on the heap.
:meth:`~wx.Font.OSXGetCGFont`                                                    Returns the font's native handle.
:meth:`~wx.Font.Scale`                                                           Changes the size of this font.
:meth:`~wx.Font.Scaled`                                                          Returns a scaled version of this font.
:meth:`~wx.Font.SetDefaultEncoding`                                              Sets the default font encoding.
:meth:`~wx.Font.SetEncoding`                                                     Sets the encoding for this font.
:meth:`~wx.Font.SetFaceName`                                                     Sets the facename for the font.
:meth:`~wx.Font.SetFamily`                                                       Sets the font family.
:meth:`~wx.Font.SetFractionalPointSize`                                          Sets the font size in points.
:meth:`~wx.Font.SetNativeFontInfo`                                               Creates the font corresponding to the given native font description string which must have been previously returned by :meth:`~Font.GetNativeFontInfoDesc` .
:meth:`~wx.Font.SetNativeFontInfoUserDesc`                                       Creates the font corresponding to the given native font description string and returns ``True`` if the creation was successful.
:meth:`~wx.Font.SetNumericWeight`                                                Sets the font weight using an integer value.
:meth:`~wx.Font.SetPixelSize`                                                    Sets the pixel size.
:meth:`~wx.Font.SetPointSize`                                                    Sets the font size in points to an integer value.
:meth:`~wx.Font.SetStrikethrough`                                                Sets strike-through attribute of the font.
:meth:`~wx.Font.SetStyle`                                                        Sets the font style.
:meth:`~wx.Font.SetSymbolicSize`                                                 Sets the font size using a predefined symbolic size name.
:meth:`~wx.Font.SetSymbolicSizeRelativeTo`                                       Sets the font size compared to the base font size.
:meth:`~wx.Font.SetUnderlined`                                                   Sets underlining.
:meth:`~wx.Font.SetWeight`                                                       Sets the font weight.
:meth:`~wx.Font.Smaller`                                                         Returns a smaller version of this font.
:meth:`~wx.Font.Strikethrough`                                                   Returns stricken-through version of this font.
:meth:`~wx.Font.Underlined`                                                      Returns underlined version of this font.
:meth:`~wx.Font.__bool__`                                                        
:meth:`~wx.Font.__nonzero__`                                                     
:meth:`~wx.Font._copyFrom`                                                       For internal use only.
:meth:`~wx.Font.__ne__`                                                          Inequality operator.
:meth:`~wx.Font.__eq__`                                                          Equality operator.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.Font.Encoding`                                                        See :meth:`~wx.Font.GetEncoding` and :meth:`~wx.Font.SetEncoding`
:attr:`~wx.Font.FaceName`                                                        See :meth:`~wx.Font.GetFaceName` and :meth:`~wx.Font.SetFaceName`
:attr:`~wx.Font.Family`                                                          See :meth:`~wx.Font.GetFamily` and :meth:`~wx.Font.SetFamily`
:attr:`~wx.Font.NativeFontInfoDesc`                                              See :meth:`~wx.Font.GetNativeFontInfoDesc` and :meth:`~wx.Font.SetNativeFontInfo`
:attr:`~wx.Font.NativeFontInfoUserDesc`                                          See :meth:`~wx.Font.GetNativeFontInfoUserDesc` and :meth:`~wx.Font.SetNativeFontInfoUserDesc`
:attr:`~wx.Font.PixelSize`                                                       See :meth:`~wx.Font.GetPixelSize` and :meth:`~wx.Font.SetPixelSize`
:attr:`~wx.Font.PointSize`                                                       See :meth:`~wx.Font.GetPointSize` and :meth:`~wx.Font.SetPointSize`
:attr:`~wx.Font.Style`                                                           See :meth:`~wx.Font.GetStyle` and :meth:`~wx.Font.SetStyle`
:attr:`~wx.Font.Weight`                                                          See :meth:`~wx.Font.GetWeight` and :meth:`~wx.Font.SetWeight`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.Font(GDIObject)

   **Possible constructors**::

       Font()
       
       Font(font)
       
       Font(fontInfo)
       
       Font(pointSize, family, style, weight, underline=False,
            faceName=EmptyString, encoding=FONTENCODING_DEFAULT)
       
       Font(pixelSize, family, style, weight, underline=False,
            faceName=EmptyString, encoding=FONTENCODING_DEFAULT)
       
       Font(nativeInfoString)
       
       Font(nativeInfo)
       
   
   A font is an object which determines the appearance of text.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, font)`
      
      Copy constructor, uses :ref:`reference counting <reference counting>`.                  
      
      
      :param `font`: 
      :type `font`: wx.Font
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, fontInfo)`
      
      Creates a font object using the specified font description.                  
      
      This is the preferred way to create font objects as using this constructor results in more readable code and it is also extensible, e.g. it could continue to be used if support for more font attributes is added in the future. For example, this constructor provides the only way of creating fonts with strike-through style. 
      
      Example of creating a font using this constructor: ::
      
          # Create a font using wx.FontInfo
          font = wx.Font( wx.FontInfo(10).Bold().Underline() )
      
      
      
                      
      
      
      :param `fontInfo`: 
      :type `fontInfo`: wx.FontInfo
      
      
      
      
      
      
      .. versionadded:: 2.9.5 
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, pointSize, family, style, weight, underline=False, faceName=EmptyString, encoding=FONTENCODING_DEFAULT)`
      
      Creates a font object with the specified attributes and size in points.                  
      
      Notice that the use of this constructor is often more verbose and less readable than using the constructor accepting a :ref:`wx.FontInfo`, e.g. the example in that constructor documentation would need to be written as:  
      
      ::
      
          # Create a font using the old-style constructor
          font = wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, True)
      
      
      
      
      
      
      :param `pointSize`: Size in points. See :meth:`SetPointSize`   for more info. Notice that, for historical reasons, the value 70 here is interpreted at  ``DEFAULT``   and results in creation of the font with the default size and not of a font with the size of 70pt. If you really need the latter, please use SetPointSize(70). Note that this constructor and the matching Create() method overload are the only places in  :ref:`wx.Font`  API handling  ``DEFAULT``   specially: neither  :meth:`SetPointSize`   nor the constructor taking :ref:`wx.FontInfo`  handle this value in this way.   
      :type `pointSize`: int
      :param `family`: The font family: a generic portable way of referring to fonts without specifying a facename. This parameter must be one of the :ref:`wx.FontFamily`  enumeration values. If the  `faceName`  argument is provided, then it overrides the font family.   
      :type `family`: wx.FontFamily
      :param `style`: One of  ``FONTSTYLE_NORMAL`` ,   ``FONTSTYLE_SLANT``   and   ``FONTSTYLE_ITALIC`` .    
      :type `style`: wx.FontStyle
      :param `weight`: Font weight, sometimes also referred to as font boldness. One of the :ref:`wx.FontWeight`  enumeration values.   
      :type `weight`: wx.FontWeight
      :param `underline`: The value can be ``True`` or ``False``. At present this has an effect on Windows and Motif 2.x only.   
      :type `underline`: bool
      :param `faceName`: An optional string specifying the face name to be used. If it is an empty string, a default face name will be chosen based on the family.   
      :type `faceName`: string
      :param `encoding`: An encoding which may be one of the enumeration values of :ref:`wx.FontEncoding`. If the specified encoding isn't available, no font is created (see also :ref:`Font Encodings <font encodings>`).  
      :type `encoding`: wx.FontEncoding
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. note:: 
      
         If the desired font does not exist, the closest match will be chosen. Under Windows, only scalable TrueType fonts are used.   
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, pixelSize, family, style, weight, underline=False, faceName=EmptyString, encoding=FONTENCODING_DEFAULT)`
      
      Creates a font object with the specified attributes and size in pixels.                  
      
      Notice that the use of this constructor is often more verbose and less readable than the use of constructor from :ref:`wx.FontInfo`, consider using that constructor instead. 
      
      
      
      
      :param `pixelSize`: Size in pixels. See :meth:`SetPixelSize`   for more info.   
      :type `pixelSize`: wx.Size
      :param `family`: The font family: a generic portable way of referring to fonts without specifying a facename. This parameter must be one of the :ref:`wx.FontFamily`  enumeration values. If the  `faceName`  argument is provided, then it overrides the font family.   
      :type `family`: wx.FontFamily
      :param `style`: One of  ``FONTSTYLE_NORMAL`` ,   ``FONTSTYLE_SLANT``   and   ``FONTSTYLE_ITALIC`` .    
      :type `style`: wx.FontStyle
      :param `weight`: Font weight, sometimes also referred to as font boldness. One of the :ref:`wx.FontWeight`  enumeration values.   
      :type `weight`: wx.FontWeight
      :param `underline`: The value can be ``True`` or ``False``. At present this has an effect on Windows and Motif 2.x only.   
      :type `underline`: bool
      :param `faceName`: An optional string specifying the face name to be used. If it is an empty string, a default face name will be chosen based on the family.   
      :type `faceName`: string
      :param `encoding`: An encoding which may be one of the enumeration values of :ref:`wx.FontEncoding`. If the specified encoding isn't available, no font is created (see also :ref:`Font Encodings <font encodings>`).  
      :type `encoding`: wx.FontEncoding
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. note:: 
      
         If the desired font does not exist, the closest match will be chosen. Under Windows, only scalable TrueType fonts are used.   
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, nativeInfoString)`
      
      Constructor from font description string.                  
      
      This constructor uses :meth:`SetNativeFontInfo`   to initialize the font. If `fontdesc`  is invalid the font remains uninitialized, i.e. its :meth:`IsOk`   method will return ``False``.                  
      
      
      :param `nativeInfoString`: 
      :type `nativeInfoString`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, nativeInfo)`
      
      Construct font from a native font info structure.                  
      
      
      :param `nativeInfo`: 
      :type `nativeInfo`: wx.NativeFontInfo
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. staticmethod:: AddPrivateFont(filename)

      Specify the name of a file containing a TrueType font to be made available to the current application.                  

      This method can be used to allow this application to use the font from the given file even if it is not globally installed on the system. 

      Under macOS this method actually doesn't do anything other than check for the existence of the file in the "Fonts" subdirectory of the application bundle "Resources" directory. You are responsible for actually making the font file available in this directory and setting  ``ATSApplicationFontsPath``   to   ``Fonts``   value in your   ``Info.plist``   file. See also  :meth:`wx.StandardPaths.GetResourcesDir` . 

      Under MSW this method must be called before any :ref:`wx.GraphicsContext`  objects have been created, otherwise the private font won't be usable from them. 

      Under Unix this method requires Pango 1.38 or later and will return ``False``  and log an error message explaining the problem if this requirement is not satisfied either at compile- or run-time. 

      Currently this method is implemented for all major platforms (subject to having Pango 1.38 or later when running configure under Unix) and  ``USE_PRIVATE_FONTS``   is always set to 0 under the other platforms, making this function unavailable at compile-time. 

                


      :param `filename`: 
      :type `filename`: string




      :rtype: `bool`







      :returns: 

         ``True`` if the font was added and can now be used.  







      .. versionadded:: 4.1/wxWidgets-3.1.1  
     








   .. method:: Bold(self)

      Returns a bold version of this font.                  

                

      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.1 
     







      .. seealso:: :meth:`MakeBold`   








   .. staticmethod:: CanUsePrivateFont()

      Returns ``True`` if this build of wxPython supports using :meth:`AddPrivateFont`. 

      :rtype: `bool`








   .. method:: GetBaseFont(self)

      Returns a font with the same face/size as the given one but with normal weight and style and not underlined nor stricken through.                  

                

      :rtype: :ref:`wx.Font`







      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. staticmethod:: GetDefaultEncoding()

      Returns the current application's default encoding.                  

                

      :rtype: :ref:`wx.FontEncoding`







      .. seealso:: :ref:`Font Encodings <font encodings>`, :meth:`SetDefaultEncoding`     








   .. method:: GetEncoding(self)

      Returns the encoding of this font.                  

      Note that under wxGTK the returned value is always  ``FONTENCODING_UTF8`` . 

                

      :rtype: :ref:`wx.FontEncoding`







      .. seealso:: :meth:`SetEncoding`     








   .. method:: GetFaceName(self)

      Returns the face name associated with the font, or the empty string if there is no face information.                  

                

      :rtype: `string`







      .. seealso:: :meth:`SetFaceName`     








   .. method:: GetFamily(self)

      Gets the font family if possible.                  

      As described in :ref:`wx.FontFamily`  docs the returned value acts as a rough, basic classification of the main font properties (look, spacing). 

      If the current font face name is not recognized by :ref:`wx.Font`  or by the underlying system,  ``FONTFAMILY_DEFAULT``   is returned. 

      Note that currently this function is not very precise and so not particularly useful. Font families mostly make sense only for font creation, see :meth:`SetFamily` . 

                

      :rtype: :ref:`wx.FontFamily`







      .. seealso:: :meth:`SetFamily`     








   .. method:: GetFractionalPointSize(self)

      Gets the point size as a floating number.                  

                

      :rtype: `float`







      .. versionadded:: 4.1/wxWidgets-3.1.2  
     







      .. seealso:: SetPointSize(float)  








   .. method:: GetHFONT(self)

      Returns the font's native handle.  





   .. method:: GetNativeFontInfo(self)

      Returns a font with the same face/size as the given one but with normal weight and style and not underlined nor stricken through.                  

                

      :rtype: :ref:`wx.NativeFontInfo`







      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. method:: GetNativeFontInfoDesc(self)

      Returns the platform-dependent string completely describing this font.                  

      Returned string is always non-empty unless the font is invalid (in which case an assert is triggered). 

      Note that the returned string is not meant to be shown or edited by the user: a typical use of this function is for serializing in string-form a :ref:`wx.Font`  object. 

                

      :rtype: `string`







      .. seealso:: :meth:`SetNativeFontInfo` , :meth:`GetNativeFontInfoUserDesc`     








   .. method:: GetNativeFontInfoUserDesc(self)

      Returns a user-friendly string for this font object.                  

      Returned string is always non-empty unless the font is invalid (in which case an assert is triggered). 

      The string does not encode all :ref:`wx.Font`  infos under all platforms; e.g. under wxMSW the font family is not present in the returned string. 

      Some examples of the formats of returned strings (which are platform-dependent) are in :meth:`SetNativeFontInfoUserDesc` . 

                

      :rtype: `string`







      .. seealso:: :meth:`SetNativeFontInfoUserDesc` , :meth:`GetNativeFontInfoDesc`     








   .. method:: GetNumericWeight(self)

      Gets the font weight as an integer value.                  

      See :ref:`wx.FontWeight`  for a list of valid weight identifiers and their corresponding integer value. 

                

      :rtype: `int`







      .. versionadded:: 4.1/wxWidgets-3.1.2  
     







      .. seealso:: :meth:`SetWeight`     







      .. seealso:: :meth:`SetNumericWeight`   








   .. staticmethod:: GetNumericWeightOf(weight)

      Get the raw weight value corresponding to the given symbolic constant.                  

      For compatibility, this function handles the values  ``NORMAL`` ,   ``LIGHT``   and   ``BOLD`` , that have values 90, 91 and 92, specially and converts them to the corresponding   ``FONTWEIGHT_XXX``   weight value. 




      :param `weight`: A valid element of FontWeight enum, i.e. this argument can't have value ``FONTWEIGHT_INVALID``.   
      :type `weight`: wx.FontWeight






      :rtype: `int`



                  



      :returns: 

         Numeric weight, between 1 and 1000.  







      .. versionadded:: 4.1/wxWidgets-3.1.2  
     








   .. method:: GetPangoFontDescription(self)

      Returns the font's native handle.  





   .. method:: GetPixelSize(self)

      Gets the pixel size.                  

      Note that under wxMSW if you passed to :meth:`SetPixelSize`   (or to the constructor) a :ref:`wx.Size`  object with a null width value, you'll get a null width in the returned object. 

                

      :rtype: :ref:`wx.Size`







      .. seealso:: :meth:`SetPixelSize`     








   .. method:: GetPointSize(self)

      Gets the point size as an integer number.                  

      This function is kept for compatibility reasons. New code should use :meth:`GetFractionalPointSize`   and support fractional point sizes. 

                

      :rtype: `int`







      .. seealso:: :meth:`SetPointSize` ,   







      .. seealso:: :meth:`GetFractionalPointSize`     








   .. method:: GetStrikethrough(self)

      Returns ``True`` if the font is stricken-through, ``False`` otherwise.                  

                

      :rtype: `bool`







      .. versionadded:: 2.9.4 
     







      .. seealso:: :meth:`SetStrikethrough`   








   .. method:: GetStyle(self)

      Gets the font style.                  

      See :ref:`wx.FontStyle`  for a list of valid styles. 

                

      :rtype: :ref:`wx.FontStyle`







      .. seealso:: :meth:`SetStyle`     








   .. method:: GetUnderlined(self)

      Returns ``True`` if the font is underlined, ``False`` otherwise.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`SetUnderlined`     








   .. method:: GetWeight(self)

      Gets the font weight.                  

      See :ref:`wx.FontWeight`  for a list of valid weight identifiers. 

                

      :rtype: :ref:`wx.FontWeight`







      .. seealso:: :meth:`SetWeight`     








   .. method:: IsFixedWidth(self)

      Returns ``True`` if the font is a fixed width (or monospaced) font, ``False`` if it is a proportional one or font is invalid.                  

      Note that this function under some platforms is different from just testing for the font family being equal to  ``FONTFAMILY_TELETYPE``   because native platform-specific functions are used for the check (resulting in a more accurate return value).                   

      :rtype: `bool`








   .. method:: IsOk(self)

      Returns ``True`` if this object is a valid font, ``False`` otherwise.                  

      :rtype: `bool`








   .. method:: Italic(self)

      Returns an italic version of this font.                  

                

      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.1 
     







      .. seealso:: :meth:`MakeItalic`   








   .. method:: Larger(self)

      Returns a larger version of this font.                  

      The font size is multiplied by  ``1.2`` , the factor of   ``1.2``   being inspired by the ``W3C`` CSS specification. 

                

      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.1 
     







      .. seealso:: :meth:`MakeLarger` , :meth:`Smaller` , :meth:`Scaled`   








   .. method:: MakeBold(self)

      Changes this font to be bold.                  

                

      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.1 
     







      .. seealso:: :meth:`Bold`   








   .. method:: MakeItalic(self)

      Changes this font to be italic.                  

                

      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.1 
     







      .. seealso:: :meth:`Italic`   








   .. method:: MakeLarger(self)

      Changes this font to be larger.                  

      The font size is multiplied by  ``1.2`` , the factor of   ``1.2``   being inspired by the ``W3C`` CSS specification. 

                

      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.1 
     







      .. seealso:: :meth:`Larger` , :meth:`MakeSmaller` , :meth:`Scale`   








   .. method:: MakeSmaller(self)

      Changes this font to be smaller.                  

      The font size is divided by  ``1.2`` , the factor of   ``1.2``   being inspired by the ``W3C`` CSS specification. 

                

      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.1 
     







      .. seealso:: :meth:`Smaller` , :meth:`MakeLarger` , :meth:`Scale`   








   .. method:: MakeStrikethrough(self)

      Changes this font to be stricken-through.                  

      Currently stricken-through fonts are only supported in wxMSW, wxGTK, and wxOSX. 

                

      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.4 
     







      .. seealso:: :meth:`Strikethrough`   








   .. method:: MakeUnderlined(self)

      Changes this font to be underlined.                  

                

      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.2 
     







      .. seealso:: :meth:`Underlined`   








   .. staticmethod:: New(*args, **kw)

      This function takes the same parameters as the relative :ref:`Font constructor <wx.Font>`  and returns a new font object allocated on the heap.                  

      Their use is discouraged, use :ref:`wx.Font`  constructor from :ref:`wx.FontInfo`  instead.                   


      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **New** `(pointSize, family, style, weight, underline=False, faceName=EmptyString, encoding=FONTENCODING_DEFAULT)`
      
      
      
      
      :param `pointSize`: 
      :type `pointSize`: int
      :param `family`: 
      :type `family`: wx.FontFamily
      :param `style`: 
      :type `style`: wx.FontStyle
      :param `weight`: 
      :type `weight`: wx.FontWeight
      :param `underline`: 
      :type `underline`: bool
      :param `faceName`: 
      :type `faceName`: string
      :param `encoding`: 
      :type `encoding`: wx.FontEncoding
      
      
      
      
      :rtype: :ref:`wx.Font`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **New** `(pointSize, family, flags=FONTFLAG_DEFAULT, faceName=EmptyString, encoding=FONTENCODING_DEFAULT)`
      
      
      
      
      :param `pointSize`: 
      :type `pointSize`: int
      :param `family`: 
      :type `family`: wx.FontFamily
      :param `flags`: 
      :type `flags`: int
      :param `faceName`: 
      :type `faceName`: string
      :param `encoding`: 
      :type `encoding`: wx.FontEncoding
      
      
      
      
      :rtype: :ref:`wx.Font`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **New** `(pixelSize, family, style, weight, underline=False, faceName=EmptyString, encoding=FONTENCODING_DEFAULT)`
      
      
      
      
      :param `pixelSize`: 
      :type `pixelSize`: wx.Size
      :param `family`: 
      :type `family`: wx.FontFamily
      :param `style`: 
      :type `style`: wx.FontStyle
      :param `weight`: 
      :type `weight`: wx.FontWeight
      :param `underline`: 
      :type `underline`: bool
      :param `faceName`: 
      :type `faceName`: string
      :param `encoding`: 
      :type `encoding`: wx.FontEncoding
      
      
      
      
      :rtype: :ref:`wx.Font`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **New** `(pixelSize, family, flags=FONTFLAG_DEFAULT, faceName=EmptyString, encoding=FONTENCODING_DEFAULT)`
      
      
      
      
      :param `pixelSize`: 
      :type `pixelSize`: wx.Size
      :param `family`: 
      :type `family`: wx.FontFamily
      :param `flags`: 
      :type `flags`: int
      :param `faceName`: 
      :type `faceName`: string
      :param `encoding`: 
      :type `encoding`: wx.FontEncoding
      
      
      
      
      :rtype: :ref:`wx.Font`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **New** `(nativeInfo)`
      
      
      
      
      :param `nativeInfo`: 
      :type `nativeInfo`: wx.NativeFontInfo
      
      
      
      
      :rtype: :ref:`wx.Font`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **New** `(nativeInfoString)`
      
      
      
      
      :param `nativeInfoString`: 
      :type `nativeInfoString`: string
      
      
      
      
      :rtype: :ref:`wx.Font`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: OSXGetCGFont(self)

      Returns the font's native handle.  





   .. method:: Scale(self, x)

      Changes the size of this font.                  

      The font size is multiplied by the given factor (which may be less than 1 to create a smaller version of the font). 

                


      :param `x`: 
      :type `x`: float




      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.1 
     







      .. seealso:: :meth:`Scaled` , :meth:`MakeLarger` , :meth:`MakeSmaller`   








   .. method:: Scaled(self, x)

      Returns a scaled version of this font.                  

      The font size is multiplied by the given factor (which may be less than 1 to create a smaller version of the font). 

                


      :param `x`: 
      :type `x`: float




      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.1 
     







      .. seealso:: :meth:`Scale` , :meth:`Larger` , :meth:`Smaller`   








   .. staticmethod:: SetDefaultEncoding(encoding)

      Sets the default font encoding.                  

                


      :param `encoding`: 
      :type `encoding`: wx.FontEncoding






      .. seealso:: :ref:`Font Encodings <font encodings>`, :meth:`GetDefaultEncoding`     








   .. method:: SetEncoding(self, encoding)

      Sets the encoding for this font.                  

      Note that under wxGTK this function has no effect (because the underlying Pango library always uses  ``FONTENCODING_UTF8`` ). 

                


      :param `encoding`: 
      :type `encoding`: wx.FontEncoding






      .. seealso:: :meth:`GetEncoding`     








   .. method:: SetFaceName(self, faceName)

      Sets the facename for the font.                  




      :param `faceName`: A valid facename, which should be on the end-user's system.  
      :type `faceName`: string






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the given face name exists; if the face name doesn't exist in the user's system then the font is invalidated (so that :meth:`IsOk`   will return ``False``) and ``False`` is returned.  







      .. note:: 

         To avoid portability problems, don't rely on a specific face, but specify the font family instead (see :ref:`wx.FontFamily`  and :meth:`SetFamily` ).  







      .. seealso:: :meth:`GetFaceName` , :meth:`SetFamily`     








   .. method:: SetFamily(self, family)

      Sets the font family.                  

      As described in :ref:`wx.FontFamily`  docs the given `family`  value acts as a rough, basic indication of the main font properties (look, spacing). 

      Note that changing the font family results in changing the font face name. 




      :param `family`: One of the :ref:`wx.FontFamily`  values.  
      :type `family`: wx.FontFamily




                  



      .. seealso:: :meth:`GetFamily` , :meth:`SetFaceName`     








   .. method:: SetFractionalPointSize(self, pointSize)

      Sets the font size in points.                  

      The `point size`  is defined as 1/72 of the Anglo-Saxon inch (25.4 mm): it is approximately 0.0139 inch or 352.8 um. 




      :param `pointSize`: Size in points. This can also be a fractional point size like 11.5.  
      :type `pointSize`: float




                  



      .. versionadded:: 4.1/wxWidgets-3.1.2  
     







      .. seealso:: :meth:`GetFractionalPointSize` , :meth:`SetPointSize`   








   .. method:: SetNativeFontInfo(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetNativeFontInfo** `(self, info)`
      
      Creates the font corresponding to the given native font description string which must have been previously returned by :meth:`GetNativeFontInfoDesc` .                  
      
      If the string is invalid, font is unchanged. This function is typically used for de-serializing a :ref:`wx.Font`  object previously saved in a string-form. 
      
                      
      
      
      :param `info`: 
      :type `info`: string
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :returns: 
      
         ``True`` if the creation was successful.  
      
      
      
      
      
      
      
      .. seealso:: :meth:`SetNativeFontInfoUserDesc`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetNativeFontInfo** `(self, info)`
      
      Sets the encoding for this font.                  
      
      Note that under wxGTK this function has no effect (because the underlying Pango library always uses  ``FONTENCODING_UTF8`` ). 
      
                      
      
      
      :param `info`: 
      :type `info`: wx.NativeFontInfo
      
      
      
      
      
      
      .. seealso:: :meth:`GetEncoding`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetNativeFontInfoUserDesc(self, info)

      Creates the font corresponding to the given native font description string and returns ``True`` if the creation was successful.                  

      Unlike :meth:`SetNativeFontInfo` , this function accepts strings which are user-friendly. Examples of accepted string formats are: 



      =========== ========================================================================================= ============================= 
      platform    generic syntax                                                                            example                       
      =========== ========================================================================================= ============================= 
      wxGTK2      ``[underlined] [strikethrough] [FACE-NAME] [bold] [oblique|italic] [POINTSIZE]``          Monospace bold 10             
      wxMSW       ``[light|bold] [italic] [FACE-NAME] [POINTSIZE] [ENCODING]``                              Tahoma 10 ``WINDOWS-1252``    
      =========== ========================================================================================= ============================= 

      |





      For more detailed information about the allowed syntaxes you can look at the documentation of the native API used for font-rendering (e.g.  ``pango_font_description_from_string``   under GTK, although notice that it doesn't support the "underlined" and "strikethrough" attributes and so those are handled by wxWidgets itself). 

      Note that unlike :meth:`SetNativeFontInfo` , this function doesn't always restore all attributes of the :ref:`wx.Font`  object under all platforms; e.g. on wxMSW the font family is not restored (because GetNativeFontInfoUserDesc doesn't return it on wxMSW). If you want to serialize/deserialize a font in string form, you should use :meth:`GetNativeFontInfoDesc`   and :meth:`SetNativeFontInfo`   instead. 

                


      :param `info`: 
      :type `info`: string




      :rtype: `bool`







      .. seealso:: :meth:`SetNativeFontInfo`     







      .. todo:: add an example for Mac   








   .. method:: SetNumericWeight(self, weight)

      Sets the font weight using an integer value.                  

      See :ref:`wx.FontWeight`  for a list of valid weight identifiers and their corresponding integer value. 




      :param `weight`: An integer value int the range ``1-1000``.  
      :type `weight`: int




                  



      .. seealso:: :meth:`GetNumericWeight`     








   .. method:: SetPixelSize(self, pixelSize)

      Sets the pixel size.                  

      The height parameter of `pixelSize`  must be positive while the width parameter may also be zero (to indicate that you're not interested in the width of the characters: a suitable width will be chosen for best rendering). 

      This feature (specifying the font pixel size) is directly supported only under wxMSW and wxGTK currently; under other platforms a font with the closest size to the given one is found using binary search (this maybe slower). 

                


      :param `pixelSize`: 
      :type `pixelSize`: wx.Size






      .. seealso:: :meth:`GetPixelSize`     








   .. method:: SetPointSize(self, pointSize)

      Sets the font size in points to an integer value.                  

      This is a legacy version of the function only supporting integer point sizes. It can still be used, but to avoid unnecessarily restricting the font size in points to integer values, consider using the new (added in wxWidgets 3.1.2) :meth:`SetFractionalPointSize`   function instead.                  


      :param `pointSize`: 
      :type `pointSize`: int







   .. method:: SetStrikethrough(self, strikethrough)

      Sets strike-through attribute of the font.                  

      Currently stricken-through fonts are only supported in wxMSW, wxGTK, and wxOSX. 




      :param `strikethrough`: ``True`` to add strike-through style, ``False`` to remove it.  
      :type `strikethrough`: bool




                  



      .. versionadded:: 2.9.4 
     







      .. seealso:: :meth:`GetStrikethrough`   








   .. method:: SetStyle(self, style)

      Sets the font style.                  




      :param `style`: One of the :ref:`wx.FontStyle`  enumeration values.  
      :type `style`: wx.FontStyle




                  



      .. seealso:: :meth:`GetStyle`     








   .. method:: SetSymbolicSize(self, size)

      Sets the font size using a predefined symbolic size name.                  

      This function allows changing font size to be (very) large or small compared to the standard font size. 

                


      :param `size`: 
      :type `size`: wx.FontSymbolicSize






      .. versionadded:: 2.9.2 
     







      .. seealso:: :meth:`SetSymbolicSizeRelativeTo` .  








   .. method:: SetSymbolicSizeRelativeTo(self, size, base)

      Sets the font size compared to the base font size.                  

      This is the same as :meth:`SetSymbolicSize`   except that it uses the given font size as the normal font size instead of the standard font size. 

                


      :param `size`: 
      :type `size`: wx.FontSymbolicSize
      :param `base`: 
      :type `base`: int






      .. versionadded:: 2.9.2 
     








   .. method:: SetUnderlined(self, underlined)

      Sets underlining.                  




      :param `underlined`: ``True`` to underline, ``False`` otherwise.  
      :type `underlined`: bool




                  



      .. seealso:: :meth:`GetUnderlined`     








   .. method:: SetWeight(self, weight)

      Sets the font weight.                  




      :param `weight`: One of the :ref:`wx.FontWeight`  values.  
      :type `weight`: wx.FontWeight




                  



      .. seealso:: :meth:`GetWeight`     








   .. method:: Smaller(self)

      Returns a smaller version of this font.                  

      The font size is divided by  ``1.2`` , the factor of   ``1.2``   being inspired by the ``W3C`` CSS specification. 

                

      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.1 
     







      .. seealso:: :meth:`MakeSmaller` , :meth:`Larger` , :meth:`Scaled`   








   .. method:: Strikethrough(self)

      Returns stricken-through version of this font.                  

      Currently stricken-through fonts are only supported in wxMSW, wxGTK, and wxOSX. 

                

      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.4 
     







      .. seealso:: :meth:`MakeStrikethrough`   








   .. method:: Underlined(self)

      Returns underlined version of this font.                  

                

      :rtype: :ref:`wx.Font`







      .. versionadded:: 2.9.2 
     







      .. seealso:: :meth:`MakeUnderlined`   








   .. method:: __bool__(self)



      :rtype: `int`








   .. method:: __nonzero__(self)



      :rtype: `int`








   .. method:: _copyFrom(self, other)

      For internal use only.  





   .. method:: __ne__(self)

      Inequality operator.                  

      See :ref:`reference-counted object comparison <reference-counted object comparison>`  for more info.                  


      :param `font`: 
      :type `font`: wx.Font







   .. method:: __eq__(self)

      Equality operator.                  

      See :ref:`reference-counted object comparison <reference-counted object comparison>`  for more info.                  


      :param `font`: 
      :type `font`: wx.Font







   .. attribute:: Encoding

      See :meth:`~wx.Font.GetEncoding` and :meth:`~wx.Font.SetEncoding`


   .. attribute:: FaceName

      See :meth:`~wx.Font.GetFaceName` and :meth:`~wx.Font.SetFaceName`


   .. attribute:: Family

      See :meth:`~wx.Font.GetFamily` and :meth:`~wx.Font.SetFamily`


   .. attribute:: NativeFontInfoDesc

      See :meth:`~wx.Font.GetNativeFontInfoDesc` and :meth:`~wx.Font.SetNativeFontInfo`


   .. attribute:: NativeFontInfoUserDesc

      See :meth:`~wx.Font.GetNativeFontInfoUserDesc` and :meth:`~wx.Font.SetNativeFontInfoUserDesc`


   .. attribute:: PixelSize

      See :meth:`~wx.Font.GetPixelSize` and :meth:`~wx.Font.SetPixelSize`


   .. attribute:: PointSize

      See :meth:`~wx.Font.GetPointSize` and :meth:`~wx.Font.SetPointSize`


   .. attribute:: Style

      See :meth:`~wx.Font.GetStyle` and :meth:`~wx.Font.SetStyle`


   .. attribute:: Weight

      See :meth:`~wx.Font.GetWeight` and :meth:`~wx.Font.SetWeight`

