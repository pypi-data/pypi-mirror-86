.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.aui.auibook

.. highlight:: python



.. _wx.lib.agw.aui.auibook.TabFrame:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.aui.auibook.TabFrame**
==========================================================================================================================================

TabFrame is an interesting case. It's important that all child pages
of the multi-notebook control are all actually children of that control
(and not grandchildren). TabFrame facilitates this. There is one
instance of TabFrame for each tab control inside the multi-notebook.

It's important to know that TabFrame is not a real window, but it merely
used to capture the dimensions/positioning of the internal tab control and
it's managed page windows.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>TabFrame</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.aui.auibook.TabFrame_inheritance.png" alt="Inheritance diagram of TabFrame" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.aui.auibook.TabFrame.html" title="wx.lib.agw.aui.auibook.TabFrame" alt="" coords="5,315,243,344"/> <area shape="rect" id="node2" href="wx.Window.html" title="wx.Window" alt="" coords="75,237,173,267"/> <area shape="rect" id="node3" href="wx.WindowBase.html" title="wx.WindowBase" alt="" coords="59,160,189,189"/> <area shape="rect" id="node4" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="65,83,183,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="21,5,107,35"/> <area shape="rect" id="node6" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="132,5,239,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.Window`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.aui.auibook.TabFrame.__init__`                                Default class constructor.
:meth:`~wx.lib.agw.aui.auibook.TabFrame.DoGetClientSize`                         Returns the window client size.
:meth:`~wx.lib.agw.aui.auibook.TabFrame.DoGetSize`                               Returns the window size.
:meth:`~wx.lib.agw.aui.auibook.TabFrame.DoSetSize`                               Sets the position and size of the window in pixels. The `flags`
:meth:`~wx.lib.agw.aui.auibook.TabFrame.DoSizing`                                Does the actual sizing of the tab control.
:meth:`~wx.lib.agw.aui.auibook.TabFrame.SetTabCtrlHeight`                        Sets the tab control height.
:meth:`~wx.lib.agw.aui.auibook.TabFrame.Show`                                    Shows/hides the window.
:meth:`~wx.lib.agw.aui.auibook.TabFrame.Update`                                  Calling this method immediately repaints the invalidated area of the window
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: TabFrame(wx.Window)

   TabFrame is an interesting case. It's important that all child pages
   of the multi-notebook control are all actually children of that control
   (and not grandchildren). TabFrame facilitates this. There is one
   instance of TabFrame for each tab control inside the multi-notebook.
   
   It's important to know that TabFrame is not a real window, but it merely
   used to capture the dimensions/positioning of the internal tab control and
   it's managed page windows.

   .. method:: __init__(self, parent)

      Default class constructor.
      Used internally, do not call it in your code!


   .. method:: DoGetClientSize(self)

      Returns the window client size.
      
      :note: Overridden from :class:`wx.Control`.


   .. method:: DoGetSize(self)

      Returns the window size.
      
      :note: Overridden from :class:`wx.Control`.


   .. method:: DoSetSize(self, x, y, width, height, flags=wx.SIZE_AUTO)

      Sets the position and size of the window in pixels. The `flags`
      parameter indicates the interpretation of the other params if they are
      equal to -1.
      
      :param integer `x`: the window `x` position;
      :param integer `y`: the window `y` position;
      :param integer `width`: the window width;
      :param integer `height`: the window height;
      :param integer `flags`: may have one of this bit set:
      
       ===================================  ======================================
       Size Flags                           Description
       ===================================  ======================================
       ``wx.SIZE_AUTO``                     A -1 indicates that a class-specific default should be used.
       ``wx.SIZE_AUTO_WIDTH``               A -1 indicates that a class-specific default should be used for the width.
       ``wx.SIZE_AUTO_HEIGHT``              A -1 indicates that a class-specific default should be used for the height.
       ``wx.SIZE_USE_EXISTING``             Existing dimensions should be used if -1 values are supplied.
       ``wx.SIZE_ALLOW_MINUS_ONE``          Allow dimensions of -1 and less to be interpreted as real dimensions, not default values.
       ``wx.SIZE_FORCE``                    Normally, if the position and the size of the window are already the same as the
                                            parameters of this function, nothing is done. but with this flag a window resize
                                            may be forced even in this case (supported in wx 2.6.2 and later and only implemented
                                            for MSW and ignored elsewhere currently)
       ===================================  ======================================
      
      :note: Overridden from :class:`wx.Control`.


   .. method:: DoSizing(self)

      Does the actual sizing of the tab control. 


   .. method:: SetTabCtrlHeight(self, h)

      Sets the tab control height.
      
      :param integer `h`: the tab area height.


   .. method:: Show(self, show=True)

      Shows/hides the window.
      
      :param bool `show`: ``True`` to show the window, ``False`` otherwise.
      
      :note:
      
       Overridden from :class:`wx.Control`, this method always returns ``False`` as
       :class:`TabFrame` should never be phisically shown on screen.


   .. method:: Update(self)

      Calling this method immediately repaints the invalidated area of the window
      and all of its children recursively while this would usually only happen when
      the flow of control returns to the event loop.
      
      :note: Notice that this function doesn't invalidate any area of the window so
       nothing happens if nothing has been invalidated (i.e. marked as requiring a redraw).
       Use `Refresh` first if you want to immediately redraw the window unconditionally.
      
      :note: Overridden from :class:`wx.Control`.


