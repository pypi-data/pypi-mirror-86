.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. module:: wx.lib.pubsub.py2and3

.. currentmodule:: wx.lib.pubsub.py2and3

.. highlight:: python



.. _wx.lib.pubsub.py2and3:

==========================================================================================================================================
|phoenix_title|  **wx.lib.pubsub.py2and3**
==========================================================================================================================================

Utilities for writing code that runs on Python 2 and 3


|function_summary| Functions Summary
====================================

================================================================================ ================================================================================
:func:`~wx.lib.pubsub.py2and3.add_metaclass`                                     Class decorator for creating a class with a metaclass.
:func:`~wx.lib.pubsub.py2and3.add_move`                                          Add an item to six.moves.
:func:`~wx.lib.pubsub.py2and3.b`                                                 Byte literal
:func:`~wx.lib.pubsub.py2and3.get_unbound_function`                              Get the function out of a possibly unbound function
:func:`~wx.lib.pubsub.py2and3.getexcobj`                                         
:func:`~wx.lib.pubsub.py2and3.isstring`                                          
:func:`~wx.lib.pubsub.py2and3.iteritems`                                         Return an iterator over the (key, value) pairs of a dictionary.
:func:`~wx.lib.pubsub.py2and3.iterkeys`                                          Return an iterator over the keys of a dictionary.
:func:`~wx.lib.pubsub.py2and3.iterlists`                                         Return an iterator over the (key, [values]) pairs of a dictionary.
:func:`~wx.lib.pubsub.py2and3.itervalues`                                        Return an iterator over the values of a dictionary.
:func:`~wx.lib.pubsub.py2and3.keys`                                              
:func:`~wx.lib.pubsub.py2and3.nextiter`                                          
:func:`~wx.lib.pubsub.py2and3.remove_move`                                       Remove item from six.moves.
:func:`~wx.lib.pubsub.py2and3.reraise`                                           Reraise an exception.
:func:`~wx.lib.pubsub.py2and3.u`                                                 Text literal
:func:`~wx.lib.pubsub.py2and3.values`                                            
:func:`~wx.lib.pubsub.py2and3.with_metaclass`                                    Create a base class with a metaclass.
================================================================================ ================================================================================


|


|class_summary| Classes Summary
===============================

================================================================================ ================================================================================
:ref:`~wx.lib.pubsub.py2and3._LazyDescr`                                         
:ref:`~wx.lib.pubsub.py2and3._MovedItems`                                        Lazy loading of moved objects
:ref:`~wx.lib.pubsub.py2and3.Module_six_moves_urllib`                            Create a six.moves.urllib namespace that resembles the Python 3 namespace
:ref:`~wx.lib.pubsub.py2and3.Module_six_moves_urllib_error`                      Lazy loading of moved objects in six.moves.urllib_error
:ref:`~wx.lib.pubsub.py2and3.Module_six_moves_urllib_parse`                      Lazy loading of moved objects in six.moves.urllib_parse
:ref:`~wx.lib.pubsub.py2and3.Module_six_moves_urllib_request`                    Lazy loading of moved objects in six.moves.urllib_request
:ref:`~wx.lib.pubsub.py2and3.Module_six_moves_urllib_response`                   Lazy loading of moved objects in six.moves.urllib_response
:ref:`~wx.lib.pubsub.py2and3.Module_six_moves_urllib_robotparser`                Lazy loading of moved objects in six.moves.urllib_robotparser
:ref:`~wx.lib.pubsub.py2and3.MovedAttribute`                                     
:ref:`~wx.lib.pubsub.py2and3.MovedModule`                                        
================================================================================ ================================================================================


|


.. toctree::
   :maxdepth: 1
   :hidden:

   wx.lib.pubsub.py2and3._LazyDescr
   wx.lib.pubsub.py2and3._MovedItems
   wx.lib.pubsub.py2and3.Module_six_moves_urllib
   wx.lib.pubsub.py2and3.Module_six_moves_urllib_error
   wx.lib.pubsub.py2and3.Module_six_moves_urllib_parse
   wx.lib.pubsub.py2and3.Module_six_moves_urllib_request
   wx.lib.pubsub.py2and3.Module_six_moves_urllib_response
   wx.lib.pubsub.py2and3.Module_six_moves_urllib_robotparser
   wx.lib.pubsub.py2and3.MovedAttribute
   wx.lib.pubsub.py2and3.MovedModule





Functions
------------

.. function:: add_metaclass(metaclass)

   Class decorator for creating a class with a metaclass.


.. function:: add_move(move)

   Add an item to six.moves.


.. function:: b(s)

   Byte literal


.. function:: get_unbound_function(unbound)

   Get the function out of a possibly unbound function


.. function:: getexcobj()


.. function:: isstring(obj)


.. function:: iteritems(d, \*\*kw)

   Return an iterator over the (key, value) pairs of a dictionary.


.. function:: iterkeys(d, \*\*kw)

   Return an iterator over the keys of a dictionary.


.. function:: iterlists(d, \*\*kw)

   Return an iterator over the (key, [values]) pairs of a dictionary.


.. function:: itervalues(d, \*\*kw)

   Return an iterator over the values of a dictionary.


.. function:: keys(dictObj)


.. function:: nextiter(container)


.. function:: remove_move(name)

   Remove item from six.moves.


.. function:: reraise(tp, value, tb=None)

   Reraise an exception.


.. function:: u(s)

   Text literal


.. function:: values(dictObj)


.. function:: with_metaclass(meta, \*bases)

   Create a base class with a metaclass.


