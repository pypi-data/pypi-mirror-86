.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.sized_controls

.. highlight:: python



.. _wx.lib.sized_controls.SizedParent:

==========================================================================================================================================
|phoenix_title|  **wx.lib.sized_controls.SizedParent**
==========================================================================================================================================

Mixin class for some methods used by the ``Sized*`` classes.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>SizedParent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.sized_controls.SizedParent_inheritance.png" alt="Inheritance diagram of SizedParent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.sized_controls.SizedParent.html" title="wx.lib.sized_controls.SizedParent" alt="" coords="5,5,244,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:class:`wx.lib.sized_controls.SizedPanel`, :class:`wx.lib.sized_controls.SizedScrolledPanel`, :class:`wx.lib.sized_controls.SizedStaticBox`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.sized_controls.SizedParent.AddChild`                              This extends the default wx.Window behavior to also add the child
:meth:`~wx.lib.sized_controls.SizedParent.GetSizerType`                          Return the sizer type.
:meth:`~wx.lib.sized_controls.SizedParent.SetSizerType`                          Sets the sizer type and automatically re-assign any children
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: SizedParent

   Mixin class for some methods used by the ``Sized*`` classes.

   .. method:: AddChild(self, child)

      This extends the default wx.Window behavior to also add the child
      to its parent's sizer, if one exists, and set default properties.
      When an entire UI layout is managed via Sizers, this helps reduce
      the amount of sizer boilerplate code that needs to be written.
      
      :param `child`: child (window or another sizer) to be added to sizer.
      :type `child`: :class:`wx.Window` or :class:`wx.Sizer`


   .. method:: GetSizerType(self)

      Return the sizer type.
      
      :rtype: `string`


   .. method:: SetSizerType(self, type, options={})

      Sets the sizer type and automatically re-assign any children
      to it.
      
      :param string `type`: sizer type, valid values are "horizontal", "vertical",
       "form", and "grid";
      :param dict `options`: dictionary of options depending on type.


