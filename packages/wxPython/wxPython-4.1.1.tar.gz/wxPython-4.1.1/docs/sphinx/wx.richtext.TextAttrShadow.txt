.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.richtext.TextAttrShadow:

==========================================================================================================================================
|phoenix_title|  **wx.richtext.TextAttrShadow**
==========================================================================================================================================

A class representing a shadow.          







         



.. seealso:: :ref:`wx.richtext.RichTextAttr`, :ref:`wx.richtext.RichTextCtrl`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>TextAttrShadow</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.richtext.TextAttrShadow_inheritance.png" alt="Inheritance diagram of TextAttrShadow" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.richtext.TextAttrShadow.html" title="wx.richtext.TextAttrShadow" alt="" coords="5,5,207,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.richtext.TextAttrShadow.__init__`                                     Default constructor.
:meth:`~wx.richtext.TextAttrShadow.AddFlag`                                      Adds a border flag.
:meth:`~wx.richtext.TextAttrShadow.Apply`                                        Applies the border to this object, but not if the same as `compareWith`.
:meth:`~wx.richtext.TextAttrShadow.CollectCommonAttributes`                      Collects the attributes that are common to a range of content, building up a note of which attributes are absent in some objects and which clash in some objects.
:meth:`~wx.richtext.TextAttrShadow.EqPartial`                                    Partial equality test.
:meth:`~wx.richtext.TextAttrShadow.GetBlurDistance`                              Gets the shadow blur distance.
:meth:`~wx.richtext.TextAttrShadow.GetColour`                                    Gets the colour.
:meth:`~wx.richtext.TextAttrShadow.GetColourLong`                                Gets the colour as a long.
:meth:`~wx.richtext.TextAttrShadow.GetFlags`                                     Returns the border flags.
:meth:`~wx.richtext.TextAttrShadow.GetOffsetX`                                   Gets the shadow horizontal offset.
:meth:`~wx.richtext.TextAttrShadow.GetOffsetY`                                   Gets the shadow vertical offset.
:meth:`~wx.richtext.TextAttrShadow.GetOpacity`                                   Gets the shadow opacity.
:meth:`~wx.richtext.TextAttrShadow.GetSpread`                                    Gets the shadow spread size.
:meth:`~wx.richtext.TextAttrShadow.HasColour`                                    True if the shadow has a valid colour.
:meth:`~wx.richtext.TextAttrShadow.IsDefault`                                    True if the shadow has no attributes set.
:meth:`~wx.richtext.TextAttrShadow.IsValid`                                      Returns ``True`` if the dimension is valid.
:meth:`~wx.richtext.TextAttrShadow.RemoveFlag`                                   Removes a border flag.
:meth:`~wx.richtext.TextAttrShadow.RemoveStyle`                                  Removes the specified attributes from this object.
:meth:`~wx.richtext.TextAttrShadow.Reset`                                        Resets the shadow.
:meth:`~wx.richtext.TextAttrShadow.SetBlurDistance`                              Sets the shadow blur distance.
:meth:`~wx.richtext.TextAttrShadow.SetColour`                                    Sets the shadow colour.
:meth:`~wx.richtext.TextAttrShadow.SetFlags`                                     Sets the border flags.
:meth:`~wx.richtext.TextAttrShadow.SetOffsetX`                                   Sets the shadow horizontal offset.
:meth:`~wx.richtext.TextAttrShadow.SetOffsetY`                                   Sets the shadow vertical offset.
:meth:`~wx.richtext.TextAttrShadow.SetOpacity`                                   Sets the shadow opacity.
:meth:`~wx.richtext.TextAttrShadow.SetSpread`                                    Sets the shadow spread size.
:meth:`~wx.richtext.TextAttrShadow.SetValid`                                     Sets the valid flag.
:meth:`~wx.richtext.TextAttrShadow.__eq__`                                       Equality operator.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.richtext.TextAttrShadow.BlurDistance`                                 See :meth:`~wx.richtext.TextAttrShadow.GetBlurDistance` and :meth:`~wx.richtext.TextAttrShadow.SetBlurDistance`
:attr:`~wx.richtext.TextAttrShadow.Colour`                                       See :meth:`~wx.richtext.TextAttrShadow.GetColour` and :meth:`~wx.richtext.TextAttrShadow.SetColour`
:attr:`~wx.richtext.TextAttrShadow.ColourLong`                                   See :meth:`~wx.richtext.TextAttrShadow.GetColourLong`
:attr:`~wx.richtext.TextAttrShadow.Flags`                                        See :meth:`~wx.richtext.TextAttrShadow.GetFlags` and :meth:`~wx.richtext.TextAttrShadow.SetFlags`
:attr:`~wx.richtext.TextAttrShadow.OffsetX`                                      See :meth:`~wx.richtext.TextAttrShadow.GetOffsetX` and :meth:`~wx.richtext.TextAttrShadow.SetOffsetX`
:attr:`~wx.richtext.TextAttrShadow.OffsetY`                                      See :meth:`~wx.richtext.TextAttrShadow.GetOffsetY` and :meth:`~wx.richtext.TextAttrShadow.SetOffsetY`
:attr:`~wx.richtext.TextAttrShadow.Opacity`                                      See :meth:`~wx.richtext.TextAttrShadow.GetOpacity` and :meth:`~wx.richtext.TextAttrShadow.SetOpacity`
:attr:`~wx.richtext.TextAttrShadow.Spread`                                       See :meth:`~wx.richtext.TextAttrShadow.GetSpread` and :meth:`~wx.richtext.TextAttrShadow.SetSpread`
:attr:`~wx.richtext.TextAttrShadow.m_blurDistance`                               A public C++ attribute of type :ref:`~wx.richtext.TextAttrDimension`.
:attr:`~wx.richtext.TextAttrShadow.m_flags`                                      A public C++ attribute of type ``int``.
:attr:`~wx.richtext.TextAttrShadow.m_offsetX`                                    A public C++ attribute of type :ref:`~wx.richtext.TextAttrDimension`.
:attr:`~wx.richtext.TextAttrShadow.m_offsetY`                                    A public C++ attribute of type :ref:`~wx.richtext.TextAttrDimension`.
:attr:`~wx.richtext.TextAttrShadow.m_opacity`                                    A public C++ attribute of type :ref:`~wx.richtext.TextAttrDimension`.
:attr:`~wx.richtext.TextAttrShadow.m_shadowColour`                               A public C++ attribute of type ``long``.
:attr:`~wx.richtext.TextAttrShadow.m_spread`                                     A public C++ attribute of type :ref:`~wx.richtext.TextAttrDimension`.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.richtext.TextAttrShadow(object)

   **Possible constructors**::

       TextAttrShadow()
       
   
   A class representing a shadow.



   .. method:: __init__(self)

      Default constructor.                   





   .. method:: AddFlag(self, flag)

      Adds a border flag.                  


      :param `flag`: 
      :type `flag`: int







   .. method:: Apply(self, shadow, compareWith=None)

      Applies the border to this object, but not if the same as `compareWith`.                  


      :param `shadow`: 
      :type `shadow`: wx.richtext.TextAttrShadow
      :param `compareWith`: 
      :type `compareWith`: wx.richtext.TextAttrShadow




      :rtype: `bool`








   .. method:: CollectCommonAttributes(self, attr, clashingAttr, absentAttr)

      Collects the attributes that are common to a range of content, building up a note of which attributes are absent in some objects and which clash in some objects.                  


      :param `attr`: 
      :type `attr`: wx.richtext.TextAttrShadow
      :param `clashingAttr`: 
      :type `clashingAttr`: wx.richtext.TextAttrShadow
      :param `absentAttr`: 
      :type `absentAttr`: wx.richtext.TextAttrShadow







   .. method:: EqPartial(self, shadow, weakTest=True)

      Partial equality test.                  

      If `weakTest`  is ``True``, attributes of this object do not have to be present if those attributes of `border`  are present. If `weakTest`  is ``False``, the function will fail if an attribute is present in `border`  but not in this object.                  


      :param `shadow`: 
      :type `shadow`: wx.richtext.TextAttrShadow
      :param `weakTest`: 
      :type `weakTest`: bool




      :rtype: `bool`








   .. method:: GetBlurDistance(self)

      Gets the shadow blur distance.                  

      :rtype: :ref:`wx.richtext.TextAttrDimension`








   .. method:: GetColour(self)

      Gets the colour.                  

      :rtype: :ref:`Colour`








   .. method:: GetColourLong(self)

      Gets the colour as a long.                  

      :rtype: `int`








   .. method:: GetFlags(self)

      Returns the border flags.                  

      :rtype: `int`








   .. method:: GetOffsetX(self)

      Gets the shadow horizontal offset.                  

      :rtype: :ref:`wx.richtext.TextAttrDimension`








   .. method:: GetOffsetY(self)

      Gets the shadow vertical offset.                  

      :rtype: :ref:`wx.richtext.TextAttrDimension`








   .. method:: GetOpacity(self)

      Gets the shadow opacity.                  

      :rtype: :ref:`wx.richtext.TextAttrDimension`








   .. method:: GetSpread(self)

      Gets the shadow spread size.                  

      :rtype: :ref:`wx.richtext.TextAttrDimension`








   .. method:: HasColour(self)

      True if the shadow has a valid colour.                  

      :rtype: `bool`








   .. method:: IsDefault(self)

      True if the shadow has no attributes set.                  

      :rtype: `bool`








   .. method:: IsValid(self)

      Returns ``True`` if the dimension is valid.                  

      :rtype: `bool`








   .. method:: RemoveFlag(self, flag)

      Removes a border flag.                  


      :param `flag`: 
      :type `flag`: int







   .. method:: RemoveStyle(self, attr)

      Removes the specified attributes from this object.                  


      :param `attr`: 
      :type `attr`: wx.richtext.TextAttrShadow




      :rtype: `bool`








   .. method:: Reset(self)

      Resets the shadow.                   





   .. method:: SetBlurDistance(self, blur)

      Sets the shadow blur distance.                  


      :param `blur`: 
      :type `blur`: wx.richtext.TextAttrDimension







   .. method:: SetColour(self, *args, **kw)

      Sets the shadow colour.                   


      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetColour** `(self, colour)`
      
      
      
      
      :param `colour`: 
      :type `colour`: long
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetColour** `(self, colour)`
      
      
      
      
      :param `colour`: 
      :type `colour`: wx.Colour
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetFlags(self, flags)

      Sets the border flags.                  


      :param `flags`: 
      :type `flags`: int







   .. method:: SetOffsetX(self, offset)

      Sets the shadow horizontal offset.                  


      :param `offset`: 
      :type `offset`: wx.richtext.TextAttrDimension







   .. method:: SetOffsetY(self, offset)

      Sets the shadow vertical offset.                  


      :param `offset`: 
      :type `offset`: wx.richtext.TextAttrDimension







   .. method:: SetOpacity(self, opacity)

      Sets the shadow opacity.                  


      :param `opacity`: 
      :type `opacity`: wx.richtext.TextAttrDimension







   .. method:: SetSpread(self, spread)

      Sets the shadow spread size.                  


      :param `spread`: 
      :type `spread`: wx.richtext.TextAttrDimension







   .. method:: SetValid(self, b)

      Sets the valid flag.                  


      :param `b`: 
      :type `b`: bool







   .. method:: __eq__(self)

      Equality operator.                  


      :param `shadow`: 
      :type `shadow`: wx.richtext.TextAttrShadow







   .. attribute:: BlurDistance

      See :meth:`~wx.richtext.TextAttrShadow.GetBlurDistance` and :meth:`~wx.richtext.TextAttrShadow.SetBlurDistance`


   .. attribute:: Colour

      See :meth:`~wx.richtext.TextAttrShadow.GetColour` and :meth:`~wx.richtext.TextAttrShadow.SetColour`


   .. attribute:: ColourLong

      See :meth:`~wx.richtext.TextAttrShadow.GetColourLong`


   .. attribute:: Flags

      See :meth:`~wx.richtext.TextAttrShadow.GetFlags` and :meth:`~wx.richtext.TextAttrShadow.SetFlags`


   .. attribute:: OffsetX

      See :meth:`~wx.richtext.TextAttrShadow.GetOffsetX` and :meth:`~wx.richtext.TextAttrShadow.SetOffsetX`


   .. attribute:: OffsetY

      See :meth:`~wx.richtext.TextAttrShadow.GetOffsetY` and :meth:`~wx.richtext.TextAttrShadow.SetOffsetY`


   .. attribute:: Opacity

      See :meth:`~wx.richtext.TextAttrShadow.GetOpacity` and :meth:`~wx.richtext.TextAttrShadow.SetOpacity`


   .. attribute:: Spread

      See :meth:`~wx.richtext.TextAttrShadow.GetSpread` and :meth:`~wx.richtext.TextAttrShadow.SetSpread`


   .. attribute:: m_blurDistance

      A public C++ attribute of type :ref:`~wx.richtext.TextAttrDimension`.


   .. attribute:: m_flags

      A public C++ attribute of type ``int``.


   .. attribute:: m_offsetX

      A public C++ attribute of type :ref:`~wx.richtext.TextAttrDimension`.


   .. attribute:: m_offsetY

      A public C++ attribute of type :ref:`~wx.richtext.TextAttrDimension`.


   .. attribute:: m_opacity

      A public C++ attribute of type :ref:`~wx.richtext.TextAttrDimension`.


   .. attribute:: m_shadowColour

      A public C++ attribute of type ``long``.


   .. attribute:: m_spread

      A public C++ attribute of type :ref:`~wx.richtext.TextAttrDimension`.

