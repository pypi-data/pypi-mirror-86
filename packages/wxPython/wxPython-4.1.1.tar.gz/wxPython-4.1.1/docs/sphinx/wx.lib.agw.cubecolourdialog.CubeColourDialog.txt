.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.cubecolourdialog

.. highlight:: python



.. _wx.lib.agw.cubecolourdialog.CubeColourDialog:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.cubecolourdialog.CubeColourDialog**
==========================================================================================================================================

This is the CubeColourDialog main class implementation.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>CubeColourDialog</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.cubecolourdialog.CubeColourDialog_inheritance.png" alt="Inheritance diagram of CubeColourDialog" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.cubecolourdialog.CubeColourDialog.html" title="wx.lib.agw.cubecolourdialog.CubeColourDialog" alt="" coords="5,547,332,576"/> <area shape="rect" id="node2" href="wx.Dialog.html" title="wx.Dialog" alt="" coords="125,469,212,499"/> <area shape="rect" id="node3" href="wx.TopLevelWindow.html" title="wx.TopLevelWindow" alt="" coords="91,392,246,421"/> <area shape="rect" id="node4" href="wx.NonOwnedWindow.html" title="wx.NonOwnedWindow" alt="" coords="85,315,253,344"/> <area shape="rect" id="node5" href="wx.Window.html" title="wx.Window" alt="" coords="120,237,217,267"/> <area shape="rect" id="node6" href="wx.WindowBase.html" title="wx.WindowBase" alt="" coords="104,160,233,189"/> <area shape="rect" id="node7" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="110,83,227,112"/> <area shape="rect" id="node8" href="wx.Object.html" title="wx.Object" alt="" coords="65,5,152,35"/> <area shape="rect" id="node9" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="177,5,283,35"/> </map> 
   </p>
   </div>

|


|appearance| Control Appearance
===============================

|

.. figure:: _static/images/widgets/fullsize/wxmsw/wx.lib.agw.cubecolourdialog.cubecolourdialog.png
   :alt: wxMSW
   :figclass: floatleft

   **wxMSW**


.. figure:: _static/images/widgets/fullsize/wxmac/../no_appearance.png
   :alt: wxMAC
   :figclass: floatright

   **wxMAC**


.. figure:: _static/images/widgets/fullsize/wxgtk/wx.lib.agw.cubecolourdialog.cubecolourdialog.png
   :alt: wxGTK
   :figclass: floatcenter

   **wxGTK**


|




|super_classes| Known Superclasses
==================================

:class:`wx.Dialog`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.__init__`                   Default class constructor.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.AssignColourValue`          Common code to handle spin control changes.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.CalcCuboid`                 Calculates the RGB colour cube vertices.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.CalcRects`                  Calculates the brightness control user-selected rect.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.CalcSlopes`                 Calculates the line slopes in the RGB colour cube.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.DoLayout`                   Layouts all the controls in the :class:`CubeColourDialog`.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.DrawAll`                    Draws all the custom controls after a colour change.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.DrawAlpha`                  Refreshes the alpha channel control.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.DrawBright`                 Refreshes the brightness control.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.DrawHSB`                    Refreshes the HSB colour wheel.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.DrawMarkers`                Draws the markers for all the controls.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.DrawRGB`                    Refreshes the RGB colour cube.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.GetAGWWindowStyleFlag`      Returns the :class:`CubeColourDialog` window style flags.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.GetColourData`              Returns a wxPython compatible :class:`wx.ColourData`.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.GetHSVAColour`              Returns a 4-elements tuple of hue, saturation, brightness, alpha components.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.GetRGBAColour`              Returns a 4-elements tuple of red, green, blue, alpha components.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.InitDialog`                 Initialize the :class:`CubeColourDialog`.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.OnAddCustom`                Handles the Add Custom ``wx.EVT_BUTTON`` event for :class:`CubeColourDialog`.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.OnAlphaSpin`                Handles the ``wx.EVT_SPINCTRL`` event for the alpha channel.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.OnCancel`                   Handles the Cancel ``wx.EVT_BUTTON`` event for :class:`CubeColourDialog`.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.OnCloseWindow`              Handles the ``wx.EVT_CLOSE`` event for :class:`CubeColourDialog`.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.OnKeyUp`                    Handles the ``wx.EVT_CHAR_HOOK`` event for :class:`CubeColourDialog`.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.OnOk`                       Handles the Ok ``wx.EVT_BUTTON`` event for :class:`CubeColourDialog`.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.OnShowAlpha`                Shows/hides the alpha channel control in :class:`CubeColourDialog`.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.OnSpinCtrl`                 Handles the ``wx.EVT_SPINCTRL`` event for RGB and HSB colours.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.SetAGWWindowStyleFlag`      Sets the :class:`CubeColourDialog` window style flags.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.SetCodes`                   Sets the HTML/MS Access codes (if any) in the text controls.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.SetPanelColours`            Assigns colours to the colour panels.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.SetProperties`              Sets some initial properties for :class:`CubeColourDialog` (sizes, values).
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.SetSpinVals`                Sets the values for all the spin controls.
:meth:`~wx.lib.agw.cubecolourdialog.CubeColourDialog.ShowModal`                  Shows :class:`CubeColourDialog` as a modal dialog. Program flow does
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: CubeColourDialog(wx.Dialog)

   This is the CubeColourDialog main class implementation.

   .. method:: __init__(self, parent, colourData=None, agwStyle=CCD_SHOW_ALPHA)

      Default class constructor.
      
      :param `colourData`: a standard :class:`wx.ColourData` (as used in :class:`wx.ColourDialog`);
      :param `agwStyle`: can be either ``None`` or ``CCD_SHOW_ALPHA``, depending if you want
       to hide the alpha channel control or not.


   .. method:: AssignColourValue(self, attribute, colourVal, maxVal, position)

      Common code to handle spin control changes. 


   .. method:: CalcCuboid(self)

      Calculates the RGB colour cube vertices. 


   .. method:: CalcRects(self)

      Calculates the brightness control user-selected rect. 


   .. method:: CalcSlopes(self)

      Calculates the line slopes in the RGB colour cube. 


   .. method:: DoLayout(self)

      Layouts all the controls in the :class:`CubeColourDialog`. 


   .. method:: DrawAll(self)

      Draws all the custom controls after a colour change. 


   .. method:: DrawAlpha(self)

      Refreshes the alpha channel control. 


   .. method:: DrawBright(self)

      Refreshes the brightness control. 


   .. method:: DrawHSB(self)

      Refreshes the HSB colour wheel. 


   .. method:: DrawMarkers(self, dc=None)

      Draws the markers for all the controls.
      
      :param `dc`: an instance of :class:`wx.DC`. If `dc` is ``None``, a :class:`ClientDC` is
       created on the fly.


   .. method:: DrawRGB(self)

      Refreshes the RGB colour cube. 


   .. method:: GetAGWWindowStyleFlag(self)

      Returns the :class:`CubeColourDialog` window style flags.
      
      :see: :meth:`~CubeColourDialog.SetAGWWindowStyleFlag` for a list of possible flags.


   .. method:: GetColourData(self)

      Returns a wxPython compatible :class:`wx.ColourData`. 


   .. method:: GetHSVAColour(self)

      Returns a 4-elements tuple of hue, saturation, brightness, alpha components. 


   .. method:: GetRGBAColour(self)

      Returns a 4-elements tuple of red, green, blue, alpha components. 


   .. method:: InitDialog(self)

      Initialize the :class:`CubeColourDialog`. 


   .. method:: OnAddCustom(self, event)

      Handles the Add Custom ``wx.EVT_BUTTON`` event for :class:`CubeColourDialog`.
      
      :param `event`: a :class:`CommandEvent` event to be processed.


   .. method:: OnAlphaSpin(self, event)

      Handles the ``wx.EVT_SPINCTRL`` event for the alpha channel.
      
      :param `event`: a :class:`SpinEvent` event to be processed.


   .. method:: OnCancel(self, event)

      Handles the Cancel ``wx.EVT_BUTTON`` event for :class:`CubeColourDialog`.
      
      :param `event`: a :class:`CommandEvent` event to be processed.


   .. method:: OnCloseWindow(self, event)

      Handles the ``wx.EVT_CLOSE`` event for :class:`CubeColourDialog`.
      
      :param `event`: a :class:`CloseEvent` event to be processed.


   .. method:: OnKeyUp(self, event)

      Handles the ``wx.EVT_CHAR_HOOK`` event for :class:`CubeColourDialog`.
      
      :param `event`: a :class:`KeyEvent` event to be processed.


   .. method:: OnOk(self, event)

      Handles the Ok ``wx.EVT_BUTTON`` event for :class:`CubeColourDialog`.
      
      :param `event`: a :class:`CommandEvent` event to be processed.


   .. method:: OnShowAlpha(self, event)

      Shows/hides the alpha channel control in :class:`CubeColourDialog`.
      
      :param `event`: a :class:`CommandEvent` event to be processed.


   .. method:: OnSpinCtrl(self, event)

      Handles the ``wx.EVT_SPINCTRL`` event for RGB and HSB colours.
      
      :param `event`: a :class:`SpinEvent` event to be processed.


   .. method:: SetAGWWindowStyleFlag(self, agwStyle)

      Sets the :class:`CubeColourDialog` window style flags.
      
      :param `agwStyle`: can only be ``CCD_SHOW_ALPHA`` or ``None``.


   .. method:: SetCodes(self)

      Sets the HTML/MS Access codes (if any) in the text controls. 


   .. method:: SetPanelColours(self)

      Assigns colours to the colour panels. 


   .. method:: SetProperties(self)

      Sets some initial properties for :class:`CubeColourDialog` (sizes, values). 


   .. method:: SetSpinVals(self)

      Sets the values for all the spin controls. 


   .. method:: ShowModal(self)

      Shows :class:`CubeColourDialog` as a modal dialog. Program flow does
      not return until the dialog has been dismissed with `EndModal`.
      
      :note: Overridden from :class:`Dialog`.


