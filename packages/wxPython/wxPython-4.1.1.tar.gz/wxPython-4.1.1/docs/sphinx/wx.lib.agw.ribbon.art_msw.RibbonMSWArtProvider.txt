.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.ribbon.art_msw

.. highlight:: python



.. _wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider**
==========================================================================================================================================





|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>RibbonMSWArtProvider</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider_inheritance.png" alt="Inheritance diagram of RibbonMSWArtProvider" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.html" title="wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider" alt="" coords="5,5,353,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:class:`wx.lib.agw.ribbon.art_aui.RibbonAUIArtProvider`

|


|method_summary| Methods Summary
================================

===================================================================================== ================================================================================
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.__init__`                      Initialize self.  See help(type(self)) for accurate signature.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.Clone`                         Create a new art provider which is a clone of this one.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.CloneTo`                       
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawButtonBarBackground`       Draw the background for a :class:`~wx.lib.agw.ribbon.buttonbar.RibbonButtonBar` control.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawButtonBarButton`           Draw a single button for a :class:`~wx.lib.agw.ribbon.buttonbar.RibbonButtonBar` control.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawButtonBarButtonForeground` 
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawDropdownArrow`             
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawGalleryBackground`         Draw the background and chrome for a :class:`~wx.lib.agw.ribbon.gallery.RibbonGallery` control.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawGalleryBackgroundCommon`   
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawGalleryButton`             
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawGalleryItemBackground`     Draw the background of a single item in a :class:`~wx.lib.agw.ribbon.gallery.RibbonGallery` control.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawMinimisedPanel`            Draw a minimised ribbon panel.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawMinimisedPanelCommon`      
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawPageBackground`            Draw the background of a ribbon page.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawPanelBackground`           Draw the background and chrome for a ribbon panel.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawPanelBorder`               
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawPartialPageBackground`     
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawPartialPageBackground1`    
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawPartialPageBackground2`    
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawScrollButton`              Draw a ribbon-style scroll button.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawTab`                       Draw a single tab in the tab region of a ribbon bar.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawTabCtrlBackground`         Draw the background of the tab region of a ribbon bar.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawTabSeparator`              Draw a separator between two tabs in a ribbon bar.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawTool`                      Draw a single tool (for a :class:`~wx.lib.agw.ribbon.toolbar.RibbonToolBar` control).
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawToolBarBackground`         Draw the background for a :class:`~wx.lib.agw.ribbon.toolbar.RibbonToolBar` control.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.DrawToolGroupBackground`       Draw the background for a group of tools on a :class:`~wx.lib.agw.ribbon.toolbar.RibbonToolBar` control.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetBarTabWidth`                Calculate the ideal and minimum width (in pixels) of a tab in a ribbon bar.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetButtonBarButtonSize`        Calculate the size of a button within a :class:`~wx.lib.agw.ribbon.buttonbar.RibbonButtonBar`.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetColour`                     Get the value of a certain colour setting.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetColourScheme`               Get the current colour scheme.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetFlags`                      Get the previously set style flags.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetFont`                       Get the value of a certain font setting.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetGalleryClientSize`          Calculate the client size of a :class:`~wx.lib.agw.ribbon.gallery.RibbonGallery` control for a given size.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetGallerySize`                Calculate the size of a :class:`~wx.lib.agw.ribbon.gallery.RibbonGallery` control for a given client size.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetMetric`                     Get the value of a certain integer setting.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetMinimisedPanelMinimumSize`  Calculate the size of a minimised ribbon panel.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetPageBackgroundRedrawArea`   Calculate the portion of a page background which needs to be redrawn when a page
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetPanelClientSize`            Calculate the client size of a panel for a given overall size.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetPanelExtButtonArea`         Retrieve the extension button area rectangle.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetPanelSize`                  Calculate the size of a panel for a given client size.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetScrollButtonMinimumSize`    Calculate the minimum size (in pixels) of a scroll button.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetTabCtrlHeight`              Calculate the height (in pixels) of the tab region of a ribbon bar.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.GetToolSize`                   Calculate the size of a tool within a :class:`~wx.lib.agw.ribbon.toolbar.RibbonToolBar`.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.ReallyDrawTabSeparator`        
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.Reload`                        
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.RemovePanelPadding`            
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.SetColour`                     Set the value of a certain colour setting to the value.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.SetColourScheme`               Set all applicable colour settings from a few base colours.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.SetFlags`                      Set the style flags.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.SetFont`                       Set the value of a certain font setting to the value.
:meth:`~wx.lib.agw.ribbon.art_msw.RibbonMSWArtProvider.SetMetric`                     Set the value of a certain integer setting to the value.
===================================================================================== ================================================================================


|


|api| Class API
===============


.. class:: RibbonMSWArtProvider(object)



   .. method:: __init__(self, set_colour_scheme=True)

      Initialize self.  See help(type(self)) for accurate signature.


   .. method:: Clone(self)

      Create a new art provider which is a clone of this one.


   .. method:: CloneTo(self, copy)


   .. method:: DrawButtonBarBackground(self, dc, wnd, rect)

      Draw the background for a :class:`~wx.lib.agw.ribbon.buttonbar.RibbonButtonBar` control.
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The window which is being drawn onto (which will typically be
       the button bar itself, though this is not guaranteed);
      :param `rect`: The rectangle within which to draw.


   .. method:: DrawButtonBarButton(self, dc, wnd, rect, kind, state, label, bitmap_large, bitmap_small)

      Draw a single button for a :class:`~wx.lib.agw.ribbon.buttonbar.RibbonButtonBar` control.
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The window which is being drawn onto;
      :param `rect`: The rectangle within which to draw. The size of this rectangle
       will be a size previously returned by :meth:`~RibbonMSWArtProvider.GetButtonBarButtonSize`, and the
       rectangle will be entirely within a rectangle on the same device context
       previously painted with :meth:`~RibbonMSWArtProvider.DrawButtonBarBackground`;
      :param `kind`: The kind of button to draw (normal, dropdown or hybrid);
      :param `state`: Combination of a size flag and state flags from the
       `RibbonButtonBarButtonState` enumeration;
      :param `label`: The label of the button;
      :param `bitmap_large`: The large bitmap of the button (or the large disabled
       bitmap when ``RIBBON_BUTTONBAR_BUTTON_DISABLED`` is set in `state`);
      :param `bitmap_small`: The small bitmap of the button (or the small disabled
       bitmap when ``RIBBON_BUTTONBAR_BUTTON_DISABLED`` is set in `state`).


   .. method:: DrawButtonBarButtonForeground(self, dc, rect, kind, state, label, bitmap_large, bitmap_small)


   .. method:: DrawDropdownArrow(self, dc, x, y, colour)


   .. method:: DrawGalleryBackground(self, dc, wnd, rect)

      Draw the background and chrome for a :class:`~wx.lib.agw.ribbon.gallery.RibbonGallery` control.
      
      This should draw the border, brackground, scroll buttons, extension button, and
      any other UI elements which are not attached to a specific gallery item.
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The window which is being drawn onto, which is always the gallery
       whose background and chrome is being drawn. Attributes used during drawing like
       the gallery hover state and individual button states can be queried from this
       parameter by :meth:`RibbonGallery.IsHovered() <lib.agw.ribbon.gallery.RibbonGallery.IsHovered>`,
       :meth:`RibbonGallery.GetExtensionButtonState() <lib.agw.ribbon.gallery.RibbonGallery.GetExtensionButtonState>`,
       :meth:`RibbonGallery.GetUpButtonState() <lib.agw.ribbon.gallery.RibbonGallery.GetUpButtonState>`, and
       :meth:`RibbonGallery.GetDownButtonState() <lib.agw.ribbon.gallery.RibbonGallery.GetDownButtonState>`;
      :param `rect`: The rectangle within which to draw. This rectangle is the entire
       area of the gallery control, not just the client rectangle.


   .. method:: DrawGalleryBackgroundCommon(self, dc, wnd, rect)


   .. method:: DrawGalleryButton(self, dc, rect, state, bitmaps)


   .. method:: DrawGalleryItemBackground(self, dc, wnd, rect, item)

      Draw the background of a single item in a :class:`~wx.lib.agw.ribbon.gallery.RibbonGallery` control.
      
      This is painted on top of a gallery background, and behind the items bitmap.
      Unlike :meth:`~RibbonMSWArtProvider.DrawButtonBarButton` and :meth:`~RibbonMSWArtProvider.DrawTool`, it is not expected to draw the
      item bitmap - that is done by the gallery control itself.
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The window which is being drawn onto, which is always the gallery
       which contains the item being drawn;
      :param `rect`: The rectangle within which to draw. The size of this rectangle
       will be the size of the item's bitmap, expanded by gallery item padding values
       (``RIBBON_ART_GALLERY_BITMAP_PADDING_LEFT_SIZE``, ``RIBBON_ART_GALLERY_BITMAP_PADDING_RIGHT_SIZE``,
       ``RIBBON_ART_GALLERY_BITMAP_PADDING_TOP_SIZE``, and ``RIBBON_ART_GALLERY_BITMAP_PADDING_BOTTOM_SIZE``).
       The drawing rectangle will be entirely within a rectangle on the same device
       context previously painted with :meth:`~RibbonMSWArtProvider.DrawGalleryBackground`;
      :param `item`: The item whose background is being painted. Typically the background
       will vary if the item is hovered, active, or selected; :meth:`RibbonGallery.GetSelection() <lib.agw.ribbon.gallery.RibbonGallery.GetSelection>`,
       :meth:`RibbonGallery.GetActiveItem() <lib.agw.ribbon.gallery.RibbonGallery.GetActiveItem>`, and
       :meth:`RibbonGallery.GetHoveredItem() <lib.agw.ribbon.gallery.RibbonGallery.GetHoveredItem>` can be
       called to test if the given item is in one of these states.


   .. method:: DrawMinimisedPanel(self, dc, wnd, rect, bitmap)

      Draw a minimised ribbon panel.
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The window which is being drawn onto, which is always the panel
       which is minimised. The panel label can be obtained from this window. The
       minimised icon obtained from querying the window may not be the size requested
       by :meth:`~RibbonMSWArtProvider.GetMinimisedPanelMinimumSize` - the argument contains the icon in the
       requested size;
      :param `rect`: The rectangle within which to draw. The size of the rectangle
       will be at least the size returned by :meth:`~RibbonMSWArtProvider.GetMinimisedPanelMinimumSize`;
      :param `bitmap`: A copy of the panel's minimised bitmap rescaled to the size
       returned by :meth:`~RibbonMSWArtProvider.GetMinimisedPanelMinimumSize`.


   .. method:: DrawMinimisedPanelCommon(self, dc, wnd, true_rect)


   .. method:: DrawPageBackground(self, dc, wnd, rect)

      Draw the background of a ribbon page.
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The window which is being drawn onto (which is commonly the
       :class:`~wx.lib.agw.ribbon.page.RibbonPage` whose background is being drawn, but doesn't have to be);
      :param `rect`: The rectangle within which to draw.
      
      :see: :meth:`~RibbonMSWArtProvider.GetPageBackgroundRedrawArea`


   .. method:: DrawPanelBackground(self, dc, wnd, rect)

      Draw the background and chrome for a ribbon panel.
      
      This should draw the border, background, label, and any other items of a panel
      which are outside the client area of a panel. Note that when a panel is
      minimised, this function is not called - only :meth:`~RibbonMSWArtProvider.DrawMinimisedPanel` is called,
      so a background should be explicitly painted by that if required.
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The window which is being drawn onto, which is always the panel
       whose background and chrome is being drawn. The panel label and other panel
       attributes can be obtained by querying this;
      :param `rect`: The rectangle within which to draw.


   .. method:: DrawPanelBorder(self, dc, rect, primary_colour, secondary_colour)


   .. method:: DrawPartialPageBackground(self, dc, wnd, rect, allow_hovered_or_page=True, offset=None, hovered=False)


   .. method:: DrawPartialPageBackground1(self, dc, wnd, rect, page, offset, hovered=False)


   .. method:: DrawPartialPageBackground2(self, dc, wnd, rect, allow_hovered=True)


   .. method:: DrawScrollButton(self, dc, wnd, rect_, style)

      Draw a ribbon-style scroll button.
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The window which is being drawn onto;
      :param `rect`: The rectangle within which to draw. The size of this rectangle
       will be at least the size returned by :meth:`~RibbonMSWArtProvider.GetScrollButtonMinimumSize` for a
       scroll button with the same style. For tab scroll buttons, this rectangle
       will be entirely within a rectangle on the same device context previously
       painted with :meth:`~RibbonMSWArtProvider.DrawTabCtrlBackground`, but this is not guaranteed for other
       types of button (for example, page scroll buttons will not be painted on an
       area previously painted with :meth:`~RibbonMSWArtProvider.DrawPageBackground` );
      :param `style`: A combination of flags from `RibbonScrollButtonStyle`,
       including a direction, a for flag, and one or more states.


   .. method:: DrawTab(self, dc, wnd, tab)

      Draw a single tab in the tab region of a ribbon bar.
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The window which is being drawn onto (not the :class:`~wx.lib.agw.ribbon.page.RibbonPage` associated
       with the tab being drawn);
      :param `tab`: The rectangle within which to draw, and also the tab label, icon, and
       state (active and/or hovered). The drawing rectangle will be entirely within a
       rectangle on the same device context previously painted with :meth:`~RibbonMSWArtProvider.DrawTabCtrlBackground`.
       The rectangle's width will be at least the minimum value returned by :meth:`~RibbonMSWArtProvider.GetBarTabWidth`,
       and height will be the value returned by :meth:`~RibbonMSWArtProvider.GetTabCtrlHeight`.


   .. method:: DrawTabCtrlBackground(self, dc, wnd, rect)

      Draw the background of the tab region of a ribbon bar.
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The window which is being drawn onto;
      :param `rect`: The rectangle within which to draw.


   .. method:: DrawTabSeparator(self, dc, wnd, rect, visibility)

      Draw a separator between two tabs in a ribbon bar.
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The window which is being drawn onto;
      :param `rect`: The rectangle within which to draw, which will be entirely
       within a rectangle on the same device context previously painted with
       :meth:`~RibbonMSWArtProvider.DrawTabCtrlBackground`;
      :param `visibility`: The opacity with which to draw the separator. Values
       are in the range [0, 1], with 0 being totally transparent, and 1 being totally
       opaque.


   .. method:: DrawTool(self, dc, wnd, rect, bitmap, kind, state)

      Draw a single tool (for a :class:`~wx.lib.agw.ribbon.toolbar.RibbonToolBar` control).
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The window which is being drawn onto. In most cases this will
       be a :class:`~wx.lib.agw.ribbon.toolbar.RibbonToolBar`, but it doesn't have to be;
      :param `rect`: The rectangle within which to draw. The size of this rectangle
       will at least the size returned by :meth:`~RibbonMSWArtProvider.GetToolSize`, and the height of it will
       be equal for all tools within the same group. The rectangle will be entirely
       within a rectangle on the same device context previously painted with
       :meth:`~RibbonMSWArtProvider.DrawToolGroupBackground`;
      :param `bitmap`: The bitmap to use as the tool's foreground. If the tool is a
       hybrid or dropdown tool, then the foreground should also contain a standard
       dropdown button;
      :param `kind`: The kind of tool to draw (normal, dropdown, or hybrid);
      :param `state`: A combination of `RibbonToolBarToolState` flags giving the
       state of the tool and it's relative position within a tool group.


   .. method:: DrawToolBarBackground(self, dc, wnd, rect)

      Draw the background for a :class:`~wx.lib.agw.ribbon.toolbar.RibbonToolBar` control.
      
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The which is being drawn onto. In most cases this will be a
       :class:`~wx.lib.agw.ribbon.toolbar.RibbonToolBar`, but it doesn't have to be;
      :param `rect`: The rectangle within which to draw. Some of this rectangle
       will later be drawn over using :meth:`~RibbonMSWArtProvider.DrawToolGroupBackground` and :meth:`~RibbonMSWArtProvider.DrawTool`,
       but not all of it will (unless there is only a single group of tools).


   .. method:: DrawToolGroupBackground(self, dc, wnd, rect)

      Draw the background for a group of tools on a :class:`~wx.lib.agw.ribbon.toolbar.RibbonToolBar` control.
      
      :param `dc`: The device context to draw onto;
      :param `wnd`: The window which is being drawn onto. In most cases this will
       be a :class:`~wx.lib.agw.ribbon.toolbar.RibbonToolBar`, but it doesn't have to be;
      :param `rect`: The rectangle within which to draw. This rectangle is a union
       of the individual tools' rectangles. As there are no gaps between tools,
       this rectangle will be painted over exactly once by calls to :meth:`~RibbonMSWArtProvider.DrawTool`.
       The group background could therefore be painted by :meth:`~RibbonMSWArtProvider.DrawTool`, though it
       can be conceptually easier and more efficient to draw it all at once here.
       The rectangle will be entirely within a rectangle on the same device context
       previously painted with :meth:`~RibbonMSWArtProvider.DrawToolBarBackground`.


   .. method:: GetBarTabWidth(self, dc, wnd, label, bitmap, ideal=None, small_begin_need_separator=None, small_must_have_separator=None, minimum=None)

      Calculate the ideal and minimum width (in pixels) of a tab in a ribbon bar.
      
      :param `dc`: A device context to use when one is required for size calculations;
      :param `wnd`: The window onto which the tab will eventually be drawn;
      :param `label`: The tab's label (or "" if it has none);
      :param `bitmap`: The tab's icon (or :class:`NullBitmap` if it has none);
      :param `ideal`: The ideal width (in pixels) of the tab;
      :param `small_begin_need_separator`: A size less than the size, at which a
       tab separator should begin to be drawn (i.e. drawn, but still fairly transparent);
      :param `small_must_have_separator`: A size less than the size, at which a
       tab separator must be drawn (i.e. drawn at full opacity);
      :param `minimum`: A size less than the size, and greater than or equal to
       zero, which is the minimum pixel width for the tab.


   .. method:: GetButtonBarButtonSize(self, dc, wnd, kind, size, label, bitmap_size_large, bitmap_size_small, button_size=None, normal_region=None, dropdown_region=None)

      Calculate the size of a button within a :class:`~wx.lib.agw.ribbon.buttonbar.RibbonButtonBar`.
      
      :param `dc`: A device context to use when one is required for size calculations;
      :param `wnd`: The window onto which the button will eventually be drawn
       (which is normally a :class:`~wx.lib.agw.ribbon.buttonbar.RibbonButtonBar`, though this is not guaranteed);
      :param `kind`: The kind of button;
      :param `size`: The size-class to calculate the size for. Buttons on a button
       bar can have three distinct sizes: ``RIBBON_BUTTONBAR_BUTTON_SMALL``,
       ``RIBBON_BUTTONBAR_BUTTON_MEDIUM``, and ``RIBBON_BUTTONBAR_BUTTON_LARGE``.
       If the requested size-class is not applicable, then ``False`` should be returned;
      :param `label`: The label of the button;
      :param `bitmap_size_large`: The size of all "large" bitmaps on the button bar;
      :param `bitmap_size_small`: The size of all "small" bitmaps on the button bar;
      :param `button_size`: The size, in pixels, of the button;
      :param `normal_region`: The region of the button which constitutes the normal button;
      :param `dropdown_region`: The region of the button which constitutes the dropdown button.
      
      :returns: ``True`` if a size exists for the button, ``False`` otherwise.


   .. method:: GetColour(self, id)

      Get the value of a certain colour setting.
      
      can be one of the colour values of `RibbonArtSetting`.
      
      :param `id`: the colour id.


   .. method:: GetColourScheme(self, primary, secondary, tertiary)

      Get the current colour scheme.
      
      Returns three colours such that if :meth:`~RibbonMSWArtProvider.SetColourScheme` were called with them, the
      colour scheme would be restored to what it was when :meth:`~RibbonMSWArtProvider.SetColourScheme` was last
      called. In practice, this usually means that the returned values are the three
      colours given in the last call to :meth:`~RibbonMSWArtProvider.SetColourScheme`, however if
      :meth:`~RibbonMSWArtProvider.SetColourScheme` performs an idempotent operation upon the colours it is given
      (like clamping a component of the colour), then the returned values may not be
      the three colours given in the last call to :meth:`~RibbonMSWArtProvider.SetColourScheme`.
      
      If :meth:`~RibbonMSWArtProvider.SetColourScheme` has not been called, then the returned values should result
      in a colour scheme similar to, if not identical to, the default colours of the
      art provider. Note that if :meth:`~RibbonMSWArtProvider.SetColour` is called, then :meth:`~RibbonMSWArtProvider.GetColourScheme` does
      not try and return a colour scheme similar to colours being used - it's return
      values are dependant upon the last values given to :meth:`~RibbonMSWArtProvider.SetColourScheme`, as
      described above.
      
      :param `primary`: Pointer to a location to store the primary colour, or ``None``;
      :param `secondary`: Pointer to a location to store the secondary colour, or ``None``;
      :param `tertiary`: Pointer to a location to store the tertiary colour, or ``None``.


   .. method:: GetFlags(self)

      Get the previously set style flags.


   .. method:: GetFont(self, id)

      Get the value of a certain font setting.
      
      can be one of the font values of `RibbonArtSetting`.
      
      :param `id`: the font id.


   .. method:: GetGalleryClientSize(self, dc, wnd, size, client_offset=None, scroll_up_button=None, scroll_down_button=None, extension_button=None)

      Calculate the client size of a :class:`~wx.lib.agw.ribbon.gallery.RibbonGallery` control for a given size.
      
      This should act as the inverse to :meth:`~RibbonMSWArtProvider.GetGallerySize`, and decrement the given
      size by enough to fir the gallery border, buttons, and other chrome.
      
      :param `dc`: A device context to use if one is required for size calculations;
      :param `wnd`: The gallery in question;
      :param `size`: The overall size to calculate the client size for;
      :param `client_offset`: The position within the given size at which the
       returned client size begins;
      :param `scroll_up_button`: The rectangle within the given size which the
       scroll up button occupies;
      :param `scroll_down_button`: The rectangle within the given size which the
       scroll down button occupies;
      :param `extension_button`: The rectangle within the given size which the
       extension button occupies.


   .. method:: GetGallerySize(self, dc, wnd, client_size)

      Calculate the size of a :class:`~wx.lib.agw.ribbon.gallery.RibbonGallery` control for a given client size.
      
      This should increment the given size by enough to fit the gallery border,
      buttons, and any other chrome.
      
      :param `dc`: A device context to use if one is required for size calculations;
      :param `wnd`: The gallery in question;
      :param `client_size`: The client size.
      
      :see: :meth:`~RibbonMSWArtProvider.GetGalleryClientSize`


   .. method:: GetMetric(self, id)

      Get the value of a certain integer setting.
      
      can be one of the size values of `RibbonArtSetting`.
      
      :param `id`: a metric id.


   .. method:: GetMinimisedPanelMinimumSize(self, dc, wnd, desired_bitmap_size=None, expanded_panel_direction=None)

      Calculate the size of a minimised ribbon panel.
      
      :param `dc`: A device context to use when one is required for size calculations;
      :param `wnd`: The ribbon panel in question. Attributes like the panel label can
       be queried from this;
      :param `desired_bitmap_size`: MISSING DESCRIPTION;
      :param `expanded_panel_direction`: MISSING DESCRIPTION.


   .. method:: GetPageBackgroundRedrawArea(self, dc, wnd, page_old_size, page_new_size)

      Calculate the portion of a page background which needs to be redrawn when a page
      is resized.
      
      To optimise the drawing of page backgrounds, as small an area as possible should
      be returned. Of couse, if the way in which a background is drawn means that the
      entire background needs to be repainted on resize, then the entire new size
      should be returned.
      
      :param `dc`: A device context to use when one is required for size calculations;
      :param `wnd`: The page which is being resized;
      :param `page_old_size`: The size of the page prior to the resize (which has
       already been painted);
      :param `page_new_size`: The size of the page after the resize.


   .. method:: GetPanelClientSize(self, dc, wnd, size, client_offset=None)

      Calculate the client size of a panel for a given overall size.
      
      This should act as the inverse to :meth:`~RibbonMSWArtProvider.GetPanelSize`, and decrement the given size
      by enough to fit the panel label and other chrome.
      
      :param `dc`: A device context to use if one is required for size calculations;
      :param `wnd`: The ribbon panel in question;
      :param `size`: The overall size to calculate client size for;
      :param `client_offset`: The offset where the returned client size begins within
       the given (may be ``None``).
      
      :see: :meth:`~RibbonMSWArtProvider.GetPanelSize`


   .. method:: GetPanelExtButtonArea(self, dc, wnd, rect)

      Retrieve the extension button area rectangle.
      
      :param `dc`: The device context used to measure text extents;
      :param `wnd`: The panel where the extension button resides;
      :param `rect`: The panel client rectangle.


   .. method:: GetPanelSize(self, dc, wnd, client_size, client_offset=None)

      Calculate the size of a panel for a given client size.
      
      This should increment the given size by enough to fit the panel label and other
      chrome.
      
      :param `dc`: A device context to use if one is required for size calculations;
      :param `wnd`: The ribbon panel in question;
      :param `client_size`: The client size;
      :param `client_offset`: The offset where the client rectangle begins within the
       panel (may be ``None``).
      
      :see: :meth:`~RibbonMSWArtProvider.GetPanelClientSize`


   .. method:: GetScrollButtonMinimumSize(self, dc, wnd, style)

      Calculate the minimum size (in pixels) of a scroll button.
      
      :param `dc`: A device context to use when one is required for size calculations;
      :param `wnd`: The window onto which the scroll button will eventually be drawn;
      :param `style`: A combination of flags from `RibbonScrollButtonStyle`, including
       a direction, and a for flag (state flags may be given too, but should be ignored,
       as a button should retain a constant size, regardless of its state).


   .. method:: GetTabCtrlHeight(self, dc, wnd, pages)

      Calculate the height (in pixels) of the tab region of a ribbon bar.
      
      Note that as the tab region can contain scroll buttons, the height should be
      greater than or equal to the minimum height for a tab scroll button.
      
      :param `dc`: A device context to use when one is required for size calculations;
      :param `wnd`: The window onto which the tabs will eventually be drawn;
      :param `pages`: The tabs which will acquire the returned height.


   .. method:: GetToolSize(self, dc, wnd, bitmap_size, kind, is_first, is_last, dropdown_region=None)

      Calculate the size of a tool within a :class:`~wx.lib.agw.ribbon.toolbar.RibbonToolBar`.
      
      :param `dc`: A device context to use when one is required for size calculations;
      :param `wnd`: The window onto which the tool will eventually be drawn;
      :param `bitmap_size`: The size of the tool's foreground bitmap;
      :param `kind`: The kind of tool (normal, dropdown, or hybrid);
      :param `is_first`: ``True`` if the tool is the first within its group. ``False``
       otherwise;
      :param `is_last`: ``True`` if the tool is the last within its group. ``False``
       otherwise;
      :param `dropdown_region`: For dropdown and hybrid tools, the region within the
       returned size which counts as the dropdown part.


   .. method:: ReallyDrawTabSeparator(self, wnd, rect, visibility)


   .. method:: Reload(self, setting)


   .. method:: RemovePanelPadding(self, rect)


   .. method:: SetColour(self, id, colour)

      Set the value of a certain colour setting to the value.
      
      can be one of the colour values of `RibbonArtSetting`, though not all colour
      settings will have an affect on every art provider.
      
      :param `id`: the colour id;
      :param `colour`: the colour.
      
      :see: :meth:`~RibbonMSWArtProvider.SetColourScheme`


   .. method:: SetColourScheme(self, primary, secondary, tertiary)

      Set all applicable colour settings from a few base colours.
      
      Uses any or all of the three given colours to create a colour scheme, and then
      sets all colour settings which are relevant to the art provider using that
      scheme. Note that some art providers may not use the tertiary colour for
      anything, and some may not use the secondary colour either.
      
      :param `primary`: MISSING DESCRIPTION;
      :param `secondary`: MISSING DESCRIPTION;
      :param `tertiary`: MISSING DESCRIPTION.
      
      :see: :meth:`~RibbonMSWArtProvider.SetColour`, :meth:`~RibbonMSWArtProvider.GetColourScheme`


   .. method:: SetFlags(self, flags)

      Set the style flags.
      
      Normally called automatically by :meth:`RibbonBar.SetArtProvider() <lib.agw.ribbon.bar.RibbonBar.SetArtProvider>` with the ribbon
      bar's style flags, so that the art provider has the same flags as the bar which
      it is serving.
      
      :param `flags`: MISSING DESCRIPTION.


   .. method:: SetFont(self, id, font)

      Set the value of a certain font setting to the value.
      
      can be one of the font values of `RibbonArtSetting`.
      
      :param `id`: a font id;
      :param `font`: the new font.


   .. method:: SetMetric(self, id, new_val)

      Set the value of a certain integer setting to the value.
      
      can be one of the size values of `RibbonArtSetting`.
      
      :param `id`: a metric id;
      :param `new_val`: the new value of the metric setting.


