.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.plot.polyobjects

.. highlight:: python



.. _wx.lib.plot.polyobjects.PolyBars:

==========================================================================================================================================
|phoenix_title|  **wx.lib.plot.polyobjects.PolyBars**
==========================================================================================================================================

Creates a PolyBars object.

:param points: The data to plot.
:type points: sequence of ``(center, height)`` points
:param **attr: keyword attributes

=================================  =============  =======================
Keyword and Default                Description    Type
=================================  =============  =======================
``barwidth=1.0``                   bar width      float or list of floats
``edgecolour='black'``             edge color     :class:`wx.Colour`
``edgewidth=1``                    edge width     float
``edgestyle=wx.PENSTYLE_SOLID``    edge style     :class:`wx.PenStyle`
``fillcolour='red'``               fill color     :class:`wx.Colour`
``fillstyle=wx.BRUSHSTYLE_SOLID``  fill style     :class:`wx.BrushStyle`
``legend=''``                      legend string  str
=================================  =============  =======================

.. important::

   If ``barwidth`` is a list of floats:

   + each bar will have a separate width
   + ``len(barwidth)`` must equal ``len(points)``.

.. warning::

   All methods except ``__init__`` are private.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>PolyBars</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.plot.polyobjects.PolyBars_inheritance.png" alt="Inheritance diagram of PolyBars" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.plot.polyobjects.PolyBars.html" title="wx.lib.plot.polyobjects.PolyBars" alt="" coords="21,160,252,189"/> <area shape="rect" id="node2" href="wx.lib.plot.polyobjects.PolyBarsBase.html" title="wx.lib.plot.polyobjects.PolyBarsBase" alt="" coords="5,83,268,112"/> <area shape="rect" id="node3" href="wx.lib.plot.polyobjects.PolyPoints.html" title="wx.lib.plot.polyobjects.PolyPoints" alt="" coords="16,5,257,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.lib.plot.polyobjects.PolyBarsBase`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.plot.polyobjects.PolyBars.__init__`                               
:meth:`~wx.lib.plot.polyobjects.PolyBars.calc_rect`                              Calculate the rectangle for plotting.
:meth:`~wx.lib.plot.polyobjects.PolyBars.draw`                                   Draw the bars
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: PolyBars(PolyBarsBase)

   Creates a PolyBars object.
   
   :param points: The data to plot.
   :type points: sequence of ``(center, height)`` points
   :param **attr: keyword attributes
   
   =================================  =============  =======================
   Keyword and Default                Description    Type
   =================================  =============  =======================
   ``barwidth=1.0``                   bar width      float or list of floats
   ``edgecolour='black'``             edge color     :class:`wx.Colour`
   ``edgewidth=1``                    edge width     float
   ``edgestyle=wx.PENSTYLE_SOLID``    edge style     :class:`wx.PenStyle`
   ``fillcolour='red'``               fill color     :class:`wx.Colour`
   ``fillstyle=wx.BRUSHSTYLE_SOLID``  fill style     :class:`wx.BrushStyle`
   ``legend=''``                      legend string  str
   =================================  =============  =======================
   
   .. important::
   
      If ``barwidth`` is a list of floats:
   
      + each bar will have a separate width
      + ``len(barwidth)`` must equal ``len(points)``.
   
   .. warning::
   
      All methods except ``__init__`` are private.

   .. method:: __init__(self, points, \*\*attr)


   .. method:: calc_rect(self, x, y, w)

      Calculate the rectangle for plotting. 


   .. method:: draw(self, dc, printerScale, coord=None)

      Draw the bars 


