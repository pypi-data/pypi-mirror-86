.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.evtmgr

.. highlight:: python



.. _wx.lib.evtmgr.EventManager:

==========================================================================================================================================
|phoenix_title|  **wx.lib.evtmgr.EventManager**
==========================================================================================================================================

This is the main class in the module, and is the only class that
the application programmer needs to use.  There is a pre-created
instance of this class called 'eventManager'.  It should not be
necessary to create other instances.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>EventManager</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.evtmgr.EventManager_inheritance.png" alt="Inheritance diagram of EventManager" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.evtmgr.EventManager.html" title="wx.lib.evtmgr.EventManager" alt="" coords="5,5,213,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.evtmgr.EventManager.__init__`                                     Initialize self.  See help(type(self)) for accurate signature.
:meth:`~wx.lib.evtmgr.EventManager.DeregisterDeadTopics`                         Deregister any entries relating to dead
:meth:`~wx.lib.evtmgr.EventManager.DeregisterListener`                           Deregister all event notifications for the given listener.
:meth:`~wx.lib.evtmgr.EventManager.DeregisterWindow`                             Deregister all events coming from the given window.
:meth:`~wx.lib.evtmgr.EventManager.GetDeadTopics`                                Return a list of topics relating to dead wxPython
:meth:`~wx.lib.evtmgr.EventManager.GetStats`                                     Return a dictionary with data about my state.
:meth:`~wx.lib.evtmgr.EventManager.Register`                                     Registers a listener function (or any callable object) to
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: EventManager

   This is the main class in the module, and is the only class that
   the application programmer needs to use.  There is a pre-created
   instance of this class called 'eventManager'.  It should not be
   necessary to create other instances.

   .. method:: __init__(self)

      Initialize self.  See help(type(self)) for accurate signature.


   .. method:: DeregisterDeadTopics(self)

      Deregister any entries relating to dead
      wxPython objects.  Not sure if this is an
      important issue; 1) My app code always de-registers
      listeners it doesn't need.  2) I don't think
      that lingering references to these dead objects
      is a problem.


   .. method:: DeregisterListener(self, listener)

      Deregister all event notifications for the given listener.


   .. method:: DeregisterWindow(self, win)

      Deregister all events coming from the given window.


   .. method:: GetDeadTopics(self)

      Return a list of topics relating to dead wxPython
      objects.


   .. method:: GetStats(self)

      Return a dictionary with data about my state.


   .. method:: Register(self, listener, event, source=None, win=None, id=None)

      Registers a listener function (or any callable object) to
      receive events of type event coming from the source window.
      For example::
      
          eventManager.Register(self.OnButton, EVT_BUTTON, theButton)
      
      Alternatively, the specific window where the event is
      delivered, and/or the ID of the event source can be specified.
      For example::
      
          eventManager.Register(self.OnButton, EVT_BUTTON, win=self, id=ID_BUTTON)
      
      or::
      
          eventManager.Register(self.OnButton, EVT_BUTTON, theButton, self)


