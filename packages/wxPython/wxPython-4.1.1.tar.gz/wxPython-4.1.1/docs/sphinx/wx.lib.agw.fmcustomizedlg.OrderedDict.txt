.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.fmcustomizedlg

.. highlight:: python



.. _wx.lib.agw.fmcustomizedlg.OrderedDict:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.fmcustomizedlg.OrderedDict**
==========================================================================================================================================

An ordered dictionary implementation.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>OrderedDict</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.fmcustomizedlg.OrderedDict_inheritance.png" alt="Inheritance diagram of OrderedDict" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.fmcustomizedlg.OrderedDict.html" title="wx.lib.agw.fmcustomizedlg.OrderedDict" alt="" coords="134,392,417,421"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`collections.UserDict`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.fmcustomizedlg.OrderedDict.__init__`                          Initialize self.  See help(type(self)) for accurate signature.
:meth:`~wx.lib.agw.fmcustomizedlg.OrderedDict.clear`                             D.clear() -> None.  Remove all items from D.
:meth:`~wx.lib.agw.fmcustomizedlg.OrderedDict.copy`                              
:meth:`~wx.lib.agw.fmcustomizedlg.OrderedDict.items`                             D.items() -> a set-like object providing a view on D's items
:meth:`~wx.lib.agw.fmcustomizedlg.OrderedDict.keys`                              D.keys() -> a set-like object providing a view on D's keys
:meth:`~wx.lib.agw.fmcustomizedlg.OrderedDict.popitem`                           D.popitem() -> (k, v), remove and return some (key, value) pair
:meth:`~wx.lib.agw.fmcustomizedlg.OrderedDict.setdefault`                        D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
:meth:`~wx.lib.agw.fmcustomizedlg.OrderedDict.update`                            D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
:meth:`~wx.lib.agw.fmcustomizedlg.OrderedDict.values`                            D.values() -> an object providing a view on D's values
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: OrderedDict(UserDict)

   An ordered dictionary implementation.

   .. method:: __init__(self, dict = None)

      Initialize self.  See help(type(self)) for accurate signature.


   .. method:: clear(self)

      D.clear() -> None.  Remove all items from D.


   .. method:: copy(self)


   .. method:: items(self)

      D.items() -> a set-like object providing a view on D's items


   .. method:: keys(self)

      D.keys() -> a set-like object providing a view on D's keys


   .. method:: popitem(self)

      D.popitem() -> (k, v), remove and return some (key, value) pair
      as a 2-tuple; but raise KeyError if D is empty.


   .. method:: setdefault(self, key, failobj = None)

      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D


   .. method:: update(self, dict)

      D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
      In either case, this is followed by: for k, v in F.items(): D[k] = v


   .. method:: values(self)

      D.values() -> an object providing a view on D's values


