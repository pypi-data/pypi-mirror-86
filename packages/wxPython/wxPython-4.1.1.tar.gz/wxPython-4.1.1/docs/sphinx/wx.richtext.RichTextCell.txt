.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.richtext.RichTextCell:

==========================================================================================================================================
|phoenix_title|  **wx.richtext.RichTextCell**
==========================================================================================================================================

:ref:`wx.richtext.RichTextCell`  is the cell in a table, in which the user can type.          

As well as text, it can also contain objects e.g. an image, or even another :ref:`wx.richtext.RichTextTable`. 

A cell's appearance can be changed via its associated :ref:`wx.richtext.RichTextAttr`; for example its size altered or its background colour set. It also has the properties of column- and row-span. By default these are 1, meaning that the cell only spans itself, but can be increased using the :meth:`~wx.richtext.RichTextCell.SetColSpan`  and :meth:`~wx.richtext.RichTextCell.SetRowSpan`  methods. Attempts to set too large a span are silently truncated to the table edge.           




|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>RichTextCell</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.richtext.RichTextCell_inheritance.png" alt="Inheritance diagram of RichTextCell" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.richtext.RichTextCell.html" title="wx.richtext.RichTextCell" alt="" coords="60,392,239,421"/> <area shape="rect" id="node2" href="wx.richtext.RichTextBox.html" title="wx.richtext.RichTextBox" alt="" coords="60,315,239,344"/> <area shape="rect" id="node3" href="wx.richtext.RichTextParagraphLayoutBox.html" title="wx.richtext.RichTextParagraphLayoutBox" alt="" coords="5,237,293,267"/> <area shape="rect" id="node4" href="wx.richtext.RichTextCompositeObject.html" title="wx.richtext.RichTextCompositeObject" alt="" coords="16,160,283,189"/> <area shape="rect" id="node5" href="wx.richtext.RichTextObject.html" title="wx.richtext.RichTextObject" alt="" coords="51,83,247,112"/> <area shape="rect" id="node6" href="wx.Object.html" title="wx.Object" alt="" coords="106,5,193,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.richtext.RichTextCell.__init__`                                       Default constructor; optionally pass the parent object.
:meth:`~wx.richtext.RichTextCell.CanEditProperties`                              Returns ``True`` if we can edit the object's properties via a GUI.
:meth:`~wx.richtext.RichTextCell.Clone`                                          Clones the object.
:meth:`~wx.richtext.RichTextCell.Copy`                                           
:meth:`~wx.richtext.RichTextCell.Draw`                                           Draw the item, within the given range.
:meth:`~wx.richtext.RichTextCell.EditProperties`                                 Edits the object's properties via a GUI.
:meth:`~wx.richtext.RichTextCell.GetColSpan`                                     Returns the number of columns spanned by the cell.
:meth:`~wx.richtext.RichTextCell.GetPropertiesMenuLabel`                         Returns the label to be used for the properties context menu item.
:meth:`~wx.richtext.RichTextCell.GetRowSpan`                                     Returns the number of rows spanned by the cell.
:meth:`~wx.richtext.RichTextCell.GetXMLNodeName`                                 Returns the ``XML`` node name of this object.
:meth:`~wx.richtext.RichTextCell.HitTest`                                        Hit-testing: returns a flag indicating hit test details, plus information about position.
:meth:`~wx.richtext.RichTextCell.SetColSpan`                                     Set the number of columns spanned by the cell.
:meth:`~wx.richtext.RichTextCell.SetRowSpan`                                     Set the number of rows spanned by the cell.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.richtext.RichTextCell.ColSpan`                                        See :meth:`~wx.richtext.RichTextCell.GetColSpan` and :meth:`~wx.richtext.RichTextCell.SetColSpan`
:attr:`~wx.richtext.RichTextCell.PropertiesMenuLabel`                            See :meth:`~wx.richtext.RichTextCell.GetPropertiesMenuLabel`
:attr:`~wx.richtext.RichTextCell.RowSpan`                                        See :meth:`~wx.richtext.RichTextCell.GetRowSpan` and :meth:`~wx.richtext.RichTextCell.SetRowSpan`
:attr:`~wx.richtext.RichTextCell.XMLNodeName`                                    See :meth:`~wx.richtext.RichTextCell.GetXMLNodeName`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.richtext.RichTextCell(RichTextBox)

   **Possible constructors**::

       RichTextCell(parent=None)
       
       RichTextCell(obj)
       
   
   RichTextCell is the cell in a table, in which the user can type.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent=None)`
      
      Default constructor; optionally pass the parent object.                  
      
      
      :param `parent`: 
      :type `parent`: wx.richtext.RichTextObject
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, obj)`
      
      Copy constructor.                  
      
      
      :param `obj`: 
      :type `obj`: wx.richtext.RichTextCell
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: CanEditProperties(self)

      Returns ``True`` if we can edit the object's properties via a GUI.                  

      :rtype: `bool`








   .. method:: Clone(self)

      Clones the object.                  

      :rtype: :ref:`wx.richtext.RichTextObject`








   .. method:: Copy(self, obj)




      :param `obj`: 
      :type `obj`: wx.richtext.RichTextCell







   .. method:: Draw(self, dc, context, range, selection, rect, descent, style)

      Draw the item, within the given range.                  

      Some objects may ignore the range (for example paragraphs) while others must obey it (lines, to implement wrapping)                  


      :param `dc`: 
      :type `dc`: wx.DC
      :param `context`: 
      :type `context`: wx.richtext.RichTextDrawingContext
      :param `range`: 
      :type `range`: wx.richtext.RichTextRange
      :param `selection`: 
      :type `selection`: wx.richtext.RichTextSelection
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `descent`: 
      :type `descent`: int
      :param `style`: 
      :type `style`: int




      :rtype: `bool`








   .. method:: EditProperties(self, parent, buffer)

      Edits the object's properties via a GUI.                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `buffer`: 
      :type `buffer`: wx.richtext.RichTextBuffer




      :rtype: `bool`








   .. method:: GetColSpan(self)

      Returns the number of columns spanned by the cell.                  

      By default a cell doesn't span extra columns, so this function returns 1. 

                

      :rtype: `int`







      .. versionadded:: 2.9.5 
    







      .. seealso:: :meth:`SetColSpan` , :meth:`GetRowSpan`     








   .. method:: GetPropertiesMenuLabel(self)

      Returns the label to be used for the properties context menu item.                  

      :rtype: `string`








   .. method:: GetRowSpan(self)

      Returns the number of rows spanned by the cell.                  

      By default a cell doesn't span extra rows, so this function returns 1. 

                

      :rtype: `int`







      .. versionadded:: 2.9.5 
    







      .. seealso:: :meth:`SetRowSpan` , :meth:`GetColSpan`     








   .. method:: GetXMLNodeName(self)

      Returns the ``XML`` node name of this object.                  

      This must be overridden for XmlNode-base ``XML`` export to work.                  

      :rtype: `string`








   .. method:: HitTest(self, dc, context, pt, flags=0)

      Hit-testing: returns a flag indicating hit test details, plus information about position.                  

      `contextObj`  is returned to specify what object position is relevant to, since otherwise there's an ambiguity. @ obj might not be a child of `contextObj`, since we may be referring to the container itself if we have no hit on a child - for example if we click outside an object. 

      The function puts the position in `textPosition`  if one is found. `pt`  is in logical units (a zero y position is at the beginning of the buffer). 

                


      :param `dc`: 
      :type `dc`: wx.DC
      :param `context`: 
      :type `context`: wx.richtext.RichTextDrawingContext
      :param `pt`: 
      :type `pt`: wx.Point
      :param `flags`: 
      :type `flags`: int




      :rtype: `tuple`







      :returns: 

         ( `int`, `textPosition`, `obj`, `contextObj` ) 








   .. method:: SetColSpan(self, span)

      Set the number of columns spanned by the cell.                  

      By default colspan is 1 i.e. a cell doesn't span extra columns. Pass a value >1 to change this. Attempting to set a colspan <1 will assert and be ignored. 

                


      :param `span`: 
      :type `span`: long






      .. versionadded:: 2.9.5 
    







      .. seealso:: :meth:`GetColSpan` , :meth:`SetRowSpan`     








   .. method:: SetRowSpan(self, span)

      Set the number of rows spanned by the cell.                  

      By default colspan is 1 i.e. a cell doesn't span extra rows. Pass a value >1 to change this. Attempting to set a rowspan <1 will assert and be ignored. 

                


      :param `span`: 
      :type `span`: long






      .. versionadded:: 2.9.5 
    







      .. seealso:: :meth:`GetRowSpan` , :meth:`SetColSpan`     








   .. attribute:: ColSpan

      See :meth:`~wx.richtext.RichTextCell.GetColSpan` and :meth:`~wx.richtext.RichTextCell.SetColSpan`


   .. attribute:: PropertiesMenuLabel

      See :meth:`~wx.richtext.RichTextCell.GetPropertiesMenuLabel`


   .. attribute:: RowSpan

      See :meth:`~wx.richtext.RichTextCell.GetRowSpan` and :meth:`~wx.richtext.RichTextCell.SetRowSpan`


   .. attribute:: XMLNodeName

      See :meth:`~wx.richtext.RichTextCell.GetXMLNodeName`

