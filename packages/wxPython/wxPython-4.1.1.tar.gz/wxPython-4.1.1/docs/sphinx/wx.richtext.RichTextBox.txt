.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.richtext.RichTextBox:

==========================================================================================================================================
|phoenix_title|  **wx.richtext.RichTextBox**
==========================================================================================================================================

This class implements a floating or inline text box, containing paragraphs.          







         



.. seealso:: :ref:`wx.richtext.RichTextParagraphLayoutBox`, :ref:`wx.richtext.RichTextObject`, :ref:`wx.richtext.RichTextBuffer`, :ref:`wx.richtext.RichTextCtrl`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>RichTextBox</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.richtext.RichTextBox_inheritance.png" alt="Inheritance diagram of RichTextBox" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.richtext.RichTextBox.html" title="wx.richtext.RichTextBox" alt="" coords="60,315,239,344"/> <area shape="rect" id="node2" href="wx.richtext.RichTextParagraphLayoutBox.html" title="wx.richtext.RichTextParagraphLayoutBox" alt="" coords="5,237,293,267"/> <area shape="rect" id="node3" href="wx.richtext.RichTextCompositeObject.html" title="wx.richtext.RichTextCompositeObject" alt="" coords="16,160,283,189"/> <area shape="rect" id="node4" href="wx.richtext.RichTextObject.html" title="wx.richtext.RichTextObject" alt="" coords="51,83,247,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="106,5,193,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.richtext.RichTextCell`, :ref:`wx.richtext.RichTextTable`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.richtext.RichTextBox.__init__`                                        Default constructor; optionally pass the parent object.
:meth:`~wx.richtext.RichTextBox.CanEditProperties`                               Returns ``True`` if we can edit the object's properties via a GUI.
:meth:`~wx.richtext.RichTextBox.Clone`                                           Clones the object.
:meth:`~wx.richtext.RichTextBox.Copy`                                            
:meth:`~wx.richtext.RichTextBox.Draw`                                            Draw the item, within the given range.
:meth:`~wx.richtext.RichTextBox.EditProperties`                                  Edits the object's properties via a GUI.
:meth:`~wx.richtext.RichTextBox.GetPropertiesMenuLabel`                          Returns the label to be used for the properties context menu item.
:meth:`~wx.richtext.RichTextBox.GetXMLNodeName`                                  Returns the ``XML`` node name of this object.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.richtext.RichTextBox.PropertiesMenuLabel`                             See :meth:`~wx.richtext.RichTextBox.GetPropertiesMenuLabel`
:attr:`~wx.richtext.RichTextBox.XMLNodeName`                                     See :meth:`~wx.richtext.RichTextBox.GetXMLNodeName`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.richtext.RichTextBox(RichTextParagraphLayoutBox)

   **Possible constructors**::

       RichTextBox(parent=None)
       
       RichTextBox(obj)
       
   
   This class implements a floating or inline text box, containing
   paragraphs.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent=None)`
      
      Default constructor; optionally pass the parent object.                  
      
      
      :param `parent`: 
      :type `parent`: wx.richtext.RichTextObject
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, obj)`
      
      Copy constructor.                  
      
      
      :param `obj`: 
      :type `obj`: wx.richtext.RichTextBox
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: CanEditProperties(self)

      Returns ``True`` if we can edit the object's properties via a GUI.                  

      :rtype: `bool`








   .. method:: Clone(self)

      Clones the object.                  

      :rtype: :ref:`wx.richtext.RichTextObject`








   .. method:: Copy(self, obj)




      :param `obj`: 
      :type `obj`: wx.richtext.RichTextBox







   .. method:: Draw(self, dc, context, range, selection, rect, descent, style)

      Draw the item, within the given range.                  

      Some objects may ignore the range (for example paragraphs) while others must obey it (lines, to implement wrapping)                  


      :param `dc`: 
      :type `dc`: wx.DC
      :param `context`: 
      :type `context`: wx.richtext.RichTextDrawingContext
      :param `range`: 
      :type `range`: wx.richtext.RichTextRange
      :param `selection`: 
      :type `selection`: wx.richtext.RichTextSelection
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `descent`: 
      :type `descent`: int
      :param `style`: 
      :type `style`: int




      :rtype: `bool`








   .. method:: EditProperties(self, parent, buffer)

      Edits the object's properties via a GUI.                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `buffer`: 
      :type `buffer`: wx.richtext.RichTextBuffer




      :rtype: `bool`








   .. method:: GetPropertiesMenuLabel(self)

      Returns the label to be used for the properties context menu item.                  

      :rtype: `string`








   .. method:: GetXMLNodeName(self)

      Returns the ``XML`` node name of this object.                  

      This must be overridden for XmlNode-base ``XML`` export to work.                  

      :rtype: `string`








   .. attribute:: PropertiesMenuLabel

      See :meth:`~wx.richtext.RichTextBox.GetPropertiesMenuLabel`


   .. attribute:: XMLNodeName

      See :meth:`~wx.richtext.RichTextBox.GetXMLNodeName`

