.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.Process:

==========================================================================================================================================
|phoenix_title|  **wx.Process**
==========================================================================================================================================

The objects of this class are used in conjunction with the :ref:`wx.Execute`  function.          

When a :ref:`wx.Process`  object is passed to :ref:`wx.Execute`, its :meth:`~wx.Process.OnTerminate`  virtual method is called when the process terminates. This allows the program to be (asynchronously) notified about the process termination and also retrieve its exit status which is unavailable from :ref:`wx.Execute`  in the case of asynchronous execution. 

:ref:`wx.Process`  also supports ``IO`` redirection of the child process. For this, you have to call its :meth:`~wx.Process.Redirect`  method before passing it to :ref:`wx.Execute`. If the child process was launched successfully, :meth:`~wx.Process.GetInputStream`, :meth:`~wx.Process.GetOutputStream`  and :meth:`~wx.Process.GetErrorStream`  can then be used to retrieve the streams corresponding to the child process standard output, input and error output respectively. 







.. _Process-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.ProcessEvent` parameter.


- EVT_END_PROCESS: Process a  ``wxEVT_END_PROCESS``   event, sent by  :meth:`wx.Process.OnTerminate`   upon the external process termination.  












|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Process</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.Process_inheritance.png" alt="Inheritance diagram of Process" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Process.html" title="wx.Process" alt="" coords="61,160,156,189"/> <area shape="rect" id="node2" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node4" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.Process.__init__`                                                     Constructs a process object.
:meth:`~wx.Process.Activate`                                                     Activates a GUI process by bringing up its main window to the front.
:meth:`~wx.Process.CloseOutput`                                                  Closes the output stream (the one connected to the stdin of the child process).
:meth:`~wx.Process.Detach`                                                       Detaches this event handler from the parent specified in the constructor (see :meth:`wx.EvtHandler.Unlink`   for a similar but not identical function).
:meth:`~wx.Process.Exists`                                                       Returns ``True`` if the given process exists in the system.
:meth:`~wx.Process.GetErrorStream`                                               Returns an input stream which corresponds to the standard error output (stderr) of the child process.
:meth:`~wx.Process.GetInputStream`                                               It returns an input stream corresponding to the standard output stream of the subprocess.
:meth:`~wx.Process.GetOutputStream`                                              It returns an output stream corresponding to the input stream of the subprocess.
:meth:`~wx.Process.GetPid`                                                       Returns the process ``ID`` of the process launched by :meth:`~Process.Open`   or set by :ref:`wx.Execute`  (if you passed this :ref:`wx.Process`  as argument).
:meth:`~wx.Process.IsErrorAvailable`                                             Returns ``True`` if there is data to be read on the child process standard error stream.
:meth:`~wx.Process.IsInputAvailable`                                             Returns ``True`` if there is data to be read on the child process standard output stream.
:meth:`~wx.Process.IsInputOpened`                                                Returns ``True`` if the child process standard output stream is opened.
:meth:`~wx.Process.Kill`                                                         Send the specified signal to the given process.
:meth:`~wx.Process.OnTerminate`                                                  It is called when the process with the pid `pid`  finishes.
:meth:`~wx.Process.Open`                                                         This static method replaces the standard  ``popen()``   function: it launches the process specified by the  `cmd`  parameter and returns the :ref:`wx.Process`  object which can be used to retrieve the streams connected to the standard input, output and error output of the child process.
:meth:`~wx.Process.Redirect`                                                     Turns on redirection.
:meth:`~wx.Process.SetPriority`                                                  Sets the priority of the process, between 0 (lowest) and 100 (highest).
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.Process.ErrorStream`                                                  See :meth:`~wx.Process.GetErrorStream`
:attr:`~wx.Process.InputStream`                                                  See :meth:`~wx.Process.GetInputStream`
:attr:`~wx.Process.OutputStream`                                                 See :meth:`~wx.Process.GetOutputStream`
:attr:`~wx.Process.Pid`                                                          See :meth:`~wx.Process.GetPid`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.Process(EvtHandler)

   **Possible constructors**::

       Process(parent=None, id=-1)
       
       Process(flags)
       
   
   The objects of this class are used in conjunction with the Execute()
   function.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent=None, id=-1)`
      
      Constructs a process object.                  
      
      `id`  is only used in the case you want to use wxWidgets events. It identifies this object, or another window that will receive the event. 
      
      If the `parent`  parameter is different from ``None``, it will receive a  ``wxEVT_END_PROCESS``   notification event (you should insert   ``EVT_END_PROCESS``   macro in the event table of the parent to handle it) with the given  `id`. 
      
      
      
      
      :param `parent`: The event handler parent.   
      :type `parent`: wx.EvtHandler
      :param `id`: id of an event.   
      :type `id`: int
      
      
      
      
      
      
                        
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, flags)`
      
      Creates an object without any associated parent (and hence no id neither) but allows specifying the `flags`  which can have the value of  ``PROCESS_DEFAULT``   or   ``PROCESS_REDIRECT`` .                   
      
      Specifying the former value has no particular effect while using the latter one is equivalent to calling :meth:`Redirect` .                  
      
      
      :param `flags`: 
      :type `flags`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Activate(self)

      Activates a GUI process by bringing up its main window to the front.                  

      This is a convenient method which tries to bring this process to the users attention. 

      Currently this is implemented in wxMSW only and simply returns ``False`` under the other platforms. Notice that this function can also return ``False`` under MSW if, for example, the process doesn't have any windows. 

                

      :rtype: `bool`







      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. method:: CloseOutput(self)

      Closes the output stream (the one connected to the stdin of the child process).                  

      This function can be used to indicate to the child process that there is no more data to be read - usually, a filter program will only terminate when the input stream is closed. 

      Notice that :meth:`GetOutputStream`   will return ``None`` after the output stream is closed.                   





   .. method:: Detach(self)

      Detaches this event handler from the parent specified in the constructor (see :meth:`wx.EvtHandler.Unlink`   for a similar but not identical function).                  

      Normally, a :ref:`wx.Process`  object is deleted by its parent when it receives the notification about the process termination. 

      However, it might happen that the parent object is destroyed before the external process is terminated (e.g. a window from which this external process was launched is closed by the user) and in this case it **should**  not delete the :ref:`wx.Process`  object, but **should**  call :meth:`Detach`   instead. 

      After the :ref:`wx.Process`  object is detached from its parent, no notification events will be sent to the parent and the object will delete itself upon reception of the process termination notification.                   





   .. staticmethod:: Exists(pid)

      Returns ``True`` if the given process exists in the system.                  

                


      :param `pid`: 
      :type `pid`: int




      :rtype: `bool`







      .. seealso:: :ref:`wx.Kill`, :ref:`Exec sample <exec sample>`    








   .. method:: GetErrorStream(self)

      Returns an input stream which corresponds to the standard error output (stderr) of the child process.                  

      :rtype: :ref:`wx.InputStream`








   .. method:: GetInputStream(self)

      It returns an input stream corresponding to the standard output stream of the subprocess.                  

      If it is ``None``, you have not turned on the redirection. 

                

      :rtype: :ref:`wx.InputStream`







      .. seealso:: :meth:`Redirect` .   








   .. method:: GetOutputStream(self)

      It returns an output stream corresponding to the input stream of the subprocess.                  

      If it is ``None``, you have not turned on the redirection or already called :meth:`CloseOutput` . 

                

      :rtype: :ref:`wx.OutputStream`







      .. seealso:: :meth:`Redirect` .   








   .. method:: GetPid(self)

      Returns the process ``ID`` of the process launched by :meth:`Open`   or set by :ref:`wx.Execute`  (if you passed this :ref:`wx.Process`  as argument).                  

      :rtype: `long`








   .. method:: IsErrorAvailable(self)

      Returns ``True`` if there is data to be read on the child process standard error stream.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`IsInputAvailable`     








   .. method:: IsInputAvailable(self)

      Returns ``True`` if there is data to be read on the child process standard output stream.                  

      This allows writing simple (and extremely inefficient) polling-based code waiting for a better mechanism in future wxWidgets versions. See the :ref:`exec sample <exec sample>`  for an example of using this function. 

                

      :rtype: `bool`







      .. seealso:: :meth:`IsInputOpened`     








   .. method:: IsInputOpened(self)

      Returns ``True`` if the child process standard output stream is opened.                  

      :rtype: `bool`








   .. staticmethod:: Kill(pid, sig=SIGTERM, flags=KILL_NOCHILDREN)

      Send the specified signal to the given process.                  

      Possible signal values can be one of the :ref:`wx.Signal`  enumeration values. 

       ``SIGNONE`` ,   ``SIGKILL``   and   ``SIGTERM``   have the same meaning under both Unix and Windows but all the other signals are equivalent to   ``SIGTERM``   under Windows. 

      The `flags`  parameter can be  ``KILL_NOCHILDREN``   (the default), or   ``KILL_CHILDREN`` , in which case the child processes of this process will be killed too. Note that under Unix, for   ``KILL_CHILDREN``   to work you should have created the process passing   ``EXEC_MAKE_GROUP_LEADER`` . 

      Returns the element of :ref:`wx.KillError`  enum. 

                


      :param `pid`: 
      :type `pid`: int
      :param `sig`: 
      :type `sig`: wx.Signal
      :param `flags`: 
      :type `flags`: int




      :rtype: :ref:`wx.KillError`







      .. seealso:: :meth:`Exists` , :ref:`wx.Kill`, :ref:`Exec sample <exec sample>`    








   .. method:: OnTerminate(self, pid, status)

      It is called when the process with the pid `pid`  finishes.                  

      It raises a wxWidgets event when it isn't overridden. 

      Note that this function won't be called if you :ref:`wx.Kill`  the process. 




      :param `pid`: The pid of the process which has just terminated.   
      :type `pid`: int
      :param `status`: The exit code of the process.   
      :type `status`: int






                  





   .. staticmethod:: Open(cmd, flags=EXEC_ASYNC)

      This static method replaces the standard  ``popen()``   function: it launches the process specified by the  `cmd`  parameter and returns the :ref:`wx.Process`  object which can be used to retrieve the streams connected to the standard input, output and error output of the child process.                  

      If the process couldn't be launched, ``None`` is returned. 




      :param `cmd`: The command to execute, including optional arguments.   
      :type `cmd`: string
      :param `flags`: The flags to pass to :ref:`wx.Execute`. Note:  ``EXEC_SYNC``   should not be used.  
      :type `flags`: int








      :rtype: :ref:`wx.Process`



                  



      :returns: 

         A pointer to new :ref:`wx.Process`  object or ``None`` on error.  







      .. note:: 

         In any case the returned pointer should **not**  be deleted, rather the process object will be destroyed automatically when the child process terminates. This does mean that the child process should be told to quit before the main program exits to avoid memory leaks.  







      .. seealso:: :ref:`wx.Execute`    








   .. method:: Redirect(self)

      Turns on redirection.                  

      :ref:`wx.Execute`  will try to open a couple of pipes to catch the subprocess stdio. The caught input stream is returned by :meth:`GetOutputStream`   as a non-seekable stream. The caught output stream is returned by :meth:`GetInputStream`   as a non-seekable stream.                   





   .. method:: SetPriority(self, priority)

      Sets the priority of the process, between 0 (lowest) and 100 (highest).                  

      It can only be set before the process is created. 

      The following symbolic constants can be used in addition to raw values in 0..100 range:

      - ``PRIORITY_MIN``:  0 
      - ``PRIORITY_DEFAULT``:  50 
      - ``PRIORITY_MAX``:  100 




                


      :param `priority`: 






      .. versionadded:: 2.9.5 
     








   .. attribute:: ErrorStream

      See :meth:`~wx.Process.GetErrorStream`


   .. attribute:: InputStream

      See :meth:`~wx.Process.GetInputStream`


   .. attribute:: OutputStream

      See :meth:`~wx.Process.GetOutputStream`


   .. attribute:: Pid

      See :meth:`~wx.Process.GetPid`

