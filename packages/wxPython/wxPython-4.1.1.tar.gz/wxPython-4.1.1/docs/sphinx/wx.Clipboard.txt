.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.Clipboard:

==========================================================================================================================================
|phoenix_title|  **wx.Clipboard**
==========================================================================================================================================

A class for manipulating the clipboard.          

To use the clipboard, you call member functions of the global :meth:`~wx.Clipboard.TheClipboard`  object. 

See the :ref:`DataObject Overview <dataobject overview>`  for further information. 

Call :meth:`wx.Clipboard.Open`   to get ownership of the clipboard. If this operation returns ``True``, you now own the clipboard. Call :meth:`wx.Clipboard.SetData`   to put data on the clipboard, or :meth:`wx.Clipboard.GetData`   to retrieve data from the clipboard. Call :meth:`wx.Clipboard.Close`   to close the clipboard and relinquish ownership. You should keep the clipboard open only momentarily. 

For example: 

::

        # Write some text to the clipboard
        if wx.TheClipboard.Open():
            wx.TheClipboard.SetData(wx.TextDataObject("Some text"))
            wx.TheClipboard.Close()


        # Test if text content is available
        not_empty = wx.TheClipboard.IsSupported(wx.DataFormat(wx.DF_TEXT))


        # Read some text
        text_data = wx.TextDataObject()
        if wx.TheClipboard.Open():
            success = wx.TheClipboard.GetData(text_data)
            wx.TheClipboard.Close()
        if success:
            return text_data.GetText()









         



.. note:: 

   On GTK, the clipboard behavior can vary depending on the configuration of the end-user's machine. In order for the clipboard data to persist after the window closes, a clipboard manager must be installed. Some clipboard managers will automatically flush the clipboard after each new piece of data is added, while others will not. The :meth:`Flush`   function will force the clipboard manager to flush the data.  







.. seealso:: :ref:`Drag and Drop Overview <drag and drop overview>`, :ref:`DataObject Overview <dataobject overview>`, :ref:`wx.DataObject`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Clipboard</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.Clipboard_inheritance.png" alt="Inheritance diagram of Clipboard" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Clipboard.html" title="wx.Clipboard" alt="" coords="5,83,112,112"/> <area shape="rect" id="node2" href="wx.Object.html" title="wx.Object" alt="" coords="15,5,102,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.Clipboard.__init__`                                                   Default constructor.
:meth:`~wx.Clipboard.AddData`                                                    Call this function to add the data object to the clipboard.
:meth:`~wx.Clipboard.Clear`                                                      Clears the global clipboard object and the system's clipboard if possible.
:meth:`~wx.Clipboard.Close`                                                      Call this function to close the clipboard, having opened it with :meth:`~Clipboard.Open` .
:meth:`~wx.Clipboard.Flush`                                                      Flushes the clipboard: this means that the data which is currently on clipboard will stay available even after the application exits (possibly eating memory), otherwise the clipboard will be emptied on exit.
:meth:`~wx.Clipboard.Get`                                                        Returns the global instance (wxTheClipboard) of the clipboard object.
:meth:`~wx.Clipboard.GetData`                                                    Call this function to fill `data`  with data on the clipboard, if available in the required format.
:meth:`~wx.Clipboard.IsOpened`                                                   Returns ``True`` if the clipboard has been opened.
:meth:`~wx.Clipboard.IsSupported`                                                Returns ``True`` if there is data which matches the data format of the given data object currently **available**  on the clipboard.
:meth:`~wx.Clipboard.IsUsingPrimarySelection`                                    Returns ``True`` if we are using the primary selection, ``False`` if clipboard one.
:meth:`~wx.Clipboard.Open`                                                       Call this function to open the clipboard before calling :meth:`~Clipboard.SetData`   and :meth:`~Clipboard.GetData` .
:meth:`~wx.Clipboard.SetData`                                                    Call this function to set the data object to the clipboard.
:meth:`~wx.Clipboard.UsePrimarySelection`                                        On platforms supporting it (all X11-based ports), :ref:`wx.Clipboard`  uses the ``CLIPBOARD`` X11 selection by default.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.Clipboard(Object)

   **Possible constructors**::

       Clipboard()
       
   
   A class for manipulating the clipboard.



   .. method:: __init__(self)

      Default constructor.                   





   .. method:: AddData(self, data)

      Call this function to add the data object to the clipboard.                  

      This is an obsolete synonym for :meth:`SetData` .                  


      :param `data`: 
      :type `data`: wx.DataObject




      :rtype: `bool`








   .. method:: Clear(self)

      Clears the global clipboard object and the system's clipboard if possible.                   





   .. method:: Close(self)

      Call this function to close the clipboard, having opened it with :meth:`Open` .                   





   .. method:: Flush(self)

      Flushes the clipboard: this means that the data which is currently on clipboard will stay available even after the application exits (possibly eating memory), otherwise the clipboard will be emptied on exit.                  

      Currently this method is implemented in MSW and GTK and always returns ``False`` otherwise. 

                

      :rtype: `bool`







      :returns: 

         ``False`` if the operation is unsuccessful for any reason.   







      .. note:: 

         On GTK, only the non-primary selection can be flushed. Calling this function when the clipboard is using the primary selection will return ``False`` and not make any data available after the program exits.  








   .. staticmethod:: Get()

      Returns the global instance (wxTheClipboard) of the clipboard object.                  

      :rtype: :ref:`wx.Clipboard`








   .. method:: GetData(self, data)

      Call this function to fill `data`  with data on the clipboard, if available in the required format.                  

      Returns ``True`` on success.                  


      :param `data`: 
      :type `data`: wx.DataObject




      :rtype: `bool`








   .. method:: IsOpened(self)

      Returns ``True`` if the clipboard has been opened.                  

      :rtype: `bool`








   .. method:: IsSupported(self, format)

      Returns ``True`` if there is data which matches the data format of the given data object currently **available**  on the clipboard.                  

                


      :param `format`: 
      :type `format`: wx.DataFormat




      :rtype: `bool`







      .. todo:: The name of this function is misleading. This should be renamed to something that more accurately indicates what it does.    








   .. method:: IsUsingPrimarySelection(self)

      Returns ``True`` if we are using the primary selection, ``False`` if clipboard one.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`UsePrimarySelection`     








   .. method:: Open(self)

      Call this function to open the clipboard before calling :meth:`SetData`   and :meth:`GetData` .                  

      Call :meth:`Close`   when you have finished with the clipboard. You should keep the clipboard open for only a very short time. 

                

      :rtype: `bool`







      :returns: 

         ``True`` on success. This should be tested (as in the sample shown above).   








   .. method:: SetData(self, data)

      Call this function to set the data object to the clipboard.                  

      The new data object replaces any previously set one, so if the application wants to provide clipboard data in several different formats, it must use a composite data object supporting all of the formats instead of calling this function several times with different data objects as this would only leave data from the last one in the clipboard. 

      After this function has been called, the clipboard owns the data, so do not delete the data explicitly.                  


      :param `data`: 
      :type `data`: wx.DataObject




      :rtype: `bool`








   .. method:: UsePrimarySelection(self, primary=False)

      On platforms supporting it (all X11-based ports), :ref:`wx.Clipboard`  uses the ``CLIPBOARD`` X11 selection by default.                  

      When this function is called with ``True``, all subsequent clipboard operations will use ``PRIMARY`` selection until this function is called again with ``False``. 

      On the other platforms, there is no ``PRIMARY`` selection and so all clipboard operations will fail. This allows implementing the standard X11 handling of the clipboard which consists in copying data to the ``CLIPBOARD`` selection only when the user explicitly requests it (i.e. by selecting the "Copy" menu command) but putting the currently selected text into the ``PRIMARY`` selection automatically, without overwriting the normal clipboard contents with the currently selected text on the other platforms.                  


      :param `primary`: 
      :type `primary`: bool






