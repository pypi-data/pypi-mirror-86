.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.dataview.TreeListCtrl:

==========================================================================================================================================
|phoenix_title|  **wx.dataview.TreeListCtrl**
==========================================================================================================================================

A control combining :ref:`wx.TreeCtrl`  and :ref:`wx.ListCtrl`  features.          

This is a multi-column tree control optionally supporting images and checkboxes for the items in the first column. 

It is currently implemented using :ref:`wx.dataview.DataViewCtrl`  internally but provides a much simpler interface for the common use case it addresses. Thus, one of the design principles for this control is simplicity and intentionally doesn't provide all the features of :ref:`wx.dataview.DataViewCtrl`. Most importantly, this class stores all its data internally and doesn't require you to define a custom model for it. 

Instead, this controls works like :ref:`wx.TreeCtrl`  or non-virtual :ref:`wx.ListCtrl`  and allows you to simply add items to it using :meth:`wx.dataview.TreeListCtrl.AppendItem`   and related methods. Typically, you start by setting up the columns (you must have at least one) by calling :meth:`wx.dataview.TreeListCtrl.AppendColumn`   and then add the items. While only the text of the first column can be specified when adding them, you can use :meth:`wx.dataview.TreeListCtrl.SetItemText`   to set the text of the other columns. 

Unlike :ref:`wx.TreeCtrl`  or :ref:`wx.ListCtrl`  this control can sort its items on its own. To allow user to sort the control contents by clicking on some column you should use ``wx.COL_SORTABLE`` flag when adding that column to the control. When a column with this flag is clicked, the control resorts itself using the values in this column. By default the sort is done using alphabetical order comparison of the items text, which is not always correct (e.g. this doesn't work for the numeric columns). To change this you may use :meth:`~wx.dataview.TreeListCtrl.SetItemComparator`  method to provide a custom comparator, i.e. simply an object that implements comparison between the two items. The treelist sample shows an example of doing this. And if you need to sort the control programmatically, you can call :meth:`~wx.dataview.TreeListCtrl.SetSortColumn`  method. 

Here are the styles supported by this control. Notice that using ``wx.dataview.TL_USER_3STATE`` implies ``wx.dataview.TL_3STATE`` and ``wx.dataview.TL_3STATE`` in turn implies ``wx.dataview.TL_CHECKBOX``. 





.. _TreeListCtrl-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  

- ``wx.dataview.TL_SINGLE``: Single selection, this is the default.  
- ``wx.dataview.TL_MULTIPLE``: Allow multiple selection, see :meth:`~wx.dataview.TreeListCtrl.GetSelections`.  
- ``wx.dataview.TL_CHECKBOX``: Show the usual, 2 state, checkboxes for the items in the first column.  
- ``wx.dataview.TL_3STATE``: Show the checkboxes that can possibly be set by the program, but not the user, to a third, undetermined, state, for the items in the first column. Implies ``wx.dataview.TL_CHECKBOX``.  
- ``wx.dataview.TL_USER_3STATE``: Same as ``wx.dataview.TL_3STATE`` but the user can also set the checkboxes to the undetermined state. Implies ``wx.dataview.TL_3STATE``.  
- ``wx.dataview.TL_NO_HEADER``: Don't show the column headers, that are shown by default. Notice that this style is only available since wxWidgets 2.9.5.  
- ``wx.dataview.TL_DEFAULT_STYLE``: Style used by the control by default, just ``wx.dataview.TL_SINGLE`` currently.  








.. _TreeListCtrl-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.dataview.TreeListEvent` parameter.

Event macros: 

- EVT_TREELIST_SELECTION_CHANGED: Process  ``wxEVT_TREELIST_SELECTION_CHANGED``   event and notifies about the selection change in the control. In the single selection case the item indicated by the event has been selected and previously selected item, if any, was deselected. In multiple selection case, the selection of this item has just changed (it may have been either selected or deselected) but notice that the selection of other items could have changed as well, use  :meth:`wx.dataview.TreeListCtrl.GetSelections`   to retrieve the new selection if necessary.  
- EVT_TREELIST_ITEM_EXPANDING: Process  ``wxEVT_TREELIST_ITEM_EXPANDING``   event notifying about the given branch being expanded. This event is sent before the expansion occurs and can be vetoed to prevent it from happening.   
- EVT_TREELIST_ITEM_EXPANDED: Process  ``wxEVT_TREELIST_ITEM_EXPANDED``   event notifying about the expansion of the given branch. This event is sent after the expansion occurs and can't be vetoed.   
- EVT_TREELIST_ITEM_CHECKED: Process  ``wxEVT_TREELIST_ITEM_CHECKED``   event notifying about the user checking or unchecking the item. You can use  :meth:`wx.dataview.TreeListCtrl.GetCheckedState`   to retrieve the new item state and :meth:`wx.dataview.TreeListEvent.GetOldCheckedState`   to get the previous one.  
- EVT_TREELIST_ITEM_ACTIVATED: Process  ``wxEVT_TREELIST_ITEM_ACTIVATED``   event notifying about the user double clicking the item or activating it from keyboard.   
- EVT_TREELIST_ITEM_CONTEXT_MENU: Process  ``wxEVT_TREELIST_ITEM_CONTEXT_MENU``   event indicating that the popup menu for the given item should be displayed.   
- EVT_TREELIST_COLUMN_SORTED: Process  ``wxEVT_TREELIST_COLUMN_SORTED``   event indicating that the control contents has just been resorted using the specified column. The event doesn't carry the sort direction, use  :meth:`~wx.dataview.TreeListCtrl.GetSortColumn`  method if you need to know it.  








         



.. versionadded:: 2.9.3 
    







.. seealso:: :ref:`wx.TreeCtrl`, :ref:`wx.dataview.DataViewCtrl`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>TreeListCtrl</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.dataview.TreeListCtrl_inheritance.png" alt="Inheritance diagram of TreeListCtrl" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.dataview.TreeListCtrl.html" title="wx.dataview.TreeListCtrl" alt="" coords="18,237,199,267"/> <area shape="rect" id="node2" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node3" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node5" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.dataview.TreeListCtrl.__init__`                                       Default constructor, call :meth:`~TreeListCtrl.Create`   later.
:meth:`~wx.dataview.TreeListCtrl.AppendColumn`                                   Add a column with the given title and attributes.
:meth:`~wx.dataview.TreeListCtrl.AppendItem`                                     Same as :meth:`~TreeListCtrl.InsertItem`   with ``wx.dataview.TLI_LAST``.
:meth:`~wx.dataview.TreeListCtrl.AreAllChildrenInState`                          Return ``True`` if all children of the given item are in the specified state.
:meth:`~wx.dataview.TreeListCtrl.AssignImageList`                                Sets the image list and gives its ownership to the control.
:meth:`~wx.dataview.TreeListCtrl.CheckItem`                                      Change the item checked state.
:meth:`~wx.dataview.TreeListCtrl.CheckItemRecursively`                           Change the checked state of the given item and all its children.
:meth:`~wx.dataview.TreeListCtrl.ClearColumns`                                   Delete all columns.
:meth:`~wx.dataview.TreeListCtrl.Collapse`                                       Collapse the given tree branch.
:meth:`~wx.dataview.TreeListCtrl.Create`                                         Create the control window.
:meth:`~wx.dataview.TreeListCtrl.DeleteAllItems`                                 Delete all tree items.
:meth:`~wx.dataview.TreeListCtrl.DeleteColumn`                                   Delete the column with the given index.
:meth:`~wx.dataview.TreeListCtrl.DeleteItem`                                     Delete the specified item.
:meth:`~wx.dataview.TreeListCtrl.EnsureVisible`                                  Call this to ensure that the given item is visible.
:meth:`~wx.dataview.TreeListCtrl.Expand`                                         Expand the given tree branch.
:meth:`~wx.dataview.TreeListCtrl.GetCheckedState`                                Return the checked state of the item.
:meth:`~wx.dataview.TreeListCtrl.GetClassDefaultAttributes`                      
:meth:`~wx.dataview.TreeListCtrl.GetColumnCount`                                 Return the total number of columns.
:meth:`~wx.dataview.TreeListCtrl.GetColumnWidth`                                 Get the current width of the given column in pixels.
:meth:`~wx.dataview.TreeListCtrl.GetDataView`                                    Return the view part of this control as :ref:`wx.dataview.DataViewCtrl`.
:meth:`~wx.dataview.TreeListCtrl.GetFirstChild`                                  Return the first child of the given item.
:meth:`~wx.dataview.TreeListCtrl.GetFirstItem`                                   Return the first item in the tree.
:meth:`~wx.dataview.TreeListCtrl.GetItemData`                                    Get the data associated with the given item.
:meth:`~wx.dataview.TreeListCtrl.GetItemParent`                                  Return the parent of the given item.
:meth:`~wx.dataview.TreeListCtrl.GetItemText`                                    Return the text of the given item.
:meth:`~wx.dataview.TreeListCtrl.GetNextItem`                                    Get item after the given one in the depth-first tree-traversal order.
:meth:`~wx.dataview.TreeListCtrl.GetNextSibling`                                 Return the next sibling of the given item.
:meth:`~wx.dataview.TreeListCtrl.GetRootItem`                                    Return the (never shown) root item.
:meth:`~wx.dataview.TreeListCtrl.GetSelection`                                   Return the currently selected item.
:meth:`~wx.dataview.TreeListCtrl.GetSelections`                                  Returns a list of all selected items. This method can be used in
:meth:`~wx.dataview.TreeListCtrl.GetSortColumn`                                  Return the column currently used for sorting, if any.
:meth:`~wx.dataview.TreeListCtrl.GetView`                                        Return the view part of this control as a :ref:`wx.Window`.
:meth:`~wx.dataview.TreeListCtrl.InsertItem`                                     Insert a new item into the tree.
:meth:`~wx.dataview.TreeListCtrl.IsExpanded`                                     Return whether the given item is expanded.
:meth:`~wx.dataview.TreeListCtrl.IsSelected`                                     Return ``True`` if the item is selected.
:meth:`~wx.dataview.TreeListCtrl.PrependItem`                                    Same as :meth:`~TreeListCtrl.InsertItem`   with ``wx.dataview.TLI_FIRST``.
:meth:`~wx.dataview.TreeListCtrl.Select`                                         Select the given item.
:meth:`~wx.dataview.TreeListCtrl.SelectAll`                                      Select all the control items.
:meth:`~wx.dataview.TreeListCtrl.SetColumnWidth`                                 Change the width of the given column.
:meth:`~wx.dataview.TreeListCtrl.SetImageList`                                   Sets the image list.
:meth:`~wx.dataview.TreeListCtrl.SetItemComparator`                              Set the object to use for comparing the items.
:meth:`~wx.dataview.TreeListCtrl.SetItemData`                                    Set the data associated with the given item.
:meth:`~wx.dataview.TreeListCtrl.SetItemImage`                                   Set the images for the given item.
:meth:`~wx.dataview.TreeListCtrl.SetItemText`                                    Set the text of the specified column of the given item.
:meth:`~wx.dataview.TreeListCtrl.SetSortColumn`                                  Set the column to use for sorting and the order in which to sort.
:meth:`~wx.dataview.TreeListCtrl.UncheckItem`                                    Uncheck the given item.
:meth:`~wx.dataview.TreeListCtrl.Unselect`                                       Deselect the given item.
:meth:`~wx.dataview.TreeListCtrl.UnselectAll`                                    Deselect all the control items.
:meth:`~wx.dataview.TreeListCtrl.UpdateItemParentStateRecursively`               Update the state of the parent item to reflect the checked state of its children.
:meth:`~wx.dataview.TreeListCtrl.WidthFor`                                       Get the width appropriate for showing the given text.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.dataview.TreeListCtrl.ColumnCount`                                    See :meth:`~wx.dataview.TreeListCtrl.GetColumnCount`
:attr:`~wx.dataview.TreeListCtrl.DataView`                                       See :meth:`~wx.dataview.TreeListCtrl.GetDataView`
:attr:`~wx.dataview.TreeListCtrl.FirstItem`                                      See :meth:`~wx.dataview.TreeListCtrl.GetFirstItem`
:attr:`~wx.dataview.TreeListCtrl.RootItem`                                       See :meth:`~wx.dataview.TreeListCtrl.GetRootItem`
:attr:`~wx.dataview.TreeListCtrl.Selection`                                      See :meth:`~wx.dataview.TreeListCtrl.GetSelection`
:attr:`~wx.dataview.TreeListCtrl.Selections`                                     See :meth:`~wx.dataview.TreeListCtrl.GetSelections`
:attr:`~wx.dataview.TreeListCtrl.SortColumn`                                     See :meth:`~wx.dataview.TreeListCtrl.GetSortColumn` and :meth:`~wx.dataview.TreeListCtrl.SetSortColumn`
:attr:`~wx.dataview.TreeListCtrl.View`                                           See :meth:`~wx.dataview.TreeListCtrl.GetView`
:attr:`~wx.dataview.TreeListCtrl.NO_IMAGE`                                       A public C++ attribute of type ``int``. A constant indicating that no image should be used for an item.                  
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.dataview.TreeListCtrl(Window)

   **Possible constructors**::

       TreeListCtrl()
       
       TreeListCtrl(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
                    style=TL_DEFAULT_STYLE, name=TreeListCtrlNameStr)
       
   
   A control combining TreeCtrl and ListCtrl features.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor, call :meth:`Create`   later.                  
      
      This constructor is used during two-part construction process when it is impossible or undesirable to create the window when constructing the object.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=TL_DEFAULT_STYLE, name=TreeListCtrlNameStr)`
      
      Full constructing, creating the object and its window.                  
      
      See :meth:`Create`   for the parameters description.                  
      
      
      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AppendColumn(self, title, width=COL_WIDTH_AUTOSIZE, align=ALIGN_LEFT, flags=COL_RESIZABLE)

      Add a column with the given title and attributes.                  




      :param `title`: The column label.   
      :type `title`: string
      :param `width`: The width of the column in pixels or the special ``wx.COL_WIDTH_AUTOSIZE`` value indicating that the column should adjust to its contents. Notice that the last column is special and will be always resized to fill all the space not taken by the other columns, i.e. the width specified here is ignored for it.   
      :type `width`: int
      :param `align`: Alignment of both the column header and its items.   
      :type `align`: wx.Alignment
      :param `flags`: Column flags, currently can include ``wx.COL_RESIZABLE`` to allow the user to resize the column and ``wx.COL_SORTABLE`` to allow the user to resort the control contents by clicking on this column.   
      :type `flags`: int












      :rtype: `int`



                  



      :returns: 

         Index of the new column or -1 on failure.   








   .. method:: AppendItem(self, parent, text, imageClosed=-1, imageOpened=-1, data=None)

      Same as :meth:`InsertItem`   with ``wx.dataview.TLI_LAST``.                  


      :param `parent`: 
      :type `parent`: wx.dataview.TreeListItem
      :param `text`: 
      :type `text`: string
      :param `imageClosed`: 
      :type `imageClosed`: int
      :param `imageOpened`: 
      :type `imageOpened`: int
      :param `data`: 
      :type `data`: ClientData




      :rtype: :ref:`wx.dataview.TreeListItem`








   .. method:: AreAllChildrenInState(self, item, state)

      Return ``True`` if all children of the given item are in the specified state.                  

      This is especially useful for the controls with  ``TL_3STATE``   style to allow to decide whether the parent effective state should be the same  `state`, if all its children are in it, or ``CHK_UNDETERMINED``. 

                


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem
      :param `state`: 
      :type `state`: wx.CheckBoxState




      :rtype: `bool`







      .. seealso:: :meth:`UpdateItemParentStateRecursively`     








   .. method:: AssignImageList(self, imageList)

      Sets the image list and gives its ownership to the control.                  

      The image list assigned with this method will be automatically deleted by :ref:`wx.TreeCtrl`  as appropriate (i.e. it takes ownership of the list). 

                


      :param `imageList`: 
      :type `imageList`: wx.ImageList






      .. seealso:: :meth:`SetImageList` .   








   .. method:: CheckItem(self, item, state=CHK_CHECKED)

      Change the item checked state.                  




      :param `item`: Valid non-root tree item.   
      :type `item`: wx.dataview.TreeListItem
      :param `state`: One of ``wx.CHK_CHECKED``, ``wx.CHK_UNCHECKED`` or, for the controls with ``wx.dataview.TL_3STATE`` or ``wx.dataview.TL_USER_3STATE`` styles, ``wx.CHK_UNDETERMINED``.   
      :type `state`: wx.CheckBoxState






                  





   .. method:: CheckItemRecursively(self, item, state=CHK_CHECKED)

      Change the checked state of the given item and all its children.                  

      This is the same as :meth:`CheckItem`   but checks or unchecks not only this item itself but all its children recursively as well.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem
      :param `state`: 
      :type `state`: wx.CheckBoxState







   .. method:: ClearColumns(self)

      Delete all columns.                  

                 



      .. seealso:: :meth:`DeleteAllItems`     








   .. method:: Collapse(self, item)

      Collapse the given tree branch.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem







   .. method:: Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=TL_DEFAULT_STYLE, name=TreeListCtrlNameStr)

      Create the control window.                  

      Can be only called for the objects created using the default constructor and exactly once. 




      :param `parent`: The parent window, must be non-NULL.   
      :type `parent`: wx.Window
      :param `id`: The window identifier, may be ``ID_ANY``.   
      :type `id`: wx.WindowID
      :param `pos`: The initial window position, usually unused.   
      :type `pos`: wx.Point
      :param `size`: The initial window size, usually unused.   
      :type `size`: wx.Size
      :param `style`: The window style, see their description in the class documentation.   
      :type `style`: long
      :param `name`: The name of the window.   
      :type `name`: string
















      :rtype: `bool`



                  





   .. method:: DeleteAllItems(self)

      Delete all tree items.                   





   .. method:: DeleteColumn(self, col)

      Delete the column with the given index.                  




      :param `col`: Column index in 0 to :meth:`GetColumnCount`   (exclusive) range.   






      :rtype: `bool`



                  



      :returns: 

         True if the column was deleted, ``False`` if index is invalid or deleting the column failed for some other reason.   








   .. method:: DeleteItem(self, item)

      Delete the specified item.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem







   .. method:: EnsureVisible(self, item)

      Call this to ensure that the given item is visible.                  

                


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem






      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. method:: Expand(self, item)

      Expand the given tree branch.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem







   .. method:: GetCheckedState(self, item)

      Return the checked state of the item.                  

      The return value can be ``wx.CHK_CHECKED``, ``wx.CHK_UNCHECKED`` or ``wx.CHK_UNDETERMINED``.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem




      :rtype: :ref:`wx.CheckBoxState`








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`VisualAttributes`








   .. method:: GetColumnCount(self)

      Return the total number of columns.                   





   .. method:: GetColumnWidth(self, col)

      Get the current width of the given column in pixels.                  


      :param `col`: 




      :rtype: `int`








   .. method:: GetDataView(self)

      Return the view part of this control as :ref:`wx.dataview.DataViewCtrl`.                  

      This method may return ``None`` in the future, non DataViewCtrl-based, versions of this class, use :meth:`GetView`   unless you really need to use :ref:`wx.dataview.DataViewCtrl`  methods on the returned object.                  

      :rtype: :ref:`wx.dataview.DataViewCtrl`








   .. method:: GetFirstChild(self, item)

      Return the first child of the given item.                  

      Item may be the root item. 

      Return value may be invalid if the item doesn't have any children.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem




      :rtype: :ref:`wx.dataview.TreeListItem`








   .. method:: GetFirstItem(self)

      Return the first item in the tree.                  

      This is the first child of the root item. 

                

      :rtype: :ref:`wx.dataview.TreeListItem`







      .. seealso:: :meth:`GetNextItem`     








   .. method:: GetItemData(self, item)

      Get the data associated with the given item.                  

      The returned pointer may be ``None``. 

      It must not be deleted by the caller as this will be done by the control itself.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem




      :rtype: :ref:`ClientData`








   .. method:: GetItemParent(self, item)

      Return the parent of the given item.                  

      All the tree items visible in the tree have valid parent items, only the never shown root item has no parent.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem




      :rtype: :ref:`wx.dataview.TreeListItem`








   .. method:: GetItemText(self, item, col=0)

      Return the text of the given item.                  

      By default, returns the text of the first column but any other one can be specified using `col`  argument.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem
      :param `col`: 




      :rtype: `string`








   .. method:: GetNextItem(self, item)

      Get item after the given one in the depth-first tree-traversal order.                  

      Calling this function starting with the result of :meth:`GetFirstItem`   allows iterating over all items in the tree. 

      The iteration stops when this function returns an invalid item, i.e. ::

              item = tree.GetFirstItem()

              while item.IsOk():
                  item = tree.GetNextItem(item)

                  # Do something with every tree item ...

                 


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem




      :rtype: :ref:`wx.dataview.TreeListItem`








   .. method:: GetNextSibling(self, item)

      Return the next sibling of the given item.                  

      Return value may be invalid if there are no more siblings.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem




      :rtype: :ref:`wx.dataview.TreeListItem`








   .. method:: GetRootItem(self)

      Return the (never shown) root item.                  

      :rtype: :ref:`wx.dataview.TreeListItem`








   .. method:: GetSelection(self)

      Return the currently selected item.                  

      This method can't be used with multi-selection controls, use :meth:`GetSelections`   instead. 

      The return value may be invalid if no item has been selected yet. Once an item in a single selection control was selected, it will keep a valid selection.                  

      :rtype: :ref:`wx.dataview.TreeListItem`








   .. method:: GetSelections(self)

                              Returns a list of all selected items. This method can be used in
                              both single and multi-selection case. 

      :rtype: :ref:`PyObject`








   .. method:: GetSortColumn(self)

      Return the column currently used for sorting, if any.                  

      If the control is currently unsorted, the function simply returns ``False`` and doesn't modify any of its output parameters. 







      :rtype: `tuple`



                  



      :returns: 

         ( `bool`, `col`, `ascendingOrder` ) 








   .. method:: GetView(self)

      Return the view part of this control as a :ref:`wx.Window`.                  

      This method always returns non-NULL pointer once the window was created.                  

      :rtype: :ref:`Window`








   .. method:: InsertItem(self, parent, previous, text, imageClosed=-1, imageOpened=-1, data=None)

      Insert a new item into the tree.                  




      :param `parent`: The item parent. Must be valid, may be :meth:`GetRootItem` .   
      :type `parent`: wx.dataview.TreeListItem
      :param `previous`: The previous item that this one should be inserted immediately after. It must be valid but may be one of the special values ``wx.dataview.TLI_FIRST`` or ``wx.dataview.TLI_LAST`` indicating that the item should be either inserted before the first child of its parent (if any) or after the last one.   
      :type `previous`: wx.dataview.TreeListItem
      :param `text`: The item text.   
      :type `text`: string
      :param `imageClosed`: The normal item image, may be ``wx.NO_IMAGE`` to not show any image.   
      :type `imageClosed`: int
      :param `imageOpened`: The item image shown when it's in the expanded state.   
      :type `imageOpened`: int
      :param `data`: Optional client data pointer that can be later retrieved using :meth:`GetItemData`   and will be deleted by the tree when the item itself is deleted.   
      :type `data`: ClientData
















      :rtype: :ref:`wx.dataview.TreeListItem`



                  





   .. method:: IsExpanded(self, item)

      Return whether the given item is expanded.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem




      :rtype: `bool`








   .. method:: IsSelected(self, item)

      Return ``True`` if the item is selected.                  

      This method can be used in both single and multiple selection modes.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem




      :rtype: `bool`








   .. method:: PrependItem(self, parent, text, imageClosed=-1, imageOpened=-1, data=None)

      Same as :meth:`InsertItem`   with ``wx.dataview.TLI_FIRST``.                  


      :param `parent`: 
      :type `parent`: wx.dataview.TreeListItem
      :param `text`: 
      :type `text`: string
      :param `imageClosed`: 
      :type `imageClosed`: int
      :param `imageOpened`: 
      :type `imageOpened`: int
      :param `data`: 
      :type `data`: ClientData




      :rtype: :ref:`wx.dataview.TreeListItem`








   .. method:: Select(self, item)

      Select the given item.                  

      In single selection mode, deselects any other selected items, in multi-selection case it adds to the selection.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem







   .. method:: SelectAll(self)

      Select all the control items.                  

      Can be only used in multi-selection mode.                   





   .. method:: SetColumnWidth(self, col, width)

      Change the width of the given column.                  

      Set column width to either the given value in pixels or to the value large enough to fit all of the items if width is ``wx.COL_WIDTH_AUTOSIZE``. 

      Notice that setting the width of the last column is ignored as this column is always resized to fill the space left by the other columns.                  


      :param `col`: 
      :param `width`: 
      :type `width`: int







   .. method:: SetImageList(self, imageList)

      Sets the image list.                  

      The image list assigned with this method will **not**  be deleted by the control itself and you will need to delete it yourself, use :meth:`AssignImageList`   to give the image list ownership to the control. 




      :param `imageList`: Image list to use, may be ``None`` to not show any images any more.   
      :type `imageList`: wx.ImageList




                  





   .. method:: SetItemComparator(self, comparator)

      Set the object to use for comparing the items.                  

      This object will be used when the control is being sorted because the user clicked on a sortable column or :meth:`SetSortColumn`   was called. 

      The provided pointer is stored by the control so the object it points to must have a life-time equal or greater to that of the control itself. In addition, the pointer can be ``None`` to stop using custom comparator and revert to the default alphabetical comparison.                  


      :param `comparator`: 
      :type `comparator`: wx.dataview.TreeListItemComparator







   .. method:: SetItemData(self, item, data)

      Set the data associated with the given item.                  

      Previous client data, if any, is deleted when this function is called so it may be used to delete the current item data object and reset it by passing ``None`` as `data`  argument.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem
      :param `data`: 
      :type `data`: ClientData







   .. method:: SetItemImage(self, item, closed, opened=-1)

      Set the images for the given item.                  

      See :meth:`InsertItem`   for the images parameters descriptions.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem
      :param `closed`: 
      :type `closed`: int
      :param `opened`: 
      :type `opened`: int







   .. method:: SetItemText(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetItemText** `(self, item, col, text)`
      
      Set the text of the specified column of the given item.                  
      
      
      :param `item`: 
      :type `item`: wx.dataview.TreeListItem
      :param `col`: 
      :param `text`: 
      :type `text`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetItemText** `(self, item, text)`
      
      Set the text of the first column of the given item.                  
      
      
      :param `item`: 
      :type `item`: wx.dataview.TreeListItem
      :param `text`: 
      :type `text`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetSortColumn(self, col, ascendingOrder=True)

      Set the column to use for sorting and the order in which to sort.                  

      Calling this method resorts the control contents using the values of the items in the specified column. Sorting uses custom comparator set with :meth:`SetItemComparator`   or alphabetical comparison of items texts if none was specified. 

      Notice that currently there is no way to reset sort order. 




      :param `col`: A valid column index.   
      :param `ascendingOrder`: Indicates whether the items should be sorted in ascending (A to Z) or descending (Z to A) order.   
      :type `ascendingOrder`: bool






                  





   .. method:: UncheckItem(self, item)

      Uncheck the given item.                  

      This is synonymous with CheckItem(wxCHK_UNCHECKED).                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem







   .. method:: Unselect(self, item)

      Deselect the given item.                  

      This method can be used in multiple selection mode only.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem







   .. method:: UnselectAll(self)

      Deselect all the control items.                  

      Can be only used in multi-selection mode.                   





   .. method:: UpdateItemParentStateRecursively(self, item)

      Update the state of the parent item to reflect the checked state of its children.                  

      This method updates the parent of this item recursively: if this item and all its siblings are checked, the parent will become checked as well. If this item and all its siblings are unchecked, the parent will be unchecked. And if the siblings of this item are not all in the same state, the parent will be switched to indeterminate state. And then the same logic will be applied to the parents parent and so on recursively. 

      This is typically called when the state of the given item has changed from EVT_TREELIST_ITEM_CHECKED() handler in the controls which have ``wx.dataview.TL_3STATE`` flag. Notice that without this flag this function can't work as it would be unable to set the state of a parent with both checked and unchecked items so it's only allowed to call it when this flag is set.                  


      :param `item`: 
      :type `item`: wx.dataview.TreeListItem







   .. method:: WidthFor(self, text)

      Get the width appropriate for showing the given text.                  

      This is typically used as second argument for :meth:`AppendColumn`   or with :meth:`SetColumnWidth` .                  


      :param `text`: 
      :type `text`: string




      :rtype: `int`








   .. attribute:: ColumnCount

      See :meth:`~wx.dataview.TreeListCtrl.GetColumnCount`


   .. attribute:: DataView

      See :meth:`~wx.dataview.TreeListCtrl.GetDataView`


   .. attribute:: FirstItem

      See :meth:`~wx.dataview.TreeListCtrl.GetFirstItem`


   .. attribute:: NO_IMAGE

      A public C++ attribute of type ``int``. A constant indicating that no image should be used for an item.                  


   .. attribute:: RootItem

      See :meth:`~wx.dataview.TreeListCtrl.GetRootItem`


   .. attribute:: Selection

      See :meth:`~wx.dataview.TreeListCtrl.GetSelection`


   .. attribute:: Selections

      See :meth:`~wx.dataview.TreeListCtrl.GetSelections`


   .. attribute:: SortColumn

      See :meth:`~wx.dataview.TreeListCtrl.GetSortColumn` and :meth:`~wx.dataview.TreeListCtrl.SetSortColumn`


   .. attribute:: View

      See :meth:`~wx.dataview.TreeListCtrl.GetView`

