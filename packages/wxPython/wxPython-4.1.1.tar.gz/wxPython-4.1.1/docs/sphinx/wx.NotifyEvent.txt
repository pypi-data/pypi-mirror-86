.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.NotifyEvent:

==========================================================================================================================================
|phoenix_title|  **wx.NotifyEvent**
==========================================================================================================================================

This class is not used by the event handlers by itself, but is a base class for other event classes (such as :ref:`wx.BookCtrlEvent`).          

It (or an object of a derived class) is sent when the controls state is being changed and allows the program to :meth:`wx.NotifyEvent.Veto`   this change if it wants to prevent it from happening. 







         



.. seealso:: :ref:`wx.BookCtrlEvent`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>NotifyEvent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.NotifyEvent_inheritance.png" alt="Inheritance diagram of NotifyEvent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.NotifyEvent.html" title="wx.NotifyEvent" alt="" coords="19,237,141,267"/> <area shape="rect" id="node2" href="wx.CommandEvent.html" title="wx.CommandEvent" alt="" coords="5,160,155,189"/> <area shape="rect" id="node3" href="wx.Event.html" title="wx.Event" alt="" coords="39,83,121,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="37,5,123,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.aui.AuiToolBarEvent`, :ref:`wx.BookCtrlEvent`, :ref:`wx.dataview.DataViewEvent`, :ref:`wx.grid.GridEvent`, :ref:`wx.grid.GridRangeSelectEvent`, :ref:`wx.grid.GridSizeEvent`, :ref:`wx.HeaderCtrlEvent`, :ref:`wx.ListEvent`, :ref:`wx.media.MediaEvent`, :ref:`wx.ribbon.RibbonBarEvent`, :ref:`wx.richtext.RichTextEvent`, :ref:`wx.SpinDoubleEvent`, :ref:`wx.SpinEvent`, :ref:`wx.SplitterEvent`, :ref:`wx.TreeEvent`, :ref:`wx.dataview.TreeListEvent`, :ref:`wx.html2.WebViewEvent`, :ref:`wx.adv.WizardEvent`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.NotifyEvent.__init__`                                                 Constructor (used internally by wxWidgets only).
:meth:`~wx.NotifyEvent.Allow`                                                    This is the opposite of :meth:`~NotifyEvent.Veto` : it explicitly allows the event to be processed.
:meth:`~wx.NotifyEvent.IsAllowed`                                                Returns ``True`` if the change is allowed (:meth:`~NotifyEvent.Veto`   hasn't been called) or ``False`` otherwise (if it was).
:meth:`~wx.NotifyEvent.Veto`                                                     Prevents the change announced by this event from happening.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.NotifyEvent(CommandEvent)

   **Possible constructors**::

       NotifyEvent(eventType=wxEVT_NULL, id=0)
       
   
   This class is not used by the event handlers by itself, but is a base
   class for other event classes (such as BookCtrlEvent).



   .. method:: __init__(self, eventType=wxEVT_NULL, id=0)

      Constructor (used internally by wxWidgets only).                  


      :param `eventType`: 
      :type `eventType`: wx.EventType
      :param `id`: 
      :type `id`: int







   .. method:: Allow(self)

      This is the opposite of :meth:`Veto` : it explicitly allows the event to be processed.                  

      For most events it is not necessary to call this method as the events are allowed anyhow but some are forbidden by default (this will be mentioned in the corresponding event description).                   





   .. method:: IsAllowed(self)

      Returns ``True`` if the change is allowed (:meth:`Veto`   hasn't been called) or ``False`` otherwise (if it was).                  

      :rtype: `bool`








   .. method:: Veto(self)

      Prevents the change announced by this event from happening.                  

      It is in general a good idea to notify the user about the reasons for vetoing the change because otherwise the applications behaviour (which just refuses to do what the user wants) might be quite surprising.                   




