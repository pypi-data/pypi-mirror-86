.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.RendererNative:

==========================================================================================================================================
|phoenix_title|  **wx.RendererNative**
==========================================================================================================================================

First, a brief introduction to :ref:`wx.RendererNative`  and why it is needed.          

Usually wxWidgets uses the underlying low level GUI system to draw all the controls - this is what we mean when we say that it is a "native" framework. However not all controls exist under all (or even any) platforms and in this case wxWidgets provides a default, generic, implementation of them written in wxWidgets itself. 

These controls don't have the native appearance if only the standard line drawing and other graphics primitives are used, because the native appearance is different under different platforms while the lines are always drawn in the same way. 

This is why we have renderers: :ref:`wx.RendererNative`  is a class which virtualizes the drawing, i.e. it abstracts the drawing operations and allows you to draw say, a button, without caring about exactly how this is done. Of course, as we can draw the button differently in different renderers, this also allows us to emulate the native look and feel. 

So the renderers work by exposing a large set of high-level drawing functions which are used by the generic controls. There is always a default global renderer but it may be changed or extended by the user, see :ref:`Render Sample <render sample>`. 

All drawing functions take some standard parameters: 



- `win`  - The window being drawn. It is normally not used and when it is it should only be used as a generic :ref:`wx.Window`  (in order to get its low level handle, for example), but you should not assume that it is of some given type as the same renderer function may be reused for drawing different kinds of control.  
- `dc`  - The :ref:`wx.DC`  to draw on. Only this device context should be used for drawing. It is not necessary to restore pens and brushes for it on function exit but, on the other hand, you shouldn't assume that it is in any specific state on function entry: the rendering functions should always prepare it.  
- `rect`  - The bounding rectangle for the element to be drawn.  
- `flags`  - The optional flags (none by default) which can be a combination of the ``CONTROL_FLAGS``. 

Note that each drawing function restores the
:ref:`wx.DC`  attributes if it changes them, so it is safe to assume that the same pen, brush and colours that were active before the call to this function are still in effect after it. 









|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>RendererNative</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.RendererNative_inheritance.png" alt="Inheritance diagram of RendererNative" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.RendererNative.html" title="wx.RendererNative" alt="" coords="5,5,152,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.DelegateRendererNative`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.RendererNative.DrawCheckBox`                                          Draw a check box.
:meth:`~wx.RendererNative.DrawCheckMark`                                         Draw a check mark.
:meth:`~wx.RendererNative.DrawChoice`                                            Draw a native :ref:`wx.Choice`.
:meth:`~wx.RendererNative.DrawCollapseButton`                                    Draw a collapse button.
:meth:`~wx.RendererNative.DrawComboBox`                                          Draw a native :ref:`wx.ComboBox`.
:meth:`~wx.RendererNative.DrawComboBoxDropButton`                                Draw a button like the one used by :ref:`wx.ComboBox`  to show a drop down window.
:meth:`~wx.RendererNative.DrawDropArrow`                                         Draw a drop down arrow that is suitable for use outside a combo box.
:meth:`~wx.RendererNative.DrawFocusRect`                                         Draw a focus rectangle using the specified rectangle.
:meth:`~wx.RendererNative.DrawGauge`                                             Draw a progress bar in the specified rectangle.
:meth:`~wx.RendererNative.DrawHeaderButton`                                      Draw the header control button (used, for example, by :ref:`wx.ListCtrl`).
:meth:`~wx.RendererNative.DrawHeaderButtonContents`                              Draw the contents of a header control button (label, sort arrows, etc.).
:meth:`~wx.RendererNative.DrawItemSelectionRect`                                 Draw a selection rectangle underneath the text as used e.g.
:meth:`~wx.RendererNative.DrawItemText`                                          Draw item text in the correct color based on selection status.
:meth:`~wx.RendererNative.DrawPushButton`                                        Draw a blank push button that looks very similar to :ref:`wx.Button`.
:meth:`~wx.RendererNative.DrawRadioBitmap`                                       Draw a native :ref:`wx.RadioButton`  bitmap.
:meth:`~wx.RendererNative.DrawSplitterBorder`                                    Draw the border for sash window: this border must be such that the sash drawn by :meth:`~RendererNative.DrawSplitterSash`   blends into it well.
:meth:`~wx.RendererNative.DrawSplitterSash`                                      Draw a sash.
:meth:`~wx.RendererNative.DrawTextCtrl`                                          Draw a native :ref:`wx.TextCtrl`  frame.
:meth:`~wx.RendererNative.DrawTitleBarBitmap`                                    Draw a title bar button in the given state.
:meth:`~wx.RendererNative.DrawTreeItemButton`                                    Draw the expanded/collapsed icon for a tree control item.
:meth:`~wx.RendererNative.Get`                                                   Return the currently used renderer.
:meth:`~wx.RendererNative.GetCheckBoxSize`                                       Returns the size of a check box.
:meth:`~wx.RendererNative.GetCheckMarkSize`                                      Returns the size of a check mark.
:meth:`~wx.RendererNative.GetCollapseButtonSize`                                 Returns the size of a collapse button.
:meth:`~wx.RendererNative.GetDefault`                                            Return the default (native) implementation for this platform â€“  this is also the one used by default but this may be changed by calling :meth:`~RendererNative.Set`   in which case the return value of this method may be different from the return value of :meth:`~RendererNative.Get` .
:meth:`~wx.RendererNative.GetExpanderSize`                                       Returns the size of the expander used in tree-like controls.
:meth:`~wx.RendererNative.GetGeneric`                                            Return the generic implementation of the renderer.
:meth:`~wx.RendererNative.GetHeaderButtonHeight`                                 Returns the height of a header button, either a fixed platform height if available, or a generic height based on the `win`  window's font.
:meth:`~wx.RendererNative.GetHeaderButtonMargin`                                 Returns the horizontal margin on the left and right sides of header button's label.
:meth:`~wx.RendererNative.GetSplitterParams`                                     Get the splitter parameters, see :ref:`wx.SplitterRenderParams`.
:meth:`~wx.RendererNative.GetVersion`                                            This function is used for version checking: :meth:`~RendererNative.Load`   refuses to load any shared libraries implementing an older or incompatible version.
:meth:`~wx.RendererNative.Load`                                                  Load the renderer from the specified ``DLL``, the returned pointer must be deleted by caller if not ``None`` when it is not used any more.
:meth:`~wx.RendererNative.Set`                                                   Set the renderer to use, passing ``None`` reverts to using the default renderer (the global renderer must always exist).
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.RendererNative.Version`                                               See :meth:`~wx.RendererNative.GetVersion`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.RendererNative(object)

   First, a brief introduction to RendererNative and why it is needed.



   .. method:: DrawCheckBox(self, win, dc, rect, flags=0)

      Draw a check box.                  

      `flags`  may have the  ``CONTROL_CHECKED`` ,   ``CONTROL_CURRENT``   or   ``CONTROL_UNDETERMINED``   bit set, see  ``CONTROL_FLAGS``.                  


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int







   .. method:: DrawCheckMark(self, win, dc, rect, flags=0)

      Draw a check mark.                  

      `flags`  may have the  ``CONTROL_DISABLED``   bit set, see  ``CONTROL_FLAGS``. 

                


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int






      .. versionadded:: 4.1/wxWidgets-3.1.3  
     








   .. method:: DrawChoice(self, win, dc, rect, flags=0)

      Draw a native :ref:`wx.Choice`.                  


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int







   .. method:: DrawCollapseButton(self, win, dc, rect, flags=0)

      Draw a collapse button.                  

      `flags`  may have the  ``CONTROL_EXPANDED``   or   ``CONTROL_CURRENT``   bit set, see  ``CONTROL_FLAGS``. 

                


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int






      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. method:: DrawComboBox(self, win, dc, rect, flags=0)

      Draw a native :ref:`wx.ComboBox`.                  


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int







   .. method:: DrawComboBoxDropButton(self, win, dc, rect, flags=0)

      Draw a button like the one used by :ref:`wx.ComboBox`  to show a drop down window.                  

      The usual appearance is a downwards pointing arrow. 

      `flags`  may have the  ``CONTROL_PRESSED``   or   ``CONTROL_CURRENT``   bit set, see  ``CONTROL_FLAGS``.                  


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int







   .. method:: DrawDropArrow(self, win, dc, rect, flags=0)

      Draw a drop down arrow that is suitable for use outside a combo box.                  

      Arrow will have transparent background. 

      `rect`  is not entirely filled by the arrow. Instead, you should use bounding rectangle of a drop down button which arrow matches the size you need. 

      `flags`  may have the  ``CONTROL_PRESSED``   or   ``CONTROL_CURRENT``   bit set, see  ``CONTROL_FLAGS``.                  


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int







   .. method:: DrawFocusRect(self, win, dc, rect, flags=0)

      Draw a focus rectangle using the specified rectangle.                  

      :ref:`wx.ListCtrl`. 

      The only supported flags is  ``CONTROL_SELECTED``   for items which are selected. see  ``CONTROL_FLAGS``.                  


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int







   .. method:: DrawGauge(self, win, dc, rect, value, max, flags=0)

      Draw a progress bar in the specified rectangle.                  

      The `value`  and `max`  arguments determine the part of the progress bar that is drawn as being filled in, `max`  must be strictly positive and `value`  must be between 0 and `max`. 

       ``CONTROL_SPECIAL``   must be set in  `flags`  for the vertical gauges. 

                


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `value`: 
      :type `value`: int
      :param `max`: 
      :type `max`: int
      :param `flags`: 
      :type `flags`: int






      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. method:: DrawHeaderButton(self, win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None)

      Draw the header control button (used, for example, by :ref:`wx.ListCtrl`).                  

      Depending on platforms the `flags`  parameter may support the  ``CONTROL_SELECTED``       ``CONTROL_DISABLED``   and   ``CONTROL_CURRENT``   bits, see  ``CONTROL_FLAGS``. 

                


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int
      :param `sortArrow`: 
      :type `sortArrow`: wx.HeaderSortIconType
      :param `params`: 
      :type `params`: wx.HeaderButtonParams




      :rtype: `int`







      :returns: 

         The optimal width to contain the unabbreviated label text or bitmap, the sort arrow if present, and internal margins.   








   .. method:: DrawHeaderButtonContents(self, win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None)

      Draw the contents of a header control button (label, sort arrows, etc.).                  

      This function is normally only called by :meth:`DrawHeaderButton` . 

      Depending on platforms the `flags`  parameter may support the  ``CONTROL_SELECTED``       ``CONTROL_DISABLED``   and   ``CONTROL_CURRENT``   bits, see  ``CONTROL_FLAGS``. 

                


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int
      :param `sortArrow`: 
      :type `sortArrow`: wx.HeaderSortIconType
      :param `params`: 
      :type `params`: wx.HeaderButtonParams




      :rtype: `int`







      :returns: 

         The optimal width to contain the unabbreviated label text or bitmap, the sort arrow if present, and internal margins.   








   .. method:: DrawItemSelectionRect(self, win, dc, rect, flags=0)

      Draw a selection rectangle underneath the text as used e.g.                  

      in a :ref:`wx.ListCtrl`. 

      The supported `flags`  are  ``CONTROL_SELECTED``   for items which are selected (e.g. often a blue rectangle) and   ``CONTROL_CURRENT``   for the item that has the focus (often a dotted line around the item's text).   ``CONTROL_FOCUSED``   may be used to indicate if the control has the focus (otherwise the selection rectangle is e.g. often grey and not blue). This may be ignored by the renderer or deduced by the code directly from the  `win`. Additionally  ``CONTROL_CELL``   may be used to draw a cell inside a bigger selection area. 

                


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int






      .. seealso:: :meth:`DrawItemText`     








   .. method:: DrawItemText(self, win, dc, text, rect, align=ALIGN_LEFT|ALIGN_TOP, flags=0, ellipsizeMode=ELLIPSIZE_END)

      Draw item text in the correct color based on selection status.                  

      Background of the text should be painted with :meth:`DrawItemSelectionRect` . 

      The supported `flags`  are  ``CONTROL_SELECTED``   for items which are selected.   ``CONTROL_FOCUSED``   may be used to indicate if the control has the focus.   ``CONTROL_DISABLED``   may be used to indicate if the control is disabled. 

                


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `text`: 
      :type `text`: string
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `align`: 
      :type `align`: int
      :param `flags`: 
      :type `flags`: int
      :param `ellipsizeMode`: 
      :type `ellipsizeMode`: wx.EllipsizeMode






      .. versionadded:: 4.1/wxWidgets-3.1.0  
     







      .. seealso:: :meth:`DrawItemSelectionRect`     








   .. method:: DrawPushButton(self, win, dc, rect, flags=0)

      Draw a blank push button that looks very similar to :ref:`wx.Button`.                  

      `flags`  may have the  ``CONTROL_PRESSED`` ,   ``CONTROL_CURRENT``   or   ``CONTROL_ISDEFAULT``   bit set, see  ``CONTROL_FLAGS``.                  


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int







   .. method:: DrawRadioBitmap(self, win, dc, rect, flags=0)

      Draw a native :ref:`wx.RadioButton`  bitmap.                  


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int







   .. method:: DrawSplitterBorder(self, win, dc, rect, flags=0)

      Draw the border for sash window: this border must be such that the sash drawn by :meth:`DrawSplitterSash`   blends into it well.                  


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int







   .. method:: DrawSplitterSash(self, win, dc, size, position, orient, flags=0)

      Draw a sash.                  

      The `orient`  parameter defines whether the sash should be vertical or horizontal and how the `position`  should be interpreted.                  


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `size`: 
      :type `size`: wx.Size
      :param `position`: 
      :type `position`: int
      :param `orient`: 
      :type `orient`: wx.Orientation
      :param `flags`: 
      :type `flags`: int







   .. method:: DrawTextCtrl(self, win, dc, rect, flags=0)

      Draw a native :ref:`wx.TextCtrl`  frame.                  


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int







   .. method:: DrawTitleBarBitmap(self, win, dc, rect, button, flags=0)

      Draw a title bar button in the given state.                   





   .. method:: DrawTreeItemButton(self, win, dc, rect, flags=0)

      Draw the expanded/collapsed icon for a tree control item.                  

      To draw an expanded button the `flags`  parameter must contain  ``CONTROL_EXPANDED``   bit, see  ``CONTROL_FLAGS``.                  


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `flags`: 
      :type `flags`: int







   .. staticmethod:: Get()

      Return the currently used renderer.                  

      :rtype: :ref:`wx.RendererNative`








   .. method:: GetCheckBoxSize(self, win, flags=0)

      Returns the size of a check box.                  




      :param `win`: A valid, i.e. non-null, window pointer which is used to get the theme defining the checkbox size under some platforms.  
      :type `win`: wx.Window
      :param `flags`: The only acceptable flag is  ``CONTROL_CELL``   which means that just the size of the checkbox itself is returned, without any margins that are included by default. This parameter is only available in wxWidgets 3.1.4 or later.    
      :type `flags`: int








      :rtype: :ref:`wx.Size`



                  





   .. method:: GetCheckMarkSize(self, win)

      Returns the size of a check mark.                  




      :param `win`: A valid, i.e. non-null, window pointer which is used to get the theme defining the checkmark size under some platforms.  
      :type `win`: wx.Window






      :rtype: :ref:`wx.Size`



                  



      .. versionadded:: 4.1/wxWidgets-3.1.3  
     








   .. method:: GetCollapseButtonSize(self, win, dc)

      Returns the size of a collapse button.                  

                


      :param `win`: 
      :type `win`: wx.Window
      :param `dc`: 
      :type `dc`: wx.DC




      :rtype: :ref:`wx.Size`







      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. staticmethod:: GetDefault()

      Return the default (native) implementation for this platform â€“  this is also the one used by default but this may be changed by calling :meth:`Set`   in which case the return value of this method may be different from the return value of :meth:`Get` .                  

      :rtype: :ref:`wx.RendererNative`








   .. method:: GetExpanderSize(self, win)

      Returns the size of the expander used in tree-like controls.                  




      :param `win`: A valid, i.e. non-null, window pointer which is used to get the theme defining the expander size under some platforms.  
      :type `win`: wx.Window






      :rtype: :ref:`wx.Size`



                  



      .. versionadded:: 4.1/wxWidgets-3.1.3  
     








   .. staticmethod:: GetGeneric()

      Return the generic implementation of the renderer.                  

      Under some platforms, this is the default renderer implementation, others have platform-specific default renderer which can be retrieved by calling :meth:`GetDefault` .                  

      :rtype: :ref:`wx.RendererNative`








   .. method:: GetHeaderButtonHeight(self, win)

      Returns the height of a header button, either a fixed platform height if available, or a generic height based on the `win`  window's font.                  


      :param `win`: 
      :type `win`: wx.Window




      :rtype: `int`








   .. method:: GetHeaderButtonMargin(self, win)

      Returns the horizontal margin on the left and right sides of header button's label.                  

                


      :param `win`: 
      :type `win`: wx.Window




      :rtype: `int`







      .. versionadded:: 2.9.2 
     








   .. method:: GetSplitterParams(self, win)

      Get the splitter parameters, see :ref:`wx.SplitterRenderParams`.                  

      The `win`  parameter should be a :ref:`wx.SplitterWindow`.                  


      :param `win`: 
      :type `win`: wx.Window




      :rtype: :ref:`wx.SplitterRenderParams`








   .. method:: GetVersion(self)

      This function is used for version checking: :meth:`Load`   refuses to load any shared libraries implementing an older or incompatible version.                  

                

      :rtype: :ref:`wx.RendererVersion`







      .. note:: 

         The implementation of this method is always the same in all renderers (simply construct :ref:`wx.RendererVersion`  using the  ``RendererVersion::Current_XXX``   values), but it has to be in the derived, not base, class, to detect mismatches between the renderers versions and so you have to implement it anew in all renderers.    








   .. staticmethod:: Load(name)

      Load the renderer from the specified ``DLL``, the returned pointer must be deleted by caller if not ``None`` when it is not used any more.                  

      The `name`  should be just the base name of the renderer and not the full name of the ``DLL`` file which is constructed differently (using :meth:`DynamicLibrary.CanonicalizePluginName` ) on different systems.                  


      :param `name`: 
      :type `name`: string




      :rtype: :ref:`wx.RendererNative`








   .. staticmethod:: Set(renderer)

      Set the renderer to use, passing ``None`` reverts to using the default renderer (the global renderer must always exist).                  

      Return the previous renderer used with :meth:`Set`   or ``None`` if none.                  


      :param `renderer`: 
      :type `renderer`: wx.RendererNative




      :rtype: :ref:`wx.RendererNative`








   .. attribute:: Version

      See :meth:`~wx.RendererNative.GetVersion`

