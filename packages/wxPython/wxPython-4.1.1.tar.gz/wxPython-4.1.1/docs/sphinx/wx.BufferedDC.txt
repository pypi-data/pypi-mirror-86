.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.BufferedDC:

==========================================================================================================================================
|phoenix_title|  **wx.BufferedDC**
==========================================================================================================================================

This class provides a simple way to avoid flicker: when drawing on it, everything is in fact first drawn on an in-memory buffer (a :ref:`wx.Bitmap`) and then copied to the screen, using the associated :ref:`wx.DC`, only once, when this object is destroyed.          

:ref:`wx.BufferedDC`  itself is typically associated with :ref:`wx.ClientDC`, if you want to use it in your  ``EVT_PAINT``   handler, you should look at  :ref:`wx.BufferedPaintDC`  instead. 

When used like this, a valid `DC`  must be specified in the constructor while the `buffer`  bitmap doesn't have to be explicitly provided, by default this class will allocate the bitmap of required size itself. However using a dedicated bitmap can speed up the redrawing process by eliminating the repeated creation and destruction of a possibly big bitmap. Otherwise, :ref:`wx.BufferedDC`  can be used in the same way as any other device context. 

Another possible use for :ref:`wx.BufferedDC`  is to use it to maintain a backing store for the window contents. In this case, the associated `DC`  may be ``None`` but a valid backing store bitmap should be specified. 

Finally, please note that GTK+ 2.0 as well as macOS provide double buffering themselves natively. You can either use :meth:`wx.Window.IsDoubleBuffered`   to determine whether you need to use buffering or not, or use :ref:`wx.AutoBufferedPaintDC`  to avoid needless double buffering on the systems which already do it automatically. 







         



.. seealso:: :ref:`wx.DC`, :ref:`wx.MemoryDC`, :ref:`wx.BufferedPaintDC`, :ref:`wx.AutoBufferedPaintDC`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>BufferedDC</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.BufferedDC_inheritance.png" alt="Inheritance diagram of BufferedDC" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.BufferedDC.html" title="wx.BufferedDC" alt="" coords="5,237,124,267"/> <area shape="rect" id="node2" href="wx.MemoryDC.html" title="wx.MemoryDC" alt="" coords="6,160,123,189"/> <area shape="rect" id="node3" href="wx.DC.html" title="wx.DC" alt="" coords="29,83,101,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="21,5,108,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.BufferedPaintDC`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.BufferedDC.__init__`                                                  Default constructor.
:meth:`~wx.BufferedDC.GetStyle`                                                  Get the style.
:meth:`~wx.BufferedDC.Init`                                                      Initializes the object created using the default constructor.
:meth:`~wx.BufferedDC.SetStyle`                                                  Set the style.
:meth:`~wx.BufferedDC.UnMask`                                                    Blits the buffer to the dc, and detaches the dc from the buffer (so it can be effectively used once only).
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.BufferedDC.Style`                                                     See :meth:`~wx.BufferedDC.GetStyle` and :meth:`~wx.BufferedDC.SetStyle`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.BufferedDC(MemoryDC)

   **Possible constructors**::

       BufferedDC()
       
       BufferedDC(dc, area, style=BUFFER_CLIENT_AREA)
       
       BufferedDC(dc, buffer=NullBitmap, style=BUFFER_CLIENT_AREA)
       
   
   This class provides a simple way to avoid flicker: when drawing on it,
   everything is in fact first drawn on an in-memory buffer (a Bitmap)
   and then copied to the screen, using the associated DC, only once,
   when this object is destroyed.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                  
      
      You must call one of the :meth:`Init`   methods later in order to use the device context.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, dc, area, style=BUFFER_CLIENT_AREA)`
      
      Creates a buffer for the provided `dc`.                  
      
      :meth:`Init`   must not be called when using this constructor. 
      
      
      
      
      :param `dc`: The underlying DC: everything drawn to this object will be flushed to this DC when this object is destroyed. You may pass ``None`` in order to just initialize the buffer, and not flush it.   
      :type `dc`: wx.DC
      :param `area`: The size of the bitmap to be used for buffering (this bitmap is created internally when it is not given explicitly).   
      :type `area`: wx.Size
      :param `style`: ``wx.BUFFER_CLIENT_AREA`` to indicate that just the client area of the window is buffered, or ``wx.BUFFER_VIRTUAL_AREA`` to indicate that the buffer bitmap covers the virtual area.   
      :type `style`: int
      
      
      
      
      
      
      
      
                        
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, dc, buffer=NullBitmap, style=BUFFER_CLIENT_AREA)`
      
      Creates a buffer for the provided dc.                  
      
      :meth:`Init`   must not be called when using this constructor. 
      
      
      
      
      :param `dc`: The underlying DC: everything drawn to this object will be flushed to this DC when this object is destroyed. You may pass ``None`` in order to just initialize the buffer, and not flush it.   
      :type `dc`: wx.DC
      :param `buffer`: Explicitly provided bitmap to be used for buffering: this is the most efficient solution as the bitmap doesn't have to be recreated each time but it also requires more memory as the bitmap is never freed. The bitmap should have appropriate size, anything drawn outside of its bounds is clipped.   
      :type `buffer`: wx.Bitmap
      :param `style`: ``wx.BUFFER_CLIENT_AREA`` to indicate that just the client area of the window is buffered, or ``wx.BUFFER_VIRTUAL_AREA`` to indicate that the buffer bitmap covers the virtual area.   
      :type `style`: int
      
      
      
      
      
      
      
      
                        
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: GetStyle(self)

      Get the style.                  

      :rtype: `int`








   .. method:: Init(self, *args, **kw)

      Initializes the object created using the default constructor.                  

      Please see the constructors for parameter details.                   


      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **Init** `(self, dc, area, style=BUFFER_CLIENT_AREA)`
      
      
      
      
      :param `dc`: 
      :type `dc`: wx.DC
      :param `area`: 
      :type `area`: wx.Size
      :param `style`: 
      :type `style`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **Init** `(self, dc, buffer=NullBitmap, style=BUFFER_CLIENT_AREA)`
      
      
      
      
      :param `dc`: 
      :type `dc`: wx.DC
      :param `buffer`: 
      :type `buffer`: wx.Bitmap
      :param `style`: 
      :type `style`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetStyle(self, style)

      Set the style.                  


      :param `style`: 
      :type `style`: int







   .. method:: UnMask(self)

      Blits the buffer to the dc, and detaches the dc from the buffer (so it can be effectively used once only).                  

      Usually only called in the destructor or by the destructor of derived classes if the BufferedDC must blit before the derived class (which may own the dc it's blitting to) is destroyed.                   





   .. attribute:: Style

      See :meth:`~wx.BufferedDC.GetStyle` and :meth:`~wx.BufferedDC.SetStyle`

