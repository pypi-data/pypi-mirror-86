.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.aui.framemanager

.. highlight:: python



.. _wx.lib.agw.aui.framemanager.AuiPaneInfo:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.aui.framemanager.AuiPaneInfo**
==========================================================================================================================================

AuiPaneInfo specifies all the parameters for a pane. These parameters specify where
the pane is on the screen, whether it is docked or floating, or hidden. In addition,
these parameters specify the pane's docked position, floating position, preferred
size, minimum size, caption text among many other parameters.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>AuiPaneInfo</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.aui.framemanager.AuiPaneInfo_inheritance.png" alt="Inheritance diagram of AuiPaneInfo" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.aui.framemanager.AuiPaneInfo.html" title="wx.lib.agw.aui.framemanager.AuiPaneInfo" alt="" coords="5,5,301,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.__init__`                        Default class constructor.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.BestSize`                        Sets the ideal size for the pane. The docking manager will attempt to use
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.BestSize1`                       Sets the best size of the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.BestSize2`                       Sets the best size of the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Bottom`                          Sets the pane dock position to the bottom of the frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.BottomDockable`                  Indicates whether a pane can be docked at the bottom of the frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.BottomSnappable`                 Indicates whether a pane can be snapped at the bottom of the main frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Caption`                         Sets the caption of the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.CaptionVisible`                  Indicates that a pane caption should be visible. If `visible` is ``False``, no pane
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Center`                          Sets the pane to the center position of the frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.CenterPane`                      Specifies that the pane should adopt the default center pane settings.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Centre`                          Sets the pane to the center position of the frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.CentrePane`                      Specifies that the pane should adopt the default center pane settings.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.CloseButton`                     Indicates that a close button should be drawn for the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.CountButtons`                    Returns the number of visible buttons in the docked pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.DefaultPane`                     Specifies that the pane should adopt the default pane settings.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.DestroyOnClose`                  Indicates whether a pane should be destroyed when it is closed.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Direction`                       Determines the direction of the docked pane. It is functionally the
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Dock`                            Indicates that a pane should be docked. It is the opposite of :meth:`Float`.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.dock_direction_get`              Getter for the `dock_direction`.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.dock_direction_set`              Setter for the `dock_direction`.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Dockable`                        Specifies whether a frame can be docked or not. It is the same as specifying
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.DockFixed`                       Causes the containing dock to have no resize sash. This is useful
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Fixed`                           Forces a pane to be fixed size so that it cannot be resized.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Float`                           Indicates that a pane should be floated. It is the opposite of :meth:`Dock`.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Floatable`                       Sets whether the user will be able to undock a pane and turn it
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.FloatingPosition`                Sets the position of the floating pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.FloatingSize`                    Sets the size of the floating pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.FlyOut`                          Indicates whether a pane, when floating, has a "fly-out" effect
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.GetMinimizeMode`                 Returns the minimization style for this pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Gripper`                         Indicates that a gripper should be drawn for the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.GripperTop`                      Indicates that a gripper should be drawn at the top of the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.HasBorder`                       Returns ``True`` if the pane displays a border.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.HasCaption`                      Returns ``True`` if the pane displays a caption.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.HasCaptionLeft`                  Returns ``True`` if the pane displays a caption on the left (rotated by 90 degrees).
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.HasCloseButton`                  Returns ``True`` if the pane displays a button to close the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.HasFlag`                         Returns ``True`` if the the property specified by flag is active for the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.HasGripper`                      Returns ``True`` if the pane displays a gripper.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.HasGripperTop`                   Returns ``True`` if the pane displays a gripper at the top.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.HasMaximizeButton`               Returns ``True`` if the pane displays a button to maximize the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.HasMinimizeButton`               Returns ``True`` if the pane displays a button to minimize the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.HasNotebook`                     Returns whether a pane has a :class:`~wx.lib.agw.aui.auibook.AuiNotebook` or not.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.HasPinButton`                    Returns ``True`` if the pane displays a button to float the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Hide`                            Indicates that a pane should be hidden.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Icon`                            Specifies whether an icon is drawn on the left of the caption text when
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsBottomDockable`                Returns ``True`` if the pane can be docked at the bottom
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsBottomSnappable`               Returns ``True`` if the pane can be snapped at the bottom of the managed frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsDestroyOnClose`                Returns ``True`` if the pane should be destroyed when it is closed.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsDockable`                      Returns ``True`` if the pane can be docked.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsDocked`                        Returns ``True`` if the pane is docked.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsFixed`                         Returns ``True`` if the pane cannot be resized.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsFloatable`                     Returns ``True`` if the pane can be undocked and displayed as a
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsFloating`                      Returns ``True`` if the pane is floating.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsFlyOut`                        Returns ``True`` if the floating pane has a "fly-out" effect.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsHorizontal`                    Returns ``True`` if the pane `dock_direction` is horizontal.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsLeftDockable`                  Returns ``True`` if the pane can be docked at the left
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsLeftSnappable`                 Returns ``True`` if the pane can be snapped on the left of the managed frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsMaximized`                     Returns ``True`` if the pane is maximized.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsMinimized`                     Returns ``True`` if the pane is minimized.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsMovable`                       Returns ``True`` if the docked frame can be undocked or moved to
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsNotebookControl`               Returns whether the pane is a notebook control (:class:`~wx.lib.agw.aui.auibook.AuiNotebook`).
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsNotebookDockable`              Returns ``True`` if a pane can be docked on top to another to create a
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsNotebookPage`                  Returns whether the pane is a notebook page in a :class:`~wx.lib.agw.aui.auibook.AuiNotebook`.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsOk`                            Returns ``True`` if the :class:`AuiPaneInfo` structure is valid.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsResizeable`                    Returns ``True`` if the pane can be resized.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsRightDockable`                 Returns ``True`` if the pane can be docked at the right
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsRightSnappable`                Returns ``True`` if the pane can be snapped on the right of the managed frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsShown`                         Returns ``True`` if the pane is currently shown.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsSnappable`                     Returns ``True`` if the pane can be snapped.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsToolbar`                       Returns ``True`` if the pane contains a toolbar.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsTopDockable`                   Returns ``True`` if the pane can be docked at the top
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsTopSnappable`                  Returns ``True`` if the pane can be snapped at the top of the managed frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.IsVertical`                      Returns ``True`` if the pane `dock_direction` is vertical.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Layer`                           Determines the layer of the docked pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Left`                            Sets the pane dock position to the left side of the frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.LeftDockable`                    Indicates whether a pane can be docked on the left of the frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.LeftSnappable`                   Indicates whether a pane can be snapped on the left of the main frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Maximize`                        Makes the pane take up the full area.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.MaximizeButton`                  Indicates that a maximize button should be drawn for the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.MaxSize`                         Sets the maximum size of the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.MaxSize1`                        Sets the maximum size of the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.MaxSize2`                        Sets the maximum size of the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Minimize`                        Makes the pane minimized in a :class:`~wx.lib.agw.aui.auibar.AuiToolBar`.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.MinimizeButton`                  Indicates that a minimize button should be drawn for the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.MinimizeMode`                    Sets the expected minimized mode if the minimize button is visible.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.MinimizeTarget`                  Minimizes the panes using a :class:`AuiPaneInfo` as a target. As :class:`AuiPaneInfo` properties
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.MinSize`                         Sets the minimum size of the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.MinSize1`                        Sets the minimum size of the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.MinSize2`                        Sets the minimum size of the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Movable`                         Indicates whether a pane can be moved.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Name`                            Sets the name of the pane so it can be referenced in lookup functions.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.NotebookControl`                 Forces a pane to be a notebook control (:class:`~wx.lib.agw.aui.auibook.AuiNotebook`).
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.NotebookDockable`                Indicates whether a pane can be docked in an automatic :class:`~wx.lib.agw.aui.auibook.AuiNotebook`.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.NotebookPage`                    Forces a pane to be a notebook page, so that the pane can be
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.PaneBorder`                      Indicates that a border should be drawn for the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.PinButton`                       Indicates that a pin button should be drawn for the pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Position`                        Determines the position of the docked pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.ResetButtons`                    Resets all the buttons and recreates them from scratch depending on the
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Resizable`                       Allows a pane to be resizable if `resizable` is ``True``, and forces
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Restore`                         Is the reverse of :meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Maximize` and :meth:`Minimize`.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Right`                           Sets the pane dock position to the right side of the frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.RightDockable`                   Indicates whether a pane can be docked on the right of the frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.RightSnappable`                  Indicates whether a pane can be snapped on the right of the main frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Row`                             Determines the row of the docked pane.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.SetDockPos`                      Copies the `source` pane members that pertain to docking position to `self`.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.SetFlag`                         Turns the property given by `flag` on or off with the `option_state`
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.SetNameFromNotebookId`           Sets the pane name once docked in a :class:`~wx.lib.agw.aui.auibook.AuiNotebook` using the notebook id.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Show`                            Indicates that a pane should be shown.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Snappable`                       Indicates whether a pane can be snapped on the main frame. This is
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.ToolbarPane`                     Specifies that the pane should adopt the default toolbar pane settings.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Top`                             Sets the pane dock position to the top of the frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.TopDockable`                     Indicates whether a pane can be docked at the top of the frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.TopSnappable`                    Indicates whether a pane can be snapped at the top of the main frame.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Transparent`                     Makes the pane transparent when floating.
:meth:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.Window`                          Associate a :class:`wx.Window` derived window to this pane.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.lib.agw.aui.framemanager.AuiPaneInfo.dock_direction`                  Getter for the `dock_direction`.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: AuiPaneInfo(object)

   AuiPaneInfo specifies all the parameters for a pane. These parameters specify where
   the pane is on the screen, whether it is docked or floating, or hidden. In addition,
   these parameters specify the pane's docked position, floating position, preferred
   size, minimum size, caption text among many other parameters.

   .. method:: __init__(self)

      Default class constructor. 


   .. method:: BestSize(self, arg1=None, arg2=None)

      Sets the ideal size for the pane. The docking manager will attempt to use
      this size as much as possible when docking or floating the pane.
      
      This method is split in 2 versions depending on the input type. If `arg1` is
      a :class:`wx.Size` object, then :meth:`BestSize1` is called. Otherwise, :meth:`BestSize2` is called.
      
      :param `arg1`: a :class:`wx.Size` object, a (x, y) tuple or a `x` coordinate.
      :param `arg2`: a `y` coordinate (only if `arg1` is a `x` coordinate, otherwise unused).


   .. method:: BestSize1(self, size)

      Sets the best size of the pane.
      
      :see: :meth:`BestSize` for an explanation of input parameters.


   .. method:: BestSize2(self, x, y)

      Sets the best size of the pane.
      
      :see: :meth:`BestSize` for an explanation of input parameters.


   .. method:: Bottom(self)

      Sets the pane dock position to the bottom of the frame.
      
      :note: This is the same thing as calling :meth:`~AuiPaneInfo.Direction` with ``AUI_DOCK_BOTTOM`` as
       parameter.


   .. method:: BottomDockable(self, b=True)

      Indicates whether a pane can be docked at the bottom of the frame.
      
      :param bool `b`: whether the pane can be docked at the bottom or not.


   .. method:: BottomSnappable(self, b=True)

      Indicates whether a pane can be snapped at the bottom of the main frame.
      
      :param bool `b`: whether the pane can be snapped at the bottom of the main frame or not.


   .. method:: Caption(self, caption)

      Sets the caption of the pane.
      
      :param string `caption`: a string specifying the pane caption.


   .. method:: CaptionVisible(self, visible=True, left=False)

      Indicates that a pane caption should be visible. If `visible` is ``False``, no pane
      caption is drawn.
      
      :param bool `visible`: whether the caption should be visible or not;
      :param bool `left`: whether the caption should be drawn on the left (rotated by 90 degrees) or not.


   .. method:: Center(self)

      Sets the pane to the center position of the frame.
      
      The centre pane is the space in the middle after all border panes (left, top,
      right, bottom) are subtracted from the layout.
      
      :note: This is the same thing as calling :meth:`~AuiPaneInfo.Direction` with ``AUI_DOCK_CENTER`` as
       parameter.


   .. method:: CenterPane(self)

      Specifies that the pane should adopt the default center pane settings.
      
      Centre panes usually do not have caption bars. This function provides an easy way of
      preparing a pane to be displayed in the center dock position.


   .. method:: Centre(self)

      Sets the pane to the center position of the frame.
      
      The centre pane is the space in the middle after all border panes (left, top,
      right, bottom) are subtracted from the layout.
      
      :note: This is the same thing as calling :meth:`~AuiPaneInfo.Direction` with ``AUI_DOCK_CENTRE`` as
       parameter.


   .. method:: CentrePane(self)

      Specifies that the pane should adopt the default center pane settings.
      
      Centre panes usually do not have caption bars. This function provides an easy way of
      preparing a pane to be displayed in the center dock position.


   .. method:: CloseButton(self, visible=True)

      Indicates that a close button should be drawn for the pane.
      
      :param bool `visible`: whether the close button should be visible or not.


   .. method:: CountButtons(self)

      Returns the number of visible buttons in the docked pane. 


   .. method:: DefaultPane(self)

      Specifies that the pane should adopt the default pane settings. 


   .. method:: DestroyOnClose(self, b=True)

      Indicates whether a pane should be destroyed when it is closed.
      
      Normally a pane is simply hidden when the close button is clicked. Setting
      `b` to ``True`` will cause the window to be destroyed when the user clicks
      the pane's close button.
      
      :param bool `b`: whether the pane should be destroyed when it is closed or not.


   .. method:: Direction(self, direction)

      Determines the direction of the docked pane. It is functionally the
      same as calling :meth:`Left`, :meth:`Right`, :meth:`Top` or :meth:`Bottom`,
      except that docking direction may be specified programmatically via the parameter `direction`.
      
      :param integer `direction`: the direction of the docked pane.
      
      :see: :meth:`dock_direction_set` for a list of valid docking directions.


   .. method:: Dock(self)

      Indicates that a pane should be docked. It is the opposite of :meth:`Float`. 


   .. method:: dock_direction_get(self)

      Getter for the `dock_direction`.
      
      :see: :meth:`~AuiPaneInfo.dock_direction_set` for a set of valid docking directions.


   .. method:: dock_direction_set(self, value)

      Setter for the `dock_direction`.
      
      :param integer `value`: the docking direction. This can be one of the following bits:
      
      ============================ ======= =============================================
      Dock Flag                     Value  Description
      ============================ ======= =============================================
      ``AUI_DOCK_NONE``                  0 No docking direction.
      ``AUI_DOCK_TOP``                   1 Top docking direction.
      ``AUI_DOCK_RIGHT``                 2 Right docking direction.
      ``AUI_DOCK_BOTTOM``                3 Bottom docking direction.
      ``AUI_DOCK_LEFT``                  4 Left docking direction.
      ``AUI_DOCK_CENTER``                5 Center docking direction.
      ``AUI_DOCK_CENTRE``                5 Centre docking direction.
      ``AUI_DOCK_NOTEBOOK_PAGE``         6 Automatic AuiNotebooks docking style.
      ============================ ======= =============================================


   .. method:: Dockable(self, b=True)

      Specifies whether a frame can be docked or not. It is the same as specifying
      :meth:`TopDockable` . :meth:`BottomDockable` . :meth:`LeftDockable` . :meth:`RightDockable` .
      
      :param bool `b`: whether the frame can be docked or not.


   .. method:: DockFixed(self, b=True)

      Causes the containing dock to have no resize sash. This is useful
      for creating panes that span the entire width or height of a dock, but should
      not be resizable in the other direction.
      
      :param bool `b`: whether the pane will have a resize sash or not.


   .. method:: Fixed(self)

      Forces a pane to be fixed size so that it cannot be resized.
      After calling :meth:`Fixed`, :meth:`IsFixed` will return ``True``.


   .. method:: Float(self)

      Indicates that a pane should be floated. It is the opposite of :meth:`Dock`. 


   .. method:: Floatable(self, b=True)

      Sets whether the user will be able to undock a pane and turn it
      into a floating window.
      
      :param bool `b`: whether the pane can be floated or not.


   .. method:: FloatingPosition(self, pos)

      Sets the position of the floating pane.
      
      :param `pos`: a :class:`wx.Point` or a tuple indicating the pane floating position.


   .. method:: FloatingSize(self, size)

      Sets the size of the floating pane.
      
      :param `size`: a :class:`wx.Size` or a tuple indicating the pane floating size.


   .. method:: FlyOut(self, b=True)

      Indicates whether a pane, when floating, has a "fly-out" effect
      (i.e., floating panes which only show themselves when moused over).
      
      :param bool `b`: whether the pane can be snapped on the main frame or not.


   .. method:: GetMinimizeMode(self)

      Returns the minimization style for this pane.
      
      Possible return values are:
      
      ============================== ========= ==============================
      Minimize Mode Flag             Hex Value Description
      ============================== ========= ==============================
      ``AUI_MINIMIZE_POS_SMART``          0x01 Minimizes the pane on the closest tool bar
      ``AUI_MINIMIZE_POS_TOP``            0x02 Minimizes the pane on the top tool bar
      ``AUI_MINIMIZE_POS_LEFT``           0x03 Minimizes the pane on its left tool bar
      ``AUI_MINIMIZE_POS_RIGHT``          0x04 Minimizes the pane on its right tool bar
      ``AUI_MINIMIZE_POS_BOTTOM``         0x05 Minimizes the pane on its bottom tool bar
      ``AUI_MINIMIZE_POS_TOOLBAR``        0x06 Minimizes the pane on a target :class:`~wx.lib.agw.aui.auibar.AuiToolBar`
      ``AUI_MINIMIZE_POS_MASK``           0x17 Mask to filter the position flags
      ``AUI_MINIMIZE_CAPT_HIDE``           0x0 Hides the caption of the minimized pane
      ``AUI_MINIMIZE_CAPT_SMART``         0x08 Displays the caption in the best rotation (horizontal or clockwise)
      ``AUI_MINIMIZE_CAPT_HORZ``          0x10 Displays the caption horizontally
      ``AUI_MINIMIZE_CAPT_MASK``          0x18 Mask to filter the caption flags
      ============================== ========= ==============================
      
      The flags can be filtered with the following masks:
      
      ============================== ========= ==============================
      Minimize Mask Flag             Hex Value Description
      ============================== ========= ==============================
      ``AUI_MINIMIZE_POS_MASK``           0x17 Filters the position flags
      ``AUI_MINIMIZE_CAPT_MASK``          0x18 Filters the caption flags
      ============================== ========= ==============================


   .. method:: Gripper(self, visible=True)

      Indicates that a gripper should be drawn for the pane.
      
      :param bool `visible`: whether the gripper should be visible or not.


   .. method:: GripperTop(self, attop=True)

      Indicates that a gripper should be drawn at the top of the pane.
      
      :param bool `attop`: whether the gripper should be drawn at the top or not.


   .. method:: HasBorder(self)

      Returns ``True`` if the pane displays a border. 


   .. method:: HasCaption(self)

      Returns ``True`` if the pane displays a caption. 


   .. method:: HasCaptionLeft(self)

      Returns ``True`` if the pane displays a caption on the left (rotated by 90 degrees). 


   .. method:: HasCloseButton(self)

      Returns ``True`` if the pane displays a button to close the pane. 


   .. method:: HasFlag(self, flag)

      Returns ``True`` if the the property specified by flag is active for the pane.
      
      :param integer `flag`: the property to check for activity.


   .. method:: HasGripper(self)

      Returns ``True`` if the pane displays a gripper. 


   .. method:: HasGripperTop(self)

      Returns ``True`` if the pane displays a gripper at the top. 


   .. method:: HasMaximizeButton(self)

      Returns ``True`` if the pane displays a button to maximize the pane. 


   .. method:: HasMinimizeButton(self)

      Returns ``True`` if the pane displays a button to minimize the pane. 


   .. method:: HasNotebook(self)

      Returns whether a pane has a :class:`~wx.lib.agw.aui.auibook.AuiNotebook` or not. 


   .. method:: HasPinButton(self)

      Returns ``True`` if the pane displays a button to float the pane. 


   .. method:: Hide(self)

      Indicates that a pane should be hidden.
      
      Calling :meth:`Show(False) <Show>` achieve the same effect.


   .. method:: Icon(self, icon)

      Specifies whether an icon is drawn on the left of the caption text when
      the pane is docked. If `icon` is ``None`` or :class:`NullIcon`, no icon is drawn on
      the caption space.
      
      :param icon: an icon to draw on the caption space, or ``None``.
      :type `icon`: :class:`Icon` or ``None``


   .. method:: IsBottomDockable(self)

      Returns ``True`` if the pane can be docked at the bottom
      of the managed frame.


   .. method:: IsBottomSnappable(self)

      Returns ``True`` if the pane can be snapped at the bottom of the managed frame. 


   .. method:: IsDestroyOnClose(self)

      Returns ``True`` if the pane should be destroyed when it is closed.
      
      Normally a pane is simply hidden when the close button is clicked. Calling :meth:`~AuiPaneInfo.DestroyOnClose`
      with a ``True`` input parameter will cause the window to be destroyed when the user clicks
      the pane's close button.


   .. method:: IsDockable(self)

      Returns ``True`` if the pane can be docked. 


   .. method:: IsDocked(self)

      Returns ``True`` if the pane is docked. 


   .. method:: IsFixed(self)

      Returns ``True`` if the pane cannot be resized. 


   .. method:: IsFloatable(self)

      Returns ``True`` if the pane can be undocked and displayed as a
      floating window.


   .. method:: IsFloating(self)

      Returns ``True`` if the pane is floating. 


   .. method:: IsFlyOut(self)

      Returns ``True`` if the floating pane has a "fly-out" effect. 


   .. method:: IsHorizontal(self)

      Returns ``True`` if the pane `dock_direction` is horizontal. 


   .. method:: IsLeftDockable(self)

      Returns ``True`` if the pane can be docked at the left
      of the managed frame.


   .. method:: IsLeftSnappable(self)

      Returns ``True`` if the pane can be snapped on the left of the managed frame. 


   .. method:: IsMaximized(self)

      Returns ``True`` if the pane is maximized. 


   .. method:: IsMinimized(self)

      Returns ``True`` if the pane is minimized. 


   .. method:: IsMovable(self)

      Returns ``True`` if the docked frame can be undocked or moved to
      another dock position.


   .. method:: IsNotebookControl(self)

      Returns whether the pane is a notebook control (:class:`~wx.lib.agw.aui.auibook.AuiNotebook`). 


   .. method:: IsNotebookDockable(self)

      Returns ``True`` if a pane can be docked on top to another to create a
      :class:`~wx.lib.agw.aui.auibook.AuiNotebook`.


   .. method:: IsNotebookPage(self)

      Returns whether the pane is a notebook page in a :class:`~wx.lib.agw.aui.auibook.AuiNotebook`. 


   .. method:: IsOk(self)

      Returns ``True`` if the :class:`AuiPaneInfo` structure is valid.
      
      :note: A pane structure is valid if it has an associated window.


   .. method:: IsResizeable(self)

      Returns ``True`` if the pane can be resized. 


   .. method:: IsRightDockable(self)

      Returns ``True`` if the pane can be docked at the right
      of the managed frame.


   .. method:: IsRightSnappable(self)

      Returns ``True`` if the pane can be snapped on the right of the managed frame. 


   .. method:: IsShown(self)

      Returns ``True`` if the pane is currently shown. 


   .. method:: IsSnappable(self)

      Returns ``True`` if the pane can be snapped. 


   .. method:: IsToolbar(self)

      Returns ``True`` if the pane contains a toolbar. 


   .. method:: IsTopDockable(self)

      Returns ``True`` if the pane can be docked at the top
      of the managed frame.


   .. method:: IsTopSnappable(self)

      Returns ``True`` if the pane can be snapped at the top of the managed frame. 


   .. method:: IsVertical(self)

      Returns ``True`` if the pane `dock_direction` is vertical. 


   .. method:: Layer(self, layer)

      Determines the layer of the docked pane.
      
      The dock layer is similar to an onion, the inner-most layer being layer 0. Each
      shell moving in the outward direction has a higher layer number. This allows for
      more complex docking layout formation.
      
      :param integer `layer`: the layer of the docked pane.


   .. method:: Left(self)

      Sets the pane dock position to the left side of the frame.
      
      :note: This is the same thing as calling :meth:`~AuiPaneInfo.Direction` with ``AUI_DOCK_LEFT`` as
       parameter.


   .. method:: LeftDockable(self, b=True)

      Indicates whether a pane can be docked on the left of the frame.
      
      :param bool `b`: whether the pane can be docked at the left or not.


   .. method:: LeftSnappable(self, b=True)

      Indicates whether a pane can be snapped on the left of the main frame.
      
      :param bool `b`: whether the pane can be snapped at the left of the main frame or not.


   .. method:: Maximize(self)

      Makes the pane take up the full area.


   .. method:: MaximizeButton(self, visible=True)

      Indicates that a maximize button should be drawn for the pane.
      
      :param bool `visible`: whether the maximize button should be visible or not.


   .. method:: MaxSize(self, arg1=None, arg2=None)

      Sets the maximum size of the pane.
      
      This method is split in 2 versions depending on the input type. If `arg1` is
      a :class:`wx.Size` object, then :meth:`~AuiPaneInfo.MaxSize1` is called. Otherwise, :meth:`~AuiPaneInfo.MaxSize2` is called.
      
      :param `arg1`: a :class:`wx.Size` object, a (x, y) tuple or a `x` coordinate.
      :param `arg2`: a `y` coordinate (only if `arg1` is a `x` coordinate, otherwise unused).


   .. method:: MaxSize1(self, size)

      Sets the maximum size of the pane.
      
      :see: :meth:`MaxSize` for an explanation of input parameters.


   .. method:: MaxSize2(self, x, y)

      Sets the maximum size of the pane.
      
      :see: :meth:`MaxSize` for an explanation of input parameters.


   .. method:: Minimize(self)

      Makes the pane minimized in a :class:`~wx.lib.agw.aui.auibar.AuiToolBar`.
      
      Clicking on the minimize button causes a new :class:`~wx.lib.agw.aui.auibar.AuiToolBar` to be created
      and added to the frame manager, (currently the implementation is such that
      panes at West will have a toolbar at the right, panes at South will have
      toolbars at the bottom etc...) and the pane is hidden in the manager.
      
      Clicking on the restore button on the newly created toolbar will result in the
      toolbar being removed and the original pane being restored.


   .. method:: MinimizeButton(self, visible=True)

      Indicates that a minimize button should be drawn for the pane.
      
      :param bool `visible`: whether the minimize button should be visible or not.


   .. method:: MinimizeMode(self, mode)

      Sets the expected minimized mode if the minimize button is visible.
      
      :param integer `mode`: the minimized pane can have a specific position in the work space:
      
      ============================== ========= ==============================
      Minimize Mode Flag             Hex Value Description
      ============================== ========= ==============================
      ``AUI_MINIMIZE_POS_SMART``          0x01 Minimizes the pane on the closest tool bar
      ``AUI_MINIMIZE_POS_TOP``            0x02 Minimizes the pane on the top tool bar
      ``AUI_MINIMIZE_POS_LEFT``           0x03 Minimizes the pane on its left tool bar
      ``AUI_MINIMIZE_POS_RIGHT``          0x04 Minimizes the pane on its right tool bar
      ``AUI_MINIMIZE_POS_BOTTOM``         0x05 Minimizes the pane on its bottom tool bar
      ``AUI_MINIMIZE_POS_TOOLBAR``        0x06 Minimizes the pane on a target :class:`~wx.lib.agw.aui.auibar.AuiToolBar`
      ============================== ========= ==============================
      
      The caption of the minimized pane can be displayed in different modes:
      
      ============================== ========= ==============================
      Caption Mode Flag              Hex Value Description
      ============================== ========= ==============================
      ``AUI_MINIMIZE_CAPT_HIDE``           0x0 Hides the caption of the minimized pane
      ``AUI_MINIMIZE_CAPT_SMART``         0x08 Displays the caption in the best rotation (horizontal in the top and in
                                               the bottom tool bar or clockwise in the right and in the left tool bar)
      ``AUI_MINIMIZE_CAPT_HORZ``          0x10 Displays the caption horizontally
      ============================== ========= ==============================
      
      .. note::
      
         In order to use the ``AUI_MINIMIZE_POS_TOOLBAR`` flag, the instance of :class:`AuiManager`
         you pass as an input for :meth:`MinimizeTarget` **must** have a real name and not the randomly
         generated one. Remember to set the :meth:`Name` property of the toolbar pane before calling this method.


   .. method:: MinimizeTarget(self, toolbarPane)

      Minimizes the panes using a :class:`AuiPaneInfo` as a target. As :class:`AuiPaneInfo` properties
      need to be copied back and forth every time the perspective has changed, we
      only store the toobar **name**.
      
      :param `toolbarPane`: an instance of :class:`AuiPaneInfo`, containing a :class:`~wx.lib.agw.aui.auibar.AuiToolBar`.
      
      .. note::
      
         In order to use this functionality (and with the ``AUI_MINIMIZE_POS_TOOLBAR``
         flag set), the instance of :class:`AuiPaneInfo` you pass as an input **must** have a real
         name and not the randomly generated one. Remember to set the :meth:`Name` property of
         the toolbar pane before calling this method.


   .. method:: MinSize(self, arg1=None, arg2=None)

      Sets the minimum size of the pane.
      
      This method is split in 2 versions depending on the input type. If `arg1` is
      a :class:`wx.Size` object, then :meth:`~AuiPaneInfo.MinSize1` is called. Otherwise, :meth:`~AuiPaneInfo.MinSize2` is called.
      
      :param `arg1`: a :class:`wx.Size` object, a (x, y) tuple or or a `x` coordinate.
      :param `arg2`: a `y` coordinate (only if `arg1` is a `x` coordinate, otherwise unused).


   .. method:: MinSize1(self, size)

      Sets the minimum size of the pane.
      
      :see: :meth:`MinSize` for an explanation of input parameters.


   .. method:: MinSize2(self, x, y)

      Sets the minimum size of the pane.
      
      :see: :meth:`MinSize` for an explanation of input parameters.


   .. method:: Movable(self, b=True)

      Indicates whether a pane can be moved.
      
      :param bool `b`: whether the pane can be moved or not.


   .. method:: Name(self, name)

      Sets the name of the pane so it can be referenced in lookup functions.
      
      If a name is not specified by the user, a random name is assigned to the pane
      when it is added to the manager.
      
      :param `name`: a string specifying the pane name.
      
      .. warning::
      
         If you are using :meth:`AuiManager.SavePerspective` and :meth:`AuiManager.LoadPerspective`,
         you will have to specify a name for your pane using :meth:`~AuiPaneInfo.Name`, as perspectives
         containing randomly generated names can not be properly restored.


   .. method:: NotebookControl(self, id)

      Forces a pane to be a notebook control (:class:`~wx.lib.agw.aui.auibook.AuiNotebook`).
      
      :param integer `id`: the notebook id.


   .. method:: NotebookDockable(self, b=True)

      Indicates whether a pane can be docked in an automatic :class:`~wx.lib.agw.aui.auibook.AuiNotebook`.
      
      :param bool `b`: whether the pane can be docked in a notebook or not.


   .. method:: NotebookPage(self, id, tab_position=1000)

      Forces a pane to be a notebook page, so that the pane can be
      docked on top to another to create a :class:`~wx.lib.agw.aui.auibook.AuiNotebook`.
      
      :param integer `id`: the notebook id;
      :param integer `tab_position`: the tab number of the pane once docked in a notebook.


   .. method:: PaneBorder(self, visible=True)

      Indicates that a border should be drawn for the pane.
      
      :param bool `visible`: whether the pane border should be visible or not.


   .. method:: PinButton(self, visible=True)

      Indicates that a pin button should be drawn for the pane.
      
      :param bool `visible`: whether the pin button should be visible or not.


   .. method:: Position(self, pos)

      Determines the position of the docked pane.
      
      :param integer `pos`: the position of the docked pane.


   .. method:: ResetButtons(self)

      Resets all the buttons and recreates them from scratch depending on the
      :class:`AuiManager` flags.


   .. method:: Resizable(self, resizable=True)

      Allows a pane to be resizable if `resizable` is ``True``, and forces
      it to be a fixed size if `resizeable` is ``False``.
      
      If `resizable` is ``False``, this is simply an antonym for :meth:`Fixed`.
      
      :param bool `resizable`: whether the pane will be resizeable or not.


   .. method:: Restore(self)

      Is the reverse of :meth:`Maximize` and :meth:`Minimize`.


   .. method:: Right(self)

      Sets the pane dock position to the right side of the frame.
      
      :note: This is the same thing as calling :meth:`~AuiPaneInfo.Direction` with ``AUI_DOCK_RIGHT`` as
       parameter.


   .. method:: RightDockable(self, b=True)

      Indicates whether a pane can be docked on the right of the frame.
      
      :param bool `b`: whether the pane can be docked at the right or not.


   .. method:: RightSnappable(self, b=True)

      Indicates whether a pane can be snapped on the right of the main frame.
      
      :param bool `b`: whether the pane can be snapped at the right of the main frame or not.


   .. method:: Row(self, row)

      Determines the row of the docked pane.
      
      :param integer `row`: the row of the docked pane.


   .. method:: SetDockPos(self, source)

      Copies the `source` pane members that pertain to docking position to `self`.
      
      :param `source`: the source pane from where to copy the attributes,
       an instance of :class:`AuiPaneInfo`.


   .. method:: SetFlag(self, flag, option_state)

      Turns the property given by `flag` on or off with the `option_state`
      parameter.
      
      :param integer `flag`: the property to set;
      :param bool `option_state`: either ``True`` or ``False``.


   .. method:: SetNameFromNotebookId(self)

      Sets the pane name once docked in a :class:`~wx.lib.agw.aui.auibook.AuiNotebook` using the notebook id. 


   .. method:: Show(self, show=True)

      Indicates that a pane should be shown.
      
      :param bool `show`: whether the pane should be shown or not.


   .. method:: Snappable(self, b=True)

      Indicates whether a pane can be snapped on the main frame. This is
      equivalent as calling :meth:`TopSnappable` . :meth:`BottomSnappable` . :meth:`LeftSnappable` . :meth:`RightSnappable` .
      
      :param bool `b`: whether the pane can be snapped on the main frame or not.


   .. method:: ToolbarPane(self)

      Specifies that the pane should adopt the default toolbar pane settings. 


   .. method:: Top(self)

      Sets the pane dock position to the top of the frame.
      
      :note: This is the same thing as calling :meth:`~AuiPaneInfo.Direction` with ``AUI_DOCK_TOP`` as
       parameter.


   .. method:: TopDockable(self, b=True)

      Indicates whether a pane can be docked at the top of the frame.
      
      :param bool `b`: whether the pane can be docked at the top or not.


   .. method:: TopSnappable(self, b=True)

      Indicates whether a pane can be snapped at the top of the main frame.
      
      :param bool `b`: whether the pane can be snapped at the top of the main frame or not.


   .. method:: Transparent(self, alpha)

      Makes the pane transparent when floating.
      
      :param integer `alpha`: a value between 0 and 255 for pane transparency.


   .. method:: Window(self, w)

      Associate a :class:`wx.Window` derived window to this pane.
      
      This normally does not need to be specified, as the window pointer is
      automatically assigned to the :class:`AuiPaneInfo` structure as soon as it is
      added to the manager.
      
      :param `w`: a :class:`wx.Window` derived window.


   .. attribute:: dock_direction

      Getter for the `dock_direction`.
      
      :see: :meth:`~AuiPaneInfo.dock_direction_set` for a set of valid docking directions.


