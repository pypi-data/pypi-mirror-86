.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.aui.auibar

.. highlight:: python



.. _wx.lib.agw.aui.auibar.AuiToolBar:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.aui.auibar.AuiToolBar**
==========================================================================================================================================

AuiToolBar is a completely owner-drawn toolbar perfectly integrated with the AUI layout system.
This allows drag and drop of toolbars, docking/floating behaviour and the possibility to define
"overflow" items in the toolbar itself.

The default theme that is used is :class:`AuiDefaultToolBarArt`, which provides a modern,
glossy look and feel. The theme can be changed by calling :meth:`AuiToolBar.SetArtProvider`.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>AuiToolBar</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.aui.auibar.AuiToolBar_inheritance.png" alt="Inheritance diagram of AuiToolBar" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.aui.auibar.AuiToolBar.html" title="wx.lib.agw.aui.auibar.AuiToolBar" alt="" coords="5,392,237,421"/> <area shape="rect" id="node2" href="wx.Control.html" title="wx.Control" alt="" coords="75,315,167,344"/> <area shape="rect" id="node3" href="wx.Window.html" title="wx.Window" alt="" coords="73,237,170,267"/> <area shape="rect" id="node4" href="wx.WindowBase.html" title="wx.WindowBase" alt="" coords="57,160,186,189"/> <area shape="rect" id="node5" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="63,83,180,112"/> <area shape="rect" id="node6" href="wx.Object.html" title="wx.Object" alt="" coords="18,5,105,35"/> <area shape="rect" id="node7" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="129,5,236,35"/> </map> 
   </p>
   </div>

|


|appearance| Control Appearance
===============================

|

.. figure:: _static/images/widgets/fullsize/wxmsw/wx.lib.agw.aui.auibar.auitoolbar.png
   :alt: wxMSW
   :figclass: floatleft

   **wxMSW**


.. figure:: _static/images/widgets/fullsize/wxmac/../no_appearance.png
   :alt: wxMAC
   :figclass: floatright

   **wxMAC**


.. figure:: _static/images/widgets/fullsize/wxgtk/../no_appearance.png
   :alt: wxGTK
   :figclass: floatcenter

   **wxGTK**


|




|super_classes| Known Superclasses
==================================

:class:`wx.Control`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.__init__`                               Default class constructor.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.AddCheckTool`                           Adds a new check (or toggle) tool to the :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.AddControl`                             Adds any control to the toolbar, typically e.g. a :class:`ComboBox`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.AddLabel`                               Adds a label tool to the :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.AddRadioTool`                           Adds a new radio tool to the toolbar.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.AddSeparator`                           Adds a separator for spacing groups of tools.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.AddSimpleTool`                          Adds a tool to the toolbar. This is the simplest method you can use to
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.AddSpacer`                              Adds a spacer for spacing groups of tools.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.AddStretchSpacer`                       Adds a stretchable spacer for spacing groups of tools.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.AddToggleTool`                          Adds a toggle tool to the toolbar.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.AddTool`                                Adds a tool to the toolbar. This is the full feature version of :meth:`AddTool`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.Clear`                                  Deletes all the tools in the :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.ClearTools`                             Deletes all the tools in the :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.DeleteTool`                             Removes the specified tool from the toolbar and deletes it.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.DeleteToolByPos`                        This function behaves like :meth:`~wx.lib.agw.aui.auibar.AuiToolBar.DeleteTool` but it deletes the tool at the specified position and not the one with the given id.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.DoGetBestSize`                          Gets the size which best suits the window: for a control, it would be the
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.DoIdleUpdate`                           Updates the toolbar during idle times.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.DoSetSize`                              Sets the position and size of the window in pixels. The `sizeFlags`
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.EnableTool`                             Enables or disables the tool.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.FindControl`                            Returns a pointer to the control identified by `id` or ``None`` if no corresponding control is found.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.FindTool`                               Finds a tool for the given tool id.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.FindToolByIndex`                        Finds a tool for the given tool position in the :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.FindToolByLabel`                        Finds a tool for the given label.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.FindToolForPosition`                    Finds a tool for the given mouse position.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.FindToolForPositionWithPacking`         Finds a tool for the given mouse position, taking into account also the tool packing.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetAGWWindowStyleFlag`                  Returns the AGW-specific window style flag.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetArtProvider`                         Returns the current art provider being used.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetAuiManager`                          Returns the :class:`~wx.lib.agw.aui.framemanager.AuiManager` which manages the toolbar.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetGripperVisible`                      Returns whether the toolbar gripper is visible or not.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetLabelSize`                           Returns the standard size of a toolbar item.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetOverflowRect`                        Returns the rectangle of the overflow button.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetOverflowState`                       Returns the state of the overflow button.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetOverflowVisible`                     Returns whether the overflow button is visible or not.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolBarFits`                         Returns whether the :class:`AuiToolBar` size fits in a specified size.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolBitmap`                          Returns the tool bitmap for the tool identified by `tool_id`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolBitmapSize`                      Returns the size of bitmap that the toolbar expects to have. The default bitmap size is 16 by 15 pixels.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolBorderPadding`                   Returns the padding between the tool border and the label, in pixels.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolCount`                           Returns the number of tools in the :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolDropDown`                        Returns whether the toolbar item identified by `tool_id` has an associated drop down window menu or not.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolEnabled`                         Returns whether the tool identified by `tool_id` is enabled or not.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolFits`                            Returns whether the tool identified by `tool_id` fits into the toolbar or not.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolFitsByIndex`                     Returns whether the tool identified by `tool_id` fits into the toolbar or not.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolIndex`                           Returns the position of the tool in the toolbar given its identifier.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolLabel`                           Returns the tool label for the tool identified by `tool_id`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolLongHelp`                        Returns the long help for the given tool.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolOrientation`                     Returns the orientation for the toolbar items.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolPacking`                         Returns the value used for spacing tools. The default value is 1 pixel.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolPos`                             Returns the position of the tool in the toolbar given its identifier.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolProportion`                      Returns the tool proportion in the toolbar.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolRect`                            Returns the toolbar item rectangle
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolSeparation`                      Returns the separator size for the toolbar, in pixels.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolShortHelp`                       Returns the short help for the given tool.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolSticky`                          Returns whether the toolbar item identified by `tool_id` has a sticky behaviour or not.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolTextOrientation`                 Returns the label orientation for the toolbar items.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.GetToolToggled`                         Returns whether a tool is toggled or not.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.HitTest`                                Finds a tool for the given mouse position.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.IsPaneMinimized`                        Returns whether this :class:`AuiToolBar` contains a minimized pane tool.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnCustomRender`                         Handles custom render for single :class:`AuiToolBar` items.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnEraseBackground`                      Handles the ``wx.EVT_ERASE_BACKGROUND`` event for :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnIdle`                                 Handles the ``wx.EVT_IDLE`` event for :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnLeaveWindow`                          Handles the ``wx.EVT_LEAVE_WINDOW`` event for :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnLeftDown`                             Handles the ``wx.EVT_LEFT_DOWN`` event for :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnLeftUp`                               Handles the ``wx.EVT_LEFT_UP`` event for :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnMiddleDown`                           Handles the ``wx.EVT_MIDDLE_DOWN`` event for :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnMiddleUp`                             Handles the ``wx.EVT_MIDDLE_UP`` event for :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnMotion`                               Handles the ``wx.EVT_MOTION`` event for :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnPaint`                                Handles the ``wx.EVT_PAINT`` event for :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnRightDown`                            Handles the ``wx.EVT_RIGHT_DOWN`` event for :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnRightUp`                              Handles the ``wx.EVT_RIGHT_UP`` event for :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnSetCursor`                            Handles the ``wx.EVT_SET_CURSOR`` event for :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.OnSize`                                 Handles the ``wx.EVT_SIZE`` event for :class:`AuiToolBar`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.Realize`                                Realizes the toolbar. This function should be called after you have added tools.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.RefreshOverflowState`                   Refreshes the overflow button.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetAGWWindowStyleFlag`                  Sets the AGW-specific style of the window.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetArtProvider`                         Instructs :class:`AuiToolBar` to use art provider specified by parameter `art`
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetAuiManager`                          Sets the :class:`~wx.lib.agw.aui.framemanager.AuiManager` which manages the toolbar.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetCustomOverflowItems`                 Sets the two lists `prepend` and `append` as custom overflow items.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetFont`                                Sets the :class:`AuiToolBar` font.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetGripperVisible`                      Sets whether the toolbar gripper is visible or not.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetHoverItem`                           Sets a toolbar item to be currently hovered by the mouse.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetMargins`                             Set the values to be used as margins for the toolbar.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetMarginsSize`                         Set the values to be used as margins for the toolbar.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetMarginsXY`                           Set the values to be used as margins for the toolbar.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetOrientation`                         Sets the toolbar orientation.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetOverflowVisible`                     Sets whether the overflow button is visible or not.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetPressedItem`                         Sets a toolbar item to be currently in a "pressed" state.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolAlignment`                       This sets the alignment for all of the tools within the toolbar
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolBitmap`                          Sets the tool bitmap for the tool identified by `tool_id`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolBitmapSize`                      Sets the default size of each tool bitmap. The default bitmap size is 16 by 15 pixels.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolBorderPadding`                   Sets the padding between the tool border and the label.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolDisabledBitmap`                  Sets the tool disabled bitmap for the tool identified by `tool_id`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolDropDown`                        Assigns a drop down window menu to the toolbar item.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolLabel`                           Sets the tool label for the tool identified by `tool_id`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolLongHelp`                        Sets the long help for the given tool.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolNormalBitmap`                    Sets the tool bitmap for the tool identified by `tool_id`.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolOrientation`                     Sets the tool orientation for the toolbar items.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolPacking`                         Sets the value used for spacing tools. The default value is 1 pixel.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolProportion`                      Sets the tool proportion in the toolbar.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolSeparation`                      Sets the separator size for the toolbar.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolShortHelp`                       Sets the short help for the given tool.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolSticky`                          Sets the toolbar item as sticky or non-sticky.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetToolTextOrientation`                 Sets the label orientation for the toolbar items.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.SetWindowStyleFlag`                     Sets the style of the window.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.StartPreviewTimer`                      Starts a timer in :class:`~wx.lib.agw.aui.framemanager.AuiManager` to slide-in/slide-out the minimized pane.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.StopPreviewTimer`                       Stops a timer in :class:`~wx.lib.agw.aui.framemanager.AuiManager` to slide-in/slide-out the minimized pane.
:meth:`~wx.lib.agw.aui.auibar.AuiToolBar.ToggleTool`                             Toggles a tool on or off. This does not cause any event to get emitted.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: AuiToolBar(wx.Control)

   AuiToolBar is a completely owner-drawn toolbar perfectly integrated with the AUI layout system.
   This allows drag and drop of toolbars, docking/floating behaviour and the possibility to define
   "overflow" items in the toolbar itself.
   
   The default theme that is used is :class:`AuiDefaultToolBarArt`, which provides a modern,
   glossy look and feel. The theme can be changed by calling :meth:`AuiToolBar.SetArtProvider`.

   .. method:: __init__(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, agwStyle=AUI_TB_DEFAULT_STYLE)

      Default class constructor.
      
      :param wx.Window `parent`: the :class:`AuiToolBar` parent;
      :param integer `id`: an identifier for the control: a value of -1 is taken to mean a default;
      :param wx.Point `pos`: the control position. A value of (-1, -1) indicates a default position,
       chosen by either the windowing system or wxPython, depending on platform;
      :param wx.Size `size`: the control size. A value of (-1, -1) indicates a default size,
       chosen by either the windowing system or wxPython, depending on platform;
      :param integer `style`: the control window style;
      :param integer `agwStyle`: the AGW-specific window style. This can be a combination of the
       following bits:
      
       ==================================== ==================================
       Flag name                            Description
       ==================================== ==================================
       ``AUI_TB_TEXT``                      Shows the text in the toolbar buttons; by default only icons are shown
       ``AUI_TB_NO_TOOLTIPS``               Don't show tooltips on :class:`AuiToolBar` items
       ``AUI_TB_NO_AUTORESIZE``             Do not auto-resize the :class:`AuiToolBar`
       ``AUI_TB_GRIPPER``                   Shows a gripper on the :class:`AuiToolBar`
       ``AUI_TB_OVERFLOW``                  The :class:`AuiToolBar` can contain overflow items
       ``AUI_TB_VERTICAL``                  The :class:`AuiToolBar` is vertical
       ``AUI_TB_HORZ_LAYOUT``               Shows the text and the icons alongside, not vertically stacked.
                                            This style must be used with ``AUI_TB_TEXT``
       ``AUI_TB_PLAIN_BACKGROUND``          Don't draw a gradient background on the toolbar
       ``AUI_TB_HORZ_TEXT``                 Combination of ``AUI_TB_HORZ_LAYOUT`` and ``AUI_TB_TEXT``
       ==================================== ==================================
      
       The default value for `agwStyle` is: ``AUI_TB_DEFAULT_STYLE`` = 0


   .. method:: AddCheckTool(self, tool_id, label, bitmap, disabled_bitmap, short_help_string="", long_help_string="", client_data=None)

      Adds a new check (or toggle) tool to the :class:`AuiToolBar`.
      
      :see: :meth:`AddTool` for an explanation of the input parameters.


   .. method:: AddControl(self, control, label="")

      Adds any control to the toolbar, typically e.g. a :class:`ComboBox`.
      
      :param wx.Window `control`: the control to be added;
      :param string `label`: the label which appears if the control goes into the
       overflow items in the toolbar.


   .. method:: AddLabel(self, tool_id, label="", width=0)

      Adds a label tool to the :class:`AuiToolBar`.
      
      :param integer `tool_id`: an integer by which the tool may be identified in subsequent operations;
      :param string `label`: the toolbar tool label;
      :param integer `width`: the tool width.


   .. method:: AddRadioTool(self, tool_id, label, bitmap, disabled_bitmap, short_help_string="", long_help_string="", client_data=None)

      Adds a new radio tool to the toolbar.
      
      Consecutive radio tools form a radio group such that exactly one button
      in the group is pressed at any moment, in other words whenever a button
      in the group is pressed the previously pressed button is automatically
      released. You should avoid having the radio groups of only one element
      as it would be impossible for the user to use such button.
      
      :note: By default, the first button in the radio group is initially pressed,
       the others are not.
      
      :see: :meth:`AddTool` for an explanation of the input parameters.


   .. method:: AddSeparator(self)

      Adds a separator for spacing groups of tools. 


   .. method:: AddSimpleTool(self, tool_id, label, bitmap, short_help_string="", kind=ITEM_NORMAL, target=None)

      Adds a tool to the toolbar. This is the simplest method you can use to
      add an item to the :class:`AuiToolBar`.
      
      :param integer `tool_id`: an integer by which the tool may be identified in subsequent operations;
      :param string `label`: the toolbar tool label;
      :param wx.Bitmap `bitmap`: the primary tool bitmap;
      :param string `short_help_string`: this string is used for the tools tooltip;
      :param integer `kind`: the item kind. Can be one of the following:
      
       ========================  =============================
       Item Kind                 Description
       ========================  =============================
       ``ITEM_CONTROL``          The item in the :class:`AuiToolBar` is a control
       ``ITEM_LABEL``            The item in the :class:`AuiToolBar` is a text label
       ``ITEM_SPACER``           The item in the :class:`AuiToolBar` is a spacer
       ``ITEM_SEPARATOR``        The item in the :class:`AuiToolBar` is a separator
       ``ITEM_CHECK``            The item in the :class:`AuiToolBar` is a toolbar check item
       ``ITEM_NORMAL``           The item in the :class:`AuiToolBar` is a standard toolbar item
       ``ITEM_RADIO``            The item in the :class:`AuiToolBar` is a toolbar radio item
       ========================  =============================
      
      :param `target`: a custom string indicating that an instance of :class:`~wx.lib.agw.aui.framemanager.AuiPaneInfo`
       has been minimized into this toolbar.


   .. method:: AddSpacer(self, pixels)

      Adds a spacer for spacing groups of tools.
      
      :param integer `pixels`: the width of the spacer.


   .. method:: AddStretchSpacer(self, proportion=1)

      Adds a stretchable spacer for spacing groups of tools.
      
      :param integer `proportion`: the stretchable spacer proportion.


   .. method:: AddToggleTool(self, tool_id, bitmap, disabled_bitmap, toggle=False, client_data=None, short_help_string="", long_help_string="")

      Adds a toggle tool to the toolbar.
      
      :param integer `tool_id`: an integer by which the tool may be identified in subsequent operations;
      :param wx.Bitmap `bitmap`: the primary tool bitmap;
      :param wx.Bitmap `disabled_bitmap`: the bitmap to use when the tool is disabled. If it is equal to
       :class:`NullBitmap`, the disabled bitmap is automatically generated by greing the normal one;
      :param PyObject `client_data`: whatever Python object to associate with the toolbar item;
      :param string `short_help_string`: this string is used for the tools tooltip;
      :param string `long_help_string`: this string is shown in the statusbar (if any) of the parent
       frame when the mouse pointer is inside the tool.


   .. method:: AddTool(self, tool_id, label, bitmap, disabled_bitmap, kind, short_help_string='', long_help_string='', client_data=None, target=None)

      Adds a tool to the toolbar. This is the full feature version of :meth:`AddTool`.
      
      :param integer `tool_id`: an integer by which the tool may be identified in subsequent operations;
      :param string `label`: the toolbar tool label;
      :param wx.Bitmap `bitmap`: the primary tool bitmap;
      :param wx.Bitmap `disabled_bitmap`: the bitmap to use when the tool is disabled. If it is equal to
       :class:`NullBitmap`, the disabled bitmap is automatically generated by greing the normal one;
      :param integer `kind`: the item kind. Can be one of the following:
      
       ========================  =============================
       Item Kind                 Description
       ========================  =============================
       ``ITEM_CONTROL``          The item in the :class:`AuiToolBar` is a control
       ``ITEM_LABEL``            The item in the :class:`AuiToolBar` is a text label
       ``ITEM_SPACER``           The item in the :class:`AuiToolBar` is a spacer
       ``ITEM_SEPARATOR``        The item in the :class:`AuiToolBar` is a separator
       ``ITEM_CHECK``            The item in the :class:`AuiToolBar` is a toolbar check item
       ``ITEM_NORMAL``           The item in the :class:`AuiToolBar` is a standard toolbar item
       ``ITEM_RADIO``            The item in the :class:`AuiToolBar` is a toolbar radio item
       ========================  =============================
      
      :param string `short_help_string`: this string is used for the tools tooltip;
      :param string `long_help_string`: this string is shown in the statusbar (if any) of the parent
       frame when the mouse pointer is inside the tool.
      :param PyObject `client_data`: whatever Python object to associate with the toolbar item.
      :param `target`: a custom string indicating that an instance of :class:`~wx.lib.agw.aui.framemanager.AuiPaneInfo`
       has been minimized into this toolbar.


   .. method:: Clear(self)

      Deletes all the tools in the :class:`AuiToolBar`. 


   .. method:: ClearTools(self)

      Deletes all the tools in the :class:`AuiToolBar`. 


   .. method:: DeleteTool(self, tool_id)

      Removes the specified tool from the toolbar and deletes it.
      
      :param integer `tool_id`: the :class:`AuiToolBarItem` identifier.
      
      :returns: ``True`` if the tool was deleted, ``False`` otherwise.
      
      :note: Note that it is unnecessary to call :meth:`Realize` for the change to
       take place, it will happen immediately.


   .. method:: DeleteToolByPos(self, pos)

      This function behaves like :meth:`DeleteTool` but it deletes the tool at the specified position and not the one with the given id.
      
      :param integer `pos`: the tool position.
      
      :see: :meth:`~AuiToolBar.DeleteTool`


   .. method:: DoGetBestSize(self)

      Gets the size which best suits the window: for a control, it would be the
      minimal size which doesn't truncate the control, for a panel - the same
      size as it would have after a call to `Fit()`.
      
      :note: Overridden from :class:`wx.Control`.


   .. method:: DoIdleUpdate(self)

      Updates the toolbar during idle times. 


   .. method:: DoSetSize(self, x, y, width, height, sizeFlags=wx.SIZE_AUTO)

      Sets the position and size of the window in pixels. The `sizeFlags`
      parameter indicates the interpretation of the other params if they are
      equal to -1.
      
      :param integer `x`: the window `x` position;
      :param integer `y`: the window `y` position;
      :param integer `width`: the window width;
      :param integer `height`: the window height;
      :param integer `sizeFlags`: may have one of this bit set:
      
       ===================================  ======================================
       Size Flags                           Description
       ===================================  ======================================
       ``wx.SIZE_AUTO``                     A -1 indicates that a class-specific default should be used.
       ``wx.SIZE_AUTO_WIDTH``               A -1 indicates that a class-specific default should be used for the width.
       ``wx.SIZE_AUTO_HEIGHT``              A -1 indicates that a class-specific default should be used for the height.
       ``wx.SIZE_USE_EXISTING``             Existing dimensions should be used if -1 values are supplied.
       ``wx.SIZE_ALLOW_MINUS_ONE``          Allow dimensions of -1 and less to be interpreted as real dimensions, not default values.
       ``wx.SIZE_FORCE``                    Normally, if the position and the size of the window are already the same as the
                                            parameters of this function, nothing is done. but with this flag a window resize may
                                            be forced even in this case (supported in wx 2.6.2 and later and only implemented
                                            for MSW and ignored elsewhere currently)
       ===================================  ======================================
      
      :note: Overridden from :class:`wx.Control`.


   .. method:: EnableTool(self, tool_id, state)

      Enables or disables the tool.
      
      :param integer `tool_id`: identifier for the tool to enable or disable.
      :param bool `state`: if ``True``, enables the tool, otherwise disables it.


   .. method:: FindControl(self, id)

      Returns a pointer to the control identified by `id` or ``None`` if no corresponding control is found.
      
      :param integer `id`: the control identifier.


   .. method:: FindTool(self, tool_id)

      Finds a tool for the given tool id.
      
      :param integer `tool_id`: the :class:`AuiToolBarItem` identifier.


   .. method:: FindToolByIndex(self, pos)

      Finds a tool for the given tool position in the :class:`AuiToolBar`.
      
      :param integer `pos`: the tool position in the toolbar.
      
      :returns: a pointer to a :class:`AuiToolBarItem` if a tool is found, or ``None`` otherwise.


   .. method:: FindToolByLabel(self, label)

      Finds a tool for the given label.
      
      :param string `label`: the :class:`AuiToolBarItem` label.


   .. method:: FindToolForPosition(self, x, y)

      Finds a tool for the given mouse position.
      
      :param integer `x`: mouse `x` position;
      :param integer `y`: mouse `y` position.
      
      :returns: a pointer to a :class:`AuiToolBarItem` if a tool is found, or ``None`` otherwise.


   .. method:: FindToolForPositionWithPacking(self, x, y)

      Finds a tool for the given mouse position, taking into account also the tool packing.
      
      :param integer `x`: mouse `x` position;
      :param integer `y`: mouse `y` position.
      
      :returns: a pointer to a :class:`AuiToolBarItem` if a tool is found, or ``None`` otherwise.


   .. method:: GetAGWWindowStyleFlag(self)

      Returns the AGW-specific window style flag.
      
      :see: :meth:`SetAGWWindowStyleFlag` for an explanation of various AGW-specific style.


   .. method:: GetArtProvider(self)

      Returns the current art provider being used. 


   .. method:: GetAuiManager(self)

      Returns the :class:`~wx.lib.agw.aui.framemanager.AuiManager` which manages the toolbar. 


   .. method:: GetGripperVisible(self)

      Returns whether the toolbar gripper is visible or not. 


   .. method:: GetLabelSize(self, label)

      Returns the standard size of a toolbar item.
      
      :param string `label`: a test label.


   .. method:: GetOverflowRect(self)

      Returns the rectangle of the overflow button. 


   .. method:: GetOverflowState(self)

      Returns the state of the overflow button. 


   .. method:: GetOverflowVisible(self)

      Returns whether the overflow button is visible or not. 


   .. method:: GetToolBarFits(self)

      Returns whether the :class:`AuiToolBar` size fits in a specified size. 


   .. method:: GetToolBitmap(self, tool_id)

      Returns the tool bitmap for the tool identified by `tool_id`.
      
      :param integer `tool_id`: the tool identifier.


   .. method:: GetToolBitmapSize(self)

      Returns the size of bitmap that the toolbar expects to have. The default bitmap size is 16 by 15 pixels.
      
      :note: Note that this is the size of the bitmap you pass to :meth:`AddTool`,
       and not the eventual size of the tool button.
      
      .. todo::
      
         Add :class:`ToolBar` compatibility, actually implementing this method.


   .. method:: GetToolBorderPadding(self)

      Returns the padding between the tool border and the label, in pixels. 


   .. method:: GetToolCount(self)

      Returns the number of tools in the :class:`AuiToolBar`. 


   .. method:: GetToolDropDown(self, tool_id)

      Returns whether the toolbar item identified by `tool_id` has an associated drop down window menu or not.
      
      :param integer `tool_id`: the :class:`AuiToolBarItem` identifier.


   .. method:: GetToolEnabled(self, tool_id)

      Returns whether the tool identified by `tool_id` is enabled or not.
      
      :param integer `tool_id`: the tool identifier.


   .. method:: GetToolFits(self, tool_id)

      Returns whether the tool identified by `tool_id` fits into the toolbar or not.
      
      :param integer `tool_id`: the toolbar item identifier.


   .. method:: GetToolFitsByIndex(self, tool_id)

      Returns whether the tool identified by `tool_id` fits into the toolbar or not.
      
      :param integer `tool_id`: the toolbar item identifier.


   .. method:: GetToolIndex(self, tool_id)

      Returns the position of the tool in the toolbar given its identifier.
      
      :param integer `tool_id`: the toolbar item identifier.


   .. method:: GetToolLabel(self, tool_id)

      Returns the tool label for the tool identified by `tool_id`.
      
      :param integer `tool_id`: the tool identifier.


   .. method:: GetToolLongHelp(self, tool_id)

      Returns the long help for the given tool.
      
      :param integer `tool_id`: the tool identifier.


   .. method:: GetToolOrientation(self)

      Returns the orientation for the toolbar items. 


   .. method:: GetToolPacking(self)

      Returns the value used for spacing tools. The default value is 1 pixel. 


   .. method:: GetToolPos(self, tool_id)

      Returns the position of the tool in the toolbar given its identifier.
      
      :param integer `tool_id`: the toolbar item identifier.


   .. method:: GetToolProportion(self, tool_id)

      Returns the tool proportion in the toolbar.
      
      :param integer `tool_id`: the :class:`AuiToolBarItem` identifier.


   .. method:: GetToolRect(self, tool_id)

      Returns the toolbar item rectangle
      
      :param integer `tool_id`: the toolbar item identifier.


   .. method:: GetToolSeparation(self)

      Returns the separator size for the toolbar, in pixels. 


   .. method:: GetToolShortHelp(self, tool_id)

      Returns the short help for the given tool.
      
      :param integer `tool_id`: the tool identifier.


   .. method:: GetToolSticky(self, tool_id)

      Returns whether the toolbar item identified by `tool_id` has a sticky behaviour or not.
      
      :param integer `tool_id`: the :class:`AuiToolBarItem` identifier.


   .. method:: GetToolTextOrientation(self)

      Returns the label orientation for the toolbar items. 


   .. method:: GetToolToggled(self, tool_id)

      Returns whether a tool is toggled or not.
      
      :param integer `tool_id`: the toolbar item identifier.
      
      :note: This only applies to a tool that has been specified as a toggle tool.


   .. method:: HitTest(self, x, y)

      Finds a tool for the given mouse position.
      
      :param integer `x`: mouse `x` screen position;
      :param integer `y`: mouse `y` screen position.
      
      :returns: a pointer to a :class:`AuiToolBarItem` if a tool is found, or ``None`` otherwise.
      
      :note: This method is similar to :meth:`FindToolForPosition` but it works with absolute coordinates.


   .. method:: IsPaneMinimized(self)

      Returns whether this :class:`AuiToolBar` contains a minimized pane tool. 


   .. method:: OnCustomRender(self, dc, item, rect)

      Handles custom render for single :class:`AuiToolBar` items.
      
      :param `dc`: a :class:`wx.DC` device context;
      :param `item`: an instance of :class:`AuiToolBarItem`;
      :param wx.Rect `rect`: the toolbar item rect.
      
      :note: This method must be overridden to provide custom rendering of items.


   .. method:: OnEraseBackground(self, event)

      Handles the ``wx.EVT_ERASE_BACKGROUND`` event for :class:`AuiToolBar`.
      
      :param `event`: a :class:`EraseEvent` event to be processed.
      
      :note: This is intentionally empty, to reduce flicker.


   .. method:: OnIdle(self, event)

      Handles the ``wx.EVT_IDLE`` event for :class:`AuiToolBar`.
      
      :param `event`: a :class:`IdleEvent` event to be processed.


   .. method:: OnLeaveWindow(self, event)

      Handles the ``wx.EVT_LEAVE_WINDOW`` event for :class:`AuiToolBar`.
      
      :param `event`: a :class:`MouseEvent` event to be processed.


   .. method:: OnLeftDown(self, event)

      Handles the ``wx.EVT_LEFT_DOWN`` event for :class:`AuiToolBar`.
      
      :param `event`: a :class:`MouseEvent` event to be processed.


   .. method:: OnLeftUp(self, event)

      Handles the ``wx.EVT_LEFT_UP`` event for :class:`AuiToolBar`.
      
      :param `event`: a :class:`MouseEvent` event to be processed.


   .. method:: OnMiddleDown(self, event)

      Handles the ``wx.EVT_MIDDLE_DOWN`` event for :class:`AuiToolBar`.
      
      :param `event`: a :class:`MouseEvent` event to be processed.


   .. method:: OnMiddleUp(self, event)

      Handles the ``wx.EVT_MIDDLE_UP`` event for :class:`AuiToolBar`.
      
      :param `event`: a :class:`MouseEvent` event to be processed.


   .. method:: OnMotion(self, event)

      Handles the ``wx.EVT_MOTION`` event for :class:`AuiToolBar`.
      
      :param `event`: a :class:`MouseEvent` event to be processed.


   .. method:: OnPaint(self, event)

      Handles the ``wx.EVT_PAINT`` event for :class:`AuiToolBar`.
      
      :param `event`: a :class:`PaintEvent` event to be processed.


   .. method:: OnRightDown(self, event)

      Handles the ``wx.EVT_RIGHT_DOWN`` event for :class:`AuiToolBar`.
      
      :param `event`: a :class:`MouseEvent` event to be processed.


   .. method:: OnRightUp(self, event)

      Handles the ``wx.EVT_RIGHT_UP`` event for :class:`AuiToolBar`.
      
      :param `event`: a :class:`MouseEvent` event to be processed.


   .. method:: OnSetCursor(self, event)

      Handles the ``wx.EVT_SET_CURSOR`` event for :class:`AuiToolBar`.
      
      :param `event`: a :class:`SetCursorEvent` event to be processed.


   .. method:: OnSize(self, event)

      Handles the ``wx.EVT_SIZE`` event for :class:`AuiToolBar`.
      
      :param `event`: a :class:`wx.SizeEvent` event to be processed.


   .. method:: Realize(self)

      Realizes the toolbar. This function should be called after you have added tools. 


   .. method:: RefreshOverflowState(self)

      Refreshes the overflow button. 


   .. method:: SetAGWWindowStyleFlag(self, agwStyle)

      Sets the AGW-specific style of the window.
      
      :param integer `agwStyle`: the new window style. This can be a combination of the
       following bits:
      
       ==================================== ==================================
       Flag name                            Description
       ==================================== ==================================
       ``AUI_TB_TEXT``                      Shows the text in the toolbar buttons; by default only icons are shown
       ``AUI_TB_NO_TOOLTIPS``               Don't show tooltips on :class:`AuiToolBar` items
       ``AUI_TB_NO_AUTORESIZE``             Do not auto-resize the :class:`AuiToolBar`
       ``AUI_TB_GRIPPER``                   Shows a gripper on the :class:`AuiToolBar`
       ``AUI_TB_OVERFLOW``                  The :class:`AuiToolBar` can contain overflow items
       ``AUI_TB_VERTICAL``                  The :class:`AuiToolBar` is vertical
       ``AUI_TB_HORZ_LAYOUT``               Shows the text and the icons alongside, not vertically stacked.
                                            This style must be used with ``AUI_TB_TEXT``
       ``AUI_TB_PLAIN_BACKGROUND``          Don't draw a gradient background on the toolbar
       ``AUI_TB_HORZ_TEXT``                 Combination of ``AUI_TB_HORZ_LAYOUT`` and ``AUI_TB_TEXT``
       ==================================== ==================================
      
      :note: Please note that some styles cannot be changed after the window
       creation and that `Refresh` might need to be be called after changing the
       others for the change to take place immediately.


   .. method:: SetArtProvider(self, art)

      Instructs :class:`AuiToolBar` to use art provider specified by parameter `art`
      for all drawing calls. This allows plugable look-and-feel features.
      
      :param `art`: an art provider.
      
      :note: The previous art provider object, if any, will be deleted by :class:`AuiToolBar`.


   .. method:: SetAuiManager(self, auiManager)

      Sets the :class:`~wx.lib.agw.aui.framemanager.AuiManager` which manages the toolbar. 


   .. method:: SetCustomOverflowItems(self, prepend, append)

      Sets the two lists `prepend` and `append` as custom overflow items.
      
      :param list `prepend`: a list of :class:`AuiToolBarItem` to be prepended;
      :param list `append`: a list of :class:`AuiToolBarItem` to be appended.


   .. method:: SetFont(self, font)

      Sets the :class:`AuiToolBar` font.
      
      :param wx.Font `font`: the new toolbar font.
      
      :note: Overridden from :class:`wx.Control`.


   .. method:: SetGripperVisible(self, visible)

      Sets whether the toolbar gripper is visible or not.
      
      :param bool `visible`: ``True`` for a visible gripper, ``False`` otherwise.


   .. method:: SetHoverItem(self, pitem)

      Sets a toolbar item to be currently hovered by the mouse.
      
      :param `pitem`: an instance of :class:`AuiToolBarItem`.


   .. method:: SetMargins(self, left=-1, right=-1, top=-1, bottom=-1)

      Set the values to be used as margins for the toolbar.
      
      :param integer `left`: the left toolbar margin;
      :param integer `right`: the right toolbar margin;
      :param integer `top`: the top toolbar margin;
      :param integer `bottom`: the bottom toolbar margin.


   .. method:: SetMarginsSize(self, size)

      Set the values to be used as margins for the toolbar.
      
      :param wx.Size `size`: the margin size (an instance of :class:`wx.Size`).


   .. method:: SetMarginsXY(self, x, y)

      Set the values to be used as margins for the toolbar.
      
      :param integer `x`: left margin, right margin and inter-tool separation value;
      :param integer `y`: top margin, bottom margin and inter-tool separation value.


   .. method:: SetOrientation(self, orientation)

      Sets the toolbar orientation.
      
      :param integer `orientation`: either ``wx.VERTICAL`` or ``wx.HORIZONTAL``.
      
      :note: This can be temporarily overridden by :class:`~wx.lib.agw.aui.framemanager.AuiManager` when floating and
       docking a :class:`AuiToolBar`.


   .. method:: SetOverflowVisible(self, visible)

      Sets whether the overflow button is visible or not.
      
      :param bool `visible`: ``True`` for a visible overflow button, ``False`` otherwise.


   .. method:: SetPressedItem(self, pitem)

      Sets a toolbar item to be currently in a "pressed" state.
      
      :param `pitem`: an instance of :class:`AuiToolBarItem`.


   .. method:: SetToolAlignment(self, alignment=wx.EXPAND)

      This sets the alignment for all of the tools within the toolbar
      (only has an effect when the toolbar is expanded).
      
      :param integer `alignment`: :class:`wx.Sizer` alignment value
       (``wx.ALIGN_CENTER_HORIZONTAL`` or ``wx.ALIGN_CENTER_VERTICAL``).


   .. method:: SetToolBitmap(self, tool_id, bitmap)

      Sets the tool bitmap for the tool identified by `tool_id`.
      
      :param integer `tool_id`: the tool identifier;
      :param wx.Bitmap `bitmap`: the new bitmap for the toolbar item.


   .. method:: SetToolBitmapSize(self, size)

      Sets the default size of each tool bitmap. The default bitmap size is 16 by 15 pixels.
      
      :param wx.Size `size`: the size of the bitmaps in the toolbar.
      
      :note: This should be called to tell the toolbar what the tool bitmap
       size is. Call it before you add tools.
      
      :note: Note that this is the size of the bitmap you pass to :meth:`AddTool`,
       and not the eventual size of the tool button.
      
      .. todo::
      
         Add :class:`ToolBar` compatibility, actually implementing this method.


   .. method:: SetToolBorderPadding(self, padding)

      Sets the padding between the tool border and the label.
      
      :param integer `padding`: the padding in pixels.


   .. method:: SetToolDisabledBitmap(self, tool_id, bitmap)

      Sets the tool disabled bitmap for the tool identified by `tool_id`.
      
      :param integer `tool_id`: the tool identifier;
      :param wx.Bitmap `bitmap`: the new disabled bitmap for the toolbar item.


   .. method:: SetToolDropDown(self, tool_id, dropdown)

      Assigns a drop down window menu to the toolbar item.
      
      :param integer `tool_id`: the :class:`AuiToolBarItem` identifier;
      :param bool `dropdown`: whether to assign a drop down menu or not.


   .. method:: SetToolLabel(self, tool_id, label)

      Sets the tool label for the tool identified by `tool_id`.
      
      :param integer `tool_id`: the tool identifier;
      :param string `label`: the new toolbar item label.


   .. method:: SetToolLongHelp(self, tool_id, help_string)

      Sets the long help for the given tool.
      
      :param integer `tool_id`: the tool identifier;
      :param string `help_string`: the string for the long help.


   .. method:: SetToolNormalBitmap(self, tool_id, bitmap)

      Sets the tool bitmap for the tool identified by `tool_id`.
      
      :param integer `tool_id`: the tool identifier;
      :param wx.Bitmap `bitmap`: the new bitmap for the toolbar item.


   .. method:: SetToolOrientation(self, orientation)

      Sets the tool orientation for the toolbar items.
      
      :param integer `orientation`: the :class:`AuiToolBarItem` orientation.


   .. method:: SetToolPacking(self, packing)

      Sets the value used for spacing tools. The default value is 1 pixel.
      
      :param integer `packing`: the value for packing.


   .. method:: SetToolProportion(self, tool_id, proportion)

      Sets the tool proportion in the toolbar.
      
      :param integer `tool_id`: the :class:`AuiToolBarItem` identifier;
      :param integer `proportion`: the tool proportion in the toolbar.


   .. method:: SetToolSeparation(self, separation)

      Sets the separator size for the toolbar.
      
      :param integer `separation`: the separator size in pixels.


   .. method:: SetToolShortHelp(self, tool_id, help_string)

      Sets the short help for the given tool.
      
      :param integer `tool_id`: the tool identifier;
      :param string `help_string`: the string for the short help.


   .. method:: SetToolSticky(self, tool_id, sticky)

      Sets the toolbar item as sticky or non-sticky.
      
      :param integer `tool_id`: the :class:`AuiToolBarItem` identifier;
      :param bool `sticky`: whether the tool should be sticky or not.


   .. method:: SetToolTextOrientation(self, orientation)

      Sets the label orientation for the toolbar items.
      
      :param integer `orientation`: the :class:`AuiToolBarItem` label orientation.


   .. method:: SetWindowStyleFlag(self, style)

      Sets the style of the window.
      
      :param integer `style`: the new window style.
      
      :note: Please note that some styles cannot be changed after the window
       creation and that `Refresh` might need to be be called after changing the
       others for the change to take place immediately.
      
      :note: Overridden from :class:`wx.Control`.


   .. method:: StartPreviewTimer(self)

      Starts a timer in :class:`~wx.lib.agw.aui.framemanager.AuiManager` to slide-in/slide-out the minimized pane. 


   .. method:: StopPreviewTimer(self)

      Stops a timer in :class:`~wx.lib.agw.aui.framemanager.AuiManager` to slide-in/slide-out the minimized pane. 


   .. method:: ToggleTool(self, tool_id, state)

      Toggles a tool on or off. This does not cause any event to get emitted.
      
      :param integer `tool_id`: tool in question.
      :param bool `state`: if ``True``, toggles the tool on, otherwise toggles it off.
      
      :note: This only applies to a tool that has been specified as a toggle tool.


