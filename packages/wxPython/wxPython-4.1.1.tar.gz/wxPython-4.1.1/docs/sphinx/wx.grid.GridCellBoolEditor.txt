.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.grid.GridCellBoolEditor:

==========================================================================================================================================
|phoenix_title|  **wx.grid.GridCellBoolEditor**
==========================================================================================================================================

Grid cell editor for boolean data.          







         



.. seealso:: :ref:`wx.grid.GridCellEditor`, :ref:`wx.grid.GridCellAutoWrapStringEditor`, :ref:`wx.grid.GridCellChoiceEditor`, :ref:`wx.grid.GridCellEnumEditor`, :ref:`wx.grid.GridCellFloatEditor`, :ref:`wx.grid.GridCellNumberEditor`, :ref:`wx.grid.GridCellTextEditor`, :ref:`wx.grid.GridCellDateEditor`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>GridCellBoolEditor</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.grid.GridCellBoolEditor_inheritance.png" alt="Inheritance diagram of GridCellBoolEditor" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.grid.GridCellBoolEditor.html" title="wx.grid.GridCellBoolEditor" alt="" coords="83,160,276,189"/> <area shape="rect" id="node2" href="wx.grid.GridCellEditor.html" title="wx.grid.GridCellEditor" alt="" coords="97,83,261,112"/> <area shape="rect" id="node3" href="wx.ClientDataContainer.html" title="wx.ClientDataContainer" alt="" coords="5,5,183,35"/> <area shape="rect" id="node4" href="wx.RefCounter.html" title="wx.RefCounter" alt="" coords="207,5,325,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.grid.GridCellBoolEditor.__init__`                                     Default constructor.
:meth:`~wx.grid.GridCellBoolEditor.EndEdit`                                      End editing the cell.
:meth:`~wx.grid.GridCellBoolEditor.IsTrueValue`                                  Returns ``True`` if the given `value`  is equal to the string representation of the truth value we currently use (see :meth:`~GridCellBoolEditor.UseStringValues` ).
:meth:`~wx.grid.GridCellBoolEditor.UseStringValues`                              This method allows you to customize the values returned by :meth:`~GridCellBoolEditor.GetValue`   for the cell using this editor.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.grid.GridCellBoolEditor(GridCellEditor)

   **Possible constructors**::

       GridCellBoolEditor()
       
   
   Grid cell editor for boolean data.



   .. method:: __init__(self)

      Default constructor.                   





   .. method:: EndEdit(self, row, col, grid, oldval)

                                      End editing the cell.

                                      This function must check if the current value of the editing cell
                                      is valid and different from the original value in its string
                                      form. If not then simply return None.  If it has changed then
                                      this method should save the new value so that ApplyEdit can
                                      apply it later and the string representation of the new value
                                      should be returned.

                                      Notice that this method shoiuld not modify the grid as the
                                      change could still be vetoed.
                                  





   .. staticmethod:: IsTrueValue(value)

      Returns ``True`` if the given `value`  is equal to the string representation of the truth value we currently use (see :meth:`UseStringValues` ).                  


      :param `value`: 
      :type `value`: string




      :rtype: `bool`








   .. staticmethod:: UseStringValues(valueTrue="1", valueFalse=EmptyString)

      This method allows you to customize the values returned by :meth:`GetValue`   for the cell using this editor.                  

      By default, the default values of the arguments are used, i.e.  ``"1"``   is returned if the cell is checked and an empty string otherwise.                   


      :param `valueTrue`: 
      :type `valueTrue`: string
      :param `valueFalse`: 
      :type `valueFalse`: string






