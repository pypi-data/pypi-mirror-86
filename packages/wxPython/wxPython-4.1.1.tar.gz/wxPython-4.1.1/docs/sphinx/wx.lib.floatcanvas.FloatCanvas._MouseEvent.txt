.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.floatcanvas.FloatCanvas

.. highlight:: python



.. _wx.lib.floatcanvas.FloatCanvas._MouseEvent:

==========================================================================================================================================
|phoenix_title|  **wx.lib.floatcanvas.FloatCanvas._MouseEvent**
==========================================================================================================================================

This event class takes a regular wxWindows mouse event as a parameter,
and wraps it so that there is access to all the original methods. This
is similar to subclassing, but you can't subclass a wxWindows event

The goal is to be able to it just like a regular mouse event.

It adds the method:

GetCoords() , which returns an (x,y) tuple in world coordinates.

Another difference is that it is a CommandEvent, which propagates up
the window hierarchy until it is handled.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>_MouseEvent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.floatcanvas.FloatCanvas._MouseEvent_inheritance.png" alt="Inheritance diagram of _MouseEvent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.floatcanvas.FloatCanvas._MouseEvent.html" title="wx.lib.floatcanvas.FloatCanvas._MouseEvent" alt="" coords="5,315,320,344"/> <area shape="rect" id="node2" href="wx.PyCommandEvent.html" title="wx.PyCommandEvent" alt="" coords="80,237,245,267"/> <area shape="rect" id="node3" href="wx.CommandEvent.html" title="wx.CommandEvent" alt="" coords="88,160,237,189"/> <area shape="rect" id="node4" href="wx.Event.html" title="wx.Event" alt="" coords="121,83,204,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="119,5,206,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.PyCommandEvent`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.floatcanvas.FloatCanvas._MouseEvent.__init__`                     Initialize self.  See help(type(self)) for accurate signature.
:meth:`~wx.lib.floatcanvas.FloatCanvas._MouseEvent.GetCoords`                    
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: _MouseEvent(wx.PyCommandEvent)

   This event class takes a regular wxWindows mouse event as a parameter,
   and wraps it so that there is access to all the original methods. This
   is similar to subclassing, but you can't subclass a wxWindows event
   
   The goal is to be able to it just like a regular mouse event.
   
   It adds the method:
   
   GetCoords() , which returns an (x,y) tuple in world coordinates.
   
   Another difference is that it is a CommandEvent, which propagates up
   the window hierarchy until it is handled.

   .. method:: __init__(self, EventType, NativeEvent, WinID, Coords = None)

      Initialize self.  See help(type(self)) for accurate signature.


   .. method:: GetCoords(self)


