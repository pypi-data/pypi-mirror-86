.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.DC:

==========================================================================================================================================
|phoenix_title|  **wx.DC**
==========================================================================================================================================

A :ref:`wx.DC`  is a `"device context"`  onto which graphics and text can be drawn.          

It is intended to represent different output devices and offers a common abstract API for drawing on any of them. 

wxWidgets offers an alternative drawing API based on the modern drawing backends GDI+, CoreGraphics, Cairo and Direct2D. See :ref:`wx.GraphicsContext`, :ref:`wx.GraphicsRenderer`  and related classes. There is also a :ref:`wx.GCDC`  linking the APIs by offering the :ref:`wx.DC`  API on top of a :ref:`wx.GraphicsContext`. 

:ref:`wx.DC`  is an abstract base class and cannot be created directly. Use :ref:`wx.PaintDC`, :ref:`wx.ClientDC`, :ref:`wx.WindowDC`, :ref:`wx.ScreenDC`, :ref:`wx.MemoryDC`  or :ref:`wx.PrinterDC`. Notice that device contexts which are associated with windows (i.e. :ref:`wx.ClientDC`, :ref:`wx.WindowDC`  and :ref:`wx.PaintDC`) use the window font and colours by default (starting with wxWidgets 2.9.0) but the other device context classes use system-default values so you always must set the appropriate fonts and colours before using them. 

In addition to the versions of the methods documented below, there are also versions which accept single :ref:`wx.Point`  parameter instead of the two int ones or :ref:`wx.Point`  and :ref:`wx.Size`  instead of the four int parameters. 

Beginning with wxWidgets 2.9.0 the entire :ref:`wx.DC`  code has been reorganized. All platform dependent code (actually all drawing code) has been moved into backend classes which derive from a common DCImpl class. The user-visible classes such as :ref:`wx.ClientDC`  and :ref:`wx.PaintDC`  merely forward all calls to the backend implementation. 



|phoenix_title| Device and logical units
========================================

In the :ref:`wx.DC`  context there is a distinction between `logical`  units and `device`  units. **Device**  units are the units native to the particular device; e.g. for a screen, a device unit is a `pixel`. For a printer, the device unit is defined by the resolution of the printer (usually given in  ``DPI:``   dot-per-inch). All :ref:`wx.DC`  functions use instead **logical**  units, unless where explicitly stated. Logical units are arbitrary units mapped to device units using the current mapping mode (see :meth:`wx.DC.SetMapMode` ). This mechanism allows reusing the same code which prints on e.g. a window on the screen to print on e.g. a paper.  



|phoenix_title| Support for Transparency / Alpha Channel
========================================================

In general :ref:`wx.DC`  methods don't support alpha transparency and the alpha component of :ref:`wx.Colour`  is simply ignored and you need to use :ref:`wx.GraphicsContext`  for full transparency support. There are, however, a few exceptions: first, under macOS and GTK+ 3 colours with alpha channel are supported in all the normal DC-derived classes as they use :ref:`wx.GraphicsContext`  internally. Second, under all platforms :ref:`wx.SVGFileDC`  also fully supports alpha channel. In both of these cases the instances of :ref:`wx.Pen`  or :ref:`wx.Brush`  that are built from :ref:`wx.Colour`  use the colour's alpha values when stroking or filling.  



|phoenix_title| Support for Transformation Matrix
=================================================

On some platforms (currently under MSW, GTK+ 3, macOS) :ref:`wx.DC`  has support for applying an arbitrary affine transformation matrix to its coordinate system (since 3.1.1 this feature is also supported by :ref:`wx.GCDC`  in all ports). Call :meth:`~wx.DC.CanUseTransformMatrix`  to check if this support is available and then call :meth:`~wx.DC.SetTransformMatrix`  if it is. If the transformation matrix is not supported, :meth:`~wx.DC.SetTransformMatrix`  always simply returns  ``false``   and doesn't do anything. This feature is only available when  ``USE_DC_TRANSFORM_MATRIX``   build option is enabled.   



.. seealso:: :ref:`Device Contexts <device contexts>`, :ref:`wx.GraphicsContext`, :ref:`wx.DCFontChanger`, :ref:`wx.DCTextColourChanger`, :ref:`wx.DCPenChanger`, :ref:`wx.DCBrushChanger`, :ref:`wx.DCClipper`  







.. todo:: Precise definition of default/initial state.  Pixelwise definition of operations (e.g. last point of a line not drawn).    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>DC</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.DC_inheritance.png" alt="Inheritance diagram of DC" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.DC.html" title="wx.DC" alt="" coords="13,83,85,112"/> <area shape="rect" id="node2" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.GCDC`, :ref:`wx.MemoryDC`, :ref:`wx.MetafileDC`, :ref:`wx.MirrorDC`, :ref:`wx.PostScriptDC`, :ref:`wx.PrinterDC`, :ref:`wx.ScreenDC`, :ref:`wx.SVGFileDC`, :ref:`wx.WindowDC`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.DC.Blit`                                                              Copy from a source DC to this DC.
:meth:`~wx.DC.CalcBoundingBox`                                                   Adds the specified point to the bounding box which can be retrieved with :meth:`~DC.MinX` , :meth:`~DC.MaxX`   and :meth:`~DC.MinY` , :meth:`~DC.MaxY`   functions.
:meth:`~wx.DC.CanDrawBitmap`                                                     Does the DC support drawing bitmaps?
:meth:`~wx.DC.CanGetTextExtent`                                                  Does the DC support calculating the size required to draw text?
:meth:`~wx.DC.CanUseTransformMatrix`                                             Check if the use of transformation matrix is supported by the current system.
:meth:`~wx.DC.Clear`                                                             Clears the device context using the current background brush.
:meth:`~wx.DC.CopyAttributes`                                                    Copy attributes from another DC.
:meth:`~wx.DC.CrossHair`                                                         Displays a cross hair using the current pen.
:meth:`~wx.DC.DestroyClippingRegion`                                             Destroys the current clipping region so that none of the DC is clipped.
:meth:`~wx.DC.DeviceToLogical`                                                   Converts device (`x`, `y`) coordinates to logical coordinates taking into account all applied transformations like the current mapping mode, scale factors, device origin, axes orientation, affine transformation.
:meth:`~wx.DC.DeviceToLogicalRel`                                                Converts device `x`, `y`  coordinates to relative logical coordinates taking into account all applied transformations like the current mapping mode, scale factors, affine transformation.
:meth:`~wx.DC.DeviceToLogicalX`                                                  Convert `device`  X coordinate to logical coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.
:meth:`~wx.DC.DeviceToLogicalXRel`                                               Convert `device`  X coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.
:meth:`~wx.DC.DeviceToLogicalY`                                                  Converts `device`  Y coordinate to logical coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.
:meth:`~wx.DC.DeviceToLogicalYRel`                                               Convert `device`  Y coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.
:meth:`~wx.DC.DrawArc`                                                           Draws an arc from the given start to the given end point.
:meth:`~wx.DC.DrawBitmap`                                                        Draw a bitmap on the device context at the specified point.
:meth:`~wx.DC.DrawCheckMark`                                                     Draws a check mark inside the given rectangle.
:meth:`~wx.DC.DrawCircle`                                                        Draws a circle with the given centre and radius.
:meth:`~wx.DC.DrawEllipse`                                                       Draws an ellipse contained in the rectangle specified either with the given top left corner and the given size or directly.
:meth:`~wx.DC.DrawEllipseList`                                                   Draw a list of ellipses as quickly as possible.
:meth:`~wx.DC.DrawEllipticArc`                                                   Draws an arc of an ellipse.
:meth:`~wx.DC.DrawIcon`                                                          Draw an icon on the display (does nothing if the device context is PostScript).
:meth:`~wx.DC.DrawLabel`                                                         Draw optional bitmap and the text into the given rectangle and aligns it as specified by alignment parameter; it also will emphasize the character with the given index if it is != -1 and return the bounding rectangle if required.
:meth:`~wx.DC.DrawLine`                                                          Draws a line from the first point to the second.
:meth:`~wx.DC.DrawLineList`                                                      Draw a list of lines as quickly as possible.
:meth:`~wx.DC.DrawLines`                                                         This method uses a list of Points, adding the optional offset coordinate.
:meth:`~wx.DC.DrawPoint`                                                         Draws a point using the color of the current pen.
:meth:`~wx.DC.DrawPointList`                                                     Draw a list of points as quickly as possible.
:meth:`~wx.DC.DrawPolygon`                                                       This method draws a filled polygon using a list of Points, adding the optional offset coordinate.
:meth:`~wx.DC.DrawPolygonList`                                                   Draw a list of polygons, each of which is a list of points.
:meth:`~wx.DC.DrawRectangle`                                                     Draws a rectangle with the given corner coordinate and size.
:meth:`~wx.DC.DrawRectangleList`                                                 Draw a list of rectangles as quickly as possible.
:meth:`~wx.DC.DrawRotatedText`                                                   Draws the text rotated by `angle`  degrees (positive angles are counterclockwise; the full angle is 360 degrees).
:meth:`~wx.DC.DrawRoundedRectangle`                                              Draws a rectangle with the given top left corner, and with the given size.
:meth:`~wx.DC.DrawSpline`                                                        This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
:meth:`~wx.DC.DrawText`                                                          Draws a text string at the specified point, using the current text font, and the current text foreground and background colours.
:meth:`~wx.DC.DrawTextList`                                                      Draw a list of strings using a list of coordinants for positioning each string.
:meth:`~wx.DC.EndDoc`                                                            Ends a document (only relevant when outputting to a printer).
:meth:`~wx.DC.EndPage`                                                           Ends a document page (only relevant when outputting to a printer).
:meth:`~wx.DC.FloodFill`                                                         Flood fills the device context starting from the given point, using the current brush colour, and using a style
:meth:`~wx.DC.GetAsBitmap`                                                       If supported by the platform and the type of DC, fetch the contents of the DC, or a subset of it, as a bitmap.
:meth:`~wx.DC.GetBackground`                                                     Gets the brush used for painting the background.
:meth:`~wx.DC.GetBackgroundMode`                                                 Returns the current background mode:  ``BRUSHSTYLE_SOLID``   or   ``BRUSHSTYLE_TRANSPARENT`` .
:meth:`~wx.DC.GetBoundingBox`                                                    GetBoundingBox() . (x1,y1, x2,y2)
:meth:`~wx.DC.GetBrush`                                                          Gets the current brush.
:meth:`~wx.DC.GetCGContext`                                                      
:meth:`~wx.DC.GetCharHeight`                                                     Gets the character height of the currently set font.
:meth:`~wx.DC.GetCharWidth`                                                      Gets the average character width of the currently set font.
:meth:`~wx.DC.GetClippingBox`                                                    Gets the rectangle surrounding the current clipping region.
:meth:`~wx.DC.GetClippingRect`                                                   Returns the rectangle surrounding the current clipping region as a wx.Rect.
:meth:`~wx.DC.GetDepth`                                                          Returns the depth (number of bits/pixel) of this DC.
:meth:`~wx.DC.GetDeviceOrigin`                                                   Returns the current device origin.
:meth:`~wx.DC.GetFont`                                                           Gets the current font.
:meth:`~wx.DC.GetFontMetrics`                                                    Returns the various font characteristics.
:meth:`~wx.DC.GetGdkDrawable`                                                    
:meth:`~wx.DC.GetGraphicsContext`                                                If supported by the platform and the  ` :ref:`wx.DC` `   implementation, this method will return the  ` :ref:`wx.GraphicsContext` `   associated with the DC.
:meth:`~wx.DC.GetHDC`                                                            
:meth:`~wx.DC.GetHandle`                                                         Returns a value that can be used as a handle to the native drawing context, if this :ref:`wx.DC`  has something that could be thought of in that way.
:meth:`~wx.DC.GetLayoutDirection`                                                Gets the current layout direction of the device context.
:meth:`~wx.DC.GetLogicalFunction`                                                Gets the current logical function.
:meth:`~wx.DC.GetLogicalOrigin`                                                  Return the coordinates of the logical point (0, 0).
:meth:`~wx.DC.GetLogicalScale`                                                   Return the scale set by the last call to :meth:`~DC.SetLogicalScale` .
:meth:`~wx.DC.GetMapMode`                                                        Gets the current mapping mode for the device context.
:meth:`~wx.DC.GetFullMultiLineTextExtent`                                        Gets the dimensions of the string as it would be drawn.
:meth:`~wx.DC.GetMultiLineTextExtent`                                            Return the dimensions of the given string's text extent using the
:meth:`~wx.DC.GetPPI`                                                            Returns the resolution of the device in pixels per inch.
:meth:`~wx.DC.GetPartialTextExtents`                                             Fills the `widths`  array with the widths from the beginning of `text`  to the corresponding character of `text`.
:meth:`~wx.DC.GetPen`                                                            Gets the current pen.
:meth:`~wx.DC.GetPixel`                                                          Gets the colour at the specified location on the DC.
:meth:`~wx.DC.GetSize`                                                           This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
:meth:`~wx.DC.GetSizeMM`                                                         This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
:meth:`~wx.DC.GetTextBackground`                                                 Gets the current text background colour.
:meth:`~wx.DC.GetFullTextExtent`                                                 Gets the dimensions of the string as it would be drawn.
:meth:`~wx.DC.GetTextExtent`                                                     Return the dimensions of the given string's text extent using the
:meth:`~wx.DC.GetTextForeground`                                                 Gets the current text foreground colour.
:meth:`~wx.DC.GetTransformMatrix`                                                Return the transformation matrix used by this device context.
:meth:`~wx.DC.GetUserScale`                                                      Gets the current user scale factor.
:meth:`~wx.DC.GradientFillConcentric`                                            Fill the area specified by rect with a radial gradient, starting from `initialColour`  at the centre of the circle and fading to `destColour`  on the circle outside.
:meth:`~wx.DC.GradientFillLinear`                                                Fill the area specified by `rect`  with a linear gradient, starting from `initialColour`  and eventually fading to `destColour`.
:meth:`~wx.DC.IsOk`                                                              Returns ``True`` if the DC is ok to use.
:meth:`~wx.DC.LogicalToDevice`                                                   Converts logical (`x`, `y`) coordinates to device coordinates taking into account all applied transformations like the current mapping mode, scale factors, device origin, axes orientation, affine transformation.
:meth:`~wx.DC.LogicalToDeviceRel`                                                Converts logical `x`, `y`  coordinates to relative device coordinates taking into account all applied transformations like the current mapping mode, scale factors, affine transformation.
:meth:`~wx.DC.LogicalToDeviceX`                                                  Converts logical X coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.
:meth:`~wx.DC.LogicalToDeviceXRel`                                               Converts logical X coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.
:meth:`~wx.DC.LogicalToDeviceY`                                                  Converts logical Y coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.
:meth:`~wx.DC.LogicalToDeviceYRel`                                               Converts logical Y coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.
:meth:`~wx.DC.MaxX`                                                              Gets the maximum horizontal extent used in drawing commands so far.
:meth:`~wx.DC.MaxY`                                                              Gets the maximum vertical extent used in drawing commands so far.
:meth:`~wx.DC.MinX`                                                              Gets the minimum horizontal extent used in drawing commands so far.
:meth:`~wx.DC.MinY`                                                              Gets the minimum vertical extent used in drawing commands so far.
:meth:`~wx.DC.ResetBoundingBox`                                                  Resets the bounding box: after a call to this function, the bounding box doesn't contain anything.
:meth:`~wx.DC.ResetTransformMatrix`                                              Revert the transformation matrix to identity matrix.
:meth:`~wx.DC.SetAxisOrientation`                                                Sets the x and y axis orientation (i.e. the direction from lowest to highest values on the axis).
:meth:`~wx.DC.SetBackground`                                                     Sets the current background brush for the DC.
:meth:`~wx.DC.SetBackgroundMode`                                                 Change the current background mode.
:meth:`~wx.DC.SetBrush`                                                          Sets the current brush for the DC.
:meth:`~wx.DC.SetClippingRegion`                                                 Sets the clipping region for this device context to the intersection of the given region described by the parameters of this method and the previously set clipping region.
:meth:`~wx.DC.SetDeviceClippingRegion`                                           Sets the clipping region for this device context.
:meth:`~wx.DC.SetDeviceOrigin`                                                   Sets the device origin (i.e. the origin in pixels after scaling has been applied).
:meth:`~wx.DC.SetFont`                                                           Sets the current font for the DC.
:meth:`~wx.DC.SetGraphicsContext`                                                Associate a :ref:`wx.GraphicsContext`  with the DC.
:meth:`~wx.DC.SetLayoutDirection`                                                Sets the current layout direction for the device context.
:meth:`~wx.DC.SetLogicalFunction`                                                Sets the current logical function for the device context.
:meth:`~wx.DC.SetLogicalOrigin`                                                  Change the offset used for translating :ref:`wx.DC`  coordinates.
:meth:`~wx.DC.SetLogicalScale`                                                   Set the scale to use for translating :ref:`wx.DC`  coordinates to the physical pixels.
:meth:`~wx.DC.SetMapMode`                                                        The mapping mode of the device context defines the unit of measurement used to convert `logical`  units to `device`  units.
:meth:`~wx.DC.SetPalette`                                                        If this is a window DC or memory DC, assigns the given palette to the window or bitmap associated with the DC.
:meth:`~wx.DC.SetPen`                                                            Sets the current pen for the DC.
:meth:`~wx.DC.SetTextBackground`                                                 Sets the current text background colour for the DC.
:meth:`~wx.DC.SetTextForeground`                                                 Sets the current text foreground colour for the DC.
:meth:`~wx.DC.SetTransformMatrix`                                                Set the transformation matrix.
:meth:`~wx.DC.SetUserScale`                                                      Sets the user scaling factor, useful for applications which require 'zooming'.
:meth:`~wx.DC.StartDoc`                                                          Starts a document (only relevant when outputting to a printer).
:meth:`~wx.DC.StartPage`                                                         Starts a document page (only relevant when outputting to a printer).
:meth:`~wx.DC.StretchBlit`                                                       Copy from a source DC to this DC possibly changing the scale.
:meth:`~wx.DC._DrawEllipseList`                                                  
:meth:`~wx.DC._DrawLineList`                                                     
:meth:`~wx.DC._DrawPointList`                                                    
:meth:`~wx.DC._DrawPolygonList`                                                  
:meth:`~wx.DC._DrawRectangleList`                                                
:meth:`~wx.DC._DrawTextList`                                                     
:meth:`~wx.DC.__bool__`                                                          
:meth:`~wx.DC.__enter__`                                                         
:meth:`~wx.DC.__exit__`                                                          
:meth:`~wx.DC.__nonzero__`                                                       
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.DC.AsBitmap`                                                          See :meth:`~wx.DC.GetAsBitmap`
:attr:`~wx.DC.Background`                                                        See :meth:`~wx.DC.GetBackground` and :meth:`~wx.DC.SetBackground`
:attr:`~wx.DC.BackgroundMode`                                                    See :meth:`~wx.DC.GetBackgroundMode` and :meth:`~wx.DC.SetBackgroundMode`
:attr:`~wx.DC.BoundingBox`                                                       See :meth:`~wx.DC.GetBoundingBox`
:attr:`~wx.DC.Brush`                                                             See :meth:`~wx.DC.GetBrush` and :meth:`~wx.DC.SetBrush`
:attr:`~wx.DC.CGContext`                                                         See :meth:`~wx.DC.GetCGContext`
:attr:`~wx.DC.CharHeight`                                                        See :meth:`~wx.DC.GetCharHeight`
:attr:`~wx.DC.CharWidth`                                                         See :meth:`~wx.DC.GetCharWidth`
:attr:`~wx.DC.ClippingRect`                                                      See :meth:`~wx.DC.GetClippingRect`
:attr:`~wx.DC.Depth`                                                             See :meth:`~wx.DC.GetDepth`
:attr:`~wx.DC.DeviceOrigin`                                                      See :meth:`~wx.DC.GetDeviceOrigin` and :meth:`~wx.DC.SetDeviceOrigin`
:attr:`~wx.DC.Font`                                                              See :meth:`~wx.DC.GetFont` and :meth:`~wx.DC.SetFont`
:attr:`~wx.DC.FontMetrics`                                                       See :meth:`~wx.DC.GetFontMetrics`
:attr:`~wx.DC.GdkDrawable`                                                       See :meth:`~wx.DC.GetGdkDrawable`
:attr:`~wx.DC.GraphicsContext`                                                   See :meth:`~wx.DC.GetGraphicsContext` and :meth:`~wx.DC.SetGraphicsContext`
:attr:`~wx.DC.HDC`                                                               See :meth:`~wx.DC.GetHDC`
:attr:`~wx.DC.Handle`                                                            See :meth:`~wx.DC.GetHandle`
:attr:`~wx.DC.LayoutDirection`                                                   See :meth:`~wx.DC.GetLayoutDirection` and :meth:`~wx.DC.SetLayoutDirection`
:attr:`~wx.DC.LogicalFunction`                                                   See :meth:`~wx.DC.GetLogicalFunction` and :meth:`~wx.DC.SetLogicalFunction`
:attr:`~wx.DC.MapMode`                                                           See :meth:`~wx.DC.GetMapMode` and :meth:`~wx.DC.SetMapMode`
:attr:`~wx.DC.MultiLineTextExtent`                                               See :meth:`~wx.DC.GetMultiLineTextExtent`
:attr:`~wx.DC.PPI`                                                               See :meth:`~wx.DC.GetPPI`
:attr:`~wx.DC.Pen`                                                               See :meth:`~wx.DC.GetPen` and :meth:`~wx.DC.SetPen`
:attr:`~wx.DC.Pixel`                                                             See :meth:`~wx.DC.GetPixel`
:attr:`~wx.DC.Size`                                                              See :meth:`~wx.DC.GetSize`
:attr:`~wx.DC.SizeMM`                                                            See :meth:`~wx.DC.GetSizeMM`
:attr:`~wx.DC.TextBackground`                                                    See :meth:`~wx.DC.GetTextBackground` and :meth:`~wx.DC.SetTextBackground`
:attr:`~wx.DC.TextExtent`                                                        See :meth:`~wx.DC.GetTextExtent`
:attr:`~wx.DC.TextForeground`                                                    See :meth:`~wx.DC.GetTextForeground` and :meth:`~wx.DC.SetTextForeground`
:attr:`~wx.DC.TransformMatrix`                                                   See :meth:`~wx.DC.GetTransformMatrix` and :meth:`~wx.DC.SetTransformMatrix`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.DC(Object)

   A DC is a "device context" onto which graphics and text can be
   drawn.



   .. method:: Blit(self, xdest, ydest, width, height, source, xsrc, ysrc, logicalFunc=COPY, useMask=False, xsrcMask=DefaultCoord, ysrcMask=DefaultCoord)

      Copy from a source DC to this DC.                  

      With this method you can specify the destination coordinates and the size of area to copy which will be the same for both the source and target DCs. If you need to apply scaling while copying, use :meth:`StretchBlit` . 

      Notice that source DC coordinates `xsrc`  and `ysrc`  are interpreted using the current source DC coordinate system, i.e. the scale, origin position and axis directions are taken into account when transforming them to physical (pixel) coordinates. 




      :param `xdest`: Destination device context x position.   
      :type `xdest`: int
      :param `ydest`: Destination device context y position.   
      :type `ydest`: int
      :param `width`: Width of source area to be copied.   
      :type `width`: int
      :param `height`: Height of source area to be copied.   
      :type `height`: int
      :param `source`: Source device context.   
      :type `source`: wx.DC
      :param `xsrc`: Source device context x position.   
      :type `xsrc`: int
      :param `ysrc`: Source device context y position.   
      :type `ysrc`: int
      :param `logicalFunc`: Logical function to use, see :meth:`SetLogicalFunction` .   
      :type `logicalFunc`: wx.RasterOperationMode
      :param `useMask`: If ``True``, Blit does a transparent blit using the mask that is associated with the bitmap selected into the source device context. The Windows implementation does the following if MaskBlt cannot be used: 

       - Creates a temporary bitmap and copies the destination area into it.  
       - Copies the source area into the temporary bitmap using the specified logical function.  
       - Sets the masked area in the temporary bitmap to ``wx.BLACK`` by ANDing the mask bitmap with the temp bitmap with the foreground colour set to ``wx.WHITE`` and the bg colour set to ``wx.BLACK``.  
       - Sets the unmasked area in the destination area to ``wx.BLACK`` by ANDing the mask bitmap with the destination area with the foreground colour set to ``wx.BLACK`` and the background colour set to ``wx.WHITE``.  
       - ORs the temporary bitmap with the destination area.  
       - Deletes the temporary bitmap.  

       This sequence of operations ensures that the source's transparent area need not be black, and logical functions are supported.


         **Note:**  on Windows, blitting with masks can be speeded up considerably by compiling wxWidgets with the ``USE_DC_CACHEING`` option enabled. You can also influence whether MaskBlt or the explicit mask blitting code above is used, by using :ref:`wx.SystemOptions`  and setting the  ``no-maskblt``   option to 1.    
      :type `useMask`: bool
      :param `xsrcMask`: Source x position on the mask. If both xsrcMask and ysrcMask are  ``-1`` , xsrc and ysrc will be assumed for the mask source position. Currently only implemented on Windows.    
      :type `xsrcMask`: int
      :param `ysrcMask`: Source y position on the mask. If both xsrcMask and ysrcMask are  ``-1`` , xsrc and ysrc will be assumed for the mask source position. Currently only implemented on Windows.  
      :type `ysrcMask`: int


























      :rtype: `bool`



                  



      .. note:: 

         There is partial support for :meth:`Blit`   in :ref:`wx.PostScriptDC`, under X.  







      .. seealso:: :meth:`StretchBlit` , :ref:`wx.MemoryDC`, :ref:`wx.Bitmap`, :ref:`wx.Mask`    








   .. method:: CalcBoundingBox(self, x, y)

      Adds the specified point to the bounding box which can be retrieved with :meth:`MinX` , :meth:`MaxX`   and :meth:`MinY` , :meth:`MaxY`   functions.                  

                


      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int






      .. seealso:: :meth:`ResetBoundingBox`     








   .. method:: CanDrawBitmap(self)

      Does the DC support drawing bitmaps?                  

      :rtype: `bool`








   .. method:: CanGetTextExtent(self)

      Does the DC support calculating the size required to draw text?                  

      :rtype: `bool`








   .. method:: CanUseTransformMatrix(self)

      Check if the use of transformation matrix is supported by the current system.                  

      This function returns ``True`` for MSW and GTK+ 3 platforms and since 3.1.1 also for :ref:`wx.GCDC`  in all ports. 

                

      :rtype: `bool`







      .. versionadded:: 2.9.2 
     








   .. method:: Clear(self)

      Clears the device context using the current background brush.                  

      Note that :meth:`SetBackground`   method must be used to set the brush used by :meth:`Clear` , the brush used for filling the shapes set by :meth:`SetBrush`   is ignored by it. 

      If no background brush was set, solid white brush is used to clear the device context.                   





   .. method:: CopyAttributes(self, dc)

      Copy attributes from another DC.                  

      The copied attributes currently are:

      - Font 
      - Text foreground and background colours 
      - Background brush 
      - Layout direction 







      :param `dc`: A valid (i.e. its :meth:`IsOk`   must return ``True``) source device context.   
      :type `dc`: wx.DC




                  





   .. method:: CrossHair(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **CrossHair** `(self, x, y)`
      
      Displays a cross hair using the current pen.                  
      
      This is a vertical and horizontal line the height and width of the window, centred on the given point.                  
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **CrossHair** `(self, pt)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DestroyClippingRegion(self)

      Destroys the current clipping region so that none of the DC is clipped.                  

                 



      .. seealso:: :meth:`SetClippingRegion`     








   .. method:: DeviceToLogical(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DeviceToLogical** `(self, x, y)`
      
      Converts device (`x`, `y`) coordinates to logical coordinates taking into account all applied transformations like the current mapping mode, scale factors, device origin, axes orientation, affine transformation.                  
      
                      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      :rtype: :ref:`wx.Point`
      
      
      
      
      
      
      
      .. versionadded:: 4.1/wxWidgets-3.1.5  
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DeviceToLogical** `(self, pt)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
                      
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      :rtype: :ref:`wx.Point`
      
      
      
      
      
      
      
      .. versionadded:: 4.1/wxWidgets-3.1.5  
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DeviceToLogicalRel(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DeviceToLogicalRel** `(self, x, y)`
      
      Converts device `x`, `y`  coordinates to relative logical coordinates taking into account all applied transformations like the current mapping mode, scale factors, affine transformation.                  
      
      Use this for converting distances like e.g. width and height. 
      
                      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      :rtype: :ref:`wx.Size`
      
      
      
      
      
      
      
      .. versionadded:: 4.1/wxWidgets-3.1.5  
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DeviceToLogicalRel** `(self, dim)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
                      
      
      
      :param `dim`: 
      :type `dim`: wx.Size
      
      
      
      
      :rtype: :ref:`wx.Size`
      
      
      
      
      
      
      
      .. versionadded:: 4.1/wxWidgets-3.1.5  
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DeviceToLogicalX(self, x)

      Convert `device`  X coordinate to logical coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.                  

                


      :param `x`: 
      :type `x`: int




      :rtype: :ref:`wx.Coord`







      .. note:: 

         Affine transformation applied to the coordinate system with :meth:`SetTransformMatrix`   is not taken into account.   








   .. method:: DeviceToLogicalXRel(self, x)

      Convert `device`  X coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.                  

      Use this for converting a horizontal distance like for example a width. 

                


      :param `x`: 
      :type `x`: int




      :rtype: :ref:`wx.Coord`







      .. note:: 

         Affine transformation applied to the coordinate system with :meth:`SetTransformMatrix`   is not taken into account.   








   .. method:: DeviceToLogicalY(self, y)

      Converts `device`  Y coordinate to logical coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.                  

                


      :param `y`: 
      :type `y`: int




      :rtype: :ref:`wx.Coord`







      .. note:: 

         Affine transformation applied to the coordinate system with :meth:`SetTransformMatrix`   is not taken into account.   








   .. method:: DeviceToLogicalYRel(self, y)

      Convert `device`  Y coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.                  

      Use this for converting a vertical distance like for example a height. 

                


      :param `y`: 
      :type `y`: int




      :rtype: :ref:`wx.Coord`







      .. note:: 

         Affine transformation applied to the coordinate system with :meth:`SetTransformMatrix`   is not taken into account.   








   .. method:: DrawArc(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawArc** `(self, xStart, yStart, xEnd, yEnd, xc, yc)`
      
      Draws an arc from the given start to the given end point.                  
      
      
      The arc drawn is an arc of the circle centered at ( `xc`, `yc`). Its start point is (`xStart`, `yStart`) whereas its end point is the point of intersection of the line passing by (`xc`, `yc`) and (`xEnd`, `yEnd`) with the circle passing by (`xStart`, `yStart`). 
      
      The arc is drawn in a counter-clockwise direction between the start and the end points. 
      
      The current pen is used for the outline and the current brush for filling the shape. Notice that unless the brush is transparent, the lines connecting the centre of the circle to the end points of the arc are drawn as well.                  
      
      
      :param `xStart`: 
      :type `xStart`: int
      :param `yStart`: 
      :type `yStart`: int
      :param `xEnd`: 
      :type `xEnd`: int
      :param `yEnd`: 
      :type `yEnd`: int
      :param `xc`: 
      :type `xc`: int
      :param `yc`: 
      :type `yc`: int
      
      
      
      
      
      
      .. note:: 
      
         :meth:`DrawEllipticArc`   has more clear semantics and it is recommended to use it instead of this function.  
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawArc** `(self, ptStart, ptEnd, centre)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `ptStart`: 
      :type `ptStart`: wx.Point
      :param `ptEnd`: 
      :type `ptEnd`: wx.Point
      :param `centre`: 
      :type `centre`: wx.Point
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawBitmap(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawBitmap** `(self, bitmap, x, y, useMask=False)`
      
      Draw a bitmap on the device context at the specified point.                  
      
      If `useMask`  is ``True`` and the bitmap has a transparency mask, the bitmap will be drawn transparently. 
      
      When drawing a mono-bitmap, the current text foreground colour will be used to draw the foreground of the bitmap (all bits set to 1), and the current text background colour to draw the background (all bits set to 0). 
      
                      
      
      
      :param `bitmap`: 
      :type `bitmap`: wx.Bitmap
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `useMask`: 
      :type `useMask`: bool
      
      
      
      
      
      
      .. seealso:: :meth:`SetTextForeground` , :meth:`SetTextBackground` , :ref:`wx.MemoryDC`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawBitmap** `(self, bmp, pt, useMask=False)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `bmp`: 
      :type `bmp`: wx.Bitmap
      :param `pt`: 
      :type `pt`: wx.Point
      :param `useMask`: 
      :type `useMask`: bool
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawCheckMark(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawCheckMark** `(self, x, y, width, height)`
      
      Draws a check mark inside the given rectangle.                  
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `width`: 
      :type `width`: int
      :param `height`: 
      :type `height`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawCheckMark** `(self, rect)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `rect`: 
      :type `rect`: wx.Rect
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawCircle(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawCircle** `(self, x, y, radius)`
      
      Draws a circle with the given centre and radius.                  
      
                      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `radius`: 
      :type `radius`: int
      
      
      
      
      
      
      .. seealso:: :meth:`DrawEllipse`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawCircle** `(self, pt, radius)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      :param `radius`: 
      :type `radius`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawEllipse(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawEllipse** `(self, x, y, width, height)`
      
      Draws an ellipse contained in the rectangle specified either with the given top left corner and the given size or directly.                  
      
      The current pen is used for the outline and the current brush for filling the shape. 
      
                      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `width`: 
      :type `width`: int
      :param `height`: 
      :type `height`: int
      
      
      
      
      
      
      .. seealso:: :meth:`DrawCircle`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawEllipse** `(self, pt, size)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawEllipse** `(self, rect)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `rect`: 
      :type `rect`: wx.Rect
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawEllipseList(self, ellipses, pens=None, brushes=None)

      Draw a list of ellipses as quickly as possible.
      
      :param ellipses: A sequence of 4-element sequences representing
                                  each ellipse to draw, (x,y, w,h).
      :param pens:     If None, then the current pen is used.  If a
                                  single pen then it will be used for all ellipses.
                                  If a list of pens then there should be one for each
                                  ellipse in ellipses.
      :param brushes:  A brush or brushes to be used to fill the ellipses,
                                  with similar semantics as the pens parameter.



   .. method:: DrawEllipticArc(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawEllipticArc** `(self, x, y, width, height, start, end)`
      
      Draws an arc of an ellipse.                  
      
      The current pen is used for drawing the arc and the current brush is used for drawing the pie. 
      
      `x`  and `y`  specify the x and y coordinates of the upper-left corner of the rectangle that contains the ellipse. 
      
      `width`  and `height`  specify the width and height of the rectangle that contains the ellipse. 
      
      `start`  and `end`  specify the end points of the arc relative to the three-o'clock position from the center of the rectangle. Angles are specified in degrees with 0 degree angle corresponding to the positive horizontal axis (3 o'clock) direction. 
      
      Independently of whether `start`  is greater than or less than `end`, the arc is drawn in the counter-clockwise direction. Also, if `start`  is equal to `end`, a complete ellipse is drawn. 
      
      Notice that unlike :meth:`DrawArc` , this function does not draw the lines to the arc ends, even when using non-transparent brush.                  
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `width`: 
      :type `width`: int
      :param `height`: 
      :type `height`: int
      :param `start`: 
      :type `start`: float
      :param `end`: 
      :type `end`: float
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawEllipticArc** `(self, pt, sz, sa, ea)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      :param `sz`: 
      :type `sz`: wx.Size
      :param `sa`: 
      :type `sa`: float
      :param `ea`: 
      :type `ea`: float
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawIcon(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawIcon** `(self, icon, x, y)`
      
      Draw an icon on the display (does nothing if the device context is PostScript).                  
      
      This can be the simplest way of drawing bitmaps on a window.                  
      
      
      :param `icon`: 
      :type `icon`: wx.Icon
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawIcon** `(self, icon, pt)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `icon`: 
      :type `icon`: wx.Icon
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawLabel(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawLabel** `(self, text, bitmap, rect, alignment=ALIGN_LEFT|ALIGN_TOP, indexAccel=-1)`
      
      Draw optional bitmap and the text into the given rectangle and aligns it as specified by alignment parameter; it also will emphasize the character with the given index if it is != -1 and return the bounding rectangle if required.                  
      
      
      :param `text`: 
      :type `text`: string
      :param `bitmap`: 
      :type `bitmap`: wx.Bitmap
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `alignment`: 
      :type `alignment`: int
      :param `indexAccel`: 
      :type `indexAccel`: int
      
      
      
      
      :rtype: :ref:`wx.Rect`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawLabel** `(self, text, rect, alignment=ALIGN_LEFT|ALIGN_TOP, indexAccel=-1)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `text`: 
      :type `text`: string
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `alignment`: 
      :type `alignment`: int
      :param `indexAccel`: 
      :type `indexAccel`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawLine(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawLine** `(self, x1, y1, x2, y2)`
      
      Draws a line from the first point to the second.                  
      
      The current pen is used for drawing the line. Note that the point (`x2`, `y2`) is not part of the line and is not drawn by this function (this is consistent with the behaviour of many other toolkits).                  
      
      
      :param `x1`: 
      :type `x1`: int
      :param `y1`: 
      :type `y1`: int
      :param `x2`: 
      :type `x2`: int
      :param `y2`: 
      :type `y2`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawLine** `(self, pt1, pt2)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `pt1`: 
      :type `pt1`: wx.Point
      :param `pt2`: 
      :type `pt2`: wx.Point
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawLineList(self, lines, pens=None)

      Draw a list of lines as quickly as possible.
      
      :param lines: A sequence of 4-element sequences representing
                            each line to draw, (x1,y1, x2,y2).
      :param pens:  If None, then the current pen is used.  If a
                            single pen then it will be used for all lines.  If
                            a list of pens then there should be one for each line
                            in lines.



   .. method:: DrawLines(self, points, xoffset=0, yoffset=0)

      This method uses a list of Points, adding the optional offset coordinate.                  

      The programmer is responsible for deleting the list of points. 

      




   .. method:: DrawPoint(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawPoint** `(self, x, y)`
      
      Draws a point using the color of the current pen.                  
      
      Note that the other properties of the pen are not used, such as width.                  
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawPoint** `(self, pt)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawPointList(self, points, pens=None)

      Draw a list of points as quickly as possible.
      
      :param points: A sequence of 2-element sequences representing
                              each point to draw, (x,y).
      :param pens:   If None, then the current pen is used.  If a single
                              pen then it will be used for all points.  If a list of
                              pens then there should be one for each point in points.



   .. method:: DrawPolygon(self, points, xoffset=0, yoffset=0, fill_style=ODDEVEN_RULE)

      This method draws a filled polygon using a list of Points, adding the optional offset coordinate.                  

      The first and last points are automatically closed. 

      The last argument specifies the fill rule: ``wx.ODDEVEN_RULE``  (the default) or ``wx.WINDING_RULE``. 

      The current pen is used for drawing the outline, and the current brush for filling the shape. Using a transparent brush suppresses filling. 

      The programmer is responsible for deleting the list of points. 

      




   .. method:: DrawPolygonList(self, polygons, pens=None, brushes=None)

      Draw a list of polygons, each of which is a list of points.
      
      :param polygons: A sequence of sequences of sequences.
                                  [[(x1,y1),(x2,y2),(x3,y3)...], [(x1,y1),(x2,y2),(x3,y3)...]]
      
      :param pens:     If None, then the current pen is used.  If a
                                  single pen then it will be used for all polygons.
                                  If a list of pens then there should be one for each
                                  polygon.
      :param brushes:  A brush or brushes to be used to fill the polygons,
                                  with similar semantics as the pens parameter.



   .. method:: DrawRectangle(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawRectangle** `(self, x, y, width, height)`
      
      Draws a rectangle with the given corner coordinate and size.                  
      
      Normally, `x`  and `y`  specify the top left corner coordinates and both `width`  and `height`  are positive, however they are also allowed to be negative, in which case the corresponding corner coordinate refers to the right or bottom corner instead. 
      
      The current pen is used for the outline and the current brush for filling the shape.                  
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `width`: 
      :type `width`: int
      :param `height`: 
      :type `height`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawRectangle** `(self, pt, sz)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      :param `sz`: 
      :type `sz`: wx.Size
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawRectangle** `(self, rect)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `rect`: 
      :type `rect`: wx.Rect
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawRectangleList(self, rectangles, pens=None, brushes=None)

      Draw a list of rectangles as quickly as possible.
      
      :param rectangles: A sequence of 4-element sequences representing
                                      each rectangle to draw, (x,y, w,h).
      :param pens:       If None, then the current pen is used.  If a
                                      single pen then it will be used for all rectangles.
                                      If a list of pens then there should be one for each
                                      rectangle in rectangles.
      :param brushes:    A brush or brushes to be used to fill the rectagles,
                                      with similar semantics as the pens parameter.



   .. method:: DrawRotatedText(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawRotatedText** `(self, text, x, y, angle)`
      
      Draws the text rotated by `angle`  degrees (positive angles are counterclockwise; the full angle is 360 degrees).                  
      
      Notice that, as with :meth:`DrawText` , the `text`  can contain multiple lines separated by the new line ( ``'\n'`` ) characters. 
      
                      
      
      
      :param `text`: 
      :type `text`: string
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `angle`: 
      :type `angle`: float
      
      
      
      
      
      
      .. note:: 
      
         Under MSW only TrueType fonts can be drawn by this function. In particular, a font different from  ``NORMAL_FONT``   should be used as the latter is not a TrueType font.   ``SWISS_FONT``   is an example of a font which is.  
      
      
      
      
      
      
      
      .. seealso:: :meth:`DrawText`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawRotatedText** `(self, text, point, angle)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `text`: 
      :type `text`: string
      :param `point`: 
      :type `point`: wx.Point
      :param `angle`: 
      :type `angle`: float
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawRoundedRectangle(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawRoundedRectangle** `(self, x, y, width, height, radius)`
      
      Draws a rectangle with the given top left corner, and with the given size.                  
      
      The corners are quarter-circles using the given radius. The current pen is used for the outline and the current brush for filling the shape. 
      
      If `radius`  is positive, the value is assumed to be the radius of the rounded corner. If `radius`  is negative, the absolute value is assumed to be the `proportion`  of the smallest dimension of the rectangle. This means that the corner can be a sensible size relative to the size of the rectangle, and also avoids the strange effects X produces when the corners are too big for the rectangle.                  
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `width`: 
      :type `width`: int
      :param `height`: 
      :type `height`: int
      :param `radius`: 
      :type `radius`: float
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawRoundedRectangle** `(self, pt, sz, radius)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      :param `sz`: 
      :type `sz`: wx.Size
      :param `radius`: 
      :type `radius`: float
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawRoundedRectangle** `(self, rect, radius)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `radius`: 
      :type `radius`: float
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawSpline(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawSpline** `(self, points)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawSpline** `(self, x1, y1, x2, y2, x3, y3)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawText(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **DrawText** `(self, text, x, y)`
      
      Draws a text string at the specified point, using the current text font, and the current text foreground and background colours.                  
      
      The coordinates refer to the top-left corner of the rectangle bounding the string. See :meth:`GetTextExtent`   for how to get the dimensions of a text string, which can be used to position the text more precisely and :meth:`DrawLabel`   if you need to align the string differently. 
      
      Starting from wxWidgets 2.9.2 `text`  parameter can be a multi-line string, i.e. contain new line characters, and will be rendered correctly. 
      
                      
      
      
      :param `text`: 
      :type `text`: string
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      
      
      .. note:: 
      
         The current :ref:`logical function <wx.DC>`  is ignored by this function.   
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **DrawText** `(self, text, pt)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `text`: 
      :type `text`: string
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DrawTextList(self, textList, coords, foregrounds=None, backgrounds=None)

      Draw a list of strings using a list of coordinants for positioning each string.
      
      :param textList:    A list of strings
      :param coords:      A list of (x,y) positions
      :param foregrounds: A list of `wx.Colour` objects to use for the
                                        foregrounds of the strings.
      :param backgrounds: A list of `wx.Colour` objects to use for the
                                        backgrounds of the strings.
      
      ``NOTE``: Make sure you set background mode to wx.Solid (DC.SetBackgroundMode)
            If you want backgrounds to do anything.



   .. method:: EndDoc(self)

      Ends a document (only relevant when outputting to a printer).                   





   .. method:: EndPage(self)

      Ends a document page (only relevant when outputting to a printer).                   





   .. method:: FloodFill(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **FloodFill** `(self, x, y, colour, style=FLOOD_SURFACE)`
      
      Flood fills the device context starting from the given point, using the current brush colour, and using a style:                  
      
      
      
      - ``wx.FLOOD_SURFACE``: The flooding occurs until a colour other than the given colour is encountered. 
      - ``wx.FLOOD_BORDER``: The area to be flooded is bounded by the given colour. 
      
      
      
      
      Currently this method is not implemented in wxOSX and does nothing there. 
      
                      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `colour`: 
      :type `colour`: wx.Colour
      :param `style`: 
      :type `style`: wx.FloodFillStyle
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :returns: 
      
         ``False`` if the operation failed.  
      
      
      
      
      
      
      
      .. note:: 
      
         The present implementation for non-Windows platforms may fail to find colour borders if the pixels do not match the colour exactly. However the function will still return ``True``.  
      
      
      
      
      
      
      
      .. note:: 
      
         This method shouldn't be used with :ref:`wx.PaintDC`  under non-Windows platforms as it uses :meth:`GetPixel`   internally and this may give wrong results, notably in wxGTK. If you need to flood fill :ref:`wx.PaintDC`, create a temporary :ref:`wx.MemoryDC`, flood fill it and then blit it to, or draw as a bitmap on, :ref:`wx.PaintDC`. See the example of doing this in the drawing sample and :ref:`wx.BufferedPaintDC`  class.   
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **FloodFill** `(self, pt, col, style=FLOOD_SURFACE)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      :param `col`: 
      :type `col`: wx.Colour
      :param `style`: 
      :type `style`: wx.FloodFillStyle
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: GetAsBitmap(self, subrect=None)

      If supported by the platform and the type of DC, fetch the contents of the DC, or a subset of it, as a bitmap.                  


      :param `subrect`: 
      :type `subrect`: wx.Rect




      :rtype: :ref:`wx.Bitmap`








   .. method:: GetBackground(self)

      Gets the brush used for painting the background.                  

                

      :rtype: :ref:`wx.Brush`







      .. seealso:: :meth:`wx.DC.SetBackground`     








   .. method:: GetBackgroundMode(self)

      Returns the current background mode:  ``BRUSHSTYLE_SOLID``   or   ``BRUSHSTYLE_TRANSPARENT`` .                   

                

      :rtype: `int`







      .. seealso:: :meth:`SetBackgroundMode`     








   .. method:: GetBoundingBox(self)

      
      Returns the min and max points used in drawing commands so far.



   .. method:: GetBrush(self)

      Gets the current brush.                  

                

      :rtype: :ref:`wx.Brush`







      .. seealso:: :meth:`wx.DC.SetBrush`     








   .. method:: GetCGContext(self)



      :rtype: :ref:`wx.UIntPtr`








   .. method:: GetCharHeight(self)

      Gets the character height of the currently set font.                  

      :rtype: :ref:`wx.Coord`








   .. method:: GetCharWidth(self)

      Gets the average character width of the currently set font.                  

      :rtype: :ref:`wx.Coord`








   .. method:: GetClippingBox(self)

      Gets the rectangle surrounding the current clipping region.                  

      If no clipping region is set this function returns the extent of the device context. 











      :rtype: `tuple`



                  



      :returns: 

         ( `bool`, `x`, `y`, `width`, `height` ) 







      .. note:: 

         Clipping region is given in logical coordinates.  








   .. method:: GetClippingRect(self)

      Returns the rectangle surrounding the current clipping region as a wx.Rect.



   .. method:: GetDepth(self)

      Returns the depth (number of bits/pixel) of this DC.                  

                

      :rtype: `int`







      .. seealso:: :ref:`wx.DisplayDepth`    








   .. method:: GetDeviceOrigin(self)

      Returns the current device origin.                  

                

      :rtype: :ref:`wx.Point`







      .. seealso:: :meth:`SetDeviceOrigin`     








   .. method:: GetFont(self)

      Gets the current font.                  

      Notice that even although each device context object has some default font after creation, this method would return a :ref:`wx.NullFont`  initially and only after calling :meth:`SetFont`   a valid font is returned.                  

      :rtype: :ref:`wx.Font`








   .. method:: GetFontMetrics(self)

      Returns the various font characteristics.                  

      This method allows retrieving some of the font characteristics not returned by :meth:`GetTextExtent` , notably internal leading and average character width. 

      Currently this method returns correct results only under wxMSW, in the other ports the internal leading will always be 0 and the average character width will be computed as the width of the character 'x'. 

                

      :rtype: :ref:`wx.FontMetrics`







      .. versionadded:: 2.9.2 
     








   .. method:: GetGdkDrawable(self)



      :rtype: :ref:`wx.UIntPtr`








   .. method:: GetGraphicsContext(self)

      If supported by the platform and the  ` :ref:`wx.DC` `   implementation, this method will return the  ` :ref:`wx.GraphicsContext` `   associated with the DC.                  

      Otherwise ``None`` is returned.                  

      :rtype: :ref:`wx.GraphicsContext`








   .. method:: GetHDC(self)



      :rtype: `long`








   .. method:: GetHandle(self)

      Returns a value that can be used as a handle to the native drawing context, if this :ref:`wx.DC`  has something that could be thought of in that way.                  

      (Not all of them do.) 

      For example, on Windows the return value is an ``HDC``, on macOS it is a CGContextRef and on wxGTK it will be a GdkDrawable. If the DC is a :ref:`wx.GCDC`  then the return value will be the value returned from :meth:`wx.GraphicsContext.GetNativeContext` . A value of ``None`` is returned if the DC does not have anything that fits the handle concept. 

                

      :rtype: :ref:`wx.UIntPtr`







      .. versionadded:: 2.9.5 
     








   .. method:: GetLayoutDirection(self)

      Gets the current layout direction of the device context.                  

      On platforms where RTL layout is supported, the return value will either be  ``Layout_LeftToRight``   or   ``Layout_RightToLeft`` . If RTL layout is not supported, the return value will be   ``Layout_Default`` . 

                

      :rtype: :ref:`wx.LayoutDirection`







      .. seealso:: :meth:`SetLayoutDirection`     








   .. method:: GetLogicalFunction(self)

      Gets the current logical function.                  

                

      :rtype: :ref:`wx.RasterOperationMode`







      .. seealso:: :meth:`SetLogicalFunction`     








   .. method:: GetLogicalOrigin(self)

      Return the coordinates of the logical point (0, 0).                  

                

      :rtype: `tuple`







      :returns: 

         ( `x`, `y` ) 







      .. seealso:: :meth:`SetLogicalOrigin`     








   .. method:: GetLogicalScale(self)

      Return the scale set by the last call to :meth:`SetLogicalScale` .                  

      :rtype: `tuple`







      :returns: 

         ( `x`, `y` ) 








   .. method:: GetMapMode(self)

      Gets the current mapping mode for the device context.                  

                

      :rtype: :ref:`wx.MappingMode`







      .. seealso:: :meth:`SetMapMode`     








   .. method:: GetFullMultiLineTextExtent(self, string, font=None)

      Gets the dimensions of the string as it would be drawn. 

      The ``string`` parameter is the string to measure.  The return value
      is a tuple of integer values consisting of ``widget``, ``height`` and
      ``heightLine``.  The ``heightLine`` is the the height of a single line.

      If the optional parameter ``font`` is specified and valid, then it is
      used for the text extent calculation. Otherwise the currently selected
      font is.

      .. note:: This function works with both single-line and multi-line strings.

      .. seealso:: :class:`wx.Font`, :meth:`~wx.DC.SetFont`,
            :meth:`~wx.DC.GetPartialTextExtents, :meth:`~wx.DC.GetTextExtent` 


      :param `string`: 
      :type `string`: string
      :param `font`: 
      :type `font`: wx.Font




      :rtype: `tuple`







      :returns: 

         ( `w`, `h`, `heightLine` ) 








   .. method:: GetMultiLineTextExtent(self, st)

      Return the dimensions of the given string's text extent using the
      currently selected font, taking into account multiple lines if
      present in the string.

      :param st: The string to be measured

      .. seealso:: :meth:`~wx.DC.GetFullMultiLineTextExtent` 

      :rtype: :ref:`wx.Size`








   .. method:: GetPPI(self)

      Returns the resolution of the device in pixels per inch.                  

      :rtype: :ref:`wx.Size`








   .. method:: GetPartialTextExtents(self, text)

      Fills the `widths`  array with the widths from the beginning of `text`  to the corresponding character of `text`.                  

      The generic version simply builds a running total of the widths of each character using :meth:`GetTextExtent` , however if the various platforms have a native API function that is faster or more accurate than the generic implementation then it should be used instead. 

      




   .. method:: GetPen(self)

      Gets the current pen.                  

                

      :rtype: :ref:`wx.Pen`







      .. seealso:: :meth:`SetPen`     








   .. method:: GetPixel(self, x, y)

                              Gets the colour at the specified location on the DC.

                              This method isn't available for ``wx.PostScriptDC`` or ``wx.MetafileDC`` nor
                              for any DC in wxOSX port, and simply returns ``wx.NullColour`` there.

                              .. note:: Setting a pixel can be done using DrawPoint().

                              .. note:: This method shouldn't be used with ``wx.PaintDC`` as accessing the
                                                  DC while drawing can result in unexpected results, notably in wxGTK.
                         

      :rtype: :ref:`wx.Colour`








   .. method:: GetSize(self)

      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  

      :rtype: :ref:`wx.Size`








   .. method:: GetSizeMM(self)

      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  

      :rtype: :ref:`wx.Size`








   .. method:: GetTextBackground(self)

      Gets the current text background colour.                  

                

      :rtype: :ref:`wx.Colour`







      .. seealso:: :meth:`SetTextBackground`     








   .. method:: GetFullTextExtent(self, string, font=None)

      Gets the dimensions of the string as it would be drawn. 

      The ``string`` parameter is the string to measure.  The return value
      is a tuple of integer values consisting of ``widget``, ``height``,
      ``decent`` and ``externalLeading``. The ``descent`` is the dimension
      from the baseline of the font to the bottom of the descender, and
      ``externalLeading`` is any extra vertical space added to the font by the
      font designer (usually is zero).

      If the optional parameter ``font`` is specified and valid, then it is
      used for the text extent calculation. Otherwise the currently selected
      font is.

      .. seealso:: :class:`wx.Font`, :meth:`~wx.DC.SetFont`,
            :meth:`~wx.DC.GetPartialTextExtents, :meth:`~wx.DC.GetMultiLineTextExtent` 


      :param `string`: 
      :type `string`: string
      :param `font`: 
      :type `font`: wx.Font




      :rtype: `tuple`







      :returns: 

         ( `w`, `h`, `descent`, `externalLeading` ) 








   .. method:: GetTextExtent(self, st)

      Return the dimensions of the given string's text extent using the
      currently selected font.

      :param st: The string to be measured

      .. seealso:: :meth:`~wx.DC.GetFullTextExtent` 

      :rtype: :ref:`wx.Size`








   .. method:: GetTextForeground(self)

      Gets the current text foreground colour.                  

                

      :rtype: :ref:`wx.Colour`







      .. seealso:: :meth:`SetTextForeground`     








   .. method:: GetTransformMatrix(self)

      Return the transformation matrix used by this device context.                  

      By default the transformation matrix is the identity matrix. 

                

      :rtype: :ref:`wx.AffineMatrix2D`







      .. versionadded:: 2.9.2 
     








   .. method:: GetUserScale(self)

      Gets the current user scale factor.                  

      




   .. method:: GradientFillConcentric(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **GradientFillConcentric** `(self, rect, initialColour, destColour)`
      
      Fill the area specified by rect with a radial gradient, starting from `initialColour`  at the centre of the circle and fading to `destColour`  on the circle outside.                  
      
      The circle is placed at the centre of `rect`. 
      
                      
      
      
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `initialColour`: 
      :type `initialColour`: wx.Colour
      :param `destColour`: 
      :type `destColour`: wx.Colour
      
      
      
      
      
      
      .. note:: 
      
         Currently this function is very slow, don't use it for real-time drawing.   
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **GradientFillConcentric** `(self, rect, initialColour, destColour, circleCenter)`
      
      Fill the area specified by rect with a radial gradient, starting from `initialColour`  at the centre of the circle and fading to `destColour`  on the circle outside.                  
      
      `circleCenter`  are the relative coordinates of centre of the circle in the specified `rect`. 
      
                      
      
      
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `initialColour`: 
      :type `initialColour`: wx.Colour
      :param `destColour`: 
      :type `destColour`: wx.Colour
      :param `circleCenter`: 
      :type `circleCenter`: wx.Point
      
      
      
      
      
      
      .. note:: 
      
         Currently this function is very slow, don't use it for real-time drawing.   
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: GradientFillLinear(self, rect, initialColour, destColour, nDirection=RIGHT)

      Fill the area specified by `rect`  with a linear gradient, starting from `initialColour`  and eventually fading to `destColour`.                  

      The `nDirection`  specifies the direction of the colour change, default is to use `initialColour`  on the left part of the rectangle and `destColour`  on the right one.                  


      :param `rect`: 
      :type `rect`: wx.Rect
      :param `initialColour`: 
      :type `initialColour`: wx.Colour
      :param `destColour`: 
      :type `destColour`: wx.Colour
      :param `nDirection`: 
      :type `nDirection`: wx.Direction







   .. method:: IsOk(self)

      Returns ``True`` if the DC is ok to use.                  

      :rtype: `bool`








   .. method:: LogicalToDevice(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **LogicalToDevice** `(self, x, y)`
      
      Converts logical (`x`, `y`) coordinates to device coordinates taking into account all applied transformations like the current mapping mode, scale factors, device origin, axes orientation, affine transformation.                  
      
                      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      :rtype: :ref:`wx.Point`
      
      
      
      
      
      
      
      .. versionadded:: 4.1/wxWidgets-3.1.5  
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **LogicalToDevice** `(self, pt)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
                      
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      :rtype: :ref:`wx.Point`
      
      
      
      
      
      
      
      .. versionadded:: 4.1/wxWidgets-3.1.5  
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: LogicalToDeviceRel(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **LogicalToDeviceRel** `(self, x, y)`
      
      Converts logical `x`, `y`  coordinates to relative device coordinates taking into account all applied transformations like the current mapping mode, scale factors, affine transformation.                  
      
      Use this for converting distances like e.g. width and height. 
      
                      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      :rtype: :ref:`wx.Size`
      
      
      
      
      
      
      
      .. versionadded:: 4.1/wxWidgets-3.1.5  
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **LogicalToDeviceRel** `(self, dim)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
                      
      
      
      :param `dim`: 
      :type `dim`: wx.Size
      
      
      
      
      :rtype: :ref:`wx.Size`
      
      
      
      
      
      
      
      .. versionadded:: 4.1/wxWidgets-3.1.5  
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: LogicalToDeviceX(self, x)

      Converts logical X coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.                  

                


      :param `x`: 
      :type `x`: int




      :rtype: :ref:`wx.Coord`







      .. note:: 

         Affine transformation applied to the coordinate system with :meth:`SetTransformMatrix`   is not taken into account.   








   .. method:: LogicalToDeviceXRel(self, x)

      Converts logical X coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.                  

      Use this for converting a horizontal distance like for example a width. 

                


      :param `x`: 
      :type `x`: int




      :rtype: :ref:`wx.Coord`







      .. note:: 

         Affine transformation applied to the coordinate system with :meth:`SetTransformMatrix`   is not taken into account.   








   .. method:: LogicalToDeviceY(self, y)

      Converts logical Y coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation.                  

                


      :param `y`: 
      :type `y`: int




      :rtype: :ref:`wx.Coord`







      .. note:: 

         Affine transformation applied to the coordinate system with :meth:`SetTransformMatrix`   is not taken into account.   








   .. method:: LogicalToDeviceYRel(self, y)

      Converts logical Y coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation.                  

      Use this for converting a vertical distance like for example a height. 

                


      :param `y`: 
      :type `y`: int




      :rtype: :ref:`wx.Coord`







      .. note:: 

         Affine transformation applied to the coordinate system with :meth:`SetTransformMatrix`   is not taken into account.   








   .. method:: MaxX(self)

      Gets the maximum horizontal extent used in drawing commands so far.                  

      :rtype: :ref:`wx.Coord`








   .. method:: MaxY(self)

      Gets the maximum vertical extent used in drawing commands so far.                  

      :rtype: :ref:`wx.Coord`








   .. method:: MinX(self)

      Gets the minimum horizontal extent used in drawing commands so far.                  

      :rtype: :ref:`wx.Coord`








   .. method:: MinY(self)

      Gets the minimum vertical extent used in drawing commands so far.                  

      :rtype: :ref:`wx.Coord`








   .. method:: ResetBoundingBox(self)

      Resets the bounding box: after a call to this function, the bounding box doesn't contain anything.                  

                 



      .. seealso:: :meth:`CalcBoundingBox`     








   .. method:: ResetTransformMatrix(self)

      Revert the transformation matrix to identity matrix.                  

                 



      .. versionadded:: 2.9.2 
     








   .. method:: SetAxisOrientation(self, xLeftRight, yBottomUp)

      Sets the x and y axis orientation (i.e. the direction from lowest to highest values on the axis).                  

      The default orientation is x axis from left to right and y axis from top down. 




      :param `xLeftRight`: True to set the x axis orientation to the natural left to right orientation, ``False`` to invert it.   
      :type `xLeftRight`: bool
      :param `yBottomUp`: True to set the y axis orientation to the natural bottom up orientation, ``False`` to invert it.   
      :type `yBottomUp`: bool






                  





   .. method:: SetBackground(self, brush)

      Sets the current background brush for the DC.                  


      :param `brush`: 
      :type `brush`: wx.Brush







   .. method:: SetBackgroundMode(self, mode)

      Change the current background mode.                  

      This setting determines whether text will be drawn with a background colour or not. 

      Default is  ``BRUSHSTYLE_TRANSPARENT`` , i.e. text background is not drawn. 




      :param `mode`: one of  ``BRUSHSTYLE_SOLID``   and   ``BRUSHSTYLE_TRANSPARENT`` .    
      :type `mode`: int




                  





   .. method:: SetBrush(self, brush)

      Sets the current brush for the DC.                  

      If the argument is :ref:`wx.NullBrush`  (or another invalid brush; see :meth:`wx.Brush.IsOk` ), the current brush is selected out of the device context (leaving :ref:`wx.DC`  without any valid brush), allowing the current brush to be destroyed safely. 

                


      :param `brush`: 
      :type `brush`: wx.Brush






      .. seealso:: :ref:`wx.Brush`, :ref:`wx.MemoryDC`  (for the interpretation of colours when drawing into a monochrome bitmap)   








   .. method:: SetClippingRegion(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetClippingRegion** `(self, x, y, width, height)`
      
      Sets the clipping region for this device context to the intersection of the given region described by the parameters of this method and the previously set clipping region.                  
      
      The clipping region is an area to which drawing is restricted. Possible uses for the clipping region are for clipping text or for speeding up window redraws when only a known area of the screen is damaged. 
      
                      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `width`: 
      :type `width`: int
      :param `height`: 
      :type `height`: int
      
      
      
      
      
      
      .. note:: 
      
         
      
         - Clipping region should be given in logical coordinates. 
         - Calling this function can only make the clipping region smaller, never larger. 
         - You need to call :meth:`DestroyClippingRegion`   first if you want to set the clipping region exactly to the region specified. 
         - If resulting clipping region is empty, then all drawing on the DC is clipped out (all changes made by drawing operations are masked out). 
      
      
      
      
      
      
      
      
      
      
      .. seealso:: :meth:`DestroyClippingRegion` , :ref:`wx.Region`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetClippingRegion** `(self, pt, sz)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      :param `sz`: 
      :type `sz`: wx.Size
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetClippingRegion** `(self, rect)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `rect`: 
      :type `rect`: wx.Rect
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetDeviceClippingRegion(self, region)

      Sets the clipping region for this device context.                  

      Unlike :meth:`SetClippingRegion` , this function works with physical coordinates and not with the logical ones.                  


      :param `region`: 
      :type `region`: wx.Region







   .. method:: SetDeviceOrigin(self, x, y)

      Sets the device origin (i.e. the origin in pixels after scaling has been applied).                  

      This function may be useful in Windows printing operations for placing a graphic on a page.                  


      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int







   .. method:: SetFont(self, font)

      Sets the current font for the DC.                  

      If the argument is :ref:`wx.NullFont`  (or another invalid font; see :meth:`wx.Font.IsOk` ), the current font is selected out of the device context (leaving :ref:`wx.DC`  without any valid font), allowing the current font to be destroyed safely. 

                


      :param `font`: 
      :type `font`: wx.Font






      .. seealso:: :ref:`wx.Font`    








   .. method:: SetGraphicsContext(self, ctx)

      Associate a :ref:`wx.GraphicsContext`  with the DC.                  

      Ignored if not supported by the specific  ` :ref:`wx.DC` `   implementation. It is unlikely that this will need to be used in application code.                  


      :param `ctx`: 
      :type `ctx`: wx.GraphicsContext







   .. method:: SetLayoutDirection(self, dir)

      Sets the current layout direction for the device context.                  




      :param `dir`: May be either  ``Layout_Default`` ,   ``Layout_LeftToRight``   or   ``Layout_RightToLeft`` .  
      :type `dir`: wx.LayoutDirection




                  



      .. seealso:: :meth:`GetLayoutDirection`     








   .. method:: SetLogicalFunction(self, function)

      Sets the current logical function for the device context.                  


      It determines how a  `source`  pixel (from a pen or brush colour, or source device context if using :meth:`Blit` ) combines with a `destination`  pixel in the current device context. Text drawing is not affected by this function. 

      See :ref:`wx.RasterOperationMode`  enumeration values for more info. 

      The default is  ``COPY`` , which simply draws with the current colour. The others combine the current colour and the background using a logical operation.                   


      :param `function`: 
      :type `function`: wx.RasterOperationMode






      .. note:: 

         This function is not fully supported in all ports, due to the limitations of the underlying drawing model. Notably,  ``INVERT``   which was commonly used for drawing rubber bands or other moving outlines in the past, is not, and will not, be supported by ``GTK3`` and Mac. The suggested alternative is to draw temporarily objects normally and refresh the (affected part of the) window to remove them later.  








   .. method:: SetLogicalOrigin(self, x, y)

      Change the offset used for translating :ref:`wx.DC`  coordinates.                  

                


      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int






      .. seealso:: :meth:`SetLogicalOrigin` , :meth:`SetDeviceOrigin`     








   .. method:: SetLogicalScale(self, x, y)

      Set the scale to use for translating :ref:`wx.DC`  coordinates to the physical pixels.                  

      The effect of calling this function is similar to that of calling :meth:`SetUserScale` .                  


      :param `x`: 
      :type `x`: float
      :param `y`: 
      :type `y`: float







   .. method:: SetMapMode(self, mode)

      The mapping mode of the device context defines the unit of measurement used to convert `logical`  units to `device`  units.                  

      Note that in X, text drawing isn't handled consistently with the mapping mode; a font is always specified in point size. However, setting the user scale (see :meth:`SetUserScale` ) scales the text appropriately. In Windows, scalable TrueType fonts are always used; in X, results depend on availability of fonts, but usually a reasonable match is found. 

      The coordinate origin is always at the top left of the screen/printer. 

      Drawing to a Windows printer device context uses the current mapping mode, but mapping mode is currently ignored for PostScript output.                  


      :param `mode`: 
      :type `mode`: wx.MappingMode







   .. method:: SetPalette(self, palette)

      If this is a window DC or memory DC, assigns the given palette to the window or bitmap associated with the DC.                  

      If the argument is :ref:`wx.NullPalette`, the current palette is selected out of the device context, and the original palette restored. 

                


      :param `palette`: 
      :type `palette`: wx.Palette






      .. seealso:: :ref:`wx.Palette`    








   .. method:: SetPen(self, pen)

      Sets the current pen for the DC.                  

      If the argument is :ref:`wx.NullPen`  (or another invalid pen; see :meth:`wx.Pen.IsOk` ), the current pen is selected out of the device context (leaving :ref:`wx.DC`  without any valid pen), allowing the current pen to be destroyed safely. 

                


      :param `pen`: 
      :type `pen`: wx.Pen






      .. seealso:: :ref:`wx.MemoryDC`  for the interpretation of colours when drawing into a monochrome bitmap.   








   .. method:: SetTextBackground(self, colour)

      Sets the current text background colour for the DC.                  


      :param `colour`: 
      :type `colour`: wx.Colour







   .. method:: SetTextForeground(self, colour)

      Sets the current text foreground colour for the DC.                  

                


      :param `colour`: 
      :type `colour`: wx.Colour






      .. seealso:: :ref:`wx.MemoryDC`  for the interpretation of colours when drawing into a monochrome bitmap.   








   .. method:: SetTransformMatrix(self, matrix)

      Set the transformation matrix.                  

      If transformation matrix is supported on the current system, the specified `matrix`  will be used to transform between :ref:`wx.DC`  and physical coordinates. Otherwise the function returns ``False`` and doesn't change the coordinate mapping. 

                


      :param `matrix`: 
      :type `matrix`: wx.AffineMatrix2D




      :rtype: `bool`







      .. versionadded:: 2.9.2 
     








   .. method:: SetUserScale(self, xScale, yScale)

      Sets the user scaling factor, useful for applications which require 'zooming'.                  


      :param `xScale`: 
      :type `xScale`: float
      :param `yScale`: 
      :type `yScale`: float







   .. method:: StartDoc(self, message)

      Starts a document (only relevant when outputting to a printer).                  

      `message`  is a message to show while printing.                  


      :param `message`: 
      :type `message`: string




      :rtype: `bool`








   .. method:: StartPage(self)

      Starts a document page (only relevant when outputting to a printer).                   





   .. method:: StretchBlit(self, xdest, ydest, dstWidth, dstHeight, source, xsrc, ysrc, srcWidth, srcHeight, logicalFunc=COPY, useMask=False, xsrcMask=DefaultCoord, ysrcMask=DefaultCoord)

      Copy from a source DC to this DC possibly changing the scale.                  

      Unlike :meth:`Blit` , this method allows specifying different source and destination region sizes, meaning that it can stretch or shrink it while copying. The same can be achieved by changing the scale of the source or target DC but calling this method is simpler and can also be more efficient if the platform provides a native implementation of it. 

      The meaning of its other parameters is the same as with :meth:`Blit` , in particular all source coordinates are interpreted using the source DC coordinate system, i.e. are affected by its scale, origin translation and axis direction. 




      :param `xdest`: Destination device context x position.   
      :type `xdest`: int
      :param `ydest`: Destination device context y position.   
      :type `ydest`: int
      :param `dstWidth`: Width of destination area.   
      :type `dstWidth`: int
      :param `dstHeight`: Height of destination area.   
      :type `dstHeight`: int
      :param `source`: Source device context.   
      :type `source`: wx.DC
      :param `xsrc`: Source device context x position.   
      :type `xsrc`: int
      :param `ysrc`: Source device context y position.   
      :type `ysrc`: int
      :param `srcWidth`: Width of source area to be copied.   
      :type `srcWidth`: int
      :param `srcHeight`: Height of source area to be copied.   
      :type `srcHeight`: int
      :param `logicalFunc`: Logical function to use, see :meth:`SetLogicalFunction` .   
      :type `logicalFunc`: wx.RasterOperationMode
      :param `useMask`: If ``True``, Blit does a transparent blit using the mask that is associated with the bitmap selected into the source device context. The Windows implementation does the following if MaskBlt cannot be used: 

       - Creates a temporary bitmap and copies the destination area into it.  
       - Copies the source area into the temporary bitmap using the specified logical function.  
       - Sets the masked area in the temporary bitmap to ``wx.BLACK`` by ANDing the mask bitmap with the temp bitmap with the foreground colour set to ``wx.WHITE`` and the bg colour set to ``wx.BLACK``.  
       - Sets the unmasked area in the destination area to ``wx.BLACK`` by ANDing the mask bitmap with the destination area with the foreground colour set to ``wx.BLACK`` and the background colour set to ``wx.WHITE``.  
       - ORs the temporary bitmap with the destination area.  
       - Deletes the temporary bitmap.  

       This sequence of operations ensures that the source's transparent area need not be black, and logical functions are supported.


         **Note:**  on Windows, blitting with masks can be speeded up considerably by compiling wxWidgets with the ``USE_DC_CACHEING`` option enabled. You can also influence whether MaskBlt or the explicit mask blitting code above is used, by using :ref:`wx.SystemOptions`  and setting the  ``no-maskblt``   option to 1.    
      :type `useMask`: bool
      :param `xsrcMask`: Source x position on the mask. If both xsrcMask and ysrcMask are DefaultCoord,  `xsrc`  and  `ysrc`  will be assumed for the mask source position. Currently only implemented on Windows.   
      :type `xsrcMask`: int
      :param `ysrcMask`: Source y position on the mask. If both xsrcMask and ysrcMask are DefaultCoord,  `xsrc`  and  `ysrc`  will be assumed for the mask source position. Currently only implemented on Windows.  
      :type `ysrcMask`: int






























      :rtype: `bool`



      :meth:`Blit`   in :ref:`wx.PostScriptDC`, under X. 

      See :ref:`wx.MemoryDC`  for typical usage. 

                 



      .. versionadded:: 2.9.0 
    







      .. seealso:: :meth:`Blit` , :ref:`wx.MemoryDC`, :ref:`wx.Bitmap`, :ref:`wx.Mask`    








   .. method:: _DrawEllipseList(self, pyCoords, pyPens, pyBrushes)



      :rtype: :ref:`PyObject`








   .. method:: _DrawLineList(self, pyCoords, pyPens, pyBrushes)



      :rtype: :ref:`PyObject`








   .. method:: _DrawPointList(self, pyCoords, pyPens, pyBrushes)



      :rtype: :ref:`PyObject`








   .. method:: _DrawPolygonList(self, pyCoords, pyPens, pyBrushes)



      :rtype: :ref:`PyObject`








   .. method:: _DrawRectangleList(self, pyCoords, pyPens, pyBrushes)



      :rtype: :ref:`PyObject`








   .. method:: _DrawTextList(self, textList, pyPoints, foregroundList, backgroundList)



      :rtype: :ref:`PyObject`








   .. method:: __bool__(self)



      :rtype: `int`








   .. method:: __enter__(self)




   .. method:: __exit__(self, exc_type, exc_val, exc_tb)




   .. method:: __nonzero__(self)



      :rtype: `int`








   .. attribute:: AsBitmap

      See :meth:`~wx.DC.GetAsBitmap`


   .. attribute:: Background

      See :meth:`~wx.DC.GetBackground` and :meth:`~wx.DC.SetBackground`


   .. attribute:: BackgroundMode

      See :meth:`~wx.DC.GetBackgroundMode` and :meth:`~wx.DC.SetBackgroundMode`


   .. attribute:: BoundingBox

      See :meth:`~wx.DC.GetBoundingBox`


   .. attribute:: Brush

      See :meth:`~wx.DC.GetBrush` and :meth:`~wx.DC.SetBrush`


   .. attribute:: CGContext

      See :meth:`~wx.DC.GetCGContext`


   .. attribute:: CharHeight

      See :meth:`~wx.DC.GetCharHeight`


   .. attribute:: CharWidth

      See :meth:`~wx.DC.GetCharWidth`


   .. attribute:: ClippingRect

      See :meth:`~wx.DC.GetClippingRect`


   .. attribute:: Depth

      See :meth:`~wx.DC.GetDepth`


   .. attribute:: DeviceOrigin

      See :meth:`~wx.DC.GetDeviceOrigin` and :meth:`~wx.DC.SetDeviceOrigin`


   .. attribute:: Font

      See :meth:`~wx.DC.GetFont` and :meth:`~wx.DC.SetFont`


   .. attribute:: FontMetrics

      See :meth:`~wx.DC.GetFontMetrics`


   .. attribute:: GdkDrawable

      See :meth:`~wx.DC.GetGdkDrawable`


   .. attribute:: GraphicsContext

      See :meth:`~wx.DC.GetGraphicsContext` and :meth:`~wx.DC.SetGraphicsContext`


   .. attribute:: HDC

      See :meth:`~wx.DC.GetHDC`


   .. attribute:: Handle

      See :meth:`~wx.DC.GetHandle`


   .. attribute:: LayoutDirection

      See :meth:`~wx.DC.GetLayoutDirection` and :meth:`~wx.DC.SetLayoutDirection`


   .. attribute:: LogicalFunction

      See :meth:`~wx.DC.GetLogicalFunction` and :meth:`~wx.DC.SetLogicalFunction`


   .. attribute:: MapMode

      See :meth:`~wx.DC.GetMapMode` and :meth:`~wx.DC.SetMapMode`


   .. attribute:: MultiLineTextExtent

      See :meth:`~wx.DC.GetMultiLineTextExtent`


   .. attribute:: PPI

      See :meth:`~wx.DC.GetPPI`


   .. attribute:: Pen

      See :meth:`~wx.DC.GetPen` and :meth:`~wx.DC.SetPen`


   .. attribute:: Pixel

      See :meth:`~wx.DC.GetPixel`


   .. attribute:: Size

      See :meth:`~wx.DC.GetSize`


   .. attribute:: SizeMM

      See :meth:`~wx.DC.GetSizeMM`


   .. attribute:: TextBackground

      See :meth:`~wx.DC.GetTextBackground` and :meth:`~wx.DC.SetTextBackground`


   .. attribute:: TextExtent

      See :meth:`~wx.DC.GetTextExtent`


   .. attribute:: TextForeground

      See :meth:`~wx.DC.GetTextForeground` and :meth:`~wx.DC.SetTextForeground`


   .. attribute:: TransformMatrix

      See :meth:`~wx.DC.GetTransformMatrix` and :meth:`~wx.DC.SetTransformMatrix`

