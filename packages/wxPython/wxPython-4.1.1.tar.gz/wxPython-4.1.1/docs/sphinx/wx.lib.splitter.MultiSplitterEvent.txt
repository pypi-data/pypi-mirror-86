.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.splitter

.. highlight:: python



.. _wx.lib.splitter.MultiSplitterEvent:

==========================================================================================================================================
|phoenix_title|  **wx.lib.splitter.MultiSplitterEvent**
==========================================================================================================================================

This event class is almost the same as `wx.SplitterEvent` except
it adds an accessor for the sash index that is being changed.  The
same event type IDs and event binders are used as with
`wx.SplitterEvent`.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>MultiSplitterEvent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.splitter.MultiSplitterEvent_inheritance.png" alt="Inheritance diagram of MultiSplitterEvent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.splitter.MultiSplitterEvent.html" title="wx.lib.splitter.MultiSplitterEvent" alt="" coords="5,315,236,344"/> <area shape="rect" id="node2" href="wx.PyCommandEvent.html" title="wx.PyCommandEvent" alt="" coords="38,237,203,267"/> <area shape="rect" id="node3" href="wx.CommandEvent.html" title="wx.CommandEvent" alt="" coords="46,160,195,189"/> <area shape="rect" id="node4" href="wx.Event.html" title="wx.Event" alt="" coords="79,83,162,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="77,5,164,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.PyCommandEvent`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.splitter.MultiSplitterEvent.__init__`                             Constructor.
:meth:`~wx.lib.splitter.MultiSplitterEvent.Allow`                                This is the opposite of :meth:`~wx.lib.splitter.MultiSplitterEvent.Veto` : it explicitly allows the
:meth:`~wx.lib.splitter.MultiSplitterEvent.GetSashIdx`                           Returns the new sash index.
:meth:`~wx.lib.splitter.MultiSplitterEvent.GetSashPosition`                      Returns the new sash position.
:meth:`~wx.lib.splitter.MultiSplitterEvent.IsAllowed`                            Returns ``True`` if the change is allowed (:meth:`~wx.lib.splitter.MultiSplitterEvent.Veto` hasn't been
:meth:`~wx.lib.splitter.MultiSplitterEvent.SetSashIdx`                           In the case of ``wxEVT_SPLITTER_SASH_POS_CHANGED`` events, sets the
:meth:`~wx.lib.splitter.MultiSplitterEvent.SetSashPosition`                      In the case of ``wxEVT_SPLITTER_SASH_POS_CHANGED`` events, sets the
:meth:`~wx.lib.splitter.MultiSplitterEvent.Veto`                                 Prevents the change announced by this event from happening.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: MultiSplitterEvent(wx.PyCommandEvent)

   This event class is almost the same as `wx.SplitterEvent` except
   it adds an accessor for the sash index that is being changed.  The
   same event type IDs and event binders are used as with
   `wx.SplitterEvent`.

   .. method:: __init__(self, type=wx.wxEVT_NULL, splitter=None)

      Constructor.
      
      Used internally by wxWidgets only.
      
      :param `eventType`:
      :type `eventType`: EventType
      :param `splitter`:
      :type `splitter`: SplitterWindow


   .. method:: Allow(self)

      This is the opposite of :meth:`Veto` : it explicitly allows the
      event to be processed.
      
      For most events it is not necessary to call this method as the events
      are allowed anyhow but some are forbidden by default (this will be
      mentioned in the corresponding event description).


   .. method:: GetSashIdx(self)

      Returns the new sash index.
      
      May only be called while processing ``wxEVT_SPLITTER_SASH_POS_CHANGING``
      and  ``wxEVT_SPLITTER_SASH_POS_CHANGED`` events.
      
      :rtype: `int`


   .. method:: GetSashPosition(self)

      Returns the new sash position.
      
      May only be called while processing ``wxEVT_SPLITTER_SASH_POS_CHANGING``
      and  ``wxEVT_SPLITTER_SASH_POS_CHANGED`` events.
      
      :rtype: `int`


   .. method:: IsAllowed(self)

      Returns ``True`` if the change is allowed (:meth:`Veto` hasn't been
      called) or ``False`` otherwise (if it was).
      
      :rtype: `bool`


   .. method:: SetSashIdx(self, idx)

      In the case of ``wxEVT_SPLITTER_SASH_POS_CHANGED`` events, sets the
      new sash index.
      
      In the case of ``wxEVT_SPLITTER_SASH_POS_CHANGING`` events, sets the
      new tracking bar position so visual feedback during dragging will
      represent that change that will actually take place. Set to -1 from
      the event handler code to prevent reindexing.
      
      May only be called while processing ``wxEVT_SPLITTER_SASH_POS_CHANGING``
      and ``wxEVT_SPLITTER_SASH_POS_CHANGED`` events.
      
      :param int `pos`: New sash index.


   .. method:: SetSashPosition(self, pos)

      In the case of ``wxEVT_SPLITTER_SASH_POS_CHANGED`` events, sets the
      new sash position.
      
      In the case of ``wxEVT_SPLITTER_SASH_POS_CHANGING`` events, sets the
      new tracking bar position so visual feedback during dragging will
      represent that change that will actually take place. Set to -1 from
      the event handler code to prevent repositioning.
      
      May only be called while processing ``wxEVT_SPLITTER_SASH_POS_CHANGING``
      and ``wxEVT_SPLITTER_SASH_POS_CHANGED`` events.
      
      :param int `pos`: New sash position.


   .. method:: Veto(self)

      Prevents the change announced by this event from happening.
      
      It is in general a good idea to notify the user about the reasons
      for vetoing the change because otherwise the applications behaviour
      (which just refuses to do what the user wants) might be quite
      surprising.


