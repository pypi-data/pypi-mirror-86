.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.FontMapper:

==========================================================================================================================================
|phoenix_title|  **wx.FontMapper**
==========================================================================================================================================

:ref:`wx.FontMapper`  manages user-definable correspondence between logical font names and the fonts present on the machine.          

The default implementations of all functions will ask the user if they are not capable of finding the answer themselves and store the answer in a config file (configurable via SetConfigXXX functions). This behaviour may be disabled by giving the value of ``False`` to "interactive" parameter. 

However, the functions will always consult the config file to allow the user-defined values override the default logic and there is no way to disable this - which shouldn't be ever needed because if "interactive" was never ``True``, the config file is never created anyhow. 

In case everything else fails (i.e. there is no record in config file and "interactive" is ``False`` or user denied to choose any replacement), the class queries :ref:`EncodingConverter`  for "equivalent" encodings (e.g. iso8859-2 and cp1250) and tries them. 



|phoenix_title| Using FontMapper in conjunction with MBConv classes
===================================================================

If you need to display text in encoding which is not available at host system (see :meth:`wx.FontMapper.IsEncodingAvailable` ), you may use these two classes to find font in some similar encoding (see :meth:`wx.FontMapper.GetAltForEncoding` ) and convert the text to this encoding (:ref:`MBConv`  classes). Following code snippet demonstrates it: ::

    if not wx.FontMapper.Get().IsEncodingAvailable(enc, facename):
        success, alt = wx.FontMapper.Get().GetAltForEncoding(enc, facename, False)
        if success:
            convFrom = wx.FontMapper.Get().GetEncodingName(enc)
            convTo   = wx.FontMapper.Get().GetEncodingName(alt)
            text = text.decode(convFrom).encode(convTo)

        else:
            # ...failure (or we may try iso8859-1/7bit ASCII)...
            pass

    # ...display text...





.. seealso:: :ref:`EncodingConverter`, :ref:`Writing Non-English Applications <writing non-english applications>`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>FontMapper</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.FontMapper_inheritance.png" alt="Inheritance diagram of FontMapper" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.FontMapper.html" title="wx.FontMapper" alt="" coords="5,5,127,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.FontMapper.__init__`                                                  Default constructor.
:meth:`~wx.FontMapper.CharsetToEncoding`                                         Returns the encoding for the given charset (in the form of ``RFC`` 2046) or  ``FONTENCODING_SYSTEM``   if couldn't decode it.
:meth:`~wx.FontMapper.Get`                                                       Get the current font mapper object.
:meth:`~wx.FontMapper.GetAllEncodingNames`                                       Returns the array of all possible names for the given encoding. If it
:meth:`~wx.FontMapper.GetAltForEncoding`                                         Find an alternative for the given encoding (which is supposed to not be available on this system).
:meth:`~wx.FontMapper.GetEncoding`                                               Returns the `n-th`  supported encoding.
:meth:`~wx.FontMapper.GetEncodingDescription`                                    Return user-readable string describing the given encoding.
:meth:`~wx.FontMapper.GetEncodingFromName`                                       Return the encoding corresponding to the given internal name.
:meth:`~wx.FontMapper.GetEncodingName`                                           Return internal string identifier for the encoding (see also :meth:`wx.FontMapper.GetEncodingDescription` ).
:meth:`~wx.FontMapper.GetSupportedEncodingsCount`                                Returns the number of the font encodings supported by this class.
:meth:`~wx.FontMapper.IsEncodingAvailable`                                       Check whether given encoding is available in given face or not.
:meth:`~wx.FontMapper.Set`                                                       Set the current font mapper object and return previous one (may be ``None``).
:meth:`~wx.FontMapper.SetConfigPath`                                             Set the root config path to use (should be an absolute path).
:meth:`~wx.FontMapper.SetDialogParent`                                           The parent window for modal dialogs.
:meth:`~wx.FontMapper.SetDialogTitle`                                            The title for the dialogs (note that default is quite reasonable).
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.FontMapper(object)

   **Possible constructors**::

       FontMapper()
       
   
   FontMapper manages user-definable correspondence between logical
   font names and the fonts present on the machine.



   .. method:: __init__(self)

      Default constructor.                  

                 



      .. note:: 

         The preferred way of creating a :ref:`wx.FontMapper`  instance is to call :meth:`wx.FontMapper.Get` .   








   .. method:: CharsetToEncoding(self, charset, interactive=True)

      Returns the encoding for the given charset (in the form of ``RFC`` 2046) or  ``FONTENCODING_SYSTEM``   if couldn't decode it.                   

      Be careful when using this function with `interactive`  set to ``True`` (default value) as the function then may show a dialog box to the user which may lead to unexpected reentrancies and may also take a significantly longer time than a simple function call. For these reasons, it is almost always a bad idea to call this function from the event handlers for repeatedly generated events such as  ``EVT_PAINT`` .                   


      :param `charset`: 
      :type `charset`: string
      :param `interactive`: 
      :type `interactive`: bool




      :rtype: :ref:`wx.FontEncoding`








   .. staticmethod:: Get()

      Get the current font mapper object.                  

      If there is no current object, creates one. 

                

      :rtype: :ref:`wx.FontMapper`







      .. seealso:: :meth:`Set`     








   .. staticmethod:: GetAllEncodingNames(encoding)

                              Returns the array of all possible names for the given encoding. If it
                              isn't empty, the first name in it is the canonical encoding name,
                              i.e. the same string as returned by GetEncodingName()
                         

      :rtype: `list of strings`








   .. method:: GetAltForEncoding(self, encoding, facename=EmptyString, interactive=True)

      Find an alternative for the given encoding (which is supposed to not be available on this system).                  

      If successful, return ``True`` and fill info structure with the parameters required to create the font, otherwise return ``False``. 

      The first form is for wxWidgets' internal use while the second one is better suitable for general use â€“  it returns FontEncoding which can consequently be passed to :ref:`wx.Font`  constructor.                  


      :param `encoding`: 
      :type `encoding`: wx.FontEncoding
      :param `facename`: 
      :type `facename`: string
      :param `interactive`: 
      :type `interactive`: bool




      :rtype: `tuple`







      :returns: 

         ( `bool`, `alt_encoding` ) 








   .. staticmethod:: GetEncoding(n)

      Returns the `n-th`  supported encoding.                  

      Together with :meth:`GetSupportedEncodingsCount`   this method may be used to get all supported encodings.                  


      :param `n`: 
      :type `n`: int




      :rtype: :ref:`wx.FontEncoding`








   .. staticmethod:: GetEncodingDescription(encoding)

      Return user-readable string describing the given encoding.                  


      :param `encoding`: 
      :type `encoding`: wx.FontEncoding




      :rtype: `string`








   .. staticmethod:: GetEncodingFromName(encoding)

      Return the encoding corresponding to the given internal name.                  

      This function is the inverse of :meth:`GetEncodingName`   and is intentionally less general than :meth:`CharsetToEncoding` , i.e. it doesn't try to make any guesses nor ever asks the user. It is meant just as a way of restoring objects previously serialized using :meth:`GetEncodingName` .                  


      :param `encoding`: 
      :type `encoding`: string




      :rtype: :ref:`wx.FontEncoding`








   .. staticmethod:: GetEncodingName(encoding)

      Return internal string identifier for the encoding (see also :meth:`wx.FontMapper.GetEncodingDescription` ).                  

                


      :param `encoding`: 
      :type `encoding`: wx.FontEncoding




      :rtype: `string`







      .. seealso:: :meth:`GetEncodingFromName`     








   .. staticmethod:: GetSupportedEncodingsCount()

      Returns the number of the font encodings supported by this class.                  

      Together with :meth:`GetEncoding`   this method may be used to get all supported encodings.                  

      :rtype: `int`








   .. method:: IsEncodingAvailable(self, encoding, facename=EmptyString)

      Check whether given encoding is available in given face or not.                  

      If no facename is given, find `any`  font in this encoding.                  


      :param `encoding`: 
      :type `encoding`: wx.FontEncoding
      :param `facename`: 
      :type `facename`: string




      :rtype: `bool`








   .. staticmethod:: Set(mapper)

      Set the current font mapper object and return previous one (may be ``None``).                  

      This method is only useful if you want to plug-in an alternative font mapper into wxWidgets. 

                


      :param `mapper`: 
      :type `mapper`: wx.FontMapper




      :rtype: :ref:`wx.FontMapper`







      .. seealso:: :meth:`Get`     








   .. method:: SetConfigPath(self, prefix)

      Set the root config path to use (should be an absolute path).                  


      :param `prefix`: 
      :type `prefix`: string







   .. method:: SetDialogParent(self, parent)

      The parent window for modal dialogs.                  


      :param `parent`: 
      :type `parent`: wx.Window







   .. method:: SetDialogTitle(self, title)

      The title for the dialogs (note that default is quite reasonable).                  


      :param `title`: 
      :type `title`: string






