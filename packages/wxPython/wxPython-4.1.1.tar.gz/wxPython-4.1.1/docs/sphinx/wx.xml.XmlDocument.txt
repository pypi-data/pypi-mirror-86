.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.xml.XmlDocument:

==========================================================================================================================================
|phoenix_title|  **wx.xml.XmlDocument**
==========================================================================================================================================

This class holds ``XML`` data/document as parsed by ``XML`` parser in the root node.          

:ref:`wx.xml.XmlDocument`  internally uses the expat library which comes with wxWidgets to parse the given stream. 

A :ref:`wx.xml.XmlDocument`  is in fact a list of :ref:`wx.xml.XmlNode`  organised into a structure that reflects the ``XML`` tree being represented by the document. 


A simple example of using ``XML`` classes is:  

::

        def ScanDocument():

            doc = wx.xml.XmlDocument()
            if not doc.Load("myfile.xml"):
                return False

            # start processing the XML file
            if doc.GetRoot().GetName() != "myroot-node":
                return False

            # examine prologue
            prolog = doc.GetDocumentNode().GetChildren()
            while prolog:

                if prolog.GetType() == wx.xml.XML_PI_NODE and prolog.GetName() == "target":

                    # process Process Instruction contents
                    pi = prolog.GetContent()

                    # Other code here...

            child = doc.GetRoot().GetChildren()
            while child:

                if child.GetName() == "tag1":

                    # process text enclosed by tag1/tag1
                    content = child.GetNodeContent()

                    # Other code here...

                    # process attributes of tag1
                    attrvalue1 = child.GetAttribute("attr1", "default-value")
                    attrvalue2 = child.GetAttribute("attr2", "default-value")

                elif child.GetName() == "tag2":

                    # process tag2 ...
                    attrvalue3 = child.GetAttribute("attr3", "default-value")


                child = child.GetNext()



Note that if you want to preserve the original formatting of the loaded file including whitespaces and indentation, you need to turn off whitespace-only textnode removal and automatic indentation. For example: 

::

        doc = wx.xml.XmlDocument()
        doc.Load("myfile.xml", "UTF-8", wx.xml.XMLDOC_KEEP_WHITESPACE_NODES)

        # myfile2.xml will be identical to myfile.xml saving it self way:
        doc.Save("myfile2.xml", wx.xml.XML_NO_INDENTATION)



Using default parameters, you will get a reformatted document which in general is different from the original loaded content: 

::

        doc = wx.xml.XmlDocument()
        doc.Load("myfile.xml")
        doc.Save("myfile2.xml")  # myfile2.xml != myfile.xml



:ref:`wx.xml.XmlDocument`  can also be used to create documents. The following code gives an example of creating a simple document with two nested element nodes, the second of which has an attribute, and a text node. It also demonstrates how to write the resulting output to a :ref:`String`: 

::

    # Create a document and add the root node.
    xmlDoc = wx.xml.XmlDocument()
    
    root = wx.xml.XmlNode(None, wx.xml.XML_ELEMENT_NODE, "Root")
    xmlDoc.SetRoot(root)
    
    # Add some XML.
    library = wx.xml.XmlNode(root, wx.xml.XML_ELEMENT_NODE, "Library")
    library.AddAttribute("type", "CrossPlatformList")
    name = wx.xml.XmlNode(library, wx.xml.XML_ELEMENT_NODE, "Name")
    name.AddChild(wx.xml.XmlNode(wx.xml.XML_TEXT_NODE, "", "wxPython"))
    
    # Write the output to a string.
    stream = io.StringIO()
    xmlDoc.Save(stream)



This will produce a document that looks something like the following: 

::

    <?xml version="1.0" encoding="UTF-8"?>
    <Root>
      <Library type="CrossPlatformList">
        <Name>wxPython</Name>
      </Library>
    </Root>



If the root name value of the ``DOCTYPE`` is set, either by loading a file with a ``DOCTYPE`` declaration or by setting it directly with the SetDoctype member, then a ``DOCTYPE`` declaration will be added immediately after the ``XML`` declaration. 







         



.. note:: 

   Ownership is passed to the ``XML`` tree as each :ref:`wx.xml.XmlNode`  is added to it, and this has two implications. Firstly, the :ref:`wx.xml.XmlDocument`  takes responsibility for deleting the node so the user should not  ``delete``   it; and secondly, a  :ref:`wx.xml.XmlNode`  must always be created on the heap and never on the stack.  







.. seealso:: :ref:`wx.xml.XmlNode`, :ref:`wx.xml.XmlAttribute`, :ref:`wx.xml.XmlDoctype`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>XmlDocument</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.xml.XmlDocument_inheritance.png" alt="Inheritance diagram of XmlDocument" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.xml.XmlDocument.html" title="wx.xml.XmlDocument" alt="" coords="5,83,172,112"/> <area shape="rect" id="node2" href="wx.Object.html" title="wx.Object" alt="" coords="45,5,132,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.xml.XmlDocument.__init__`                                             Default constructor.
:meth:`~wx.xml.XmlDocument.AppendToProlog`                                       Appends a Process Instruction or Comment node to the document prologue.
:meth:`~wx.xml.XmlDocument.DetachDocumentNode`                                   Detaches the document node and returns it.
:meth:`~wx.xml.XmlDocument.DetachRoot`                                           Detaches the root entity node and returns it.
:meth:`~wx.xml.XmlDocument.GetDoctype`                                           Returns the ``DOCTYPE`` declaration data for the document.
:meth:`~wx.xml.XmlDocument.GetDocumentNode`                                      Returns the document node of the document.
:meth:`~wx.xml.XmlDocument.GetEOL`                                               Returns the output line ending string used for documents.
:meth:`~wx.xml.XmlDocument.GetFileEncoding`                                      Returns encoding of document (may be empty).
:meth:`~wx.xml.XmlDocument.GetFileType`                                          Returns the output line ending format used for documents.
:meth:`~wx.xml.XmlDocument.GetLibraryVersionInfo`                                Get expat library version information.
:meth:`~wx.xml.XmlDocument.GetRoot`                                              Returns the root element node of the document.
:meth:`~wx.xml.XmlDocument.GetVersion`                                           Returns the version of document.
:meth:`~wx.xml.XmlDocument.IsOk`                                                 Returns ``True`` if the document has been loaded successfully.
:meth:`~wx.xml.XmlDocument.Load`                                                 Parses `filename`  as an xml document and loads its data.
:meth:`~wx.xml.XmlDocument.Save`                                                 Saves ``XML`` tree creating a file named with given string.
:meth:`~wx.xml.XmlDocument.SetDoctype`                                           Sets the data which will appear in the ``DOCTYPE`` declaration when the document is saved.
:meth:`~wx.xml.XmlDocument.SetDocumentNode`                                      Sets the document node of this document.
:meth:`~wx.xml.XmlDocument.SetFileEncoding`                                      Sets the encoding of the file which will be used to save the document.
:meth:`~wx.xml.XmlDocument.SetFileType`                                          Sets the output line ending formats when the document is saved.
:meth:`~wx.xml.XmlDocument.SetRoot`                                              Sets the root element node of this document.
:meth:`~wx.xml.XmlDocument.SetVersion`                                           Sets the version of the ``XML`` file which will be used to save the document.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.xml.XmlDocument.Doctype`                                              See :meth:`~wx.xml.XmlDocument.GetDoctype` and :meth:`~wx.xml.XmlDocument.SetDoctype`
:attr:`~wx.xml.XmlDocument.DocumentNode`                                         See :meth:`~wx.xml.XmlDocument.GetDocumentNode` and :meth:`~wx.xml.XmlDocument.SetDocumentNode`
:attr:`~wx.xml.XmlDocument.EOL`                                                  See :meth:`~wx.xml.XmlDocument.GetEOL`
:attr:`~wx.xml.XmlDocument.FileEncoding`                                         See :meth:`~wx.xml.XmlDocument.GetFileEncoding` and :meth:`~wx.xml.XmlDocument.SetFileEncoding`
:attr:`~wx.xml.XmlDocument.FileType`                                             See :meth:`~wx.xml.XmlDocument.GetFileType` and :meth:`~wx.xml.XmlDocument.SetFileType`
:attr:`~wx.xml.XmlDocument.Root`                                                 See :meth:`~wx.xml.XmlDocument.GetRoot` and :meth:`~wx.xml.XmlDocument.SetRoot`
:attr:`~wx.xml.XmlDocument.Version`                                              See :meth:`~wx.xml.XmlDocument.GetVersion` and :meth:`~wx.xml.XmlDocument.SetVersion`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.xml.XmlDocument(Object)

   **Possible constructors**::

       XmlDocument()
       
       XmlDocument(doc)
       
       XmlDocument(filename, encoding="UTF-8")
       
       XmlDocument(stream, encoding="UTF-8")
       
   
   This class holds ``XML`` data/document as parsed by ``XML`` parser in the root
   node.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, doc)`
      
      Copy constructor.                  
      
      Deep copies all the ``XML`` tree of the given document.                  
      
      
      :param `doc`: 
      :type `doc`: wx.xml.XmlDocument
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, filename, encoding="UTF-8")`
      
      Loads the given filename using the given encoding.                  
      
      See :meth:`Load` .                  
      
      
      :param `filename`: 
      :type `filename`: string
      :param `encoding`: 
      :type `encoding`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, stream, encoding="UTF-8")`
      
      Loads the ``XML`` document from given stream using the given encoding.                  
      
      See :meth:`Load` .                  
      
      
      :param `stream`: 
      :type `stream`: wx.InputStream
      :param `encoding`: 
      :type `encoding`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AppendToProlog(self, node)

      Appends a Process Instruction or Comment node to the document prologue.                  

      Calling this function will create a prologue or attach the node to the end of an existing prologue. 

                


      :param `node`: 
      :type `node`: wx.xml.XmlNode






      .. versionadded:: 2.9.2 
     








   .. method:: DetachDocumentNode(self)

      Detaches the document node and returns it.                  

      The document node will be set to ``None`` and thus :meth:`IsOk`   will return ``False`` after calling this function. 

      Note that the caller is responsible for deleting the returned node in order to avoid memory leaks. 

                

      :rtype: :ref:`wx.xml.XmlNode`







      .. versionadded:: 2.9.2 
     








   .. method:: DetachRoot(self)

      Detaches the root entity node and returns it.                  

      After calling this function, the document node will remain together with any prologue nodes, but :meth:`IsOk`   will return ``False`` since the root entity will be missing. 

      Note that the caller is responsible for deleting the returned node in order to avoid memory leaks.                  

      :rtype: :ref:`wx.xml.XmlNode`








   .. method:: GetDoctype(self)

      Returns the ``DOCTYPE`` declaration data for the document.                  

                

      :rtype: :ref:`wx.xml.XmlDoctype`







      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. method:: GetDocumentNode(self)

      Returns the document node of the document.                  

                

      :rtype: :ref:`wx.xml.XmlNode`







      .. versionadded:: 2.9.2 
     








   .. method:: GetEOL(self)

      Returns the output line ending string used for documents.                  

      This string is determined by the last call to :meth:`SetFileType` . 

                

      :rtype: `string`







      .. versionadded:: 4.1/wxWidgets-3.1.1  
     








   .. method:: GetFileEncoding(self)

      Returns encoding of document (may be empty).                  

                

      :rtype: `string`







      .. note:: 

         This is the encoding original file was saved in, **not**  the encoding of in-memory representation!   








   .. method:: GetFileType(self)

      Returns the output line ending format used for documents.                  

                

      :rtype: :ref:`wx.TextFileType`







      .. versionadded:: 4.1/wxWidgets-3.1.1  
     








   .. staticmethod:: GetLibraryVersionInfo()

      Get expat library version information.                  

                

      :rtype: :ref:`wx.VersionInfo`







      .. versionadded:: 2.9.2 
     







      .. seealso:: :ref:`wx.VersionInfo`    








   .. method:: GetRoot(self)

      Returns the root element node of the document.                  

      :rtype: :ref:`wx.xml.XmlNode`








   .. method:: GetVersion(self)

      Returns the version of document.                  

      This is the value in the  ``<`` ?xml version="1.0"?> header of the ``XML`` document. If the version attribute was not explicitly given in the header, this function returns an empty string.                   

      :rtype: `string`








   .. method:: IsOk(self)

      Returns ``True`` if the document has been loaded successfully.                  

      :rtype: `bool`








   .. method:: Load(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **Load** `(self, filename, encoding="UTF-8", flags=XMLDOC_NONE)`
      
      Parses `filename`  as an xml document and loads its data.                  
      
      If `flags`  does not contain ``wx.xml.XMLDOC_KEEP_WHITESPACE_NODES``, then, while loading, all nodes of type  ``XML_TEXT_NODE``   (see  :ref:`wx.xml.XmlNode`) are automatically skipped if they contain whitespaces only. 
      
      The removal of these nodes makes the load process slightly faster and requires less memory however makes impossible to recreate exactly the loaded text with a :meth:`Save`   call later. Read the initial description of this class for more info. 
      
      Returns ``True`` on success, ``False`` otherwise.                  
      
      
      :param `filename`: 
      :type `filename`: string
      :param `encoding`: 
      :type `encoding`: string
      :param `flags`: 
      :type `flags`: int
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **Load** `(self, stream, encoding="UTF-8", flags=XMLDOC_NONE)`
      
      Like :meth:`Load`   but takes the data from given input stream.                  
      
      
      :param `stream`: 
      :type `stream`: wx.InputStream
      :param `encoding`: 
      :type `encoding`: string
      :param `flags`: 
      :type `flags`: int
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Save(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **Save** `(self, filename, indentstep=2)`
      
      Saves ``XML`` tree creating a file named with given string.                  
      
      If `indentstep`  is greater than or equal to zero, then, while saving, an automatic indentation is added with steps composed by indentstep spaces. 
      
      If `indentstep`  is  ``XML_NO_INDENTATION`` , then, automatic indentation is turned off.                   
      
      
      :param `filename`: 
      :type `filename`: string
      :param `indentstep`: 
      :type `indentstep`: int
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **Save** `(self, stream, indentstep=2)`
      
      Saves ``XML`` tree in the given output stream.                  
      
      See Save(const String&, int) for a description of `indentstep`.                  
      
      
      :param `stream`: 
      :type `stream`: wx.OutputStream
      :param `indentstep`: 
      :type `indentstep`: int
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetDoctype(self, doctype)

      Sets the data which will appear in the ``DOCTYPE`` declaration when the document is saved.                  

                


      :param `doctype`: 
      :type `doctype`: wx.xml.XmlDoctype






      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. method:: SetDocumentNode(self, node)

      Sets the document node of this document.                  

      Deletes any previous document node. Use :meth:`DetachDocumentNode`   and then :meth:`SetDocumentNode`   if you want to replace the document node without deleting the old document tree. 

                


      :param `node`: 
      :type `node`: wx.xml.XmlNode






      .. versionadded:: 2.9.2 
     








   .. method:: SetFileEncoding(self, encoding)

      Sets the encoding of the file which will be used to save the document.                  


      :param `encoding`: 
      :type `encoding`: string







   .. method:: SetFileType(self, fileType)

      Sets the output line ending formats when the document is saved.                  

      By default Unix file type is used, i.e. a single ``ASCII`` ``LF`` (10) character is used at the end of lines. 

                


      :param `fileType`: 
      :type `fileType`: wx.TextFileType






      .. versionadded:: 4.1/wxWidgets-3.1.1  
     








   .. method:: SetRoot(self, node)

      Sets the root element node of this document.                  

      Will create the document node if necessary. Any previous root element node is deleted.                  


      :param `node`: 
      :type `node`: wx.xml.XmlNode







   .. method:: SetVersion(self, version)

      Sets the version of the ``XML`` file which will be used to save the document.                  


      :param `version`: 
      :type `version`: string







   .. attribute:: Doctype

      See :meth:`~wx.xml.XmlDocument.GetDoctype` and :meth:`~wx.xml.XmlDocument.SetDoctype`


   .. attribute:: DocumentNode

      See :meth:`~wx.xml.XmlDocument.GetDocumentNode` and :meth:`~wx.xml.XmlDocument.SetDocumentNode`


   .. attribute:: EOL

      See :meth:`~wx.xml.XmlDocument.GetEOL`


   .. attribute:: FileEncoding

      See :meth:`~wx.xml.XmlDocument.GetFileEncoding` and :meth:`~wx.xml.XmlDocument.SetFileEncoding`


   .. attribute:: FileType

      See :meth:`~wx.xml.XmlDocument.GetFileType` and :meth:`~wx.xml.XmlDocument.SetFileType`


   .. attribute:: Root

      See :meth:`~wx.xml.XmlDocument.GetRoot` and :meth:`~wx.xml.XmlDocument.SetRoot`


   .. attribute:: Version

      See :meth:`~wx.xml.XmlDocument.GetVersion` and :meth:`~wx.xml.XmlDocument.SetVersion`

