.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.StaticText:

==========================================================================================================================================
|phoenix_title|  **wx.StaticText**
==========================================================================================================================================

A static text control displays one or more lines of read-only text.          

:ref:`wx.StaticText`  supports the three classic text alignments, label ellipsization i.e. replacing parts of the text with the ellipsis ("...") if the label doesn't fit into the provided space and also formatting markup with :meth:`wx.Control.SetLabelMarkup` . 





.. _StaticText-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  

- ``wx.ALIGN_LEFT``: Align the text to the left.  
- ``wx.ALIGN_RIGHT``: Align the text to the right.  
- ``wx.ALIGN_CENTRE_HORIZONTAL``: Center the text (horizontally).  
- ``wx.ST_NO_AUTORESIZE``: By default, the control will adjust its size to exactly fit to the size of the text when :meth:`~wx.StaticText.SetLabel`  is called. If this style flag is given, the control will not change its size (this style is especially useful with controls which also have the  ``ALIGN_RIGHT``   or the   ``ALIGN_CENTRE_HORIZONTAL``   style because otherwise they won't make sense any longer after a call to  :meth:`~wx.StaticText.SetLabel`).  
- ``wx.ST_ELLIPSIZE_START``: If the labeltext width exceeds the control width, replace the beginning of the label with an ellipsis; uses :meth:`wx.Control.Ellipsize` .  
- ``wx.ST_ELLIPSIZE_MIDDLE``: If the label text width exceeds the control width, replace the middle of the label with an ellipsis; uses :meth:`wx.Control.Ellipsize` .  
- ``wx.ST_ELLIPSIZE_END``: If the label text width exceeds the control width, replace the end of the label with an ellipsis; uses :meth:`wx.Control.Ellipsize` .  








         



.. seealso:: :ref:`wx.StaticBitmap`, :ref:`wx.StaticBox`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>StaticText</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.StaticText_inheritance.png" alt="Inheritance diagram of StaticText" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.StaticText.html" title="wx.StaticText" alt="" coords="54,315,163,344"/> <area shape="rect" id="node2" href="wx.Control.html" title="wx.Control" alt="" coords="63,237,155,267"/> <area shape="rect" id="node3" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node4" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node6" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|appearance| Control Appearance
===============================

|

.. figure:: _static/images/widgets/fullsize/wxmsw/wx.statictext.png
   :alt: wxMSW
   :figclass: floatleft

   **wxMSW**


.. figure:: _static/images/widgets/fullsize/wxmac/wx.statictext.png
   :alt: wxMAC
   :figclass: floatright

   **wxMAC**


.. figure:: _static/images/widgets/fullsize/wxgtk/wx.statictext.png
   :alt: wxGTK
   :figclass: floatcenter

   **wxGTK**


|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.StaticText.__init__`                                                  Default constructor.
:meth:`~wx.StaticText.Create`                                                    Creation function, for two-step construction.
:meth:`~wx.StaticText.GetClassDefaultAttributes`                                 
:meth:`~wx.StaticText.IsEllipsized`                                              Returns ``True`` if the window styles for this control contains one of the  ``ST_ELLIPSIZE_START`` ,   ``ST_ELLIPSIZE_MIDDLE``   or   ``ST_ELLIPSIZE_END``   styles.
:meth:`~wx.StaticText.SetLabel`                                                  Change the label shown in the control.
:meth:`~wx.StaticText.Wrap`                                                      This functions wraps the controls label so that each of its lines becomes at most `width`  pixels wide if possible (the lines are broken at words boundaries so it might not be the case if words are too long).
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.StaticText(Control)

   **Possible constructors**::

       StaticText()
       
       StaticText(parent, id=ID_ANY, label=EmptyString, pos=DefaultPosition,
                  size=DefaultSize, style=0, name=StaticTextNameStr)
       
   
   A static text control displays one or more lines of read-only text.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, label=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, name=StaticTextNameStr)`
      
      Constructor, creating and showing a text control.                  
      
      
      
      
      :param `parent`: Parent window. Should not be ``None``.   
      :type `parent`: wx.Window
      :param `id`: Control identifier. A value of -1 denotes a default value.   
      :type `id`: wx.WindowID
      :param `label`: Text label.   
      :type `label`: string
      :param `pos`: Window position.   
      :type `pos`: wx.Point
      :param `size`: Window size.   
      :type `size`: wx.Size
      :param `style`: Window style. See :ref:`wx.StaticText`.   
      :type `style`: long
      :param `name`: Window name.  
      :type `name`: string
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. seealso:: :meth:`Create`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Create(self, parent, id=ID_ANY, label=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, name=StaticTextNameStr)

      Creation function, for two-step construction.                  

      For details see :ref:`wx.StaticText`.                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `label`: 
      :type `label`: string
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: IsEllipsized(self)

      Returns ``True`` if the window styles for this control contains one of the  ``ST_ELLIPSIZE_START`` ,   ``ST_ELLIPSIZE_MIDDLE``   or   ``ST_ELLIPSIZE_END``   styles.                   

      :rtype: `bool`








   .. method:: SetLabel(self, label)

      Change the label shown in the control.                  

      Notice that since wxWidgets 3.1.1 this function is guaranteed not to do anything if the label didn't really change, so there is no benefit to checking if the new label is different from the current one in the application code. 

                


      :param `label`: 
      :type `label`: string






      .. seealso:: :meth:`wx.Control.SetLabel`     








   .. method:: Wrap(self, width)

      This functions wraps the controls label so that each of its lines becomes at most `width`  pixels wide if possible (the lines are broken at words boundaries so it might not be the case if words are too long).                  

      If `width`  is negative, no wrapping is done. Note that this width is not necessarily the total width of the control, since a few pixels for the border (depending on the controls border style) may be added. 

                


      :param `width`: 
      :type `width`: int






      .. versionadded:: 2.6.2 
     







