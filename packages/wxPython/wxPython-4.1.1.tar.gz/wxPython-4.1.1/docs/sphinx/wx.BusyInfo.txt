.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.BusyInfo:

==========================================================================================================================================
|phoenix_title|  **wx.BusyInfo**
==========================================================================================================================================

This class makes it easy to tell your user that the program is temporarily busy.          

Normally the main thread should always return to the main loop to continue dispatching events as quickly as possible, hence this class shouldn't be needed. However if the main thread does need to block, this class provides a simple way to at least show this to the user: just create a :ref:`wx.BusyInfo`  object on the stack, and within the current scope, a message window will be shown. 

For example: 

::

    # Normal usage
    wait = wx.BusyInfo("Please wait, working...")
    for i in range(10000):
        DoACalculation()
    del wait

    # It can be used as a context manager too
    with wx.BusyInfo("Please wait, working..."):
        for i in range(10000):
        DoACalculation()



It works by creating a window in the constructor, and deleting it in the destructor. 

This window is rather plain by default but can be customized by passing :ref:`wx.BusyInfo`  constructor an object of :ref:`wx.BusyInfoFlags`  class instead of a simple message. Here is an example from the dialogs sample: 

::

       info = wx.BusyInfo(
                wx.BusyInfoFlags()
                    .Parent(self)
                    .Icon(wx.ArtProvider.GetIcon(wx.ART_PRINT,
                                                 wx.ART_OTHER, wx.Size(128, 128)))
                    .Title("<b>Printing your document</b>")
                    .Text("Please wait...")
                    .Foreground(wx.WHITE)
                    .Background(wx.BLACK)
                    .Transparency(4 * wx.ALPHA_OPAQUE / 5)
            )



This shows that separate title and text can be set, and that simple markup (:meth:`wx.Control.SetLabelMarkup` ) can be used in them, and that it's also possible to add an icon and customize the colours and transparency of the window. 

You may also want to call TheApp.Yield() to refresh the window periodically (in case it had been obscured by other windows, for example) like this: 

::

    with wx.WindowDisabler():
        wait = wx.BusyInfo("Please wait, working...")

        for i in range(100000):
            DoACalculation()

            if not (i % 1000):
                wx.GetApp().Yield()



but take care to not cause undesirable reentrancies when doing it (see :meth:`wx.App.Yield`   for more details). The simplest way to do it is to use :ref:`wx.WindowDisabler`  class as illustrated in the above example. 

Note that a :ref:`wx.BusyInfo`  is always built with the  ``STAY_ON_TOP``   window style (see  :ref:`wx.Frame`  window styles for more info). 









|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>BusyInfo</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.BusyInfo_inheritance.png" alt="Inheritance diagram of BusyInfo" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.BusyInfo.html" title="wx.BusyInfo" alt="" coords="5,5,108,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.BusyInfo.__init__`                                                    General constructor.
:meth:`~wx.BusyInfo.UpdateLabel`                                                 Same as :meth:`~BusyInfo.UpdateText`   but doesn't interpret the string as containing markup.
:meth:`~wx.BusyInfo.UpdateText`                                                  Update the information text.
:meth:`~wx.BusyInfo.__enter__`                                                   
:meth:`~wx.BusyInfo.__exit__`                                                    
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.BusyInfo(object)

   **Possible constructors**::

       BusyInfo(flags)
       
       BusyInfo(msg, parent=None)
       
   
   This class makes it easy to tell your user that the program is
   temporarily busy.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, flags)`
      
      General constructor.                  
      
      This constructor allows specifying all supported attributes by calling the appropriate methods on :ref:`wx.BusyInfoFlags`  object passed to it as parameter. All of them are optional but usually at least the message should be specified. 
      
                      
      
      
      :param `flags`: 
      :type `flags`: wx.BusyInfoFlags
      
      
      
      
      
      
      .. versionadded:: 4.1/wxWidgets-3.1.0  
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, msg, parent=None)`
      
      Simple constructor specifying only the message and the parent.                  
      
      This constructs a busy info window as child of `parent`  and displays `msg`  in it. It is exactly equivalent to using ::
      
          wait = wx.BusyInfo(wx.BusyInfoFlags().Parent(parent).Label(message))
      
      
      
                      
      
      
      :param `msg`: 
      :type `msg`: string
      :param `parent`: 
      :type `parent`: wx.Window
      
      
      
      
      
      
      .. note:: 
      
         If `parent`  is not ``None`` you must ensure that it is not closed while the busy info is shown.   
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: UpdateLabel(self, str)

      Same as :meth:`UpdateText`   but doesn't interpret the string as containing markup.                  

                


      :param `str`: 
      :type `str`: string






      .. versionadded:: 4.1/wxWidgets-3.1.3  
     








   .. method:: UpdateText(self, str)

      Update the information text.                  

      The `text`  string may contain markup as described in :meth:`wx.Control.SetLabelMarkup` . 

                


      :param `str`: 
      :type `str`: string






      .. versionadded:: 4.1/wxWidgets-3.1.3  
     








   .. method:: __enter__(self)




   .. method:: __exit__(self, exc_type, exc_val, exc_tb)



