.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.propgrid.DateProperty:

==========================================================================================================================================
|phoenix_title|  **wx.propgrid.DateProperty**
==========================================================================================================================================

Property representing :ref:`wx.DateTime`.          

**Supported special attributes:**

- ``PG_DATE_FORMAT``: Determines displayed date format. 
- ``PG_DATE_PICKER_STYLE``: Determines window style used with :ref:`wx.adv.DatePickerCtrl`. Default is ``DP_DEFAULT``  | ``DP_SHOWCENTURY``. Using ``DP_ALLOWNONE``  enables additional support for unspecified property value.  


          




|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>DateProperty</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.propgrid.DateProperty_inheritance.png" alt="Inheritance diagram of DateProperty" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.propgrid.DateProperty.html" title="wx.propgrid.DateProperty" alt="" coords="5,160,195,189"/> <area shape="rect" id="node2" href="wx.propgrid.PGProperty.html" title="wx.propgrid.PGProperty" alt="" coords="12,83,188,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="57,5,143,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.propgrid.DateProperty.__init__`                                       
:meth:`~wx.propgrid.DateProperty.DoSetAttribute`                                 Reimplement this member function to add special handling for attributes of this property.
:meth:`~wx.propgrid.DateProperty.GetDatePickerStyle`                             
:meth:`~wx.propgrid.DateProperty.GetDateValue`                                   
:meth:`~wx.propgrid.DateProperty.GetFormat`                                      
:meth:`~wx.propgrid.DateProperty.OnSetValue`                                     This virtual function is called after m_value has been set.
:meth:`~wx.propgrid.DateProperty.SetDateValue`                                   
:meth:`~wx.propgrid.DateProperty.SetFormat`                                      
:meth:`~wx.propgrid.DateProperty.StringToValue`                                  Converts text into :ref:`Variant`  value appropriate for this property.
:meth:`~wx.propgrid.DateProperty.ValueToString`                                  Converts property value into a text representation.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.propgrid.DateProperty.DatePickerStyle`                                See :meth:`~wx.propgrid.DateProperty.GetDatePickerStyle`
:attr:`~wx.propgrid.DateProperty.DateValue`                                      See :meth:`~wx.propgrid.DateProperty.GetDateValue` and :meth:`~wx.propgrid.DateProperty.SetDateValue`
:attr:`~wx.propgrid.DateProperty.Format`                                         See :meth:`~wx.propgrid.DateProperty.GetFormat` and :meth:`~wx.propgrid.DateProperty.SetFormat`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.propgrid.DateProperty(PGProperty)

   **Possible constructors**::

       DateProperty(label=PG_LABEL, name=PG_LABEL, value=DateTime())
       
   
   Property representing DateTime.



   .. method:: __init__(self, label=PG_LABEL, name=PG_LABEL, value=DateTime())




      :param `label`: 
      :type `label`: string
      :param `name`: 
      :type `name`: string
      :param `value`: 
      :type `value`: wx.DateTime







   .. method:: DoSetAttribute(self, name, value)

      Reimplement this member function to add special handling for attributes of this property.                  

                


      :param `name`: 
      :type `name`: string
      :param `value`: 
      :type `value`: PGVariant




      :rtype: `bool`







      :returns: 

         Return ``False`` to have the attribute automatically stored in m_attributes. Default implementation simply does that and nothing else.  







      .. note:: 

         To actually set property attribute values from the application, use :meth:`wx.propgrid.PGProperty.SetAttribute`   instead.   








   .. method:: GetDatePickerStyle(self)



      :rtype: `long`








   .. method:: GetDateValue(self)



      :rtype: :ref:`DateTime`








   .. method:: GetFormat(self)



      :rtype: `string`








   .. method:: OnSetValue(self)

      This virtual function is called after m_value has been set.                  

                 



      .. note:: 

   

         - If m_value was set to Null variant (i.e. unspecified value), :meth:`OnSetValue`   will not be called. 
         - m_value may be of any variant type. Typically properties internally support only one variant type, and as such :meth:`OnSetValue`   provides a good opportunity to convert supported values into internal type. 
         - Default implementation does nothing.  











   .. method:: SetDateValue(self, dt)




      :param `dt`: 
      :type `dt`: wx.DateTime







   .. method:: SetFormat(self, format)




      :param `format`: 
      :type `format`: string







   .. method:: StringToValue(self, text, argFlags=0)

      Converts text into :ref:`Variant`  value appropriate for this property.                  




      :param `text`: Text to be translated into variant.  
      :type `text`: string
      :param `argFlags`: If ``PG_FULL_VALUE``  is set, returns complete, storable value instead of displayable one (they may be different). If ``PG_COMPOSITE_FRAGMENT``  is set, text is interpreted as a part of composite property string value (as generated by :meth:`ValueToString`   called with this same flag).  
      :type `argFlags`: int










      :rtype: `tuple`




      You might want to take into account that m_value is Null variant if property value is unspecified (which is usually only case if you explicitly enabled that sort behaviour).                    



      :returns: 

         ( `bool`, `variant` ) 







      .. note:: 

         Default implementation converts semicolon delimited tokens into child values. Only works for properties with children.  








   .. method:: ValueToString(self, value, argFlags=0)

      Converts property value into a text representation.                  




      :param `value`: Value to be converted.   
      :type `value`: PGVariant
      :param `argFlags`: If 0 (default value), then displayed string is returned. If ``PG_FULL_VALUE``  is set, returns complete, storable string value instead of displayable. If ``PG_EDITABLE_VALUE``  is set, returns string value that must be editable in textctrl. If ``PG_COMPOSITE_FRAGMENT``  is set, returns text that is appropriate to display as a part of string property's composite text representation.  
      :type `argFlags`: int








      :rtype: `string`



                  



      .. note:: 

         Default implementation calls :meth:`GenerateComposedValue` .   








   .. attribute:: DatePickerStyle

      See :meth:`~wx.propgrid.DateProperty.GetDatePickerStyle`


   .. attribute:: DateValue

      See :meth:`~wx.propgrid.DateProperty.GetDateValue` and :meth:`~wx.propgrid.DateProperty.SetDateValue`


   .. attribute:: Format

      See :meth:`~wx.propgrid.DateProperty.GetFormat` and :meth:`~wx.propgrid.DateProperty.SetFormat`

