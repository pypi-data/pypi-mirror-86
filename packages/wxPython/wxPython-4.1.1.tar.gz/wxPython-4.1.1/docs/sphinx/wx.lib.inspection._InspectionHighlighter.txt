.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.inspection

.. highlight:: python



.. _wx.lib.inspection._InspectionHighlighter:

==========================================================================================================================================
|phoenix_title|  **wx.lib.inspection._InspectionHighlighter**
==========================================================================================================================================

All the highlighting code.  A separate class to help reduce the
clutter in InspectionFrame.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>_InspectionHighlighter</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.inspection._InspectionHighlighter_inheritance.png" alt="Inheritance diagram of _InspectionHighlighter" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.inspection._InspectionHighlighter.html" title="wx.lib.inspection._InspectionHighlighter" alt="" coords="5,5,288,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.inspection._InspectionHighlighter.__init__`                       Initialize self.  See help(type(self)) for accurate signature.
:meth:`~wx.lib.inspection._InspectionHighlighter.AdjustRect`                     
:meth:`~wx.lib.inspection._InspectionHighlighter.DoHighlight`                    
:meth:`~wx.lib.inspection._InspectionHighlighter.DoUnhighlight`                  
:meth:`~wx.lib.inspection._InspectionHighlighter.FindHighlightPos`               
:meth:`~wx.lib.inspection._InspectionHighlighter.FlickerTLW`                     Use a timer to alternate a TLW between shown and hidded state a
:meth:`~wx.lib.inspection._InspectionHighlighter.HighlightCurrentItem`           Draw a highlight rectangle around the item represented by the
:meth:`~wx.lib.inspection._InspectionHighlighter.HighlightSizer`                 
:meth:`~wx.lib.inspection._InspectionHighlighter.HighlightSizerItem`             
:meth:`~wx.lib.inspection._InspectionHighlighter.HighlightWindow`                
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: _InspectionHighlighter(object)

   All the highlighting code.  A separate class to help reduce the
   clutter in InspectionFrame.

   .. method:: __init__(self)

      Initialize self.  See help(type(self)) for accurate signature.


   .. method:: AdjustRect(self, tlw, win,  rect)


   .. method:: DoHighlight(self, tlw, rect, colour, penWidth=2)


   .. method:: DoUnhighlight(self, tlw, rect)


   .. method:: FindHighlightPos(self, tlw, pos)


   .. method:: FlickerTLW(self, tlw)

      Use a timer to alternate a TLW between shown and hidded state a
      few times.  Use to highlight a TLW since drawing and clearing an
      outline is trickier.


   .. method:: HighlightCurrentItem(self, tree)

      Draw a highlight rectangle around the item represented by the
      current tree selection.


   .. method:: HighlightSizer(self, sizer)


   .. method:: HighlightSizerItem(self, item, sizer, penWidth=2)


   .. method:: HighlightWindow(self, win)


