.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.FlexGridSizer:

==========================================================================================================================================
|phoenix_title|  **wx.FlexGridSizer**
==========================================================================================================================================

A flex grid sizer is a sizer which lays out its children in a two-dimensional table with all table fields in one row having the same height and all fields in one column having the same width, but all rows or all columns are not necessarily the same height or width as in the :ref:`wx.GridSizer`.          

Since wxWidgets 2.5.0, :ref:`wx.FlexGridSizer`  can also size items equally in one direction but unequally ("flexibly") in the other. If the sizer is only flexible in one direction (this can be changed using :meth:`wx.FlexGridSizer.SetFlexibleDirection` ), it needs to be decided how the sizer should grow in the other ("non-flexible") direction in order to fill the available space. The :meth:`wx.FlexGridSizer.SetNonFlexibleGrowMode`   method serves this purpose. 







         



.. seealso:: :ref:`wx.Sizer`, :ref:`Sizers Overview <sizers overview>`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>FlexGridSizer</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.FlexGridSizer_inheritance.png" alt="Inheritance diagram of FlexGridSizer" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.FlexGridSizer.html" title="wx.FlexGridSizer" alt="" coords="5,237,136,267"/> <area shape="rect" id="node2" href="wx.GridSizer.html" title="wx.GridSizer" alt="" coords="19,160,123,189"/> <area shape="rect" id="node3" href="wx.Sizer.html" title="wx.Sizer" alt="" coords="32,83,109,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="27,5,114,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.GridBagSizer`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.FlexGridSizer.__init__`                                               :ref:`wx.FlexGridSizer`  constructors.
:meth:`~wx.FlexGridSizer.AddGrowableCol`                                         Specifies that column `idx`  (starting from zero) should be grown if there is extra space available to the sizer.
:meth:`~wx.FlexGridSizer.AddGrowableRow`                                         Specifies that row idx (starting from zero) should be grown if there is extra space available to the sizer.
:meth:`~wx.FlexGridSizer.CalcMin`                                                This method is abstract and has to be overwritten by any derived class.
:meth:`~wx.FlexGridSizer.GetColWidths`                                           Returns a read-only array containing the widths of the columns in the sizer.
:meth:`~wx.FlexGridSizer.GetFlexibleDirection`                                   Returns a :ref:`wx.Orientation`  value that specifies whether the sizer flexibly resizes its columns, rows, or both (default).
:meth:`~wx.FlexGridSizer.GetNonFlexibleGrowMode`                                 Returns the value that specifies how the sizer grows in the "non-flexible" direction if there is one.
:meth:`~wx.FlexGridSizer.GetRowHeights`                                          Returns a read-only array containing the heights of the rows in the sizer.
:meth:`~wx.FlexGridSizer.IsColGrowable`                                          Returns ``True`` if column `idx`  is growable.
:meth:`~wx.FlexGridSizer.IsRowGrowable`                                          Returns ``True`` if row `idx`  is growable.
:meth:`~wx.FlexGridSizer.RemoveGrowableCol`                                      Specifies that the `idx`  column index is no longer growable.
:meth:`~wx.FlexGridSizer.RemoveGrowableRow`                                      Specifies that the `idx`  row index is no longer growable.
:meth:`~wx.FlexGridSizer.RepositionChildren`                                     Method which must be overridden in the derived sizer classes.
:meth:`~wx.FlexGridSizer.SetFlexibleDirection`                                   Specifies whether the sizer should flexibly resize its columns, rows, or both.
:meth:`~wx.FlexGridSizer.SetNonFlexibleGrowMode`                                 Specifies how the sizer should grow in the non-flexible direction if there is one (so :meth:`~FlexGridSizer.SetFlexibleDirection`   must have been called previously).
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.FlexGridSizer.ColWidths`                                              See :meth:`~wx.FlexGridSizer.GetColWidths`
:attr:`~wx.FlexGridSizer.FlexibleDirection`                                      See :meth:`~wx.FlexGridSizer.GetFlexibleDirection` and :meth:`~wx.FlexGridSizer.SetFlexibleDirection`
:attr:`~wx.FlexGridSizer.NonFlexibleGrowMode`                                    See :meth:`~wx.FlexGridSizer.GetNonFlexibleGrowMode` and :meth:`~wx.FlexGridSizer.SetNonFlexibleGrowMode`
:attr:`~wx.FlexGridSizer.RowHeights`                                             See :meth:`~wx.FlexGridSizer.GetRowHeights`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.FlexGridSizer(GridSizer)

   **Possible constructors**::

       FlexGridSizer(cols, vgap, hgap)
       
       FlexGridSizer(cols, gap=Size(0,0))
       
       FlexGridSizer(rows, cols, vgap, hgap)
       
       FlexGridSizer(rows, cols, gap)
       
   
   A flex grid sizer is a sizer which lays out its children in a two-
   dimensional table with all table fields in one row having the same
   height and all fields in one column having the same width, but all
   rows or all columns are not necessarily the same height or width as in
   the GridSizer.



   .. method:: __init__(self, *args, **kw)

      :ref:`wx.FlexGridSizer`  constructors.                  

      Please see :meth:`GridSizer.__init__`   documentation. 

                 



      .. versionadded:: 2.9.1 
         (except for the four argument overload)   





      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, cols, vgap, hgap)`
      
      
      
      
      :param `cols`: 
      :type `cols`: int
      :param `vgap`: 
      :type `vgap`: int
      :param `hgap`: 
      :type `hgap`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, cols, gap=Size(0,0))`
      
      
      
      
      :param `cols`: 
      :type `cols`: int
      :param `gap`: 
      :type `gap`: wx.Size
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, rows, cols, vgap, hgap)`
      
      
      
      
      :param `rows`: 
      :type `rows`: int
      :param `cols`: 
      :type `cols`: int
      :param `vgap`: 
      :type `vgap`: int
      :param `hgap`: 
      :type `hgap`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, rows, cols, gap)`
      
      
      
      
      :param `rows`: 
      :type `rows`: int
      :param `cols`: 
      :type `cols`: int
      :param `gap`: 
      :type `gap`: wx.Size
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AddGrowableCol(self, idx, proportion=0)

      Specifies that column `idx`  (starting from zero) should be grown if there is extra space available to the sizer.                  

      The `proportion`  parameter has the same meaning as the stretch factor for the sizers (see :ref:`wx.BoxSizer`) except that if all proportions are 0, then all columns are resized equally (instead of not being resized at all). 

      Notice that the column must not be already growable, if you need to change the proportion you must call :meth:`RemoveGrowableCol`   first and then make it growable (with a different proportion) again. You can use :meth:`IsColGrowable`   to check whether a column is already growable.                  


      :param `idx`: 
      :type `idx`: int
      :param `proportion`: 
      :type `proportion`: int







   .. method:: AddGrowableRow(self, idx, proportion=0)

      Specifies that row idx (starting from zero) should be grown if there is extra space available to the sizer.                  

      This is identical to :meth:`AddGrowableCol`   except that it works with rows and not columns.                  


      :param `idx`: 
      :type `idx`: int
      :param `proportion`: 
      :type `proportion`: int







   .. method:: CalcMin(self)

      This method is abstract and has to be overwritten by any derived class.                  

      Here, the sizer will do the actual calculation of its children's minimal sizes.                  

      :rtype: :ref:`wx.Size`








   .. method:: GetColWidths(self)

      Returns a read-only array containing the widths of the columns in the sizer.                  

      :rtype: `list of integers`








   .. method:: GetFlexibleDirection(self)

      Returns a :ref:`wx.Orientation`  value that specifies whether the sizer flexibly resizes its columns, rows, or both (default).                  

                

      :rtype: `int`







      :returns: 

         One of the following values:

         - ``wx.VERTICAL``: Rows are flexibly sized. 
         - ``wx.HORIZONTAL``: Columns are flexibly sized. 
         - ``wx.BOTH``: Both rows and columns are flexibly sized (this is the default value). 










      .. seealso:: :meth:`SetFlexibleDirection`     








   .. method:: GetNonFlexibleGrowMode(self)

      Returns the value that specifies how the sizer grows in the "non-flexible" direction if there is one.                  

      The behaviour of the elements in the flexible direction (i.e. both rows and columns by default, or rows only if :meth:`GetFlexibleDirection`   is  ``VERTICAL``   or columns only if it is   ``HORIZONTAL`` ) is always governed by their proportion as specified in the call to  :meth:`AddGrowableRow`   or :meth:`AddGrowableCol` . What happens in the other direction depends on the value of returned by this function as described below. 

                

      :rtype: :ref:`wx.FlexSizerGrowMode`







      :returns: 

         One of the following values:

         - ``wx.FLEX_GROWMODE_NONE``: Sizer doesn't grow its elements at all in the non-flexible direction. 
         - ``wx.FLEX_GROWMODE_SPECIFIED``: Sizer honors growable columns/rows set with :meth:`AddGrowableCol`   and :meth:`AddGrowableRow`   in the non-flexible direction as well. In this case equal sizing applies to minimum sizes of columns or rows (this is the default value). 
         - ``wx.FLEX_GROWMODE_ALL``: Sizer equally stretches all columns or rows in the non-flexible direction, independently of the proportions applied in the flexible direction. 










      .. seealso:: :meth:`SetFlexibleDirection` , :meth:`SetNonFlexibleGrowMode`     








   .. method:: GetRowHeights(self)

      Returns a read-only array containing the heights of the rows in the sizer.                  

      :rtype: `list of integers`








   .. method:: IsColGrowable(self, idx)

      Returns ``True`` if column `idx`  is growable.                  

                


      :param `idx`: 
      :type `idx`: int




      :rtype: `bool`







      .. versionadded:: 2.9.0 
     








   .. method:: IsRowGrowable(self, idx)

      Returns ``True`` if row `idx`  is growable.                  

                


      :param `idx`: 
      :type `idx`: int




      :rtype: `bool`







      .. versionadded:: 2.9.0 
     








   .. method:: RemoveGrowableCol(self, idx)

      Specifies that the `idx`  column index is no longer growable.                  


      :param `idx`: 
      :type `idx`: int







   .. method:: RemoveGrowableRow(self, idx)

      Specifies that the `idx`  row index is no longer growable.                  


      :param `idx`: 
      :type `idx`: int







   .. method:: RepositionChildren(self, minSize)

      Method which must be overridden in the derived sizer classes.                  

      The implementation should reposition the children using the current total size available to the sizer ( ``m_size`` ) and the size computed by the last call to  :meth:`CalcMin` . 

      Note that you should never call this method directly, call :meth:`Layout`   instead if you need to manually update the sizer elements positions. This method is only called by wxWidgets itself. 

                


      :param `minSize`: 
      :type `minSize`: wx.Size






      .. versionadded:: 4.1/wxWidgets-3.1.3 ,
          before this version RecalcSizes() method not taking any arguments had to be overridden in the derived classes instead.   








   .. method:: SetFlexibleDirection(self, direction)

      Specifies whether the sizer should flexibly resize its columns, rows, or both.                  

      Argument `direction`  can be  ``VERTICAL`` ,   ``HORIZONTAL``   or   ``BOTH``   (which is the default value). Any other value is ignored. 

      See :meth:`GetFlexibleDirection`   for the explanation of these values. Note that this method does not trigger relayout.                  


      :param `direction`: 
      :type `direction`: int







   .. method:: SetNonFlexibleGrowMode(self, mode)

      Specifies how the sizer should grow in the non-flexible direction if there is one (so :meth:`SetFlexibleDirection`   must have been called previously).                  

      Argument `mode`  can be one of those documented in :meth:`GetNonFlexibleGrowMode` , please see there for their explanation. Note that this method does not trigger relayout.                  


      :param `mode`: 
      :type `mode`: wx.FlexSizerGrowMode







   .. attribute:: ColWidths

      See :meth:`~wx.FlexGridSizer.GetColWidths`


   .. attribute:: FlexibleDirection

      See :meth:`~wx.FlexGridSizer.GetFlexibleDirection` and :meth:`~wx.FlexGridSizer.SetFlexibleDirection`


   .. attribute:: NonFlexibleGrowMode

      See :meth:`~wx.FlexGridSizer.GetNonFlexibleGrowMode` and :meth:`~wx.FlexGridSizer.SetNonFlexibleGrowMode`


   .. attribute:: RowHeights

      See :meth:`~wx.FlexGridSizer.GetRowHeights`

