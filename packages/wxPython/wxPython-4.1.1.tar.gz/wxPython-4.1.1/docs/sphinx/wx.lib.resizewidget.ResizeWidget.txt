.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.resizewidget

.. highlight:: python



.. _wx.lib.resizewidget.ResizeWidget:

==========================================================================================================================================
|phoenix_title|  **wx.lib.resizewidget.ResizeWidget**
==========================================================================================================================================

Reparents a given widget into a specialized panel that provides a resize
handle for the widget.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>ResizeWidget</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.resizewidget.ResizeWidget_inheritance.png" alt="Inheritance diagram of ResizeWidget" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.resizewidget.ResizeWidget.html" title="wx.lib.resizewidget.ResizeWidget" alt="" coords="5,392,245,421"/> <area shape="rect" id="node2" href="wx.Panel.html" title="wx.Panel" alt="" coords="85,315,165,344"/> <area shape="rect" id="node3" href="wx.Window.html" title="wx.Window" alt="" coords="77,237,174,267"/> <area shape="rect" id="node4" href="wx.WindowBase.html" title="wx.WindowBase" alt="" coords="61,160,190,189"/> <area shape="rect" id="node5" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="67,83,184,112"/> <area shape="rect" id="node6" href="wx.Object.html" title="wx.Object" alt="" coords="22,5,109,35"/> <area shape="rect" id="node7" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="133,5,240,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.Panel`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.resizewidget.ResizeWidget.__init__`                               Default class constructor.
:meth:`~wx.lib.resizewidget.ResizeWidget.AddChild`                               Add the child to manage.
:meth:`~wx.lib.resizewidget.ResizeWidget.AdjustToChild`                          Adjust the size to the child.
:meth:`~wx.lib.resizewidget.ResizeWidget.AdjustToSize`                           Adjust to given size.
:meth:`~wx.lib.resizewidget.ResizeWidget.DoGetBestSize`                          Return the best size.
:meth:`~wx.lib.resizewidget.ResizeWidget.EnableResize`                           Enable resizing.
:meth:`~wx.lib.resizewidget.ResizeWidget.GetManagedChild`                        Get the managed child.
:meth:`~wx.lib.resizewidget.ResizeWidget.IsResizeEnabled`                        Is resize enabled?
:meth:`~wx.lib.resizewidget.ResizeWidget.OnLeftDown`                             Handles the ``wx.EVT_LEFT_DOWN`` event for :class:`ResizeWidget`.
:meth:`~wx.lib.resizewidget.ResizeWidget.OnLeftUp`                               Handles the ``wx.EVT_LEFT_UP`` event for :class:`ResizeWidget`.
:meth:`~wx.lib.resizewidget.ResizeWidget.OnMouseLeave`                           Handles the ``wx.EVT_LEAVE_WINDOW`` event for :class:`ResizeWidget`.
:meth:`~wx.lib.resizewidget.ResizeWidget.OnMouseMove`                            Handles the ``wx.EVT_MOTION`` event for :class:`ResizeWidget`.
:meth:`~wx.lib.resizewidget.ResizeWidget.OnPaint`                                Handles the ``wx.EVT_PAINT`` event for :class:`ResizeWidget`.
:meth:`~wx.lib.resizewidget.ResizeWidget.OnSize`                                 Handles the ``wx.EVT_SIZE`` event for :class:`ResizeWidget`.
:meth:`~wx.lib.resizewidget.ResizeWidget.RemoveChild`                            Remove the managed child.
:meth:`~wx.lib.resizewidget.ResizeWidget.SetColors`                              Set the colors of handles.
:meth:`~wx.lib.resizewidget.ResizeWidget.SetDimensions`                          Set the dimensions of handles.
:meth:`~wx.lib.resizewidget.ResizeWidget.SetManagedChild`                        Set a managed child.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.lib.resizewidget.ResizeWidget.ManagedChild`                           Get the managed child.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: ResizeWidget(wx.Panel)

   Reparents a given widget into a specialized panel that provides a resize
   handle for the widget.

   .. method:: __init__(self, \*args, \*\*kw)

      Default class constructor.
      
      :param `args`: arguments will be passed on to the wx.Panel
      :param `kw`: key words will be passed on to the wx.Panel


   .. method:: AddChild(self, child)

      Add the child to manage.
      
      :param `child`: the child to manage.


   .. method:: AdjustToChild(self)

      Adjust the size to the child.


   .. method:: AdjustToSize(self, size)

      Adjust to given size.
      
      :param `size`: size to adjust to.


   .. method:: DoGetBestSize(self)

      Return the best size.


   .. method:: EnableResize(self, enable=True)

      Enable resizing.
      
      :param boolean `enable`: enable or disable resizing.


   .. method:: GetManagedChild(self)

      Get the managed child.


   .. method:: IsResizeEnabled(self)

      Is resize enabled?


   .. method:: OnLeftDown(self, evt)

      Handles the ``wx.EVT_LEFT_DOWN`` event for :class:`ResizeWidget`.
      
      :param `evt`: a :class:`MouseEvent` event to be processed.


   .. method:: OnLeftUp(self, evt)

      Handles the ``wx.EVT_LEFT_UP`` event for :class:`ResizeWidget`.
      
      :param `evt`: a :class:`MouseEvent` event to be processed.


   .. method:: OnMouseLeave(self, evt)

      Handles the ``wx.EVT_LEAVE_WINDOW`` event for :class:`ResizeWidget`.
      
      :param `evt`: a :class:`MouseEvent` event to be processed.


   .. method:: OnMouseMove(self, evt)

      Handles the ``wx.EVT_MOTION`` event for :class:`ResizeWidget`.
      
      :param `evt`: a :class:`MouseEvent` event to be processed.


   .. method:: OnPaint(self, evt)

      Handles the ``wx.EVT_PAINT`` event for :class:`ResizeWidget`.
      
      :param `evt`: a :class:`PaintEvent` event to be processed.


   .. method:: OnSize(self, evt)

      Handles the ``wx.EVT_SIZE`` event for :class:`ResizeWidget`.
      
      :param `evt`: a :class:`wx.SizeEvent` event to be processed.


   .. method:: RemoveChild(self, child)

      Remove the managed child.
      
      :param `child`: child to remove.


   .. method:: SetColors(self, pen=RW_PEN, fill=RW_FILL, fill2=RW_FILL2)

      Set the colors of handles.
      
      :param `pen`: the pen color
      :param `fill`: the fill color
      :param `fill2`: the secondary fill color


   .. method:: SetDimensions(self, thickness=RW_THICKNESS, length=RW_LENGTH)

      Set the dimensions of handles.
      
      :param `thickness`: the thickness of the handles
      :param `length`: the length of the handles


   .. method:: SetManagedChild(self, child)

      Set a managed child.
      
      :param `child`: child to manage


   .. attribute:: ManagedChild

      Get the managed child.


