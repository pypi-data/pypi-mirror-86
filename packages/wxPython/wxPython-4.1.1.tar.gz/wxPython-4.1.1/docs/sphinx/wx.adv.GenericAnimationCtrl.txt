.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.adv.GenericAnimationCtrl:

==========================================================================================================================================
|phoenix_title|  **wx.adv.GenericAnimationCtrl**
==========================================================================================================================================

Generic implementation of :ref:`wx.adv.AnimationCtrl`  interface.          

If the platform supports a native animation control (currently just wxGTK) then this class implements the same interface internally in wxWidgets. One advantage of using this class instead of the native version is that this version of the control is capable of using animations in other formats than the ones supported by the  ``gdk-pixbuf``   library used by wxGTK, which typically only supports   ``ANIMATION_TYPE_GIF`` . 

Note that to use this class you need to explicitly include the generic header after including the main one before using it, i.e. ::

# Including headers is not required for Python.











|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>GenericAnimationCtrl</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.adv.GenericAnimationCtrl_inheritance.png" alt="Inheritance diagram of GenericAnimationCtrl" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.adv.GenericAnimationCtrl.html" title="wx.adv.GenericAnimationCtrl" alt="" coords="5,392,217,421"/> <area shape="rect" id="node2" href="wx.adv.AnimationCtrl.html" title="wx.adv.AnimationCtrl" alt="" coords="30,315,193,344"/> <area shape="rect" id="node3" href="wx.Control.html" title="wx.Control" alt="" coords="65,237,157,267"/> <area shape="rect" id="node4" href="wx.Window.html" title="wx.Window" alt="" coords="63,160,160,189"/> <area shape="rect" id="node5" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="53,83,170,112"/> <area shape="rect" id="node6" href="wx.Object.html" title="wx.Object" alt="" coords="8,5,95,35"/> <area shape="rect" id="node7" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="119,5,226,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.adv.GenericAnimationCtrl.__init__`                                    Initializes the object and calls :meth:`~GenericAnimationCtrl.Create`   with all the parameters.
:meth:`~wx.adv.GenericAnimationCtrl.Create`                                      Creates the control with the given `anim`  animation.
:meth:`~wx.adv.GenericAnimationCtrl.CreateAnimation`                             Create a new animation object compatible with this control.
:meth:`~wx.adv.GenericAnimationCtrl.CreateCompatibleAnimation`                   Create a new animation object compatible with this control.
:meth:`~wx.adv.GenericAnimationCtrl.DrawCurrentFrame`                            Draw the current frame of the animation into given DC.
:meth:`~wx.adv.GenericAnimationCtrl.GetAnimation`                                Returns the animation associated with this control.
:meth:`~wx.adv.GenericAnimationCtrl.GetBackingStore`                             Returns a :ref:`wx.Bitmap`  with the current frame drawn in it.
:meth:`~wx.adv.GenericAnimationCtrl.GetClassDefaultAttributes`                   
:meth:`~wx.adv.GenericAnimationCtrl.GetInactiveBitmap`                           Returns the inactive bitmap shown in this control when the; see :meth:`~GenericAnimationCtrl.SetInactiveBitmap`   for more info.
:meth:`~wx.adv.GenericAnimationCtrl.IsPlaying`                                   Returns ``True`` if the animation is being played.
:meth:`~wx.adv.GenericAnimationCtrl.IsUsingWindowBackgroundColour`               Returns  ``true``   if the window's background colour is being used.
:meth:`~wx.adv.GenericAnimationCtrl.Load`                                        Loads the animation from the given stream and calls :meth:`~GenericAnimationCtrl.SetAnimation` .
:meth:`~wx.adv.GenericAnimationCtrl.LoadFile`                                    Loads the animation from the given file and calls :meth:`~GenericAnimationCtrl.SetAnimation` .
:meth:`~wx.adv.GenericAnimationCtrl.Play`                                        This overload of :meth:`~GenericAnimationCtrl.Play`   lets you specify if the animation must loop or not.
:meth:`~wx.adv.GenericAnimationCtrl.SetAnimation`                                Sets the animation to play in this control.
:meth:`~wx.adv.GenericAnimationCtrl.SetInactiveBitmap`                           Sets the bitmap to show on the control when it's not playing an animation.
:meth:`~wx.adv.GenericAnimationCtrl.SetUseWindowBackgroundColour`                Specify whether the animation's background colour is to be shown (the default), or whether the window background should show through.
:meth:`~wx.adv.GenericAnimationCtrl.Stop`                                        Stops playing the animation.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.adv.GenericAnimationCtrl.Animation`                                   See :meth:`~wx.adv.GenericAnimationCtrl.GetAnimation` and :meth:`~wx.adv.GenericAnimationCtrl.SetAnimation`
:attr:`~wx.adv.GenericAnimationCtrl.BackingStore`                                See :meth:`~wx.adv.GenericAnimationCtrl.GetBackingStore`
:attr:`~wx.adv.GenericAnimationCtrl.InactiveBitmap`                              See :meth:`~wx.adv.GenericAnimationCtrl.GetInactiveBitmap` and :meth:`~wx.adv.GenericAnimationCtrl.SetInactiveBitmap`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.adv.GenericAnimationCtrl(Control)

   **Possible constructors**::

       GenericAnimationCtrl(parent, id=ID_ANY, anim=NullAnimation,
                            pos=DefaultPosition, size=DefaultSize, style=AC_DEFAULT_STYLE,
                            name=AnimationCtrlNameStr)
       
   
   Generic implementation of AnimationCtrl interface.



   .. method:: __init__(self, parent, id=ID_ANY, anim=NullAnimation, pos=DefaultPosition, size=DefaultSize, style=AC_DEFAULT_STYLE, name=AnimationCtrlNameStr)

      Initializes the object and calls :meth:`Create`   with all the parameters.                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `anim`: 
      :type `anim`: wx.adv.Animation
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string







   .. method:: Create(self, parent, id=ID_ANY, anim=NullAnimation, pos=DefaultPosition, size=DefaultSize, style=AC_DEFAULT_STYLE, name=AnimationCtrlNameStr)

      Creates the control with the given `anim`  animation.                  

      After control creation you must explicitly call :meth:`Play`   to start to play the animation. Until that function won't be called, the first frame of the animation is displayed. 




      :param `parent`: Parent window, must be non-NULL.   
      :type `parent`: wx.Window
      :param `id`: The identifier for the control.   
      :type `id`: wx.WindowID
      :param `anim`: The initial animation shown in the control.   
      :type `anim`: wx.adv.Animation
      :param `pos`: Initial position.   
      :type `pos`: wx.Point
      :param `size`: Initial size.   
      :type `size`: wx.Size
      :param `style`: The window style, see ``AC_`` flags.   
      :type `style`: long
      :param `name`: Control name.  
      :type `name`: string


















      :rtype: `bool`



                  



      :returns: 

         ``True`` if the control was successfully created or ``False`` if creation failed.   








   .. method:: CreateAnimation(self)

      Create a new animation object compatible with this control.                  

      A :ref:`wx.adv.Animation`  object created using this function is always compatible with controls of this type, see :meth:`wx.adv.Animation.IsCompatibleWith` . 

                

      :rtype: :ref:`wx.adv.Animation`







      .. versionadded:: 4.1/wxWidgets-3.1.4  
     







      .. seealso:: :meth:`CreateCompatibleAnimation`   








   .. staticmethod:: CreateCompatibleAnimation()

      Create a new animation object compatible with this control.                  

      This method does the same thing as :meth:`CreateAnimation`   but is static, i.e. can be called without creating any :ref:`wx.adv.AnimationCtrl`  objects. 

                

      :rtype: :ref:`wx.adv.Animation`







      .. versionadded:: 4.1/wxWidgets-3.1.4  
     








   .. method:: DrawCurrentFrame(self, dc)

      Draw the current frame of the animation into given DC.                  

      This is fast as current frame is always cached.                  


      :param `dc`: 
      :type `dc`: wx.DC







   .. method:: GetAnimation(self)

      Returns the animation associated with this control.                  

      :rtype: :ref:`wx.adv.Animation`








   .. method:: GetBackingStore(self)

      Returns a :ref:`wx.Bitmap`  with the current frame drawn in it.                  

      :rtype: :ref:`Bitmap`








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`VisualAttributes`








   .. method:: GetInactiveBitmap(self)

      Returns the inactive bitmap shown in this control when the; see :meth:`SetInactiveBitmap`   for more info.                  

      :rtype: :ref:`Bitmap`








   .. method:: IsPlaying(self)

      Returns ``True`` if the animation is being played.                  

      :rtype: `bool`








   .. method:: IsUsingWindowBackgroundColour(self)

      Returns  ``true``   if the window's background colour is being used.                   

      :rtype: `bool`








   .. method:: Load(self, file, animType=ANIMATION_TYPE_ANY)

      Loads the animation from the given stream and calls :meth:`SetAnimation` .                  

      See :meth:`wx.adv.Animation.Load`   for more info.                  


      :param `file`: 
      :type `file`: wx.InputStream
      :param `animType`: 
      :type `animType`: wx.adv.AnimationType




      :rtype: `bool`








   .. method:: LoadFile(self, file, animType=ANIMATION_TYPE_ANY)

      Loads the animation from the given file and calls :meth:`SetAnimation` .                  

      See :meth:`wx.adv.Animation.LoadFile`   for more info.                  


      :param `file`: 
      :type `file`: string
      :param `animType`: 
      :type `animType`: wx.adv.AnimationType




      :rtype: `bool`








   .. method:: Play(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **Play** `(self, looped)`
      
      This overload of :meth:`Play`   lets you specify if the animation must loop or not.                  
      
      
      :param `looped`: 
      :type `looped`: bool
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **Play** `(self)`
      
      Starts playing the animation.                  
      
      The animation is always played in loop mode (unless the last frame of the animation has an infinite delay time) and always start from the first frame even if you :meth:`stopped`   it while some other frame was displayed.                  
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetAnimation(self, anim)

      Sets the animation to play in this control.                  

      If the previous animation is being played, it's :meth:`Stop`   stopped. Until :meth:`Play`   isn't called, a static image, the first frame of the given animation or the background colour will be shown (see :meth:`SetInactiveBitmap`   for more info).                  


      :param `anim`: 
      :type `anim`: wx.adv.Animation







   .. method:: SetInactiveBitmap(self, bmp)

      Sets the bitmap to show on the control when it's not playing an animation.                  

      If you set as inactive bitmap :ref:`wx.NullBitmap`  (which is the default), then the first frame of the animation is instead shown when the control is inactive; in this case, if there's no valid animation associated with the control (see :meth:`SetAnimation` ), then the background colour of the window is shown. 

      If the control is not playing the animation, the given bitmap will be immediately shown, otherwise it will be shown as soon as :meth:`Stop`   is called. 

      Note that the inactive bitmap, if smaller than the control's size, will be centered in the control; if bigger, it will be stretched to fit it.                  


      :param `bmp`: 
      :type `bmp`: wx.Bitmap







   .. method:: SetUseWindowBackgroundColour(self, useWinBackground=True)

      Specify whether the animation's background colour is to be shown (the default), or whether the window background should show through.                  


      :param `useWinBackground`: 
      :type `useWinBackground`: bool







   .. method:: Stop(self)

      Stops playing the animation.                  

      The control will show the first frame of the animation, a custom static image or the window's background colour as specified by the last :meth:`SetInactiveBitmap`   call.                   





   .. attribute:: Animation

      See :meth:`~wx.adv.GenericAnimationCtrl.GetAnimation` and :meth:`~wx.adv.GenericAnimationCtrl.SetAnimation`


   .. attribute:: BackingStore

      See :meth:`~wx.adv.GenericAnimationCtrl.GetBackingStore`


   .. attribute:: InactiveBitmap

      See :meth:`~wx.adv.GenericAnimationCtrl.GetInactiveBitmap` and :meth:`~wx.adv.GenericAnimationCtrl.SetInactiveBitmap`

