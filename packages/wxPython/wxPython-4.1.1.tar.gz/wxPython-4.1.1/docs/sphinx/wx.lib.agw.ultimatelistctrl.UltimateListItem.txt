.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.ultimatelistctrl

.. highlight:: python



.. _wx.lib.agw.ultimatelistctrl.UltimateListItem:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.ultimatelistctrl.UltimateListItem**
==========================================================================================================================================

This class stores information about a :class:`UltimateListCtrl` item or column. 



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>UltimateListItem</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.ultimatelistctrl.UltimateListItem_inheritance.png" alt="Inheritance diagram of UltimateListItem" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.ultimatelistctrl.UltimateListItem.html" title="wx.lib.agw.ultimatelistctrl.UltimateListItem" alt="" coords="5,83,311,112"/> <area shape="rect" id="node2" href="wx.Object.html" title="wx.Object" alt="" coords="115,5,201,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.Object`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.__init__`                   Default class constructor.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.Attributes`                 Returns the associated attributes if they exist, or create a new :class:`UltimateListItemAttr`
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.Check`                      Checks/unchecks an item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.CheckFooter`                Checks/unchecks a footer item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.Clear`                      Resets the item state to the default.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.ClearAttributes`            Deletes the item attributes if they have been stored.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.DeleteWindow`               Deletes the window associated to the item (if any).
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.Enable`                     Enables or disables the item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetAlign`                   Returns the alignment for the item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetAttributes`              Returns the associated :class:`UltimateListItemAttr` attributes.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetBackgroundColour`        Returns the background colour.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetColumn`                  Returns the zero-based column.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetCustomRenderer`          Returns the custom renderer associated with this item (if any).
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetData`                    Returns client data associated with the control.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetFont`                    Returns the item font.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetFooterAlign`             Returns the alignment for the footer item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetFooterBackgroundColour`  Returns the footer item background colour.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetFooterFont`              Returns the footer item font.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetFooterFormat`            Returns the footer item format.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetFooterImage`             Returns the zero-based index of the image associated with the footer item into
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetFooterKind`              Returns the footer item kind.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetFooterText`              Returns the footer text.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetFooterTextColour`        Returns the footer item text colour.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetFormat`                  Returns the header item format.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetId`                      Returns the zero-based item position.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetImage`                   Returns a Python list with the zero-based indexes of the images associated
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetKind`                    Returns the item kind.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetMask`                    Returns a bit mask indicating which fields of the structure are valid.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetOverFlow`                Returns if the item is in the overflow state.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetPyData`                  Returns data for the item, which can be any Python object.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetState`                   Returns a bit field representing the state of the item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetText`                    Returns the label/header text.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetTextColour`              Returns the text colour.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetToolTip`                 Returns the label/header tooltip.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetVisited`                 Returns whether an hypertext item was visited or not.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetWidth`                   Returns the column width.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetWindow`                  Returns the window associated to the item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetWindowEnabled`           Returns whether the associated window is enabled or not.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.GetWindowSize`              Returns the associated window size.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.HasAttributes`              Returns ``True`` if the item has attributes associated with it.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.Init`                       Initializes an empty :class:`UltimateListItem`.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.IsChecked`                  Returns whether the item is checked or not.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.IsEnabled`                  Returns ``True`` if the item is enabled.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.IsFooterChecked`            Returns whether the footer item is checked or not.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.IsHyperText`                Returns whether the item is hypetext or not.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.IsShown`                    Returns ``True`` if the item is shown, or ``False`` if it is hidden.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.OnSetFocus`                 Handles the ``wx.EVT_SET_FOCUS`` event for the window associated to an item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetAlign`                   Sets the alignment for the item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetBackgroundColour`        Sets the background colour for the item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetColumn`                  Sets the zero-based column.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetCustomRenderer`          Associate a custom renderer to this item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetData`                    Sets client data for the item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetFont`                    Sets the font for the item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetFooterAlign`             Sets the alignment for the footer item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetFooterBackgroundColour`  Sets the background colour for the footer item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetFooterFont`              Sets the font for the footer item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetFooterFormat`            Sets the footer item format.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetFooterImage`             Sets the zero-based index of the image associated with the footer item into the
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetFooterKind`              Sets the footer item kind.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetFooterText`              Sets the text label for the footer item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetFooterTextColour`        Sets the text colour for the footer item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetHyperText`               Sets whether the item is hypertext or not.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetId`                      Sets the zero-based item position.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetImage`                   Sets the zero-based indexes of the images associated with the item into the
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetKind`                    Sets the item kind.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetMask`                    Sets the mask of valid fields.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetOverFlow`                Sets the item in the overflow/non overflow state.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetPyData`                  Sets data for the item, which can be any Python object.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetShown`                   Sets an item as shown/hidden.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetState`                   Sets the item state flags.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetStateMask`               Sets the bitmask that is used to determine which of the state flags are
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetText`                    Sets the text label for the item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetTextColour`              Sets the text colour for the item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetToolTip`                 Sets the tooltip text for the item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetVisited`                 Sets whether an hypertext item was visited or not.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetWidth`                   Sets the column width.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetWindow`                  Sets the window associated to the item.
:meth:`~wx.lib.agw.ultimatelistctrl.UltimateListItem.SetWindowEnabled`           Sets whether the associated window is enabled or not.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: UltimateListItem(wx.Object)

   This class stores information about a :class:`UltimateListCtrl` item or column. 

   .. method:: __init__(self, item=None)

      Default class constructor.
      
      :param `item`: if not ``None``, another instance of :class:`UltimateListItem`.


   .. method:: Attributes(self)

      Returns the associated attributes if they exist, or create a new :class:`UltimateListItemAttr`
      structure and associate it with this item.


   .. method:: Check(self, checked=True)

      Checks/unchecks an item.
      
      :param `checked`: ``True`` to check an item, ``False`` to uncheck it.
      
      :note: This method is meaningful only for check and radio items.


   .. method:: CheckFooter(self, checked=True)

      Checks/unchecks a footer item.
      
      :param `checked`: ``True`` to check an item, ``False`` to uncheck it.
      
      :note: This method is meaningful only for check and radio footer items.


   .. method:: Clear(self)

      Resets the item state to the default. 


   .. method:: ClearAttributes(self)

      Deletes the item attributes if they have been stored. 


   .. method:: DeleteWindow(self)

      Deletes the window associated to the item (if any). 


   .. method:: Enable(self, enable=True)

      Enables or disables the item.
      
      :param `enable`: ``True`` to enable the item, ``False`` to disable it.


   .. method:: GetAlign(self)

      Returns the alignment for the item.
      
      :see: :meth:`~UltimateListItem.SetAlign` for a list of valid alignment bits.


   .. method:: GetAttributes(self)

      Returns the associated :class:`UltimateListItemAttr` attributes. 


   .. method:: GetBackgroundColour(self)

      Returns the background colour. 


   .. method:: GetColumn(self)

      Returns the zero-based column.
      
      :note: This method is meaningful only in report mode.


   .. method:: GetCustomRenderer(self)

      Returns the custom renderer associated with this item (if any). 


   .. method:: GetData(self)

      Returns client data associated with the control.
      
      :note: Please note that client data is associated with the item and not
       with subitems.


   .. method:: GetFont(self)

      Returns the item font. 


   .. method:: GetFooterAlign(self)

      Returns the alignment for the footer item.
      
      :see: :meth:`~UltimateListItem.SetAlign` for a list of valid alignment flags.


   .. method:: GetFooterBackgroundColour(self)

      Returns the footer item background colour. 


   .. method:: GetFooterFont(self)

      Returns the footer item font. 


   .. method:: GetFooterFormat(self)

      Returns the footer item format. 


   .. method:: GetFooterImage(self)

      Returns the zero-based index of the image associated with the footer item into
      the image list.


   .. method:: GetFooterKind(self)

      Returns the footer item kind.
      
      :see: :meth:`~UltimateListItem.SetKind` for a list of valid items kind.


   .. method:: GetFooterText(self)

      Returns the footer text. 


   .. method:: GetFooterTextColour(self)

      Returns the footer item text colour. 


   .. method:: GetFormat(self)

      Returns the header item format. 


   .. method:: GetId(self)

      Returns the zero-based item position. 


   .. method:: GetImage(self)

      Returns a Python list with the zero-based indexes of the images associated
      with the item into the image list.


   .. method:: GetKind(self)

      Returns the item kind.
      
      :see: :meth:`~UltimateListItem.SetKind` for a valid list of item's kind.


   .. method:: GetMask(self)

      Returns a bit mask indicating which fields of the structure are valid.
      
      :see: :meth:`~UltimateListItem.SetMask` for a list of valid bit masks.


   .. method:: GetOverFlow(self)

      Returns if the item is in the overflow state.
      
      An item/subitem may overwrite neighboring items/subitems if its text would
      not normally fit in the space allotted to it.


   .. method:: GetPyData(self)

      Returns data for the item, which can be any Python object.
      
      :note: Please note that Python data is associated with the item and not
       with subitems.


   .. method:: GetState(self)

      Returns a bit field representing the state of the item.
      
      :see: :meth:`~UltimateListItem.SetState` for a list of valid item states.


   .. method:: GetText(self)

      Returns the label/header text. 


   .. method:: GetTextColour(self)

      Returns the text colour. 


   .. method:: GetToolTip(self)

      Returns the label/header tooltip. 


   .. method:: GetVisited(self)

      Returns whether an hypertext item was visited or not. 


   .. method:: GetWidth(self)

      Returns the column width.
      
      :note: This method is meaningful only for column headers in report mode.


   .. method:: GetWindow(self)

      Returns the window associated to the item. 


   .. method:: GetWindowEnabled(self)

      Returns whether the associated window is enabled or not. 


   .. method:: GetWindowSize(self)

      Returns the associated window size. 


   .. method:: HasAttributes(self)

      Returns ``True`` if the item has attributes associated with it. 


   .. method:: Init(self)

      Initializes an empty :class:`UltimateListItem`. 


   .. method:: IsChecked(self)

      Returns whether the item is checked or not. 


   .. method:: IsEnabled(self)

      Returns ``True`` if the item is enabled. 


   .. method:: IsFooterChecked(self)

      Returns whether the footer item is checked or not. 


   .. method:: IsHyperText(self)

      Returns whether the item is hypetext or not. 


   .. method:: IsShown(self)

      Returns ``True`` if the item is shown, or ``False`` if it is hidden. 


   .. method:: OnSetFocus(self, event)

      Handles the ``wx.EVT_SET_FOCUS`` event for the window associated to an item.
      
      :param `event`: a :class:`FocusEvent` event to be processed.


   .. method:: SetAlign(self, align)

      Sets the alignment for the item.
      
      :param `align`: one of the following bits:
      
       ============================ ========= ==============================
       Alignment Bits               Hex Value Description
       ============================ ========= ==============================
       ``ULC_FORMAT_LEFT``                0x0 The item is left-aligned
       ``ULC_FORMAT_RIGHT``               0x1 The item is right-aligned
       ``ULC_FORMAT_CENTRE``              0x2 The item is centre-aligned
       ``ULC_FORMAT_CENTER``              0x2 The item is center-aligned
       ============================ ========= ==============================


   .. method:: SetBackgroundColour(self, colBack)

      Sets the background colour for the item.
      
      :param `colBack`: a valid :class:`wx.Colour` object.


   .. method:: SetColumn(self, col)

      Sets the zero-based column.
      
      :param `col`: the zero-based column.
      
      :note: This method is neaningful only in report mode.


   .. method:: SetCustomRenderer(self, renderer)

      Associate a custom renderer to this item.
      
      :param `renderer`: a class able to correctly render the item.
      
      :note: the renderer class **must** implement the methods `DrawSubItem`,
       `GetLineHeight` and `GetSubItemWidth`.


   .. method:: SetData(self, data)

      Sets client data for the item.
      
      :param `data`: the client data associated to the item.
      
      :note: Please note that client data is associated with the item and not
       with subitems.


   .. method:: SetFont(self, font)

      Sets the font for the item.
      
      :param `font`: a valid :class:`wx.Font` object.


   .. method:: SetFooterAlign(self, align)

      Sets the alignment for the footer item.
      
      :see: :meth:`~UltimateListItem.SetAlign` for a list of valid alignment flags.


   .. method:: SetFooterBackgroundColour(self, colBack)

      Sets the background colour for the footer item.
      
      :param `colBack`: a valid :class:`wx.Colour` object.


   .. method:: SetFooterFont(self, font)

      Sets the font for the footer item.
      
      :param `font`: a valid :class:`wx.Font` object.


   .. method:: SetFooterFormat(self, format)

      Sets the footer item format.
      
      :param `format`: the footer item format.


   .. method:: SetFooterImage(self, image)

      Sets the zero-based index of the image associated with the footer item into the
      image list.
      
      :param `image`: the zero-based index of the image associated with the footer item
       into the image list.


   .. method:: SetFooterKind(self, kind)

      Sets the footer item kind.
      
      :see: :meth:`~UltimateListItem.SetKind` for a list of valid items kind.


   .. method:: SetFooterText(self, text)

      Sets the text label for the footer item.
      
      :param `text`: the text label for the footer item.


   .. method:: SetFooterTextColour(self, colText)

      Sets the text colour for the footer item.
      
      :param `colText`: a valid :class:`wx.Colour` object.


   .. method:: SetHyperText(self, hyper=True)

      Sets whether the item is hypertext or not.
      
      :param `hyper`: ``True`` to set hypertext behaviour, ``False`` otherwise.


   .. method:: SetId(self, id)

      Sets the zero-based item position.
      
      :param `id`: the zero-based item position.


   .. method:: SetImage(self, image)

      Sets the zero-based indexes of the images associated with the item into the
      image list.
      
      :param `image`: a Python list with the zero-based indexes of the images
       associated with the item into the image list.


   .. method:: SetKind(self, kind)

      Sets the item kind.
      
      :param `kind`: may be one of the following integers:
      
       =============== ==========================
       Item Kind       Description
       =============== ==========================
              0        A normal item
              1        A checkbox-like item
              2        A radiobutton-type item
       =============== ==========================


   .. method:: SetMask(self, mask)

      Sets the mask of valid fields.
      
      :param `mask`: any combination of the following bits:
      
       ============================ ========= ==============================
       Mask Bits                    Hex Value Description
       ============================ ========= ==============================
       ``ULC_MASK_STATE``                 0x1 :meth:`~UltimateListItem.GetState` is valid
       ``ULC_MASK_TEXT``                  0x2 :meth:`~UltimateListItem.GetText` is valid
       ``ULC_MASK_IMAGE``                 0x4 :meth:`~UltimateListItem.GetImage` is valid
       ``ULC_MASK_DATA``                  0x8 :meth:`~UltimateListItem.GetData` is valid
       ``ULC_MASK_WIDTH``                0x20 :meth:`~UltimateListItem.GetWidth` is valid
       ``ULC_MASK_FORMAT``               0x40 :meth:`~UltimateListItem.GetFormat` is valid
       ``ULC_MASK_FONTCOLOUR``           0x80 :meth:`~UltimateListItem.GetTextColour` is valid
       ``ULC_MASK_FONT``                0x100 :meth:`~UltimateListItem.GetFont` is valid
       ``ULC_MASK_BACKCOLOUR``          0x200 :meth:`~UltimateListItem.GetBackgroundColour` is valid
       ``ULC_MASK_KIND``                0x400 :meth:`~UltimateListItem.GetKind` is valid
       ``ULC_MASK_ENABLE``              0x800 :meth:`~UltimateListItem.IsEnabled` is valid
       ``ULC_MASK_CHECK``              0x1000 :meth:`~UltimateListItem.IsChecked` is valid
       ``ULC_MASK_HYPERTEXT``          0x2000 :meth:`~UltimateListItem.IsHyperText` is valid
       ``ULC_MASK_WINDOW``             0x4000 :meth:`~UltimateListItem.GetWindow` is valid
       ``ULC_MASK_PYDATA``             0x8000 :meth:`~UltimateListItem.GetPyData` is valid
       ``ULC_MASK_SHOWN``             0x10000 :meth:`~UltimateListItem.IsShown` is valid
       ``ULC_MASK_RENDERER``          0x20000 :meth:`~UltimateListItem.GetCustomRenderer` is valid
       ``ULC_MASK_OVERFLOW``          0x40000 :meth:`~UltimateListItem.GetOverFlow` is valid
       ``ULC_MASK_FOOTER_TEXT``       0x80000 :meth:`~UltimateListItem.GetFooterText` is valid
       ``ULC_MASK_FOOTER_IMAGE``     0x100000 :meth:`~UltimateListItem.GetFooterImage` is valid
       ``ULC_MASK_FOOTER_FORMAT``    0x200000 :meth:`~UltimateListItem.GetFooterFormat` is valid
       ``ULC_MASK_FOOTER_FONT``      0x400000 :meth:`~UltimateListItem.GetFooterFont` is valid
       ``ULC_MASK_FOOTER_CHECK``     0x800000 :meth:`~UltimateListItem.IsFooterChecked` is valid
       ``ULC_MASK_FOOTER_KIND``     0x1000000 :meth:`~UltimateListItem.GetFooterKind` is valid
       ============================ ========= ==============================


   .. method:: SetOverFlow(self, over=True)

      Sets the item in the overflow/non overflow state.
      
      An item/subitem may overwrite neighboring items/subitems if its text would
      not normally fit in the space allotted to it.
      
      :param `over`: ``True`` to set the item in a overflow state, ``False`` otherwise.


   .. method:: SetPyData(self, pyData)

      Sets data for the item, which can be any Python object.
      
      :param `data`: any Python object associated to the item.
      
      :note: Please note that Python data is associated with the item and not
       with subitems.


   .. method:: SetShown(self, shown=True)

      Sets an item as shown/hidden.
      
      :param `shown`: ``True`` to show the item, ``False`` to hide it.


   .. method:: SetState(self, state)

      Sets the item state flags.
      
      :param `state`: any combination of the following bits:
      
       ============================ ========= ==============================
       State Bits                   Hex Value Description
       ============================ ========= ==============================
       ``ULC_STATE_DONTCARE``             0x0 Don't care what the state is
       ``ULC_STATE_DROPHILITED``          0x1 The item is highlighted to receive a drop event
       ``ULC_STATE_FOCUSED``              0x2 The item has the focus
       ``ULC_STATE_SELECTED``             0x4 The item is selected
       ``ULC_STATE_CUT``                  0x8 The item is in the cut state
       ``ULC_STATE_DISABLED``            0x10 The item is disabled
       ``ULC_STATE_FILTERED``            0x20 The item has been filtered
       ``ULC_STATE_INUSE``               0x40 The item is in use
       ``ULC_STATE_PICKED``              0x80 The item has been picked
       ``ULC_STATE_SOURCE``             0x100 The item is a drag and drop source
       ============================ ========= ==============================
      
      :note: The valid state flags are influenced by the value of the state mask.
      
      :see: :meth:`~UltimateListItem.SetStateMask`


   .. method:: SetStateMask(self, stateMask)

      Sets the bitmask that is used to determine which of the state flags are
      to be set.
      
      :param `stateMask`: the state bitmask.
      
      :see: :meth:`~UltimateListItem.SetState` for a list of valid state bits.


   .. method:: SetText(self, text)

      Sets the text label for the item.
      
      :param `text`: the text label for the item.


   .. method:: SetTextColour(self, colText)

      Sets the text colour for the item.
      
      :param `colText`: a valid :class:`wx.Colour` object.


   .. method:: SetToolTip(self, text)

      Sets the tooltip text for the item.
      
      :param `text`: the tooltip text for the item.


   .. method:: SetVisited(self, visited=True)

      Sets whether an hypertext item was visited or not.
      
      :param `visited`: ``True`` to set a hypertext item as visited, ``False`` otherwise.


   .. method:: SetWidth(self, width)

      Sets the column width.
      
      :param `width`: the column width.
      
      :note: This method is meaningful only for column headers in report mode.


   .. method:: SetWindow(self, wnd, expand=False)

      Sets the window associated to the item.
      
      :param `wnd`: a non-toplevel window to be displayed next to the item;
      :param `expand`: ``True`` to expand the column where the item/subitem lives,
       so that the window will be fully visible.


   .. method:: SetWindowEnabled(self, enable=True)

      Sets whether the associated window is enabled or not.
      
      :param `enable`: ``True`` to enable the associated window, ``False`` to disable it.


