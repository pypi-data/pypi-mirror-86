.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.editor.editor

.. highlight:: python



.. _wx.lib.editor.editor.Editor:

==========================================================================================================================================
|phoenix_title|  **wx.lib.editor.editor.Editor**
==========================================================================================================================================

ScrolledWindow()
ScrolledWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=ScrolledWindowStyle, name=PanelNameStr)

Scrolled window derived from wxPanel.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Editor</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.editor.editor.Editor_inheritance.png" alt="Inheritance diagram of Editor" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.editor.editor.Editor.html" title="wx.lib.editor.editor.Editor" alt="" coords="16,469,201,499"/> <area shape="rect" id="node2" href="wx.ScrolledWindow.html" title="wx.ScrolledWindow" alt="" coords="34,392,183,421"/> <area shape="rect" id="node4" href="wx.Window.html" title="wx.Window" alt="" coords="60,237,157,267"/> <area shape="rect" id="node5" href="wx.WindowBase.html" title="wx.WindowBase" alt="" coords="44,160,173,189"/> <area shape="rect" id="node6" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node7" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node8" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.ScrolledWindow`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.editor.editor.Editor.__init__`                                    Initialize self.  See help(type(self)) for accurate signature.
:meth:`~wx.lib.editor.editor.Editor.AboveScreen`                                 
:meth:`~wx.lib.editor.editor.Editor.AdjustScrollbars`                            AdjustScrollbars()
:meth:`~wx.lib.editor.editor.Editor.AltKey`                                      
:meth:`~wx.lib.editor.editor.Editor.BackSpace`                                   
:meth:`~wx.lib.editor.editor.Editor.BelowScreen`                                 
:meth:`~wx.lib.editor.editor.Editor.BreakLine`                                   
:meth:`~wx.lib.editor.editor.Editor.BufferWasTouched`                            
:meth:`~wx.lib.editor.editor.Editor.CalcMaxLineLen`                              get length of longest line on screen
:meth:`~wx.lib.editor.editor.Editor.CanScroll`                                   CanScroll(orient) -> bool
:meth:`~wx.lib.editor.editor.Editor.cHoriz`                                      
:meth:`~wx.lib.editor.editor.Editor.ControlKey`                                  
:meth:`~wx.lib.editor.editor.Editor.CopySelection`                               
:meth:`~wx.lib.editor.editor.Editor.CopyToClipboard`                             
:meth:`~wx.lib.editor.editor.Editor.CurrentLineLength`                           
:meth:`~wx.lib.editor.editor.Editor.cVert`                                       
:meth:`~wx.lib.editor.editor.Editor.Delete`                                      
:meth:`~wx.lib.editor.editor.Editor.DeleteChar`                                  
:meth:`~wx.lib.editor.editor.Editor.Dispatch`                                    
:meth:`~wx.lib.editor.editor.Editor.Draw`                                        
:meth:`~wx.lib.editor.editor.Editor.DrawCursor`                                  
:meth:`~wx.lib.editor.editor.Editor.DrawEditText`                                
:meth:`~wx.lib.editor.editor.Editor.DrawEofMarker`                               
:meth:`~wx.lib.editor.editor.Editor.DrawLine`                                    
:meth:`~wx.lib.editor.editor.Editor.DrawSimpleCursor`                            
:meth:`~wx.lib.editor.editor.Editor.Escape`                                      
:meth:`~wx.lib.editor.editor.Editor.FindSelection`                               
:meth:`~wx.lib.editor.editor.Editor.GetText`                                     
:meth:`~wx.lib.editor.editor.Editor.GetTextLine`                                 
:meth:`~wx.lib.editor.editor.Editor.HandleAboveScreen`                           
:meth:`~wx.lib.editor.editor.Editor.HandleBelowScreen`                           
:meth:`~wx.lib.editor.editor.Editor.HandleLeftOfScreen`                          
:meth:`~wx.lib.editor.editor.Editor.HandleRightOfScreen`                         
:meth:`~wx.lib.editor.editor.Editor.HorizBoundaries`                             
:meth:`~wx.lib.editor.editor.Editor.HorizScroll`                                 
:meth:`~wx.lib.editor.editor.Editor.InitCoords`                                  
:meth:`~wx.lib.editor.editor.Editor.InitDoubleBuffering`                         
:meth:`~wx.lib.editor.editor.Editor.InitFonts`                                   
:meth:`~wx.lib.editor.editor.Editor.InitScrolling`                               
:meth:`~wx.lib.editor.editor.Editor.InsertChar`                                  
:meth:`~wx.lib.editor.editor.Editor.IsLine`                                      
:meth:`~wx.lib.editor.editor.Editor.JoinLines`                                   
:meth:`~wx.lib.editor.editor.Editor.KeepCursorOnScreen`                          
:meth:`~wx.lib.editor.editor.Editor.LeftOfScreen`                                
:meth:`~wx.lib.editor.editor.Editor.LinesInFile`                                 
:meth:`~wx.lib.editor.editor.Editor.LoadImages`                                  
:meth:`~wx.lib.editor.editor.Editor.MapEvents`                                   
:meth:`~wx.lib.editor.editor.Editor.ModifierKey`                                 
:meth:`~wx.lib.editor.editor.Editor.MouseToCol`                                  
:meth:`~wx.lib.editor.editor.Editor.MouseToCursor`                               
:meth:`~wx.lib.editor.editor.Editor.MouseToRow`                                  
:meth:`~wx.lib.editor.editor.Editor.Move`                                        Move(x, y, flags=SIZE_USE_EXISTING)
:meth:`~wx.lib.editor.editor.Editor.MoveDown`                                    
:meth:`~wx.lib.editor.editor.Editor.MoveEnd`                                     
:meth:`~wx.lib.editor.editor.Editor.MoveEndOfFile`                               
:meth:`~wx.lib.editor.editor.Editor.MoveHome`                                    
:meth:`~wx.lib.editor.editor.Editor.MoveLeft`                                    
:meth:`~wx.lib.editor.editor.Editor.MovePageDown`                                
:meth:`~wx.lib.editor.editor.Editor.MovePageUp`                                  
:meth:`~wx.lib.editor.editor.Editor.MoveRight`                                   
:meth:`~wx.lib.editor.editor.Editor.MoveSpecialControlKey`                       
:meth:`~wx.lib.editor.editor.Editor.MoveSpecialKey`                              
:meth:`~wx.lib.editor.editor.Editor.MoveStartOfFile`                             
:meth:`~wx.lib.editor.editor.Editor.MoveUp`                                      
:meth:`~wx.lib.editor.editor.Editor.MultipleLineCopy`                            
:meth:`~wx.lib.editor.editor.Editor.MultipleLineDelete`                          
:meth:`~wx.lib.editor.editor.Editor.MultipleLinePaste`                           
:meth:`~wx.lib.editor.editor.Editor.NiceFontForPlatform`                         
:meth:`~wx.lib.editor.editor.Editor.NormalChar`                                  
:meth:`~wx.lib.editor.editor.Editor.NormalizedSelect`                            
:meth:`~wx.lib.editor.editor.Editor.OnChar`                                      
:meth:`~wx.lib.editor.editor.Editor.OnClick`                                     
:meth:`~wx.lib.editor.editor.Editor.OnCopySelection`                             
:meth:`~wx.lib.editor.editor.Editor.OnCutSelection`                              
:meth:`~wx.lib.editor.editor.Editor.OnDeleteSelection`                           
:meth:`~wx.lib.editor.editor.Editor.OnDestroy`                                   
:meth:`~wx.lib.editor.editor.Editor.OnEraseBackground`                           
:meth:`~wx.lib.editor.editor.Editor.OnLeftDown`                                  
:meth:`~wx.lib.editor.editor.Editor.OnLeftUp`                                    
:meth:`~wx.lib.editor.editor.Editor.OnMotion`                                    
:meth:`~wx.lib.editor.editor.Editor.OnPaint`                                     
:meth:`~wx.lib.editor.editor.Editor.OnPaste`                                     
:meth:`~wx.lib.editor.editor.Editor.OnScroll`                                    
:meth:`~wx.lib.editor.editor.Editor.OnSize`                                      
:meth:`~wx.lib.editor.editor.Editor.OnTimer`                                     
:meth:`~wx.lib.editor.editor.Editor.RightOfScreen`                               
:meth:`~wx.lib.editor.editor.Editor.SelectNotify`                                
:meth:`~wx.lib.editor.editor.Editor.SelectOff`                                   
:meth:`~wx.lib.editor.editor.Editor.SelectUpdate`                                
:meth:`~wx.lib.editor.editor.Editor.SetAltFuncs`                                 
:meth:`~wx.lib.editor.editor.Editor.SetCharDimensions`                           
:meth:`~wx.lib.editor.editor.Editor.SetColors`                                   
:meth:`~wx.lib.editor.editor.Editor.SetControlFuncs`                             
:meth:`~wx.lib.editor.editor.Editor.SetMoveSpecialControlFuncs`                  
:meth:`~wx.lib.editor.editor.Editor.SetMoveSpecialFuncs`                         
:meth:`~wx.lib.editor.editor.Editor.SetScrollTimer`                              
:meth:`~wx.lib.editor.editor.Editor.SetShiftFuncs`                               
:meth:`~wx.lib.editor.editor.Editor.SetSpecialControlFuncs`                      
:meth:`~wx.lib.editor.editor.Editor.SetSpecialFuncs`                             
:meth:`~wx.lib.editor.editor.Editor.SetText`                                     
:meth:`~wx.lib.editor.editor.Editor.SetTextLine`                                 
:meth:`~wx.lib.editor.editor.Editor.ShiftKey`                                    
:meth:`~wx.lib.editor.editor.Editor.SingleLineCopy`                              
:meth:`~wx.lib.editor.editor.Editor.SingleLineDelete`                            
:meth:`~wx.lib.editor.editor.Editor.SingleLineInsert`                            
:meth:`~wx.lib.editor.editor.Editor.SpecialControlKey`                           
:meth:`~wx.lib.editor.editor.Editor.TabKey`                                      
:meth:`~wx.lib.editor.editor.Editor.TouchBuffer`                                 
:meth:`~wx.lib.editor.editor.Editor.UnixKeyHack`                                 
:meth:`~wx.lib.editor.editor.Editor.UnTouchBuffer`                               
:meth:`~wx.lib.editor.editor.Editor.UpdateView`                                  
:meth:`~wx.lib.editor.editor.Editor.VertBoundaries`                              
:meth:`~wx.lib.editor.editor.Editor.VertScroll`                                  
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: Editor(wx.ScrolledWindow)

   ScrolledWindow()
   ScrolledWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=ScrolledWindowStyle, name=PanelNameStr)
   
   Scrolled window derived from wxPanel.

   .. method:: __init__(self, parent, id, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)

      Initialize self.  See help(type(self)) for accurate signature.


   .. method:: AboveScreen(self, row)


   .. method:: AdjustScrollbars(self)

      AdjustScrollbars()


   .. method:: AltKey(self, event, key)


   .. method:: BackSpace(self, event)


   .. method:: BelowScreen(self, row)


   .. method:: BreakLine(self, event)


   .. method:: BufferWasTouched(self)


   .. method:: CalcMaxLineLen(self)

      get length of longest line on screen


   .. method:: CanScroll(self)

      CanScroll(orient) -> bool
      
      Returns true if this window can have a scroll bar in this orientation.


   .. method:: cHoriz(self, num)


   .. method:: ControlKey(self, event, key)


   .. method:: CopySelection(self, event)


   .. method:: CopyToClipboard(self, linesOfText)


   .. method:: CurrentLineLength(self)


   .. method:: cVert(self, num)


   .. method:: Delete(self, event)


   .. method:: DeleteChar(self,x,y,oldtext)


   .. method:: Dispatch(self, keySettingFunction, key, event)


   .. method:: Draw(self, odc=None)


   .. method:: DrawCursor(self, dc = None)


   .. method:: DrawEditText(self, t, x, y, dc)


   .. method:: DrawEofMarker(self,dc)


   .. method:: DrawLine(self, line, dc)


   .. method:: DrawSimpleCursor(self, xp, yp, dc = None, old=False)


   .. method:: Escape(self, event)


   .. method:: FindSelection(self)


   .. method:: GetText(self)


   .. method:: GetTextLine(self, lineNum)


   .. method:: HandleAboveScreen(self, row)


   .. method:: HandleBelowScreen(self, row)


   .. method:: HandleLeftOfScreen(self, col)


   .. method:: HandleRightOfScreen(self, col)


   .. method:: HorizBoundaries(self)


   .. method:: HorizScroll(self, event, eventType)


   .. method:: InitCoords(self)


   .. method:: InitDoubleBuffering(self)


   .. method:: InitFonts(self)


   .. method:: InitScrolling(self)


   .. method:: InsertChar(self,char)


   .. method:: IsLine(self, lineNum)


   .. method:: JoinLines(self)


   .. method:: KeepCursorOnScreen(self)


   .. method:: LeftOfScreen(self, col)


   .. method:: LinesInFile(self)


   .. method:: LoadImages(self)


   .. method:: MapEvents(self)


   .. method:: ModifierKey(self, key, event, modifierKeyDown, MappingFunc)


   .. method:: MouseToCol(self, mouseX)


   .. method:: MouseToCursor(self, event)


   .. method:: MouseToRow(self, mouseY)


   .. method:: Move(self, keySettingFunction, key, event)

      Move(x, y, flags=SIZE_USE_EXISTING)
      Move(pt, flags=SIZE_USE_EXISTING)
      
      Moves the window to the given position.


   .. method:: MoveDown(self, event)


   .. method:: MoveEnd(self, event)


   .. method:: MoveEndOfFile(self, event)


   .. method:: MoveHome(self, event)


   .. method:: MoveLeft(self, event)


   .. method:: MovePageDown(self, event)


   .. method:: MovePageUp(self, event)


   .. method:: MoveRight(self, event)


   .. method:: MoveSpecialControlKey(self, event, key)


   .. method:: MoveSpecialKey(self, event, key)


   .. method:: MoveStartOfFile(self, event)


   .. method:: MoveUp(self, event)


   .. method:: MultipleLineCopy(self, bRow, bCol, eRow, eCol)


   .. method:: MultipleLineDelete(self, bRow, bCol, eRow, eCol)


   .. method:: MultipleLinePaste(self, pastedLines)


   .. method:: NiceFontForPlatform(self)


   .. method:: NormalChar(self, event, key)


   .. method:: NormalizedSelect(self)


   .. method:: OnChar(self, event)


   .. method:: OnClick(self)


   .. method:: OnCopySelection(self, event)


   .. method:: OnCutSelection(self,event)


   .. method:: OnDeleteSelection(self, event)


   .. method:: OnDestroy(self, event)


   .. method:: OnEraseBackground(self, evt)


   .. method:: OnLeftDown(self, event)


   .. method:: OnLeftUp(self, event)


   .. method:: OnMotion(self, event)


   .. method:: OnPaint(self, event)


   .. method:: OnPaste(self, event)


   .. method:: OnScroll(self, event)


   .. method:: OnSize(self, event)


   .. method:: OnTimer(self, event)


   .. method:: RightOfScreen(self, col)


   .. method:: SelectNotify(self, Selecting, SelectionBegin, SelectionEnd)


   .. method:: SelectOff(self)


   .. method:: SelectUpdate(self)


   .. method:: SetAltFuncs(self, action)


   .. method:: SetCharDimensions(self)


   .. method:: SetColors(self)


   .. method:: SetControlFuncs(self, action)


   .. method:: SetMoveSpecialControlFuncs(self, action)


   .. method:: SetMoveSpecialFuncs(self, action)


   .. method:: SetScrollTimer(self)


   .. method:: SetShiftFuncs(self, action)


   .. method:: SetSpecialControlFuncs(self, action)


   .. method:: SetSpecialFuncs(self, action)


   .. method:: SetText(self, lines)


   .. method:: SetTextLine(self, lineNum, text)


   .. method:: ShiftKey(self, event, key)


   .. method:: SingleLineCopy(self, Row, bCol, eCol)


   .. method:: SingleLineDelete(self, Row, bCol, eCol)


   .. method:: SingleLineInsert(self, newText)


   .. method:: SpecialControlKey(self, event, key)


   .. method:: TabKey(self, event)


   .. method:: TouchBuffer(self)


   .. method:: UnixKeyHack(self, key)


   .. method:: UnTouchBuffer(self)


   .. method:: UpdateView(self, dc = None)


   .. method:: VertBoundaries(self)


   .. method:: VertScroll(self, event, eventType)


