.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.Panel:

==========================================================================================================================================
|phoenix_title|  **wx.Panel**
==========================================================================================================================================

A panel is a window on which controls are placed.          

It is usually placed within a frame. Its main feature over its parent class :ref:`wx.Window`  is code for handling child windows and ``TAB`` traversal, which is implemented natively if possible (e.g. in wxGTK) or by wxWidgets itself otherwise. 







.. _Panel-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.NavigationKeyEvent` parameter.


- EVT_NAVIGATION_KEY: Process a navigation key event.  








         



.. note:: 

   By default, a panel has the same colouring as a dialog.  







.. note:: 

   Tab traversal is implemented through an otherwise undocumented intermediate ControlContainer class from which any class can derive in addition to the normal :ref:`wx.Window`  base class. Please see  :ref:`/containr.h`  and   :ref:`/panel.h`  to find out how this is achieved.  







.. note:: 

   if not all characters are being intercepted by your OnKeyDown or OnChar handler, it may be because you are using the  ``TAB_TRAVERSAL``   style, which grabs some keypresses for use by child controls.  







.. seealso:: :ref:`wx.Dialog`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Panel</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.Panel_inheritance.png" alt="Inheritance diagram of Panel" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Panel.html" title="wx.Panel" alt="" coords="69,237,149,267"/> <area shape="rect" id="node2" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node3" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node5" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`AddRemoveCtrl`, :ref:`wx.aui.AuiMDIChildFrame`, :ref:`wx.adv.EditableListBox`, :ref:`wx.HScrolledWindow`, :ref:`wx.HVScrolledWindow`, :ref:`wx.PreviewControlBar`, :ref:`wx.propgrid.PropertyGridManager`, :ref:`wx.RearrangeCtrl`, :ref:`wx.VScrolledWindow`, :ref:`wx.adv.WizardPage`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.Panel.__init__`                                                       Default constructor.
:meth:`~wx.Panel.AcceptsFocus`                                                   This method is overridden from :meth:`wx.Window.AcceptsFocus`   and returns ``True`` only if there is no child window in the panel which can accept the focus.
:meth:`~wx.Panel.Create`                                                         Used for two-step panel construction.
:meth:`~wx.Panel.GetClassDefaultAttributes`                                      
:meth:`~wx.Panel.InitDialog`                                                     Sends a :ref:`wx.InitDialogEvent`, which in turn transfers data to the dialog via validators.
:meth:`~wx.Panel.Layout`                                                         See :meth:`wx.Window.SetAutoLayout` : when auto layout is on, this function gets called automatically when the window is resized.
:meth:`~wx.Panel.SetFocus`                                                       Overrides :meth:`wx.Window.SetFocus` .
:meth:`~wx.Panel.SetFocusIgnoringChildren`                                       In contrast to :meth:`~Panel.SetFocus`   (see above) this will set the focus to the panel even if there are child windows in the panel.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.Panel(Window)

   **Possible constructors**::

       Panel()
       
       Panel(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
             style=TAB_TRAVERSAL, name=PanelNameStr)
       
   
   A panel is a window on which controls are placed.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=TAB_TRAVERSAL, name=PanelNameStr)`
      
      Constructor.                  
      
      
      
      
      :param `parent`: The parent window.   
      :type `parent`: wx.Window
      :param `id`: An identifier for the panel.  ``ID_ANY``   is taken to mean a default.    
      :type `id`: wx.WindowID
      :param `pos`: The panel position. The value :ref:`wx.DefaultPosition`  indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.   
      :type `pos`: wx.Point
      :param `size`: The panel size. The value :ref:`wx.DefaultSize`  indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.   
      :type `size`: wx.Size
      :param `style`: The window style. See :ref:`wx.Panel`.   
      :type `style`: long
      :param `name`: Window name.  
      :type `name`: string
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. seealso:: :meth:`Create`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AcceptsFocus(self)

      This method is overridden from :meth:`wx.Window.AcceptsFocus`   and returns ``True`` only if there is no child window in the panel which can accept the focus.                  

      This is reevaluated each time a child window is added or removed from the panel.                  

      :rtype: `bool`








   .. method:: Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=TAB_TRAVERSAL, name=PanelNameStr)

      Used for two-step panel construction.                  

      See :ref:`wx.Panel`  for details.                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: InitDialog(self)

      Sends a :ref:`wx.InitDialogEvent`, which in turn transfers data to the dialog via validators.                  

                 



      .. seealso:: :ref:`wx.InitDialogEvent`    








   .. method:: Layout(self)

      See :meth:`wx.Window.SetAutoLayout` : when auto layout is on, this function gets called automatically when the window is resized.                  

      :rtype: `bool`








   .. method:: SetFocus(self)

      Overrides :meth:`wx.Window.SetFocus` .                  

      This method uses the (undocumented) mix-in class ControlContainer which manages the focus and ``TAB`` logic for controls which usually have child controls. 

      In practice, if you call this method and the control has at least one child window, the focus will be given to the child window. 

                 



      .. seealso:: :ref:`wx.FocusEvent`, :meth:`wx.Window.SetFocus`     








   .. method:: SetFocusIgnoringChildren(self)

      In contrast to :meth:`SetFocus`   (see above) this will set the focus to the panel even if there are child windows in the panel.                  

      This is only rarely needed.                   




