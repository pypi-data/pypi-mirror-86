.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.StatusBar:

==========================================================================================================================================
|phoenix_title|  **wx.StatusBar**
==========================================================================================================================================

A status bar is a narrow window that can be placed along the bottom of a frame to give small amounts of status information.          

It can contain one or more fields, one or more of which can be variable length according to the size of the window. 

:ref:`wx.StatusBar`  also maintains an independent stack of status texts for each field (see :meth:`~wx.StatusBar.PushStatusText`  and :meth:`~wx.StatusBar.PopStatusText`). 

Note that in :ref:`wx.StatusBar`  context, the terms `pane`  and `field`  are synonyms. 





.. _StatusBar-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  

- ``wx.STB_SIZEGRIP``: Displays a gripper at the right-hand side of the status bar which can be used to resize the parent window.  
- ``wx.STB_SHOW_TIPS``: Displays tooltips for those panes whose status text has been ellipsized/truncated because the status text doesn't fit the pane width. Note that this style has effect only on wxGTK (with GTK+ >= 2.12) currently.  
- ``wx.STB_ELLIPSIZE_START``: Replace the beginning of the status texts with an ellipsis when the status text widths exceed the status bar pane's widths (uses :meth:`wx.Control.Ellipsize` ).  
- ``wx.STB_ELLIPSIZE_MIDDLE``: Replace the middle of the status texts with an ellipsis when the status text widths exceed the status bar pane's widths (uses :meth:`wx.Control.Ellipsize` ).  
- ``wx.STB_ELLIPSIZE_END``: Replace the end of the status texts with an ellipsis when the status text widths exceed the status bar pane's widths (uses :meth:`wx.Control.Ellipsize` ).  
- ``wx.STB_DEFAULT_STYLE``: The default style: includes  ``STB_SIZEGRIP|wxSTB_SHOW_TIPS|wxSTB_ELLIPSIZE_END|wxFULL_REPAINT_ON_RESIZE`` .   








         



.. note:: 

   It is possible to create controls and other windows on the status bar. Position these windows from an OnSize() event handler.  







.. note:: 

   Notice that only the first 127 characters of a string will be shown in status bar fields under Windows if a proper manifest indicating that the program uses version 6 of common controls library is not used. This is a limitation of the native control on these platforms.  







.. seealso:: :ref:`wx.StatusBarPane`, :ref:`wx.Frame`, :ref:`Status Bar Sample <status bar sample>`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>StatusBar</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.StatusBar_inheritance.png" alt="Inheritance diagram of StatusBar" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.StatusBar.html" title="wx.StatusBar" alt="" coords="55,315,163,344"/> <area shape="rect" id="node2" href="wx.Control.html" title="wx.Control" alt="" coords="63,237,155,267"/> <area shape="rect" id="node3" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node4" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node6" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.StatusBar.__init__`                                                   Default constructor.
:meth:`~wx.StatusBar.Create`                                                     Creates the window, for two-step construction.
:meth:`~wx.StatusBar.GetBorders`                                                 Returns the horizontal and vertical borders used when rendering the field text inside the field area.
:meth:`~wx.StatusBar.GetClassDefaultAttributes`                                  
:meth:`~wx.StatusBar.GetField`                                                   Returns the :ref:`wx.StatusBarPane`  representing the `n-th`  field.
:meth:`~wx.StatusBar.GetFieldRect`                                               Returns the size and position of a field's internal bounding rectangle.
:meth:`~wx.StatusBar.GetFieldsCount`                                             Returns the number of fields in the status bar.
:meth:`~wx.StatusBar.GetStatusStyle`                                             Returns the style of the `n-th`  field.
:meth:`~wx.StatusBar.GetStatusText`                                              Returns the string associated with a status bar field.
:meth:`~wx.StatusBar.GetStatusWidth`                                             Returns the width of the `n-th`  field.
:meth:`~wx.StatusBar.PopStatusText`                                              Restores the text to the value it had before the last call to :meth:`~StatusBar.PushStatusText` .
:meth:`~wx.StatusBar.PushStatusText`                                             Saves the current field text in a per-field stack, and sets the field text to the string passed as argument.
:meth:`~wx.StatusBar.SetFieldsCount`                                             Sets the number of fields, and optionally the field widths.
:meth:`~wx.StatusBar.SetMinHeight`                                               Sets the minimal possible height for the status bar.
:meth:`~wx.StatusBar.SetStatusStyles`                                            Sets the styles of the fields in the status line which can make fields appear flat or raised instead of the standard sunken 3D border.
:meth:`~wx.StatusBar.SetStatusText`                                              Sets the status text for the `i-th`  field.
:meth:`~wx.StatusBar.SetStatusWidths`                                            Sets the widths of the fields in the status line.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.StatusBar.Borders`                                                    See :meth:`~wx.StatusBar.GetBorders`
:attr:`~wx.StatusBar.FieldRect`                                                  See :meth:`~wx.StatusBar.GetFieldRect`
:attr:`~wx.StatusBar.FieldsCount`                                                See :meth:`~wx.StatusBar.GetFieldsCount` and :meth:`~wx.StatusBar.SetFieldsCount`
:attr:`~wx.StatusBar.StatusText`                                                 See :meth:`~wx.StatusBar.GetStatusText` and :meth:`~wx.StatusBar.SetStatusText`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.StatusBar(Control)

   **Possible constructors**::

       StatusBar()
       
       StatusBar(parent, id=ID_ANY, style=STB_DEFAULT_STYLE,
                 name=StatusBarNameStr)
       
   
   A status bar is a narrow window that can be placed along the bottom of
   a frame to give small amounts of status information.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, style=STB_DEFAULT_STYLE, name=StatusBarNameStr)`
      
      Constructor, creating the window.                  
      
      
      
      
      :param `parent`: The window parent, usually a frame.   
      :type `parent`: wx.Window
      :param `id`: The window identifier. It may take a value of -1 to indicate a default value.   
      :type `id`: wx.WindowID
      :param `style`: The window style. See :ref:`wx.StatusBar`.   
      :type `style`: long
      :param `name`: The name of the window. This parameter is used to associate a name with the item, allowing the application user to set Motif resource values for individual windows.  
      :type `name`: string
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. seealso:: :meth:`Create`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Create(self, parent, id=ID_ANY, style=STB_DEFAULT_STYLE, name=StatusBarNameStr)

      Creates the window, for two-step construction.                  

      See :ref:`wx.StatusBar`  for details.                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. method:: GetBorders(self)

      Returns the horizontal and vertical borders used when rendering the field text inside the field area.                  

      Note that the rect returned by :meth:`GetFieldRect`   already accounts for the presence of horizontal and vertical border returned by this function.                  

      :rtype: :ref:`wx.Size`








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: GetField(self, n)

      Returns the :ref:`wx.StatusBarPane`  representing the `n-th`  field.                  


      :param `n`: 
      :type `n`: int




      :rtype: :ref:`wx.StatusBarPane`








   .. method:: GetFieldRect(self, i)

      Returns the size and position of a field's internal bounding rectangle. 

      :rtype: :ref:`wx.Rect`








   .. method:: GetFieldsCount(self)

      Returns the number of fields in the status bar.                  

      :rtype: `int`








   .. method:: GetStatusStyle(self, n)

      Returns the style of the `n-th`  field.                  

      See :meth:`wx.StatusBarPane.GetStyle`   for more info.                  


      :param `n`: 
      :type `n`: int




      :rtype: `int`








   .. method:: GetStatusText(self, i=0)

      Returns the string associated with a status bar field.                  




      :param `i`: The number of the status field to retrieve, starting from zero.  
      :type `i`: int






      :rtype: `string`



                  



      :returns: 

         The status field string if the field is valid, otherwise the empty string.  







      .. seealso:: :meth:`SetStatusText`     








   .. method:: GetStatusWidth(self, n)

      Returns the width of the `n-th`  field.                  

      See :meth:`wx.StatusBarPane.GetWidth`   for more info.                  


      :param `n`: 
      :type `n`: int




      :rtype: `int`








   .. method:: PopStatusText(self, field=0)

      Restores the text to the value it had before the last call to :meth:`PushStatusText` .                  

      Notice that if :meth:`SetStatusText`   had been called in the meanwhile, :meth:`PopStatusText`   will not change the text, i.e. it does not override explicit changes to status text but only restores the saved text if it hadn't been changed since. 

                


      :param `field`: 
      :type `field`: int






      .. seealso:: :meth:`PushStatusText`     








   .. method:: PushStatusText(self, string, field=0)

      Saves the current field text in a per-field stack, and sets the field text to the string passed as argument.                  

                


      :param `string`: 
      :type `string`: string
      :param `field`: 
      :type `field`: int






      .. seealso:: :meth:`PopStatusText`     








   .. method:: SetFieldsCount(self, number=1, widths=None)

      Sets the number of fields, and optionally the field widths.                  




      :param `number`: The number of fields. If this is greater than the previous number, then new fields with empty strings will be added to the status bar.   
      :type `number`: int
      :param `widths`: An array of n integers interpreted in the same way as in :meth:`SetStatusWidths` .  
      :type `widths`: list of integers






      




   .. method:: SetMinHeight(self, height)

      Sets the minimal possible height for the status bar.                  

      The real height may be bigger than the height specified here depending on the size of the font used by the status bar.                  


      :param `height`: 
      :type `height`: int







   .. method:: SetStatusStyles(self, styles)

      Sets the styles of the fields in the status line which can make fields appear flat or raised instead of the standard sunken 3D border.                  




      :param `styles`: Contains an array of  `n`  integers with the styles for each field. There are four possible styles:

       -  ``SB_NORMAL``   (default): The field appears with the default native border. 
       -  ``SB_FLAT:``   No border is painted around the field so that it appears flat. 
       -  ``SB_RAISED:``   A raised 3D border is painted around the field. 
       -  ``SB_SUNKEN:``   A sunken 3D border is painted around the field (this style is new since wxWidgets 2.9.5).   

 

      :type `styles`: list of integers






                  





   .. method:: SetStatusText(self, text, i=0)

      Sets the status text for the `i-th`  field.                  

      The given text will replace the current text. The display of the status bar is updated immediately, so there is no need to call :meth:`wx.Window.Update`   after calling this function. 

      Note that if :meth:`PushStatusText`   had been called before the new text will also replace the last saved value to make sure that the next call to :meth:`PopStatusText`   doesn't restore the old value, which was overwritten by the call to this function. 




      :param `text`: The text to be set. Use an empty string ("") to clear the field.   
      :type `text`: string
      :param `i`: The field to set, starting from zero.  
      :type `i`: int






                  



      .. seealso:: :meth:`GetStatusText` , :meth:`wx.Frame.SetStatusText`     








   .. method:: SetStatusWidths(self, widths)

      Sets the widths of the fields in the status line.                  

      There are two types of fields: **fixed**  widths and **variable**  width fields. For the fixed width fields you should specify their (constant) width in pixels. For the variable width fields, specify a negative number which indicates how the field should expand: the space left for all variable width fields is divided between them according to the absolute value of this number. A variable width field with width of -2 gets twice as much of it as a field with width -1 and so on. 

      For example, to create one fixed width field of width 100 in the right part of the status bar and two more fields which get 66% and 33% of the remaining space correspondingly, you should use an array containing -2, -1 and 100. 




      :param `widths`: Contains an array of n integers, each of which is either an absolute status field width in pixels if positive or indicates a variable width field if negative. The special value ``None`` means that all fields should get the same width.  
      :type `widths`: list of integers






      




   .. attribute:: Borders

      See :meth:`~wx.StatusBar.GetBorders`


   .. attribute:: FieldRect

      See :meth:`~wx.StatusBar.GetFieldRect`


   .. attribute:: FieldsCount

      See :meth:`~wx.StatusBar.GetFieldsCount` and :meth:`~wx.StatusBar.SetFieldsCount`


   .. attribute:: StatusText

      See :meth:`~wx.StatusBar.GetStatusText` and :meth:`~wx.StatusBar.SetStatusText`

