.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.GraphicsMatrix:

==========================================================================================================================================
|phoenix_title|  **wx.GraphicsMatrix**
==========================================================================================================================================

A :ref:`wx.GraphicsMatrix`  is a native representation of an affine matrix.          

The contents are specific and private to the respective renderer. Instances are ref counted and can therefore be assigned as usual. The only way to get a valid instance is via :meth:`wx.GraphicsContext.CreateMatrix`   or :meth:`wx.GraphicsRenderer.CreateMatrix` . 









|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>GraphicsMatrix</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.GraphicsMatrix_inheritance.png" alt="Inheritance diagram of GraphicsMatrix" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.GraphicsMatrix.html" title="wx.GraphicsMatrix" alt="" coords="6,160,149,189"/> <area shape="rect" id="node2" href="wx.GraphicsObject.html" title="wx.GraphicsObject" alt="" coords="5,83,149,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="34,5,121,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.GraphicsMatrix.Concat`                                                Concatenates the matrix passed with the current matrix.
:meth:`~wx.GraphicsMatrix.Get`                                                   Returns the component values of the matrix via the argument pointers.
:meth:`~wx.GraphicsMatrix.GetNativeMatrix`                                       Returns the native representation of the matrix.
:meth:`~wx.GraphicsMatrix.Invert`                                                Inverts the matrix.
:meth:`~wx.GraphicsMatrix.IsEqual`                                               Returns ``True`` if the elements of the transformation matrix are equal.
:meth:`~wx.GraphicsMatrix.IsIdentity`                                            Return ``True`` if this is the identity matrix.
:meth:`~wx.GraphicsMatrix.Rotate`                                                Rotates this matrix clockwise (in radians).
:meth:`~wx.GraphicsMatrix.Scale`                                                 Scales this matrix.
:meth:`~wx.GraphicsMatrix.Set`                                                   Sets the matrix to the respective values (default values are the identity matrix).
:meth:`~wx.GraphicsMatrix.TransformDistance`                                     Applies this matrix to a distance (ie.
:meth:`~wx.GraphicsMatrix.TransformPoint`                                        Applies this matrix to a point.
:meth:`~wx.GraphicsMatrix.Translate`                                             Translates this matrix.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.GraphicsMatrix.NativeMatrix`                                          See :meth:`~wx.GraphicsMatrix.GetNativeMatrix`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.GraphicsMatrix(GraphicsObject)

   A GraphicsMatrix is a native representation of an affine matrix.



   .. method:: Concat(self, t)

      Concatenates the matrix passed with the current matrix.                  

      The effect of the resulting transformation is to first apply the transformation in `t`  to the coordinates and then apply the transformation in the current matrix to the coordinates. 

      ::

          # matrix = t * matrix






      :param `t`: The parameter matrix is the multiplicand.   
      :type `t`: wx.GraphicsMatrix




                  





   .. method:: Get(self)

      Returns the component values of the matrix via the argument pointers.                  

      :rtype: `tuple`







      :returns: 

         ( `a`, `b`, `c`, `d`, `tx`, `ty` ) 








   .. method:: GetNativeMatrix(self)

      Returns the native representation of the matrix.                  

      For CoreGraphics this is a CFAffineMatrix pointer, for GDIPlus a Matrix Pointer, and for Cairo a cairo_matrix_t pointer.                   





   .. method:: Invert(self)

      Inverts the matrix.                   





   .. method:: IsEqual(self, t)

      Returns ``True`` if the elements of the transformation matrix are equal.                  


      :param `t`: 
      :type `t`: wx.GraphicsMatrix




      :rtype: `bool`








   .. method:: IsIdentity(self)

      Return ``True`` if this is the identity matrix.                  

      :rtype: `bool`








   .. method:: Rotate(self, angle)

      Rotates this matrix clockwise (in radians).                  




      :param `angle`: Rotation angle in radians, clockwise.   
      :type `angle`: wx.Double




                  





   .. method:: Scale(self, xScale, yScale)

      Scales this matrix.                  


      :param `xScale`: 
      :type `xScale`: wx.Double
      :param `yScale`: 
      :type `yScale`: wx.Double







   .. method:: Set(self, a=1.0, b=0.0, c=0.0, d=1.0, tx=0.0, ty=0.0)

      Sets the matrix to the respective values (default values are the identity matrix).                  


      :param `a`: 
      :type `a`: wx.Double
      :param `b`: 
      :type `b`: wx.Double
      :param `c`: 
      :type `c`: wx.Double
      :param `d`: 
      :type `d`: wx.Double
      :param `tx`: 
      :type `tx`: wx.Double
      :param `ty`: 
      :type `ty`: wx.Double







   .. method:: TransformDistance(self, dx, dy)

      Applies this matrix to a distance (ie.                  

      performs all transforms except translations).                  


      :param `dx`: 
      :type `dx`: wx.Double
      :param `dy`: 
      :type `dy`: wx.Double




      :rtype: `tuple`







      :returns: 

         ( `dx`, `dy` ) 








   .. method:: TransformPoint(self, x, y)

      Applies this matrix to a point.                  


      :param `x`: 
      :type `x`: wx.Double
      :param `y`: 
      :type `y`: wx.Double




      :rtype: `tuple`







      :returns: 

         ( `x`, `y` ) 








   .. method:: Translate(self, dx, dy)

      Translates this matrix.                  


      :param `dx`: 
      :type `dx`: wx.Double
      :param `dy`: 
      :type `dy`: wx.Double







   .. attribute:: NativeMatrix

      See :meth:`~wx.GraphicsMatrix.GetNativeMatrix`

