.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.propgrid.SystemColourProperty:

==========================================================================================================================================
|phoenix_title|  **wx.propgrid.SystemColourProperty**
==========================================================================================================================================

Has dropdown list of wxWidgets system colours.          

Value used is of :ref:`wx.propgrid.ColourPropertyValue`  type. 

**Supported special attributes:**  ``PG_COLOUR_ALLOW_CUSTOM``, ``PG_COLOUR_HAS_ALPHA``            




|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>SystemColourProperty</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.propgrid.SystemColourProperty_inheritance.png" alt="Inheritance diagram of SystemColourProperty" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.propgrid.SystemColourProperty.html" title="wx.propgrid.SystemColourProperty" alt="" coords="5,237,255,267"/> <area shape="rect" id="node2" href="wx.propgrid.EnumProperty.html" title="wx.propgrid.EnumProperty" alt="" coords="33,160,227,189"/> <area shape="rect" id="node3" href="wx.propgrid.PGProperty.html" title="wx.propgrid.PGProperty" alt="" coords="42,83,218,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="87,5,173,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.propgrid.ColourProperty`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.propgrid.SystemColourProperty.__init__`                               
:meth:`~wx.propgrid.SystemColourProperty.ColourToString`                         Override in derived class to customize how colours are printed as strings.
:meth:`~wx.propgrid.SystemColourProperty.DoSetAttribute`                         Reimplement this member function to add special handling for attributes of this property.
:meth:`~wx.propgrid.SystemColourProperty.GetColour`                              Default is to use `SystemSettings.GetColour(index).`
:meth:`~wx.propgrid.SystemColourProperty.GetCustomColourIndex`                   Returns index of entry that triggers colour picker dialog (default is last).
:meth:`~wx.propgrid.SystemColourProperty.GetVal`                                 
:meth:`~wx.propgrid.SystemColourProperty.IntToValue`                             Converts integer (possibly a choice selection) into :ref:`Variant`  value appropriate for this property.
:meth:`~wx.propgrid.SystemColourProperty.OnCustomPaint`                          Override to paint an image in front of the property value text or drop-down list item (but only if :meth:`wx.propgrid.PGProperty.OnMeasureImage`   is overridden as well).
:meth:`~wx.propgrid.SystemColourProperty.OnEvent`                                Events received by editor widgets are processed here.
:meth:`~wx.propgrid.SystemColourProperty.OnMeasureImage`                         Returns size of the custom painted image in front of property.
:meth:`~wx.propgrid.SystemColourProperty.OnSetValue`                             This virtual function is called after m_value has been set.
:meth:`~wx.propgrid.SystemColourProperty.QueryColourFromUser`                    
:meth:`~wx.propgrid.SystemColourProperty.StringToValue`                          Converts text into :ref:`Variant`  value appropriate for this property.
:meth:`~wx.propgrid.SystemColourProperty.ValueToString`                          Converts property value into a text representation.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.propgrid.SystemColourProperty.CustomColourIndex`                      See :meth:`~wx.propgrid.SystemColourProperty.GetCustomColourIndex`
:attr:`~wx.propgrid.SystemColourProperty.Val`                                    See :meth:`~wx.propgrid.SystemColourProperty.GetVal`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.propgrid.SystemColourProperty(EnumProperty)

   **Possible constructors**::

       SystemColourProperty(label=PG_LABEL, name=PG_LABEL,
                            value=ColourPropertyValue())
       
   
   Has dropdown list of wxWidgets system colours.



   .. method:: __init__(self, label=PG_LABEL, name=PG_LABEL, value=ColourPropertyValue())




      :param `label`: 
      :type `label`: string
      :param `name`: 
      :type `name`: string
      :param `value`: 
      :type `value`: wx.propgrid.ColourPropertyValue







   .. method:: ColourToString(self, col, index, argFlags=0)

      Override in derived class to customize how colours are printed as strings.                  


      :param `col`: 
      :type `col`: wx.Colour
      :param `index`: 
      :type `index`: int
      :param `argFlags`: 
      :type `argFlags`: int




      :rtype: `string`








   .. method:: DoSetAttribute(self, name, value)

      Reimplement this member function to add special handling for attributes of this property.                  

                


      :param `name`: 
      :type `name`: string
      :param `value`: 
      :type `value`: PGVariant




      :rtype: `bool`







      :returns: 

         Return ``False`` to have the attribute automatically stored in m_attributes. Default implementation simply does that and nothing else.  







      .. note:: 

         To actually set property attribute values from the application, use :meth:`wx.propgrid.PGProperty.SetAttribute`   instead.   








   .. method:: GetColour(self, index)

      Default is to use `SystemSettings.GetColour(index).`                  

      Override to use custom colour tables etc.                  


      :param `index`: 
      :type `index`: int




      :rtype: :ref:`Colour`








   .. method:: GetCustomColourIndex(self)

      Returns index of entry that triggers colour picker dialog (default is last).                  

      :rtype: `int`








   .. method:: GetVal(self, pVariant=None)




      :param `pVariant`: 
      :type `pVariant`: PGVariant




      :rtype: :ref:`wx.propgrid.ColourPropertyValue`








   .. method:: IntToValue(self, number, argFlags=0)

      Converts integer (possibly a choice selection) into :ref:`Variant`  value appropriate for this property.                  




      :param `number`: Integer to be translated into variant.   
      :type `number`: int
      :param `argFlags`: If ``PG_FULL_VALUE``  is set, returns complete, storable value instead of displayable one.  
      :type `argFlags`: int










      :rtype: `tuple`



                  



      :returns: 

         ( `bool`, `variant` ) 







      .. note:: 

   

         - If property is not supposed to use choice or spinctrl or other editor with int-based value, it is not necessary to implement this method. 
         - Default implementation simply assign given int to m_value. 
         - If property uses choice control, and displays a dialog on some choice items, then it is preferred to display that dialog in IntToValue instead of OnEvent. 
         - You might want to take into account that m_value is Mull variant if property value is unspecified (which is usually only case if you explicitly enabled that sort behaviour).  











   .. method:: OnCustomPaint(self, dc, rect, paintdata)

      Override to paint an image in front of the property value text or drop-down list item (but only if :meth:`wx.propgrid.PGProperty.OnMeasureImage`   is overridden as well).                  

      If property's :meth:`OnMeasureImage`   returns size that has height != 0 but less than row height ( < 0 has special meanings), :ref:`wx.propgrid.PropertyGrid`  calls this method to draw a custom image in a limited area in front of the editor control or value text/graphics, and if control has drop-down list, then the image is drawn there as well (even in the case :meth:`OnMeasureImage`   returned higher height than row height). 

      ``NOTE``: Following applies when :meth:`OnMeasureImage`   returns a "flexible" height ( using  ``PG_FLEXIBLE_SIZE(W,H)``   macro), which implies variable height items: If (rect.x+rect.width) is < 0, then this is a measure item call, which means that dc is invalid and only thing that should be done is to set paintdata.m_drawnHeight to the height of the image of item at index paintdata.m_choiceItem. This call may be done even as often as once every drop-down popup show. 




      :param `dc`: :ref:`wx.DC`  to paint on.   
      :type `dc`: wx.DC
      :param `rect`: Box reserved for custom graphics. Includes surrounding rectangle, if any. If x+width is < 0, then this is a measure item call (see above).   
      :type `rect`: wx.Rect
      :param `paintdata`: :ref:`wx.propgrid.PGPaintData`  structure with much useful data about painted item. ::




      :type `paintdata`: wx.propgrid.PGPaintData








                  



      .. note:: 

   

         - You can actually exceed rect width, but if you do so then paintdata.m_drawnWidth must be set to the full width drawn in pixels. 
         - Due to technical reasons, rect's height will be default even if custom height was reported during measure call. 
         - Brush is guaranteed to be default background colour. It has been already used to clear the background of area being painted. It can be modified. 
         - Pen is guaranteed to be 1-wide 'black' (or whatever is the proper colour) pen for drawing framing rectangle. It can be changed as well. 










      .. seealso:: :meth:`ValueToString`     








   .. method:: OnEvent(self, propgrid, wnd_primary, event)

      Events received by editor widgets are processed here.                  

      Note that editor class usually processes most events. Some, such as button press events of TextCtrlAndButton class, can be handled here. Also, if custom handling for regular events is desired, then that can also be done (for example, :ref:`wx.propgrid.SystemColourProperty`  custom handles  ``wxEVT_CHOICE``   to display colour picker dialog when 'custom' selection is made). 

      If the event causes value to be changed, :meth:`SetValueInEvent`   should be called to set the new value. 

      The parameter `event`  is the associated :ref:`wx.Event`. 




      :param `propgrid`: 
      :type `propgrid`: wx.propgrid.PropertyGrid
      :param `wnd_primary`: 
      :type `wnd_primary`: wx.Window
      :param `event`: 
      :type `event`: wx.Event




      return ``True`` if any changes in value should be reported. 



      :rtype: `bool`



                  



      .. note:: 

   

         - If property uses choice control, and displays a dialog on some choice items, then it is preferred to display that dialog in IntToValue instead of OnEvent.  











   .. method:: OnMeasureImage(self, item)

      Returns size of the custom painted image in front of property.                  

      This method must be overridden to return non-default value if OnCustomPaint is to be called. 




      :param `item`: Normally -1, but can be an index to the property's list of items.  
      :type `item`: int






      :rtype: :ref:`Size`



                  



      .. note:: 

   

         - Default behaviour is to return :ref:`wx.Size`, which means no image. 
         - Default image width or height is indicated with dimension -1. 
         - You can also return ``PG_DEFAULT_IMAGE_SIZE``  which equals DefaultSize.  











   .. method:: OnSetValue(self)

      This virtual function is called after m_value has been set.                  

                 



      .. note:: 

   

         - If m_value was set to Null variant (i.e. unspecified value), :meth:`OnSetValue`   will not be called. 
         - m_value may be of any variant type. Typically properties internally support only one variant type, and as such :meth:`OnSetValue`   provides a good opportunity to convert supported values into internal type. 
         - Default implementation does nothing.  











   .. method:: QueryColourFromUser(self, variant)




      :param `variant`: 
      :type `variant`: PGVariant




      :rtype: `bool`








   .. method:: StringToValue(self, text, argFlags=0)

      Converts text into :ref:`Variant`  value appropriate for this property.                  




      :param `text`: Text to be translated into variant.  
      :type `text`: string
      :param `argFlags`: If ``PG_FULL_VALUE``  is set, returns complete, storable value instead of displayable one (they may be different). If ``PG_COMPOSITE_FRAGMENT``  is set, text is interpreted as a part of composite property string value (as generated by :meth:`ValueToString`   called with this same flag).  
      :type `argFlags`: int










      :rtype: `tuple`




      You might want to take into account that m_value is Null variant if property value is unspecified (which is usually only case if you explicitly enabled that sort behaviour).                    



      :returns: 

         ( `bool`, `variant` ) 







      .. note:: 

         Default implementation converts semicolon delimited tokens into child values. Only works for properties with children.  








   .. method:: ValueToString(self, value, argFlags=0)

      Converts property value into a text representation.                  




      :param `value`: Value to be converted.   
      :type `value`: PGVariant
      :param `argFlags`: If 0 (default value), then displayed string is returned. If ``PG_FULL_VALUE``  is set, returns complete, storable string value instead of displayable. If ``PG_EDITABLE_VALUE``  is set, returns string value that must be editable in textctrl. If ``PG_COMPOSITE_FRAGMENT``  is set, returns text that is appropriate to display as a part of string property's composite text representation.  
      :type `argFlags`: int








      :rtype: `string`



                  



      .. note:: 

         Default implementation calls :meth:`GenerateComposedValue` .   








   .. attribute:: CustomColourIndex

      See :meth:`~wx.propgrid.SystemColourProperty.GetCustomColourIndex`


   .. attribute:: Val

      See :meth:`~wx.propgrid.SystemColourProperty.GetVal`

