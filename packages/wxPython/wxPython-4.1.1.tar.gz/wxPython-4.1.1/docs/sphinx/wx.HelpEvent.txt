.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.HelpEvent:

==========================================================================================================================================
|phoenix_title|  **wx.HelpEvent**
==========================================================================================================================================

A help event is sent when the user has requested context-sensitive help.          

This can either be caused by the application requesting context-sensitive help mode via :ref:`wx.ContextHelp`, or (on MS Windows) by the system generating a ``WM_HELP`` message when the user pressed ``F1`` or clicked on the query button in a dialog caption. 

A help event is sent to the window that the user clicked on, and is propagated up the window hierarchy until the event is processed or there are no more event handlers. 

The application should call :meth:`wx.Event.GetId`   to check the identity of the clicked-on window, and then either show some suitable help or call :meth:`wx.Event.Skip`   if the identifier is unrecognised. 

Calling Skip is important because it allows wxWidgets to generate further events for ancestors of the clicked-on window. Otherwise it would be impossible to show help for container windows, since processing would stop after the first window found. 







.. _HelpEvent-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.HelpEvent` parameter.

Event macros: 

- EVT_HELP: Process a  ``wxEVT_HELP``   event.   
- EVT_HELP_RANGE: Process a  ``wxEVT_HELP``   event for a range of ids.   








         



.. seealso:: :ref:`wx.ContextHelp`, :ref:`wx.Dialog`, :ref:`Events and Event Handling <events and event handling>`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>HelpEvent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.HelpEvent_inheritance.png" alt="Inheritance diagram of HelpEvent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.HelpEvent.html" title="wx.HelpEvent" alt="" coords="24,237,136,267"/> <area shape="rect" id="node2" href="wx.CommandEvent.html" title="wx.CommandEvent" alt="" coords="5,160,155,189"/> <area shape="rect" id="node3" href="wx.Event.html" title="wx.Event" alt="" coords="39,83,121,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="37,5,123,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.HelpEvent.__init__`                                                   Constructor.
:meth:`~wx.HelpEvent.GetOrigin`                                                  Returns the origin of the help event which is one of the :meth:`wx.HelpEvent.Origin`   values.
:meth:`~wx.HelpEvent.GetPosition`                                                Returns the left-click position of the mouse, in screen coordinates.
:meth:`~wx.HelpEvent.SetOrigin`                                                  Set the help event origin, only used internally by wxWidgets normally.
:meth:`~wx.HelpEvent.SetPosition`                                                Sets the left-click position of the mouse, in screen coordinates.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.HelpEvent.Position`                                                   See :meth:`~wx.HelpEvent.GetPosition` and :meth:`~wx.HelpEvent.SetPosition`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.HelpEvent(CommandEvent)

   **Possible constructors**::

       HelpEvent(type=wxEVT_NULL, winid=0, pt=DefaultPosition,
                 origin=Origin_Unknown)
       
   
   A help event is sent when the user has requested context-sensitive
   help.



   .. method:: __init__(self, type=wxEVT_NULL, winid=0, pt=DefaultPosition, origin=Origin_Unknown)

      Constructor.                  


      :param `type`: 
      :type `type`: wx.EventType
      :param `winid`: 
      :type `winid`: wx.WindowID
      :param `pt`: 
      :type `pt`: wx.Point
      :param `origin`: 
      :type `origin`: HelpEvent.Origin







   .. method:: GetOrigin(self)

      Returns the origin of the help event which is one of the :meth:`wx.HelpEvent.Origin`   values.                  

      The application may handle events generated using the keyboard or mouse differently, e.g. by using :ref:`wx.GetMousePosition`  for the mouse events. 

                

      :rtype: :ref:`wx.HelpEvent.Origin`







      .. seealso:: :meth:`SetOrigin`     








   .. method:: GetPosition(self)

      Returns the left-click position of the mouse, in screen coordinates.                  

      This allows the application to position the help appropriately.                  

      :rtype: :ref:`wx.Point`








   .. method:: SetOrigin(self, origin)

      Set the help event origin, only used internally by wxWidgets normally.                  

                


      :param `origin`: 
      :type `origin`: HelpEvent.Origin






      .. seealso:: :meth:`GetOrigin`     








   .. method:: SetPosition(self, pt)

      Sets the left-click position of the mouse, in screen coordinates.                  


      :param `pt`: 
      :type `pt`: wx.Point







   .. attribute:: Position

      See :meth:`~wx.HelpEvent.GetPosition` and :meth:`~wx.HelpEvent.SetPosition`


.. toctree::
   :maxdepth: 1
   :hidden:

   wx.HelpEvent.Origin.enumeration
