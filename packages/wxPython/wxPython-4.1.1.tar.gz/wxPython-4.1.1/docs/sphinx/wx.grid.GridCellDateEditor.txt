.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.grid.GridCellDateEditor:

==========================================================================================================================================
|phoenix_title|  **wx.grid.GridCellDateEditor**
==========================================================================================================================================

Grid cell editor for dates.          

Uses :ref:`wx.adv.DatePickerCtrl`  as actual edit control. 







         



.. versionadded:: 4.1/wxWidgets-3.1.3  
     







.. seealso:: :ref:`wx.grid.GridCellEditor`, :ref:`wx.grid.GridCellAutoWrapStringEditor`, :ref:`wx.grid.GridCellBoolEditor`, :ref:`wx.grid.GridCellChoiceEditor`, :ref:`wx.grid.GridCellEnumEditor`, :ref:`wx.grid.GridCellFloatEditor`, :ref:`wx.grid.GridCellTextEditor`  







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>GridCellDateEditor</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.grid.GridCellDateEditor_inheritance.png" alt="Inheritance diagram of GridCellDateEditor" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.grid.GridCellDateEditor.html" title="wx.grid.GridCellDateEditor" alt="" coords="82,160,277,189"/> <area shape="rect" id="node2" href="wx.grid.GridCellEditor.html" title="wx.grid.GridCellEditor" alt="" coords="97,83,261,112"/> <area shape="rect" id="node3" href="wx.ClientDataContainer.html" title="wx.ClientDataContainer" alt="" coords="5,5,183,35"/> <area shape="rect" id="node4" href="wx.RefCounter.html" title="wx.RefCounter" alt="" coords="207,5,325,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.grid.GridCellDateEditor.__init__`                                     Date editor constructor.
:meth:`~wx.grid.GridCellDateEditor.EndEdit`                                      End editing the cell.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.grid.GridCellDateEditor(GridCellEditor)

   **Possible constructors**::

       GridCellDateEditor(format="")
       
   
   Grid cell editor for dates.



   .. method:: __init__(self, format="")

      Date editor constructor.                  




      :param `format`: Optional format for the date displayed in the associated cell. By default, the locale-specific date format ("%x") is assumed. You would typically want to specify the same format as the one used with the cell renderer, if a non-default one is used. Note that this parameter is only available since wxWidgets 3.1.5.   
      :type `format`: string




                  





   .. method:: EndEdit(self, row, col, grid, oldval)

                                      End editing the cell.

                                      This function must check if the current value of the editing cell
                                      is valid and different from the original value in its string
                                      form. If not then simply return None.  If it has changed then
                                      this method should save the new value so that ApplyEdit can
                                      apply it later and the string representation of the new value
                                      should be returned.

                                      Notice that this method shoiuld not modify the grid as the
                                      change could still be vetoed.
                                  




