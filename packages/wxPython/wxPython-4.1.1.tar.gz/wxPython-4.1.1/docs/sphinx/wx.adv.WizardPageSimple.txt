.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.adv.WizardPageSimple:

==========================================================================================================================================
|phoenix_title|  **wx.adv.WizardPageSimple**
==========================================================================================================================================

:ref:`wx.adv.WizardPageSimple`  is the simplest possible :ref:`wx.adv.WizardPage`  implementation: it just returns the pointers given to its constructor from :meth:`wx.adv.WizardPage.GetNext`   and :meth:`wx.adv.WizardPage.GetPrev`   functions.          

This makes it very easy to use the objects of this class in the wizards where the pages order is known statically - on the other hand, if this is not the case you must derive your own class from :ref:`wx.adv.WizardPage`  instead. 







         



.. seealso:: :ref:`wx.adv.Wizard`, :ref:`Wizard Sample <wizard sample>`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>WizardPageSimple</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.adv.WizardPageSimple_inheritance.png" alt="Inheritance diagram of WizardPageSimple" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.adv.WizardPageSimple.html" title="wx.adv.WizardPageSimple" alt="" coords="12,392,205,421"/> <area shape="rect" id="node2" href="wx.adv.WizardPage.html" title="wx.adv.WizardPage" alt="" coords="35,315,183,344"/> <area shape="rect" id="node3" href="wx.Panel.html" title="wx.Panel" alt="" coords="69,237,149,267"/> <area shape="rect" id="node4" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node5" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node6" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node7" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.adv.WizardPageSimple.__init__`                                        Default constructor.
:meth:`~wx.adv.WizardPageSimple.Chain`                                           A helper chaining this page with the next one.
:meth:`~wx.adv.WizardPageSimple.Create`                                          Creates the wizard page.
:meth:`~wx.adv.WizardPageSimple.GetClassDefaultAttributes`                       
:meth:`~wx.adv.WizardPageSimple.SetNext`                                         Sets the next page.
:meth:`~wx.adv.WizardPageSimple.SetPrev`                                         Sets the previous page.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.adv.WizardPageSimple(WizardPage)

   **Possible constructors**::

       WizardPageSimple()
       
       WizardPageSimple(parent, prev=None, next=None, bitmap=NullBitmap)
       
   
   WizardPageSimple is the simplest possible WizardPage
   implementation: it just returns the pointers given to its constructor
   from `WizardPage.GetNext()` and `WizardPage.GetPrev()` functions.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, prev=None, next=None, bitmap=NullBitmap)`
      
      Constructor takes the previous and next pages.                  
      
      They may be modified later by :meth:`SetPrev`   or :meth:`SetNext` .                  
      
      
      :param `parent`: 
      :type `parent`: wx.adv.Wizard
      :param `prev`: 
      :type `prev`: wx.adv.WizardPage
      :param `next`: 
      :type `next`: wx.adv.WizardPage
      :param `bitmap`: 
      :type `bitmap`: wx.Bitmap
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Chain(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **Chain** `(self, next)`
      
      A helper chaining this page with the next one.                  
      
      Notice that this method returns a reference to the next page, so the calls to it can, in turn, be chained: 
      
      ::
      
                  page3 = wx.RadioboxPage(wizard)
                  page4 = wx.ValidationPage(wizard)
      
                  wx.adv.WizardPageSimple.Chain(page3, page4)
      
      
      
      This makes this method the simplest way to define the order of changes in fully static wizards, i.e. in those where the order doesn't depend on the choices made by the user in the wizard pages during run-time. 
      
      
      
      
      :param `next`: A non-NULL pointer to the next page.   
      :type `next`: wx.adv.WizardPageSimple
      
      
      
      
      
      
      :rtype: :ref:`wx.adv.WizardPageSimple`
      
      
      
                        
      
      
      
      :returns: 
      
         Reference to `next`  on which :meth:`Chain`   can be called again.  
      
      
      
      
      
      
      
      .. versionadded:: 2.9.5 
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **Chain** `(first, second)`
      
      A convenience function to make the pages follow each other.                  
      
      Example: 
      
      ::
      
          # FirstPage is an instance of wx.adv.WizardPageSimple
          firstPage = FirstPage(self)
          firstPage.Chain(SecondPage).Chain(ThirdPage).Chain(LastPage)
      
                       
      
      
      :param `first`: 
      :type `first`: wx.adv.WizardPageSimple
      :param `second`: 
      :type `second`: wx.adv.WizardPageSimple
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Create(self, parent=None, prev=None, next=None, bitmap=NullBitmap)

      Creates the wizard page.                  

      Must be called if the default constructor had been used to create the object.                  


      :param `parent`: 
      :type `parent`: wx.adv.Wizard
      :param `prev`: 
      :type `prev`: wx.adv.WizardPage
      :param `next`: 
      :type `next`: wx.adv.WizardPage
      :param `bitmap`: 
      :type `bitmap`: wx.Bitmap




      :rtype: `bool`








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`VisualAttributes`








   .. method:: SetNext(self, next)

      Sets the next page.                  


      :param `next`: 
      :type `next`: wx.adv.WizardPage







   .. method:: SetPrev(self, prev)

      Sets the previous page.                  


      :param `prev`: 
      :type `prev`: wx.adv.WizardPage






