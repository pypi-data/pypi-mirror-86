.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.LogWindow:

==========================================================================================================================================
|phoenix_title|  **wx.LogWindow**
==========================================================================================================================================

This class represents a background log window: to be precise, it collects all log messages in the log frame which it manages but also passes them on to the log target which was active at the moment of its creation.          

This allows you, for example, to show all the log messages in a frame but still continue to process them normally by showing the standard log dialog. 







         



.. seealso:: :ref:`wx.LogTextCtrl`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>LogWindow</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.LogWindow_inheritance.png" alt="Inheritance diagram of LogWindow" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.LogWindow.html" title="wx.LogWindow" alt="" coords="13,237,133,267"/> <area shape="rect" id="node2" href="wx.LogInterposer.html" title="wx.LogInterposer" alt="" coords="5,160,140,189"/> <area shape="rect" id="node3" href="wx.LogChain.html" title="wx.LogChain" alt="" coords="20,83,125,112"/> <area shape="rect" id="node4" href="wx.Log.html" title="wx.Log" alt="" coords="37,5,109,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.LogWindow.__init__`                                                   Creates the log frame window and starts collecting the messages in it.
:meth:`~wx.LogWindow.GetFrame`                                                   Returns the associated log frame window.
:meth:`~wx.LogWindow.OnFrameClose`                                               Called if the user closes the window interactively, will not be called if it is destroyed for another reason (such as when program exits).
:meth:`~wx.LogWindow.OnFrameDelete`                                              Called right before the log frame is going to be deleted: will always be called unlike :meth:`~LogWindow.OnFrameClose` .
:meth:`~wx.LogWindow.Show`                                                       Shows or hides the frame.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.LogWindow.Frame`                                                      See :meth:`~wx.LogWindow.GetFrame`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.LogWindow(LogInterposer)

   **Possible constructors**::

       LogWindow(pParent, szTitle, show=True, passToOld=True)
       
   
   This class represents a background log window: to be precise, it
   collects all log messages in the log frame which it manages but also
   passes them on to the log target which was active at the moment of its
   creation.



   .. method:: __init__(self, pParent, szTitle, show=True, passToOld=True)

      Creates the log frame window and starts collecting the messages in it.                  




      :param `pParent`: The parent window for the log frame, may be ``None``   
      :type `pParent`: wx.Window
      :param `szTitle`: The title for the log frame   
      :type `szTitle`: string
      :param `show`: ``True`` to show the frame initially (default), otherwise :meth:`Show`   must be called later.   
      :type `show`: bool
      :param `passToOld`: ``True`` to process the log messages normally in addition to logging them in the log frame (default), ``False`` to only log them in the log frame. Note that if no targets were set using :meth:`wx.Log.SetActiveTarget`   then :ref:`wx.LogWindow`  simply becomes the active one and messages won't be passed to other targets.   
      :type `passToOld`: bool










                  





   .. method:: GetFrame(self)

      Returns the associated log frame window.                  

      This may be used to position or resize it but use :meth:`Show`   to show or hide it.                  

      :rtype: :ref:`wx.Frame`








   .. method:: OnFrameClose(self, frame)

      Called if the user closes the window interactively, will not be called if it is destroyed for another reason (such as when program exits).                  

      Return ``True`` from here to allow the frame to close, ``False`` to prevent this from happening. 

                


      :param `frame`: 
      :type `frame`: wx.Frame




      :rtype: `bool`







      .. seealso:: :meth:`OnFrameDelete`     








   .. method:: OnFrameDelete(self, frame)

      Called right before the log frame is going to be deleted: will always be called unlike :meth:`OnFrameClose` .                  


      :param `frame`: 
      :type `frame`: wx.Frame







   .. method:: Show(self, show=True)

      Shows or hides the frame.                  


      :param `show`: 
      :type `show`: bool







   .. attribute:: Frame

      See :meth:`~wx.LogWindow.GetFrame`

