.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.Control:

==========================================================================================================================================
|phoenix_title|  **wx.Control**
==========================================================================================================================================

This is the base class for a control or "widget".          

A control is generally a small window which processes user input and/or displays one or more item of data. 







.. _Control-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.ClipboardTextEvent` parameter.


- EVT_TEXT_COPY: Some or all of the controls content was copied to the clipboard.  
- EVT_TEXT_CUT: Some or all of the controls content was cut (i.e. copied and deleted).  
- EVT_TEXT_PASTE: Clipboard content was pasted into the control.  








         



.. seealso:: :ref:`wx.Validator`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Control</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.Control_inheritance.png" alt="Inheritance diagram of Control" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Control.html" title="wx.Control" alt="" coords="63,237,155,267"/> <area shape="rect" id="node2" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node3" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node5" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`ActiveXContainer`, :ref:`wx.ActivityIndicator`, :ref:`wx.adv.AnimationCtrl`, :ref:`wx.AnyButton`, :ref:`wx.aui.AuiToolBar`, :ref:`wx.BookCtrlBase`, :ref:`wx.adv.CalendarCtrl`, :ref:`wx.CheckBox`, :ref:`wx.Choice`, :ref:`wx.CollapsibleHeaderCtrl`, :ref:`wx.CollapsiblePane`, :ref:`wx.ComboBox`, :ref:`wx.ComboCtrl`, :ref:`wx.ControlWithItems`, :ref:`wx.dataview.DataViewCtrl`, :ref:`wx.adv.DatePickerCtrl`, :ref:`wx.FileCtrl`, :ref:`wx.Gauge`, :ref:`wx.GenericDirCtrl`, :ref:`wx.HeaderCtrl`, :ref:`wx.adv.HyperlinkCtrl`, :ref:`wx.InfoBar`, :ref:`wx.ListBox`, :ref:`wx.ListCtrl`, :ref:`wx.media.MediaCtrl`, :ref:`wx.PickerBase`, :ref:`wx.RadioBox`, :ref:`wx.RadioButton`, :ref:`wx.ribbon.RibbonControl`, :ref:`wx.richtext.RichTextCtrl`, :ref:`wx.richtext.RichTextStyleListCtrl`, :ref:`wx.ScrollBar`, :ref:`wx.Scrolled`, :ref:`wx.Slider`, :ref:`wx.SpinButton`, :ref:`wx.SpinCtrl`, :ref:`wx.SpinCtrlDouble`, :ref:`wx.StaticBitmap`, :ref:`wx.StaticBox`, :ref:`wx.StaticLine`, :ref:`wx.StaticText`, :ref:`wx.StatusBar`, :ref:`wx.stc.StyledTextCtrl`, :ref:`wx.TextCtrl`, :ref:`wx.adv.TimePickerCtrl`, :ref:`wx.ToolBar`, :ref:`wx.TreeCtrl`, :ref:`wx.webkit.WebKitCtrl`, :ref:`wx.html2.WebView`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.Control.__init__`                                                     Constructs a control.
:meth:`~wx.Control.Command`                                                      Simulates the effect of the user issuing a command to the item.
:meth:`~wx.Control.Create`                                                       
:meth:`~wx.Control.Ellipsize`                                                    Replaces parts of the `label`  string with ellipsis, if needed, so that it fits into `maxWidth`  pixels if possible.
:meth:`~wx.Control.EscapeMnemonics`                                              Escapes the special mnemonics characters ("&") in the given string.
:meth:`~wx.Control.GetClassDefaultAttributes`                                    
:meth:`~wx.Control.GetLabel`                                                     Returns the control's label, as it was passed to :meth:`~Control.SetLabel` .
:meth:`~wx.Control.GetLabelText`                                                 Returns the control's label without mnemonics.
:meth:`~wx.Control.GetSizeFromText`                                              Determine the minimum size needed by the control to display the given text.
:meth:`~wx.Control.GetSizeFromTextSize`                                          Determine the size needed by the control to leave the given area for its text.
:meth:`~wx.Control.RemoveMnemonics`                                              Returns the given `str`  string without mnemonics ("&" characters).
:meth:`~wx.Control.SetLabel`                                                     Sets the control's label.
:meth:`~wx.Control.SetLabelMarkup`                                               Sets the controls label to a string using markup.
:meth:`~wx.Control.SetLabelText`                                                 Sets the control's label to exactly the given string.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.Control.Label`                                                        See :meth:`~wx.Control.GetLabel` and :meth:`~wx.Control.SetLabel`
:attr:`~wx.Control.LabelText`                                                    See :meth:`~wx.Control.GetLabelText` and :meth:`~wx.Control.SetLabelText`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.Control(Window)

   **Possible constructors**::

       Control(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
               style=0, validator=DefaultValidator, name=ControlNameStr)
       
       Control()
       
   
   This is the base class for a control or "widget".



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ControlNameStr)`
      
      Constructs a control.                  
      
      
      
      
      :param `parent`: Pointer to a parent window.   
      :type `parent`: wx.Window
      :param `id`: Control identifier. If ``wx.ID_ANY``, will automatically create an identifier.   
      :type `id`: wx.WindowID
      :param `pos`: Control position. DefaultPosition indicates that wxWidgets should generate a default position for the control.   
      :type `pos`: wx.Point
      :param `size`: Control size. DefaultSize indicates that wxWidgets should generate a default size for the window. If no suitable size can be found, the window will be sized to 20x20 pixels so that the window is visible but obviously not correctly sized.   
      :type `size`: wx.Size
      :param `style`: Control style. For generic window styles, please see :ref:`wx.Window`.   
      :type `style`: long
      :param `validator`: Control validator.   
      :type `validator`: wx.Validator
      :param `name`: Control name.   
      :type `name`: string
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor to allow 2-phase creation.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Command(self, event)

      Simulates the effect of the user issuing a command to the item.                  

                


      :param `event`: 
      :type `event`: wx.CommandEvent






      .. seealso:: :ref:`wx.CommandEvent`    








   .. method:: Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ControlNameStr)




      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `validator`: 
      :type `validator`: wx.Validator
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. staticmethod:: Ellipsize(label, dc, mode, maxWidth, flags=ELLIPSIZE_FLAGS_DEFAULT)

      Replaces parts of the `label`  string with ellipsis, if needed, so that it fits into `maxWidth`  pixels if possible.                  

      Note that this function does `not`  guarantee that the returned string will always be shorter than `maxWidth`; if `maxWidth`  is extremely small, ellipsized text may be larger. 




      :param `label`: The string to ellipsize   
      :type `label`: string
      :param `dc`: The DC used to retrieve the character widths through the :meth:`wx.DC.GetPartialTextExtents`   function.   
      :type `dc`: wx.DC
      :param `mode`: The ellipsization mode. This is the setting which determines which part of the string should be replaced by the ellipsis (unless it is ``ELLIPSIZE_NONE``  in which case nothing is done). See :ref:`wx.EllipsizeMode`  enumeration values for more info.   
      :type `mode`: wx.EllipsizeMode
      :param `maxWidth`: The maximum width of the returned string in pixels. This argument determines how much characters of the string need to be removed (and replaced by ellipsis).   
      :type `maxWidth`: int
      :param `flags`: One or more of the :ref:`wx.EllipsizeFlags`  enumeration values combined.   
      :type `flags`: int














      :rtype: `string`



                  





   .. staticmethod:: EscapeMnemonics(text)

      Escapes the special mnemonics characters ("&") in the given string.                  

      This function can be helpful if you need to set the controls label to a user-provided string. If the string contains ampersands, they wouldn't appear on the display but be used instead to indicate that the character following the first of them can be used as a control mnemonic. While this can sometimes be desirable (e.g. to allow the user to configure mnemonics of the controls), more often you will want to use this function before passing a user-defined string to :meth:`SetLabel` . Alternatively, if the label is entirely user-defined, you can just call :meth:`SetLabelText`   directly –  but this function must be used if the label is a combination of a part defined by program containing the control mnemonics and a user-defined part. 




      :param `text`: The string such as it should appear on the display.   
      :type `text`: string






      :rtype: `string`



                  



      :returns: 

         The same string with the ampersands in it doubled.   








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: GetLabel(self)

      Returns the control's label, as it was passed to :meth:`SetLabel` .                  

      Note that the returned string may contains mnemonics ("&" characters) if they were passed to the :meth:`SetLabel`   function; use :meth:`GetLabelText`   if they are undesired. 

      Also note that the returned string is always the string which was passed to :meth:`SetLabel`   but may be different from the string passed to :meth:`SetLabelText`   (since this last one escapes mnemonic characters).                  

      :rtype: `string`








   .. method:: GetLabelText(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **GetLabelText** `(self)`
      
      Returns the control's label without mnemonics.                  
      
      Note that because of the stripping of the mnemonics the returned string may differ from the string which was passed to :meth:`SetLabel`   but should always be the same which was passed to :meth:`SetLabelText` .                  
      
      :rtype: `string`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **GetLabelText** `(label)`
      
      Returns the given `label`  string without mnemonics ("&" characters).                  
      
      
      :param `label`: 
      :type `label`: string
      
      
      
      
      :rtype: `string`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: GetSizeFromText(self, text)

      Determine the minimum size needed by the control to display the given text.                  

      The helper function that uses combination of :meth:`GetSizeFromTextSize`   and :meth:`GetTextExtent`   which used together pretty often: ::

          # GetSizeFromText is a simpler way to do this:
          size = self.GetSizeFromTextSize(self.GetTextExtent(text).GetWidth())






      :param `text`: The given text.   
      :type `text`: string






      :rtype: :ref:`wx.Size`



                  



      :returns: 

         The size that the control should have to leave the area of the specified text. May return DefaultSize if this method is not implemented for this particular control under the current platform.  







      .. versionadded:: 4.1/wxWidgets-3.1.3  
     








   .. method:: GetSizeFromTextSize(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **GetSizeFromTextSize** `(self, xlen, ylen=-1)`
      
      Determine the size needed by the control to leave the given area for its text.                  
      
      This function is mostly useful with control displaying short amounts of text that can be edited by the user, e.g. :ref:`wx.TextCtrl`, :ref:`wx.ComboBox`, :ref:`wx.SearchCtrl`  etc. Typically it is used to size these controls for the maximal amount of input they are supposed to contain, for example: ::
      
          # Create a control for post code entry.
          postcode = wx.TextCtrl(self, -1, "")
      
          # And set its initial and minimal size to be big enough for
          # entering 5 digits.
          postcode.SetInitialSize(
              postcode.GetSizeFromTextSize(
                  postcode.GetTextExtent("99999")))
      
      
      
      Currently this method is only implemented for :ref:`wx.TextCtrl`, :ref:`wx.ComboBox`  and :ref:`wx.Choice`  in wxMSW and wxGTK. 
      
      
      
      
      :param `xlen`: The horizontal extent of the area to leave for text, in pixels.   
      :type `xlen`: int
      :param `ylen`: The vertical extent of the area to leave for text, in pixels. By default -1 meaning that the vertical component of the returned size should be the default height of this control.   
      :type `ylen`: int
      
      
      
      
      
      
      
      
      :rtype: :ref:`wx.Size`
      
      
      
                        
      
      
      
      :returns: 
      
         The size that the control should have to leave the area of the specified size for its text. May return DefaultSize if this method is not implemented for this particular control under the current platform.  
      
      
      
      
      
      
      
      .. versionadded:: 2.9.5 
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **GetSizeFromTextSize** `(self, tsize)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `tsize`: 
      :type `tsize`: wx.Size
      
      
      
      
      :rtype: :ref:`wx.Size`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. staticmethod:: RemoveMnemonics(str)

      Returns the given `str`  string without mnemonics ("&" characters).                  

                


      :param `str`: 
      :type `str`: string




      :rtype: `string`







      .. note:: 

         This function is identical to :meth:`GetLabelText`   and is provided mostly for symmetry with :meth:`EscapeMnemonics` .   








   .. method:: SetLabel(self, label)

      Sets the control's label.                  

      All "&" characters in the `label`  are special and indicate that the following character is a `mnemonic`  for this control and can be used to activate it from the keyboard (typically by using `Alt`  key in combination with it). To insert a literal ampersand character, you need to float it, i.e. use "``&&``". If this behaviour is undesirable, use :meth:`SetLabelText`   instead.                  


      :param `label`: 
      :type `label`: string







   .. method:: SetLabelMarkup(self, markup)

      Sets the controls label to a string using markup.                  

      Simple markup supported by this function can be used to apply different fonts or colours to different parts of the control label when supported. If markup is not supported by the control or platform, it is simply stripped and :meth:`SetLabel`   is used with the resulting string. 

      For example, ::

                      text = wx.StaticText(self, -1, 'Hello world!')

                      # Some more code...
                      text.SetLabelMarkup("<b>&ampBed</b> &ampmp "
                                           "<span foreground='red'>breakfast</span> "
                                           "available <big>HERE</big>")

      would show the string using bold, red and big for the corresponding words under wxGTK but will simply show the string "Bed &amp; breakfast available ``HERE``" on the other platforms. In any case, the "B" of "Bed" will be underlined to indicate that it can be used as a mnemonic for this control. 

      The supported tags are: 

      =========== ========================================================================= 
      **Tag**     **Description**                                                           
      =========== ========================================================================= 
      <b>         bold text                                                                 
      <big>       bigger text                                                               
      <i>         italic text                                                               
      <s>         strike-through text                                                       
      <small>     smaller text                                                              
      <tt>        monospaced text                                                           
      <u>         underlined text                                                           
      <span>      generic formatter tag, see the table below for supported attributes.      
      =========== ========================================================================= 

      |



      Supported  ``<span>``   attributes:  

      ============================= =============================================================================================================================================================================================================================================================================================== 
      **Name**                      **Description**                                                                                                                                                                                                                                                                                 
      ============================= =============================================================================================================================================================================================================================================================================================== 
      foreground, fgcolor, color    Foreground text colour, can be a name or ``RGB`` value.                                                                                                                                                                                                                                         
      background, bgcolor           Background text colour, can be a name or ``RGB`` value.                                                                                                                                                                                                                                         
      font_family, face             Font face name.                                                                                                                                                                                                                                                                                 
      font_weight, weight           Numeric value in 0..900 range or one of "ultralight", "light", "normal" (all meaning non-bold), "bold", "ultrabold" and "heavy" (all meaning bold).                                                                                                                                             
      font_style, style             Either "oblique" or "italic" (both with the same meaning) or "normal".                                                                                                                                                                                                                          
      size                          The font size can be specified either as "smaller" or "larger" relatively to the current font, as a CSS font size name ("xx-small", "x-small", "small", "medium", "large", "x-large" or "xx-large") or as a number giving font size in 1024th parts of a point, i.e. 10240 for a 10pt font.     
      ============================= =============================================================================================================================================================================================================================================================================================== 

      |



      This markup language is a strict subset of Pango markup (described at `http://library.gnome.org/devel/pango/unstable/PangoMarkupFormat.html <http://library.gnome.org/devel/pango/unstable/PangoMarkupFormat.html>`_) and any tags and span attributes not documented above can't be used under non-GTK platforms. 

      Also note that you need to escape the following special characters: 

      ========================= ========================================== 
      **Special character**     **Escape as**                              
      ========================= ========================================== 
      ``&``                     ``&amp`` ; or as   ``&&``                  
      ``'``                     ``&apos`` ;                                
      ``"``                     ``&quot`` ;                                
      ``<``                     ``&lt`` ;                                  
      ``>``                     ``&gt`` ;                                  
      ========================= ========================================== 

      |



      The non-escaped ampersand  ``&``   characters are interpreted as mnemonics as with  :meth:`wx.Control.SetLabel` . 




      :param `markup`: String containing markup for the label. It may contain markup tags described above and newline characters but currently only wxGTK and wxOSX support multiline labels with markup, the generic implementation (also used in wxMSW) only handles single line markup labels. Notice that the string must be well-formed (e.g. all tags must be correctly closed) and won't be shown at all otherwise.   
      :type `markup`: string






      :rtype: `bool`




      Currently  :ref:`wx.Button`  supports markup in all major ports (wxMSW, wxGTK and OSX/Cocoa) while :ref:`wx.StaticText`  supports it in wxGTK and wxOSX and its generic version (which can be used under MSW if markup support is required). Extending support to more controls is planned in the future. 

                 



      :returns: 

         ``True`` if the new label was set (even if markup in it was ignored) or ``False`` if we failed to parse the markup. In this case the label remains unchanged.  







      .. versionadded:: 2.9.2 
     








   .. method:: SetLabelText(self, text)

      Sets the control's label to exactly the given string.                  

      Unlike :meth:`SetLabel` , this function shows exactly the `text`  passed to it in the control, without interpreting ampersands in it in any way. Notice that it means that the control can't have any mnemonic defined for it using this function. 

                


      :param `text`: 
      :type `text`: string






      .. seealso:: :meth:`EscapeMnemonics`     








   .. attribute:: Label

      See :meth:`~wx.Control.GetLabel` and :meth:`~wx.Control.SetLabel`


   .. attribute:: LabelText

      See :meth:`~wx.Control.GetLabelText` and :meth:`~wx.Control.SetLabelText`

