.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.propgrid.PGTextCtrlEditor:

==========================================================================================================================================
|phoenix_title|  **wx.propgrid.PGTextCtrlEditor**
==========================================================================================================================================





|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>PGTextCtrlEditor</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.propgrid.PGTextCtrlEditor_inheritance.png" alt="Inheritance diagram of PGTextCtrlEditor" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.propgrid.PGTextCtrlEditor.html" title="wx.propgrid.PGTextCtrlEditor" alt="" coords="5,160,215,189"/> <area shape="rect" id="node2" href="wx.propgrid.PGEditor.html" title="wx.propgrid.PGEditor" alt="" coords="31,83,189,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="67,5,153,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.propgrid.PGSpinCtrlEditor`, :ref:`wx.propgrid.PGTextCtrlAndButtonEditor`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.propgrid.PGTextCtrlEditor.__init__`                                   
:meth:`~wx.propgrid.PGTextCtrlEditor.CreateControls`                             Instantiates editor controls.
:meth:`~wx.propgrid.PGTextCtrlEditor.GetName`                                    Returns pointer to the name of the editor.
:meth:`~wx.propgrid.PGTextCtrlEditor.GetTextCtrlValueFromControl`                
:meth:`~wx.propgrid.PGTextCtrlEditor.GetValueFromControl`                        Returns value from control, via parameter `variant`.
:meth:`~wx.propgrid.PGTextCtrlEditor.OnEvent`                                    Handles events.
:meth:`~wx.propgrid.PGTextCtrlEditor.OnFocus`                                    Extra processing when control gains focus.
:meth:`~wx.propgrid.PGTextCtrlEditor.OnTextCtrlEvent`                            
:meth:`~wx.propgrid.PGTextCtrlEditor.SetControlStringValue`                      Sets control's value specifically from string.
:meth:`~wx.propgrid.PGTextCtrlEditor.UpdateControl`                              Loads value from property to the control.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.propgrid.PGTextCtrlEditor.Name`                                       See :meth:`~wx.propgrid.PGTextCtrlEditor.GetName`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.propgrid.PGTextCtrlEditor(PGEditor)

   **Possible constructors**::

       PGTextCtrlEditor()
       



   .. method:: __init__(self)






   .. method:: CreateControls(self, propgrid, property, pos, size)

      Instantiates editor controls.                  




      :param `propgrid`: :ref:`wx.propgrid.PropertyGrid`  to which the property belongs (use as parent for control).  
      :type `propgrid`: wx.propgrid.PropertyGrid
      :param `property`: Property for which this method is called.  
      :type `property`: wx.propgrid.PGProperty
      :param `pos`: Position, inside :ref:`wx.propgrid.PropertyGrid`, to create control(s) to.  
      :type `pos`: wx.Point
      :param `size`: Initial size for control(s).  
      :type `size`: wx.Size












      :rtype: :ref:`wx.propgrid.PGWindowList`



                  



      .. note:: 

   

         - Unlike in previous version of :ref:`wx.propgrid.PropertyGrid`, it is no longer necessary to call :meth:`wx.EvtHandler.Connect`   for interesting editor events. Instead, all events from control are now automatically forwarded to :meth:`wx.propgrid.PGEditor.OnEvent`   and :meth:`wx.propgrid.PGProperty.OnEvent` .  











   .. method:: GetName(self)

      Returns pointer to the name of the editor.                  

      For example, PGEditor_TextCtrl has name "TextCtrl". If you don't need to access your custom editor by string name, then you do not need to implement this function.                  

      :rtype: `string`








   .. staticmethod:: GetTextCtrlValueFromControl(variant, property, ctrl)




      :param `variant`: 
      :type `variant`: PGVariant
      :param `property`: 
      :type `property`: wx.propgrid.PGProperty
      :param `ctrl`: 
      :type `ctrl`: wx.Window




      :rtype: `bool`








   .. method:: GetValueFromControl(self, variant, property, ctrl)

      Returns value from control, via parameter `variant`.                  

      Usually ends up calling property's StringToValue() or IntToValue(). Returns ``True`` if value was different.                  


      :param `variant`: 
      :type `variant`: PGVariant
      :param `property`: 
      :type `property`: wx.propgrid.PGProperty
      :param `ctrl`: 
      :type `ctrl`: wx.Window




      :rtype: `bool`








   .. method:: OnEvent(self, propgrid, property, wnd_primary, event)

      Handles events.                  

      Returns ``True`` if value in control was modified (see :meth:`wx.propgrid.PGProperty.OnEvent`   for more information). 

                


      :param `propgrid`: 
      :type `propgrid`: wx.propgrid.PropertyGrid
      :param `property`: 
      :type `property`: wx.propgrid.PGProperty
      :param `wnd_primary`: 
      :type `wnd_primary`: wx.Window
      :param `event`: 
      :type `event`: wx.Event




      :rtype: `bool`







      .. note:: 

         :ref:`wx.propgrid.PropertyGrid`  will automatically unfocus the editor when  ``wxEVT_TEXT_ENTER``   is received and when it results in property value being modified. This happens regardless of editor type (i.e. behaviour is same for any  :ref:`wx.TextCtrl`  and :ref:`wx.ComboBox`  based editor).   








   .. method:: OnFocus(self, property, wnd)

      Extra processing when control gains focus.                  

      For example, :ref:`wx.TextCtrl`  based controls should select all text.                  


      :param `property`: 
      :type `property`: wx.propgrid.PGProperty
      :param `wnd`: 
      :type `wnd`: wx.Window







   .. staticmethod:: OnTextCtrlEvent(propgrid, property, ctrl, event)




      :param `propgrid`: 
      :type `propgrid`: wx.propgrid.PropertyGrid
      :param `property`: 
      :type `property`: wx.propgrid.PGProperty
      :param `ctrl`: 
      :type `ctrl`: wx.Window
      :param `event`: 
      :type `event`: wx.Event




      :rtype: `bool`








   .. method:: SetControlStringValue(self, property, ctrl, txt)

      Sets control's value specifically from string.                  


      :param `property`: 
      :type `property`: wx.propgrid.PGProperty
      :param `ctrl`: 
      :type `ctrl`: wx.Window
      :param `txt`: 
      :type `txt`: string







   .. method:: UpdateControl(self, property, ctrl)

      Loads value from property to the control.                  


      :param `property`: 
      :type `property`: wx.propgrid.PGProperty
      :param `ctrl`: 
      :type `ctrl`: wx.Window







   .. attribute:: Name

      See :meth:`~wx.propgrid.PGTextCtrlEditor.GetName`

