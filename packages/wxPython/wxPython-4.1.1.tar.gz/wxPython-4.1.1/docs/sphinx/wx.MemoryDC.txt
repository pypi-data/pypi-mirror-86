.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.MemoryDC:

==========================================================================================================================================
|phoenix_title|  **wx.MemoryDC**
==========================================================================================================================================

A memory device context provides a means to draw graphics onto a bitmap.          

When drawing in to a mono-bitmap, using  ``WHITE`` ,   ``WHITE_PEN``   and   ``WHITE_BRUSH``   will draw the background colour (i.e. 0) whereas all other colours will draw the foreground colour (i.e. 1). 

A bitmap must be selected into the new memory DC before it may be used for anything. Typical usage is as follows: 

::

        # Create a memory DC
        temp_dc = wx.MemoryDC()
        temp_dc.SelectObject(test_bitmap)

        # We can now draw into the memory DC...
        # Copy from this DC to another DC.
        old_dc.Blit(250, 50, BITMAP_WIDTH, BITMAP_HEIGHT, temp_dc, 0, 0)



Note that the memory DC must be deleted (or the bitmap selected out of it) before a bitmap can be reselected into another memory DC. 

And, before performing any other operations on the bitmap data, the bitmap must be selected out of the memory DC: 

::

        temp_dc.SelectObject(wx.NullBitmap)



This happens automatically when :ref:`wx.MemoryDC`  object goes out of scope. 







         



.. seealso:: :ref:`wx.Bitmap`, :ref:`wx.DC`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>MemoryDC</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.MemoryDC_inheritance.png" alt="Inheritance diagram of MemoryDC" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.MemoryDC.html" title="wx.MemoryDC" alt="" coords="5,160,123,189"/> <area shape="rect" id="node2" href="wx.DC.html" title="wx.DC" alt="" coords="28,83,100,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="21,5,107,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.BufferedDC`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.MemoryDC.__init__`                                                    Constructs a new memory device context.
:meth:`~wx.MemoryDC.GetSelectedBitmap`                                           
:meth:`~wx.MemoryDC.SelectObject`                                                Works exactly like :meth:`~MemoryDC.SelectObjectAsSource`   but this is the function you should use when you select a bitmap because you want to modify it, e.g.
:meth:`~wx.MemoryDC.SelectObjectAsSource`                                        Selects the given bitmap into the device context, to use as the memory bitmap.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.MemoryDC.SelectedBitmap`                                              See :meth:`~wx.MemoryDC.GetSelectedBitmap`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.MemoryDC(DC)

   **Possible constructors**::

       MemoryDC()
       
       MemoryDC(dc)
       
       MemoryDC(bitmap)
       
   
   A memory device context provides a means to draw graphics onto a
   bitmap.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Constructs a new memory device context.                  
      
      Use the :meth:`wx.DC.IsOk`   member to test whether the constructor was successful in creating a usable device context. Don't forget to select a bitmap into the DC before drawing on it.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, dc)`
      
      Constructs a new memory device context having the same characteristics as the given existing device context.                  
      
      This constructor creates a memory device context `compatible`  with `dc`  in wxMSW, the argument is ignored in the other ports. If `dc`  is ``None``, a device context compatible with the screen is created, just as with the default constructor.                  
      
      
      :param `dc`: 
      :type `dc`: wx.DC
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, bitmap)`
      
      Constructs a new memory device context and calls :meth:`SelectObject`   with the given bitmap.                  
      
      Use the :meth:`wx.DC.IsOk`   member to test whether the constructor was successful in creating a usable device context.                  
      
      
      :param `bitmap`: 
      :type `bitmap`: wx.Bitmap
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: GetSelectedBitmap(self)



      :rtype: :ref:`wx.Bitmap`








   .. method:: SelectObject(self, bitmap)

      Works exactly like :meth:`SelectObjectAsSource`   but this is the function you should use when you select a bitmap because you want to modify it, e.g.                  

      drawing on this DC. 

      Using :meth:`SelectObjectAsSource`   when modifying the bitmap may incur some problems related to :ref:`wx.Bitmap`  being a reference counted object (see :ref:`Reference Counting <reference counting>`). 

      Before using the updated bitmap data, make sure to select it out of context first either by selecting :ref:`wx.NullBitmap`  into the device context or destroying the device context entirely. 

      If the bitmap is already selected in this device context, nothing is done. If it is selected in another context, the function asserts and drawing on the bitmap won't work correctly. 

                


      :param `bitmap`: 
      :type `bitmap`: wx.Bitmap






      .. seealso:: :meth:`wx.DC.DrawBitmap`     








   .. method:: SelectObjectAsSource(self, bitmap)

      Selects the given bitmap into the device context, to use as the memory bitmap.                  

      Selecting the bitmap into a memory DC allows you to draw into the DC (and therefore the bitmap) and also to use :meth:`wx.DC.Blit`   to copy the bitmap to a window. For this purpose, you may find :meth:`wx.DC.DrawIcon`   easier to use instead. 

      If the argument is :ref:`wx.NullBitmap`  (or some other uninitialised :ref:`wx.Bitmap`) the current bitmap is selected out of the device context, and the original bitmap restored, allowing the current bitmap to be destroyed safely.                  


      :param `bitmap`: 
      :type `bitmap`: wx.Bitmap







   .. attribute:: SelectedBitmap

      See :meth:`~wx.MemoryDC.GetSelectedBitmap`

