.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.propgrid.FloatProperty:

==========================================================================================================================================
|phoenix_title|  **wx.propgrid.FloatProperty**
==========================================================================================================================================

Basic property with double-precision floating point value.          

**Supported special attributes:**

- ``PG_FLOAT_PRECISION``: Sets the (max) precision used when floating point value is rendered as text. The default -1 means infinite precision. 
- ``PG_ATTR_MIN``, ``PG_ATTR_MAX``, ``PG_ATTR_SPINCTRL_STEP``, ``PG_ATTR_SPINCTRL_WRAP``, ``PG_ATTR_SPINCTRL_MOTION``: like in :ref:`wx.propgrid.NumericProperty`.  


          




|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>FloatProperty</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.propgrid.FloatProperty_inheritance.png" alt="Inheritance diagram of FloatProperty" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.propgrid.FloatProperty.html" title="wx.propgrid.FloatProperty" alt="" coords="17,237,207,267"/> <area shape="rect" id="node2" href="wx.propgrid.NumericProperty.html" title="wx.propgrid.NumericProperty" alt="" coords="5,160,219,189"/> <area shape="rect" id="node3" href="wx.propgrid.PGProperty.html" title="wx.propgrid.PGProperty" alt="" coords="24,83,200,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="69,5,155,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.propgrid.FloatProperty.__init__`                                      
:meth:`~wx.propgrid.FloatProperty.AddSpinStepValue`                              Returns what would be the new value of the property after adding SpinCtrl editor step to the current value.
:meth:`~wx.propgrid.FloatProperty.DoGetValidator`                                Returns pointer to the :ref:`wx.Validator`  that should be used with the editor of this property (``None`` for no validator).
:meth:`~wx.propgrid.FloatProperty.DoSetAttribute`                                Reimplement this member function to add special handling for attributes of this property.
:meth:`~wx.propgrid.FloatProperty.GetClassValidator`                             
:meth:`~wx.propgrid.FloatProperty.StringToValue`                                 Converts text into :ref:`Variant`  value appropriate for this property.
:meth:`~wx.propgrid.FloatProperty.ValidateValue`                                 Implement this function in derived class to check the value.
:meth:`~wx.propgrid.FloatProperty.ValueToString`                                 Converts property value into a text representation.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.propgrid.FloatProperty(NumericProperty)

   **Possible constructors**::

       FloatProperty(label=PG_LABEL, name=PG_LABEL, value=0.0)
       
   
   Basic property with double-precision floating point value.



   .. method:: __init__(self, label=PG_LABEL, name=PG_LABEL, value=0.0)




      :param `label`: 
      :type `label`: string
      :param `name`: 
      :type `name`: string
      :param `value`: 
      :type `value`: float







   .. method:: AddSpinStepValue(self, stepScale)

      Returns what would be the new value of the property after adding SpinCtrl editor step to the current value.                  

      Current value range and wrapping (if enabled) are taken into account. This member has to be implemented in derived properties. 




      :param `stepScale`: SpinCtrl editor step is first multiplied by this factor and next added to the current value.  
      :type `stepScale`: long






      :rtype: :ref:`PGVariant`



                  



      :returns: 

         Value which property would have after adding SpinCtrl editor step.  







      .. note:: 

         Current property value is not changed.   








   .. method:: DoGetValidator(self)

      Returns pointer to the :ref:`wx.Validator`  that should be used with the editor of this property (``None`` for no validator).                  

      Setting validator explicitly via SetPropertyValidator will override this. 

      In most situations, code like this should work well (macros are used to maintain one actual validator instance, so on the second call the function exits within the first macro): 

      ::

          class MyPropertyClass(wx.propgrid.FloatProperty):
              ...
              def DoGetValidator(self):
                  validator = MyValidator(...)

                  ... prepare validator...

                  return validator



                

      :rtype: :ref:`Validator`







      .. note:: 

         You can get common filename validator by returning :meth:`wx.propgrid.FileProperty.GetClassValidator` . :ref:`wx.propgrid.DirProperty`, for example, uses it.   








   .. method:: DoSetAttribute(self, name, value)

      Reimplement this member function to add special handling for attributes of this property.                  

                


      :param `name`: 
      :type `name`: string
      :param `value`: 
      :type `value`: PGVariant




      :rtype: `bool`







      :returns: 

         Return ``False`` to have the attribute automatically stored in m_attributes. Default implementation simply does that and nothing else.  







      .. note:: 

         To actually set property attribute values from the application, use :meth:`wx.propgrid.PGProperty.SetAttribute`   instead.   








   .. staticmethod:: GetClassValidator()



      :rtype: :ref:`Validator`








   .. method:: StringToValue(self, text, argFlags=0)

      Converts text into :ref:`Variant`  value appropriate for this property.                  




      :param `text`: Text to be translated into variant.  
      :type `text`: string
      :param `argFlags`: If ``PG_FULL_VALUE``  is set, returns complete, storable value instead of displayable one (they may be different). If ``PG_COMPOSITE_FRAGMENT``  is set, text is interpreted as a part of composite property string value (as generated by :meth:`ValueToString`   called with this same flag).  
      :type `argFlags`: int










      :rtype: `tuple`




      You might want to take into account that m_value is Null variant if property value is unspecified (which is usually only case if you explicitly enabled that sort behaviour).                    



      :returns: 

         ( `bool`, `variant` ) 







      .. note:: 

         Default implementation converts semicolon delimited tokens into child values. Only works for properties with children.  








   .. method:: ValidateValue(self, value, validationInfo)

      Implement this function in derived class to check the value.                  

      Return ``True`` if it is ok. Returning ``False`` prevents property change events from occurring. 

                


      :param `value`: 
      :type `value`: PGVariant
      :param `validationInfo`: 
      :type `validationInfo`: wx.propgrid.PGValidationInfo




      :rtype: `bool`







      .. note:: 

   

         - Default implementation always returns ``True``.  











   .. method:: ValueToString(self, value, argFlags=0)

      Converts property value into a text representation.                  




      :param `value`: Value to be converted.   
      :type `value`: PGVariant
      :param `argFlags`: If 0 (default value), then displayed string is returned. If ``PG_FULL_VALUE``  is set, returns complete, storable string value instead of displayable. If ``PG_EDITABLE_VALUE``  is set, returns string value that must be editable in textctrl. If ``PG_COMPOSITE_FRAGMENT``  is set, returns text that is appropriate to display as a part of string property's composite text representation.  
      :type `argFlags`: int








      :rtype: `string`



                  



      .. note:: 

         Default implementation calls :meth:`GenerateComposedValue` .   







