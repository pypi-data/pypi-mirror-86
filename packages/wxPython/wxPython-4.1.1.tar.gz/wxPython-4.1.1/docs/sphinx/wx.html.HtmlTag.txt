.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.html.HtmlTag:

==========================================================================================================================================
|phoenix_title|  **wx.html.HtmlTag**
==========================================================================================================================================

This class represents a single HTML tag.          

It is used by :ref:`tag handlers <tag handlers>`. 









|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>HtmlTag</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.html.HtmlTag_inheritance.png" alt="Inheritance diagram of HtmlTag" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.html.HtmlTag.html" title="wx.html.HtmlTag" alt="" coords="5,5,139,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.html.HtmlTag.GetAllParams`                                            Returns a string containing all parameters.
:meth:`~wx.html.HtmlTag.GetName`                                                 Returns tag's name.
:meth:`~wx.html.HtmlTag.GetParam`                                                Returns the value of the parameter.
:meth:`~wx.html.HtmlTag.GetParamAsColour`                                        Interprets tag parameter `par`  as colour specification and saves its value into :ref:`wx.Colour`  variable pointed by `clr`.
:meth:`~wx.html.HtmlTag.GetParamAsInt`                                           Interprets tag parameter `par`  as an integer and saves its value into int variable pointed by `value`.
:meth:`~wx.html.HtmlTag.GetParamAsString`                                        Get the value of the parameter.
:meth:`~wx.html.HtmlTag.HasEnding`                                               Returns ``True`` if this tag is paired with ending tag, ``False`` otherwise.
:meth:`~wx.html.HtmlTag.HasParam`                                                Returns ``True`` if the tag has a parameter of the given name.
:meth:`~wx.html.HtmlTag.ParseAsColour`                                           Parses the given string as an HTML colour.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.html.HtmlTag.AllParams`                                               See :meth:`~wx.html.HtmlTag.GetAllParams`
:attr:`~wx.html.HtmlTag.Name`                                                    See :meth:`~wx.html.HtmlTag.GetName`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.html.HtmlTag(object)

   This class represents a single HTML tag.



   .. method:: GetAllParams(self)

      Returns a string containing all parameters.                  

      Example: tag contains <FONT SIZE=+2 COLOR="#000000">. Call to tag.GetAllParams() would return  ``'SIZE=+2``   COLOR="#000000"'.                   

      :rtype: `string`








   .. method:: GetName(self)

      Returns tag's name.                  

      The name is always in uppercase and it doesn't contain " or '/' characters. (So the name of <FONT SIZE=+2> tag is "FONT" and name of </table> is "``TABLE``").                  

      :rtype: `string`








   .. method:: GetParam(self, par, with_quotes=False)

      Returns the value of the parameter.                  

      You should check whether the parameter exists or not (use :meth:`wx.html.HtmlTag.HasParam` ) first or use :meth:`GetParamAsString`   if you need to distinguish between non-specified and empty parameter values. 




      :param `par`: The parameter's name.   
      :type `par`: string
      :param `with_quotes`: ``True`` if you want to get quotes as well. See example.  
      :type `with_quotes`: bool








      :rtype: `string`



      ::

          # ... Some code here...

          # you have wx.HtmlTag variable tag which is equal to the
          # HTML tag <FONT SIZE=+2 COLOR="#0000FF">
          dummy = tag.GetParam("SIZE")
          # dummy == "+2"
          dummy = tag.GetParam("COLOR")
          # dummy == "#0000FF"
          dummy = tag.GetParam("COLOR", true)
          # dummy == "\"#0000FF\"" -- see the difference!!

                  





   .. method:: GetParamAsColour(self, par)

      Interprets tag parameter `par`  as colour specification and saves its value into :ref:`wx.Colour`  variable pointed by `clr`.                  

      Returns ``True`` on success and ``False`` if `par`  is not colour specification or if the tag has no such parameter. 

                


      :param `par`: 
      :type `par`: string




      :rtype: `tuple`







      :returns: 

         ( `bool`, `clr` ) 







      .. seealso:: :meth:`ParseAsColour`     








   .. method:: GetParamAsInt(self, par)

      Interprets tag parameter `par`  as an integer and saves its value into int variable pointed by `value`.                  

      Returns ``True`` on success and ``False`` if `par`  is not an integer or if the tag has no such parameter.                  


      :param `par`: 
      :type `par`: string




      :rtype: `tuple`







      :returns: 

         ( `bool`, `value` ) 








   .. method:: GetParamAsString(self, par, value)

      Get the value of the parameter.                  

      If the tag doesn't have such parameter at all, simply returns ``False``. Otherwise, fills `value`  with the parameter value and returns ``True``. 




      :param `par`: The parameter's name.   
      :type `par`: string
      :param `value`: Pointer to the string to be filled with the parameter value, must be non-NULL.  
      :type `value`: string








      :rtype: `bool`



                  



      .. versionadded:: 3.0   








   .. method:: HasEnding(self)

      Returns ``True`` if this tag is paired with ending tag, ``False`` otherwise.                  

      See the example of HTML document: 

      .. code-block:: html

          <html><body>
          Hello<p>
          How are you?
          <p align=center>This is centered...</p>
          Oops<br>Oooops!
          </body></html>



      In this example tags HTML and ``BODY`` have ending tags, first P and ``BR`` doesn't have ending tag while the second P has. The third P tag (which is ending itself) of course doesn't have ending tag.                  

      :rtype: `bool`








   .. method:: HasParam(self, par)

      Returns ``True`` if the tag has a parameter of the given name.                  

      Example: <FONT SIZE=+2 COLOR="\\#FF00FF"> has two parameters named "SIZE" and "COLOR". 




      :param `par`: the parameter you're looking for.   
      :type `par`: string






      :rtype: `bool`



                  





   .. staticmethod:: ParseAsColour(str)

      Parses the given string as an HTML colour.                  

      This function recognizes the standard named HTML 4 colours as well as the usual ``RGB`` syntax. 

                


      :param `str`: 
      :type `str`: string




      :rtype: `tuple`







      :returns: 

         ( `bool`, `clr` ) 







      .. versionadded:: 2.9.1 
    







      .. seealso:: :meth:`wx.Colour.Set`   








   .. attribute:: AllParams

      See :meth:`~wx.html.HtmlTag.GetAllParams`


   .. attribute:: Name

      See :meth:`~wx.html.HtmlTag.GetName`

