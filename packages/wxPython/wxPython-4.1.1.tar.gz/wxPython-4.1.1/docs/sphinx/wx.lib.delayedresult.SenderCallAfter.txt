.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.delayedresult

.. highlight:: python



.. _wx.lib.delayedresult.SenderCallAfter:

==========================================================================================================================================
|phoenix_title|  **wx.lib.delayedresult.SenderCallAfter**
==========================================================================================================================================

This sender sends the delayed result produced in the worker thread
to a callable in the main thread, via wx.CallAfter.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>SenderCallAfter</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.delayedresult.SenderCallAfter_inheritance.png" alt="Inheritance diagram of SenderCallAfter" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.delayedresult.SenderCallAfter.html" title="wx.lib.delayedresult.SenderCallAfter" alt="" coords="5,83,265,112"/> <area shape="rect" id="node2" href="wx.lib.delayedresult.Sender.html" title="wx.lib.delayedresult.Sender" alt="" coords="34,5,237,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.lib.delayedresult.Sender`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.delayedresult.SenderCallAfter.__init__`                           The optional jobID can be anything that you want to use to
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: SenderCallAfter( Sender )

   This sender sends the delayed result produced in the worker thread
   to a callable in the main thread, via wx.CallAfter.

   .. method:: __init__(self, listener, jobID=None, args=(), kwargs={})

      The optional jobID can be anything that you want to use to
      track which sender particular results come from. 


