.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.TextEntry:

==========================================================================================================================================
|phoenix_title|  **wx.TextEntry**
==========================================================================================================================================

Common base class for single line text entry fields.          

This class is not a control itself, as it doesn't derive from :ref:`wx.Window`. Instead it is used as a base class by other controls, notably :ref:`wx.TextCtrl`  and :ref:`wx.ComboBox`  and gathers the methods common to both of them. 







         



.. versionadded:: 2.9.0 
     







.. seealso:: :ref:`wx.TextCtrl`, :ref:`wx.ComboBox`  







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>TextEntry</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.TextEntry_inheritance.png" alt="Inheritance diagram of TextEntry" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.TextEntry.html" title="wx.TextEntry" alt="" coords="5,5,112,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.ComboBox`, :ref:`wx.ComboCtrl`, :ref:`wx.stc.StyledTextCtrl`, :ref:`wx.TextCtrl`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.TextEntry.AppendText`                                                 Appends the text to the end of the text control.
:meth:`~wx.TextEntry.AutoComplete`                                               Call this function to enable auto-completion of the text typed in a single-line text control using the given `choices`.
:meth:`~wx.TextEntry.AutoCompleteDirectories`                                    Call this function to enable auto-completion of the text using the file system directories.
:meth:`~wx.TextEntry.AutoCompleteFileNames`                                      Call this function to enable auto-completion of the text typed in a single-line text control using all valid file system paths.
:meth:`~wx.TextEntry.CanCopy`                                                    Returns ``True`` if the selection can be copied to the clipboard.
:meth:`~wx.TextEntry.CanCut`                                                     Returns ``True`` if the selection can be cut to the clipboard.
:meth:`~wx.TextEntry.CanPaste`                                                   Returns ``True`` if the contents of the clipboard can be pasted into the text control.
:meth:`~wx.TextEntry.CanRedo`                                                    Returns ``True`` if there is a redo facility available and the last operation can be redone.
:meth:`~wx.TextEntry.CanUndo`                                                    Returns ``True`` if there is an undo facility available and the last operation can be undone.
:meth:`~wx.TextEntry.ChangeValue`                                                Sets the new text control value.
:meth:`~wx.TextEntry.Clear`                                                      Clears the text in the control.
:meth:`~wx.TextEntry.Copy`                                                       Copies the selected text to the clipboard.
:meth:`~wx.TextEntry.Cut`                                                        Copies the selected text to the clipboard and removes it from the control.
:meth:`~wx.TextEntry.ForceUpper`                                                 Convert all text entered into the control to upper case.
:meth:`~wx.TextEntry.GetHint`                                                    Returns the current hint string.
:meth:`~wx.TextEntry.GetInsertionPoint`                                          Returns the insertion point, or cursor, position.
:meth:`~wx.TextEntry.GetLastPosition`                                            Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control.
:meth:`~wx.TextEntry.GetMargins`                                                 Returns the margins used by the control.
:meth:`~wx.TextEntry.GetRange`                                                   Returns the string containing the text starting in the positions `from`  and up to `to`  in the control.
:meth:`~wx.TextEntry.GetSelection`                                               Gets the current selection span.
:meth:`~wx.TextEntry.GetStringSelection`                                         Gets the text currently selected in the control.
:meth:`~wx.TextEntry.GetValue`                                                   Gets the contents of the control.
:meth:`~wx.TextEntry.IsEditable`                                                 Returns ``True`` if the controls contents may be edited by user (note that it always can be changed by the program).
:meth:`~wx.TextEntry.IsEmpty`                                                    Returns ``True`` if the control is currently empty.
:meth:`~wx.TextEntry.Paste`                                                      Pastes text from the clipboard to the text item.
:meth:`~wx.TextEntry.Redo`                                                       If there is a redo facility and the last operation can be redone, redoes the last operation.
:meth:`~wx.TextEntry.Remove`                                                     Removes the text starting at the first given position up to (but not including) the character at the last position.
:meth:`~wx.TextEntry.Replace`                                                    Replaces the text starting at the first position up to (but not including) the character at the last position with the given text.
:meth:`~wx.TextEntry.SelectAll`                                                  Selects all text in the control.
:meth:`~wx.TextEntry.SelectNone`                                                 Deselects selected text in the control.
:meth:`~wx.TextEntry.SetEditable`                                                Makes the text item editable or read-only, overriding the ``wx.TE_READONLY``  flag.
:meth:`~wx.TextEntry.SetHint`                                                    Sets a hint shown in an empty unfocused text control.
:meth:`~wx.TextEntry.SetInsertionPoint`                                          Sets the insertion point at the given position.
:meth:`~wx.TextEntry.SetInsertionPointEnd`                                       Sets the insertion point at the end of the text control.
:meth:`~wx.TextEntry.SetMargins`                                                 Attempts to set the control margins.
:meth:`~wx.TextEntry.SetMaxLength`                                               This function sets the maximum number of characters the user can enter into the control.
:meth:`~wx.TextEntry.SetSelection`                                               Selects the text starting at the first position up to (but not including) the character at the last position.
:meth:`~wx.TextEntry.SetValue`                                                   Sets the new text control value.
:meth:`~wx.TextEntry.Undo`                                                       If there is an undo facility and the last operation can be undone, undoes the last operation.
:meth:`~wx.TextEntry.WriteText`                                                  Writes the text into the text control at the current insertion position.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.TextEntry.Hint`                                                       See :meth:`~wx.TextEntry.GetHint` and :meth:`~wx.TextEntry.SetHint`
:attr:`~wx.TextEntry.InsertionPoint`                                             See :meth:`~wx.TextEntry.GetInsertionPoint` and :meth:`~wx.TextEntry.SetInsertionPoint`
:attr:`~wx.TextEntry.LastPosition`                                               See :meth:`~wx.TextEntry.GetLastPosition`
:attr:`~wx.TextEntry.Margins`                                                    See :meth:`~wx.TextEntry.GetMargins` and :meth:`~wx.TextEntry.SetMargins`
:attr:`~wx.TextEntry.StringSelection`                                            See :meth:`~wx.TextEntry.GetStringSelection`
:attr:`~wx.TextEntry.Value`                                                      See :meth:`~wx.TextEntry.GetValue` and :meth:`~wx.TextEntry.SetValue`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.TextEntry(object)

   Common base class for single line text entry fields.



   .. method:: AppendText(self, text)

      Appends the text to the end of the text control.                  




      :param `text`: Text to write to the text control.  
      :type `text`: string




                  



      .. note:: 

         After the text is appended, the insertion point will be at the end of the text control. If this behaviour is not desired, the programmer should use :meth:`GetInsertionPoint`   and :meth:`SetInsertionPoint` .  







      .. seealso:: :meth:`WriteText`     








   .. method:: AutoComplete(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **AutoComplete** `(self, choices)`
      
      Call this function to enable auto-completion of the text typed in a single-line text control using the given `choices`.                  
      
                      
      
      
      :param `choices`: 
      :type `choices`: list of strings
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :returns: 
      
         ``True`` if the auto-completion was enabled or ``False`` if the operation failed, typically because auto-completion is not supported by the current platform.  
      
      
      
      
      
      
      
      .. versionadded:: 2.9.0 
          
      
      
      
      
      
      
      
      .. seealso:: :meth:`AutoCompleteFileNames`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **AutoComplete** `(self, completer)`
      
      Enable auto-completion using the provided completer object.                  
      
      This method should be used instead of :meth:`AutoComplete`   overload taking the array of possible completions if the total number of strings is too big as it allows returning the completions dynamically, depending on the text already entered by user and so is more efficient. 
      
      The specified `completer`  object will be used to retrieve the list of possible completions for the already entered text and will be deleted by :ref:`wx.TextEntry`  itself when it's not needed any longer. 
      
      Notice that you need to include  :ref:`/textcompleter.h`  in order to define your class inheriting from  :ref:`wx.TextCompleter`. 
      
      
      
      
      :param `completer`: The object to be used for generating completions if non-NULL. If it is ``None``, auto-completion is disabled. The :ref:`wx.TextEntry`  object takes ownership of this pointer and will delete it in any case (i.e. even if this method returns ``False``).  
      :type `completer`: wx.TextCompleter
      
      
      
      
      
      
      :rtype: `bool`
      
      
      
                        
      
      
      
      :returns: 
      
         ``True`` if the auto-completion was enabled or ``False`` if the operation failed, typically because auto-completion is not supported by the current platform.  
      
      
      
      
      
      
      
      .. versionadded:: 2.9.2 
          
      
      
      
      
      
      
      
      .. seealso:: :ref:`wx.TextCompleter`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AutoCompleteDirectories(self)

      Call this function to enable auto-completion of the text using the file system directories.                  

      Unlike :meth:`AutoCompleteFileNames`   which completes both file names and directories, this function only completes the directory names. 

      Notice that currently this function is only implemented in wxMSW port and does nothing under the other platforms. 

                

      :rtype: `bool`







      :returns: 

         ``True`` if the auto-completion was enabled or ``False`` if the operation failed, typically because auto-completion is not supported by the current platform.  







      .. versionadded:: 2.9.3 
    







      .. seealso:: :meth:`AutoComplete`     








   .. method:: AutoCompleteFileNames(self)

      Call this function to enable auto-completion of the text typed in a single-line text control using all valid file system paths.                  

      Notice that currently this function is only implemented in wxMSW port and does nothing under the other platforms. 

                

      :rtype: `bool`







      :returns: 

         ``True`` if the auto-completion was enabled or ``False`` if the operation failed, typically because auto-completion is not supported by the current platform.  







      .. versionadded:: 2.9.0 
    







      .. seealso:: :meth:`AutoComplete`     








   .. method:: CanCopy(self)

      Returns ``True`` if the selection can be copied to the clipboard.                  

      :rtype: `bool`








   .. method:: CanCut(self)

      Returns ``True`` if the selection can be cut to the clipboard.                  

      :rtype: `bool`








   .. method:: CanPaste(self)

      Returns ``True`` if the contents of the clipboard can be pasted into the text control.                  

      On some platforms (Motif, GTK) this is an approximation and returns ``True`` if the control is editable, ``False`` otherwise.                  

      :rtype: `bool`








   .. method:: CanRedo(self)

      Returns ``True`` if there is a redo facility available and the last operation can be redone.                  

      :rtype: `bool`








   .. method:: CanUndo(self)

      Returns ``True`` if there is an undo facility available and the last operation can be undone.                  

      :rtype: `bool`








   .. method:: ChangeValue(self, value)

      Sets the new text control value.                  

      It also marks the control as not-modified which means that IsModified() would return ``False`` immediately after the call to :meth:`ChangeValue` . 

      The insertion point is set to the start of the control (i.e. position 0) by this function. 

      This functions does not generate the  ``wxEVT_TEXT``   event but otherwise is identical to  :meth:`SetValue` . 

      See :ref:`User Generated Events vs Programmatically Generated Events <user generated events vs programmatically generated events>`  for more information. 




      :param `value`: The new value to set. It may contain newline characters if the text control is multi-line.   
      :type `value`: string




                  



      .. versionadded:: 2.7.1 
    








   .. method:: Clear(self)

      Clears the text in the control.                  

      Note that this function will generate a  ``wxEVT_TEXT``   event, i.e. its effect is identical to calling   ``SetValue`` ("").                    





   .. method:: Copy(self)

      Copies the selected text to the clipboard.                   





   .. method:: Cut(self)

      Copies the selected text to the clipboard and removes it from the control.                   





   .. method:: ForceUpper(self)

      Convert all text entered into the control to upper case.                  

      Call this method to ensure that all text entered into the control is converted on the fly to upper case. If the control is not empty, its existing contents is also converted to upper case. 

                 



      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. method:: GetHint(self)

      Returns the current hint string.                  

      See :meth:`SetHint`   for more information about hints. 

                

      :rtype: `string`







      .. versionadded:: 2.9.0 
     








   .. method:: GetInsertionPoint(self)

      Returns the insertion point, or cursor, position.                  

      This is defined as the zero based index of the character position to the right of the insertion point. For example, if the insertion point is at the end of the single-line text control, it is equal to :meth:`GetLastPosition` . 

      Notice that insertion position is, in general, different from the index of the character the cursor position at in the string returned by :meth:`GetValue` . While this is always the case for the single line controls, multi-line controls can use two characters  ``"\\r\\n"``   as line separator (this is notably the case under MSW) meaning that indices in the control and its string value are offset by 1 for every line. 

      Hence to correctly get the character at the current cursor position, taking into account that there can be none if the cursor is at the end of the string, you could do the following: 

      ::

                  def GetCurrentChar(textCtrl):

                      pos = textCtrl.GetInsertionPoint()

                      if pos == textCtrl.GetLastPosition():
                          return ''

                      return textCtrl.GetValue()[pos]

                 

      :rtype: `long`








   .. method:: GetLastPosition(self)

      Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control.                  

      :rtype: :ref:`wx.TextPos`








   .. method:: GetMargins(self)

      Returns the margins used by the control.                  

      The  ``x``   field of the returned point is the horizontal margin and the   ``y``   field is the vertical one. 

                

      :rtype: :ref:`wx.Point`







      .. versionadded:: 2.9.1 
     







      .. note:: 

         If given margin cannot be accurately determined, its value will be set to -1. On some platforms you cannot obtain valid margin values until you have called :meth:`SetMargins` .  







      .. seealso:: :meth:`SetMargins`   








   .. method:: GetRange(self, from_, to_)

      Returns the string containing the text starting in the positions `from`  and up to `to`  in the control.                  

      The positions must have been returned by another :ref:`wx.TextCtrl`  method. Please note that the positions in a multiline :ref:`wx.TextCtrl`  do **not**  correspond to the indices in the string returned by :meth:`GetValue`   because of the different new line representations ( ``CR``   or   ``CR``   ``LF``) and so this method should be used to obtain the correct results instead of extracting parts of the entire value. It may also be more efficient, especially if the control contains a lot of data.                   


      :param `from_`: 
      :type `from_`: long
      :param `to_`: 
      :type `to_`: long




      :rtype: `string`








   .. method:: GetSelection(self)

      Gets the current selection span.                  

      If the returned values are equal, there was no selection. Please note that the indices returned may be used with the other :ref:`wx.TextCtrl`  methods but don't necessarily represent the correct indices into the string returned by :meth:`GetValue`   for multiline controls under Windows (at least,) you should use :meth:`GetStringSelection`   to get the selected text. 







      :rtype: `tuple`



      




   .. method:: GetStringSelection(self)

      Gets the text currently selected in the control.                  

      If there is no selection, the returned string is empty.                  

      :rtype: `string`








   .. method:: GetValue(self)

      Gets the contents of the control.                  

      Notice that for a multiline text control, the lines will be separated by (Unix-style)  ``\n``   characters, even under Windows where they are separated by a   ``\r\n``   sequence in the native control.                   

      :rtype: `string`








   .. method:: IsEditable(self)

      Returns ``True`` if the controls contents may be edited by user (note that it always can be changed by the program).                  

      In other words, this functions returns ``True`` if the control hasn't been put in read-only mode by a previous call to :meth:`SetEditable` .                  

      :rtype: `bool`








   .. method:: IsEmpty(self)

      Returns ``True`` if the control is currently empty.                  

      This is the same as  :meth:`GetValue` .empty() but can be much more efficient for the multiline controls containing big amounts of text. 

                

      :rtype: `bool`







      .. versionadded:: 2.7.1 
     








   .. method:: Paste(self)

      Pastes text from the clipboard to the text item.                   





   .. method:: Redo(self)

      If there is a redo facility and the last operation can be redone, redoes the last operation.                  

      Does nothing if there is no redo facility.                   





   .. method:: Remove(self, from_, to_)

      Removes the text starting at the first given position up to (but not including) the character at the last position.                  

      This function puts the current insertion point position at `to`  as a side effect. 




      :param `from_`: 
      :type `from_`: long
      :param `to_`: 
      :type `to_`: long




      The first position.  



      The last position.  

                  





   .. method:: Replace(self, from_, to_, value)

      Replaces the text starting at the first position up to (but not including) the character at the last position with the given text.                  

      This function puts the current insertion point position at `to`  as a side effect. 




      :param `from_`: 
      :type `from_`: long
      :param `to_`: 
      :type `to_`: long
      :param `value`: The value to replace the existing text with.   
      :type `value`: string




      The first position.  



      The last position.  



                  





   .. method:: SelectAll(self)

      Selects all text in the control.                  

                 



      .. seealso:: :meth:`SetSelection`     








   .. method:: SelectNone(self)

      Deselects selected text in the control.                  

                 



      .. versionadded:: 2.9.5 
     








   .. method:: SetEditable(self, editable)

      Makes the text item editable or read-only, overriding the ``wx.TE_READONLY``  flag.                  




      :param `editable`: If ``True``, the control is editable. If ``False``, the control is read-only.  
      :type `editable`: bool




                  



      .. seealso:: :meth:`IsEditable`     








   .. method:: SetHint(self, hint)

      Sets a hint shown in an empty unfocused text control.                  

      The hints are usually used to indicate to the user what is supposed to be entered into the given entry field, e.g. a common use of them is to show an explanation of what can be entered in a :ref:`wx.SearchCtrl`. 

      The hint is shown (usually greyed out) for an empty control until it gets focus and is shown again if the control loses it and remains empty. It won't be shown once the control has a non-empty value, although it will be shown again if the control contents is cleared. Because of this, it generally only makes sense to use hints with the controls which are initially empty. 

      Notice that hints are known as `cue banners`  under MSW or `placeholder strings`  under macOS. 


      For the platforms without native hints support, the implementation has several known limitations. Notably, the hint display will not be properly updated if you change  :ref:`wx.TextEntry`  contents programmatically when the hint is displayed using methods other than :meth:`SetValue`   or :meth:`ChangeValue`   or others which use them internally (e.g. :meth:`Clear` ). In other words, currently you should avoid calling methods such as :meth:`WriteText`   or :meth:`Replace`   when using hints and the text control is empty. If you bind to the control's focus and wxEVT_TEXT events, you must call :meth:`wx.Event.Skip`   on them so that the generic implementation works correctly. 

      Another limitation is that hints are ignored for the controls with  ``TE_PASSWORD``   style. 

                


      :param `hint`: 
      :type `hint`: string




      :rtype: `bool`







      .. versionadded:: 2.9.0 
     







      .. note:: 

         Currently implemented natively on Windows (Vista and later only), macOS and GTK+ (3.2 and later).  







      .. note:: 

         Hints can be used for single line text controls under all platforms, but only MSW and GTK+ 2 support them for multi-line text controls, they are ignored for them under the other platforms.  








   .. method:: SetInsertionPoint(self, pos)

      Sets the insertion point at the given position.                  




      :param `pos`: Position to set, in the range from 0 to :meth:`GetLastPosition`   inclusive.   
      :type `pos`: long




                  





   .. method:: SetInsertionPointEnd(self)

      Sets the insertion point at the end of the text control.                  

      This is equivalent to calling :meth:`wx.TextCtrl.SetInsertionPoint`   with :meth:`wx.TextCtrl.GetLastPosition`   argument.                   





   .. method:: SetMargins(self, *args, **kw)

      Attempts to set the control margins.                  

      When margins are given as :ref:`wx.Point`, x indicates the left and y the top margin. Use -1 to indicate that an existing value should be used. 

                 



      :returns: 

         ``True`` if setting of all requested margins was successful.  







      .. versionadded:: 2.9.1 
     





      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetMargins** `(self, pt)`
      
      
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetMargins** `(self, left, top=-1)`
      
      
      
      
      :param `left`: 
      :type `left`: int
      :param `top`: 
      :type `top`: int
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetMaxLength(self, len)

      This function sets the maximum number of characters the user can enter into the control.                  

      In other words, it allows limiting the text value length to `len`  not counting the terminating  ``NUL``   character. 

      If `len`  is 0, the previously set max length limit, if any, is discarded and the user may enter as much text as the underlying native text control widget supports (typically at least 32Kb). If the user tries to enter more characters into the text control when it already is filled up to the maximal length, a  ``wxEVT_TEXT_MAXLEN``   event is sent to notify the program about it (giving it the possibility to show an explanatory message, for example) and the extra input is discarded. 

      Note that in wxGTK this function may only be used with single line text controls.                  


      :param `len`: 
      :type `len`: long







   .. method:: SetSelection(self, from_, to_)

      Selects the text starting at the first position up to (but not including) the character at the last position.                  

      If both parameters are equal to -1 all text in the control is selected. 

      Notice that the insertion point will be moved to `from`  by this function. 




      :param `from_`: 
      :type `from_`: long
      :param `to_`: 
      :type `to_`: long




      The first position.  



      The last position. 

                  



      .. seealso:: :meth:`SelectAll`     








   .. method:: SetValue(self, value)

      Sets the new text control value.                  

      It also marks the control as not-modified which means that IsModified() would return ``False`` immediately after the call to :meth:`SetValue` . 

      The insertion point is set to the start of the control (i.e. position 0) by this function unless the control value doesn't change at all, in which case the insertion point is left at its original position. 

      Note that, unlike most other functions changing the controls values, this function generates a  ``wxEVT_TEXT``   event. To avoid this you can use  :meth:`ChangeValue`   instead. 




      :param `value`: The new value to set. It may contain newline characters if the text control is multi-line.   
      :type `value`: string




                  





   .. method:: Undo(self)

      If there is an undo facility and the last operation can be undone, undoes the last operation.                  

      Does nothing if there is no undo facility.                   





   .. method:: WriteText(self, text)

      Writes the text into the text control at the current insertion position.                  




      :param `text`: Text to write to the text control.  
      :type `text`: string




                  



      .. note:: 

         Newlines in the text string are the only control characters allowed, and they will cause appropriate line breaks. See operator<<() and :meth:`AppendText`   for more convenient ways of writing to the window. After the write operation, the insertion point will be at the end of the inserted text, so subsequent write operations will be appended. To append text after the user may have interacted with the control, call :meth:`wx.TextCtrl.SetInsertionPointEnd`   before writing.   








   .. attribute:: Hint

      See :meth:`~wx.TextEntry.GetHint` and :meth:`~wx.TextEntry.SetHint`


   .. attribute:: InsertionPoint

      See :meth:`~wx.TextEntry.GetInsertionPoint` and :meth:`~wx.TextEntry.SetInsertionPoint`


   .. attribute:: LastPosition

      See :meth:`~wx.TextEntry.GetLastPosition`


   .. attribute:: Margins

      See :meth:`~wx.TextEntry.GetMargins` and :meth:`~wx.TextEntry.SetMargins`


   .. attribute:: StringSelection

      See :meth:`~wx.TextEntry.GetStringSelection`


   .. attribute:: Value

      See :meth:`~wx.TextEntry.GetValue` and :meth:`~wx.TextEntry.SetValue`

