.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.HeaderCtrl:

==========================================================================================================================================
|phoenix_title|  **wx.HeaderCtrl**
==========================================================================================================================================

:ref:`wx.HeaderCtrl`  is the control containing the column headings which is usually used for display of tabular data.          

It is used as part of :ref:`wx.grid.Grid`, in generic version :ref:`wx.dataview.DataViewCtrl`  and report view of :ref:`wx.ListCtrl`  but can be also used independently. In general this class is meant to be used as part of another control which already stores the column information somewhere as it can't be used directly: instead you need to inherit from it and implement the :meth:`~wx.HeaderCtrl.GetColumn`  method to provide column information. See :ref:`wx.HeaderCtrlSimple`  for a concrete control class which can be used directly. 

In addition to labeling the columns, the control has the following features:

- Column reordering support, either by explicitly configuring the columns order and calling :meth:`~wx.HeaderCtrl.SetColumnsOrder`  or by dragging the columns interactively (if enabled). 
- Display of the icons in the header: this is often used to display a sort or reverse sort indicator when the column header is clicked. 




Notice that this control itself doesn't do anything other than displaying the column headers. In particular column reordering and sorting must still be supported by the associated control displaying the real data under the header. Also remember to call :meth:`~wx.HeaderCtrl.ScrollWindow`  method of the control if the associated data display window has a horizontal scrollbar, otherwise the headers wouldn't align with the data when the window is scrolled. 

This control is implemented using the native header control under MSW systems and a generic implementation elsewhere. 



|phoenix_title| Future Improvements
===================================

Some features are supported by the native MSW control and so could be easily implemented in this version of :ref:`wx.HeaderCtrl`  but need to be implemented in the generic version as well to be really useful. Please let us know if you need or, better, plan to work on implementing, any of them:

- Displaying bitmaps instead of or together with the text 
- Custom drawn headers 
- Filters associated with a column. 




.. _HeaderCtrl-styles:

|styles| Window Styles
================================

This class supports the following styles:   

- ``wx.HD_ALLOW_REORDER``: If this style is specified (it is by default), the user can reorder the control columns by dragging them.  
- ``wx.HD_ALLOW_HIDE``: If this style is specified, the control shows a popup menu allowing the user to change the columns visibility on right mouse click. Notice that the program can always hide or show the columns, this style only affects the users capability to do it.  
- ``wx.HD_BITMAP_ON_RIGHT``: The column image, if any, will be shown on the right side if this style is used. Note that this style is only implemented in wxMSW currently and doesn't do anything under the other platforms. It is available since wxWidgets 3.1.1.  
- ``wx.HD_DEFAULT_STYLE``: Symbolic name for the default control style, currently equal to  ``HD_ALLOW_REORDER`` .   






.. _HeaderCtrl-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive one of the :ref:`wx.HeaderCtrlEvent` parameters.

- EVT_HEADER_CLICK: A column heading was clicked.  
- EVT_HEADER_RIGHT_CLICK: A column heading was right clicked.  
- EVT_HEADER_MIDDLE_CLICK: A column heading was clicked with the middle mouse button.  
- EVT_HEADER_DCLICK: A column heading was double clicked.  
- EVT_HEADER_RIGHT_DCLICK: A column heading was right double clicked.  
- EVT_HEADER_MIDDLE_DCLICK: A column heading was double clicked with the middle mouse button.  
- EVT_HEADER_SEPARATOR_DCLICK: Separator to the right of the specified column was double clicked (this action is commonly used to resize the column to fit its contents width and the control provides :meth:`~wx.HeaderCtrl.UpdateColumnWidthToFit`  method to make implementing this easier).  
- EVT_HEADER_BEGIN_RESIZE: The user started to drag the separator to the right of the column with the specified index (this can only happen for the columns for which :meth:`wx.HeaderColumn.IsResizeable`   returns ``True``). The event can be vetoed to prevent the column from being resized. If it isn't, the resizing and end resize (or dragging cancelled) events will be generated later.  
- EVT_HEADER_RESIZING: The user is dragging the column with the specified index resizing it and its current width is :meth:`wx.HeaderCtrlEvent.GetWidth` . The event can be vetoed to stop the dragging operation completely at any time.  
- EVT_HEADER_END_RESIZE: The user stopped dragging the column by releasing the mouse. The column should normally be resized to the value of :meth:`wx.HeaderCtrlEvent.GetWidth` .  
- EVT_HEADER_BEGIN_REORDER: The user started to drag the column with the specified index (this can only happen for the controls with ``wx.HD_ALLOW_REORDER`` style). This event can be vetoed to prevent the column from being reordered, otherwise the end reorder message will be generated later.  
- EVT_HEADER_END_REORDER: The user dropped the column in its new location. The event can be vetoed to prevent the column from being placed at the new position or handled to update the display of the data in the associated control to match the new column location (available from :meth:`wx.HeaderCtrlEvent.GetNewOrder` ).  
- EVT_HEADER_DRAGGING_CANCELLED: The resizing or reordering operation currently in progress was cancelled. This can happen if the user pressed Esc key while dragging the mouse or the mouse capture was lost for some other reason. You only need to handle this event if your application entered into some modal mode when resizing or reordering began, in which case it should handle this event in addition to the matching end resizing or reordering ones.  






.. seealso:: :ref:`wx.grid.Grid`, :ref:`wx.ListCtrl`, :ref:`wx.dataview.DataViewCtrl`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>HeaderCtrl</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.HeaderCtrl_inheritance.png" alt="Inheritance diagram of HeaderCtrl" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.HeaderCtrl.html" title="wx.HeaderCtrl" alt="" coords="51,315,166,344"/> <area shape="rect" id="node2" href="wx.Control.html" title="wx.Control" alt="" coords="63,237,155,267"/> <area shape="rect" id="node3" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node4" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node6" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.HeaderCtrlSimple`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.HeaderCtrl.__init__`                                                  Default constructor not creating the underlying window.
:meth:`~wx.HeaderCtrl.AddColumnsItems`                                           Helper function appending the checkable items corresponding to all the columns to the given menu.
:meth:`~wx.HeaderCtrl.Create`                                                    Create the header control window.
:meth:`~wx.HeaderCtrl.GetClassDefaultAttributes`                                 
:meth:`~wx.HeaderCtrl.GetColumn`                                                 Method to be implemented by the derived classes to return the information for the given column.
:meth:`~wx.HeaderCtrl.GetColumnAt`                                               Return the index of the column displayed at the given position.
:meth:`~wx.HeaderCtrl.GetColumnCount`                                            Return the number of columns in the control.
:meth:`~wx.HeaderCtrl.GetColumnPos`                                              Get the position at which this column is currently displayed.
:meth:`~wx.HeaderCtrl.GetColumnTitleWidth`                                       Returns width needed for given column's title.
:meth:`~wx.HeaderCtrl.GetColumnsOrder`                                           Return the array describing the columns display order.
:meth:`~wx.HeaderCtrl.IsEmpty`                                                   Return whether the control has any columns.
:meth:`~wx.HeaderCtrl.MoveColumnInOrderArray`                                    Helper function to manipulate the array of column indices.
:meth:`~wx.HeaderCtrl.OnColumnCountChanging`                                     Can be overridden in the derived class to update internal data structures when the number of the columns in the control changes.
:meth:`~wx.HeaderCtrl.ResetColumnsOrder`                                         Reset the columns order to the natural one.
:meth:`~wx.HeaderCtrl.SetColumnCount`                                            Set the number of columns in the control.
:meth:`~wx.HeaderCtrl.SetColumnsOrder`                                           Change the columns display order.
:meth:`~wx.HeaderCtrl.ShowColumnsMenu`                                           Show the popup menu allowing the user to show or hide the columns.
:meth:`~wx.HeaderCtrl.ShowCustomizeDialog`                                       Show the column customization dialog.
:meth:`~wx.HeaderCtrl.UpdateColumn`                                              Update the column with the given index.
:meth:`~wx.HeaderCtrl.UpdateColumnVisibility`                                    Method called when the column visibility is changed by the user.
:meth:`~wx.HeaderCtrl.UpdateColumnWidthToFit`                                    Method which may be implemented by the derived classes to allow double clicking the column separator to resize the column to fit its contents.
:meth:`~wx.HeaderCtrl.UpdateColumnsOrder`                                        Method called when the columns order is changed in the customization dialog.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.HeaderCtrl.ColumnCount`                                               See :meth:`~wx.HeaderCtrl.GetColumnCount` and :meth:`~wx.HeaderCtrl.SetColumnCount`
:attr:`~wx.HeaderCtrl.ColumnsOrder`                                              See :meth:`~wx.HeaderCtrl.GetColumnsOrder` and :meth:`~wx.HeaderCtrl.SetColumnsOrder`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.HeaderCtrl(Control)

   **Possible constructors**::

       HeaderCtrl()
       
       HeaderCtrl(parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize,
                  style=HD_DEFAULT_STYLE, name=HeaderCtrlNameStr)
       
   
   HeaderCtrl is the control containing the column headings which is
   usually used for display of tabular data.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor not creating the underlying window.                  
      
      You must use :meth:`Create`   after creating the object using this constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=HD_DEFAULT_STYLE, name=HeaderCtrlNameStr)`
      
      Constructor creating the window.                  
      
      Please see :meth:`Create`   for the parameters documentation.                  
      
      
      :param `parent`: 
      :type `parent`: wx.Window
      :param `winid`: 
      :type `winid`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AddColumnsItems(self, menu, idColumnsBase=0)

      Helper function appending the checkable items corresponding to all the columns to the given menu.                  

      This function is used by :meth:`ShowColumnsMenu`   but can also be used if you show your own custom columns menu and still want all the columns shown in it. It appends menu items with column labels as their text and consecutive ids starting from `idColumnsBase`  to the menu and checks the items corresponding to the currently visible columns. 

      Example of use: ::

                  def ColumnItems(self):

                      menu = wx.Menu()
                      menu.Append(100, "Some custom command")
                      menu.AppendSeparator()
                      self.AddColumnsItems(menu, 200)
                      rc = self.GetPopupMenuSelectionFromUser(menu, pt)

                      if rc >= 200:
                          # ... toggle visibility of the column rc-200 ...
                          ToggleVisibility()






      :param `menu`: The menu to append the items to. It may be currently empty or not.   
      :type `menu`: wx.Menu
      :param `idColumnsBase`: The id for the menu item corresponding to the first column, the other ones are consecutive starting from it. It should be positive.   
      :type `idColumnsBase`: int






                  





   .. method:: Create(self, parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=HD_DEFAULT_STYLE, name=HeaderCtrlNameStr)

      Create the header control window.                  




      :param `parent`: The parent window. The header control should be typically positioned along the top edge of this window.   
      :type `parent`: wx.Window
      :param `winid`: Id of the control or  ``ID_ANY``   if you don't care.    
      :type `winid`: wx.WindowID
      :param `pos`: The initial position of the control.   
      :type `pos`: wx.Point
      :param `size`: The initial size of the control (usually not very useful as this control will typically be resized to have the same width as the associated data display control).   
      :type `size`: wx.Size
      :param `style`: The control style,  ``HD_DEFAULT_STYLE``   by default. Notice that the default style allows the user to reorder the columns by dragging them and you need to explicitly turn this feature off by using::

           wx.HD_DEFAULT_STYLE & ~wx.HD_ALLOW_REORDER

       if this is undesirable.   
      :type `style`: long
      :param `name`: The name of the control.   
      :type `name`: string
















      :rtype: `bool`



                  





   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: GetColumn(self, idx)

      Method to be implemented by the derived classes to return the information for the given column.                  




      :param `idx`: The column index, between 0 and the value last passed to :meth:`SetColumnCount` .   
      :type `idx`: int






      :rtype: :ref:`wx.HeaderColumn`



                  





   .. method:: GetColumnAt(self, pos)

      Return the index of the column displayed at the given position.                  




      :param `pos`: The display position, e.g. 0 for the left-most column, 1 for the next one and so on until :meth:`GetColumnCount`   - 1.  
      :type `pos`: int






      :rtype: `int`



                  



      .. seealso:: :meth:`GetColumnPos`     








   .. method:: GetColumnCount(self)

      Return the number of columns in the control.                  

                

      :rtype: `int`







      :returns: 

         Number of columns as previously set by :meth:`SetColumnCount` .  







      .. seealso:: :meth:`IsEmpty`     








   .. method:: GetColumnPos(self, idx)

      Get the position at which this column is currently displayed.                  

      Notice that a valid position is returned even for the hidden columns currently. 




      :param `idx`: The column index, must be less than :meth:`GetColumnCount` .  
      :type `idx`: int






      :rtype: `int`



                  



      .. seealso:: :meth:`GetColumnAt`     








   .. method:: GetColumnTitleWidth(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **GetColumnTitleWidth** `(self, col)`
      
      Returns width needed for given column's title.                  
      
                      
      
      
      :param `col`: 
      :type `col`: wx.HeaderColumn
      
      
      
      
      :rtype: `int`
      
      
      
      
      
      
      
      .. versionadded:: 2.9.4 
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **GetColumnTitleWidth** `(self, idx)`
      
      Returns width needed for the column with the given index.                  
      
      This is just a convenient wrapper for the overload taking :ref:`wx.HeaderColumn`. 
      
                      
      
      
      :param `idx`: 
      :type `idx`: int
      
      
      
      
      :rtype: `int`
      
      
      
      
      
      
      
      .. versionadded:: 4.1/wxWidgets-3.1.3  
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: GetColumnsOrder(self)

      Return the array describing the columns display order.                  

      For the controls without ``wx.HD_ALLOW_REORDER`` style the returned array will be the same as was passed to :meth:`SetColumnsOrder`   previously or define the default order (with n-th element being n) if it hadn't been called. But for the controls with ``wx.HD_ALLOW_REORDER`` style, the columns can be also reordered by user.                  

      :rtype: `list of integers`








   .. method:: IsEmpty(self)

      Return whether the control has any columns.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`GetColumnCount`     








   .. staticmethod:: MoveColumnInOrderArray(order, idx, pos)

      Helper function to manipulate the array of column indices.                  

      This function reshuffles the array of column indices indexed by positions (i.e. using the same convention as for :meth:`SetColumnsOrder` ) so that the column with the given index is found at the specified position. 




      :param `order`: Array containing the indices of columns in order of their positions.   
      :type `order`: list of integers
      :param `idx`: The index of the column to move.   
      :type `idx`: int
      :param `pos`: The new position for the column  `idx`.   
      :type `pos`: int








                  





   .. method:: OnColumnCountChanging(self, count)

      Can be overridden in the derived class to update internal data structures when the number of the columns in the control changes.                  

      This method is called by :meth:`SetColumnCount`   before effectively changing the number of columns. 

      The base class version does nothing but it is good practice to still call it from the overridden version in the derived class.                  


      :param `count`: 
      :type `count`: int







   .. method:: ResetColumnsOrder(self)

      Reset the columns order to the natural one.                  

      After calling this function, the column with index  ``idx``   appears at position   ``idx``   in the control.                    





   .. method:: SetColumnCount(self, count)

      Set the number of columns in the control.                  

      The control will use :meth:`GetColumn`   to get information about all the new columns and refresh itself, i.e. this method also has the same effect as calling :meth:`UpdateColumn`   for all columns but it should only be used if the number of columns really changed.                  


      :param `count`: 
      :type `count`: int







   .. method:: SetColumnsOrder(self, order)

      Change the columns display order.                  

      The display order defines the order in which the columns appear on the screen and does `not`  affect the interpretation of indices by all the other class methods. 

      The `order`  array specifies the column indices corresponding to the display positions. 




      :param `order`: A permutation of all column indices, i.e. an array of size :meth:`GetColumnsOrder`   containing all column indices exactly once. The n-th element of this array defines the index of the column shown at the n-th position from left (for the default left-to-right writing direction).  
      :type `order`: list of integers




                  



      .. seealso:: :meth:`wx.ListCtrl.SetColumnsOrder`     








   .. method:: ShowColumnsMenu(self, pt, title="")

      Show the popup menu allowing the user to show or hide the columns.                  

      This functions shows the popup menu containing all columns with check marks for the ones which are currently shown and allows the user to check or uncheck them to toggle their visibility. It is called from the default ``EVT_HEADER_RIGHT_CLICK`` handler for the controls which have ``wx.HD_ALLOW_HIDE`` style. And if the column has ``wx.HD_ALLOW_REORDER`` style as well, the menu also contains an item to customize the columns shown using which results in :meth:`ShowCustomizeDialog`   being called, please see its description for more details. 

      If a column was toggled, :meth:`UpdateColumnVisibility`   virtual function is called so it must be implemented for the controls with ``wx.HD_ALLOW_HIDE`` style or if you call this function explicitly. 




      :param `pt`: The position of the menu, in the header window coordinates.   
      :type `pt`: wx.Point
      :param `title`: The title for the menu if not empty.   
      :type `title`: string








      :rtype: `bool`



                  



      :returns: 

         ``True`` if a column was shown or hidden or ``False`` if nothing was done, e.g. because the menu was cancelled.   








   .. method:: ShowCustomizeDialog(self)

      Show the column customization dialog.                  

      This function displays a modal dialog containing the list of all columns which the user can use to reorder them as well as show or hide individual columns. 

      If the user accepts the changes done in the dialog, the virtual methods :meth:`UpdateColumnVisibility`   and :meth:`UpdateColumnsOrder`   will be called so they must be overridden in the derived class if this method is ever called. Please notice that the user will be able to invoke it interactively from the header popup menu if the control has both ``wx.HD_ALLOW_HIDE`` and ``wx.HD_ALLOW_REORDER`` styles. 

                

      :rtype: `bool`







      .. seealso:: :ref:`wx.RearrangeDialog`    








   .. method:: UpdateColumn(self, idx)

      Update the column with the given index.                  

      When the value returned by :meth:`GetColumn`   changes, this method must be called to notify the control about the change and update the visual display to match the new column data. 




      :param `idx`: The column index, must be less than :meth:`GetColumnCount` .   
      :type `idx`: int




                  





   .. method:: UpdateColumnVisibility(self, idx, show)

      Method called when the column visibility is changed by the user.                  

      This method is called from :meth:`ShowColumnsMenu`   or :meth:`ShowCustomizeDialog`   when the user interactively hides or shows a column. A typical implementation will simply update the internally stored column state. Notice that there is no need to call :meth:`UpdateColumn`   from this method as it is already done by :ref:`wx.HeaderCtrl`  itself. 

      The base class version doesn't do anything and must be overridden if this method is called. 




      :param `idx`: The index of the column whose visibility was toggled.   
      :type `idx`: int
      :param `show`: The new visibility value, ``True`` if the column is now shown or ``False`` if it is not hidden.   
      :type `show`: bool






                  





   .. method:: UpdateColumnWidthToFit(self, idx, widthTitle)

      Method which may be implemented by the derived classes to allow double clicking the column separator to resize the column to fit its contents.                  

      When a separator is double clicked, the default handler of ``EVT_HEADER_SEPARATOR_DCLICK`` event calls this function and refreshes the column if it returns ``True`` so to implement the resizing of the column to fit its width on header double click you need to implement this method using logic similar to this example: ::

                      class MyHeaderColumn(wx.HeaderColumn):

                          def __init__(self):

                              wx.HeaderColumn.__init__(self)


                          def SetWidth(self, width):

                              self.width = width


                          def GetWidth(self):

                              return self.width


                      class MyHeaderCtrl(wx.HeaderCtrl):

                          def __init__(self, parent):

                              wx.HeaderCtrl.__init__(self, parent)
                              self.cols = []


                          def GetColumn(idx):

                              return self.cols[idx]


                          def UpdateColumnWidthToFit(self, idx, widthTitle):

                              # ... compute minimal width for column idx ...
                              widthContents = self.CalculateMinWidth(idx)
                              self.cols[idx].SetWidth(max(widthContents, widthTitle))

                              return True



      Base class version simply returns ``False``. 




      :param `idx`: The zero-based index of the column to update.   
      :type `idx`: int
      :param `widthTitle`: Contains minimal width needed to display the column header itself and will usually be used as a starting point for the fitting width calculation.  
      :type `widthTitle`: int








      :rtype: `bool`



                  



      :returns: 

         ``True`` to indicate that the column was resized, i.e. :meth:`GetColumn`   now returns the new width value, and so must be refreshed or ``False`` meaning that the control didn't reach to the separator double click.   








   .. method:: UpdateColumnsOrder(self, order)

      Method called when the columns order is changed in the customization dialog.                  

      This method is only called from :meth:`ShowCustomizeDialog`   when the user changes the order of columns. In particular it is `not`  called if a single column changes place because the user dragged it to the new location, the ``EVT_HEADER_END_REORDER`` event handler should be used to react to this. 

      A typical implementation in a derived class will update the display order of the columns in the associated control, if any. Notice that there is no need to call :meth:`SetColumnsOrder`   from it as :ref:`wx.HeaderCtrl`  does it itself. 

      The base class version doesn't do anything and must be overridden if this method is called. 




      :param `order`: The new column order. This array uses the same convention as :meth:`SetColumnsOrder` .   
      :type `order`: list of integers




                  





   .. attribute:: ColumnCount

      See :meth:`~wx.HeaderCtrl.GetColumnCount` and :meth:`~wx.HeaderCtrl.SetColumnCount`


   .. attribute:: ColumnsOrder

      See :meth:`~wx.HeaderCtrl.GetColumnsOrder` and :meth:`~wx.HeaderCtrl.SetColumnsOrder`

