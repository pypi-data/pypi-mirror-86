.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.aui.AuiManager:

==========================================================================================================================================
|phoenix_title|  **wx.aui.AuiManager**
==========================================================================================================================================

:ref:`wx.aui.AuiManager`  is the central class of the ``AUI`` class framework.          

:ref:`wx.aui.AuiManager`  manages the panes associated with it for a particular :ref:`wx.Frame`, using a pane's :ref:`wx.aui.AuiPaneInfo`  information to determine each pane's docking and floating behaviour. 

:ref:`wx.aui.AuiManager`  uses wxWidgets' sizer mechanism to plan the layout of each frame. It uses a replaceable dock art class to do all drawing, so all drawing is localized in one area, and may be customized depending on an application's specific needs. 

:ref:`wx.aui.AuiManager`  works as follows: the programmer adds panes to the class, or makes changes to existing pane properties (dock position, floating state, show state, etc.). To apply these changes, :ref:`wx.aui.AuiManager`'s :meth:`~wx.aui.AuiManager.Update`  function is called. This batch processing can be used to avoid flicker, by modifying more than one pane at a time, and then "committing" all of the changes at once by calling :meth:`~wx.aui.AuiManager.Update`. 

Panes can be added quite easily: 

::

    text1 = wx.TextCtrl(self)
    text2 = wx.TextCtrl(self)
    self.mgr.AddPane(text1, wx.LEFT, "Pane Caption")
    self.mgr.AddPane(text2, wx.BOTTOM, "Pane Caption")
    self.mgr.Update()



Later on, the positions can be modified easily. The following will float an existing pane in a tool window: 

::

    self.mgr.GetPane(text1).Float()





|phoenix_title| Layers, Rows and Directions, Positions
======================================================

Inside ``AUI``, the docking layout is figured out by checking several pane parameters. Four of these are important for determining where a pane will end up: 

- Direction: Each docked pane has a direction, Top, Bottom, Left, Right, or Center. This is fairly self-explanatory. The pane will be placed in the location specified by this variable.  
- Position: More than one pane can be placed inside of a dock. Imagine two panes being docked on the left side of a window. One pane can be placed over another. In proportionally managed docks, the pane position indicates its sequential position, starting with zero. So, in our scenario with two panes docked on the left side, the top pane in the dock would have position 0, and the second one would occupy position 1.  
- Row: A row can allow for two docks to be placed next to each other. One of the most common places for this to happen is in the toolbar. Multiple toolbar rows are allowed, the first row being row 0, and the second row 1. Rows can also be used on vertically docked panes.  
- Layer: A layer is akin to an onion. Layer 0 is the very center of the managed pane. Thus, if a pane is in layer 0, it will be closest to the center window (also sometimes known as the "content window"). Increasing layers "swallow up" all layers of a lower value. This can look very similar to multiple rows, but is different because all panes in a lower level yield to panes in higher levels. The best way to understand layers is by running the ``AUI`` sample. 




.. _AuiManager-styles:

|styles| Window Styles
================================

This class supports the following styles:   

- ``wx.aui.AUI_MGR_ALLOW_FLOATING``: Allow a pane to be undocked to take the form of a :ref:`wx.MiniFrame`.  
- ``wx.aui.AUI_MGR_ALLOW_ACTIVE_PANE``: Change the color of the title bar of the pane when it is activated.  
- ``wx.aui.AUI_MGR_TRANSPARENT_DRAG``: Make the pane transparent during its movement.  
- ``wx.aui.AUI_MGR_TRANSPARENT_HINT``: The possible location for docking is indicated by a translucent area.  
- ``wx.aui.AUI_MGR_VENETIAN_BLINDS_HINT``: The possible location for docking is indicated by gradually appearing partially transparent hint.  
- ``wx.aui.AUI_MGR_RECTANGLE_HINT``: The possible location for docking is indicated by a rectangular outline.  
- ``wx.aui.AUI_MGR_HINT_FADE``: The translucent area where the pane could be docked appears gradually.  
- ``wx.aui.AUI_MGR_NO_VENETIAN_BLINDS_FADE``: Used in complement of ``wx.aui.AUI_MGR_VENETIAN_BLINDS_HINT`` to show the docking hint immediately.  
- ``wx.aui.AUI_MGR_LIVE_RESIZE``: When a docked pane is resized, its content is refreshed in live (instead of moving the border alone and refreshing the content at the end).  
- ``wx.aui.AUI_MGR_DEFAULT``: Default behaviour, combines: ``wx.aui.AUI_MGR_ALLOW_FLOATING`` | ``wx.aui.AUI_MGR_TRANSPARENT_HINT`` | ``wx.aui.AUI_MGR_HINT_FADE`` | ``wx.aui.AUI_MGR_NO_VENETIAN_BLINDS_FADE``.  






.. _AuiManager-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive one of the :ref:`wx.aui.AuiManagerEvent` parameters.

- EVT_AUI_PANE_BUTTON: Triggered when any button is pressed for any docked panes.  
- EVT_AUI_PANE_CLOSE: Triggered when a docked or floating pane is closed.  
- EVT_AUI_PANE_MAXIMIZE: Triggered when a pane is maximized.  
- EVT_AUI_PANE_RESTORE: Triggered when a pane is restored.  
- EVT_AUI_PANE_ACTIVATED: Triggered when a pane is made 'active'. This event is new since wxWidgets 2.9.4.  
- EVT_AUI_RENDER: This event can be caught to override the default renderer in order to custom draw your :ref:`wx.aui.AuiManager`  window (not recommended).  






.. seealso:: :ref:`AUI Overview <aui overview>`, :ref:`wx.aui.AuiNotebook`, :ref:`wx.aui.AuiDockArt`, :ref:`wx.aui.AuiPaneInfo`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>AuiManager</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.aui.AuiManager_inheritance.png" alt="Inheritance diagram of AuiManager" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.aui.AuiManager.html" title="wx.aui.AuiManager" alt="" coords="35,160,182,189"/> <area shape="rect" id="node2" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node4" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.aui.AuiManager.__init__`                                              Constructor.
:meth:`~wx.aui.AuiManager.AddPane`                                               :meth:`~AuiManager.AddPane`   tells the frame manager to start managing a child window.
:meth:`~wx.aui.AuiManager.AlwaysUsesLiveResize`                                  Returns ``True`` if live resize is always used on the current platform.
:meth:`~wx.aui.AuiManager.CalculateHintRect`                                     This function is used by controls to calculate the drop hint rectangle.
:meth:`~wx.aui.AuiManager.CanDockPanel`                                          Check if a key modifier is pressed (actually   or ) while dragging the frame to not dock the window.
:meth:`~wx.aui.AuiManager.ClosePane`                                             Destroys or hides the given pane depending on its flags.
:meth:`~wx.aui.AuiManager.CreateFloatingFrame`                                   Creates a floating frame in this :ref:`wx.aui.AuiManager`  with the given parent and :ref:`wx.aui.AuiPaneInfo`.
:meth:`~wx.aui.AuiManager.DetachPane`                                            Tells the :ref:`wx.aui.AuiManager`  to stop managing the pane specified by window.
:meth:`~wx.aui.AuiManager.DrawHintRect`                                          This function is used by controls to draw the hint window.
:meth:`~wx.aui.AuiManager.GetAllPanes`                                           Returns an array of all panes managed by the frame manager.
:meth:`~wx.aui.AuiManager.GetArtProvider`                                        Returns the current art provider being used.
:meth:`~wx.aui.AuiManager.GetDockSizeConstraint`                                 Returns the current dock constraint values.
:meth:`~wx.aui.AuiManager.GetFlags`                                              Returns the current :ref:`wx.aui.AuiManagerOption`'s flags.
:meth:`~wx.aui.AuiManager.GetManagedWindow`                                      Returns the frame currently being managed by :ref:`wx.aui.AuiManager`.
:meth:`~wx.aui.AuiManager.GetManager`                                            Calling this method will return the :ref:`wx.aui.AuiManager`  for a given window.
:meth:`~wx.aui.AuiManager.GetPane`                                               :meth:`~AuiManager.GetPane`   is used to lookup a :ref:`wx.aui.AuiPaneInfo`  object either by window pointer or by pane name, which acts as a unique id for a window pane.
:meth:`~wx.aui.AuiManager.HasLiveResize`                                         Returns ``True`` if windows are resized live.
:meth:`~wx.aui.AuiManager.HideHint`                                              :meth:`~AuiManager.HideHint`   hides any docking hint that may be visible.
:meth:`~wx.aui.AuiManager.InsertPane`                                            This method is used to insert either a previously unmanaged pane window into the frame manager, or to insert a currently managed pane somewhere else.
:meth:`~wx.aui.AuiManager.LoadPaneInfo`                                          :meth:`~AuiManager.LoadPaneInfo`   is similar to LoadPerspective, with the exception that it only loads information about a single pane.
:meth:`~wx.aui.AuiManager.LoadPerspective`                                       Loads a saved perspective.
:meth:`~wx.aui.AuiManager.MaximizePane`                                          Maximize the given pane.
:meth:`~wx.aui.AuiManager.ProcessDockResult`                                     :meth:`~AuiManager.ProcessDockResult`   is a protected member of the ``AUI`` layout manager.
:meth:`~wx.aui.AuiManager.RestoreMaximizedPane`                                  Restore the previously maximized pane.
:meth:`~wx.aui.AuiManager.RestorePane`                                           Restore the last state of the given pane.
:meth:`~wx.aui.AuiManager.SavePaneInfo`                                          :meth:`~AuiManager.SavePaneInfo`   is similar to SavePerspective, with the exception that it only saves information about a single pane.
:meth:`~wx.aui.AuiManager.SavePerspective`                                       Saves the entire user interface layout into an encoded :ref:`String`, which can then be stored by the application (probably using Config).
:meth:`~wx.aui.AuiManager.SetArtProvider`                                        Instructs :ref:`wx.aui.AuiManager`  to use art provider specified by parameter `art_provider`  for all drawing calls.
:meth:`~wx.aui.AuiManager.SetDockSizeConstraint`                                 When a user creates a new dock by dragging a window into a docked position, often times the large size of the window will create a dock that is unwieldy large.
:meth:`~wx.aui.AuiManager.SetFlags`                                              This method is used to specify :ref:`wx.aui.AuiManagerOption`'s flags.
:meth:`~wx.aui.AuiManager.SetManagedWindow`                                      Called to specify the frame or window which is to be managed by :ref:`wx.aui.AuiManager`.
:meth:`~wx.aui.AuiManager.ShowHint`                                              This function is used by controls to explicitly show a hint window at the specified rectangle.
:meth:`~wx.aui.AuiManager.StartPaneDrag`                                         Mostly used internally to define the drag action parameters.
:meth:`~wx.aui.AuiManager.UnInit`                                                Dissociate the managed window from the manager.
:meth:`~wx.aui.AuiManager.Update`                                                This method is called after any number of changes are made to any of the managed panes.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.aui.AuiManager.AllPanes`                                              See :meth:`~wx.aui.AuiManager.GetAllPanes`
:attr:`~wx.aui.AuiManager.ArtProvider`                                           See :meth:`~wx.aui.AuiManager.GetArtProvider` and :meth:`~wx.aui.AuiManager.SetArtProvider`
:attr:`~wx.aui.AuiManager.Flags`                                                 See :meth:`~wx.aui.AuiManager.GetFlags` and :meth:`~wx.aui.AuiManager.SetFlags`
:attr:`~wx.aui.AuiManager.ManagedWindow`                                         See :meth:`~wx.aui.AuiManager.GetManagedWindow` and :meth:`~wx.aui.AuiManager.SetManagedWindow`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.aui.AuiManager(EvtHandler)

   **Possible constructors**::

       AuiManager(managed_wnd=None, flags=AUI_MGR_DEFAULT)
       
   
   AuiManager is the central class of the ``AUI`` class framework.



   .. method:: __init__(self, managed_wnd=None, flags=AUI_MGR_DEFAULT)

      Constructor.                  




      :param `managed_wnd`: Specifies the :ref:`wx.Frame`  which should be managed.   
      :type `managed_wnd`: wx.Window
      :param `flags`: Specifies the frame management behaviour and visual effects with the :ref:`wx.aui.AuiManagerOption`'s style flags.   
      :type `flags`: int






                  





   .. method:: AddPane(self, *args, **kw)

      :meth:`AddPane`   tells the frame manager to start managing a child window.                  

      There are several versions of this function. The first version allows the full spectrum of pane parameter possibilities. The second version is used for simpler user interfaces which do not require as much configuration. The last version allows a drop position to be specified, which will determine where the pane will be added.                   


      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **AddPane** `(self, window, pane_info)`
      
      
      
      
      :param `window`: 
      :type `window`: wx.Window
      :param `pane_info`: 
      :type `pane_info`: wx.aui.AuiPaneInfo
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **AddPane** `(self, window, direction=LEFT, caption=EmptyString)`
      
      
      
      
      :param `window`: 
      :type `window`: wx.Window
      :param `direction`: 
      :type `direction`: int
      :param `caption`: 
      :type `caption`: string
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **AddPane** `(self, window, pane_info, drop_pos)`
      
      
      
      
      :param `window`: 
      :type `window`: wx.Window
      :param `pane_info`: 
      :type `pane_info`: wx.aui.AuiPaneInfo
      :param `drop_pos`: 
      :type `drop_pos`: wx.Point
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. staticmethod:: AlwaysUsesLiveResize()

      Returns ``True`` if live resize is always used on the current platform.                  

      If this function returns ``True``, ``AUI_MGR_LIVE_RESIZE``  flag is ignored and live resize is always used, whether it's specified or not. 

      Currently this is the case for wxOSX and ``GTK3`` ports, as live resizing is the only implemented method there. 

                

      :rtype: `bool`







      .. versionadded:: 4.1/wxWidgets-3.1.4  
     








   .. method:: CalculateHintRect(self, paneWindow, pt, offset)

      This function is used by controls to calculate the drop hint rectangle.                  

      The method first calls DoDrop() to determine the exact position the pane would be at were if dropped. 




      :param `paneWindow`: The window pointer of the pane being dragged.   
      :type `paneWindow`: wx.Window
      :param `pt`: The mouse position, in client coordinates.   
      :type `pt`: wx.Point
      :param `offset`: Describes the offset that the mouse is from the upper-left corner of the item being dragged.   
      :type `offset`: wx.Point










      :rtype: :ref:`Rect`



                  



      :returns: 

         The rectangle hint will be returned in screen coordinates if the pane would indeed become docked at the specified drop point. Otherwise, an empty rectangle is returned.   








   .. method:: CanDockPanel(self, p)

      Check if a key modifier is pressed (actually   or ) while dragging the frame to not dock the window.                  


      :param `p`: 
      :type `p`: wx.aui.AuiPaneInfo




      :rtype: `bool`








   .. method:: ClosePane(self, paneInfo)

      Destroys or hides the given pane depending on its flags.                  

                


      :param `paneInfo`: 
      :type `paneInfo`: wx.aui.AuiPaneInfo






      .. seealso:: :meth:`wx.aui.AuiPaneInfo.DestroyOnClose`     








   .. method:: CreateFloatingFrame(self, parent, p)

      Creates a floating frame in this :ref:`wx.aui.AuiManager`  with the given parent and :ref:`wx.aui.AuiPaneInfo`.                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `p`: 
      :type `p`: wx.aui.AuiPaneInfo




      :rtype: :ref:`wx.aui.AuiFloatingFrame`








   .. method:: DetachPane(self, window)

      Tells the :ref:`wx.aui.AuiManager`  to stop managing the pane specified by window.                  

      The window, if in a floated frame, is reparented to the frame managed by :ref:`wx.aui.AuiManager`.                  


      :param `window`: 
      :type `window`: wx.Window




      :rtype: `bool`








   .. method:: DrawHintRect(self, paneWindow, pt, offset)

      This function is used by controls to draw the hint window.                  

      It is rarely called, and is mostly used by controls implementing custom pane drag/drop behaviour.                  


      :param `paneWindow`: 
      :type `paneWindow`: wx.Window
      :param `pt`: 
      :type `pt`: wx.Point
      :param `offset`: 
      :type `offset`: wx.Point







   .. method:: GetAllPanes(self)

      Returns an array of all panes managed by the frame manager.                  

      :rtype: :ref:`AuiPaneInfoArray`








   .. method:: GetArtProvider(self)

      Returns the current art provider being used.                  

                

      :rtype: :ref:`wx.aui.AuiDockArt`







      .. seealso:: :ref:`wx.aui.AuiDockArt`.   








   .. method:: GetDockSizeConstraint(self, widthpct, heightpct)

      Returns the current dock constraint values.                  

      See :meth:`SetDockSizeConstraint`   for more information.                  


      :param `widthpct`: 
      :type `widthpct`: float
      :param `heightpct`: 
      :type `heightpct`: float







   .. method:: GetFlags(self)

      Returns the current :ref:`wx.aui.AuiManagerOption`'s flags.                  

      :rtype: `int`








   .. method:: GetManagedWindow(self)

      Returns the frame currently being managed by :ref:`wx.aui.AuiManager`.                  

      :rtype: :ref:`Window`








   .. staticmethod:: GetManager(window)

      Calling this method will return the :ref:`wx.aui.AuiManager`  for a given window.                  

      The `window`  parameter should specify any child window or sub-child window of the frame or window managed by :ref:`wx.aui.AuiManager`. 

      The `window`  parameter need not be managed by the manager itself, nor does it even need to be a child or sub-child of a managed window. It must however be inside the window hierarchy underneath the managed window.                  


      :param `window`: 
      :type `window`: wx.Window




      :rtype: :ref:`wx.aui.AuiManager`








   .. method:: GetPane(self, *args, **kw)

      :meth:`GetPane`   is used to lookup a :ref:`wx.aui.AuiPaneInfo`  object either by window pointer or by pane name, which acts as a unique id for a window pane.                  

      The returned :ref:`wx.aui.AuiPaneInfo`  object may then be modified to change a pane's look, state or position. After one or more modifications to :ref:`wx.aui.AuiPaneInfo`, :meth:`wx.aui.AuiManager.Update`   should be called to commit the changes to the user interface. If the lookup failed (meaning the pane could not be found in the manager), a call to the returned :ref:`wx.aui.AuiPaneInfo`'s IsOk() method will return ``False``.                   


      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **GetPane** `(self, window)`
      
      
      
      
      :param `window`: 
      :type `window`: wx.Window
      
      
      
      
      :rtype: :ref:`wx.aui.AuiPaneInfo`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **GetPane** `(self, name)`
      
      
      
      
      :param `name`: 
      :type `name`: string
      
      
      
      
      :rtype: :ref:`wx.aui.AuiPaneInfo`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: HasLiveResize(self)

      Returns ``True`` if windows are resized live.                  

      This function combines the check for :meth:`AlwaysUsesLiveResize`   and, for the platforms where live resizing is optional, the check for ``wx.aui.AUI_MGR_LIVE_RESIZE`` flag. 

      Using this accessor allows to verify whether live resizing is being actually used. 

                

      :rtype: `bool`







      .. versionadded:: 4.1/wxWidgets-3.1.4  
     








   .. method:: HideHint(self)

      :meth:`HideHint`   hides any docking hint that may be visible.                   





   .. method:: InsertPane(self, window, insert_location, insert_level=AUI_INSERT_PANE)

      This method is used to insert either a previously unmanaged pane window into the frame manager, or to insert a currently managed pane somewhere else.                  

      :meth:`InsertPane`   will push all panes, rows, or docks aside and insert the window into the position specified by `insert_location`. 

      Because `insert_location`  can specify either a pane, dock row, or dock layer, the `insert_level`  parameter is used to disambiguate this. The parameter `insert_level`  can take a value of ``AUI_INSERT_PANE``, ``AUI_INSERT_ROW`` or ``AUI_INSERT_DOCK``.                  


      :param `window`: 
      :type `window`: wx.Window
      :param `insert_location`: 
      :type `insert_location`: wx.aui.AuiPaneInfo
      :param `insert_level`: 
      :type `insert_level`: int




      :rtype: `bool`








   .. method:: LoadPaneInfo(self, pane_part, pane)

      :meth:`LoadPaneInfo`   is similar to LoadPerspective, with the exception that it only loads information about a single pane.                  

      This method writes the serialized data into the passed pane. Pointers to UI elements are not modified. 

                


      :param `pane_part`: 
      :type `pane_part`: string
      :param `pane`: 
      :type `pane`: wx.aui.AuiPaneInfo






      .. note:: 

         This operation also changes the name in the pane information!  







      .. seealso:: :meth:`LoadPerspective`     







      .. seealso:: :meth:`SavePaneInfo` .   







      .. seealso:: :meth:`SavePerspective`     








   .. method:: LoadPerspective(self, perspective, update=True)

      Loads a saved perspective.                  

      A perspective is the layout state of an ``AUI`` managed window. 

      All currently existing panes that have an object in "perspective" with the same name ("equivalent") will receive the layout parameters of the object in "perspective". Existing panes that do not have an equivalent in "perspective" remain unchanged, objects in "perspective" having no equivalent in the manager are ignored. 




      :param `perspective`: Serialized layout information of a perspective (excl. pointers to UI elements).   
      :type `perspective`: string
      :param `update`: If update is ``True``, :meth:`wx.aui.AuiManager.Update`   is automatically invoked, thus realizing the specified perspective on screen.  
      :type `update`: bool








      :rtype: `bool`



                  



      .. seealso:: :meth:`LoadPaneInfo`     







      .. seealso:: :meth:`LoadPerspective`     







      .. seealso:: :meth:`SavePerspective`     








   .. method:: MaximizePane(self, paneInfo)

      Maximize the given pane.                  


      :param `paneInfo`: 
      :type `paneInfo`: wx.aui.AuiPaneInfo







   .. method:: ProcessDockResult(self, target, new_pos)

      :meth:`ProcessDockResult`   is a protected member of the ``AUI`` layout manager.                  

      It can be overridden by derived classes to provide custom docking calculations.                  


      :param `target`: 
      :type `target`: wx.aui.AuiPaneInfo
      :param `new_pos`: 
      :type `new_pos`: wx.aui.AuiPaneInfo




      :rtype: `bool`








   .. method:: RestoreMaximizedPane(self)

      Restore the previously maximized pane.                   





   .. method:: RestorePane(self, paneInfo)

      Restore the last state of the given pane.                  


      :param `paneInfo`: 
      :type `paneInfo`: wx.aui.AuiPaneInfo







   .. method:: SavePaneInfo(self, pane)

      :meth:`SavePaneInfo`   is similar to SavePerspective, with the exception that it only saves information about a single pane.                  




      :param `pane`: Pane whose layout parameters should be serialized.   
      :type `pane`: wx.aui.AuiPaneInfo






      :rtype: `string`



                  



      :returns: 

         The serialized layout parameters of the pane are returned within the string. Information about the pointers to UI elements stored in the pane are not serialized.  







      .. seealso:: :meth:`LoadPaneInfo`     







      .. seealso:: :meth:`LoadPerspective`     







      .. seealso:: :meth:`SavePerspective`     








   .. method:: SavePerspective(self)

      Saves the entire user interface layout into an encoded :ref:`String`, which can then be stored by the application (probably using Config).                  

                

      :rtype: `string`







      .. seealso:: :meth:`LoadPerspective`     







      .. seealso:: :meth:`LoadPaneInfo`     







      .. seealso:: :meth:`SavePaneInfo`     








   .. method:: SetArtProvider(self, art_provider)

      Instructs :ref:`wx.aui.AuiManager`  to use art provider specified by parameter `art_provider`  for all drawing calls.                  

      This allows pluggable look-and-feel features. The previous art provider object, if any, will be deleted by :ref:`wx.aui.AuiManager`. 

                


      :param `art_provider`: 
      :type `art_provider`: wx.aui.AuiDockArt






      .. seealso:: :ref:`wx.aui.AuiDockArt`.   








   .. method:: SetDockSizeConstraint(self, widthpct, heightpct)

      When a user creates a new dock by dragging a window into a docked position, often times the large size of the window will create a dock that is unwieldy large.                  

      :ref:`wx.aui.AuiManager`  by default limits the size of any new dock to 1/3 of the window size. For horizontal docks, this would be 1/3 of the window height. For vertical docks, 1/3 of the width. 

      Calling this function will adjust this constraint value. The numbers must be between 0.0 and 1.0. For instance, calling SetDockSizeContraint with 0.5, 0.5 will cause new docks to be limited to half of the size of the entire managed window.                  


      :param `widthpct`: 
      :type `widthpct`: float
      :param `heightpct`: 
      :type `heightpct`: float







   .. method:: SetFlags(self, flags)

      This method is used to specify :ref:`wx.aui.AuiManagerOption`'s flags.                  

      `flags`  specifies options which allow the frame management behaviour to be modified.                  


      :param `flags`: 
      :type `flags`: int







   .. method:: SetManagedWindow(self, managed_wnd)

      Called to specify the frame or window which is to be managed by :ref:`wx.aui.AuiManager`.                  

      Frame management is not restricted to just frames. Child windows or custom controls are also allowed.                  


      :param `managed_wnd`: 
      :type `managed_wnd`: wx.Window







   .. method:: ShowHint(self, rect)

      This function is used by controls to explicitly show a hint window at the specified rectangle.                  

      It is rarely called, and is mostly used by controls implementing custom pane drag/drop behaviour. The specified rectangle should be in screen coordinates.                  


      :param `rect`: 
      :type `rect`: wx.Rect







   .. method:: StartPaneDrag(self, paneWindow, offset)

      Mostly used internally to define the drag action parameters.                  


      :param `paneWindow`: 
      :type `paneWindow`: wx.Window
      :param `offset`: 
      :type `offset`: wx.Point







   .. method:: UnInit(self)

      Dissociate the managed window from the manager.                  

      This function may be called before the managed frame or window is destroyed, but, since wxWidgets 3.1.4, it's unnecessary to call it explicitly, as it will be called automatically when this window is destroyed, as well as when the manager itself is.                   





   .. method:: Update(self)

      This method is called after any number of changes are made to any of the managed panes.                  

      :meth:`Update`   must be invoked after :meth:`AddPane`   or :meth:`InsertPane`   are called in order to "realize" or "commit" the changes. In addition, any number of changes may be made to :ref:`wx.aui.AuiPaneInfo`  structures (retrieved with :meth:`wx.aui.AuiManager.GetPane` ), but to realize the changes, :meth:`Update`   must be called. This construction allows pane flicker to be avoided by updating the whole layout at one time.                   





   .. attribute:: AllPanes

      See :meth:`~wx.aui.AuiManager.GetAllPanes`


   .. attribute:: ArtProvider

      See :meth:`~wx.aui.AuiManager.GetArtProvider` and :meth:`~wx.aui.AuiManager.SetArtProvider`


   .. attribute:: Flags

      See :meth:`~wx.aui.AuiManager.GetFlags` and :meth:`~wx.aui.AuiManager.SetFlags`


   .. attribute:: ManagedWindow

      See :meth:`~wx.aui.AuiManager.GetManagedWindow` and :meth:`~wx.aui.AuiManager.SetManagedWindow`

