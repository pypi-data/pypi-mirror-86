.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.propgrid.PropertyGridPageState:

==========================================================================================================================================
|phoenix_title|  **wx.propgrid.PropertyGridPageState**
==========================================================================================================================================

Contains low-level property page information (properties, column widths, etc.) of a single :ref:`wx.propgrid.PropertyGrid`  or single :ref:`wx.propgrid.PropertyGridPage`.          

Generally you should not use this class directly, but instead member functions in :ref:`wx.propgrid.PropertyGridInterface`, :ref:`wx.propgrid.PropertyGrid`, :ref:`wx.propgrid.PropertyGridPage`, and :ref:`wx.propgrid.PropertyGridManager`. 









.. note:: 

   Currently this class is not implemented in wxPython.  







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>PropertyGridPageState</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.propgrid.PropertyGridPageState_inheritance.png" alt="Inheritance diagram of PropertyGridPageState" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.propgrid.PropertyGridPageState.html" title="wx.propgrid.PropertyGridPageState" alt="" coords="5,5,256,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.propgrid.PropertyGridPage`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.propgrid.PropertyGridPageState.__init__`                              Default constructor.
:meth:`~wx.propgrid.PropertyGridPageState.BaseGetPropertyByName`                 Returns property by its name.
:meth:`~wx.propgrid.PropertyGridPageState.CalculateFontAndBitmapStuff`           
:meth:`~wx.propgrid.PropertyGridPageState.CheckColumnWidths`                     Makes sure all columns have minimum width.
:meth:`~wx.propgrid.PropertyGridPageState.DoAppend`                              Base append.
:meth:`~wx.propgrid.PropertyGridPageState.DoClear`                               Called in, for example, :meth:`wx.propgrid.PropertyGrid.Clear` .
:meth:`~wx.propgrid.PropertyGridPageState.DoClearSelection`                      
:meth:`~wx.propgrid.PropertyGridPageState.DoCollapse`                            
:meth:`~wx.propgrid.PropertyGridPageState.DoDelete`                              Override this member function to add custom behaviour on property deletion.
:meth:`~wx.propgrid.PropertyGridPageState.DoExpand`                              
:meth:`~wx.propgrid.PropertyGridPageState.DoFitColumns`                          
:meth:`~wx.propgrid.PropertyGridPageState.DoGetColumnProportion`                 
:meth:`~wx.propgrid.PropertyGridPageState.DoGetItemAtY`                          
:meth:`~wx.propgrid.PropertyGridPageState.DoGetPropertyValues`                   
:meth:`~wx.propgrid.PropertyGridPageState.DoGetRoot`                             
:meth:`~wx.propgrid.PropertyGridPageState.DoHideProperty`                        
:meth:`~wx.propgrid.PropertyGridPageState.DoInsert`                              Override this member function to add custom behaviour on property insertion.
:meth:`~wx.propgrid.PropertyGridPageState.DoIsPropertySelected`                  
:meth:`~wx.propgrid.PropertyGridPageState.DoLimitPropertyEditing`                
:meth:`~wx.propgrid.PropertyGridPageState.DoRemoveFromSelection`                 
:meth:`~wx.propgrid.PropertyGridPageState.DoSelectProperty`                      
:meth:`~wx.propgrid.PropertyGridPageState.DoSetColumnProportion`                 
:meth:`~wx.propgrid.PropertyGridPageState.DoSetPropertyName`                     
:meth:`~wx.propgrid.PropertyGridPageState.DoSetPropertyValue`                    
:meth:`~wx.propgrid.PropertyGridPageState.DoSetPropertyValueString`              
:meth:`~wx.propgrid.PropertyGridPageState.DoSetPropertyValueWxObjectPtr`         
:meth:`~wx.propgrid.PropertyGridPageState.DoSetPropertyValues`                   
:meth:`~wx.propgrid.PropertyGridPageState.DoSetSelection`                        
:meth:`~wx.propgrid.PropertyGridPageState.DoSetSplitterPosition`                 This needs to be overridden in grid used the manager so that splitter changes can be propagated to other pages.
:meth:`~wx.propgrid.PropertyGridPageState.DoSort`                                
:meth:`~wx.propgrid.PropertyGridPageState.DoSortChildren`                        
:meth:`~wx.propgrid.PropertyGridPageState.EnableCategories`                      
:meth:`~wx.propgrid.PropertyGridPageState.EnsureVirtualHeight`                   Make sure virtual height is up-to-date.
:meth:`~wx.propgrid.PropertyGridPageState.GetActualVirtualHeight`                Returns actual height of contained visible properties.
:meth:`~wx.propgrid.PropertyGridPageState.GetColumnCount`                        
:meth:`~wx.propgrid.PropertyGridPageState.GetColumnFitWidth`                     Returns minimal width for given column so that all images and texts will fit entirely.
:meth:`~wx.propgrid.PropertyGridPageState.GetColumnFullWidth`                    
:meth:`~wx.propgrid.PropertyGridPageState.GetColumnWidth`                        
:meth:`~wx.propgrid.PropertyGridPageState.GetGrid`                               
:meth:`~wx.propgrid.PropertyGridPageState.GetLastItem`                           Returns last item which could be iterated using given flags.
:meth:`~wx.propgrid.PropertyGridPageState.GetPropertyCategory`                   
:meth:`~wx.propgrid.PropertyGridPageState.GetSelection`                          Returns currently selected property.
:meth:`~wx.propgrid.PropertyGridPageState.GetVirtualHeight`                      Returns (precalculated) height of contained visible properties.
:meth:`~wx.propgrid.PropertyGridPageState.GetVirtualWidth`                       Returns combined width of margin and all the columns.
:meth:`~wx.propgrid.PropertyGridPageState.HitTest`                               Returns information about arbitrary position in the grid.
:meth:`~wx.propgrid.PropertyGridPageState.IsDisplayed`                           Returns ``True`` if page is visibly displayed.
:meth:`~wx.propgrid.PropertyGridPageState.IsInNonCatMode`                        
:meth:`~wx.propgrid.PropertyGridPageState.OnClientWidthChange`                   widthChange is non-client.
:meth:`~wx.propgrid.PropertyGridPageState.PrepareAfterItemsAdded`                
:meth:`~wx.propgrid.PropertyGridPageState.PropagateColSizeDec`                   
:meth:`~wx.propgrid.PropertyGridPageState.RecalculateVirtualHeight`              Recalculates m_virtualHeight.
:meth:`~wx.propgrid.PropertyGridPageState.ResetColumnSizes`                      
:meth:`~wx.propgrid.PropertyGridPageState.SetColumnCount`                        
:meth:`~wx.propgrid.PropertyGridPageState.SetSplitterLeft`                       
:meth:`~wx.propgrid.PropertyGridPageState.SetVirtualWidth`                       Set virtual width for this particular page.
:meth:`~wx.propgrid.PropertyGridPageState.VirtualHeightChanged`                  Called after virtual height needs to be recalculated.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.propgrid.PropertyGridPageState.ActualVirtualHeight`                   See :meth:`~wx.propgrid.PropertyGridPageState.GetActualVirtualHeight`
:attr:`~wx.propgrid.PropertyGridPageState.ColumnCount`                           See :meth:`~wx.propgrid.PropertyGridPageState.GetColumnCount` and :meth:`~wx.propgrid.PropertyGridPageState.SetColumnCount`
:attr:`~wx.propgrid.PropertyGridPageState.Grid`                                  See :meth:`~wx.propgrid.PropertyGridPageState.GetGrid`
:attr:`~wx.propgrid.PropertyGridPageState.LastItem`                              See :meth:`~wx.propgrid.PropertyGridPageState.GetLastItem`
:attr:`~wx.propgrid.PropertyGridPageState.Selection`                             See :meth:`~wx.propgrid.PropertyGridPageState.GetSelection`
:attr:`~wx.propgrid.PropertyGridPageState.VirtualHeight`                         See :meth:`~wx.propgrid.PropertyGridPageState.GetVirtualHeight`
:attr:`~wx.propgrid.PropertyGridPageState.VirtualWidth`                          See :meth:`~wx.propgrid.PropertyGridPageState.GetVirtualWidth` and :meth:`~wx.propgrid.PropertyGridPageState.SetVirtualWidth`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.propgrid.PropertyGridPageState(object)

   **Possible constructors**::

       PropertyGridPageState()
       
   
   Contains low-level property page information (properties, column
   widths, etc.) of a single PropertyGrid or single PropertyGridPage.



   .. method:: __init__(self)

      Default constructor.                   





   .. method:: BaseGetPropertyByName(self, name)

      Returns property by its name.                  


      :param `name`: 
      :type `name`: string




      :rtype: :ref:`wx.propgrid.PGProperty`








   .. method:: CalculateFontAndBitmapStuff(self, vspacing)




      :param `vspacing`: 
      :type `vspacing`: int







   .. method:: CheckColumnWidths(self, widthChange=0)

      Makes sure all columns have minimum width.                  


      :param `widthChange`: 
      :type `widthChange`: int







   .. method:: DoAppend(self, property)

      Base append.                  


      :param `property`: 
      :type `property`: wx.propgrid.PGProperty




      :rtype: :ref:`wx.propgrid.PGProperty`








   .. method:: DoClear(self)

      Called in, for example, :meth:`wx.propgrid.PropertyGrid.Clear` .                   





   .. method:: DoClearSelection(self)



      :rtype: `bool`








   .. method:: DoCollapse(self, p)




      :param `p`: 
      :type `p`: wx.propgrid.PGProperty




      :rtype: `bool`








   .. method:: DoDelete(self, item, doDelete=True)

      Override this member function to add custom behaviour on property deletion.                  


      :param `item`: 
      :type `item`: wx.propgrid.PGProperty
      :param `doDelete`: 
      :type `doDelete`: bool







   .. method:: DoExpand(self, p)




      :param `p`: 
      :type `p`: wx.propgrid.PGProperty




      :rtype: `bool`








   .. method:: DoFitColumns(self, allowGridResize=False)




      :param `allowGridResize`: 
      :type `allowGridResize`: bool




      :rtype: :ref:`Size`








   .. method:: DoGetColumnProportion(self, column)




      :param `column`: 
      :type `column`: int




      :rtype: `int`








   .. method:: DoGetItemAtY(self, y)




      :param `y`: 
      :type `y`: int




      :rtype: :ref:`wx.propgrid.PGProperty`








   .. method:: DoGetPropertyValues(self, listname, baseparent, flags)




      :param `listname`: 
      :type `listname`: string
      :param `baseparent`: 
      :type `baseparent`: wx.propgrid.PGProperty
      :param `flags`: 
      :type `flags`: long




      :rtype: :ref:`PGVariant`








   .. method:: DoGetRoot(self)



      :rtype: :ref:`wx.propgrid.PGProperty`








   .. method:: DoHideProperty(self, p, hide, flags=PG_RECURSE)




      :param `p`: 
      :type `p`: wx.propgrid.PGProperty
      :param `hide`: 
      :type `hide`: bool
      :param `flags`: 
      :type `flags`: int




      :rtype: `bool`








   .. method:: DoInsert(self, parent, index, property)

      Override this member function to add custom behaviour on property insertion.                  


      :param `parent`: 
      :type `parent`: wx.propgrid.PGProperty
      :param `index`: 
      :type `index`: int
      :param `property`: 
      :type `property`: wx.propgrid.PGProperty




      :rtype: :ref:`wx.propgrid.PGProperty`








   .. method:: DoIsPropertySelected(self, prop)




      :param `prop`: 
      :type `prop`: wx.propgrid.PGProperty




      :rtype: `bool`








   .. method:: DoLimitPropertyEditing(self, p, limit=True)




      :param `p`: 
      :type `p`: wx.propgrid.PGProperty
      :param `limit`: 
      :type `limit`: bool







   .. method:: DoRemoveFromSelection(self, prop)




      :param `prop`: 
      :type `prop`: wx.propgrid.PGProperty







   .. method:: DoSelectProperty(self, p, flags=0)




      :param `p`: 
      :type `p`: wx.propgrid.PGProperty
      :param `flags`: 
      :type `flags`: int




      :rtype: `bool`








   .. method:: DoSetColumnProportion(self, column, proportion)




      :param `column`: 
      :type `column`: int
      :param `proportion`: 
      :type `proportion`: int







   .. method:: DoSetPropertyName(self, p, newName)




      :param `p`: 
      :type `p`: wx.propgrid.PGProperty
      :param `newName`: 
      :type `newName`: string







   .. method:: DoSetPropertyValue(self, p, value)




      :param `p`: 
      :type `p`: wx.propgrid.PGProperty
      :param `value`: 
      :type `value`: PGVariant




      :rtype: `bool`








   .. method:: DoSetPropertyValueString(self, p, value)




      :param `p`: 
      :type `p`: wx.propgrid.PGProperty
      :param `value`: 
      :type `value`: string




      :rtype: `bool`








   .. method:: DoSetPropertyValueWxObjectPtr(self, p, value)




      :param `p`: 
      :type `p`: wx.propgrid.PGProperty
      :param `value`: 
      :type `value`: wx.Object




      :rtype: `bool`








   .. method:: DoSetPropertyValues(self, list, default_category)




      :param `list`: 
      :type `list`: PGVariantList
      :param `default_category`: 
      :type `default_category`: wx.propgrid.PGProperty







   .. method:: DoSetSelection(self, prop)




      :param `prop`: 
      :type `prop`: wx.propgrid.PGProperty







   .. method:: DoSetSplitterPosition(self, pos, splitterColumn=0, flags=0)

      This needs to be overridden in grid used the manager so that splitter changes can be propagated to other pages.                  


      :param `pos`: 
      :type `pos`: int
      :param `splitterColumn`: 
      :type `splitterColumn`: int
      :param `flags`: 
      :type `flags`: int







   .. method:: DoSort(self, flags=0)




      :param `flags`: 
      :type `flags`: int







   .. method:: DoSortChildren(self, p, flags=0)




      :param `p`: 
      :type `p`: wx.propgrid.PGProperty
      :param `flags`: 
      :type `flags`: int







   .. method:: EnableCategories(self, enable)




      :param `enable`: 
      :type `enable`: bool




      :rtype: `bool`








   .. method:: EnsureVirtualHeight(self)

      Make sure virtual height is up-to-date.                   





   .. method:: GetActualVirtualHeight(self)

      Returns actual height of contained visible properties.                  

                

      :rtype: `int`







      .. note:: 

         Mostly used for internal diagnostic purposes.   








   .. method:: GetColumnCount(self)



      :rtype: `int`








   .. method:: GetColumnFitWidth(self, dc, pwc, col, subProps)

      Returns minimal width for given column so that all images and texts will fit entirely.                  

      Used by :meth:`SetSplitterLeft`   and :meth:`DoFitColumns` .                  


      :param `dc`: 
      :type `dc`: wx.ClientDC
      :param `pwc`: 
      :type `pwc`: wx.propgrid.PGProperty
      :param `col`: 
      :type `col`: int
      :param `subProps`: 
      :type `subProps`: bool




      :rtype: `int`








   .. method:: GetColumnFullWidth(self, dc, p, col)




      :param `dc`: 
      :type `dc`: wx.ClientDC
      :param `p`: 
      :type `p`: wx.propgrid.PGProperty
      :param `col`: 
      :type `col`: int




      :rtype: `int`








   .. method:: GetColumnWidth(self, column)




      :param `column`: 
      :type `column`: int




      :rtype: `int`








   .. method:: GetGrid(self)



      :rtype: :ref:`wx.propgrid.PropertyGrid`








   .. method:: GetLastItem(self, flags=PG_ITERATE_DEFAULT)

      Returns last item which could be iterated using given flags.                  




      :param `flags`: :ref:`PropertyGridIterator Flags <propertygriditerator flags>`    
      :type `flags`: int






      :rtype: :ref:`wx.propgrid.PGProperty`



                  





   .. method:: GetPropertyCategory(self, p)




      :param `p`: 
      :type `p`: wx.propgrid.PGProperty




      :rtype: :ref:`wx.propgrid.PropertyCategory`








   .. method:: GetSelection(self)

      Returns currently selected property.                  

      :rtype: :ref:`wx.propgrid.PGProperty`








   .. method:: GetVirtualHeight(self)

      Returns (precalculated) height of contained visible properties.                  

      :rtype: `int`








   .. method:: GetVirtualWidth(self)

      Returns combined width of margin and all the columns.                  

      :rtype: `int`








   .. method:: HitTest(self, pt)

      Returns information about arbitrary position in the grid.                  




      :param `pt`: Logical coordinates in the virtual grid space. Use :meth:`wx.Scrolled.CalcUnscrolledPosition`   if you need to translate a scrolled position into a logical one.   
      :type `pt`: wx.Point






      :rtype: :ref:`wx.propgrid.PropertyGridHitTestResult`



                  





   .. method:: IsDisplayed(self)

      Returns ``True`` if page is visibly displayed.                  

      :rtype: `bool`








   .. method:: IsInNonCatMode(self)



      :rtype: `bool`








   .. method:: OnClientWidthChange(self, newWidth, widthChange, fromOnResize=False)

      widthChange is non-client.                  


      :param `newWidth`: 
      :type `newWidth`: int
      :param `widthChange`: 
      :type `widthChange`: int
      :param `fromOnResize`: 
      :type `fromOnResize`: bool







   .. method:: PrepareAfterItemsAdded(self)



      :rtype: `bool`








   .. method:: PropagateColSizeDec(self, column, decrease, dir)




      :param `column`: 
      :type `column`: int
      :param `decrease`: 
      :type `decrease`: int
      :param `dir`: 
      :type `dir`: int







   .. method:: RecalculateVirtualHeight(self)

      Recalculates m_virtualHeight.                   





   .. method:: ResetColumnSizes(self, setSplitterFlags)




      :param `setSplitterFlags`: 
      :type `setSplitterFlags`: int







   .. method:: SetColumnCount(self, colCount)




      :param `colCount`: 
      :type `colCount`: int







   .. method:: SetSplitterLeft(self, subProps=False)




      :param `subProps`: 
      :type `subProps`: bool







   .. method:: SetVirtualWidth(self, width)

      Set virtual width for this particular page.                  


      :param `width`: 
      :type `width`: int







   .. method:: VirtualHeightChanged(self)

      Called after virtual height needs to be recalculated.                   





   .. attribute:: ActualVirtualHeight

      See :meth:`~wx.propgrid.PropertyGridPageState.GetActualVirtualHeight`


   .. attribute:: ColumnCount

      See :meth:`~wx.propgrid.PropertyGridPageState.GetColumnCount` and :meth:`~wx.propgrid.PropertyGridPageState.SetColumnCount`


   .. attribute:: Grid

      See :meth:`~wx.propgrid.PropertyGridPageState.GetGrid`


   .. attribute:: LastItem

      See :meth:`~wx.propgrid.PropertyGridPageState.GetLastItem`


   .. attribute:: Selection

      See :meth:`~wx.propgrid.PropertyGridPageState.GetSelection`


   .. attribute:: VirtualHeight

      See :meth:`~wx.propgrid.PropertyGridPageState.GetVirtualHeight`


   .. attribute:: VirtualWidth

      See :meth:`~wx.propgrid.PropertyGridPageState.GetVirtualWidth` and :meth:`~wx.propgrid.PropertyGridPageState.SetVirtualWidth`

