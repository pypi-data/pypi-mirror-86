.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.persist.persist_handlers

.. highlight:: python



.. _wx.lib.agw.persist.persist_handlers.AbstractHandler:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.persist.persist_handlers.AbstractHandler**
==========================================================================================================================================

Base class for persistent windows, uses the window name as persistent name by
default and automatically reacts to the window destruction.

.. note::

   This is an abstract class. If you wish to add another (custom) handler
   for your widgets, you should derive from :class:`AbstractHandler` and override
   the :meth:`Save() <AbstractHandler.Save>`,
   :meth:`Restore() <AbstractHandler.Restore>` and
   :meth:`GetKind() <AbstractHandler.GetKind>` methods.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>AbstractHandler</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.persist.persist_handlers.AbstractHandler_inheritance.png" alt="Inheritance diagram of AbstractHandler" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.persist.persist_handlers.AbstractHandler.html" title="wx.lib.agw.persist.persist_handlers.AbstractHandler" alt="" coords="5,5,364,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:class:`wx.lib.agw.persist.persist_handlers.AUIHandler`, :class:`wx.lib.agw.persist.persist_handlers.BookHandler`, :class:`wx.lib.agw.persist.persist_handlers.CalendarCtrlHandler`, :class:`wx.lib.agw.persist.persist_handlers.CheckBoxHandler`, :class:`wx.lib.agw.persist.persist_handlers.ChoiceComboHandler`, :class:`wx.lib.agw.persist.persist_handlers.CollapsiblePaneHandler`, :class:`wx.lib.agw.persist.persist_handlers.ColourPickerHandler`, :class:`wx.lib.agw.persist.persist_handlers.DatePickerHandler`, :class:`wx.lib.agw.persist.persist_handlers.FileDirPickerHandler`, :class:`wx.lib.agw.persist.persist_handlers.FileHistoryHandler`, :class:`wx.lib.agw.persist.persist_handlers.FoldPanelBarHandler`, :class:`wx.lib.agw.persist.persist_handlers.FontPickerHandler`, :class:`wx.lib.agw.persist.persist_handlers.ListBoxHandler`, :class:`wx.lib.agw.persist.persist_handlers.MediaCtrlHandler`, :class:`wx.lib.agw.persist.persist_handlers.MenuBarHandler`, :class:`wx.lib.agw.persist.persist_handlers.RadioBoxHandler`, :class:`wx.lib.agw.persist.persist_handlers.RadioButtonHandler`, :class:`wx.lib.agw.persist.persist_handlers.ScrolledWindowHandler`, :class:`wx.lib.agw.persist.persist_handlers.SliderHandler`, :class:`wx.lib.agw.persist.persist_handlers.SpinHandler`, :class:`wx.lib.agw.persist.persist_handlers.SplitterHandler`, :class:`wx.lib.agw.persist.persist_handlers.TextCtrlHandler`, :class:`wx.lib.agw.persist.persist_handlers.ToggleButtonHandler`, :class:`wx.lib.agw.persist.persist_handlers.ToolBarHandler`, :class:`wx.lib.agw.persist.persist_handlers.TreeCtrlHandler`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.persist.persist_handlers.AbstractHandler.__init__`            Default class constructor.
:meth:`~wx.lib.agw.persist.persist_handlers.AbstractHandler.GetKind`             Returns a short and meaningful *string* description of your widget.
:meth:`~wx.lib.agw.persist.persist_handlers.AbstractHandler.Restore`             Restores the widget's settings by calling :meth:`PersistentObject.RestoreValue() <lib.agw.persist.persistencemanager.PersistentObject.RestoreValue>`, which in
:meth:`~wx.lib.agw.persist.persist_handlers.AbstractHandler.Save`                Saves the widget's settings by calling :meth:`PersistentObject.SaveValue() <lib.agw.persist.persistencemanager.PersistentObject.SaveValue>`, which in
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: AbstractHandler(object)

   Base class for persistent windows, uses the window name as persistent name by
   default and automatically reacts to the window destruction.
   
   .. note::
   
      This is an abstract class. If you wish to add another (custom) handler
      for your widgets, you should derive from :class:`AbstractHandler` and override
      the :meth:`Save() <AbstractHandler.Save>`,
      :meth:`Restore() <AbstractHandler.Restore>` and
      :meth:`GetKind() <AbstractHandler.GetKind>` methods.

   .. method:: __init__(self, pObject)

      Default class constructor.
      
      :param `pObject`: a :class:`~wx.lib.agw.persist.persistencemanager.PersistentObject` containing information about the
       persistent widget.


   .. method:: GetKind(self)

      Returns a short and meaningful *string* description of your widget.
      
      :note: This method must be overridden in derived classes.


   .. method:: Restore(self)

      Restores the widget's settings by calling :meth:`PersistentObject.RestoreValue() <lib.agw.persist.persistencemanager.PersistentObject.RestoreValue>`, which in
      turns calls :meth:`PersistenceManager.RestoreValue() <lib.agw.persist.persistencemanager.PersistenceManager.RestoreValue>`.
      
      :note: This method must be overridden in derived classes.


   .. method:: Save(self)

      Saves the widget's settings by calling :meth:`PersistentObject.SaveValue() <lib.agw.persist.persistencemanager.PersistentObject.SaveValue>`, which in
      turns calls :meth:`PersistenceManager.SaveValue() <lib.agw.persist.persistencemanager.PersistenceManager.SaveValue>`.
      
      :note: This method must be overridden in derived classes.


