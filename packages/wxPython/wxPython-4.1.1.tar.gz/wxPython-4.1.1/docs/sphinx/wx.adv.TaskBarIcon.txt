.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.adv.TaskBarIcon:

==========================================================================================================================================
|phoenix_title|  **wx.adv.TaskBarIcon**
==========================================================================================================================================

This class represents a taskbar icon.          

A taskbar icon is an icon that appears in the 'system tray' and responds to mouse clicks, optionally with a tooltip above it to help provide information. 



|phoenix_title| X Window System Note
====================================

Under X Window System, the window manager must support either the "System Tray Protocol" (see `http://freedesktop.org/wiki/Specifications/systemtray-spec <http://freedesktop.org/wiki/Specifications/systemtray-spec>`_) by freedesktop.org (WMs used by modern desktop environments such as GNOME >= 2, KDE >= 3 and XFCE >= 4 all do) or the older methods used in GNOME 1.2 and KDE 1 and 2. If it doesn't, the icon will appear as a toplevel window on user's desktop. Because not all window managers have system tray, there's no guarantee that :ref:`wx.adv.TaskBarIcon`  will work correctly under X Window System and so the applications should use it only as an optional component of their user interface. The user should be required to explicitly enable the taskbar icon on Unix, it shouldn't be on by default. 



.. _TaskBarIcon-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive one of the :ref:`wx.adv.TaskBarIconEvent` Note that not all ports are required to send these events and so it's better to override :meth:`wx.adv.TaskBarIcon.CreatePopupMenu`   or :meth:`wx.adv.TaskBarIcon.GetPopupMenu`   if all that the application does is that it shows a popup menu in reaction to mouse click. parameters.

- EVT_TASKBAR_MOVE: Process a  ``wxEVT_TASKBAR_MOVE``   event.   
- EVT_TASKBAR_LEFT_DOWN: Process a  ``wxEVT_TASKBAR_LEFT_DOWN``   event.   
- EVT_TASKBAR_LEFT_UP: Process a  ``wxEVT_TASKBAR_LEFT_UP``   event.   
- EVT_TASKBAR_RIGHT_DOWN: Process a  ``wxEVT_TASKBAR_RIGHT_DOWN``   event.   
- EVT_TASKBAR_RIGHT_UP: Process a  ``wxEVT_TASKBAR_RIGHT_UP``   event.   
- EVT_TASKBAR_LEFT_DCLICK: Process a  ``wxEVT_TASKBAR_LEFT_DCLICK``   event.   
- EVT_TASKBAR_RIGHT_DCLICK: Process a  ``wxEVT_TASKBAR_RIGHT_DCLICK``   event.   
- EVT_TASKBAR_CLICK: This is a synonym for either ``EVT_TASKBAR_RIGHT_DOWN`` or ``wx.UP`` depending on the platform, use this event macro to catch the event which should result in the menu being displayed on the current platform.  






|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>TaskBarIcon</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.adv.TaskBarIcon_inheritance.png" alt="Inheritance diagram of TaskBarIcon" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.adv.TaskBarIcon.html" title="wx.adv.TaskBarIcon" alt="" coords="33,160,184,189"/> <area shape="rect" id="node2" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node4" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.adv.TaskBarIcon.__init__`                                             Default constructor.
:meth:`~wx.adv.TaskBarIcon.CreatePopupMenu`                                      Called by the library when the user requests popup menu if :meth:`~TaskBarIcon.GetPopupMenu`   is not overridden.
:meth:`~wx.adv.TaskBarIcon.Destroy`                                              This method is similar to :meth:`wx.Window.Destroy`   and can be used to schedule the task bar icon object for the delayed destruction: it will be deleted during the next event loop iteration, which allows the task bar icon to process any pending events for it before being destroyed.
:meth:`~wx.adv.TaskBarIcon.IsAvailable`                                          Returns ``True`` if system tray is available in the desktop environment the app runs under.
:meth:`~wx.adv.TaskBarIcon.IsIconInstalled`                                      Returns ``True`` if :meth:`~TaskBarIcon.SetIcon`   was called with no subsequent :meth:`~TaskBarIcon.RemoveIcon` .
:meth:`~wx.adv.TaskBarIcon.IsOk`                                                 Returns ``True`` if the object initialized successfully.
:meth:`~wx.adv.TaskBarIcon.PopupMenu`                                            Pops up a menu at the current mouse position.
:meth:`~wx.adv.TaskBarIcon.RemoveIcon`                                           Removes the icon previously set with :meth:`~TaskBarIcon.SetIcon` .
:meth:`~wx.adv.TaskBarIcon.SetIcon`                                              Sets the icon, and optional tooltip text.
:meth:`~wx.adv.TaskBarIcon.ShowBalloon`                                          Show a balloon notification (the icon must have been already
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.adv.TaskBarIcon(EvtHandler)

   **Possible constructors**::

       TaskBarIcon(iconType=TBI_DEFAULT_TYPE)
       
   
   This class represents a taskbar icon.



   .. method:: __init__(self, iconType=TBI_DEFAULT_TYPE)

      Default constructor.                  

      The iconType is only applicable on OSX/Cocoa.                  


      :param `iconType`: 
      :type `iconType`: wx.adv.TaskBarIconType







   .. method:: CreatePopupMenu(self)

      Called by the library when the user requests popup menu if :meth:`GetPopupMenu`   is not overridden.                  

      Override this function in order to provide popup menu associated with the icon if you don't want to override :meth:`GetPopupMenu` , i.e. if you prefer creating a new menu every time instead of reusing the same menu. 

      If :meth:`CreatePopupMenu`   returns ``None`` (this happens by default), no menu is shown, otherwise the menu is displayed and then deleted by the library as soon as the user dismisses it. If you don't want the menu to be destroyed when it is dismissed, override :meth:`GetPopupMenu`   instead.                  

      :rtype: :ref:`Menu`








   .. method:: Destroy(self)

      This method is similar to :meth:`wx.Window.Destroy`   and can be used to schedule the task bar icon object for the delayed destruction: it will be deleted during the next event loop iteration, which allows the task bar icon to process any pending events for it before being destroyed.                   





   .. staticmethod:: IsAvailable()

      Returns ``True`` if system tray is available in the desktop environment the app runs under.                  

      On Windows and macOS, the tray is always available and this function simply returns ``True``. 

      On Unix, X11 environment may or may not provide the tray, depending on user's desktop environment. Most modern desktops support the tray via the System Tray Protocol by freedesktop.org (`http://freedesktop.org/wiki/Specifications/systemtray-spec <http://freedesktop.org/wiki/Specifications/systemtray-spec>`_). 

                

      :rtype: `bool`







      .. versionadded:: 2.9.0 
     







      .. note:: 

         Tray availability may change during application's lifetime under X11 and so applications shouldn't cache the result.  







      .. note:: 

         :ref:`wx.adv.TaskBarIcon`  supports older GNOME 1.2 and KDE 1/2 methods of adding icons to tray, but they are unreliable and this method doesn't detect them.  








   .. method:: IsIconInstalled(self)

      Returns ``True`` if :meth:`SetIcon`   was called with no subsequent :meth:`RemoveIcon` .                  

      :rtype: `bool`








   .. method:: IsOk(self)

      Returns ``True`` if the object initialized successfully.                  

      :rtype: `bool`








   .. method:: PopupMenu(self, menu)

      Pops up a menu at the current mouse position.                  

      The events can be handled by a class derived from :ref:`wx.adv.TaskBarIcon`. 

                


      :param `menu`: 
      :type `menu`: wx.Menu




      :rtype: `bool`







      .. note:: 

         It is recommended to override the :meth:`CreatePopupMenu`   or :meth:`GetPopupMenu`   callback instead of calling this method from event handler, because some ports (e.g. Cocoa) may not implement :meth:`PopupMenu`   and mouse click events at all.   








   .. method:: RemoveIcon(self)

      Removes the icon previously set with :meth:`SetIcon` .                  

      :rtype: `bool`








   .. method:: SetIcon(self, icon, tooltip=EmptyString)

      Sets the icon, and optional tooltip text.                  


      :param `icon`: 
      :type `icon`: wx.Icon
      :param `tooltip`: 
      :type `tooltip`: string




      :rtype: `bool`








   .. method:: ShowBalloon(self, title, text, msec=0, flags=0)

                              Show a balloon notification (the icon must have been already
                              initialized using SetIcon).  Only implemented for Windows.

                              The ``title`` and ``text`` parameters are limited to 63 and 255
                              characters respectively, ``msec`` is the timeout, in milliseconds,
                              before the balloon disappears (will be clamped down to the allowed
                              10-30s range by Windows if it's outside it) and ``flags`` can
                              include ICON_ERROR/INFO/WARNING to show a corresponding icon.

                              Returns ``True`` if balloon was shown, ``False`` on error (incorrect
                              parameters or function unsupported by OS).
                         

      :rtype: `bool`







