.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.ActivityIndicator:

==========================================================================================================================================
|phoenix_title|  **wx.ActivityIndicator**
==========================================================================================================================================

Small control showing an animation indicating that the program is currently busy performing some background task.          









.. versionadded:: 4.1/wxWidgets-3.1.0  
    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>ActivityIndicator</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.ActivityIndicator_inheritance.png" alt="Inheritance diagram of ActivityIndicator" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.ActivityIndicator.html" title="wx.ActivityIndicator" alt="" coords="33,315,185,344"/> <area shape="rect" id="node2" href="wx.Control.html" title="wx.Control" alt="" coords="63,237,155,267"/> <area shape="rect" id="node3" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node4" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node6" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.ActivityIndicator.__init__`                                           Default constructor.
:meth:`~wx.ActivityIndicator.Create`                                             Create the control initialized using the default constructor.
:meth:`~wx.ActivityIndicator.GetClassDefaultAttributes`                          
:meth:`~wx.ActivityIndicator.IsRunning`                                          Returns ``True`` if the control is currently showing activity.
:meth:`~wx.ActivityIndicator.Start`                                              Starts animation of the indicator.
:meth:`~wx.ActivityIndicator.Stop`                                               Stops the animation of the indicator.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.ActivityIndicator(Control)

   **Possible constructors**::

       ActivityIndicator()
       
       ActivityIndicator(parent, winid=ID_ANY, pos=DefaultPosition,
                         size=DefaultSize, style=0, name="activityindicator")
       
   
   Small control showing an animation indicating that the program is
   currently busy performing some background task.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                  
      
      Use :meth:`Create`   to really create the control after using this constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name="activityindicator")`
      
      Constructor fully creating the control.                  
      
      The arguments have the usual meanings and only `parent`  is typically required.                  
      
      
      :param `parent`: 
      :type `parent`: wx.Window
      :param `winid`: 
      :type `winid`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Create(self, parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name="activityindicator")

      Create the control initialized using the default constructor.                  

      This method can be used to finish the control creation if it hadn't been done already by using the non-default constructor.                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `winid`: 
      :type `winid`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: IsRunning(self)

      Returns ``True`` if the control is currently showing activity.                  

      Returns ``False`` initially, ``True`` once :meth:`Start`   is called and ``False`` again after calling :meth:`Stop` .                  

      :rtype: `bool`








   .. method:: Start(self)

      Starts animation of the indicator.                  

      Does nothing if the indicator is already running.                   





   .. method:: Stop(self)

      Stops the animation of the indicator.                  

      Notice that the animation is stopped even if :meth:`Start`   had been called multiple times before, i.e. the calls are not cumulative.                   




