.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.gizmos.treelistctrl

.. highlight:: python



.. _wx.lib.gizmos.treelistctrl.TreeListCtrl:

==========================================================================================================================================
|phoenix_title|  **wx.lib.gizmos.treelistctrl.TreeListCtrl**
==========================================================================================================================================

See documentation for :class:`~wx.lib.agw.hypertreelist.HyperTreeList` and
:class:`~wx.lib.agw.customtreectrl.CustomTreeCtrl`. This class is just a
simple derivation of the former in order to provide a mostly compatible
class to replace the C++ TreeListCtrl class in Classic, and most
CustomTreeCtrl methods are available here as well via monkey-patched
delegates.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>TreeListCtrl</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.gizmos.treelistctrl.TreeListCtrl_inheritance.png" alt="Inheritance diagram of TreeListCtrl" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.gizmos.treelistctrl.TreeListCtrl.html" title="wx.lib.gizmos.treelistctrl.TreeListCtrl" alt="" coords="11,469,271,499"/> <area shape="rect" id="node2" href="wx.lib.agw.hypertreelist.HyperTreeList.html" title="wx.lib.agw.hypertreelist.HyperTreeList" alt="" coords="5,392,276,421"/> <area shape="rect" id="node3" href="wx.Control.html" title="wx.Control" alt="" coords="95,315,187,344"/> <area shape="rect" id="node4" href="wx.Window.html" title="wx.Window" alt="" coords="92,237,189,267"/> <area shape="rect" id="node5" href="wx.WindowBase.html" title="wx.WindowBase" alt="" coords="76,160,205,189"/> <area shape="rect" id="node6" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="82,83,199,112"/> <area shape="rect" id="node7" href="wx.Object.html" title="wx.Object" alt="" coords="37,5,124,35"/> <area shape="rect" id="node8" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="149,5,255,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.lib.agw.hypertreelist.HyperTreeList`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.gizmos.treelistctrl.TreeListCtrl.__init__`                        Default class constructor.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: TreeListCtrl(HTL.HyperTreeList)

   See documentation for :class:`~wx.lib.agw.hypertreelist.HyperTreeList` and
   :class:`~wx.lib.agw.customtreectrl.CustomTreeCtrl`. This class is just a
   simple derivation of the former in order to provide a mostly compatible
   class to replace the C++ TreeListCtrl class in Classic, and most
   CustomTreeCtrl methods are available here as well via monkey-patched
   delegates.

   .. method:: __init__(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, agwStyle=wx.TR_DEFAULT_STYLE, validator=wx.DefaultValidator, name="treelistctrl")

      Default class constructor.
      
      :param `parent`: parent window. Must not be ``None``;
      :param `id`: window identifier. A value of -1 indicates a default value;
      :param `pos`: the control position. A value of (-1, -1) indicates a default position,
       chosen by either the windowing system or wxPython, depending on platform;
      :param `size`: the control size. A value of (-1, -1) indicates a default size,
       chosen by either the windowing system or wxPython, depending on platform;
      :param `style`: the underlying :class:`wx.Control` style;
      :param `agwStyle`: the AGW-specific :class:`HyperTreeList` window style. This can be a combination
       of the following bits:
      
       ============================== =========== ==================================================
       Window Styles                  Hex Value   Description
       ============================== =========== ==================================================
       ``TR_NO_BUTTONS``                      0x0 For convenience to document that no buttons are to be drawn.
       ``TR_SINGLE``                          0x0 For convenience to document that only one item may be selected at a time. Selecting another item causes the current selection, if any, to be deselected. This is the default.
       ``TR_HAS_BUTTONS``                     0x1 Use this style to show + and - buttons to the left of parent items.
       ``TR_NO_LINES``                        0x4 Use this style to hide vertical level connectors.
       ``TR_LINES_AT_ROOT``                   0x8 Use this style to show lines between root nodes. Only applicable if ``TR_HIDE_ROOT`` is set and ``TR_NO_LINES`` is not set.
       ``TR_DEFAULT_STYLE``                   0x9 The set of flags that are closest to the defaults for the native control for a particular toolkit.
       ``TR_TWIST_BUTTONS``                  0x10 Use old Mac-twist style buttons.
       ``TR_MULTIPLE``                       0x20 Use this style to allow a range of items to be selected. If a second range is selected, the current range, if any, is deselected.
       ``TR_EXTENDED``                       0x40 Use this style to allow disjoint items to be selected. (Only partially implemented; may not work in all cases).
       ``TR_HAS_VARIABLE_ROW_HEIGHT``        0x80 Use this style to cause row heights to be just big enough to fit the content. If not set, all rows use the largest row height. The default is that this flag is unset.
       ``TR_EDIT_LABELS``                   0x200 Use this style if you wish the user to be able to edit labels in the tree control.
       ``TR_ROW_LINES``                     0x400 Use this style to draw a contrasting border between displayed rows.
       ``TR_HIDE_ROOT``                     0x800 Use this style to suppress the display of the root node, effectively causing the first-level nodes to appear as a series of root nodes.
       ``TR_COLUMN_LINES``                 0x1000 Use this style to draw a contrasting border between displayed columns.
       ``TR_FULL_ROW_HIGHLIGHT``           0x2000 Use this style to have the background colour and the selection highlight extend  over the entire horizontal row of the tree control window.
       ``TR_AUTO_CHECK_CHILD``             0x4000 Only meaningful for checkbox-type items: when a parent item is checked/unchecked its children are checked/unchecked as well.
       ``TR_AUTO_TOGGLE_CHILD``            0x8000 Only meaningful for checkbox-type items: when a parent item is checked/unchecked its children are toggled accordingly.
       ``TR_AUTO_CHECK_PARENT``           0x10000 Only meaningful for checkbox-type items: when a child item is checked/unchecked its parent item is checked/unchecked as well.
       ``TR_ALIGN_WINDOWS``               0x20000 Flag used to align windows (in items with windows) at the same horizontal position.
       ``TR_NO_HEADER``                   0x40000 Use this style to hide the columns header.
       ``TR_ELLIPSIZE_LONG_ITEMS``        0x80000 Flag used to ellipsize long items when the horizontal space for :class:`~wx.lib.agw.customtreectrl.CustomTreeCtrl` is low.
       ``TR_VIRTUAL``                    0x100000 :class:`HyperTreeList` will have virtual behaviour.
       ============================== =========== ==================================================
      
      :param `validator`: window validator;
      :param `name`: window name.


