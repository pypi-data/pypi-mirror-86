.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.Button:

==========================================================================================================================================
|phoenix_title|  **wx.Button**
==========================================================================================================================================

A button is a control that contains a text string, and is one of the most common elements of a GUI.          

It may be placed on a :ref:`dialog box <wx.Dialog>`  or on a :ref:`wx.Panel`  panel, or indeed on almost any other window. 

By default, i.e. if none of the alignment styles are specified, the label is centered both horizontally and vertically. If the button has both a label and a bitmap, the alignment styles above specify the location of the rectangle combining both the label and the bitmap and the bitmap position set with :meth:`wx.Button.SetBitmapPosition`   defines the relative position of the bitmap with respect to the label (however currently non-default alignment combinations are not implemented on all platforms). 

Since version 2.9.1 :ref:`wx.Button`  supports showing both text and an image (currently only when using wxMSW, wxGTK or OSX/Cocoa ports), see :meth:`~wx.Button.SetBitmap`  and :meth:`~wx.Button.SetBitmapLabel`, :meth:`~wx.Button.SetBitmapDisabled`  &c methods. In the previous wxWidgets versions this functionality was only available in (the now trivial) :ref:`wx.BitmapButton`  class which was only capable of showing an image without text. 

A button may have either a single image for all states or different images for the following states (different images are not currently supported under macOS where the normal image is used for all states): 

- **normal:**  the default state  
- **disabled:**  bitmap shown when the button is disabled.  
- **pressed:**  bitmap shown when the button is pushed (e.g. while the user keeps the mouse button pressed on it)  
- **focus:**  bitmap shown when the button has keyboard focus (but is not pressed as in this case the button is in the pressed state)  
- **current:**  bitmap shown when the mouse is over the button (but it is not pressed although it may have focus). Notice that if current bitmap is not specified but the current platform UI uses hover images for the buttons (such as Windows or GTK+), then the focus bitmap is used for hover state as well. This makes it possible to set focus bitmap only to get reasonably good behaviour on all platforms. 

All of the bitmaps must be of the same size and the normal bitmap must be set first (to a valid bitmap), before setting any other ones. Also, if the size of the bitmaps is changed later, you need to change the size of the normal bitmap before setting any other bitmaps with the new size (and you do need to reset all of them as their original values can be lost when the normal bitmap size changes).


The position of the image inside the button be configured using :meth:`~wx.Button.SetBitmapPosition`. By default the image is on the left of the text. 

Please also notice that GTK+ uses a global setting called  ``gtk-button-images``   to determine if the images should be shown in the buttons at all. If it is off (which is the case in e.g. Gnome 2.28 by default), no images will be shown, consistently with the native behaviour. 





.. _Button-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  

- ``wx.BU_LEFT``: Left-justifies the label. Windows and GTK+ only.  
- ``wx.BU_TOP``: Aligns the label to the top of the button. Windows and GTK+ only.  
- ``wx.BU_RIGHT``: Right-justifies the bitmap label. Windows and GTK+ only.  
- ``wx.BU_BOTTOM``: Aligns the label to the bottom of the button. Windows and GTK+ only.  
- ``wx.BU_EXACTFIT``: By default, all buttons are made of at least the standard button size, even if their contents is small enough to fit into a smaller size. This is done for consistency as most platforms use buttons of the same size in the native dialogs, but can be overridden by specifying this flag. If it is given, the button will be made just big enough for its contents. Notice that under MSW the button will still have at least the standard height, even with this style, if it has a non-empty label.  
- ``wx.BU_NOTEXT``: Disables the display of the text label in the button even if it has one or its id is one of the standard stock ids with an associated label: without using this style a button which is only supposed to show a bitmap but uses a standard id would display a label too.  
- ``wx.BORDER_NONE``: Creates a button without border. This is currently implemented in MSW, GTK2 and OSX/Cocoa.  








.. _Button-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.CommandEvent` parameter.


- EVT_BUTTON: Process a  ``wxEVT_BUTTON``   event, when the button is clicked.   








         



.. seealso:: :ref:`wx.BitmapButton`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Button</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.Button_inheritance.png" alt="Inheritance diagram of Button" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Button.html" title="wx.Button" alt="" coords="65,392,153,421"/> <area shape="rect" id="node2" href="wx.AnyButton.html" title="wx.AnyButton" alt="" coords="52,315,165,344"/> <area shape="rect" id="node3" href="wx.Control.html" title="wx.Control" alt="" coords="63,237,155,267"/> <area shape="rect" id="node4" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node5" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node6" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node7" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|appearance| Control Appearance
===============================

|

.. figure:: _static/images/widgets/fullsize/wxmsw/wx.button.png
   :alt: wxMSW
   :figclass: floatleft

   **wxMSW**


.. figure:: _static/images/widgets/fullsize/wxmac/wx.button.png
   :alt: wxMAC
   :figclass: floatright

   **wxMAC**


.. figure:: _static/images/widgets/fullsize/wxgtk/wx.button.png
   :alt: wxGTK
   :figclass: floatcenter

   **wxGTK**


|


|sub_classes| Known Subclasses
==============================

:ref:`wx.BitmapButton`, :ref:`wx.adv.CommandLinkButton`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.Button.__init__`                                                      Default constructor.
:meth:`~wx.Button.Create`                                                        Button creation function for two-step creation.
:meth:`~wx.Button.GetAuthNeeded`                                                 Returns ``True`` if an authentication needed symbol is displayed on the button.
:meth:`~wx.Button.GetClassDefaultAttributes`                                     
:meth:`~wx.Button.GetDefaultSize`                                                Returns the default size for the buttons.
:meth:`~wx.Button.GetLabel`                                                      Returns the string label for the button.
:meth:`~wx.Button.SetAuthNeeded`                                                 Sets whether an authentication needed symbol should be displayed on the button.
:meth:`~wx.Button.SetDefault`                                                    This sets the button to be the default item in its top-level window (e.g.
:meth:`~wx.Button.SetLabel`                                                      Sets the string label for the button.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.Button.AuthNeeded`                                                    See :meth:`~wx.Button.GetAuthNeeded` and :meth:`~wx.Button.SetAuthNeeded`
:attr:`~wx.Button.Label`                                                         See :meth:`~wx.Button.GetLabel` and :meth:`~wx.Button.SetLabel`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.Button(AnyButton)

   **Possible constructors**::

       Button()
       
       Button(parent, id=ID_ANY, label=EmptyString, pos=DefaultPosition,
              size=DefaultSize, style=0, validator=DefaultValidator,
              name=ButtonNameStr)
       
   
   A button is a control that contains a text string, and is one of the
   most common elements of a GUI.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, label=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ButtonNameStr)`
      
      Constructor, creating and showing a button.                  
      
      The preferred way to create standard buttons is to use default value of `label`. If no label is supplied and `id`  is one of standard IDs from :ref:`this list <stock items>`, a standard label will be used. In other words, if you use a predefined  ``ID_XXX``   constant, just omit the label completely rather than specifying it. In particular, help buttons (the ones with  `id`  of  ``ID_HELP`` ) under macOS can't display any label at all and while  :ref:`wx.Button`  will detect if the standard "Help" label is used and ignore it, using any other label will prevent the button from correctly appearing as a help button and so should be avoided. 
      
      In addition to that, the button will be decorated with stock icons under GTK+ 2. 
      
      
      
      
      :param `parent`: Parent window. Must not be ``None``.   
      :type `parent`: wx.Window
      :param `id`: Button identifier. A value of  ``ID_ANY``   indicates a default value.    
      :type `id`: wx.WindowID
      :param `label`: Text to be displayed on the button.   
      :type `label`: string
      :param `pos`: Button position.   
      :type `pos`: wx.Point
      :param `size`: Button size. If the default size is specified then the button is sized appropriately for the text.   
      :type `size`: wx.Size
      :param `style`: Window style. See :ref:`wx.Button`  class description.   
      :type `style`: long
      :param `validator`: Window validator.   
      :type `validator`: wx.Validator
      :param `name`: Window name.  
      :type `name`: string
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. seealso:: :meth:`Create` , :ref:`wx.Validator`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Create(self, parent, id=ID_ANY, label=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ButtonNameStr)

      Button creation function for two-step creation.                  

      For more details, see :ref:`wx.Button`.                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `label`: 
      :type `label`: string
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `validator`: 
      :type `validator`: wx.Validator
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. method:: GetAuthNeeded(self)

      Returns ``True`` if an authentication needed symbol is displayed on the button.                  

                

      :rtype: `bool`







      .. versionadded:: 2.9.1 
     







      .. note:: 

         This method always returns ``False`` if the platform is not Windows Vista or newer.  







      .. seealso:: :meth:`SetAuthNeeded`   








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. staticmethod:: GetDefaultSize(win=None)

      Returns the default size for the buttons.                  

      It is advised to make all the dialog buttons of the same size and this function allows retrieving the (platform, and current font dependent) size which should be the best suited for this. 

      The optional `win`  argument is new since wxWidgets 3.1.3 and allows to get a per-monitor ``DPI`` specific size.                  


      :param `win`: 
      :type `win`: wx.Window




      :rtype: :ref:`wx.Size`








   .. method:: GetLabel(self)

      Returns the string label for the button.                  

                

      :rtype: `string`







      .. seealso:: :meth:`SetLabel`     








   .. method:: SetAuthNeeded(self, needed=True)

      Sets whether an authentication needed symbol should be displayed on the button.                  

                


      :param `needed`: 
      :type `needed`: bool






      .. versionadded:: 2.9.1 
     







      .. note:: 

         This method doesn't do anything if the platform is not Windows Vista or newer.  







      .. seealso:: :meth:`GetAuthNeeded`   








   .. method:: SetDefault(self)

      This sets the button to be the default item in its top-level window (e.g.                  

      the panel or the dialog box containing it). 

      As normal, pressing return causes the default button to be depressed when the return key is pressed. 

      See also :meth:`wx.Window.SetFocus`   which sets the keyboard focus for windows and text panel items, and :meth:`wx.TopLevelWindow.SetDefaultItem` . 

                

      :rtype: :ref:`wx.Window`







      :returns: 

         the old default item (possibly ``None``)   







      .. note:: 

         Under Windows, only dialog box buttons respond to this function.  








   .. method:: SetLabel(self, label)

      Sets the string label for the button.                  




      :param `label`: The label to set.   
      :type `label`: string




                  





   .. attribute:: AuthNeeded

      See :meth:`~wx.Button.GetAuthNeeded` and :meth:`~wx.Button.SetAuthNeeded`


   .. attribute:: Label

      See :meth:`~wx.Button.GetLabel` and :meth:`~wx.Button.SetLabel`

