.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.aui.tabart

.. highlight:: python



.. _wx.lib.agw.aui.tabart.ChromeTabArt:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.aui.tabart.ChromeTabArt**
==========================================================================================================================================

A class to draw tabs using the Google Chrome browser style.
It uses custom bitmap to render the tabs, so that the look and feel is as close
as possible to the Chrome style.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>ChromeTabArt</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.aui.tabart.ChromeTabArt_inheritance.png" alt="Inheritance diagram of ChromeTabArt" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.aui.tabart.ChromeTabArt.html" title="wx.lib.agw.aui.tabart.ChromeTabArt" alt="" coords="14,83,269,112"/> <area shape="rect" id="node2" href="wx.lib.agw.aui.tabart.AuiDefaultTabArt.html" title="wx.lib.agw.aui.tabart.AuiDefaultTabArt" alt="" coords="5,5,277,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.lib.agw.aui.tabart.AuiDefaultTabArt`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.aui.tabart.ChromeTabArt.__init__`                             Default class constructor.
:meth:`~wx.lib.agw.aui.tabart.ChromeTabArt.Clone`                                Clones the art object.
:meth:`~wx.lib.agw.aui.tabart.ChromeTabArt.DrawTab`                              Draws a single tab.
:meth:`~wx.lib.agw.aui.tabart.ChromeTabArt.GetTabSize`                           Returns the tab size for the given caption, bitmap and button state.
:meth:`~wx.lib.agw.aui.tabart.ChromeTabArt.SetAGWFlags`                          Sets the tab art flags.
:meth:`~wx.lib.agw.aui.tabart.ChromeTabArt.SetBitmaps`                           Assigns the tab custom bitmaps
:meth:`~wx.lib.agw.aui.tabart.ChromeTabArt.SetSizingInfo`                        Sets the tab sizing information.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: ChromeTabArt(AuiDefaultTabArt)

   A class to draw tabs using the Google Chrome browser style.
   It uses custom bitmap to render the tabs, so that the look and feel is as close
   as possible to the Chrome style.

   .. method:: __init__(self)

      Default class constructor. 


   .. method:: Clone(self)

      Clones the art object. 


   .. method:: DrawTab(self, dc, wnd, page, in_rect, close_button_state, paint_control=False)

      Draws a single tab.
      
      :param `dc`: a :class:`wx.DC` device context;
      :param `wnd`: a :class:`wx.Window` instance object;
      :param `page`: the tab control page associated with the tab;
      :param wx.Rect `in_rect`: rectangle the tab should be confined to;
      :param integer `close_button_state`: the state of the close button on the tab;
      :param bool `paint_control`: whether to draw the control inside a tab (if any) on a :class:`MemoryDC`.


   .. method:: GetTabSize(self, dc, wnd, caption, bitmap, active, close_button_state, control=None)

      Returns the tab size for the given caption, bitmap and button state.
      
      :param `dc`: a :class:`wx.DC` device context;
      :param `wnd`: a :class:`wx.Window` instance object;
      :param string `caption`: the tab text caption;
      :param wx.Bitmap `bitmap`: the bitmap displayed on the tab;
      :param bool `active`: whether the tab is selected or not;
      :param integer `close_button_state`: the state of the close button on the tab;
      :param wx.Window `control`: a :class:`wx.Window` instance inside a tab (or ``None``).


   .. method:: SetAGWFlags(self, agwFlags)

      Sets the tab art flags.
      
      :param integer `agwFlags`: a combination of the following values:
      
       ==================================== ==================================
       Flag name                            Description
       ==================================== ==================================
       ``AUI_NB_TOP``                       With this style, tabs are drawn along the top of the notebook
       ``AUI_NB_LEFT``                      With this style, tabs are drawn along the left of the notebook. Not implemented yet.
       ``AUI_NB_RIGHT``                     With this style, tabs are drawn along the right of the notebook. Not implemented yet.
       ``AUI_NB_BOTTOM``                    With this style, tabs are drawn along the bottom of the notebook
       ``AUI_NB_TAB_SPLIT``                 Allows the tab control to be split by dragging a tab
       ``AUI_NB_TAB_MOVE``                  Allows a tab to be moved horizontally by dragging
       ``AUI_NB_TAB_EXTERNAL_MOVE``         Allows a tab to be moved to another tab control
       ``AUI_NB_TAB_FIXED_WIDTH``           With this style, all tabs have the same width
       ``AUI_NB_SCROLL_BUTTONS``            With this style, left and right scroll buttons are displayed
       ``AUI_NB_WINDOWLIST_BUTTON``         With this style, a drop-down list of windows is available
       ``AUI_NB_CLOSE_BUTTON``              With this style, a close button is available on the tab bar
       ``AUI_NB_CLOSE_ON_ACTIVE_TAB``       With this style, a close button is available on the active tab
       ``AUI_NB_CLOSE_ON_ALL_TABS``         With this style, a close button is available on all tabs
       ``AUI_NB_MIDDLE_CLICK_CLOSE``        Allows to close :class:`~wx.lib.agw.aui.auibook.AuiNotebook` tabs by mouse middle button click
       ``AUI_NB_SUB_NOTEBOOK``              This style is used by :class:`~wx.lib.agw.aui.framemanager.AuiManager` to create automatic AuiNotebooks
       ``AUI_NB_HIDE_ON_SINGLE_TAB``        Hides the tab window if only one tab is present
       ``AUI_NB_SMART_TABS``                Use Smart Tabbing, like ``Alt`` + ``Tab`` on Windows
       ``AUI_NB_USE_IMAGES_DROPDOWN``       Uses images on dropdown window list menu instead of check items
       ``AUI_NB_CLOSE_ON_TAB_LEFT``         Draws the tab close button on the left instead of on the right (a la Camino browser)
       ``AUI_NB_TAB_FLOAT``                 Allows the floating of single tabs. Known limitation: when the notebook is more or less full
                                            screen, tabs cannot be dragged far enough outside of the notebook to become floating pages
       ``AUI_NB_DRAW_DND_TAB``              Draws an image representation of a tab while dragging (on by default)
       ``AUI_NB_ORDER_BY_ACCESS``           Tab navigation order by last access time for the tabs
       ``AUI_NB_NO_TAB_FOCUS``              Don't draw tab focus rectangle
       ==================================== ==================================
      
      :note: Overridden from :class:`AuiDefaultTabArt`.


   .. method:: SetBitmaps(self, mirror)

      Assigns the tab custom bitmaps
      
      :param bool `mirror`: whether to vertically mirror the bitmap or not.


   .. method:: SetSizingInfo(self, tab_ctrl_size, tab_count, minMaxTabWidth)

      Sets the tab sizing information.
      
      :param wx.Size `tab_ctrl_size`: the size of the tab control area;
      :param integer `tab_count`: the number of tabs;
      :param tuple `minMaxTabWidth`: a tuple containing the minimum and maximum tab widths
       to be used when the ``AUI_NB_TAB_FIXED_WIDTH`` style is active.


