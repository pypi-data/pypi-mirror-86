.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.InfoBar:

==========================================================================================================================================
|phoenix_title|  **wx.InfoBar**
==========================================================================================================================================

An info bar is a transient window shown at top or bottom of its parent window to display non-critical information to the user.          

This class provides another way to show messages to the user, intermediate between message boxes and status bar messages. The message boxes are modal and thus interrupt the users work flow and should be used sparingly for this reason. However status bar messages are often too easy not to notice at all. An info bar provides a way to present the messages which has a much higher chance to be noticed by the user but without being annoying. 

Info bar may show an icon (on the left), text message and, optionally, buttons allowing the user to react to the information presented. Unless a custom button was added to the info bar, it also has a close button at the right allowing the user to dismiss it so it isn't necessary to provide a button just to close it. 

:ref:`wx.InfoBar`  calls its parent :meth:`wx.Window.Layout`   method and assumes that it will change the parent layout appropriately depending on whether the info bar itself is shown or hidden. Usually this is achieved by simply using a sizer for the parent window layout and adding :ref:`wx.InfoBar`  to this sizer as one of the items. Considering the usual placement of the info bars, normally this sizer should be a vertical :ref:`wx.BoxSizer`  and the bar its first or last element so the simplest possible example of using this class would be: ::

        class MyFrame(wx.Frame):

            def __init__(self, parent):

                wx.Frame.__init__(self, parent, title='InfoBar!')

                self.infoBar = wx.InfoBar(self)

                sizer = wx.BoxSizer(wx.VERTICAL)
                sizer.Add(self.infoBar, wx.SizerFlags().Expand())

                # ... add other frame controls to the sizer ...
                self.SetSizer(sizer)


            def SomeMethod(self):

                self.infoBar.ShowMessage("Something happened", wx.ICON_INFORMATION)



See the dialogs sample for more sophisticated examples. 

Currently this class is implemented generically (i.e. in the same platform-independent way for all ports) and also natively in wxGTK but the native implementation requires GTK+ 2.18 version or later (this requirement should be satisfied by any desktop systems currently in use). 







         



.. versionadded:: 2.9.1 
     







.. seealso:: :ref:`wx.StatusBar`, :ref:`wx.MessageDialog`  







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>InfoBar</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.InfoBar_inheritance.png" alt="Inheritance diagram of InfoBar" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.InfoBar.html" title="wx.InfoBar" alt="" coords="63,315,155,344"/> <area shape="rect" id="node2" href="wx.Control.html" title="wx.Control" alt="" coords="63,237,155,267"/> <area shape="rect" id="node3" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node4" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node6" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.InfoBar.__init__`                                                     Default constructor.
:meth:`~wx.InfoBar.AddButton`                                                    Add a button to be shown in the info bar.
:meth:`~wx.InfoBar.Create`                                                       Create the info bar window.
:meth:`~wx.InfoBar.Dismiss`                                                      Hide the info bar window.
:meth:`~wx.InfoBar.GetButtonCount`                                               Returns the number of currently shown buttons.
:meth:`~wx.InfoBar.GetButtonId`                                                  Returns the ``ID`` of the button at the given position.
:meth:`~wx.InfoBar.GetClassDefaultAttributes`                                    
:meth:`~wx.InfoBar.GetEffectDuration`                                            Return the effect animation duration currently used.
:meth:`~wx.InfoBar.GetHideEffect`                                                Return the effect currently used for hiding the bar.
:meth:`~wx.InfoBar.GetShowEffect`                                                Return the effect currently used for showing the bar.
:meth:`~wx.InfoBar.HasButtonId`                                                  Returns whether a button with the given ``ID`` is currently shown.
:meth:`~wx.InfoBar.RemoveButton`                                                 Remove a button previously added by :meth:`~InfoBar.AddButton` .
:meth:`~wx.InfoBar.SetEffectDuration`                                            Set the duration of the animation used when showing or hiding the bar.
:meth:`~wx.InfoBar.SetFont`                                                      Overridden base class methods changes the font of the text message.
:meth:`~wx.InfoBar.SetShowHideEffects`                                           Set the effects to use when showing and hiding the bar.
:meth:`~wx.InfoBar.ShowMessage`                                                  Show a message in the bar.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.InfoBar.ButtonCount`                                                  See :meth:`~wx.InfoBar.GetButtonCount`
:attr:`~wx.InfoBar.EffectDuration`                                               See :meth:`~wx.InfoBar.GetEffectDuration` and :meth:`~wx.InfoBar.SetEffectDuration`
:attr:`~wx.InfoBar.HideEffect`                                                   See :meth:`~wx.InfoBar.GetHideEffect`
:attr:`~wx.InfoBar.ShowEffect`                                                   See :meth:`~wx.InfoBar.GetShowEffect`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.InfoBar(Control)

   **Possible constructors**::

       InfoBar()
       
       InfoBar(parent, winid=ID_ANY)
       
   
   An info bar is a transient window shown at top or bottom of its parent
   window to display non-critical information to the user.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                  
      
      Use :meth:`Create`   for the objects created using this constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, winid=ID_ANY)`
      
      Constructor creating the info bar window.                  
      
                      
      
      
      :param `parent`: 
      :type `parent`: wx.Window
      :param `winid`: 
      :type `winid`: wx.WindowID
      
      
      
      
      
      
      .. seealso:: :meth:`Create`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AddButton(self, btnid, label="")

      Add a button to be shown in the info bar.                  

      The button added by this method will be shown to the right of the text (in ``LTR`` layout), with each successive button being added to the right of the previous one. If any buttons are added to the info bar using this method, the default "Close" button is not shown as it is assumed that the extra buttons already allow the user to close it. 

      Clicking the button will generate a normal ``EVT_COMMAND_BUTTON_CLICKED`` event which can be handled as usual. The default handler in :ref:`wx.InfoBar`  itself closes the window whenever a button in it is clicked so if you wish the info bar to be hidden when the button is clicked, simply call  ``event.Skip()``   in the button handler to let the base class handler do it (calling  :meth:`Dismiss`   explicitly works too, of course). On the other hand, if you don't skip the event, the info bar will remain opened so make sure to do it for at least some buttons to allow the user to close it. 

      Notice that the generic :ref:`wx.InfoBar`  implementation handles the button events itself and so they are not propagated to the info bar parent and you need to either inherit from :ref:`wx.InfoBar`  and handle them in your derived class or use :meth:`wx.EvtHandler.Connect` , as is done in the dialogs sample, to handle the button events in the parent frame. 




      :param `btnid`: Id of the button. It will be used in the button message clicking this button will generate.   
      :type `btnid`: wx.WindowID
      :param `label`: The label of the button. It may only be empty if  `btnid`  is one of the stock ids in which case the corresponding stock label (see :ref:`wx.GetStockLabel`) will be used.   
      :type `label`: string






                  





   .. method:: Create(self, parent, winid=ID_ANY)

      Create the info bar window.                  

      Notice that unlike most of the other Window-derived classes, :ref:`wx.InfoBar`  is created hidden and is only shown when :meth:`ShowMessage`   is called. This is more convenient as usually the info bar is created to be shown at some later time and not immediately and so creating it hidden avoids the need to call :meth:`Hide`   explicitly from the code using it. 

      This should be only called if the object was created using its default constructor. 




      :param `parent`: A valid parent window pointer.   
      :type `parent`: wx.Window
      :param `winid`: The id of the info bar window, usually unused as currently no events are generated by this class.   
      :type `winid`: wx.WindowID








      :rtype: `bool`



                  





   .. method:: Dismiss(self)

      Hide the info bar window.                  

      This method hides the window and lays out the parent window to account for its disappearance (unlike a simple :meth:`Hide` ).                   





   .. method:: GetButtonCount(self)

      Returns the number of currently shown buttons.                  

      This is simply the number of calls to :meth:`AddButton`   minus the number of calls to :meth:`RemoveButton`   so far. 

                

      :rtype: `int`







      :returns: 

         The number of currently shown buttons, possibly 0.  







      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. method:: GetButtonId(self, idx)

      Returns the ``ID`` of the button at the given position.                  

      The positions of the buttons are counted in order of their addition. 




      :param `idx`: The position of the button in 0 to :meth:`GetButtonCount`   range.   
      :type `idx`: int






      :rtype: :ref:`wx.WindowID`



                  



      :returns: 

         The ``ID`` of the button at the given position or ``wx.ID_NONE`` if it is out of range (this also results in an assertion failure).  







      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: GetEffectDuration(self)

      Return the effect animation duration currently used.                  

      :rtype: `int`








   .. method:: GetHideEffect(self)

      Return the effect currently used for hiding the bar.                  

      :rtype: :ref:`wx.ShowEffect`








   .. method:: GetShowEffect(self)

      Return the effect currently used for showing the bar.                  

      :rtype: :ref:`wx.ShowEffect`








   .. method:: HasButtonId(self, btnid)

      Returns whether a button with the given ``ID`` is currently shown.                  




      :param `btnid`: ``ID`` of the button to check for.   
      :type `btnid`: wx.WindowID






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the button with this ``ID`` is currently shown.  







      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. method:: RemoveButton(self, btnid)

      Remove a button previously added by :meth:`AddButton` .                  




      :param `btnid`: Id of the button to remove. If more than one button with the same id is used in the info bar (which is in any case not recommended), the last, i.e. most recently added, button with this id is removed.   
      :type `btnid`: wx.WindowID




                  





   .. method:: SetEffectDuration(self, duration)

      Set the duration of the animation used when showing or hiding the bar.                  

      By default, 500ms duration is used. 




      :param `duration`: Duration of the animation, in milliseconds.   
      :type `duration`: int




                  





   .. method:: SetFont(self, font)

      Overridden base class methods changes the font of the text message.                  

      :ref:`wx.InfoBar`  overrides this method to use the font passed to it for its text message part. By default a larger and bold version of the standard font is used. 

      This method is generic-only.                  


      :param `font`: 
      :type `font`: wx.Font




      :rtype: `bool`








   .. method:: SetShowHideEffects(self, showEffect, hideEffect)

      Set the effects to use when showing and hiding the bar.                  

      Either or both of the parameters can be set to ``wx.SHOW_EFFECT_NONE`` to disable using effects entirely. 

      By default, the info bar uses ``wx.SHOW_EFFECT_SLIDE_TO_BOTTOM`` effect for showing itself and ``wx.SHOW_EFFECT_SLIDE_TO_TOP`` for hiding if it is the first element of the containing sizer and reverse effects if it's the last one. If it is neither the first nor the last element, no effect is used to avoid the use of an inappropriate one and this function must be called if an effect is desired. 




      :param `showEffect`: The effect to use when showing the bar.   
      :type `showEffect`: wx.ShowEffect
      :param `hideEffect`: The effect to use when hiding the bar.   
      :type `hideEffect`: wx.ShowEffect






                  





   .. method:: ShowMessage(self, msg, flags=ICON_INFORMATION)

      Show a message in the bar.                  

      If the bar is currently hidden, it will be shown. Otherwise its message will be updated in place. 




      :param `msg`: The text of the message.   
      :type `msg`: string
      :param `flags`: One of ``wx.ICON_NONE``, ``wx.ICON_INFORMATION`` (default), ``wx.ICON_QUESTION``, ``wx.ICON_WARNING`` or ``wx.ICON_ERROR`` values. These flags have the same meaning as in :ref:`wx.MessageDialog`  for the generic version, i.e. show (or not, in case of ``wx.ICON_NONE``) the corresponding icon in the bar but can be interpreted by the native versions. For example, the GTK+ native implementation doesn't show icons at all but uses this parameter to select the appropriate background colour for the notification.   
      :type `flags`: int






                  





   .. attribute:: ButtonCount

      See :meth:`~wx.InfoBar.GetButtonCount`


   .. attribute:: EffectDuration

      See :meth:`~wx.InfoBar.GetEffectDuration` and :meth:`~wx.InfoBar.SetEffectDuration`


   .. attribute:: HideEffect

      See :meth:`~wx.InfoBar.GetHideEffect`


   .. attribute:: ShowEffect

      See :meth:`~wx.InfoBar.GetShowEffect`

