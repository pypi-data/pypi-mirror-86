.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.propgrid.PropertyCategory:

==========================================================================================================================================
|phoenix_title|  **wx.propgrid.PropertyCategory**
==========================================================================================================================================

Category (caption) property.           




|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>PropertyCategory</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.propgrid.PropertyCategory_inheritance.png" alt="Inheritance diagram of PropertyCategory" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.propgrid.PropertyCategory.html" title="wx.propgrid.PropertyCategory" alt="" coords="5,160,223,189"/> <area shape="rect" id="node2" href="wx.propgrid.PGProperty.html" title="wx.propgrid.PGProperty" alt="" coords="26,83,202,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="71,5,157,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.propgrid.PropertyCategory.__init__`                                   Default constructor is only used in special cases.
:meth:`~wx.propgrid.PropertyCategory.GetTextExtent`                              
:meth:`~wx.propgrid.PropertyCategory.GetValueAsString`                           Returns text representation of property's value.
:meth:`~wx.propgrid.PropertyCategory.ValueToString`                              Converts property value into a text representation.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.propgrid.PropertyCategory.ValueAsString`                              See :meth:`~wx.propgrid.PropertyCategory.GetValueAsString`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.propgrid.PropertyCategory(PGProperty)

   **Possible constructors**::

       PropertyCategory()
       
       PropertyCategory(label, name=PG_LABEL)
       
   
   Category (caption) property.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor is only used in special cases.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, label, name=PG_LABEL)`
      
      
      
      
      :param `label`: 
      :type `label`: string
      :param `name`: 
      :type `name`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: GetTextExtent(self, wnd, font)




      :param `wnd`: 
      :type `wnd`: wx.Window
      :param `font`: 
      :type `font`: wx.Font




      :rtype: `int`








   .. method:: GetValueAsString(self, argFlags=0)

      Returns text representation of property's value.                  




      :param `argFlags`: If 0 (default value), then displayed string is returned. If ``PG_FULL_VALUE``  is set, returns complete, storable string value instead of displayable. If ``PG_EDITABLE_VALUE``  is set, returns string value that must be editable in textctrl. If ``PG_COMPOSITE_FRAGMENT``  is set, returns text that is appropriate to display as a part of string property's composite text representation.  
      :type `argFlags`: int






      :rtype: `string`



                  



      .. note:: 

         In older versions, this function used to be overridden to convert property's value into a string representation. This function is now handled by :meth:`ValueToString` , and overriding this function now will result in run-time assertion failure.   








   .. method:: ValueToString(self, value, argFlags)

      Converts property value into a text representation.                  




      :param `value`: Value to be converted.   
      :type `value`: PGVariant
      :param `argFlags`: If 0 (default value), then displayed string is returned. If ``PG_FULL_VALUE``  is set, returns complete, storable string value instead of displayable. If ``PG_EDITABLE_VALUE``  is set, returns string value that must be editable in textctrl. If ``PG_COMPOSITE_FRAGMENT``  is set, returns text that is appropriate to display as a part of string property's composite text representation.  
      :type `argFlags`: int








      :rtype: `string`



                  



      .. note:: 

         Default implementation calls :meth:`GenerateComposedValue` .   








   .. attribute:: ValueAsString

      See :meth:`~wx.propgrid.PropertyCategory.GetValueAsString`

