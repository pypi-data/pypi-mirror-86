.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.grid.GridCellChoiceEditor:

==========================================================================================================================================
|phoenix_title|  **wx.grid.GridCellChoiceEditor**
==========================================================================================================================================

Grid cell editor for string data providing the user a choice from a list of strings.          







         



.. seealso:: :ref:`wx.grid.GridCellEditor`, :ref:`wx.grid.GridCellAutoWrapStringEditor`, :ref:`wx.grid.GridCellBoolEditor`, :ref:`wx.grid.GridCellEnumEditor`, :ref:`wx.grid.GridCellFloatEditor`, :ref:`wx.grid.GridCellNumberEditor`, :ref:`wx.grid.GridCellTextEditor`, :ref:`wx.grid.GridCellDateEditor`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>GridCellChoiceEditor</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.grid.GridCellChoiceEditor_inheritance.png" alt="Inheritance diagram of GridCellChoiceEditor" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.grid.GridCellChoiceEditor.html" title="wx.grid.GridCellChoiceEditor" alt="" coords="75,160,283,189"/> <area shape="rect" id="node2" href="wx.grid.GridCellEditor.html" title="wx.grid.GridCellEditor" alt="" coords="97,83,261,112"/> <area shape="rect" id="node3" href="wx.ClientDataContainer.html" title="wx.ClientDataContainer" alt="" coords="5,5,183,35"/> <area shape="rect" id="node4" href="wx.RefCounter.html" title="wx.RefCounter" alt="" coords="207,5,325,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.grid.GridCellEnumEditor`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.grid.GridCellChoiceEditor.__init__`                                   Choice cell renderer constructor.
:meth:`~wx.grid.GridCellChoiceEditor.EndEdit`                                    End editing the cell.
:meth:`~wx.grid.GridCellChoiceEditor.SetParameters`                              Parameters string format is "item1[,item2[...,itemN]]".
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.grid.GridCellChoiceEditor(GridCellEditor)

   **Possible constructors**::

       GridCellChoiceEditor(choices, allowOthers=False)
       
   
   Grid cell editor for string data providing the user a choice from a
   list of strings.



   .. method:: __init__(self, choices, allowOthers=False)

      Choice cell renderer constructor.                  




      :param `choices`: An array of strings from which the user can choose.   
      :type `choices`: list of strings
      :param `allowOthers`: If allowOthers is ``True``, the user can type a string not in choices array.   
      :type `allowOthers`: bool






                  





   .. method:: EndEdit(self, row, col, grid, oldval)

                                      End editing the cell.

                                      This function must check if the current value of the editing cell
                                      is valid and different from the original value in its string
                                      form. If not then simply return None.  If it has changed then
                                      this method should save the new value so that ApplyEdit can
                                      apply it later and the string representation of the new value
                                      should be returned.

                                      Notice that this method shoiuld not modify the grid as the
                                      change could still be vetoed.
                                  





   .. method:: SetParameters(self, params)

      Parameters string format is "item1[,item2[...,itemN]]".                  

      This method can be called before the editor is used for the first time, or later, in which case it replaces the previously specified strings with the new ones.                  


      :param `params`: 
      :type `params`: string






