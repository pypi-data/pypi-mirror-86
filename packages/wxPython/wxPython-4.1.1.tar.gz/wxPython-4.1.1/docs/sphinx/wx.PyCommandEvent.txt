.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.PyCommandEvent:

==========================================================================================================================================
|phoenix_title|  **wx.PyCommandEvent**
==========================================================================================================================================

                        :class:`PyCommandEvent` can be used as a base class for implementing
                        custom event types in Python. You should derive from this class
                        instead of :class:`CommandEvent` because this class is Python-aware
                        and is able to transport its Python bits safely through the
                        wxWidgets event system and have them still be there when the
                        event handler is invoked. Note that since :class:`PyCommandEvent` is
                        taking care of preserving the extra attributes that have been set
                        then you do not need to override the Clone method in your
                        derived classes.

                        .. seealso:: :class:`PyEvent`  




|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>PyCommandEvent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.PyCommandEvent_inheritance.png" alt="Inheritance diagram of PyCommandEvent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.PyCommandEvent.html" title="wx.PyCommandEvent" alt="" coords="5,5,171,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.PyCommandEvent.__init__`                                              
:meth:`~wx.PyCommandEvent.Clone`                                                 Make a new instance of the event that is a copy of self.
:meth:`~wx.PyCommandEvent.__delattr__`                                           
:meth:`~wx.PyCommandEvent.__getattr__`                                           
:meth:`~wx.PyCommandEvent.__setattr__`                                           
:meth:`~wx.PyCommandEvent._getAttrDict`                                          Gives access to the internal object that is tracking the event's python attributes.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.PyCommandEvent(CommandEvent)

   **Possible constructors**::

       PyCommandEvent(eventType=wxEVT_NULL, id=0)
       
   
   :class:`PyCommandEvent` can be used as a base class for implementing
   custom event types in Python. You should derive from this class
   instead of :class:`CommandEvent` because this class is Python-aware
   and is able to transport its Python bits safely through the
   wxWidgets event system and have them still be there when the
   event handler is invoked. Note that since :class:`PyCommandEvent` is
   taking care of preserving the extra attributes that have been set
   then you do not need to override the Clone method in your
   derived classes.
   
   .. seealso:: :class:`PyEvent`



   .. method:: __init__(self, eventType=wxEVT_NULL, id=0)




      :param `eventType`: 
      :type `eventType`: wx.EventType
      :param `id`: 
      :type `id`: int







   .. method:: Clone(self)

      Make a new instance of the event that is a copy of self.
      
      Through the magic of Python this implementation should work for
      this and all derived classes.



   .. method:: __delattr__(self, name)




      :param `name`: 
      :type `name`: PyObject







   .. method:: __getattr__(self, name)




      :param `name`: 
      :type `name`: PyObject




      :rtype: :ref:`PyObject`








   .. method:: __setattr__(self, name, value)




      :param `name`: 
      :type `name`: PyObject
      :param `value`: 
      :type `value`: PyObject







   .. method:: _getAttrDict(self)

      Gives access to the internal object that is tracking the event's python attributes. 

      :rtype: :ref:`PyObject`







