.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.TextCtrl:

==========================================================================================================================================
|phoenix_title|  **wx.TextCtrl**
==========================================================================================================================================

A text control allows text to be displayed and edited.          

It may be single line or multi-line. Notice that a lot of methods of the text controls are found in the base :ref:`wx.TextEntry`  class which is a common base class for :ref:`wx.TextCtrl`  and other controls using a single line text entry field (e.g. :ref:`wx.ComboBox`). 





.. _TextCtrl-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  

- ``wx.TE_PROCESS_ENTER``: The control will generate the event  ``wxEVT_TEXT_ENTER``   that can be handled by the program. Otherwise, i.e. either if this style not specified at all, or it is used, but there is no event handler for this event or the event handler called  :meth:`wx.Event.Skip`   to avoid overriding the default handling, pressing Enter key is either processed internally by the control or used to activate the default button of the dialog, if any.  
- ``wx.TE_PROCESS_TAB``: Normally, ``TAB`` key is used for keyboard navigation and pressing it in a control switches focus to the next one. With this style, this won't happen and if the ``TAB`` is not otherwise processed (e.g. by  ``wxEVT_CHAR``   event handler), a literal ``TAB`` character is inserted into the control. Notice that this style has no effect for single-line text controls when using wxGTK.   
- ``wx.TE_MULTILINE``: The text control allows multiple lines. If this style is not specified, line break characters should not be used in the controls value.  
- ``wx.TE_PASSWORD``: The text will be echoed as asterisks.  
- ``wx.TE_READONLY``: The text will not be user-editable.  
- ``wx.TE_RICH``: Use rich text control under MSW, this allows having more than ``64KB`` of text in the control. This style is ignored under other platforms.  
- ``wx.TE_RICH2``: Use rich text control version 2.0 or higher under MSW, this style is ignored under other platforms  
- ``wx.TE_AUTO_URL``: Highlight the URLs and generate the TextUrlEvents when mouse events occur over them.  
- ``wx.TE_NOHIDESEL``: By default, the Windows text control doesn't show the selection when it doesn't have focus - use this style to force it to always show it. It doesn't do anything under other platforms.  
- ``wx.HSCROLL``: A horizontal scrollbar will be created and used, so that text won't be wrapped. No effect under ``GTK1``.  
- ``wx.TE_NO_VSCROLL``: For multiline controls only: vertical scrollbar will never be created. This limits the amount of text which can be entered into the control to what can be displayed in it under wxMSW but not under wxGTK or wxOSX. Currently not implemented for the other platforms.  
- ``wx.TE_LEFT``: The text in the control will be left-justified (default).  
- ``wx.TE_CENTRE``: The text in the control will be centered (wxMSW, wxGTK, wxOSX).  
- ``wx.TE_RIGHT``: The text in the control will be right-justified (wxMSW, wxGTK, wxOSX).  
- ``wx.TE_DONTWRAP``: Same as ``wx.HSCROLL`` style: don't wrap at all, show horizontal scrollbar instead.  
- ``wx.TE_CHARWRAP``: For multiline controls only: wrap the lines too long to be shown entirely at any position (wxUniv, wxGTK, wxOSX).  
- ``wx.TE_WORDWRAP``: For multiline controls only: wrap the lines too long to be shown entirely at word boundaries (wxUniv, wxMSW, wxGTK, wxOSX).  
- ``wx.TE_BESTWRAP``: For multiline controls only: wrap the lines at word boundaries or at any other character if there are words longer than the window width (this is the default).  
- ``TE_CAPITALIZE``: On PocketPC and Smartphone, causes the first letter to be capitalized.  

Note that alignment styles (wx``wx.TE_LEFT``, ``wx.TE_CENTRE`` and ``wx.TE_RIGHT``) can be changed dynamically after control creation on wxMSW, wxGTK and wxOSX. ``wx.TE_READONLY``, ``wx.TE_PASSWORD`` and wrapping styles can be dynamically changed under wxGTK but not wxMSW. The other styles can be only set during control creation.




|phoenix_title| TextCtrl Text Format
====================================

The multiline text controls always store the text as a sequence of lines separated by  ``'\n'``   characters, i.e. in the Unix text format even on non-Unix platforms. This allows the user code to ignore the differences between the platforms but at a price: the indices in the control such as those returned by  :meth:`~wx.TextCtrl.GetInsertionPoint`  or :meth:`~wx.TextCtrl.GetSelection`  can **not**  be used as indices into the string returned by :meth:`~wx.TextCtrl.GetValue`  as they're going to be slightly off for platforms using  ``"\\r\\n"``   as separator (as Windows does). Instead, if you need to obtain a substring between the 2 indices obtained from the control with the help of the functions mentioned above, you should use :meth:`~wx.TextCtrl.GetRange`. And the indices themselves can only be passed to other methods, for example :meth:`~wx.TextCtrl.SetInsertionPoint`  or :meth:`~wx.TextCtrl.SetSelection`. To summarize: never use the indices returned by (multiline) :ref:`wx.TextCtrl`  as indices into the string it contains, but only as arguments to be passed back to the other :ref:`wx.TextCtrl`  methods. This problem doesn't arise for single-line platforms however where the indices in the control do correspond to the positions in the value string.  



|phoenix_title| TextCtrl Positions and Coordinates
==================================================

It is possible to use either linear positions, i.e. roughly (but `not`  always exactly, as explained in the previous section) the index of the character in the text contained in the control or ``X-Y`` coordinates, i.e. column and line of the character when working with this class and it provides the functions :meth:`~wx.TextCtrl.PositionToXY`  and :meth:`~wx.TextCtrl.XYToPosition`  to convert between the two. Additionally, a position in the control can be converted to its coordinates in pixels using :meth:`~wx.TextCtrl.PositionToCoords`  which can be useful to e.g. show a popup menu near the given character. And, in the other direction, :ref:`wx.HitTest`  can be used to find the character under, or near, the given pixel coordinates. To be more precise, positions actually refer to the gaps between characters and not the characters themselves. Thus, position 0 is the one before the very first character in the control and so is a valid position even when the control is empty. And if the control contains a single character, it has two valid positions: 0 before this character and 1 â€“  after it. This, when the documentation of various functions mentions "invalid position", it doesn't consider the position just after the last character of the line to be invalid, only the positions beyond that one (e.g. 2 and greater in the single character example) are actually invalid.  



|phoenix_title| TextCtrl Styles
================================

Multi-line text controls support styling, i.e. provide a possibility to set colours and font for individual characters in it (note that under Windows  ``TE_RICH``   style is required for style support). To use the styles you can either call  :meth:`~wx.TextCtrl.SetDefaultStyle`  before inserting the text or call :meth:`~wx.TextCtrl.SetStyle`  later to change the style of the text already in the control (the first solution is much more efficient). In either case, if the style doesn't specify some of the attributes (for example you only want to set the text colour but without changing the font nor the text background), the values of the default style will be used for them. If there is no default style, the attributes of the text control itself are used. So the following code correctly describes what it does: the second call to :meth:`~wx.TextCtrl.SetDefaultStyle`  doesn't change the text foreground colour (which stays red) while the last one doesn't change the background colour (which stays grey): ::

        text.SetDefaultStyle(wx.TextAttr(wx.RED))
        text.AppendText("Red text\n")
        text.SetDefaultStyle(wx.TextAttr(wx.NullColour, wx.LIGHT_GREY))
        text.AppendText("Red on grey text\n")
        text.SetDefaultStyle(wx.TextAttr(wx.BLUE))
        text.AppendText("Blue on grey text\n")





|phoenix_title| TextCtrl and C++ Streams
========================================

This class multiply-inherits from  ``std::streambuf``   (except for some really old compilers using non-standard iostream library), allowing code such as the following: ::

# C++-style stream support is not implemented for Python.

Note that even if your build of wxWidgets doesn't support this (the symbol  ``HAS_TEXT_WINDOW_STREAM``   has value of 0 then) you can still use  :ref:`wx.TextCtrl`  itself in a stream-like manner: ::

# C++-style stream support is not implemented for Python.

However the possibility to create a  ``std::ostream``   associated with  :ref:`wx.TextCtrl`  may be useful if you need to redirect the output of a function taking a  ``std::ostream``   as parameter to a text control. Another commonly requested need is to redirect  ``std::cout``   to the text control. This may be done in the following way: ::

# C++-style stream support is not implemented for Python.

But wxWidgets provides a convenient class to make it even simpler so instead you may just do ::

# C++-style stream support is not implemented for Python.

See :ref:`StreamToTextRedirector`  for more details.  



|phoenix_title| Event Handling
===============================

The following commands are processed by default event handlers in :ref:`wx.TextCtrl`:  ``ID_CUT`` ,   ``ID_COPY`` ,   ``ID_PASTE`` ,   ``ID_UNDO`` ,   ``ID_REDO`` . The associated UI update events are also processed automatically, when the control has the focus. 



.. _TextCtrl-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive one of the :ref:`wx.CommandEvent` parameters.

- EVT_TEXT: Respond to a  ``wxEVT_TEXT``   event, generated when the text changes. Notice that this event will be sent when the text controls contents changes  â€“:meth:`wx.TextCtrl.SetValue`   is called); see :meth:`wx.TextCtrl.ChangeValue`   for a function which does not send this event. This event is however not sent during the control creation.  
- EVT_TEXT_ENTER: Respond to a  ``wxEVT_TEXT_ENTER``   event, generated when enter is pressed in a text control which must have ``wx.TE_PROCESS_ENTER`` style for this event to be generated.   
- EVT_TEXT_URL: A mouse event occurred over an URL in the text control.  
- EVT_TEXT_MAXLEN: This event is generated when the user tries to enter more text into the control than the limit set by :meth:`wx.TextCtrl.SetMaxLength` , see its description.  






.. seealso:: :meth:`wx.TextCtrl.Create` , :ref:`wx.Validator`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>TextCtrl</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.TextCtrl_inheritance.png" alt="Inheritance diagram of TextCtrl" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.TextCtrl.html" title="wx.TextCtrl" alt="" coords="123,315,217,344"/> <area shape="rect" id="node2" href="wx.Control.html" title="wx.Control" alt="" coords="63,237,155,267"/> <area shape="rect" id="node3" href="wx.TextEntry.html" title="wx.TextEntry" alt="" coords="179,237,286,267"/> <area shape="rect" id="node4" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node5" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node6" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node7" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|appearance| Control Appearance
===============================

|

.. figure:: _static/images/widgets/fullsize/wxmsw/wx.textctrl.png
   :alt: wxMSW
   :figclass: floatleft

   **wxMSW**


.. figure:: _static/images/widgets/fullsize/wxmac/wx.textctrl.png
   :alt: wxMAC
   :figclass: floatright

   **wxMAC**


.. figure:: _static/images/widgets/fullsize/wxgtk/wx.textctrl.png
   :alt: wxGTK
   :figclass: floatcenter

   **wxGTK**


|


|sub_classes| Known Subclasses
==============================

:ref:`wx.SearchCtrl`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.TextCtrl.__init__`                                                    Default constructor.
:meth:`~wx.TextCtrl.Create`                                                      Creates the text control for two-step construction.
:meth:`~wx.TextCtrl.DiscardEdits`                                                Resets the internal modified flag as if the current changes had been saved.
:meth:`~wx.TextCtrl.EmulateKeyPress`                                             This function inserts into the control the character which would have been inserted if the given key event had occurred in the text control.
:meth:`~wx.TextCtrl.GetClassDefaultAttributes`                                   
:meth:`~wx.TextCtrl.GetDefaultStyle`                                             Returns the style currently used for the new text.
:meth:`~wx.TextCtrl.GetLineLength`                                               Gets the length of the specified line, not including any trailing newline character(s).
:meth:`~wx.TextCtrl.GetLineText`                                                 Returns the contents of a given line in the text control, not including any trailing newline character(s).
:meth:`~wx.TextCtrl.GetNumberOfLines`                                            Returns the number of lines in the text control buffer.
:meth:`~wx.TextCtrl.GetStyle`                                                    Returns the style at this position in the text control.
:meth:`~wx.TextCtrl.HideNativeCaret`                                             Turn off the widget's native caret on Windows.
:meth:`~wx.TextCtrl.HitTestPos`                                                  Finds the position of the character at the specified point.
:meth:`~wx.TextCtrl.HitTest`                                                     Finds the row and column of the character at the specified point.
:meth:`~wx.TextCtrl.IsModified`                                                  Returns ``True`` if the text has been modified by user.
:meth:`~wx.TextCtrl.IsMultiLine`                                                 Returns ``True`` if this is a multi line edit control and ``False`` otherwise.
:meth:`~wx.TextCtrl.IsSingleLine`                                                Returns ``True`` if this is a single line edit control and ``False`` otherwise.
:meth:`~wx.TextCtrl.LoadFile`                                                    Loads and displays the named file, if it exists.
:meth:`~wx.TextCtrl.MacCheckSpelling`                                            Turn on the native spell checking for the text widget on
:meth:`~wx.TextCtrl.MarkDirty`                                                   Mark text as modified (dirty).
:meth:`~wx.TextCtrl.OSXDisableAllSmartSubstitutions`                             Mac-only method to disable all automatic text substitutions.
:meth:`~wx.TextCtrl.OSXEnableAutomaticDashSubstitution`                          Mac-only method for turning on/off automatic dash substitutions.
:meth:`~wx.TextCtrl.OSXEnableAutomaticQuoteSubstitution`                         Mac-only method for turning on/off automatic quote substitutions.
:meth:`~wx.TextCtrl.PositionToCoords`                                            Converts given text position to client coordinates in pixels.
:meth:`~wx.TextCtrl.PositionToXY`                                                Converts given position to a zero-based column, line number pair.
:meth:`~wx.TextCtrl.SaveFile`                                                    Saves the contents of the control in a text file.
:meth:`~wx.TextCtrl.SetDefaultStyle`                                             Changes the default style to use for the new text which is going to be added to the control.
:meth:`~wx.TextCtrl.SetModified`                                                 Marks the control as being modified by the user or not.
:meth:`~wx.TextCtrl.SetStyle`                                                    Changes the style of the given range.
:meth:`~wx.TextCtrl.ShowNativeCaret`                                             Turn on the widget's native caret on Windows.
:meth:`~wx.TextCtrl.ShowPosition`                                                Makes the line containing the given position visible.
:meth:`~wx.TextCtrl.XYToPosition`                                                Converts the given zero based column and line number to a position.
:meth:`~wx.TextCtrl.flush`                                                       ``NOP``, for file-like compatibility.
:meth:`~wx.TextCtrl.write`                                                       Append text to the textctrl, for file-like compatibility.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.TextCtrl.DefaultStyle`                                                See :meth:`~wx.TextCtrl.GetDefaultStyle` and :meth:`~wx.TextCtrl.SetDefaultStyle`
:attr:`~wx.TextCtrl.NumberOfLines`                                               See :meth:`~wx.TextCtrl.GetNumberOfLines`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.TextCtrl(Control, TextEntry)

   **Possible constructors**::

       TextCtrl()
       
       TextCtrl(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition,
                size=DefaultSize, style=0, validator=DefaultValidator,
                name=TextCtrlNameStr)
       
   
   A text control allows text to be displayed and edited.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=TextCtrlNameStr)`
      
      Constructor, creating and showing a text control.                  
      
      
      
      
      :param `parent`: Parent window. Should not be ``None``.   
      :type `parent`: wx.Window
      :param `id`: Control identifier. A value of -1 denotes a default value.   
      :type `id`: wx.WindowID
      :param `value`: Default text value.   
      :type `value`: string
      :param `pos`: Text control position.   
      :type `pos`: wx.Point
      :param `size`: Text control size.   
      :type `size`: wx.Size
      :param `style`: Window style. See :ref:`wx.TextCtrl`.   
      :type `style`: long
      :param `validator`: Window validator.   
      :type `validator`: wx.Validator
      :param `name`: Window name.  
      :type `name`: string
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. note:: 
      
         The horizontal scrollbar (wx``wx.HSCROLL`` style flag) will only be created for multi-line text controls. Without a horizontal scrollbar, text lines that don't fit in the control's size will be wrapped (but no newline character is inserted). Single line controls don't have a horizontal scrollbar, the text is automatically scrolled so that the insertion point is always visible.  
      
      
      
      
      
      
      
      .. seealso:: :meth:`Create` , :ref:`wx.Validator`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Create(self, parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=TextCtrlNameStr)

      Creates the text control for two-step construction.                  

      This method should be called if the default constructor was used for the control creation. Its parameters have the same meaning as for the non-default constructor.                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `value`: 
      :type `value`: string
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `validator`: 
      :type `validator`: wx.Validator
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. method:: DiscardEdits(self)

      Resets the internal modified flag as if the current changes had been saved.                   





   .. method:: EmulateKeyPress(self, event)

      This function inserts into the control the character which would have been inserted if the given key event had occurred in the text control.                  

      The `event`  object should be the same as the one passed to  ``EVT_KEY_DOWN``   handler previously by wxWidgets. Please note that this function doesn't currently work correctly for all keys under any platform but MSW. 

                


      :param `event`: 
      :type `event`: wx.KeyEvent




      :rtype: `bool`







      :returns: 

         ``True`` if the event resulted in a change to the control, ``False`` otherwise.   








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: GetDefaultStyle(self)

      Returns the style currently used for the new text.                  

                

      :rtype: :ref:`wx.TextAttr`







      .. seealso:: :meth:`SetDefaultStyle`     








   .. method:: GetLineLength(self, lineNo)

      Gets the length of the specified line, not including any trailing newline character(s).                  




      :param `lineNo`: Line number (starting from zero).  
      :type `lineNo`: long






      :rtype: `int`



                  



      :returns: 

         The length of the line, or -1 if `lineNo`  was invalid.   








   .. method:: GetLineText(self, lineNo)

      Returns the contents of a given line in the text control, not including any trailing newline character(s).                  




      :param `lineNo`: The line number, starting from zero.  
      :type `lineNo`: long






      :rtype: `string`



                  



      :returns: 

         The contents of the line.   








   .. method:: GetNumberOfLines(self)

      Returns the number of lines in the text control buffer.                  

      The returned number is the number of logical lines, i.e. just the count of the number of newline characters in the control + 1, for wxGTK and OSX/Cocoa ports while it is the number of physical lines, i.e. the count of lines actually shown in the control, in wxMSW. Because of this discrepancy, it is not recommended to use this function. 

                

      :rtype: `int`







      .. note:: 

         Note that even empty text controls have one line (where the insertion point is), so :meth:`GetNumberOfLines`   never returns 0.   








   .. method:: GetStyle(self, position, style)

      Returns the style at this position in the text control.                  

      Not all platforms support this function. 

                


      :param `position`: 
      :type `position`: long
      :param `style`: 
      :type `style`: wx.TextAttr




      :rtype: `bool`







      :returns: 

         ``True`` on success, ``False`` if an error occurred (this may also mean that the styles are not supported under this platform).  







      .. seealso:: :meth:`SetStyle` , :ref:`wx.TextAttr`    








   .. method:: HideNativeCaret(self)

                              Turn off the widget's native caret on Windows.
                              Ignored on other platforms.
                         

      :rtype: `bool`








   .. method:: HitTestPos(self, pt)

      Finds the position of the character at the specified point.                  

      If the return code is not  ``TE_HT_UNKNOWN``   the position of the character closest to this position is returned, otherwise the output parameter is not modified. 

      Please note that this function is currently only implemented in Univ, wxMSW and wxGTK ports and always returns  ``TE_HT_UNKNOWN``   in the other ports. 

      




   .. method:: HitTest(self, pt)

      Finds the row and column of the character at the specified point.                  

      If the return code is not  ``TE_HT_UNKNOWN``   the row and column of the character closest to this position are returned, otherwise the output parameters are not modified. 

      Please note that this function is currently only implemented in Univ, wxMSW and wxGTK ports and always returns  ``TE_HT_UNKNOWN``   in the other ports. 

      




   .. method:: IsModified(self)

      Returns ``True`` if the text has been modified by user.                  

      Note that calling :meth:`SetValue`   doesn't make the control modified. 

                

      :rtype: `bool`







      .. seealso:: :meth:`MarkDirty`     








   .. method:: IsMultiLine(self)

      Returns ``True`` if this is a multi line edit control and ``False`` otherwise.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`IsSingleLine`     








   .. method:: IsSingleLine(self)

      Returns ``True`` if this is a single line edit control and ``False`` otherwise.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`IsSingleLine` , :meth:`IsMultiLine`     








   .. method:: LoadFile(self, filename, fileType=TEXT_TYPE_ANY)

      Loads and displays the named file, if it exists.                  




      :param `filename`: The filename of the file to load.   
      :type `filename`: string
      :param `fileType`: The type of file to load. This is currently ignored in :ref:`wx.TextCtrl`.  
      :type `fileType`: int








      :rtype: `bool`



                  



      :returns: 

         ``True`` if successful, ``False`` otherwise.   








   .. method:: MacCheckSpelling(self, check)

                              Turn on the native spell checking for the text widget on
                              OSX.  Ignored on other platforms.
                          





   .. method:: MarkDirty(self)

      Mark text as modified (dirty).                  

                 



      .. seealso:: :meth:`IsModified`     








   .. method:: OSXDisableAllSmartSubstitutions(self)

      Mac-only method to disable all automatic text substitutions.  





   .. method:: OSXEnableAutomaticDashSubstitution(self, enable)

      Mac-only method for turning on/off automatic dash substitutions.  





   .. method:: OSXEnableAutomaticQuoteSubstitution(self, enable)

      Mac-only method for turning on/off automatic quote substitutions.  





   .. method:: PositionToCoords(self, pos)

      Converts given text position to client coordinates in pixels.                  

      This function allows finding where is the character at the given position displayed in the text control. 






      :param `pos`: Text position in 0 to :meth:`GetLastPosition`   range (inclusive).   
      :type `pos`: long






      :rtype: :ref:`wx.Point`



                  



      :returns: 

         On success returns a :ref:`wx.Point`  which contains client coordinates for the given position in pixels, otherwise returns :ref:`wx.DefaultPosition`.  







      .. versionadded:: 2.9.3 
    







      .. availability:: Only available for MSW, GTK . Additionally, wxGTK only implements this method for multiline controls and :ref:`wx.DefaultPosition`  is always returned for the single line ones. 







      .. seealso:: :meth:`XYToPosition` , :meth:`PositionToXY`     








   .. method:: PositionToXY(self, pos)

      Converts given position to a zero-based column, line number pair.                  




      :param `pos`: Position.   
      :type `pos`: long










      :rtype: `tuple`



      




   .. method:: SaveFile(self, filename=EmptyString, fileType=TEXT_TYPE_ANY)

      Saves the contents of the control in a text file.                  




      :param `filename`: The name of the file in which to save the text.   
      :type `filename`: string
      :param `fileType`: The type of file to save. This is currently ignored in :ref:`wx.TextCtrl`.  
      :type `fileType`: int








      :rtype: `bool`



                  



      :returns: 

         ``True`` if the operation was successful, ``False`` otherwise.   








   .. method:: SetDefaultStyle(self, style)

      Changes the default style to use for the new text which is going to be added to the control.                  

      This applies both to the text added programmatically using :meth:`WriteText`   or :meth:`AppendText`   and to the text entered by the user interactively. 

      If either of the font, foreground, or background colour is not set in `style`, the values of the previous default style are used for them. If the previous default style didn't set them neither, the global font or colours of the text control itself are used as fall back. 

      However if the `style`  parameter is the default :ref:`wx.TextAttr`, then the default style is just reset (instead of being combined with the new style which wouldn't change it at all). 




      :param `style`: The style for the new text.  
      :type `style`: wx.TextAttr






      :rtype: `bool`



                  



      :returns: 

         ``True`` on success, ``False`` if an error occurred (this may also mean that the styles are not supported under this platform).  







      .. seealso:: :meth:`GetDefaultStyle`     








   .. method:: SetModified(self, modified)

      Marks the control as being modified by the user or not.                  

                


      :param `modified`: 
      :type `modified`: bool






      .. seealso:: :meth:`MarkDirty` , :meth:`DiscardEdits`     








   .. method:: SetStyle(self, start, end, style)

      Changes the style of the given range.                  

      If any attribute within `style`  is not set, the corresponding attribute from :meth:`GetDefaultStyle`   is used. 




      :param `start`: The start of the range to change.   
      :type `start`: long
      :param `end`: The end of the range to change.   
      :type `end`: long
      :param `style`: The new style for the range.  
      :type `style`: wx.TextAttr










      :rtype: `bool`



                  



      :returns: 

         ``True`` on success, ``False`` if an error occurred (this may also mean that the styles are not supported under this platform).  







      .. seealso:: :meth:`GetStyle` , :ref:`wx.TextAttr`    








   .. method:: ShowNativeCaret(self, show=True)

                              Turn on the widget's native caret on Windows.
                              Ignored on other platforms.
                         

      :rtype: `bool`








   .. method:: ShowPosition(self, pos)

      Makes the line containing the given position visible.                  




      :param `pos`: The position that should be visible.   
      :type `pos`: long




                  





   .. method:: XYToPosition(self, x, y)

      Converts the given zero based column and line number to a position.                  




      :param `x`: The column number.   
      :type `x`: long
      :param `y`: The line number.  
      :type `y`: long








      :rtype: `long`



                  



      :returns: 

         The position value, or -1 if x or y was invalid.   








   .. method:: flush(self)

      ``NOP``, for file-like compatibility.  





   .. method:: write(self, text)

      Append text to the textctrl, for file-like compatibility.  





   .. attribute:: DefaultStyle

      See :meth:`~wx.TextCtrl.GetDefaultStyle` and :meth:`~wx.TextCtrl.SetDefaultStyle`


   .. attribute:: NumberOfLines

      See :meth:`~wx.TextCtrl.GetNumberOfLines`

