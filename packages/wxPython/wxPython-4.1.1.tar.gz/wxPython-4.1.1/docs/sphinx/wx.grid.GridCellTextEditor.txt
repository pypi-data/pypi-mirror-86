.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.grid.GridCellTextEditor:

==========================================================================================================================================
|phoenix_title|  **wx.grid.GridCellTextEditor**
==========================================================================================================================================

Grid cell editor for string/text data.          







         



.. seealso:: :ref:`wx.grid.GridCellEditor`, :ref:`wx.grid.GridCellAutoWrapStringEditor`, :ref:`wx.grid.GridCellBoolEditor`, :ref:`wx.grid.GridCellChoiceEditor`, :ref:`wx.grid.GridCellEnumEditor`, :ref:`wx.grid.GridCellFloatEditor`, :ref:`wx.grid.GridCellNumberEditor`, :ref:`wx.grid.GridCellDateEditor`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>GridCellTextEditor</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.grid.GridCellTextEditor_inheritance.png" alt="Inheritance diagram of GridCellTextEditor" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.grid.GridCellTextEditor.html" title="wx.grid.GridCellTextEditor" alt="" coords="84,160,275,189"/> <area shape="rect" id="node2" href="wx.grid.GridCellEditor.html" title="wx.grid.GridCellEditor" alt="" coords="97,83,261,112"/> <area shape="rect" id="node3" href="wx.ClientDataContainer.html" title="wx.ClientDataContainer" alt="" coords="5,5,183,35"/> <area shape="rect" id="node4" href="wx.RefCounter.html" title="wx.RefCounter" alt="" coords="207,5,325,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.grid.GridCellAutoWrapStringEditor`, :ref:`wx.grid.GridCellFloatEditor`, :ref:`wx.grid.GridCellNumberEditor`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.grid.GridCellTextEditor.__init__`                                     Text cell editor constructor.
:meth:`~wx.grid.GridCellTextEditor.EndEdit`                                      End editing the cell.
:meth:`~wx.grid.GridCellTextEditor.SetParameters`                                The parameters string format is "n" where n is a number representing the maximum width.
:meth:`~wx.grid.GridCellTextEditor.SetValidator`                                 Set validator to validate user input.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.grid.GridCellTextEditor(GridCellEditor)

   **Possible constructors**::

       GridCellTextEditor(maxChars=0)
       
   
   Grid cell editor for string/text data.



   .. method:: __init__(self, maxChars=0)

      Text cell editor constructor.                  




      :param `maxChars`: Maximum width of text (this parameter is supported starting since wxWidgets 2.9.5).   
      :type `maxChars`: int




                  





   .. method:: EndEdit(self, row, col, grid, oldval)

                                      End editing the cell.

                                      This function must check if the current value of the editing cell
                                      is valid and different from the original value in its string
                                      form. If not then simply return None.  If it has changed then
                                      this method should save the new value so that ApplyEdit can
                                      apply it later and the string representation of the new value
                                      should be returned.

                                      Notice that this method shoiuld not modify the grid as the
                                      change could still be vetoed.
                                  





   .. method:: SetParameters(self, params)

      The parameters string format is "n" where n is a number representing the maximum width.                  


      :param `params`: 
      :type `params`: string







   .. method:: SetValidator(self, validator)

      Set validator to validate user input.                  

                


      :param `validator`: 
      :type `validator`: wx.Validator






      .. versionadded:: 2.9.5 
     







