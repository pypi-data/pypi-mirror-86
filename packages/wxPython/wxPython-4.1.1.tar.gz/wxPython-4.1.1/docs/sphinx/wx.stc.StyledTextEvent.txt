.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.stc.StyledTextEvent:

==========================================================================================================================================
|phoenix_title|  **wx.stc.StyledTextEvent**
==========================================================================================================================================

The type of events sent from :ref:`wx.stc.StyledTextCtrl`.          







.. _StyledTextEvent-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.stc.StyledTextEvent` parameter.

Event macros: 

- EVT_STC_AUTOCOMP_CANCELLED(id,  fn): Process a  ``wxEVT_STC_AUTOCOMP_CANCELLED``   event.   
- EVT_STC_AUTOCOMP_CHAR_DELETED(id,  fn): Process a  ``wxEVT_STC_AUTOCOMP_CHAR_DELETED``   event.   
- EVT_STC_AUTOCOMP_COMPLETED(id,  fn): Process a  ``wxEVT_STC_AUTOCOMP_COMPLETED``   event.  

  .. versionadded:: 4.1/wxWidgets-3.1.1  
    


- EVT_STC_AUTOCOMP_SELECTION(id,  fn): Process a  ``wxEVT_STC_AUTOCOMP_SELECTION``   event.   
- EVT_STC_AUTOCOMP_SELECTION_CHANGE(id,  fn): Process a  ``wxEVT_STC_AUTOCOMP_SELECTION_CHANGE``   event.  

  .. versionadded:: 4.1/wxWidgets-3.1.3  
    


- EVT_STC_CALLTIP_CLICK(id,  fn): Process a  ``wxEVT_STC_CALLTIP_CLICK``   event.   
- EVT_STC_CHANGE(id,  fn): Process a  ``wxEVT_STC_CHANGE``   event.   
- EVT_STC_CHARADDED(id,  fn): Process a  ``wxEVT_STC_CHARADDED``   event.   
- EVT_STC_CLIPBOARD_COPY(id,  fn): Process a  ``wxEVT_STC_CLIPBOARD_COPY``   event.  

  .. versionadded:: 4.1/wxWidgets-3.1.0  
    


- EVT_STC_CLIPBOARD_PASTE(id,  fn): Process a  ``wxEVT_STC_CLIPBOARD_PASTE``   event.  

  .. versionadded:: 4.1/wxWidgets-3.1.0  
    


- EVT_STC_DO_DROP(id,  fn): Process a  ``wxEVT_STC_DO_DROP``   event.   
- EVT_STC_DOUBLECLICK(id,  fn): Process a  ``wxEVT_STC_DOUBLECLICK``   event.   
- EVT_STC_DRAG_OVER(id,  fn): Process a  ``wxEVT_STC_DRAG_OVER``   event.   
- EVT_STC_DWELLEND(id,  fn): Process a  ``wxEVT_STC_DWELLEND``   event.   
- EVT_STC_DWELLSTART(id,  fn): Process a  ``wxEVT_STC_DWELLSTART``   event.   
- EVT_STC_HOTSPOT_CLICK(id,  fn): Process a  ``wxEVT_STC_HOTSPOT_CLICK``   event.   
- EVT_STC_HOTSPOT_DCLICK(id,  fn): Process a  ``wxEVT_STC_HOTSPOT_DCLICK``   event.   
- EVT_STC_HOTSPOT_RELEASE_CLICK(id,  fn): Process a  ``wxEVT_STC_HOTSPOT_RELEASE_CLICK``   event.   
- EVT_STC_INDICATOR_CLICK(id,  fn): Process a  ``wxEVT_STC_INDICATOR_CLICK``   event.   
- EVT_STC_INDICATOR_RELEASE(id,  fn): Process a  ``wxEVT_STC_INDICATOR_RELEASE``   event.   
- EVT_STC_MACRORECORD(id,  fn): Process a  ``wxEVT_STC_MACRORECORD``   event.   
- EVT_STC_MARGIN_RIGHT_CLICK(id,  fn): Process a  ``wxEVT_STC_MARGIN_RIGHT_CLICK``   event.  

  .. versionadded:: 4.1/wxWidgets-3.1.1  
    


- EVT_STC_MARGINCLICK(id,  fn): Process a  ``wxEVT_STC_MARGINCLICK``   event.   
- EVT_STC_MODIFIED(id,  fn): Process a  ``wxEVT_STC_MODIFIED``   event.   
- EVT_STC_NEEDSHOWN(id,  fn): Process a  ``wxEVT_STC_NEEDSHOWN``   event.   
- EVT_STC_PAINTED(id,  fn): Process a  ``wxEVT_STC_PAINTED``   event.   
- EVT_STC_ROMODIFYATTEMPT(id,  fn): Process a  ``wxEVT_STC_ROMODIFYATTEMPT``   event.   
- EVT_STC_SAVEPOINTLEFT(id,  fn): Process a  ``wxEVT_STC_SAVEPOINTLEFT``   event.   
- EVT_STC_SAVEPOINTREACHED(id,  fn): Process a  ``wxEVT_STC_SAVEPOINTREACHED``   event.   
- EVT_STC_START_DRAG(id,  fn): Process a  ``wxEVT_STC_START_DRAG``   event.   
- EVT_STC_STYLENEEDED(id,  fn): Process a  ``wxEVT_STC_STYLENEEDED``   event.   
- EVT_STC_UPDATEUI(id,  fn): Process a  ``wxEVT_STC_UPDATEUI``   event.   
- EVT_STC_USERLISTSELECTION(id,  fn): Process a  ``wxEVT_STC_USERLISTSELECTION``   event.   
- EVT_STC_ZOOM(id,  fn): Process a  ``wxEVT_STC_ZOOM``   event.   

Most of the Scintilla notifications are mapped to a similarly named
:ref:`wx.stc.StyledTextEvent`. However a few of the notifications would only offer information available in other wxWidgets event types, and in those cases a corresponding :ref:`wx.stc.StyledTextEvent`  is not defined. Currently, the  ``wxEVT_KEY_DOWN``   event is used instead of the   ``SCN_KEY``   notification. The regular wxWidgets drag and drop functionality can be used instead of the   ``SCN_URIDROPPED``   notification. The   ``wxEVT_SET_FOCUS``   event is used instead of the   ``SCN_FOCUSIN``   notification. And the   ``wxEVT_KILL_FOCUS``   event is used instead of the   ``SCN_FOCUSOUT``   notification. 



|phoenix_title| Event Types
===========================

The following is a brief description of when the control generates these events and a list of which methods provide relevant information. Additional details can be found in the Scintilla documentation (`http://www.scintilla.org/ScintillaDoc.html#Notifications <http://www.scintilla.org/ScintillaDoc.html#Notifications>`_).  ``wxEVT_STC_AUTOCOMP_CANCELLED``       

- Generated when an autocompletion list has been canceled. 
- Valid event functions: none. 


 ``wxEVT_STC_AUTOCOMP_CHAR_DELETED``       

- Generated when a character has been deleted from an autocompletion list. 
- Valid event functions: none. 


 ``wxEVT_STC_AUTOCOMP_COMPLETED``       

- Generated after an autocompletion list has closed and inserted its text into the control. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetKey`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetString`, :meth:`~wx.stc.StyledTextEvent.GetListCompletionMethod`. 


 ``wxEVT_STC_AUTOCOMP_SELECTION``       

- Generated when an entry has been selected in an autocompletion list but before the text has been inserted. 
- To prevent the insertion, call :meth:`wx.stc.StyledTextCtrl.AutoCompCancel`   in the event handler. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetKey`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetString`, :meth:`~wx.stc.StyledTextEvent.GetListCompletionMethod`. 


 ``wxEVT_STC_AUTOCOMP_SELECTION_CHANGE``       

- Generated when items are highlighted in an autocompletion or user list. 
- :meth:`~wx.stc.StyledTextEvent.GetPosition`  will return the position at which the list is being shown. 
- For a user list, :meth:`~wx.stc.StyledTextEvent.GetListType`  will return the list type. The list type is a value input in to the :meth:`wx.stc.StyledTextCtrl.UserListShow`   method when a user list is created. 
- For an autocompletion list, :meth:`~wx.stc.StyledTextEvent.GetListType`  will always return zero. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetListType`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetString`. 


 ``wxEVT_STC_CALLTIP_CLICK``       

- Generated when a calltip has been clicked. 
- :meth:`~wx.stc.StyledTextEvent.GetPosition`  will return 1 if the up arrow has been clicked, 2 if the down arrow has been clicked, and 0 for all other clicks. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetPosition`. 


 ``wxEVT_STC_CHANGE``       

- Generated when the text of the document has changed. 
- This an older style event and should probably not be used in new code. Use  ``wxEVT_STC_MODIFIED``   instead. 
- Valid event functions: none. 


 ``wxEVT_STC_CHARADDED``       

- Generated when a character has been added to the control. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetKey`. 


 ``wxEVT_STC_CLIPBOARD_COPY``       

- Generated when text is being cut or copied to the clipboard. 
- Use :meth:`wx.stc.StyledTextEvent.SetString`   to modify the text that will be placed on the clipboard. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetString`, :meth:`~wx.stc.StyledTextEvent.SetString`. 


 ``wxEVT_STC_CLIPBOARD_PASTE``       

- Generated when text is being pasted from the clipboard. 
- Use :meth:`wx.stc.StyledTextEvent.SetString`   to modify the text that will be inserted into the control. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetString`, :meth:`~wx.stc.StyledTextEvent.SetString`. 


 ``wxEVT_STC_DO_DROP``       

- Generated when text is being dropped into the control. 
- Details of the drag may be altered by changing the respective fields of the event. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetDragResult`, :meth:`~wx.stc.StyledTextEvent.SetDragResult`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.SetPosition`, :meth:`~wx.stc.StyledTextEvent.GetString`, :meth:`~wx.stc.StyledTextEvent.SetString`, :meth:`~wx.stc.StyledTextEvent.GetX`, :meth:`~wx.stc.StyledTextEvent.GetY`. 


 ``wxEVT_STC_DOUBLECLICK``       

- Generated when the control has been double-clicked. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetLine`, :meth:`~wx.stc.StyledTextEvent.GetModifiers`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetAlt`, :meth:`~wx.stc.StyledTextEvent.GetControl`, :meth:`~wx.stc.StyledTextEvent.GetShift`. 


 ``wxEVT_STC_DRAG_OVER``       

- Generated repeatedly as text is being dragged inside the control. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetDragResult`, :meth:`~wx.stc.StyledTextEvent.SetDragResult`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetX`, :meth:`~wx.stc.StyledTextEvent.GetY`. 


 ``wxEVT_STC_DWELLEND``       

- Generated when the mouse has been moved after a  ``wxEVT_STC_DWELLSTART``   event. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetX`, :meth:`~wx.stc.StyledTextEvent.GetY`. 


 ``wxEVT_STC_DWELLSTART``       

- Generated when the mouse has remained still for a certain amount of time. 
- The amount of time can be specified with :meth:`wx.stc.StyledTextCtrl.SetMouseDwellTime` . 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetX`, :meth:`~wx.stc.StyledTextEvent.GetY`. 


 ``wxEVT_STC_HOTSPOT_CLICK``       

- Generated when a hotspot has been clicked. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetModifiers`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetAlt`, :meth:`~wx.stc.StyledTextEvent.GetControl`, :meth:`~wx.stc.StyledTextEvent.GetShift`. 


 ``wxEVT_STC_HOTSPOT_DCLICK``       

- Generated when a hotspot has been double-clicked. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetModifiers`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetAlt`, :meth:`~wx.stc.StyledTextEvent.GetControl`, :meth:`~wx.stc.StyledTextEvent.GetShift`. 


 ``wxEVT_STC_HOTSPOT_RELEASE_CLICK``       

- Generated when a click over a hotspot has been released. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetModifiers`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetAlt`, :meth:`~wx.stc.StyledTextEvent.GetControl`, :meth:`~wx.stc.StyledTextEvent.GetShift`. 


 ``wxEVT_STC_INDICATOR_CLICK``       

- Generated when a indicator has been clicked. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetModifiers`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetAlt`, :meth:`~wx.stc.StyledTextEvent.GetControl`, :meth:`~wx.stc.StyledTextEvent.GetShift`. 


 ``wxEVT_STC_INDICATOR_RELEASE``       

- Generated when a click over a indicator has been released. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetModifiers`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetAlt`, :meth:`~wx.stc.StyledTextEvent.GetControl`, :meth:`~wx.stc.StyledTextEvent.GetShift`. 


 ``wxEVT_STC_MACRORECORD``       

- Generated while macro recording is in progress. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetMessage`, :meth:`~wx.stc.StyledTextEvent.GetLParam`, :meth:`~wx.stc.StyledTextEvent.GetWParam`. 


 ``wxEVT_STC_MARGIN_RIGHT_CLICK``       

- Generated when one of the margins is clicked with the right mouse button. 
- This event is only generated if :meth:`~wx.stc.StyledTextEvent.SetMarginSensitive`  has been called for one or more of the margins. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetMargin`, :meth:`~wx.stc.StyledTextEvent.GetModifiers`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetAlt`, :meth:`~wx.stc.StyledTextEvent.GetControl`, :meth:`~wx.stc.StyledTextEvent.GetShift`. 


 ``wxEVT_STC_MARGINCLICK``       

- Generated when one of the margins is clicked. 
- This event is only generated if :meth:`~wx.stc.StyledTextEvent.SetMarginSensitive`  has been called for one or more of the margins. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetMargin`, :meth:`~wx.stc.StyledTextEvent.GetModifiers`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetAlt`, :meth:`~wx.stc.StyledTextEvent.GetControl`, :meth:`~wx.stc.StyledTextEvent.GetShift`. 


 ``wxEVT_STC_MODIFIED``       

- Generated when the contents of the control have changed or are about to change. 
- You should not attempt to make any changes to the control inside a handler for this event. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetAnnotationsLinesAdded`, :meth:`~wx.stc.StyledTextEvent.GetFoldLevelNow`, :meth:`~wx.stc.StyledTextEvent.GetFoldLevelPrev`, :meth:`~wx.stc.StyledTextEvent.GetLength`, :meth:`~wx.stc.StyledTextEvent.GetLine`, :meth:`~wx.stc.StyledTextEvent.GetLinesAdded`, :meth:`~wx.stc.StyledTextEvent.GetModificationType`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetString`, :meth:`~wx.stc.StyledTextEvent.GetToken`. 


 ``wxEVT_STC_NEEDSHOWN``       

- Generated when certain lines should be made visible by scrolling the text in the control. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetLength`, :meth:`~wx.stc.StyledTextEvent.GetPosition`. 


 ``wxEVT_STC_PAINTED``       

- Generated when the control has been refreshed. 
- Valid event functions: none. 


 ``wxEVT_STC_ROMODIFYATTEMPT``       

- Generated when an attempt has been made to change the control's text after it has been set read-only. 
- Valid event functions: none. 


 ``wxEVT_STC_SAVEPOINTREACHED``       

- Generated when the undo history has been made empty. 
- Valid event functions: none. 


 ``wxEVT_STC_SAVEPOINTLEFT``       

- Generated when the undo history is no longer empty. 
- Valid event functions: none. 


 ``wxEVT_STC_START_DRAG``       

- Generated when text is being dragged from the control. 
- Details of the drag may be altered by changing the respective fields of the event; in particular, set an empty string to prohibit the drag entirely. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetDragFlags`, :meth:`~wx.stc.StyledTextEvent.SetDragFlags`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetString`, :meth:`~wx.stc.StyledTextEvent.SetString`. 


 ``wxEVT_STC_STYLENEEDED``       

- Generated when the control has determined that style bytes should be set for a portion of the document. 
- These events are only sent if the lexer is set to ``STC_LEX_CONTAINER``. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetPosition`. 


 ``wxEVT_STC_UPDATEUI``       

- Generated when the text, style, cursor position, selection, or scrolling of the control has changed. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetUpdated`. 


 ``wxEVT_STC_USERLISTSELECTION``       

- Generated when a selection has been made from a user list. 
- Valid event functions: :meth:`~wx.stc.StyledTextEvent.GetListType`, :meth:`~wx.stc.StyledTextEvent.GetPosition`, :meth:`~wx.stc.StyledTextEvent.GetString`, :meth:`~wx.stc.StyledTextEvent.GetKey`, :meth:`~wx.stc.StyledTextEvent.GetListCompletionMethod`. 


 ``wxEVT_STC_ZOOM``       

- Generated when the zoom factor of the control has been changed either by the user or a call to :meth:`wx.stc.StyledTextCtrl.ZoomIn` /:meth:`~wx.stc.StyledTextEvent.ZoomOut`. 
- Valid event functions: none. 






|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>StyledTextEvent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.stc.StyledTextEvent_inheritance.png" alt="Inheritance diagram of StyledTextEvent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.stc.StyledTextEvent.html" title="wx.stc.StyledTextEvent" alt="" coords="5,237,179,267"/> <area shape="rect" id="node2" href="wx.CommandEvent.html" title="wx.CommandEvent" alt="" coords="17,160,167,189"/> <area shape="rect" id="node3" href="wx.Event.html" title="wx.Event" alt="" coords="51,83,133,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="49,5,135,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.stc.StyledTextEvent.__init__`                                         Constructor.
:meth:`~wx.stc.StyledTextEvent.GetAlt`                                           Returns ``True`` if the Alt key is pressed.
:meth:`~wx.stc.StyledTextEvent.GetAnnotationsLinesAdded`                         Returns the number of lines that have been added to or removed from an annotation.
:meth:`~wx.stc.StyledTextEvent.GetControl`                                       Returns ``True`` if the Control key is pressed.
:meth:`~wx.stc.StyledTextEvent.GetDragFlags`                                     Returns flags for the drag operation associated with this event.
:meth:`~wx.stc.StyledTextEvent.GetDragResult`                                    Returns drag result for this event.
:meth:`~wx.stc.StyledTextEvent.GetDragText`                                      
:meth:`~wx.stc.StyledTextEvent.GetFoldLevelNow`                                  Returns the current fold level for the line.
:meth:`~wx.stc.StyledTextEvent.GetFoldLevelPrev`                                 Returns previous fold level for the line.
:meth:`~wx.stc.StyledTextEvent.GetKey`                                           Returns the key code of the key that generated this event.
:meth:`~wx.stc.StyledTextEvent.GetLParam`                                        Returns the value of the LParam field for this event.
:meth:`~wx.stc.StyledTextEvent.GetLength`                                        Returns the length (number of characters) of this event.
:meth:`~wx.stc.StyledTextEvent.GetLine`                                          Returns zero-based line number for this event.
:meth:`~wx.stc.StyledTextEvent.GetLinesAdded`                                    Returns the number of lines added or deleted with this event.
:meth:`~wx.stc.StyledTextEvent.GetListCompletionMethod`                          Returns a value describing the action that closed the list.
:meth:`~wx.stc.StyledTextEvent.GetListType`                                      Returns the list type for this event.
:meth:`~wx.stc.StyledTextEvent.GetMargin`                                        Returns the zero-based index of the margin that generated this event.
:meth:`~wx.stc.StyledTextEvent.GetMessage`                                       Returns a message number while a macro is being recorded.
:meth:`~wx.stc.StyledTextEvent.GetModificationType`                              Returns the modification type for this event.
:meth:`~wx.stc.StyledTextEvent.GetModifiers`                                     Returns the modifiers of the key press or mouse click for this event.
:meth:`~wx.stc.StyledTextEvent.GetPosition`                                      Returns the zero-based text position associated this event.
:meth:`~wx.stc.StyledTextEvent.GetShift`                                         Returns ``True`` if the Shift key is pressed.
:meth:`~wx.stc.StyledTextEvent.GetText`                                          
:meth:`~wx.stc.StyledTextEvent.GetToken`                                         Returns the token value for this event.
:meth:`~wx.stc.StyledTextEvent.GetUpdated`                                       Returns the value of the updated field for this event.
:meth:`~wx.stc.StyledTextEvent.GetWParam`                                        Returns value of the WParam field for this event.
:meth:`~wx.stc.StyledTextEvent.GetX`                                             Returns the X coordinate of the mouse for this event.
:meth:`~wx.stc.StyledTextEvent.GetY`                                             Returns the Y coordinate of the mouse for this event.
:meth:`~wx.stc.StyledTextEvent.SetAnnotationLinesAdded`                          Sets the annotation lines added value for this event.
:meth:`~wx.stc.StyledTextEvent.SetDragFlags`                                     Sets the drag flags for this event.
:meth:`~wx.stc.StyledTextEvent.SetDragResult`                                    Sets the drag result for this event.
:meth:`~wx.stc.StyledTextEvent.SetDragText`                                      Sets the drag text for this event.
:meth:`~wx.stc.StyledTextEvent.SetFoldLevelNow`                                  Sets the current fold level for this event.
:meth:`~wx.stc.StyledTextEvent.SetFoldLevelPrev`                                 Sets the previous fold level for this event.
:meth:`~wx.stc.StyledTextEvent.SetKey`                                           Sets the key code for this event.
:meth:`~wx.stc.StyledTextEvent.SetLParam`                                        Sets value of the LParam field for this event.
:meth:`~wx.stc.StyledTextEvent.SetLength`                                        Sets the length value for this event.
:meth:`~wx.stc.StyledTextEvent.SetLine`                                          Sets line number for this event.
:meth:`~wx.stc.StyledTextEvent.SetLinesAdded`                                    Sets the number of lines added for this event.
:meth:`~wx.stc.StyledTextEvent.SetListCompletionMethod`                          Sets the list completion method for this event.
:meth:`~wx.stc.StyledTextEvent.SetListType`                                      Sets the list type for this event.
:meth:`~wx.stc.StyledTextEvent.SetMargin`                                        Sets margin number for this event.
:meth:`~wx.stc.StyledTextEvent.SetMessage`                                       Sets message number for this event.
:meth:`~wx.stc.StyledTextEvent.SetModificationType`                              Sets the modification type for this event.
:meth:`~wx.stc.StyledTextEvent.SetModifiers`                                     Sets the value of the modifiers field for this event.
:meth:`~wx.stc.StyledTextEvent.SetPosition`                                      Sets file position for this event.
:meth:`~wx.stc.StyledTextEvent.SetText`                                          Sets the text for this event.
:meth:`~wx.stc.StyledTextEvent.SetToken`                                         Sets the token for this event.
:meth:`~wx.stc.StyledTextEvent.SetUpdated`                                       Sets the value of the updated field for this event.
:meth:`~wx.stc.StyledTextEvent.SetWParam`                                        Sets the value of the WParam field for this event.
:meth:`~wx.stc.StyledTextEvent.SetX`                                             Sets the X value for this event.
:meth:`~wx.stc.StyledTextEvent.SetY`                                             Sets the Y value for this event.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.stc.StyledTextEvent.Alt`                                              See :meth:`~wx.stc.StyledTextEvent.GetAlt`
:attr:`~wx.stc.StyledTextEvent.AnnotationsLinesAdded`                            See :meth:`~wx.stc.StyledTextEvent.GetAnnotationsLinesAdded`
:attr:`~wx.stc.StyledTextEvent.Control`                                          See :meth:`~wx.stc.StyledTextEvent.GetControl`
:attr:`~wx.stc.StyledTextEvent.DragFlags`                                        See :meth:`~wx.stc.StyledTextEvent.GetDragFlags` and :meth:`~wx.stc.StyledTextEvent.SetDragFlags`
:attr:`~wx.stc.StyledTextEvent.DragResult`                                       See :meth:`~wx.stc.StyledTextEvent.GetDragResult` and :meth:`~wx.stc.StyledTextEvent.SetDragResult`
:attr:`~wx.stc.StyledTextEvent.DragText`                                         See :meth:`~wx.stc.StyledTextEvent.GetDragText` and :meth:`~wx.stc.StyledTextEvent.SetDragText`
:attr:`~wx.stc.StyledTextEvent.FoldLevelNow`                                     See :meth:`~wx.stc.StyledTextEvent.GetFoldLevelNow` and :meth:`~wx.stc.StyledTextEvent.SetFoldLevelNow`
:attr:`~wx.stc.StyledTextEvent.FoldLevelPrev`                                    See :meth:`~wx.stc.StyledTextEvent.GetFoldLevelPrev` and :meth:`~wx.stc.StyledTextEvent.SetFoldLevelPrev`
:attr:`~wx.stc.StyledTextEvent.Key`                                              See :meth:`~wx.stc.StyledTextEvent.GetKey` and :meth:`~wx.stc.StyledTextEvent.SetKey`
:attr:`~wx.stc.StyledTextEvent.LParam`                                           See :meth:`~wx.stc.StyledTextEvent.GetLParam` and :meth:`~wx.stc.StyledTextEvent.SetLParam`
:attr:`~wx.stc.StyledTextEvent.Length`                                           See :meth:`~wx.stc.StyledTextEvent.GetLength` and :meth:`~wx.stc.StyledTextEvent.SetLength`
:attr:`~wx.stc.StyledTextEvent.Line`                                             See :meth:`~wx.stc.StyledTextEvent.GetLine` and :meth:`~wx.stc.StyledTextEvent.SetLine`
:attr:`~wx.stc.StyledTextEvent.LinesAdded`                                       See :meth:`~wx.stc.StyledTextEvent.GetLinesAdded` and :meth:`~wx.stc.StyledTextEvent.SetLinesAdded`
:attr:`~wx.stc.StyledTextEvent.ListCompletionMethod`                             See :meth:`~wx.stc.StyledTextEvent.GetListCompletionMethod` and :meth:`~wx.stc.StyledTextEvent.SetListCompletionMethod`
:attr:`~wx.stc.StyledTextEvent.ListType`                                         See :meth:`~wx.stc.StyledTextEvent.GetListType` and :meth:`~wx.stc.StyledTextEvent.SetListType`
:attr:`~wx.stc.StyledTextEvent.Margin`                                           See :meth:`~wx.stc.StyledTextEvent.GetMargin` and :meth:`~wx.stc.StyledTextEvent.SetMargin`
:attr:`~wx.stc.StyledTextEvent.Message`                                          See :meth:`~wx.stc.StyledTextEvent.GetMessage` and :meth:`~wx.stc.StyledTextEvent.SetMessage`
:attr:`~wx.stc.StyledTextEvent.ModificationType`                                 See :meth:`~wx.stc.StyledTextEvent.GetModificationType` and :meth:`~wx.stc.StyledTextEvent.SetModificationType`
:attr:`~wx.stc.StyledTextEvent.Modifiers`                                        See :meth:`~wx.stc.StyledTextEvent.GetModifiers` and :meth:`~wx.stc.StyledTextEvent.SetModifiers`
:attr:`~wx.stc.StyledTextEvent.Position`                                         See :meth:`~wx.stc.StyledTextEvent.GetPosition` and :meth:`~wx.stc.StyledTextEvent.SetPosition`
:attr:`~wx.stc.StyledTextEvent.Shift`                                            See :meth:`~wx.stc.StyledTextEvent.GetShift`
:attr:`~wx.stc.StyledTextEvent.Text`                                             See :meth:`~wx.stc.StyledTextEvent.GetText` and :meth:`~wx.stc.StyledTextEvent.SetText`
:attr:`~wx.stc.StyledTextEvent.Token`                                            See :meth:`~wx.stc.StyledTextEvent.GetToken` and :meth:`~wx.stc.StyledTextEvent.SetToken`
:attr:`~wx.stc.StyledTextEvent.Updated`                                          See :meth:`~wx.stc.StyledTextEvent.GetUpdated` and :meth:`~wx.stc.StyledTextEvent.SetUpdated`
:attr:`~wx.stc.StyledTextEvent.WParam`                                           See :meth:`~wx.stc.StyledTextEvent.GetWParam` and :meth:`~wx.stc.StyledTextEvent.SetWParam`
:attr:`~wx.stc.StyledTextEvent.X`                                                See :meth:`~wx.stc.StyledTextEvent.GetX` and :meth:`~wx.stc.StyledTextEvent.SetX`
:attr:`~wx.stc.StyledTextEvent.Y`                                                See :meth:`~wx.stc.StyledTextEvent.GetY` and :meth:`~wx.stc.StyledTextEvent.SetY`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.stc.StyledTextEvent(CommandEvent)

   **Possible constructors**::

       StyledTextEvent(commandType=0, id=0)
       
       StyledTextEvent(event)
       
   
   The type of events sent from StyledTextCtrl.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, commandType=0, id=0)`
      
      Constructor.                  
      
      
      :param `commandType`: 
      :type `commandType`: wx.EventType
      :param `id`: 
      :type `id`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, event)`
      
      Copy constructor.                  
      
      
      :param `event`: 
      :type `event`: wx.stc.StyledTextEvent
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: GetAlt(self)

      Returns ``True`` if the Alt key is pressed.                  

      This method is valid for the following event types:

      -  ``wxEVT_STC_DOUBLECLICK``       
      -  ``wxEVT_STC_MARGINCLICK``       
      -  ``wxEVT_STC_HOTSPOT_CLICK``       
      -  ``wxEVT_STC_HOTSPOT_DCLICK``       
      -  ``wxEVT_STC_HOTSPOT_RELEASE_CLICK``       
      -  ``wxEVT_STC_INDICATOR_CLICK``       
      -  ``wxEVT_STC_INDICATOR_RELEASE``       
      -  ``wxEVT_STC_MARGIN_RIGHT_CLICK``       


                 

      :rtype: `bool`








   .. method:: GetAnnotationsLinesAdded(self)

      Returns the number of lines that have been added to or removed from an annotation.                  

      This method is valid for  ``wxEVT_STC_MODIFIED``   events when the result of  :meth:`GetModificationType`   includes ``STC_MOD_CHANGEANNOTATION``.                  

      :rtype: `int`








   .. method:: GetControl(self)

      Returns ``True`` if the Control key is pressed.                  

      This method is valid for the following event types:

      -  ``wxEVT_STC_DOUBLECLICK``       
      -  ``wxEVT_STC_MARGINCLICK``       
      -  ``wxEVT_STC_HOTSPOT_CLICK``       
      -  ``wxEVT_STC_HOTSPOT_DCLICK``       
      -  ``wxEVT_STC_HOTSPOT_RELEASE_CLICK``       
      -  ``wxEVT_STC_INDICATOR_CLICK``       
      -  ``wxEVT_STC_INDICATOR_RELEASE``       
      -  ``wxEVT_STC_MARGIN_RIGHT_CLICK``       


                 

      :rtype: `bool`








   .. method:: GetDragFlags(self)

      Returns flags for the drag operation associated with this event.                  

      This method is valid for  ``wxEVT_STC_START_DRAG``   events.                   

      :rtype: `int`








   .. method:: GetDragResult(self)

      Returns drag result for this event.                  

      This method is valid for  ``wxEVT_STC_DRAG_OVER``   and   ``wxEVT_STC_DO_DROP``   events.                   

      :rtype: :ref:`wx.DragResult`








   .. method:: GetDragText(self)



                

      :rtype: `string`







      .. wxdeprecated:: 
         Use :meth:`GetString`   instead.    








   .. method:: GetFoldLevelNow(self)

      Returns the current fold level for the line.                  

      This method is valid for  ``wxEVT_STC_MODIFIED``   events when the result of  :meth:`GetModificationType`   includes ``STC_MOD_CHANGEFOLD``.                  

      :rtype: `int`








   .. method:: GetFoldLevelPrev(self)

      Returns previous fold level for the line.                  

      This method is valid for  ``wxEVT_STC_MODIFIED``   events when the result of  :meth:`GetModificationType`   includes ``STC_MOD_CHANGEFOLD``.                  

      :rtype: `int`








   .. method:: GetKey(self)

      Returns the key code of the key that generated this event.                  

      This method is valid for the following event types:

      -  ``wxEVT_STC_CHARADDED``       
      -  ``wxEVT_STC_USERLISTSELECTION``       
      -  ``wxEVT_STC_AUTOCOMP_SELECTION``       
      -  ``wxEVT_STC_AUTOCOMP_COMPLETED``       


                 

      :rtype: `int`








   .. method:: GetLParam(self)

      Returns the value of the LParam field for this event.                  

      This method is valid for  ``wxEVT_STC_MACRORECORD``   events.                   

      :rtype: `int`








   .. method:: GetLength(self)

      Returns the length (number of characters) of this event.                  

      This method is valid for  ``wxEVT_STC_MODIFIED``   and   ``wxEVT_STC_NEEDSHOWN``   events.                   

      :rtype: `int`








   .. method:: GetLine(self)

      Returns zero-based line number for this event.                  

      This method is valid for  ``wxEVT_STC_DOUBLECLICK``   and   ``wxEVT_STC_MODIFIED``   events.                   

      :rtype: `int`








   .. method:: GetLinesAdded(self)

      Returns the number of lines added or deleted with this event.                  

      This method is valid for  ``wxEVT_STC_MODIFIED``   events when the result of  :meth:`GetModificationType`   includes ``STC_MOD_INSERTTEXT ``   or ``STC_MOD_DELETETEXT``.                  

      :rtype: `int`








   .. method:: GetListCompletionMethod(self)

      Returns a value describing the action that closed the list.                  

      The returned value will be one of the following constants: 



      ========================== =========================================================================== 
      ``STC_AC_FILLUP``          A fillup character caused the completion.                                   
      ``STC_AC_DOUBLECLICK``     A double-click caused the completion.                                       
      ``STC_AC_TAB``             The tab key caused the completion.                                          
      ``STC_AC_NEWLINE``         The enter key caused the completion.                                        
      ``STC_AC_COMMAND``         The :meth:`wx.stc.StyledTextCtrl.AutoCompComplete`   method was called.     
      ========================== =========================================================================== 

      |



      This method is valid for  ``wxEVT_STC_USERLISTSELECTION`` ,   ``wxEVT_STC_AUTOCOMP_SELECTION`` , and   ``wxEVT_STC_AUTOCOMP_COMPLETED``   events. 

                

      :rtype: `int`







      .. versionadded:: 4.1/wxWidgets-3.1.1  
     








   .. method:: GetListType(self)

      Returns the list type for this event.                  

      The list type is an integer passed to a list when it is created with the :meth:`wx.stc.StyledTextCtrl.UserListShow`    method and can be used to distinguish lists if more than one is used. 

      This method is valid for  ``wxEVT_STC_AUTOCOMP_SELECTION_CHANGE``   and   ``wxEVT_STC_USERLISTSELECTION``   events.                   

      :rtype: `int`








   .. method:: GetMargin(self)

      Returns the zero-based index of the margin that generated this event.                  

      This method is valid for  ``wxEVT_STC_MARGINCLICK``   and   ``wxEVT_STC_MARGIN_RIGHT_CLICK``   events.                   

      :rtype: `int`








   .. method:: GetMessage(self)

      Returns a message number while a macro is being recorded.                  

      Many of the :ref:`wx.stc.StyledTextCtrl`  methods such as :meth:`InsertText`   and :meth:`Paste`   have an event number associated with them. This method returns that number while a macro is being recorded so that the macro can be played back later. 

      This method is valid for  ``wxEVT_STC_MACRORECORD``   events.                   

      :rtype: `int`








   .. method:: GetModificationType(self)

      Returns the modification type for this event.                  

      The modification type is a bit list that describes the change that generated this event. It may contain one or more of the following values: 



      - ``STC_MOD_INSERTTEXT ``  
      - ``STC_MOD_DELETETEXT ``  
      - ``STC_MOD_CHANGESTYLE ``  
      - ``STC_MOD_CHANGEFOLD ``  
      - ``STC_PERFORMED_USER ``  
      - ``STC_PERFORMED_UNDO ``  
      - ``STC_PERFORMED_REDO ``  
      - ``STC_MULTISTEPUNDOREDO ``  
      - ``STC_LASTSTEPINUNDOREDO ``  
      - ``STC_MOD_CHANGEMARKER ``  
      - ``STC_MOD_BEFOREINSERT ``  
      - ``STC_MOD_BEFOREDELETE ``  
      - ``STC_MULTILINEUNDOREDO ``  
      - ``STC_STARTACTION ``  
      - ``STC_MOD_CHANGEINDICATOR ``  
      - ``STC_MOD_CHANGELINESTATE ``  
      - ``STC_MOD_CHANGEMARGIN ``  
      - ``STC_MOD_CHANGEANNOTATION ``  
      - ``STC_MOD_CONTAINER ``  
      - ``STC_MOD_LEXERSTATE ``  
      - ``STC_MOD_INSERTCHECK ``  
      - ``STC_MOD_CHANGETABSTOPS ``  




      This method is valid for  ``wxEVT_STC_MODIFIED``   events.                   

      :rtype: `int`








   .. method:: GetModifiers(self)

      Returns the modifiers of the key press or mouse click for this event.                  

      The returned value is a bit list that may contain one or more of the following values: 



      - ``STC_KEYMOD_SHIFT ``  
      - ``STC_KEYMOD_CTRL ``  
      - ``STC_KEYMOD_ALT ``  
      - ``STC_KEYMOD_SUPER ``  
      - ``STC_KEYMOD_META ``  




      In addition, the value can be checked for equality with ``STC_KEYMOD_NORM ``   to test if no modifiers are present. 

      This method is valid for the following event types:

      -  ``wxEVT_STC_DOUBLECLICK``       
      -  ``wxEVT_STC_MARGINCLICK``       
      -  ``wxEVT_STC_HOTSPOT_CLICK``       
      -  ``wxEVT_STC_HOTSPOT_DCLICK``       
      -  ``wxEVT_STC_HOTSPOT_RELEASE_CLICK``       
      -  ``wxEVT_STC_INDICATOR_CLICK``       
      -  ``wxEVT_STC_INDICATOR_RELEASE``       
      -  ``wxEVT_STC_MARGIN_RIGHT_CLICK``       


                 

      :rtype: `int`








   .. method:: GetPosition(self)

      Returns the zero-based text position associated this event.                  

      This method is valid for the following event types:

      -  ``wxEVT_STC_STYLENEEDED``       
      -  ``wxEVT_STC_DOUBLECLICK``       
      -  ``wxEVT_STC_MODIFIED``       
      -  ``wxEVT_STC_MARGINCLICK``       
      -  ``wxEVT_STC_NEEDSHOWN``       
      -  ``wxEVT_STC_USERLISTSELECTION``       
      -  ``wxEVT_STC_DWELLSTART``       
      -  ``wxEVT_STC_DWELLEND``       
      -  ``wxEVT_STC_HOTSPOT_CLICK``       
      -  ``wxEVT_STC_HOTSPOT_DCLICK``       
      -  ``wxEVT_STC_HOTSPOT_RELEASE_CLICK``       
      -  ``wxEVT_STC_INDICATOR_CLICK``       
      -  ``wxEVT_STC_INDICATOR_RELEASE``       
      -  ``wxEVT_STC_CALLTIP_CLICK``       
      -  ``wxEVT_STC_AUTOCOMP_SELECTION``       
      -  ``wxEVT_STC_AUTOCOMP_SELECTION_CHANGE``       
      -  ``wxEVT_STC_AUTOCOMP_COMPLETED``       
      -  ``wxEVT_STC_MARGIN_RIGHT_CLICK``       


                 

      :rtype: `int`








   .. method:: GetShift(self)

      Returns ``True`` if the Shift key is pressed.                  

      This method is valid for the following event types:

      -  ``wxEVT_STC_DOUBLECLICK``       
      -  ``wxEVT_STC_MARGINCLICK``       
      -  ``wxEVT_STC_HOTSPOT_CLICK``       
      -  ``wxEVT_STC_HOTSPOT_DCLICK``       
      -  ``wxEVT_STC_HOTSPOT_RELEASE_CLICK``       
      -  ``wxEVT_STC_INDICATOR_CLICK``       
      -  ``wxEVT_STC_INDICATOR_RELEASE``       
      -  ``wxEVT_STC_MARGIN_RIGHT_CLICK``       


                 

      :rtype: `bool`








   .. method:: GetText(self)



                

      :rtype: `string`







      .. wxdeprecated:: 
         Use :meth:`GetString`   instead.    








   .. method:: GetToken(self)

      Returns the token value for this event.                  

      The token is an integer value that can be set with a call to the :meth:`wx.stc.StyledTextCtrl.AddUndoAction`   method. 

      This method is valid for  ``wxEVT_STC_MODIFIED``   events when the result of  :meth:`GetModificationType`   includes ``STC_MOD_CONTAINER``.                  

      :rtype: `int`








   .. method:: GetUpdated(self)

      Returns the value of the updated field for this event.                  

      The value of this field is a bit list that describes the change that generated this event. It may contain one or more of the following values: 



      - ``STC_UPDATE_CONTENT ``  
      - ``STC_UPDATE_SELECTION ``  
      - ``STC_UPDATE_V_SCROLL ``  
      - ``STC_UPDATE_H_SCROLL ``  




      This method is valid for  ``wxEVT_STC_UPDATEUI``   events.                   

      :rtype: `int`








   .. method:: GetWParam(self)

      Returns value of the WParam field for this event.                  

      This method is valid for  ``wxEVT_STC_MACRORECORD``   events.                   

      :rtype: `int`








   .. method:: GetX(self)

      Returns the X coordinate of the mouse for this event.                  

      This method is valid for the following event types:

      -  ``wxEVT_STC_DWELLSTART``       
      -  ``wxEVT_STC_DWELLEND``       
      -  ``wxEVT_STC_START_DRAG``       
      -  ``wxEVT_STC_DRAG_OVER``       
      -  ``wxEVT_STC_DO_DROP``       


                 

      :rtype: `int`








   .. method:: GetY(self)

      Returns the Y coordinate of the mouse for this event.                  

      This method is valid for the following event types:

      -  ``wxEVT_STC_DWELLSTART``       
      -  ``wxEVT_STC_DWELLEND``       
      -  ``wxEVT_STC_START_DRAG``       
      -  ``wxEVT_STC_DRAG_OVER``       
      -  ``wxEVT_STC_DO_DROP``       


                 

      :rtype: `int`








   .. method:: SetAnnotationLinesAdded(self, val)

      Sets the annotation lines added value for this event.                  


      :param `val`: 
      :type `val`: int







   .. method:: SetDragFlags(self, flags)

      Sets the drag flags for this event.                  


      :param `flags`: 
      :type `flags`: int







   .. method:: SetDragResult(self, val)

      Sets the drag result for this event.                  


      :param `val`: 
      :type `val`: wx.DragResult







   .. method:: SetDragText(self, val)

      Sets the drag text for this event.                  

                


      :param `val`: 
      :type `val`: string











   .. method:: SetFoldLevelNow(self, val)

      Sets the current fold level for this event.                  


      :param `val`: 
      :type `val`: int







   .. method:: SetFoldLevelPrev(self, val)

      Sets the previous fold level for this event.                  


      :param `val`: 
      :type `val`: int







   .. method:: SetKey(self, k)

      Sets the key code for this event.                  


      :param `k`: 
      :type `k`: int







   .. method:: SetLParam(self, val)

      Sets value of the LParam field for this event.                  


      :param `val`: 
      :type `val`: int







   .. method:: SetLength(self, len)

      Sets the length value for this event.                  


      :param `len`: 
      :type `len`: int







   .. method:: SetLine(self, val)

      Sets line number for this event.                  


      :param `val`: 
      :type `val`: int







   .. method:: SetLinesAdded(self, num)

      Sets the number of lines added for this event.                  


      :param `num`: 
      :type `num`: int







   .. method:: SetListCompletionMethod(self, val)

      Sets the list completion method for this event.                  

                


      :param `val`: 
      :type `val`: int






      .. versionadded:: 4.1/wxWidgets-3.1.1  
     








   .. method:: SetListType(self, val)

      Sets the list type for this event.                  


      :param `val`: 
      :type `val`: int







   .. method:: SetMargin(self, val)

      Sets margin number for this event.                  


      :param `val`: 
      :type `val`: int







   .. method:: SetMessage(self, val)

      Sets message number for this event.                  


      :param `val`: 
      :type `val`: int







   .. method:: SetModificationType(self, t)

      Sets the modification type for this event.                  


      :param `t`: 
      :type `t`: int







   .. method:: SetModifiers(self, m)

      Sets the value of the modifiers field for this event.                  


      :param `m`: 
      :type `m`: int







   .. method:: SetPosition(self, pos)

      Sets file position for this event.                  


      :param `pos`: 
      :type `pos`: int







   .. method:: SetText(self, t)

      Sets the text for this event.                  

                


      :param `t`: 
      :type `t`: string











   .. method:: SetToken(self, val)

      Sets the token for this event.                  


      :param `val`: 
      :type `val`: int







   .. method:: SetUpdated(self, val)

      Sets the value of the updated field for this event.                  


      :param `val`: 
      :type `val`: int







   .. method:: SetWParam(self, val)

      Sets the value of the WParam field for this event.                  


      :param `val`: 
      :type `val`: int







   .. method:: SetX(self, val)

      Sets the X value for this event.                  


      :param `val`: 
      :type `val`: int







   .. method:: SetY(self, val)

      Sets the Y value for this event.                  


      :param `val`: 
      :type `val`: int







   .. attribute:: Alt

      See :meth:`~wx.stc.StyledTextEvent.GetAlt`


   .. attribute:: AnnotationsLinesAdded

      See :meth:`~wx.stc.StyledTextEvent.GetAnnotationsLinesAdded`


   .. attribute:: Control

      See :meth:`~wx.stc.StyledTextEvent.GetControl`


   .. attribute:: DragFlags

      See :meth:`~wx.stc.StyledTextEvent.GetDragFlags` and :meth:`~wx.stc.StyledTextEvent.SetDragFlags`


   .. attribute:: DragResult

      See :meth:`~wx.stc.StyledTextEvent.GetDragResult` and :meth:`~wx.stc.StyledTextEvent.SetDragResult`


   .. attribute:: DragText

      See :meth:`~wx.stc.StyledTextEvent.GetDragText` and :meth:`~wx.stc.StyledTextEvent.SetDragText`


   .. attribute:: FoldLevelNow

      See :meth:`~wx.stc.StyledTextEvent.GetFoldLevelNow` and :meth:`~wx.stc.StyledTextEvent.SetFoldLevelNow`


   .. attribute:: FoldLevelPrev

      See :meth:`~wx.stc.StyledTextEvent.GetFoldLevelPrev` and :meth:`~wx.stc.StyledTextEvent.SetFoldLevelPrev`


   .. attribute:: Key

      See :meth:`~wx.stc.StyledTextEvent.GetKey` and :meth:`~wx.stc.StyledTextEvent.SetKey`


   .. attribute:: LParam

      See :meth:`~wx.stc.StyledTextEvent.GetLParam` and :meth:`~wx.stc.StyledTextEvent.SetLParam`


   .. attribute:: Length

      See :meth:`~wx.stc.StyledTextEvent.GetLength` and :meth:`~wx.stc.StyledTextEvent.SetLength`


   .. attribute:: Line

      See :meth:`~wx.stc.StyledTextEvent.GetLine` and :meth:`~wx.stc.StyledTextEvent.SetLine`


   .. attribute:: LinesAdded

      See :meth:`~wx.stc.StyledTextEvent.GetLinesAdded` and :meth:`~wx.stc.StyledTextEvent.SetLinesAdded`


   .. attribute:: ListCompletionMethod

      See :meth:`~wx.stc.StyledTextEvent.GetListCompletionMethod` and :meth:`~wx.stc.StyledTextEvent.SetListCompletionMethod`


   .. attribute:: ListType

      See :meth:`~wx.stc.StyledTextEvent.GetListType` and :meth:`~wx.stc.StyledTextEvent.SetListType`


   .. attribute:: Margin

      See :meth:`~wx.stc.StyledTextEvent.GetMargin` and :meth:`~wx.stc.StyledTextEvent.SetMargin`


   .. attribute:: Message

      See :meth:`~wx.stc.StyledTextEvent.GetMessage` and :meth:`~wx.stc.StyledTextEvent.SetMessage`


   .. attribute:: ModificationType

      See :meth:`~wx.stc.StyledTextEvent.GetModificationType` and :meth:`~wx.stc.StyledTextEvent.SetModificationType`


   .. attribute:: Modifiers

      See :meth:`~wx.stc.StyledTextEvent.GetModifiers` and :meth:`~wx.stc.StyledTextEvent.SetModifiers`


   .. attribute:: Position

      See :meth:`~wx.stc.StyledTextEvent.GetPosition` and :meth:`~wx.stc.StyledTextEvent.SetPosition`


   .. attribute:: Shift

      See :meth:`~wx.stc.StyledTextEvent.GetShift`


   .. attribute:: Text

      See :meth:`~wx.stc.StyledTextEvent.GetText` and :meth:`~wx.stc.StyledTextEvent.SetText`


   .. attribute:: Token

      See :meth:`~wx.stc.StyledTextEvent.GetToken` and :meth:`~wx.stc.StyledTextEvent.SetToken`


   .. attribute:: Updated

      See :meth:`~wx.stc.StyledTextEvent.GetUpdated` and :meth:`~wx.stc.StyledTextEvent.SetUpdated`


   .. attribute:: WParam

      See :meth:`~wx.stc.StyledTextEvent.GetWParam` and :meth:`~wx.stc.StyledTextEvent.SetWParam`


   .. attribute:: X

      See :meth:`~wx.stc.StyledTextEvent.GetX` and :meth:`~wx.stc.StyledTextEvent.SetX`


   .. attribute:: Y

      See :meth:`~wx.stc.StyledTextEvent.GetY` and :meth:`~wx.stc.StyledTextEvent.SetY`

