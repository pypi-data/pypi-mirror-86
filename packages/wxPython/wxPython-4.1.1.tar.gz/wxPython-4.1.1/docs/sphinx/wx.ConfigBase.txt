.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.ConfigBase:

==========================================================================================================================================
|phoenix_title|  **wx.ConfigBase**
==========================================================================================================================================

:ref:`wx.ConfigBase`  defines the basic interface of all config classes.          

It cannot be used by itself (it is an abstract base class) and you will always use one of its derivations: :ref:`wx.FileConfig`, :ref:`RegConfig`  or any other. 

However, usually you don't even need to know the precise nature of the class you're working with but you would just use the :ref:`wx.ConfigBase`  methods. This allows you to write the same code regardless of whether you're working with the registry under Windows or text-based config files under Unix. To make writing the portable code even easier, wxWidgets provides a typedef Config which is mapped onto the native :ref:`wx.ConfigBase`  implementation on the given platform: i.e. :ref:`RegConfig`  under Windows and :ref:`wx.FileConfig`  otherwise. 

See :ref:`Config Overview <config overview>`  for a description of all features of this class. 

It is highly recommended to use static functions :meth:`~wx.ConfigBase.Get`  and/or :meth:`~wx.ConfigBase.Set`, so please have a look at them. 

Related Include Files: 



-  <:ref:`/config.h`>  - Let wxWidgets choose a Config class for your platform.   
-  ``<wx/confbase.h>``   - Base config class.   
-  <:ref:`/fileconf.h`>  -  :ref:`wx.FileConfig`  class.  
-  <:ref:`/msw/regconf.h`>  -  :ref:`RegConfig`  class, see also :ref:`RegKey`. 






|phoenix_title| Example
=======================

Here is how you would typically use this class: ::

        # using wx.Config instead of writing wx.FileConfig or wx.RegConfig enhances
        # portability of the code
        config = wx.Config("MyAppName")
        strs = config.Read("LastPrompt")

        # another example: using default values and the full path instead of just
        # key name: if the key is not found , the value 17 is returned
        value = config.ReadInt("/LastRun/CalculatedValues/MaxValue", 17)

        # at the end of the program we would save everything back
        config.Write("LastPrompt", strs)
        config.Write("/LastRun/CalculatedValues/MaxValue", value)

This basic example, of course, doesn't show all Config features, such as enumerating, testing for existence and deleting the entries and groups of entries in the config file, its abilities to automatically store the default values or expand the environment variables on the fly. However, the main idea is that using this class is easy and that it should normally do what you expect it to.  



|phoenix_title| Static Functions
================================

The static functions provided deal with the "default" config object. Although its usage is not at all mandatory it may be convenient to use a global config object instead of creating and deleting the local config objects each time you need one (especially because creating a :ref:`wx.FileConfig`  object might be a time consuming operation). In this case, you may create this global config object in the very start of the program and :meth:`~wx.ConfigBase.Set`  it as the default. Then, from anywhere in your program, you may access it using the :meth:`~wx.ConfigBase.Get`  function. This global Config object will be deleted by wxWidgets automatically if it exists. Note that this implies that if you do delete this object yourself (usually in :meth:`wx.App.OnExit` ) you must use Set(NULL) to prevent wxWidgets from deleting it the second time. As it happens, you may even further simplify the procedure described above: you may forget about calling :meth:`~wx.ConfigBase.Set`. When :meth:`~wx.ConfigBase.Get`  is called and there is no current object, it will create one using :meth:`~wx.ConfigBase.Create`  function. To disable this behaviour :meth:`~wx.ConfigBase.DontCreateOnDemand`  is provided.  



|phoenix_title| Path Management
===============================

As explained in the :ref:`config overview <config overview>`, the config classes support a file system-like hierarchy of keys (files) and groups (directories). As in the file system case, to specify a key in the config class you must use a path to it. Config classes also support the notion of the current group, which makes it possible to use the relative paths. To clarify all this, here is an example (it is only for the sake of demonstration, it doesn't do anything sensible!): ::

        config = wx.Config("FooBarApp")

        # right now the current path is '/'
        conf.Write("RootEntry", 1)

        # go to some other place: if the group(s) don't exist, they will be created
        conf.SetPath("/Group/Subgroup")

        # create an entry in subgroup
        conf.Write("SubgroupEntry", 3)

        # '..' is understood
        conf.Write("../GroupEntry", 2)
        conf.SetPath("..")

        if conf.ReadInt("Subgroup/SubgroupEntry", 0) != 3:
            raise Exception('Invalid SubgroupEntry')

        # use absolute path: it is allowed, too
        if conf.ReadInt("/RootEntry", 0) != 1:
            raise Exception('Invalid RootEntry')

It is highly recommended that you restore the path to its old value on function exit: ::

        def foo(config):

            oldPath = config.GetPath()

            config.SetPath("/Foo/Data")
            # ...

            config.SetPath(oldPath)

Otherwise the assert in the following example will surely fail (we suppose here that the foo() function is the same as above except that it doesnâ€™t save and restore the path): ::

        def bar(config):

            config.Write("Test", 17)

            foo(config)

            # we're reading "/Foo/Data/Test" here! -1 will probably be returned...
            if config.ReadInt("Test", -1) != 17:
                raise Exception('Invalid Test')

Finally, the path separator in :ref:`wx.ConfigBase`  and derived classes is always "/", regardless of the platform (i.e. it is not "\\\\" under Windows).  



|phoenix_title| Enumeration
===========================

The enumeration functions allow you to enumerate all entries and groups in the config file. All functions here return ``False`` when there are no more items. You must pass the same index to GetNext() and GetFirst() (don't modify it). Please note that it is not the index of the current item (you will have some great surprises with :ref:`RegConfig`  if you assume this) and you shouldn't even look at it: it is just a "cookie" which stores the state of the enumeration. It can't be stored inside the class because it would prevent you from running several enumerations simultaneously, that's why you must pass it explicitly. Having said all this, enumerating the config entries/groups is very simple: ::

        config = wx.Config("MyAppName")
        names = []

        # first enum all entries
        more, value, index = config.GetFirstEntry()

        while more:
            names.append(value)
            more, value, index = config.GetNextEntry(index)

        # ... we have all entry names in names...

        # now all groups...
        more, value, index = config.GetFirstGroup()

        while more:
            names.append(value)
            more, value, index = config.GetNextGroup(index)

        # ... we have all group (and entry) names in names...

There are also functions to get the number of entries/subgroups without actually enumerating them, but you will probably never need them.  



|phoenix_title| Key Access
==========================

The key access functions are the core of :ref:`wx.ConfigBase`  class: they allow you to read and write config file data. All :meth:`~wx.ConfigBase.Read`  functions take a default value which will be returned if the specified key is not found in the config file. Currently, supported types of data are: :ref:`String`,  ``long`` ,   ``double`` ,   ``bool`` ,  :ref:`wx.Colour`  and any other types for which the functions :ref:`wx.ToString`  and :ref:`wx.FromString`  are defined. Try not to read long values into string variables and vice versa: although it just might work with :ref:`wx.FileConfig`, you will get a system error with :ref:`RegConfig`  because in the Windows registry the different types of entries are indeed used. Final remark: the `szKey`  parameter for all these functions can contain an arbitrary path (either relative or absolute), not just the key name.   



.. note:: 

   In the documentation of this class, the words "config file" also mean "registry hive" for :ref:`RegConfig`  and, generally speaking, might mean any physical storage where a ConfigBase-derived class stores its data.  







.. note:: 

   You should use either :meth:`Set`   or :meth:`Get`   because wxWidgets library itself would take advantage of it and could save various information in it. For example :ref:`wx.FontMapper`  or Unix version of :ref:`wx.FileDialog`  have the ability to use Config class.  







.. seealso:: :ref:`wx.ConfigPathChanger`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>ConfigBase</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.ConfigBase_inheritance.png" alt="Inheritance diagram of ConfigBase" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.ConfigBase.html" title="wx.ConfigBase" alt="" coords="5,83,124,112"/> <area shape="rect" id="node2" href="wx.Object.html" title="wx.Object" alt="" coords="21,5,108,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.FileConfig`, :ref:`RegConfig`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.ConfigBase.__init__`                                                  This is the default and only constructor of the :ref:`wx.ConfigBase`  class, and derived classes.
:meth:`~wx.ConfigBase.Create`                                                    Create a new config object and sets it as the current one.
:meth:`~wx.ConfigBase.DeleteAll`                                                 Delete the whole underlying object (disk file, registry key, ...).
:meth:`~wx.ConfigBase.DeleteEntry`                                               Deletes the specified entry and the group it belongs to if it was the last key in it and the second parameter is ``True``.
:meth:`~wx.ConfigBase.DeleteGroup`                                               Delete the group (with all subgroups).
:meth:`~wx.ConfigBase.DontCreateOnDemand`                                        Calling this function will prevent  ` :meth:`~ConfigBase.Get`  `   from automatically creating a new config object if the current one is ``None``.
:meth:`~wx.ConfigBase.Exists`                                                    
:meth:`~wx.ConfigBase.Flush`                                                     Permanently writes all changes (otherwise, they're only written from object's destructor).
:meth:`~wx.ConfigBase.Get`                                                       Get the current config object.
:meth:`~wx.ConfigBase.GetAppName`                                                Returns the application name.
:meth:`~wx.ConfigBase.GetEntryType`                                              Returns the type of the given entry or `Unknown`  if the entry doesn't exist.
:meth:`~wx.ConfigBase.GetFirstEntry`                                             GetFirstEntry() . (more, value, index)
:meth:`~wx.ConfigBase.GetFirstGroup`                                             GetFirstGroup() . (more, value, index)
:meth:`~wx.ConfigBase.GetNextEntry`                                              GetNextEntry() . (more, value, index)
:meth:`~wx.ConfigBase.GetNextGroup`                                              GetNextGroup(long index) . (more, value, index)
:meth:`~wx.ConfigBase.GetNumberOfEntries`                                        Get number of entries in the current group.
:meth:`~wx.ConfigBase.GetNumberOfGroups`                                         Get number of entries/subgroups in the current group, with or without its subgroups.
:meth:`~wx.ConfigBase.GetPath`                                                   Retrieve the current path (always as absolute path).
:meth:`~wx.ConfigBase.GetVendorName`                                             Returns the vendor name.
:meth:`~wx.ConfigBase.HasEntry`                                                  
:meth:`~wx.ConfigBase.HasGroup`                                                  
:meth:`~wx.ConfigBase.IsExpandingEnvVars`                                        Returns ``True`` if we are expanding environment variables in key values.
:meth:`~wx.ConfigBase.IsRecordingDefaults`                                       Returns ``True`` if we are writing defaults back to the config file.
:meth:`~wx.ConfigBase.Read`                                                      Another version of :meth:`~ConfigBase.Read` , returning the string value directly.
:meth:`~wx.ConfigBase.ReadBool`                                                  
:meth:`~wx.ConfigBase.ReadDouble`                                                Reads a float value from the key and returns it.
:meth:`~wx.ConfigBase.ReadFloat`                                                 
:meth:`~wx.ConfigBase.ReadInt`                                                   
:meth:`~wx.ConfigBase.ReadLong`                                                  Reads a long value from the key and returns it.
:meth:`~wx.ConfigBase.RenameEntry`                                               Renames an entry in the current group.
:meth:`~wx.ConfigBase.RenameGroup`                                               Renames a subgroup of the current group.
:meth:`~wx.ConfigBase.Set`                                                       Sets the config object as the current one, returns the pointer to the previous current object (both the parameter and returned value may be ``None``).
:meth:`~wx.ConfigBase.SetExpandEnvVars`                                          Determine whether we wish to expand environment variables in key values.
:meth:`~wx.ConfigBase.SetPath`                                                   Set current path: if the first character is '/', it is the absolute path, otherwise it is a relative path.
:meth:`~wx.ConfigBase.SetRecordDefaults`                                         Sets whether defaults are recorded to the config file whenever an attempt to read the value which is not present in it is done.
:meth:`~wx.ConfigBase.Write`                                                     Writes the :ref:`String`  value to the config file and returns ``True`` on success.
:meth:`~wx.ConfigBase.WriteBool`                                                 
:meth:`~wx.ConfigBase.WriteFloat`                                                
:meth:`~wx.ConfigBase.WriteInt`                                                  
:meth:`~wx.ConfigBase._cpp_ReadInt`                                              
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.ConfigBase.AppName`                                                   See :meth:`~wx.ConfigBase.GetAppName`
:attr:`~wx.ConfigBase.FirstEntry`                                                See :meth:`~wx.ConfigBase.GetFirstEntry`
:attr:`~wx.ConfigBase.FirstGroup`                                                See :meth:`~wx.ConfigBase.GetFirstGroup`
:attr:`~wx.ConfigBase.NextEntry`                                                 See :meth:`~wx.ConfigBase.GetNextEntry`
:attr:`~wx.ConfigBase.NextGroup`                                                 See :meth:`~wx.ConfigBase.GetNextGroup`
:attr:`~wx.ConfigBase.NumberOfEntries`                                           See :meth:`~wx.ConfigBase.GetNumberOfEntries`
:attr:`~wx.ConfigBase.NumberOfGroups`                                            See :meth:`~wx.ConfigBase.GetNumberOfGroups`
:attr:`~wx.ConfigBase.Path`                                                      See :meth:`~wx.ConfigBase.GetPath` and :meth:`~wx.ConfigBase.SetPath`
:attr:`~wx.ConfigBase.VendorName`                                                See :meth:`~wx.ConfigBase.GetVendorName`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.ConfigBase(Object)

   **Possible constructors**::

       ConfigBase(appName=EmptyString, vendorName=EmptyString,
                  localFilename=EmptyString, globalFilename=EmptyString, style=0)
       
   
   ConfigBase defines the basic interface of all config classes.



   .. method:: __init__(self, appName=EmptyString, vendorName=EmptyString, localFilename=EmptyString, globalFilename=EmptyString, style=0)

      This is the default and only constructor of the :ref:`wx.ConfigBase`  class, and derived classes.                  




      :param `appName`: The application name. If this is empty, the class will normally use :meth:`wx.App.GetAppName`   to set it. The application name is used in the registry key on Windows, and can be used to deduce the local filename parameter if that is missing.   
      :type `appName`: string
      :param `vendorName`: The vendor name. If this is empty, it is assumed that no vendor name is wanted, if this is optional for the current config class. The vendor name is appended to the application name for :ref:`RegConfig`.   
      :type `vendorName`: string
      :param `localFilename`: Some config classes require a local filename. If this is not present, but required, the application name will be used instead.   
      :type `localFilename`: string
      :param `globalFilename`: Some config classes require a global filename. If this is not present, but required, the application name will be used instead.   
      :type `globalFilename`: string
      :param `style`: Can be one of  ``CONFIG_USE_LOCAL_FILE``   and   ``CONFIG_USE_GLOBAL_FILE`` .  

        The style interpretation depends on the config class and is ignored by some implementations. For :ref:`wx.FileConfig`, these styles determine whether a local or global config file is created or used: if  ``CONFIG_USE_GLOBAL_FILE``   is used, then settings are read from the global config file and if   ``CONFIG_USE_LOCAL_FILE``   is used, settings are read from and written to local config file (if they are both set, global file is read first, then local file, overwriting global settings). If the flag is present but the parameter is empty, the parameter will be set to a default. If the parameter is present but the style flag not, the relevant flag will be added to the style. For  :ref:`RegConfig`, the ``GLOBAL`` flag refers to the  ``HKLM``   key while ``LOCAL`` one is for the usual   ``HKCU``   one.  

        For :ref:`wx.FileConfig`  you can also add  ``CONFIG_USE_RELATIVE_PATH``   by logically or'ing it to either of the ``_FILE`` options to tell  :ref:`wx.FileConfig`  to use relative instead of absolute paths. 

        On non-VMS Unix systems, the default local configuration file is "~/.appname". However, this path may be also used as user data directory (see :meth:`wx.StandardPaths.GetUserDataDir` ) if the application has several data files. In this case  ``CONFIG_USE_SUBDIR``   flag, which changes the default local configuration file to "~/.appname/appname" should be used. Notice that this flag is ignored if   `localFilename`  is provided.  ``CONFIG_USE_SUBDIR``   is new since wxWidgets version 2.8.2.  

        For :ref:`wx.FileConfig`, you can also add  ``CONFIG_USE_NO_ESCAPE_CHARACTERS``   which will turn off character escaping for the values of entries stored in the config file: for example a foo key with some backslash characters will be stored as "foo=C:\\mydir" instead of the usual storage of "foo=C:\\\\mydir".  

        The  ``CONFIG_USE_NO_ESCAPE_CHARACTERS``   style can be helpful if your config file must be read or written to by a non-wxWidgets program (which might not understand the escape characters). Note, however, that if   ``CONFIG_USE_NO_ESCAPE_CHARACTERS``   style is used, it is now your application's responsibility to ensure that there is no newline or other illegal characters in a value, before writing that value to the file.    
      :type `style`: long














      This parameter is only used by :ref:`wx.FileConfig`  when compiled in Unicode mode. It specifies the encoding in which the configuration file is written. 

                  



      .. note:: 

         By default, environment variable expansion is on and recording defaults is off.   








   .. staticmethod:: Create()

      Create a new config object and sets it as the current one.                  

      This function will create the most appropriate implementation of Config available for the current platform. By default this means that the system registry will be used for storing the configuration information under MSW and a file under the user home directory (see :meth:`wx.StandardPaths.GetUserConfigDir` ) elsewhere. 

      If you prefer to use the configuration files everywhere, you can define  ``USE_CONFIG_NATIVE``   to 0 when compiling wxWidgets. Or you can simply always create  :ref:`wx.FileConfig`  explicitly. 

      Finally, if you want to create a custom Config subclass you may change this function behaviour by overriding :meth:`wx.AppTraits.CreateConfig`   to create it. An example when this could be useful could be an application which could be installed either normally (in which case the default behaviour of using :ref:`RegConfig`  is appropriate) or in a "portable" way in which case a :ref:`wx.FileConfig`  with a file in the program directory would be used and the choice would be done in CreateConfig() at run-time.                  

      :rtype: :ref:`wx.ConfigBase`








   .. method:: DeleteAll(self)

      Delete the whole underlying object (disk file, registry key, ...).                  

      Primarily for use by uninstallation routine.                  

      :rtype: `bool`








   .. method:: DeleteEntry(self, key, bDeleteGroupIfEmpty=True)

      Deletes the specified entry and the group it belongs to if it was the last key in it and the second parameter is ``True``.                  


      :param `key`: 
      :type `key`: string
      :param `bDeleteGroupIfEmpty`: 
      :type `bDeleteGroupIfEmpty`: bool




      :rtype: `bool`








   .. method:: DeleteGroup(self, key)

      Delete the group (with all subgroups).                  

      If the current path is under the group being deleted it is changed to its deepest still existing component. E.g. if the current path is  ``"/A/B/C/D"``   and the group   ``C``   is deleted, the path becomes   ``"/A/B"`` .                   


      :param `key`: 
      :type `key`: string




      :rtype: `bool`








   .. staticmethod:: DontCreateOnDemand()

      Calling this function will prevent  ` :meth:`Get`  `   from automatically creating a new config object if the current one is ``None``.                  

      It might be useful to call it near the program end to prevent "accidental" creation of a new config object.                   





   .. method:: Exists(self, strName)



                


      :param `strName`: 
      :type `strName`: string




      :rtype: `bool`







      :returns: 

         ``True`` if either a group or an entry with a given name exists.   








   .. method:: Flush(self, bCurrentOnly=False)

      Permanently writes all changes (otherwise, they're only written from object's destructor).                  


      :param `bCurrentOnly`: 
      :type `bCurrentOnly`: bool




      :rtype: `bool`








   .. staticmethod:: Get(CreateOnDemand=True)

      Get the current config object.                  

      If there is no current object and `CreateOnDemand`  is ``True``, this creates one (using :meth:`Create` ) unless :meth:`DontCreateOnDemand`   was called previously.                  


      :param `CreateOnDemand`: 
      :type `CreateOnDemand`: bool




      :rtype: :ref:`wx.ConfigBase`








   .. method:: GetAppName(self)

      Returns the application name.                  

      :rtype: `string`








   .. method:: GetEntryType(self, name)

      Returns the type of the given entry or `Unknown`  if the entry doesn't exist.                  

      This function should be used to decide which version of :meth:`Read`   should be used because some of Config implementations will complain about type mismatch otherwise: e.g., an attempt to read a string value from an integer key with :ref:`RegConfig`  will fail.                  


      :param `name`: 
      :type `name`: string




      :rtype: :ref:`wx.ConfigBase.EntryType`








   .. method:: GetFirstEntry(self)

                              GetFirstEntry() . (more, value, index)

                              Allows enumerating the entries in the current group in a config
                              object.  Returns a tuple containing a flag indicating if there are more
                              items, the name of the current item, and an index to pass to
                              GetNextEntry to fetch the next item. 

      :rtype: :ref:`PyObject`








   .. method:: GetFirstGroup(self)

                              GetFirstGroup() . (more, value, index)

                              Allows enumerating the subgroups in a config object.  Returns a tuple
                              containing a flag indicating if there are more items, the name of the
                              current item, and an index to pass to GetNextGroup to fetch the next
                              item. 

      :rtype: :ref:`PyObject`








   .. method:: GetNextEntry(self, index)

                              GetNextEntry() . (more, value, index)

                              Allows enumerating the entries in the current group in a config
                              object.  Returns a tuple containing a flag indicating if there are more
                              items, the name of the current item, and an index to pass to
                              GetNextEntry to fetch the next item. 

      :rtype: :ref:`PyObject`








   .. method:: GetNextGroup(self, index)

                              GetNextGroup(long index) . (more, value, index)

                              Allows enumerating the subgroups in a config object.  Returns a tuple
                              containing a flag indicating if there are more items, the name of the
                              current item, and an index to pass to GetNextGroup to fetch the next
                              item. 

      :rtype: :ref:`PyObject`








   .. method:: GetNumberOfEntries(self, bRecursive=False)

      Get number of entries in the current group.                  


      :param `bRecursive`: 
      :type `bRecursive`: bool




      :rtype: `int`








   .. method:: GetNumberOfGroups(self, bRecursive=False)

      Get number of entries/subgroups in the current group, with or without its subgroups.                  


      :param `bRecursive`: 
      :type `bRecursive`: bool




      :rtype: `int`








   .. method:: GetPath(self)

      Retrieve the current path (always as absolute path).                  

      :rtype: `string`








   .. method:: GetVendorName(self)

      Returns the vendor name.                  

      :rtype: `string`








   .. method:: HasEntry(self, strName)



                


      :param `strName`: 
      :type `strName`: string




      :rtype: `bool`







      :returns: 

         ``True`` if the entry by this name exists.   








   .. method:: HasGroup(self, strName)



                


      :param `strName`: 
      :type `strName`: string




      :rtype: `bool`







      :returns: 

         ``True`` if the group by this name exists.   








   .. method:: IsExpandingEnvVars(self)

      Returns ``True`` if we are expanding environment variables in key values.                  

      :rtype: `bool`








   .. method:: IsRecordingDefaults(self)

      Returns ``True`` if we are writing defaults back to the config file.                  

      :rtype: `bool`








   .. method:: Read(self, key, defaultVal=EmptyString)

      Another version of :meth:`Read` , returning the string value directly.                  

      




   .. method:: ReadBool(self, key, defaultVal=False)



      :rtype: `bool`








   .. method:: ReadDouble(self, key, defaultVal)

      Reads a float value from the key and returns it.                  

      `defaultVal`  is returned if the key is not found.                  


      :param `key`: 
      :type `key`: string
      :param `defaultVal`: 
      :type `defaultVal`: float




      :rtype: `float`








   .. method:: ReadFloat(self, key, defaultVal=0.0)



      :rtype: `float`








   .. method:: ReadInt(self, key, defaultVal=0)




   .. method:: ReadLong(self, key, defaultVal)

      Reads a long value from the key and returns it.                  

      `defaultVal`  is returned if the key is not found.                  


      :param `key`: 
      :type `key`: string
      :param `defaultVal`: 
      :type `defaultVal`: long




      :rtype: `long`








   .. method:: RenameEntry(self, oldName, newName)

      Renames an entry in the current group.                  

      The entries names (both the old and the new one) shouldn't contain backslashes, i.e. only simple names and not arbitrary paths are accepted by this function. 

                


      :param `oldName`: 
      :type `oldName`: string
      :param `newName`: 
      :type `newName`: string




      :rtype: `bool`







      :returns: 

         ``False`` if `oldName`  doesn't exist or if `newName`  already exists.   








   .. method:: RenameGroup(self, oldName, newName)

      Renames a subgroup of the current group.                  

      The subgroup names (both the old and the new one) shouldn't contain backslashes, i.e. only simple names and not arbitrary paths are accepted by this function. 

                


      :param `oldName`: 
      :type `oldName`: string
      :param `newName`: 
      :type `newName`: string




      :rtype: `bool`







      :returns: 

         ``False`` if `oldName`  doesn't exist or if `newName`  already exists.   








   .. staticmethod:: Set(pConfig)

      Sets the config object as the current one, returns the pointer to the previous current object (both the parameter and returned value may be ``None``).                  


      :param `pConfig`: 
      :type `pConfig`: wx.ConfigBase




      :rtype: :ref:`wx.ConfigBase`








   .. method:: SetExpandEnvVars(self, bDoIt=True)

      Determine whether we wish to expand environment variables in key values.                  


      :param `bDoIt`: 
      :type `bDoIt`: bool







   .. method:: SetPath(self, strPath)

      Set current path: if the first character is '/', it is the absolute path, otherwise it is a relative path.                  

      '..' is supported. If `strPath`  doesn't exist, it is created. 

                


      :param `strPath`: 
      :type `strPath`: string






      .. seealso:: :ref:`wx.ConfigPathChanger`    








   .. method:: SetRecordDefaults(self, bDoIt=True)

      Sets whether defaults are recorded to the config file whenever an attempt to read the value which is not present in it is done.                  

      If on (default is off) all default values for the settings used by the program are written back to the config file. This allows the user to see what config options may be changed and is probably useful only for :ref:`wx.FileConfig`.                  


      :param `bDoIt`: 
      :type `bDoIt`: bool







   .. method:: Write(self, key, value)

      Writes the :ref:`String`  value to the config file and returns ``True`` on success.                  


      :param `key`: 
      :type `key`: string
      :param `value`: 
      :type `value`: string




      :rtype: `bool`








   .. method:: WriteBool(self, key, value)



      :rtype: `bool`








   .. method:: WriteFloat(self, key, value)



      :rtype: `bool`








   .. method:: WriteInt(self, key, value)



      :rtype: `bool`








   .. method:: _cpp_ReadInt(self, key, defaultVal=0)



      :rtype: `long`








   .. attribute:: AppName

      See :meth:`~wx.ConfigBase.GetAppName`


   .. attribute:: FirstEntry

      See :meth:`~wx.ConfigBase.GetFirstEntry`


   .. attribute:: FirstGroup

      See :meth:`~wx.ConfigBase.GetFirstGroup`


   .. attribute:: NextEntry

      See :meth:`~wx.ConfigBase.GetNextEntry`


   .. attribute:: NextGroup

      See :meth:`~wx.ConfigBase.GetNextGroup`


   .. attribute:: NumberOfEntries

      See :meth:`~wx.ConfigBase.GetNumberOfEntries`


   .. attribute:: NumberOfGroups

      See :meth:`~wx.ConfigBase.GetNumberOfGroups`


   .. attribute:: Path

      See :meth:`~wx.ConfigBase.GetPath` and :meth:`~wx.ConfigBase.SetPath`


   .. attribute:: VendorName

      See :meth:`~wx.ConfigBase.GetVendorName`


.. toctree::
   :maxdepth: 1
   :hidden:

   wx.ConfigBase.EntryType.enumeration
