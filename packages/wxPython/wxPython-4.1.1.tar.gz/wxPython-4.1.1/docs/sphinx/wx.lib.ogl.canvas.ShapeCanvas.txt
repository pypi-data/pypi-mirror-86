.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.ogl.canvas

.. highlight:: python



.. _wx.lib.ogl.canvas.ShapeCanvas:

==========================================================================================================================================
|phoenix_title|  **wx.lib.ogl.canvas.ShapeCanvas**
==========================================================================================================================================

The :class:`ShapeCanvas` class.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>ShapeCanvas</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.ogl.canvas.ShapeCanvas_inheritance.png" alt="Inheritance diagram of ShapeCanvas" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.ogl.canvas.ShapeCanvas.html" title="wx.lib.ogl.canvas.ShapeCanvas" alt="" coords="5,469,232,499"/> <area shape="rect" id="node2" href="wx.ScrolledWindow.html" title="wx.ScrolledWindow" alt="" coords="44,392,193,421"/> <area shape="rect" id="node4" href="wx.Window.html" title="wx.Window" alt="" coords="70,237,167,267"/> <area shape="rect" id="node5" href="wx.WindowBase.html" title="wx.WindowBase" alt="" coords="54,160,183,189"/> <area shape="rect" id="node6" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="60,83,177,112"/> <area shape="rect" id="node7" href="wx.Object.html" title="wx.Object" alt="" coords="15,5,102,35"/> <area shape="rect" id="node8" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="127,5,233,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.ScrolledWindow`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.__init__`                                  Default class constructor.
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.AddShape`                                  Add a shape to canvas.
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.Draw`                                      Update the buffer with the background and redraw the full diagram.
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.FindShape`                                 Find shape at given position.
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.GetBuffer`                                 
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.GetDiagram`                                Get the diagram associated with this canvas.
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.GetQuickEditMode`                          Get quick edit mode.
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.InsertShape`                               Insert a shape to canvas.
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.OnBeginDragLeft`                           not implemented???
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.OnBeginDragRight`                          not implemented???
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.OnDragLeft`                                not implemented???
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.OnDragRight`                               not implemented???
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.OnEndDragLeft`                             not implemented???
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.OnEndDragRight`                            not implemented???
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.OnLeftClick`                               not implemented???
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.OnMouseEvent`                              The mouse event handler.
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.OnPaint`                                   The paint handler, uses :class:`BufferedPaintDC` to draw the
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.OnRightClick`                              not implemented???
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.OnSize`                                    The size handler, it initializes the buffer to the size of the window.
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.Redraw`                                    Redraw the diagram.
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.RemoveShape`                               Remove a shape from canvas.
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.SetDiagram`                                Set the diagram associated with this canvas.
:meth:`~wx.lib.ogl.canvas.ShapeCanvas.Snap`                                      Snap ???
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: ShapeCanvas(wx.ScrolledWindow)

   The :class:`ShapeCanvas` class.

   .. method:: __init__(self, parent = None, id = -1, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.BORDER, name = "ShapeCanvas")

      Default class constructor.
      
      Default class constructor.
      
      :param `parent`: parent window
      :param integer `id`: window identifier. A value of -1 indicates a default value
      :param `pos`: the control position. A value of (-1, -1) indicates a default position,
       chosen by either the windowing system or wxPython, depending on platform
      :param `size`: the control size. A value of (-1, -1) indicates a default size,
       chosen by either the windowing system or wxPython, depending on platform
      :param integer `style`: the underlying :class:`wx.Window` style
      :param str `name`: the window name
      
      :type parent: :class:`wx.Window`
      :type pos: tuple or :class:`wx.Point`
      :type size: tuple or :class:`wx.Size`


   .. method:: AddShape(self, object, addAfter = None)

      Add a shape to canvas.
      
      :param `object`: the :class:`~lib.ogl.Shape` instance to add
      :param `addAfter`: None or the :class:`~lib.ogl.Shape` after which
       above shape is to be added.


   .. method:: Draw(self)

      Update the buffer with the background and redraw the full diagram.


   .. method:: FindShape(self, x, y, info = None, notObject = None)

      Find shape at given position.
      
      :param `x`: the x position
      :param `y`: the y position
      :param `info`: ???
      :param `notObject`: ???


   .. method:: GetBuffer(self)


   .. method:: GetDiagram(self)

      Get the diagram associated with this canvas.


   .. method:: GetQuickEditMode(self)

      Get quick edit mode.


   .. method:: InsertShape(self, object)

      Insert a shape to canvas.
      
      :param `object`: the :class:`~lib.ogl.Shape` instance to insert


   .. method:: OnBeginDragLeft(self, x, y, keys = 0)

      not implemented???


   .. method:: OnBeginDragRight(self, x, y, keys = 0)

      not implemented???


   .. method:: OnDragLeft(self, draw, x, y, keys = 0)

      not implemented???


   .. method:: OnDragRight(self, draw, x, y, keys = 0)

      not implemented???


   .. method:: OnEndDragLeft(self, x, y, keys = 0)

      not implemented???


   .. method:: OnEndDragRight(self, x, y, keys = 0)

      not implemented???


   .. method:: OnLeftClick(self, x, y, keys = 0)

      not implemented???


   .. method:: OnMouseEvent(self, evt)

      The mouse event handler.


   .. method:: OnPaint(self, evt)

      The paint handler, uses :class:`BufferedPaintDC` to draw the
      buffer to the screen.


   .. method:: OnRightClick(self, x, y, keys = 0)

      not implemented???


   .. method:: OnSize(self, evt)

      The size handler, it initializes the buffer to the size of the window.


   .. method:: Redraw(self, dc)

      Redraw the diagram.


   .. method:: RemoveShape(self, object)

      Remove a shape from canvas.
      
      :param `object`: the :class:`~lib.ogl.Shape` instance to be removed


   .. method:: SetDiagram(self, diag)

      Set the diagram associated with this canvas.
      
      :param `diag`: an instance of :class:`~lib.ogl.Diagram`


   .. method:: Snap(self, x, y)

      Snap ???
      
      :param `x`: the x position
      :param `y`: the y position


