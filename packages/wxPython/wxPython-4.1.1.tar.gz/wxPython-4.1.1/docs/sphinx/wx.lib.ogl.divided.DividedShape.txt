.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.ogl.divided

.. highlight:: python



.. _wx.lib.ogl.divided.DividedShape:

==========================================================================================================================================
|phoenix_title|  **wx.lib.ogl.divided.DividedShape**
==========================================================================================================================================

A :class:`DividedShape` is a rectangle with a number of vertical divisions.
Each division may have its text formatted with independent characteristics,
and the size of each division relative to the whole image may be specified.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>DividedShape</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.ogl.divided.DividedShape_inheritance.png" alt="Inheritance diagram of DividedShape" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.ogl.divided.DividedShape.html" title="wx.lib.ogl.divided.DividedShape" alt="" coords="9,237,240,267"/> <area shape="rect" id="node2" href="wx.lib.ogl.basic.RectangleShape.html" title="wx.lib.ogl.basic.RectangleShape" alt="" coords="9,160,240,189"/> <area shape="rect" id="node3" href="wx.lib.ogl.basic.Shape.html" title="wx.lib.ogl.basic.Shape" alt="" coords="41,83,208,112"/> <area shape="rect" id="node4" href="wx.lib.ogl.basic.ShapeEvtHandler.html" title="wx.lib.ogl.basic.ShapeEvtHandler" alt="" coords="5,5,244,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.lib.ogl.basic.RectangleShape`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.ogl.divided.DividedShape.__init__`                                Default class constructor.
:meth:`~wx.lib.ogl.divided.DividedShape.AttachmentIsValid`                       Is the attachment valid?
:meth:`~wx.lib.ogl.divided.DividedShape.EditRegions`                             Edit the region colours and styles. Not implemented.
:meth:`~wx.lib.ogl.divided.DividedShape.GetAttachmentPosition`                   Get the attachment position.
:meth:`~wx.lib.ogl.divided.DividedShape.GetNumberOfAttachments`                  Get the number of attachments.
:meth:`~wx.lib.ogl.divided.DividedShape.MakeControlPoints`                       Make the control points.
:meth:`~wx.lib.ogl.divided.DividedShape.MakeMandatoryControlPoints`              Make the mandatory control points.
:meth:`~wx.lib.ogl.divided.DividedShape.OnDraw`                                  The draw handler.
:meth:`~wx.lib.ogl.divided.DividedShape.OnDrawContents`                          The draw contents handler.
:meth:`~wx.lib.ogl.divided.DividedShape.OnRightClick`                            The right click handler.
:meth:`~wx.lib.ogl.divided.DividedShape.ResetControlPoints`                      Reset the control points.
:meth:`~wx.lib.ogl.divided.DividedShape.ResetMandatoryControlPoints`             Reset the mandatory control points.
:meth:`~wx.lib.ogl.divided.DividedShape.SetRegionSizes`                          Set all region sizes according to proportions and this object
:meth:`~wx.lib.ogl.divided.DividedShape.SetSize`                                 Set the size.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: DividedShape(RectangleShape)

   A :class:`DividedShape` is a rectangle with a number of vertical divisions.
   Each division may have its text formatted with independent characteristics,
   and the size of each division relative to the whole image may be specified.

   .. method:: __init__(self, w, h)

      Default class constructor.
      
      :param `w`: width of rectangle
      :param `h`: heigth of rectangle


   .. method:: AttachmentIsValid(self, attachment)

      Is the attachment valid?
      
      :param `attachment`: the attachment


   .. method:: EditRegions(self)

      Edit the region colours and styles. Not implemented.


   .. method:: GetAttachmentPosition(self, attachment, nth = 0, no_arcs = 1, line = None)

      Get the attachment position.
      
      Attachment points correspond to regions in the divided box.
      
      :param `attachment`: the attachment ???
      :param `nth`: get nth attachment ???
      :param `no_arcs`: ???
      :param `line`: ???


   .. method:: GetNumberOfAttachments(self)

      Get the number of attachments.
      
      There are two attachments for each region (left and right),
      plus one on the top and one on the bottom.


   .. method:: MakeControlPoints(self)

      Make the control points.


   .. method:: MakeMandatoryControlPoints(self)

      Make the mandatory control points.


   .. method:: OnDraw(self, dc)

      The draw handler.


   .. method:: OnDrawContents(self, dc)

      The draw contents handler.


   .. method:: OnRightClick(self, x, y, keys = 0, attachment = 0)

      The right click handler.


   .. method:: ResetControlPoints(self)

      Reset the control points.
      
      :note: May only have the region handles, (n - 1) of them


   .. method:: ResetMandatoryControlPoints(self)

      Reset the mandatory control points.


   .. method:: SetRegionSizes(self)

      Set all region sizes according to proportions and this object
      total size.


   .. method:: SetSize(self, w, h, recursive = True)

      Set the size.
      
      :param `w`: width of rectangle
      :param `h`: heigth of rectangle
      :param `recursive`: not implemented


