.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.propgrid.StringProperty:

==========================================================================================================================================
|phoenix_title|  **wx.propgrid.StringProperty**
==========================================================================================================================================

Basic property with string value.          

**Supported special attributes:**

- ``PG_STRING_PASSWORD``: set to ``True`` in order to enable ``TE_PASSWORD``  on the editor. 




         



.. note:: 

   

   - If value "<composed>" is set, then actual value is formed (or composed) from values of child properties.  










|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>StringProperty</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.propgrid.StringProperty_inheritance.png" alt="Inheritance diagram of StringProperty" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.propgrid.StringProperty.html" title="wx.propgrid.StringProperty" alt="" coords="5,160,201,189"/> <area shape="rect" id="node2" href="wx.propgrid.PGProperty.html" title="wx.propgrid.PGProperty" alt="" coords="15,83,191,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="60,5,147,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.propgrid.StringProperty.__init__`                                     
:meth:`~wx.propgrid.StringProperty.DoSetAttribute`                               Reimplement this member function to add special handling for attributes of this property.
:meth:`~wx.propgrid.StringProperty.OnSetValue`                                   This is updated so "<composed>" special value can be handled.
:meth:`~wx.propgrid.StringProperty.StringToValue`                                Converts text into :ref:`Variant`  value appropriate for this property.
:meth:`~wx.propgrid.StringProperty.ValueToString`                                Converts property value into a text representation.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.propgrid.StringProperty(PGProperty)

   **Possible constructors**::

       StringProperty(label=PG_LABEL, name=PG_LABEL, value="")
       
   
   Basic property with string value.



   .. method:: __init__(self, label=PG_LABEL, name=PG_LABEL, value=EmptyString)




      :param `label`: 
      :type `label`: string
      :param `name`: 
      :type `name`: string
      :param `value`: 
      :type `value`: string







   .. method:: DoSetAttribute(self, name, value)

      Reimplement this member function to add special handling for attributes of this property.                  

                


      :param `name`: 
      :type `name`: string
      :param `value`: 
      :type `value`: PGVariant




      :rtype: `bool`







      :returns: 

         Return ``False`` to have the attribute automatically stored in m_attributes. Default implementation simply does that and nothing else.  







      .. note:: 

         To actually set property attribute values from the application, use :meth:`wx.propgrid.PGProperty.SetAttribute`   instead.   








   .. method:: OnSetValue(self)

      This is updated so "<composed>" special value can be handled.                   





   .. method:: StringToValue(self, text, argFlags=0)

      Converts text into :ref:`Variant`  value appropriate for this property.                  




      :param `text`: Text to be translated into variant.  
      :type `text`: string
      :param `argFlags`: If ``PG_FULL_VALUE``  is set, returns complete, storable value instead of displayable one (they may be different). If ``PG_COMPOSITE_FRAGMENT``  is set, text is interpreted as a part of composite property string value (as generated by :meth:`ValueToString`   called with this same flag).  
      :type `argFlags`: int










      :rtype: `tuple`




      You might want to take into account that m_value is Null variant if property value is unspecified (which is usually only case if you explicitly enabled that sort behaviour).                    



      :returns: 

         ( `bool`, `variant` ) 







      .. note:: 

         Default implementation converts semicolon delimited tokens into child values. Only works for properties with children.  








   .. method:: ValueToString(self, value, argFlags=0)

      Converts property value into a text representation.                  




      :param `value`: Value to be converted.   
      :type `value`: PGVariant
      :param `argFlags`: If 0 (default value), then displayed string is returned. If ``PG_FULL_VALUE``  is set, returns complete, storable string value instead of displayable. If ``PG_EDITABLE_VALUE``  is set, returns string value that must be editable in textctrl. If ``PG_COMPOSITE_FRAGMENT``  is set, returns text that is appropriate to display as a part of string property's composite text representation.  
      :type `argFlags`: int








      :rtype: `string`



                  



      .. note:: 

         Default implementation calls :meth:`GenerateComposedValue` .   







