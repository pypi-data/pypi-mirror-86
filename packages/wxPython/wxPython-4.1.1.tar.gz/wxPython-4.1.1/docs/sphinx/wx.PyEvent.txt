.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.PyEvent:

==========================================================================================================================================
|phoenix_title|  **wx.PyEvent**
==========================================================================================================================================

                        :class:`PyEvent` can be used as a base class for implementing custom
                        event types in Python. You should derive from this class instead
                        of :class:`Event` because this class is Python-aware and is able to
                        transport its Python bits safely through the wxWidgets event
                        system and have them still be there when the event handler is
                        invoked. Note that since :class:`PyEvent` is taking care of preserving
                        the extra attributes that have been set then you do not need to
                        override the Clone method in your derived classes.

                        .. seealso:: :class:`PyCommandEvent`  




|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>PyEvent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.PyEvent_inheritance.png" alt="Inheritance diagram of PyEvent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.PyEvent.html" title="wx.PyEvent" alt="" coords="5,5,104,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.PyEvent.__init__`                                                     
:meth:`~wx.PyEvent.Clone`                                                        Make a new instance of the event that is a copy of self.
:meth:`~wx.PyEvent.__delattr__`                                                  
:meth:`~wx.PyEvent.__getattr__`                                                  
:meth:`~wx.PyEvent.__setattr__`                                                  
:meth:`~wx.PyEvent._getAttrDict`                                                 Gives access to the internal object that is tracking the event's python attributes.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.PyEvent(Event)

   **Possible constructors**::

       PyEvent(id=0, eventType=wxEVT_NULL)
       
   
   :class:`PyEvent` can be used as a base class for implementing custom
   event types in Python. You should derive from this class instead
   of :class:`Event` because this class is Python-aware and is able to
   transport its Python bits safely through the wxWidgets event
   system and have them still be there when the event handler is
   invoked. Note that since :class:`PyEvent` is taking care of preserving
   the extra attributes that have been set then you do not need to
   override the Clone method in your derived classes.
   
   .. seealso:: :class:`PyCommandEvent`



   .. method:: __init__(self, id=0, eventType=wxEVT_NULL)




      :param `id`: 
      :type `id`: int
      :param `eventType`: 
      :type `eventType`: wx.EventType







   .. method:: Clone(self)

      Make a new instance of the event that is a copy of self.
      
      Through the magic of Python this implementation should work for
      this and all derived classes.



   .. method:: __delattr__(self, name)




      :param `name`: 
      :type `name`: PyObject







   .. method:: __getattr__(self, name)




      :param `name`: 
      :type `name`: PyObject




      :rtype: :ref:`PyObject`








   .. method:: __setattr__(self, name, value)




      :param `name`: 
      :type `name`: PyObject
      :param `value`: 
      :type `value`: PyObject







   .. method:: _getAttrDict(self)

      Gives access to the internal object that is tracking the event's python attributes. 

      :rtype: :ref:`PyObject`







