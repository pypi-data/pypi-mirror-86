.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.aui.AuiPaneInfo:

==========================================================================================================================================
|phoenix_title|  **wx.aui.AuiPaneInfo**
==========================================================================================================================================

:ref:`wx.aui.AuiPaneInfo`  is part of the ``AUI`` class framework.          

See also :ref:`AUI Overview <aui overview>`. 

:ref:`wx.aui.AuiPaneInfo`  specifies all the parameters for a pane. These parameters specify where the pane is on the screen, whether it is docked or floating, or hidden. In addition, these parameters specify the pane's docked position, floating position, preferred size, minimum size, caption text among many other parameters. 







         



.. seealso:: :ref:`wx.aui.AuiManager`, :ref:`wx.aui.AuiDockArt`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>AuiPaneInfo</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.aui.AuiPaneInfo_inheritance.png" alt="Inheritance diagram of AuiPaneInfo" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.aui.AuiPaneInfo.html" title="wx.aui.AuiPaneInfo" alt="" coords="5,5,152,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.aui.AuiPaneInfo.__init__`                                             
:meth:`~wx.aui.AuiPaneInfo.BestSize`                                             :meth:`~AuiPaneInfo.BestSize`   sets the ideal size for the pane.
:meth:`~wx.aui.AuiPaneInfo.Bottom`                                               :ref:`wx.Bottom`  sets the pane dock position to the bottom side of the frame.
:meth:`~wx.aui.AuiPaneInfo.BottomDockable`                                       :meth:`~AuiPaneInfo.BottomDockable`   indicates whether a pane can be docked at the bottom of the frame.
:meth:`~wx.aui.AuiPaneInfo.Caption`                                              :meth:`~AuiPaneInfo.Caption`   sets the caption of the pane.
:meth:`~wx.aui.AuiPaneInfo.CaptionVisible`                                       CaptionVisible indicates that a pane caption should be visible.
:meth:`~wx.aui.AuiPaneInfo.Center`                                               :ref:`wx.Center`  sets the pane dock position to the left side of the frame.
:meth:`~wx.aui.AuiPaneInfo.CenterPane`                                           :meth:`~AuiPaneInfo.CentrePane`   specifies that the pane should adopt the default center pane settings.
:meth:`~wx.aui.AuiPaneInfo.Centre`                                               :ref:`wx.Center`  sets the pane dock position to the left side of the frame.
:meth:`~wx.aui.AuiPaneInfo.CentrePane`                                           :meth:`~AuiPaneInfo.CentrePane`   specifies that the pane should adopt the default center pane settings.
:meth:`~wx.aui.AuiPaneInfo.CloseButton`                                          :meth:`~AuiPaneInfo.CloseButton`   indicates that a close button should be drawn for the pane.
:meth:`~wx.aui.AuiPaneInfo.DefaultPane`                                          :meth:`~AuiPaneInfo.DefaultPane`   specifies that the pane should adopt the default pane settings.
:meth:`~wx.aui.AuiPaneInfo.DestroyOnClose`                                       :meth:`~AuiPaneInfo.DestroyOnClose`   indicates whether a pane should be destroyed when it is closed.
:meth:`~wx.aui.AuiPaneInfo.Direction`                                            :ref:`wx.DataObject.Direction`  determines the direction of the docked pane.
:meth:`~wx.aui.AuiPaneInfo.Dock`                                                 :meth:`~AuiPaneInfo.Dock`   indicates that a pane should be docked.
:meth:`~wx.aui.AuiPaneInfo.DockFixed`                                            :meth:`~AuiPaneInfo.DockFixed`   causes the containing dock to have no resize sash.
:meth:`~wx.aui.AuiPaneInfo.Dockable`                                             :meth:`~AuiPaneInfo.Dockable`   specifies whether a frame can be docked or not.
:meth:`~wx.aui.AuiPaneInfo.Fixed`                                                :meth:`~AuiPaneInfo.Fixed`   forces a pane to be fixed size so that it cannot be resized.
:meth:`~wx.aui.AuiPaneInfo.Float`                                                :meth:`~AuiPaneInfo.Float`   indicates that a pane should be floated.
:meth:`~wx.aui.AuiPaneInfo.Floatable`                                            :meth:`~AuiPaneInfo.Floatable`   sets whether the user will be able to undock a pane and turn it into a floating window.
:meth:`~wx.aui.AuiPaneInfo.FloatingPosition`                                     :meth:`~AuiPaneInfo.FloatingPosition`   sets the position of the floating pane.
:meth:`~wx.aui.AuiPaneInfo.FloatingSize`                                         :meth:`~AuiPaneInfo.FloatingSize`   sets the size of the floating pane.
:meth:`~wx.aui.AuiPaneInfo.Gripper`                                              :meth:`~AuiPaneInfo.Gripper`   indicates that a gripper should be drawn for the pane.
:meth:`~wx.aui.AuiPaneInfo.GripperTop`                                           :meth:`~AuiPaneInfo.GripperTop`   indicates that a gripper should be drawn at the top of the pane.
:meth:`~wx.aui.AuiPaneInfo.HasBorder`                                            :meth:`~AuiPaneInfo.HasBorder`   returns ``True`` if the pane displays a border.
:meth:`~wx.aui.AuiPaneInfo.HasCaption`                                           :meth:`~AuiPaneInfo.HasCaption`   returns ``True`` if the pane displays a caption.
:meth:`~wx.aui.AuiPaneInfo.HasCloseButton`                                       :meth:`~AuiPaneInfo.HasCloseButton`   returns ``True`` if the pane displays a button to close the pane.
:meth:`~wx.aui.AuiPaneInfo.HasFlag`                                              :meth:`~AuiPaneInfo.HasFlag`   returns ``True`` if the property specified by flag is active for the pane.
:meth:`~wx.aui.AuiPaneInfo.HasGripper`                                           :meth:`~AuiPaneInfo.HasGripper`   returns ``True`` if the pane displays a gripper.
:meth:`~wx.aui.AuiPaneInfo.HasGripperTop`                                        :meth:`~AuiPaneInfo.HasGripper`   returns ``True`` if the pane displays a gripper at the top.
:meth:`~wx.aui.AuiPaneInfo.HasMaximizeButton`                                    :meth:`~AuiPaneInfo.HasMaximizeButton`   returns ``True`` if the pane displays a button to maximize the pane.
:meth:`~wx.aui.AuiPaneInfo.HasMinimizeButton`                                    :meth:`~AuiPaneInfo.HasMinimizeButton`   returns ``True`` if the pane displays a button to minimize the pane.
:meth:`~wx.aui.AuiPaneInfo.HasPinButton`                                         :meth:`~AuiPaneInfo.HasPinButton`   returns ``True`` if the pane displays a button to float the pane.
:meth:`~wx.aui.AuiPaneInfo.Hide`                                                 :meth:`~AuiPaneInfo.Hide`   indicates that a pane should be hidden.
:meth:`~wx.aui.AuiPaneInfo.Icon`                                                 :ref:`wx.Icon`  sets the icon of the pane.
:meth:`~wx.aui.AuiPaneInfo.IsBottomDockable`                                     :meth:`~AuiPaneInfo.IsBottomDockable`   returns ``True`` if the pane can be docked at the bottom of the managed frame.
:meth:`~wx.aui.AuiPaneInfo.IsDockable`                                           Returns ``True`` if the pane can be docked at any side.
:meth:`~wx.aui.AuiPaneInfo.IsDocked`                                             :meth:`~AuiPaneInfo.IsDocked`   returns ``True`` if the pane is currently docked.
:meth:`~wx.aui.AuiPaneInfo.IsFixed`                                              :meth:`~AuiPaneInfo.IsFixed`   returns ``True`` if the pane cannot be resized.
:meth:`~wx.aui.AuiPaneInfo.IsFloatable`                                          :meth:`~AuiPaneInfo.IsFloatable`   returns ``True`` if the pane can be undocked and displayed as a floating window.
:meth:`~wx.aui.AuiPaneInfo.IsFloating`                                           :meth:`~AuiPaneInfo.IsFloating`   returns ``True`` if the pane is floating.
:meth:`~wx.aui.AuiPaneInfo.IsLeftDockable`                                       :meth:`~AuiPaneInfo.IsLeftDockable`   returns ``True`` if the pane can be docked on the left of the managed frame.
:meth:`~wx.aui.AuiPaneInfo.IsMovable`                                            IsMoveable() returns ``True`` if the docked frame can be undocked or moved to another dock position.
:meth:`~wx.aui.AuiPaneInfo.IsOk`                                                 :meth:`~AuiPaneInfo.IsOk`   returns ``True`` if the :ref:`wx.aui.AuiPaneInfo`  structure is valid.
:meth:`~wx.aui.AuiPaneInfo.IsResizable`                                          :meth:`~AuiPaneInfo.IsResizable`   returns ``True`` if the pane can be resized.
:meth:`~wx.aui.AuiPaneInfo.IsRightDockable`                                      :meth:`~AuiPaneInfo.IsRightDockable`   returns ``True`` if the pane can be docked on the right of the managed frame.
:meth:`~wx.aui.AuiPaneInfo.IsShown`                                              :meth:`~AuiPaneInfo.IsShown`   returns ``True`` if the pane is currently shown.
:meth:`~wx.aui.AuiPaneInfo.IsToolbar`                                            :meth:`~AuiPaneInfo.IsToolbar`   returns ``True`` if the pane contains a toolbar.
:meth:`~wx.aui.AuiPaneInfo.IsTopDockable`                                        :meth:`~AuiPaneInfo.IsTopDockable`   returns ``True`` if the pane can be docked at the top of the managed frame.
:meth:`~wx.aui.AuiPaneInfo.IsValid`                                              
:meth:`~wx.aui.AuiPaneInfo.Layer`                                                :meth:`~AuiPaneInfo.Layer`   determines the layer of the docked pane.
:meth:`~wx.aui.AuiPaneInfo.Left`                                                 :ref:`wx.Left`  sets the pane dock position to the left side of the frame.
:meth:`~wx.aui.AuiPaneInfo.LeftDockable`                                         :meth:`~AuiPaneInfo.LeftDockable`   indicates whether a pane can be docked on the left of the frame.
:meth:`~wx.aui.AuiPaneInfo.MaxSize`                                              :meth:`~AuiPaneInfo.MaxSize`   sets the maximum size of the pane.
:meth:`~wx.aui.AuiPaneInfo.MaximizeButton`                                       :meth:`~AuiPaneInfo.MaximizeButton`   indicates that a maximize button should be drawn for the pane.
:meth:`~wx.aui.AuiPaneInfo.MinSize`                                              :meth:`~AuiPaneInfo.MinSize`   sets the minimum size of the pane.
:meth:`~wx.aui.AuiPaneInfo.MinimizeButton`                                       :meth:`~AuiPaneInfo.MinimizeButton`   indicates that a minimize button should be drawn for the pane.
:meth:`~wx.aui.AuiPaneInfo.Movable`                                              Movable indicates whether a frame can be moved.
:meth:`~wx.aui.AuiPaneInfo.Name`                                                 :meth:`~AuiPaneInfo.Name`   sets the name of the pane so it can be referenced in lookup functions.
:meth:`~wx.aui.AuiPaneInfo.PaneBorder`                                           PaneBorder indicates that a border should be drawn for the pane.
:meth:`~wx.aui.AuiPaneInfo.PinButton`                                            :meth:`~AuiPaneInfo.PinButton`   indicates that a pin button should be drawn for the pane.
:meth:`~wx.aui.AuiPaneInfo.Position`                                             :ref:`wx.Position`  determines the position of the docked pane.
:meth:`~wx.aui.AuiPaneInfo.Resizable`                                            :meth:`~AuiPaneInfo.Resizable`   allows a pane to be resized if the parameter is ``True``, and forces it to be a fixed size if the parameter is ``False``.
:meth:`~wx.aui.AuiPaneInfo.Right`                                                :ref:`wx.Right`  sets the pane dock position to the right side of the frame.
:meth:`~wx.aui.AuiPaneInfo.RightDockable`                                        :meth:`~AuiPaneInfo.RightDockable`   indicates whether a pane can be docked on the right of the frame.
:meth:`~wx.aui.AuiPaneInfo.Row`                                                  :meth:`~AuiPaneInfo.Row`   determines the row of the docked pane.
:meth:`~wx.aui.AuiPaneInfo.SafeSet`                                              Write the safe parts of a PaneInfo object "source" into "this".
:meth:`~wx.aui.AuiPaneInfo.SetFlag`                                              :meth:`~AuiPaneInfo.SetFlag`   turns the property given by flag on or off with the option_state parameter.
:meth:`~wx.aui.AuiPaneInfo.Show`                                                 :meth:`~AuiPaneInfo.Show`   indicates that a pane should be shown.
:meth:`~wx.aui.AuiPaneInfo.ToolbarPane`                                          :meth:`~AuiPaneInfo.ToolbarPane`   specifies that the pane should adopt the default toolbar pane settings.
:meth:`~wx.aui.AuiPaneInfo.Top`                                                  :ref:`wx.Top`  sets the pane dock position to the top of the frame.
:meth:`~wx.aui.AuiPaneInfo.TopDockable`                                          :meth:`~AuiPaneInfo.TopDockable`   indicates whether a pane can be docked at the top of the frame.
:meth:`~wx.aui.AuiPaneInfo.Window`                                               :ref:`wx.Window`  assigns the window pointer that the :ref:`wx.aui.AuiPaneInfo`  should use.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.aui.AuiPaneInfo.best_size`                                            A public C++ attribute of type :ref:`~wx.Size`. size that the layout engine will prefer                  
:attr:`~wx.aui.AuiPaneInfo.caption`                                              A public C++ attribute of type ``string``. caption displayed on the window                  
:attr:`~wx.aui.AuiPaneInfo.dock_direction`                                       A public C++ attribute of type ``int``. dock direction (top, bottom, left, right, center)                  
:attr:`~wx.aui.AuiPaneInfo.dock_layer`                                           A public C++ attribute of type ``int``. layer number (0 = innermost layer)                  
:attr:`~wx.aui.AuiPaneInfo.dock_pos`                                             A public C++ attribute of type ``int``. position inside the row (0 = first position)                  
:attr:`~wx.aui.AuiPaneInfo.dock_proportion`                                      A public C++ attribute of type ``int``. proportion while docked                  
:attr:`~wx.aui.AuiPaneInfo.dock_row`                                             A public C++ attribute of type ``int``. row number on the docking bar (0 = first row)                  
:attr:`~wx.aui.AuiPaneInfo.floating_pos`                                         A public C++ attribute of type :ref:`~wx.Point`. position while floating                  
:attr:`~wx.aui.AuiPaneInfo.floating_size`                                        A public C++ attribute of type :ref:`~wx.Size`. size while floating                  
:attr:`~wx.aui.AuiPaneInfo.frame`                                                A public C++ attribute of type :ref:`~wx.Frame`. floating frame window that holds the pane                  
:attr:`~wx.aui.AuiPaneInfo.icon`                                                 A public C++ attribute of type :ref:`~wx.Bitmap`. icon of the pane, may be invalid                  
:attr:`~wx.aui.AuiPaneInfo.max_size`                                             A public C++ attribute of type :ref:`~wx.Size`. maximum size the pane window can tolerate                  
:attr:`~wx.aui.AuiPaneInfo.min_size`                                             A public C++ attribute of type :ref:`~wx.Size`. minimum size the pane window can tolerate                  
:attr:`~wx.aui.AuiPaneInfo.name`                                                 A public C++ attribute of type ``string``. name of the pane                  
:attr:`~wx.aui.AuiPaneInfo.rect`                                                 A public C++ attribute of type :ref:`~wx.Rect`. current rectangle (populated by ``AUI``)                  
:attr:`~wx.aui.AuiPaneInfo.state`                                                A public C++ attribute of type ``int``. a combination of PaneState values                  
:attr:`~wx.aui.AuiPaneInfo.window`                                               A public C++ attribute of type :ref:`~wx.Window`. window that is in this pane                  
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.aui.AuiPaneInfo(object)

   **Possible constructors**::

       AuiPaneInfo()
       
       AuiPaneInfo(c)
       
   
   AuiPaneInfo is part of the ``AUI`` class framework.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, c)`
      
      Copy constructor.                  
      
      
      :param `c`: 
      :type `c`: wx.aui.AuiPaneInfo
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: BestSize(self, *args, **kw)

      :meth:`BestSize`   sets the ideal size for the pane.                  

      The docking manager will attempt to use this size as much as possible when docking or floating the pane.                   


      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **BestSize** `(self, size)`
      
      
      
      
      :param `size`: 
      :type `size`: wx.Size
      
      
      
      
      :rtype: :ref:`wx.aui.AuiPaneInfo`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **BestSize** `(self, x, y)`
      
      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      :rtype: :ref:`wx.aui.AuiPaneInfo`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Bottom(self)

      :ref:`wx.Bottom`  sets the pane dock position to the bottom side of the frame.                  

      This is the same thing as calling Direction(wxAUI_DOCK_BOTTOM).                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: BottomDockable(self, b=True)

      :meth:`BottomDockable`   indicates whether a pane can be docked at the bottom of the frame.                  


      :param `b`: 
      :type `b`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Caption(self, c)

      :meth:`Caption`   sets the caption of the pane.                  


      :param `c`: 
      :type `c`: string




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: CaptionVisible(self, visible=True)

      CaptionVisible indicates that a pane caption should be visible.                  

      If ``False``, no pane caption is drawn.                  


      :param `visible`: 
      :type `visible`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Center(self)

      :ref:`wx.Center`  sets the pane dock position to the left side of the frame.                  

      The centre pane is the space in the middle after all border panes (left, top, right, bottom) are subtracted from the layout. This is the same thing as calling Direction(wxAUI_DOCK_CENTRE).                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: CenterPane(self)

      :meth:`CentrePane`   specifies that the pane should adopt the default center pane settings.                  

      Centre panes usually do not have caption bars. This function provides an easy way of preparing a pane to be displayed in the center dock position.                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Centre(self)

      :ref:`wx.Center`  sets the pane dock position to the left side of the frame.                  

      The centre pane is the space in the middle after all border panes (left, top, right, bottom) are subtracted from the layout. This is the same thing as calling Direction(wxAUI_DOCK_CENTRE).                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: CentrePane(self)

      :meth:`CentrePane`   specifies that the pane should adopt the default center pane settings.                  

      Centre panes usually do not have caption bars. This function provides an easy way of preparing a pane to be displayed in the center dock position.                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: CloseButton(self, visible=True)

      :meth:`CloseButton`   indicates that a close button should be drawn for the pane.                  


      :param `visible`: 
      :type `visible`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: DefaultPane(self)

      :meth:`DefaultPane`   specifies that the pane should adopt the default pane settings.                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: DestroyOnClose(self, b=True)

      :meth:`DestroyOnClose`   indicates whether a pane should be destroyed when it is closed.                  

      Normally a pane is simply hidden when the close button is clicked. Setting DestroyOnClose to ``True`` will cause the window to be destroyed when the user clicks the pane's close button.                  


      :param `b`: 
      :type `b`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Direction(self, direction)

      :ref:`wx.DataObject.Direction`  determines the direction of the docked pane.                  

      It is functionally the same as calling :ref:`wx.Left`, :ref:`wx.Right`, :ref:`wx.Top`  or :ref:`wx.Bottom`, except that docking direction may be specified programmatically via the parameter.                  


      :param `direction`: 
      :type `direction`: int




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Dock(self)

      :meth:`Dock`   indicates that a pane should be docked.                  

      It is the opposite of :meth:`Float` .                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: DockFixed(self, b=True)

      :meth:`DockFixed`   causes the containing dock to have no resize sash.                  

      This is useful for creating panes that span the entire width or height of a dock, but should not be resizable in the other direction.                  


      :param `b`: 
      :type `b`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Dockable(self, b=True)

      :meth:`Dockable`   specifies whether a frame can be docked or not.                  

      It is the same as specifying TopDockable(b).BottomDockable(b).LeftDockable(b).RightDockable(b).                  


      :param `b`: 
      :type `b`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Fixed(self)

      :meth:`Fixed`   forces a pane to be fixed size so that it cannot be resized.                  

      After calling :meth:`Fixed` , :meth:`IsFixed`   will return ``True``.                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Float(self)

      :meth:`Float`   indicates that a pane should be floated.                  

      It is the opposite of :meth:`Dock` .                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Floatable(self, b=True)

      :meth:`Floatable`   sets whether the user will be able to undock a pane and turn it into a floating window.                  


      :param `b`: 
      :type `b`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: FloatingPosition(self, *args, **kw)

      :meth:`FloatingPosition`   sets the position of the floating pane.                   


      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **FloatingPosition** `(self, pos)`
      
      
      
      
      :param `pos`: 
      :type `pos`: wx.Point
      
      
      
      
      :rtype: :ref:`wx.aui.AuiPaneInfo`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **FloatingPosition** `(self, x, y)`
      
      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      :rtype: :ref:`wx.aui.AuiPaneInfo`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: FloatingSize(self, *args, **kw)

      :meth:`FloatingSize`   sets the size of the floating pane.                   


      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **FloatingSize** `(self, size)`
      
      
      
      
      :param `size`: 
      :type `size`: wx.Size
      
      
      
      
      :rtype: :ref:`wx.aui.AuiPaneInfo`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **FloatingSize** `(self, x, y)`
      
      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      :rtype: :ref:`wx.aui.AuiPaneInfo`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Gripper(self, visible=True)

      :meth:`Gripper`   indicates that a gripper should be drawn for the pane.                  


      :param `visible`: 
      :type `visible`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: GripperTop(self, attop=True)

      :meth:`GripperTop`   indicates that a gripper should be drawn at the top of the pane.                  


      :param `attop`: 
      :type `attop`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: HasBorder(self)

      :meth:`HasBorder`   returns ``True`` if the pane displays a border.                  

      :rtype: `bool`








   .. method:: HasCaption(self)

      :meth:`HasCaption`   returns ``True`` if the pane displays a caption.                  

      :rtype: `bool`








   .. method:: HasCloseButton(self)

      :meth:`HasCloseButton`   returns ``True`` if the pane displays a button to close the pane.                  

      :rtype: `bool`








   .. method:: HasFlag(self, flag)

      :meth:`HasFlag`   returns ``True`` if the property specified by flag is active for the pane.                  


      :param `flag`: 
      :type `flag`: int




      :rtype: `bool`








   .. method:: HasGripper(self)

      :meth:`HasGripper`   returns ``True`` if the pane displays a gripper.                  

      :rtype: `bool`








   .. method:: HasGripperTop(self)

      :meth:`HasGripper`   returns ``True`` if the pane displays a gripper at the top.                  

      :rtype: `bool`








   .. method:: HasMaximizeButton(self)

      :meth:`HasMaximizeButton`   returns ``True`` if the pane displays a button to maximize the pane.                  

      :rtype: `bool`








   .. method:: HasMinimizeButton(self)

      :meth:`HasMinimizeButton`   returns ``True`` if the pane displays a button to minimize the pane.                  

      :rtype: `bool`








   .. method:: HasPinButton(self)

      :meth:`HasPinButton`   returns ``True`` if the pane displays a button to float the pane.                  

      :rtype: `bool`








   .. method:: Hide(self)

      :meth:`Hide`   indicates that a pane should be hidden.                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Icon(self, b)

      :ref:`wx.Icon`  sets the icon of the pane.                  

      Notice that the height of the icon should be smaller than the value returned by `AuiDockArt.GetMetric(wxAUI_DOCKART_CAPTION_SIZE)` to ensure that it appears correctly. 

                


      :param `b`: 
      :type `b`: wx.Bitmap




      :rtype: :ref:`wx.aui.AuiPaneInfo`







      .. versionadded:: 2.9.2 
     








   .. method:: IsBottomDockable(self)

      :meth:`IsBottomDockable`   returns ``True`` if the pane can be docked at the bottom of the managed frame.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`IsDockable`     








   .. method:: IsDockable(self)

      Returns ``True`` if the pane can be docked at any side.                  

                

      :rtype: `bool`







      .. versionadded:: 2.9.2 
     







      .. seealso:: :meth:`IsTopDockable` , :meth:`IsBottomDockable` , :meth:`IsLeftDockable` , :meth:`IsRightDockable`   








   .. method:: IsDocked(self)

      :meth:`IsDocked`   returns ``True`` if the pane is currently docked.                  

      :rtype: `bool`








   .. method:: IsFixed(self)

      :meth:`IsFixed`   returns ``True`` if the pane cannot be resized.                  

      :rtype: `bool`








   .. method:: IsFloatable(self)

      :meth:`IsFloatable`   returns ``True`` if the pane can be undocked and displayed as a floating window.                  

      :rtype: `bool`








   .. method:: IsFloating(self)

      :meth:`IsFloating`   returns ``True`` if the pane is floating.                  

      :rtype: `bool`








   .. method:: IsLeftDockable(self)

      :meth:`IsLeftDockable`   returns ``True`` if the pane can be docked on the left of the managed frame.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`IsDockable`     








   .. method:: IsMovable(self)

      IsMoveable() returns ``True`` if the docked frame can be undocked or moved to another dock position.                  

      :rtype: `bool`








   .. method:: IsOk(self)

      :meth:`IsOk`   returns ``True`` if the :ref:`wx.aui.AuiPaneInfo`  structure is valid.                  

      A pane structure is valid if it has an associated window.                  

      :rtype: `bool`








   .. method:: IsResizable(self)

      :meth:`IsResizable`   returns ``True`` if the pane can be resized.                  

      :rtype: `bool`








   .. method:: IsRightDockable(self)

      :meth:`IsRightDockable`   returns ``True`` if the pane can be docked on the right of the managed frame.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`IsDockable`     








   .. method:: IsShown(self)

      :meth:`IsShown`   returns ``True`` if the pane is currently shown.                  

      :rtype: `bool`








   .. method:: IsToolbar(self)

      :meth:`IsToolbar`   returns ``True`` if the pane contains a toolbar.                  

      :rtype: `bool`








   .. method:: IsTopDockable(self)

      :meth:`IsTopDockable`   returns ``True`` if the pane can be docked at the top of the managed frame.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`IsDockable`     








   .. method:: IsValid(self)



      :rtype: `bool`








   .. method:: Layer(self, layer)

      :meth:`Layer`   determines the layer of the docked pane.                  

      The dock layer is similar to an onion, the inner-most layer being layer 0. Each shell moving in the outward direction has a higher layer number. This allows for more complex docking layout formation.                  


      :param `layer`: 
      :type `layer`: int




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Left(self)

      :ref:`wx.Left`  sets the pane dock position to the left side of the frame.                  

      This is the same thing as calling Direction(wxAUI_DOCK_LEFT).                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: LeftDockable(self, b=True)

      :meth:`LeftDockable`   indicates whether a pane can be docked on the left of the frame.                  


      :param `b`: 
      :type `b`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: MaxSize(self, *args, **kw)

      :meth:`MaxSize`   sets the maximum size of the pane.                   


      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **MaxSize** `(self, size)`
      
      
      
      
      :param `size`: 
      :type `size`: wx.Size
      
      
      
      
      :rtype: :ref:`wx.aui.AuiPaneInfo`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **MaxSize** `(self, x, y)`
      
      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      :rtype: :ref:`wx.aui.AuiPaneInfo`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: MaximizeButton(self, visible=True)

      :meth:`MaximizeButton`   indicates that a maximize button should be drawn for the pane.                  


      :param `visible`: 
      :type `visible`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: MinSize(self, *args, **kw)

      :meth:`MinSize`   sets the minimum size of the pane.                  

      Please note that this is only partially supported as of this writing.                   


      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **MinSize** `(self, size)`
      
      
      
      
      :param `size`: 
      :type `size`: wx.Size
      
      
      
      
      :rtype: :ref:`wx.aui.AuiPaneInfo`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **MinSize** `(self, x, y)`
      
      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      :rtype: :ref:`wx.aui.AuiPaneInfo`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: MinimizeButton(self, visible=True)

      :meth:`MinimizeButton`   indicates that a minimize button should be drawn for the pane.                  


      :param `visible`: 
      :type `visible`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Movable(self, b=True)

      Movable indicates whether a frame can be moved.                  


      :param `b`: 
      :type `b`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Name(self, n)

      :meth:`Name`   sets the name of the pane so it can be referenced in lookup functions.                  

      If a name is not specified by the user, a random name is assigned to the pane when it is added to the manager.                  


      :param `n`: 
      :type `n`: string




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: PaneBorder(self, visible=True)

      PaneBorder indicates that a border should be drawn for the pane.                  


      :param `visible`: 
      :type `visible`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: PinButton(self, visible=True)

      :meth:`PinButton`   indicates that a pin button should be drawn for the pane.                  


      :param `visible`: 
      :type `visible`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Position(self, pos)

      :ref:`wx.Position`  determines the position of the docked pane.                  


      :param `pos`: 
      :type `pos`: int




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Resizable(self, resizable=True)

      :meth:`Resizable`   allows a pane to be resized if the parameter is ``True``, and forces it to be a fixed size if the parameter is ``False``.                  

      This is simply an antonym for :meth:`Fixed` .                  


      :param `resizable`: 
      :type `resizable`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Right(self)

      :ref:`wx.Right`  sets the pane dock position to the right side of the frame.                  

      This is the same thing as calling Direction(wxAUI_DOCK_RIGHT).                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: RightDockable(self, b=True)

      :meth:`RightDockable`   indicates whether a pane can be docked on the right of the frame.                  


      :param `b`: 
      :type `b`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Row(self, row)

      :meth:`Row`   determines the row of the docked pane.                  


      :param `row`: 
      :type `row`: int




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: SafeSet(self, source)

      Write the safe parts of a PaneInfo object "source" into "this".                  

      "Safe parts" are all non-UI elements (e.g. all layout determining parameters like the size, position etc.). "Unsafe parts" (pointers to button, frame and window) are not modified by this write operation. 

                


      :param `source`: 
      :type `source`: wx.aui.AuiPaneInfo






      .. note:: 

         This method is used when loading perspectives.   








   .. method:: SetFlag(self, flag, option_state)

      :meth:`SetFlag`   turns the property given by flag on or off with the option_state parameter.                  


      :param `flag`: 
      :type `flag`: int
      :param `option_state`: 
      :type `option_state`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Show(self, show=True)

      :meth:`Show`   indicates that a pane should be shown.                  


      :param `show`: 
      :type `show`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: ToolbarPane(self)

      :meth:`ToolbarPane`   specifies that the pane should adopt the default toolbar pane settings.                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Top(self)

      :ref:`wx.Top`  sets the pane dock position to the top of the frame.                  

      This is the same thing as calling Direction(wxAUI_DOCK_TOP).                  

      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: TopDockable(self, b=True)

      :meth:`TopDockable`   indicates whether a pane can be docked at the top of the frame.                  


      :param `b`: 
      :type `b`: bool




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. method:: Window(self, w)

      :ref:`wx.Window`  assigns the window pointer that the :ref:`wx.aui.AuiPaneInfo`  should use.                  

      This normally does not need to be specified, as the window pointer is automatically assigned to the :ref:`wx.aui.AuiPaneInfo`  structure as soon as it is added to the manager.                  


      :param `w`: 
      :type `w`: wx.Window




      :rtype: :ref:`wx.aui.AuiPaneInfo`








   .. attribute:: best_size

      A public C++ attribute of type :ref:`~wx.Size`. size that the layout engine will prefer                  


   .. attribute:: caption

      A public C++ attribute of type ``string``. caption displayed on the window                  


   .. attribute:: dock_direction

      A public C++ attribute of type ``int``. dock direction (top, bottom, left, right, center)                  


   .. attribute:: dock_layer

      A public C++ attribute of type ``int``. layer number (0 = innermost layer)                  


   .. attribute:: dock_pos

      A public C++ attribute of type ``int``. position inside the row (0 = first position)                  


   .. attribute:: dock_proportion

      A public C++ attribute of type ``int``. proportion while docked                  


   .. attribute:: dock_row

      A public C++ attribute of type ``int``. row number on the docking bar (0 = first row)                  


   .. attribute:: floating_pos

      A public C++ attribute of type :ref:`~wx.Point`. position while floating                  


   .. attribute:: floating_size

      A public C++ attribute of type :ref:`~wx.Size`. size while floating                  


   .. attribute:: frame

      A public C++ attribute of type :ref:`~wx.Frame`. floating frame window that holds the pane                  


   .. attribute:: icon

      A public C++ attribute of type :ref:`~wx.Bitmap`. icon of the pane, may be invalid                  


   .. attribute:: max_size

      A public C++ attribute of type :ref:`~wx.Size`. maximum size the pane window can tolerate                  


   .. attribute:: min_size

      A public C++ attribute of type :ref:`~wx.Size`. minimum size the pane window can tolerate                  


   .. attribute:: name

      A public C++ attribute of type ``string``. name of the pane                  


   .. attribute:: rect

      A public C++ attribute of type :ref:`~wx.Rect`. current rectangle (populated by ``AUI``)                  


   .. attribute:: state

      A public C++ attribute of type ``int``. a combination of PaneState values                  


   .. attribute:: window

      A public C++ attribute of type :ref:`~wx.Window`. window that is in this pane                  

