.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.propgrid.LongStringProperty:

==========================================================================================================================================
|phoenix_title|  **wx.propgrid.LongStringProperty**
==========================================================================================================================================

Like :ref:`wx.propgrid.StringProperty`, but has a button that triggers a small text editor dialog.          

**Supported special attributes:**

- ``PG_DIALOG_TITLE``: Sets a specific title for the text editor dialog (since 3.1.3).  


          




|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>LongStringProperty</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.propgrid.LongStringProperty_inheritance.png" alt="Inheritance diagram of LongStringProperty" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.propgrid.LongStringProperty.html" title="wx.propgrid.LongStringProperty" alt="" coords="11,237,238,267"/> <area shape="rect" id="node2" href="wx.propgrid.EditorDialogProperty.html" title="wx.propgrid.EditorDialogProperty" alt="" coords="5,160,244,189"/> <area shape="rect" id="node3" href="wx.propgrid.PGProperty.html" title="wx.propgrid.PGProperty" alt="" coords="37,83,213,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="81,5,168,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.propgrid.LongStringProperty.__init__`                                 
:meth:`~wx.propgrid.LongStringProperty.DisplayEditorDialog`                      Shows editor dialog.
:meth:`~wx.propgrid.LongStringProperty.StringToValue`                            Converts text into :ref:`Variant`  value appropriate for this property.
:meth:`~wx.propgrid.LongStringProperty.ValueToString`                            Converts property value into a text representation.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.propgrid.LongStringProperty(EditorDialogProperty)

   **Possible constructors**::

       LongStringProperty(label=PG_LABEL, name=PG_LABEL, value="")
       
   
   Like StringProperty, but has a button that triggers a small text
   editor dialog.



   .. method:: __init__(self, label=PG_LABEL, name=PG_LABEL, value=EmptyString)




      :param `label`: 
      :type `label`: string
      :param `name`: 
      :type `name`: string
      :param `value`: 
      :type `value`: string







   .. method:: DisplayEditorDialog(self, pg, value)

      Shows editor dialog.                  

      Value to be edited should be read from `value`, and if dialog is not cancelled, it should be stored back and ``True`` should be returned. 




      :param `pg`: Property grid in which property is displayed.  
      :type `pg`: wx.propgrid.PropertyGrid
      :param `value`: Value to be edited.  
      :type `value`: PGVariant








      :rtype: `tuple`



                  



      :returns: 

         ( `bool`, `value` ) 








   .. method:: StringToValue(self, text, argFlags=0)

      Converts text into :ref:`Variant`  value appropriate for this property.                  




      :param `text`: Text to be translated into variant.  
      :type `text`: string
      :param `argFlags`: If ``PG_FULL_VALUE``  is set, returns complete, storable value instead of displayable one (they may be different). If ``PG_COMPOSITE_FRAGMENT``  is set, text is interpreted as a part of composite property string value (as generated by :meth:`ValueToString`   called with this same flag).  
      :type `argFlags`: int










      :rtype: `tuple`




      You might want to take into account that m_value is Null variant if property value is unspecified (which is usually only case if you explicitly enabled that sort behaviour).                    



      :returns: 

         ( `bool`, `variant` ) 







      .. note:: 

         Default implementation converts semicolon delimited tokens into child values. Only works for properties with children.  








   .. method:: ValueToString(self, value, argFlags=0)

      Converts property value into a text representation.                  




      :param `value`: Value to be converted.   
      :type `value`: PGVariant
      :param `argFlags`: If 0 (default value), then displayed string is returned. If ``PG_FULL_VALUE``  is set, returns complete, storable string value instead of displayable. If ``PG_EDITABLE_VALUE``  is set, returns string value that must be editable in textctrl. If ``PG_COMPOSITE_FRAGMENT``  is set, returns text that is appropriate to display as a part of string property's composite text representation.  
      :type `argFlags`: int








      :rtype: `string`



                  



      .. note:: 

         Default implementation calls :meth:`GenerateComposedValue` .   







