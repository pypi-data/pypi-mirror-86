.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.pyprogress

.. highlight:: python



.. _wx.lib.agw.pyprogress.ProgressGauge:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.pyprogress.ProgressGauge**
==========================================================================================================================================

This class provides a visual alternative for :class:`Gauge`.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>ProgressGauge</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.pyprogress.ProgressGauge_inheritance.png" alt="Inheritance diagram of ProgressGauge" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.pyprogress.ProgressGauge.html" title="wx.lib.agw.pyprogress.ProgressGauge" alt="" coords="5,315,275,344"/> <area shape="rect" id="node2" href="wx.Window.html" title="wx.Window" alt="" coords="91,237,189,267"/> <area shape="rect" id="node3" href="wx.WindowBase.html" title="wx.WindowBase" alt="" coords="75,160,205,189"/> <area shape="rect" id="node4" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="81,83,199,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="37,5,123,35"/> <area shape="rect" id="node6" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="148,5,255,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.Window`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.__init__`                            Default class constructor.
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.DrawProgress`                        Actually draws the sliding bar.
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.GetFirstGradientColour`              Returns the first gradient colour.
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.GetGaugeBackground`                  Returns the gauge background colour.
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.GetGaugeProportion`                  Returns the relative proportion between the sliding bar and the
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.GetGaugeSteps`                       Returns the number of steps the gauge performs before switching from
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.GetSecondGradientColour`             Returns the second gradient colour.
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.OnEraseBackground`                   Handles the ``wx.EVT_ERASE_BACKGROUND`` event for :class:`ProgressGauge`.
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.OnPaint`                             Handles the ``wx.EVT_PAINT`` event for :class:`ProgressGauge`.
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.SetFirstGradientColour`              Sets the first gradient colour.
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.SetGaugeBackground`                  Sets the gauge background colour.
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.SetGaugeProportion`                  Sets the relative proportion between the sliding bar and the
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.SetGaugeSteps`                       Sets the number of steps the gauge performs before switching from
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.SetSecondGradientColour`             Sets the second gradient colour.
:meth:`~wx.lib.agw.pyprogress.ProgressGauge.Update`                              Updates the gauge with a new value.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: ProgressGauge(wx.Window)

   This class provides a visual alternative for :class:`Gauge`.

   .. method:: __init__(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=(-1,30))

      Default class constructor.
      
      :param `parent`: parent window. Must not be ``None``;
      :param `id`: window identifier. A value of -1 indicates a default value;
      :param `pos`: the control position. A value of (-1, -1) indicates a default position,
       chosen by either the windowing system or wxPython, depending on platform;
      :param `size`: the control size. A value of (-1, -1) indicates a default size,
       chosen by either the windowing system or wxPython, depending on platform.


   .. method:: DrawProgress(self, dc, xsize, ysize, increment)

      Actually draws the sliding bar.
      
      :param `dc`: an instance of :class:`wx.DC`;
      :param `xsize`: the width of the whole progress bar;
      :param `ysize`: the height of the whole progress bar;
      :param `increment`: a positive value if we are spinning from left to right,
       a negative one if we are spinning from right to left.


   .. method:: GetFirstGradientColour(self)

      Returns the first gradient colour. 


   .. method:: GetGaugeBackground(self)

      Returns the gauge background colour. 


   .. method:: GetGaugeProportion(self)

      Returns the relative proportion between the sliding bar and the
      whole gauge.


   .. method:: GetGaugeSteps(self)

      Returns the number of steps the gauge performs before switching from
      forward to backward (or vice-versa) movement.


   .. method:: GetSecondGradientColour(self)

      Returns the second gradient colour. 


   .. method:: OnEraseBackground(self, event)

      Handles the ``wx.EVT_ERASE_BACKGROUND`` event for :class:`ProgressGauge`.
      
      :param `event`: a :class:`EraseEvent` event to be processed.
      
      :note: This method is intentionally empty to reduce flicker.


   .. method:: OnPaint(self, event)

      Handles the ``wx.EVT_PAINT`` event for :class:`ProgressGauge`.
      
      :param `event`: a :class:`PaintEvent` event to be processed.


   .. method:: SetFirstGradientColour(self, colour)

      Sets the first gradient colour.
      
      :param `colour`: a valid :class:`wx.Colour` object.


   .. method:: SetGaugeBackground(self, colour)

      Sets the gauge background colour.
      
      :param `colour`: a valid :class:`wx.Colour` object.


   .. method:: SetGaugeProportion(self, proportion)

      Sets the relative proportion between the sliding bar and the
      whole gauge.
      
      :param `proportion`: a floating point number representing the relative
       proportion between the sliding bar and the whole gauge.


   .. method:: SetGaugeSteps(self, steps)

      Sets the number of steps the gauge performs before switching from
      forward to backward (or vice-versa) movement.
      
      :param `steps`: the number of steps the gauge performs before switching from
       forward to backward (or vice-versa) movement.


   .. method:: SetSecondGradientColour(self, colour)

      Sets the second gradient colour.
      
      :param `colour`: a valid :class:`wx.Colour` object.


   .. method:: Update(self)

      Updates the gauge with a new value. 


