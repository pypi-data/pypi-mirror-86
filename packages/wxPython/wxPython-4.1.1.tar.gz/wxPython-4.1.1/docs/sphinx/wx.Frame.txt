.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.Frame:

==========================================================================================================================================
|phoenix_title|  **wx.Frame**
==========================================================================================================================================

A frame is a window whose size and position can (usually) be changed by the user.          

It usually has thick borders and a title bar, and can optionally contain a menu bar, toolbar and status bar. A frame can contain any window that is not a frame or dialog. 

A frame that has a status bar and toolbar, created via the :meth:`~wx.Frame.CreateStatusBar`  and :meth:`~wx.Frame.CreateToolBar`  functions, manages these windows and adjusts the value returned by :meth:`~wx.Frame.GetClientSize`  to reflect the remaining size available to application windows. 





|phoenix_title| Default event processing
========================================

:ref:`wx.Frame`  processes the following events: 

-  ``wxEVT_SIZE:``   if the frame has exactly one child window, not counting the status and toolbar, this child is resized to take the entire frame client area. If two or more windows are present, they should be laid out explicitly either by manually handling   ``wxEVT_SIZE``   or using sizers;   
-  ``wxEVT_MENU_HIGHLIGHT:``   the default implementation displays the help string associated with the selected item in the first pane of the status bar, if there is one. 




.. _Frame-styles:

|styles| Window Styles
================================

This class supports the following styles:   

- ``wx.DEFAULT_FRAME_STYLE``: Defined as ``wx.MINIMIZE_BOX`` | ``wx.MAXIMIZE_BOX`` | ``wx.RESIZE_BORDER`` | ``wx.SYSTEM_MENU`` | ``wx.CAPTION`` | ``wx.CLOSE_BOX`` | ``wx.CLIP_CHILDREN``.  
- ``wx.ICONIZE``: Display the frame iconized (minimized). Windows only.  
- ``wx.CAPTION``: Puts a caption on the frame. Notice that this flag is required by ``wx.MINIMIZE_BOX``, ``wx.MAXIMIZE_BOX`` and ``wx.CLOSE_BOX`` on most systems as the corresponding buttons cannot be shown if the window has no title bar at all. I.e. if ``wx.CAPTION`` is not specified those styles would be simply ignored.  
- ``wx.MINIMIZE``: Identical to ``wx.ICONIZE``. Windows only.  
- ``wx.MINIMIZE_BOX``: Displays a minimize box on the frame.  
- ``wx.MAXIMIZE``: Displays the frame maximized. Windows and GTK+ only.  
- ``wx.MAXIMIZE_BOX``: Displays a maximize box on the frame. Notice that under wxGTK ``wx.RESIZE_BORDER`` must be used as well or this style is ignored.  
- ``wx.CLOSE_BOX``: Displays a close box on the frame.  
- ``wx.STAY_ON_TOP``: Stay on top of all other windows, see also ``wx.FRAME_FLOAT_ON_PARENT``.  
- ``wx.SYSTEM_MENU``: Displays a system menu containing the list of various windows commands in the window title bar. Unlike ``wx.MINIMIZE_BOX``, ``wx.MAXIMIZE_BOX`` and ``wx.CLOSE_BOX`` styles this style can be used without ``wx.CAPTION``, at least under Windows, and makes the system menu available without showing it on screen in this case. However it is recommended to only use it together with ``wx.CAPTION`` for consistent behaviour under all platforms.  
- ``wx.RESIZE_BORDER``: Displays a resizable border around the window.  
- ``wx.FRAME_TOOL_WINDOW``: Causes a frame with a small title bar to be created; the frame does not appear in the taskbar under Windows or GTK+.  
- ``wx.FRAME_NO_TASKBAR``: Creates an otherwise normal frame but it does not appear in the taskbar under Windows or GTK+ (note that it will minimize to the desktop window under Windows which may seem strange to the users and thus it might be better to use this style only without ``wx.MINIMIZE_BOX`` style). In wxGTK, the flag is respected only if the window manager supports ``_NET_WM_STATE_SKIP_TASKBAR`` hint.  
- ``wx.FRAME_FLOAT_ON_PARENT``: The frame will always be on top of its parent (unlike ``wx.STAY_ON_TOP``). A frame created with this style must have a non-NULL parent.  
- ``wx.FRAME_SHAPED``: Windows with this style are allowed to have their shape changed with the :meth:`~wx.Frame.SetShape`  method.  

The default frame style is for normal, resizable frames. To create a frame which cannot be resized by user, you may use the following combination of styles:
::

            style = wx.DEFAULT_FRAME_STYLE & ~(wx.RESIZE_BORDER | wx.MAXIMIZE_BOX)



.. _Frame-extra-styles:

|extra_styles| Window Extra Styles
==================================

See also the :ref:`Window Styles <window styles>`. This class supports the following extra styles:   

- ``wx.FRAME_EX_CONTEXTHELP``: Under Windows, puts a query button on the caption. When pressed, Windows will go into a context-sensitive help mode and wxWidgets will send a  ``wxEVT_HELP``   event if the user clicked on an application window. Note that this is an extended style and must be set by calling SetExtraStyle before Create is called (two-step construction). You cannot use this style together with ``wx.MAXIMIZE_BOX`` or ``wx.MINIMIZE_BOX``, so you should use ``wx.DEFAULT_FRAME_STYLE`` ~ (wx``wx.MINIMIZE_BOX`` | ``wx.MAXIMIZE_BOX``) for the frames having this style (the dialogs don't have a minimize or a maximize box by default)   
- ``wx.FRAME_EX_METAL``: On macOS, frames with this style will be shown with a metallic look. This is an extra style.  




.. _Frame-events:

|events| Events Emitted by this Class
=====================================

Event macros for events emitted by this class:   

- EVT_CLOSE: Process a  ``wxEVT_CLOSE_WINDOW``   event when the frame is being closed by the user or programmatically (see  :meth:`wx.Window.Close` ). The user may generate this event clicking the close button (typically the 'X' on the top-right of the title bar) if it's present (see the  ``CLOSE_BOX``   style). See  :ref:`wx.CloseEvent`.  
- EVT_ICONIZE: Process a  ``wxEVT_ICONIZE``   event. See  :ref:`wx.IconizeEvent`.  
- EVT_MENU_OPEN: A menu is about to be opened. See :ref:`wx.MenuEvent`.  
- EVT_MENU_CLOSE: A menu has been just closed. See :ref:`wx.MenuEvent`.  
- EVT_MENU_HIGHLIGHT: The menu item with the specified id has been highlighted: used to show help prompts in the status bar by :ref:`wx.Frame`. See :ref:`wx.MenuEvent`.  
- EVT_MENU_HIGHLIGHT_ALL: A menu item has been highlighted, i.e. the currently selected menu item has changed. See :ref:`wx.MenuEvent`.  






.. note:: 

   An application should normally define an :ref:`wx.CloseEvent`  handler for the frame to respond to system close events, for example so that related data and subwindows can be cleaned up.  







.. seealso:: :ref:`wx.MDIParentFrame`, :ref:`wx.MDIChildFrame`, :ref:`wx.MiniFrame`, :ref:`wx.Dialog`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Frame</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.Frame_inheritance.png" alt="Inheritance diagram of Frame" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Frame.html" title="wx.Frame" alt="" coords="66,392,151,421"/> <area shape="rect" id="node2" href="wx.TopLevelWindow.html" title="wx.TopLevelWindow" alt="" coords="31,315,186,344"/> <area shape="rect" id="node3" href="wx.NonOwnedWindow.html" title="wx.NonOwnedWindow" alt="" coords="25,237,193,267"/> <area shape="rect" id="node4" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node5" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node6" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node7" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|appearance| Control Appearance
===============================

|

.. figure:: _static/images/widgets/fullsize/wxmsw/wx.frame.png
   :alt: wxMSW
   :figclass: floatleft

   **wxMSW**


.. figure:: _static/images/widgets/fullsize/wxmac/wx.frame.png
   :alt: wxMAC
   :figclass: floatright

   **wxMAC**


.. figure:: _static/images/widgets/fullsize/wxgtk/wx.frame.png
   :alt: wxGTK
   :figclass: floatcenter

   **wxGTK**


|


|sub_classes| Known Subclasses
==============================

:ref:`wx.aui.AuiFloatingFrame`, :ref:`wx.aui.AuiMDIParentFrame`, :ref:`DocChildFrame`, :ref:`DocParentFrame`, :ref:`wx.html.HtmlHelpFrame`, :ref:`wx.MDIChildFrame`, :ref:`wx.MDIParentFrame`, :ref:`wx.MiniFrame`, :ref:`wx.PreviewFrame`, :ref:`wx.adv.SplashScreen`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.Frame.__init__`                                                       Default constructor.
:meth:`~wx.Frame.Centre`                                                         Centres the frame on the display.
:meth:`~wx.Frame.Create`                                                         Used in two-step frame construction.
:meth:`~wx.Frame.CreateStatusBar`                                                Creates a status bar at the bottom of the frame.
:meth:`~wx.Frame.CreateToolBar`                                                  Creates a toolbar at the top or left of the frame.
:meth:`~wx.Frame.DoGiveHelp`                                                     Method used to show help string of the selected menu toolbar item.
:meth:`~wx.Frame.GetClassDefaultAttributes`                                      
:meth:`~wx.Frame.GetClientAreaOrigin`                                            Returns the origin of the frame client area (in client coordinates).
:meth:`~wx.Frame.GetMenuBar`                                                     Returns a pointer to the menubar currently associated with the frame (if any).
:meth:`~wx.Frame.GetStatusBar`                                                   Returns a pointer to the status bar currently associated with the frame (if any).
:meth:`~wx.Frame.GetStatusBarPane`                                               Returns the status bar pane used to display menu and toolbar help.
:meth:`~wx.Frame.GetToolBar`                                                     Returns a pointer to the toolbar currently associated with the frame (if any).
:meth:`~wx.Frame.OnCreateStatusBar`                                              Virtual function called when a status bar is requested by :meth:`~Frame.CreateStatusBar` .
:meth:`~wx.Frame.OnCreateToolBar`                                                Virtual function called when a toolbar is requested by :meth:`~Frame.CreateToolBar` .
:meth:`~wx.Frame.PopStatusText`                                                  
:meth:`~wx.Frame.ProcessCommand`                                                 Simulate a menu command.
:meth:`~wx.Frame.PushStatusText`                                                 
:meth:`~wx.Frame.SetMenuBar`                                                     Tells the frame to show the given menu bar.
:meth:`~wx.Frame.SetStatusBar`                                                   Associates a status bar with the frame.
:meth:`~wx.Frame.SetStatusBarPane`                                               Set the status bar pane used to display menu and toolbar help.
:meth:`~wx.Frame.SetStatusText`                                                  Sets the status bar text and updates the status bar display.
:meth:`~wx.Frame.SetStatusWidths`                                                Sets the widths of the fields in the status bar.
:meth:`~wx.Frame.SetToolBar`                                                     Associates a toolbar with the frame.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.Frame.MenuBar`                                                        See :meth:`~wx.Frame.GetMenuBar` and :meth:`~wx.Frame.SetMenuBar`
:attr:`~wx.Frame.StatusBar`                                                      See :meth:`~wx.Frame.GetStatusBar` and :meth:`~wx.Frame.SetStatusBar`
:attr:`~wx.Frame.StatusBarPane`                                                  See :meth:`~wx.Frame.GetStatusBarPane` and :meth:`~wx.Frame.SetStatusBarPane`
:attr:`~wx.Frame.ToolBar`                                                        See :meth:`~wx.Frame.GetToolBar` and :meth:`~wx.Frame.SetToolBar`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.Frame(TopLevelWindow)

   **Possible constructors**::

       Frame()
       
       Frame(parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition,
             size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr)
       
   
   A frame is a window whose size and position can (usually) be changed
   by the user.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr)`
      
      Constructor, creating the window.                  
      
      
      
      
      :param `parent`: The window parent. This may be, and often is, ``None``. If it is non-NULL, the frame will be minimized when its parent is minimized and restored when it is restored (although it will still be possible to minimize and restore just this frame itself).   
      :type `parent`: wx.Window
      :param `id`: The window identifier. It may take a value of -1 to indicate a default value.   
      :type `id`: wx.WindowID
      :param `title`: The caption to be displayed on the frame's title bar.   
      :type `title`: string
      :param `pos`: The window position. The value DefaultPosition indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.   
      :type `pos`: wx.Point
      :param `size`: The window size. The value DefaultSize indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.   
      :type `size`: wx.Size
      :param `style`: The window style. See :ref:`wx.Frame`  class description.   
      :type `style`: long
      :param `name`: The name of the window. This parameter is used to associate a name with the item, allowing the application user to set Motif resource values for individual windows.  
      :type `name`: string
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. note:: 
      
         For Motif, ``MWM`` (the Motif Window Manager) should be running for any window styles to work (otherwise all styles take effect).  
      
      
      
      
      
      
      
      .. seealso:: :meth:`Create`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Centre(self, direction=BOTH)

      Centres the frame on the display.                  




      :param `direction`: The parameter may be ``wx.HORIZONTAL``, ``wx.VERTICAL`` or ``wx.BOTH``.   
      :type `direction`: int




                  





   .. method:: Create(self, parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr)

      Used in two-step frame construction.                  

      See :ref:`wx.Frame`  for further details.                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `title`: 
      :type `title`: string
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. method:: CreateStatusBar(self, number=1, style=STB_DEFAULT_STYLE, id=0, name=StatusBarNameStr)

      Creates a status bar at the bottom of the frame.                  




      :param `number`: The number of fields to create. Specify a value greater than 1 to create a multi-field status bar.   
      :type `number`: int
      :param `style`: The status bar style. See :ref:`wx.StatusBar`  for a list of valid styles.   
      :type `style`: long
      :param `id`: The status bar window identifier. If -1, an identifier will be chosen by wxWidgets.   
      :type `id`: wx.WindowID
      :param `name`: The status bar window name.  
      :type `name`: string












      :rtype: :ref:`wx.StatusBar`



                  



      :returns: 

         A pointer to the status bar if it was created successfully, ``None`` otherwise.  







      .. note:: 

         The width of the status bar is the whole width of the frame (adjusted automatically when resizing), and the height and text size are chosen by the host windowing system.  







      .. seealso:: :meth:`SetStatusText` , :meth:`OnCreateStatusBar` , :meth:`GetStatusBar`     








   .. method:: CreateToolBar(self, style=TB_DEFAULT_STYLE, id=ID_ANY, name=ToolBarNameStr)

      Creates a toolbar at the top or left of the frame.                  




      :param `style`: The toolbar style. See :ref:`wx.ToolBar`  for a list of valid styles.   
      :type `style`: long
      :param `id`: The toolbar window identifier. If -1, an identifier will be chosen by wxWidgets.   
      :type `id`: wx.WindowID
      :param `name`: The toolbar window name.  
      :type `name`: string










      :rtype: :ref:`wx.ToolBar`



                  



      :returns: 

         A pointer to the toolbar if it was created successfully, ``None`` otherwise.  







      .. note:: 

         By default, the toolbar is an instance of :ref:`wx.ToolBar`. To use a different class, override :meth:`OnCreateToolBar` . When a toolbar has been created with this function, or made known to the frame with :meth:`wx.Frame.SetToolBar` , the frame will manage the toolbar position and adjust the return value from :meth:`wx.Window.GetClientSize`   to reflect the available space for application windows. Under Pocket ``PC``, you should always use this function for creating the toolbar to be managed by the frame, so that wxWidgets can use a combined menubar and toolbar. Where you manage your own toolbars, create a :ref:`wx.ToolBar`  as usual.  







      .. seealso:: :meth:`CreateStatusBar` , :meth:`OnCreateToolBar` , :meth:`SetToolBar` , :meth:`GetToolBar`     








   .. method:: DoGiveHelp(self, text, show)

      Method used to show help string of the selected menu toolbar item.                  

      This method is called by the default  ``wxEVT_MENU_HIGHLIGHT``   event handler and also by  :ref:`wx.ToolBar`  to show the optional help string associated with the selected menu or toolbar item. It can be overridden if the default behaviour of showing this string in the frame status bar is not appropriate. 




      :param `text`: The help string to show, may be empty. The default implementation simply shows this string in the frame status bar (after remembering its previous text to restore it later).   
      :type `text`: string
      :param `show`: Whether the help should be shown or hidden. The default implementation restores the previously saved status bar text when it is ``False``.  
      :type `show`: bool






                  



      .. seealso:: :meth:`SetStatusBarPane`     








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: GetClientAreaOrigin(self)

      Returns the origin of the frame client area (in client coordinates).                  

      It may be different from (0, 0) if the frame has a toolbar.                  

      :rtype: :ref:`wx.Point`








   .. method:: GetMenuBar(self)

      Returns a pointer to the menubar currently associated with the frame (if any).                  

                

      :rtype: :ref:`wx.MenuBar`







      .. seealso:: :meth:`SetMenuBar` , :ref:`wx.MenuBar`, :ref:`wx.Menu`    








   .. method:: GetStatusBar(self)

      Returns a pointer to the status bar currently associated with the frame (if any).                  

                

      :rtype: :ref:`wx.StatusBar`







      .. seealso:: :meth:`CreateStatusBar` , :ref:`wx.StatusBar`    








   .. method:: GetStatusBarPane(self)

      Returns the status bar pane used to display menu and toolbar help.                  

                

      :rtype: `int`







      .. seealso:: :meth:`SetStatusBarPane`     








   .. method:: GetToolBar(self)

      Returns a pointer to the toolbar currently associated with the frame (if any).                  

                

      :rtype: :ref:`wx.ToolBar`







      .. seealso:: :meth:`CreateToolBar` , :ref:`wx.ToolBar`, :meth:`SetToolBar`     








   .. method:: OnCreateStatusBar(self, number, style, id, name)

      Virtual function called when a status bar is requested by :meth:`CreateStatusBar` .                  




      :param `number`: The number of fields to create.   
      :type `number`: int
      :param `style`: The window style. See :ref:`wx.StatusBar`  for a list of valid styles.   
      :type `style`: long
      :param `id`: The window identifier. If -1, an identifier will be chosen by wxWidgets.   
      :type `id`: wx.WindowID
      :param `name`: The window name.  
      :type `name`: string












      :rtype: :ref:`wx.StatusBar`



                  



      :returns: 

         A status bar object.  







      .. note:: 

         An application can override this function to return a different kind of status bar. The default implementation returns an instance of :ref:`wx.StatusBar`.  







      .. seealso:: :meth:`CreateStatusBar` , :ref:`wx.StatusBar`.   








   .. method:: OnCreateToolBar(self, style, id, name)

      Virtual function called when a toolbar is requested by :meth:`CreateToolBar` .                  




      :param `style`: The toolbar style. See :ref:`wx.ToolBar`  for a list of valid styles.   
      :type `style`: long
      :param `id`: The toolbar window identifier. If -1, an identifier will be chosen by wxWidgets.   
      :type `id`: wx.WindowID
      :param `name`: The toolbar window name.  
      :type `name`: string










      :rtype: :ref:`wx.ToolBar`



                  



      :returns: 

         A toolbar object.  







      .. note:: 

         An application can override this function to return a different kind of toolbar. The default implementation returns an instance of :ref:`wx.ToolBar`.  







      .. seealso:: :meth:`CreateToolBar` , :ref:`wx.ToolBar`.   








   .. method:: PopStatusText(self, number=0)




      :param `number`: 
      :type `number`: int







   .. method:: ProcessCommand(self, id)

      Simulate a menu command.                  




      :param `id`: The identifier for a menu item.   
      :type `id`: int






      :rtype: `bool`



                  





   .. method:: PushStatusText(self, text, number=0)




      :param `text`: 
      :type `text`: string
      :param `number`: 
      :type `number`: int







   .. method:: SetMenuBar(self, menuBar)

      Tells the frame to show the given menu bar.                  




      :param `menuBar`: The menu bar to associate with the frame.  
      :type `menuBar`: wx.MenuBar




                  



      .. note:: 

         If the frame is destroyed, the menu bar and its menus will be destroyed also, so do not delete the menu bar explicitly (except by resetting the frame's menu bar to another frame or ``None``). Under Windows, a size event is generated, so be sure to initialize data members properly before calling :meth:`SetMenuBar` . Note that on some platforms, it is not possible to call this function twice for the same frame object.  







      .. seealso:: :meth:`GetMenuBar` , :ref:`wx.MenuBar`, :ref:`wx.Menu`.   








   .. method:: SetStatusBar(self, statusBar)

      Associates a status bar with the frame.                  

      If `statusBar`  is ``None``, then the status bar, if present, is detached from the frame, but `not`  deleted. 

                


      :param `statusBar`: 
      :type `statusBar`: wx.StatusBar






      .. seealso:: :meth:`CreateStatusBar` , :ref:`wx.StatusBar`, :meth:`GetStatusBar`     








   .. method:: SetStatusBarPane(self, n)

      Set the status bar pane used to display menu and toolbar help.                  

      Using -1 disables help display.                  


      :param `n`: 
      :type `n`: int







   .. method:: SetStatusText(self, text, number=0)

      Sets the status bar text and updates the status bar display.                  

      This is a simple wrapper for :meth:`wx.StatusBar.SetStatusText`   which doesn't do anything if the frame has no status bar, i.e. :meth:`GetStatusBar`   returns ``None``. 




      :param `text`: The text for the status field.   
      :type `text`: string
      :param `number`: The status field (starting from zero).  
      :type `number`: int






                  



      .. note:: 

         Use an empty string to clear the status bar.  







      .. seealso:: :meth:`CreateStatusBar` , :ref:`wx.StatusBar`    








   .. method:: SetStatusWidths(self, widths)

      Sets the widths of the fields in the status bar.                  




      :param `widths`: Must contain an array of n integers, each of which is a status field width in pixels. A value of -1 indicates that the field is variable width; at least one field must be -1. You should delete this array after calling :meth:`SetStatusWidths` .  
      :type `widths`: list of integers






      




   .. method:: SetToolBar(self, toolBar)

      Associates a toolbar with the frame.                  


      :param `toolBar`: 
      :type `toolBar`: wx.ToolBar







   .. attribute:: MenuBar

      See :meth:`~wx.Frame.GetMenuBar` and :meth:`~wx.Frame.SetMenuBar`


   .. attribute:: StatusBar

      See :meth:`~wx.Frame.GetStatusBar` and :meth:`~wx.Frame.SetStatusBar`


   .. attribute:: StatusBarPane

      See :meth:`~wx.Frame.GetStatusBarPane` and :meth:`~wx.Frame.SetStatusBarPane`


   .. attribute:: ToolBar

      See :meth:`~wx.Frame.GetToolBar` and :meth:`~wx.Frame.SetToolBar`

