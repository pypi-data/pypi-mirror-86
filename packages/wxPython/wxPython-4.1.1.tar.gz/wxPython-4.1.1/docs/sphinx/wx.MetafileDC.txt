.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.MetafileDC:

==========================================================================================================================================
|phoenix_title|  **wx.MetafileDC**
==========================================================================================================================================

This is a type of device context that allows a metafile object to be created (Windows only), and has most of the characteristics of a normal  ** :ref:`wx.DC` ** .          

The :meth:`wx.MetafileDC.Close`   member must be called after drawing into the device context, to return a metafile. The only purpose for this at present is to allow the metafile to be copied to the clipboard (see :ref:`wx.Metafile`). 

Adding metafile capability to an application should be easy if you already write to a :ref:`wx.DC`; simply pass the :ref:`wx.MetafileDC`  to your drawing function instead. You may wish to conditionally compile this code so it is not compiled under X (although no harm will result if you leave it in). 

Note that a metafile saved to disk is in standard Windows metafile format, and cannot be imported into most applications. To make it importable, call the function :ref:`wx.MakeMetafilePlaceable`  after closing your disk-based metafile device context. 







         



.. seealso:: :ref:`wx.Metafile`, :ref:`wx.DC`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>MetafileDC</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.MetafileDC_inheritance.png" alt="Inheritance diagram of MetafileDC" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.MetafileDC.html" title="wx.MetafileDC" alt="" coords="5,160,121,189"/> <area shape="rect" id="node2" href="wx.DC.html" title="wx.DC" alt="" coords="27,83,99,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="20,5,107,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.MetafileDC.__init__`                                                  Constructor.
:meth:`~wx.MetafileDC.Close`                                                     This must be called after the device context is finished with.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.MetafileDC(DC)

   **Possible constructors**::

       MetafileDC(filename=EmptyString)
       
   
   This is a type of device context that allows a metafile object to be
   created (Windows only), and has most of the characteristics of a
   normal DC.



   .. method:: __init__(self, filename=EmptyString)

      Constructor.                  

      If no filename is passed, the metafile is created in memory.                  


      :param `filename`: 
      :type `filename`: string







   .. method:: Close(self)

      This must be called after the device context is finished with.                  

      A metafile is returned, and ownership of it passes to the calling application (so it should be destroyed explicitly).                  

      :rtype: :ref:`wx.Metafile`







