.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.pybusyinfo

.. highlight:: python



.. _wx.lib.agw.pybusyinfo.PyBusyInfo:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.pybusyinfo.PyBusyInfo**
==========================================================================================================================================

Constructs a busy info window as child of parent and displays a message in it.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>PyBusyInfo</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.pybusyinfo.PyBusyInfo_inheritance.png" alt="Inheritance diagram of PyBusyInfo" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.pybusyinfo.PyBusyInfo.html" title="wx.lib.agw.pybusyinfo.PyBusyInfo" alt="" coords="5,5,249,35"/> </map> 
   </p>
   </div>

|


|appearance| Control Appearance
===============================

|

.. figure:: _static/images/widgets/fullsize/wxmsw/wx.lib.agw.pybusyinfo.pybusyinfo.png
   :alt: wxMSW
   :figclass: floatleft

   **wxMSW**


.. figure:: _static/images/widgets/fullsize/wxmac/../no_appearance.png
   :alt: wxMAC
   :figclass: floatright

   **wxMAC**


.. figure:: _static/images/widgets/fullsize/wxgtk/wx.lib.agw.pybusyinfo.pybusyinfo.png
   :alt: wxGTK
   :figclass: floatcenter

   **wxGTK**


|




|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.pybusyinfo.PyBusyInfo.__init__`                               Default class constructor.
:meth:`~wx.lib.agw.pybusyinfo.PyBusyInfo.Show`                                   Shows or hides the window.
:meth:`~wx.lib.agw.pybusyinfo.PyBusyInfo.Update`                                 Calling this method immediately repaints the invalidated area of the window and all of its
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: PyBusyInfo(object)

   Constructs a busy info window as child of parent and displays a message in it.

   .. method:: __init__(self, message, parent=None, title=_("Busy"), icon=wx.NullBitmap)

      Default class constructor.
      
      :param `parent`: the :class:`PyBusyInfo` parent;
      :param `message`: the message to display in the :class:`PyBusyInfo`;
      :param `title`: the main :class:`PyBusyInfo` title;
      :param `icon`: an icon to draw as the frame icon, an instance of :class:`wx.Bitmap`.
      
      :note: If `parent` is not ``None`` you must ensure that it is not closed
       while the busy info is shown.


   .. method:: Show(self, show=True)

      Shows or hides the window.
      
      You may need to call `Raise` for a top level window if you want to bring it to
      top, although this is not needed if :meth:`PyBusyInfo.Show` is called immediately after the frame creation.
      
      :param bool `show`: ``True`` to show the :class:`PyBusyInfo` frame, ``False`` to hide it.
      
      :return: ``True`` if the window has been shown or hidden or ``False`` if nothing was done
       because it already was in the requested state.
      
      .. note::
      
         Notice that the default state of newly created top level windows is hidden (to allow
         you to create their contents without flicker) unlike for all the other, not derived from
         :class:`TopLevelWindow`, windows that are by default created in the shown state.
      
      
      .. versionadded:: 0.9.5


   .. method:: Update(self)

      Calling this method immediately repaints the invalidated area of the window and all of its
      children recursively (this normally only happens when the flow of control returns to the
      event loop).
      
      :note: Notice that this function doesn't invalidate any area of the window so nothing happens
       if nothing has been invalidated (i.e. marked as requiring a redraw). Use `Refresh` first if
       you want to immediately redraw the window unconditionally.
      
      .. versionadded:: 0.9.5


