.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.html.HtmlHelpWindow:

==========================================================================================================================================
|phoenix_title|  **wx.html.HtmlHelpWindow**
==========================================================================================================================================

This class is used by :ref:`wx.html.HtmlHelpController`  to display help within a frame or dialog, but you can use it yourself to create an embedded HTML help window.          

For example: ::

        def EmbedHTML(self):
            # self.embeddedHelpWindow is a wx.html.HtmlHelpWindow
            # self.embeddedHtmlHelp is a wx.html.HtmlHelpController

            # Create embedded HTML Help window
            self.embeddedHelpWindow = wx.html.HtmlHelpWindow
            self.embeddedHtmlHelp.UseConfig(config, rootPath) # Set your own config object here
            self.embeddedHtmlHelp.SetHelpWindow(self.embeddedHelpWindow)
            self.embeddedHelpWindow.Create(self, wx.ID_ANY, wx.DefaultPosition, self.GetClientSize(),
                                           wx.TAB_TRAVERSAL | wx.BORDER_NONE, wx.html.HF_DEFAULT_STYLE)
            self.embeddedHtmlHelp.AddBook("doc.zip")



You should pass the style ``wx.html.HF_EMBEDDED`` to the style parameter of :ref:`wx.html.HtmlHelpController`  to allow the embedded window to be destroyed independently of the help controller. 









|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>HtmlHelpWindow</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.html.HtmlHelpWindow_inheritance.png" alt="Inheritance diagram of HtmlHelpWindow" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.html.HtmlHelpWindow.html" title="wx.html.HtmlHelpWindow" alt="" coords="12,237,205,267"/> <area shape="rect" id="node2" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node3" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node5" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.html.HtmlHelpWindow.__init__`                                         
:meth:`~wx.html.HtmlHelpWindow.AddToolbarButtons`                                You may override this virtual method to add more buttons to the help window's toolbar.
:meth:`~wx.html.HtmlHelpWindow.Create`                                           Creates the help window.
:meth:`~wx.html.HtmlHelpWindow.CreateContents`                                   Creates contents panel.
:meth:`~wx.html.HtmlHelpWindow.CreateIndex`                                      Creates index panel.
:meth:`~wx.html.HtmlHelpWindow.CreateSearch`                                     Creates search panel.
:meth:`~wx.html.HtmlHelpWindow.Display`                                          Displays page x.
:meth:`~wx.html.HtmlHelpWindow.DisplayContents`                                  Displays contents panel.
:meth:`~wx.html.HtmlHelpWindow.DisplayIndex`                                     Displays index panel.
:meth:`~wx.html.HtmlHelpWindow.GetClassDefaultAttributes`                        
:meth:`~wx.html.HtmlHelpWindow.GetController`                                    
:meth:`~wx.html.HtmlHelpWindow.GetData`                                          Returns the :ref:`wx.html.HtmlHelpData`  object, which is usually a pointer to the controller's data.
:meth:`~wx.html.HtmlHelpWindow.KeywordSearch`                                    Search for given keyword.
:meth:`~wx.html.HtmlHelpWindow.ReadCustomization`                                Reads the user's settings for this window.
:meth:`~wx.html.HtmlHelpWindow.RefreshLists`                                     Refresh all panels.
:meth:`~wx.html.HtmlHelpWindow.SetController`                                    
:meth:`~wx.html.HtmlHelpWindow.UseConfig`                                        Associates a Config object with the help window.
:meth:`~wx.html.HtmlHelpWindow.WriteCustomization`                               Saves the user's settings for this window.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.html.HtmlHelpWindow.Controller`                                       See :meth:`~wx.html.HtmlHelpWindow.GetController` and :meth:`~wx.html.HtmlHelpWindow.SetController`
:attr:`~wx.html.HtmlHelpWindow.Data`                                             See :meth:`~wx.html.HtmlHelpWindow.GetData`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.html.HtmlHelpWindow(Window)

   **Possible constructors**::

       HtmlHelpWindow(data=None)
       
       HtmlHelpWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
                      style=TAB_TRAVERSAL|BORDER_NONE, helpStyle=HF_DEFAULT_STYLE, data=None)
       
   
   This class is used by HtmlHelpController to display help within a
   frame or dialog, but you can use it yourself to create an embedded
   HTML help window.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, data=None)`
      
      
      
      
      :param `data`: 
      :type `data`: wx.html.HtmlHelpData
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=TAB_TRAVERSAL|BORDER_NONE, helpStyle=HF_DEFAULT_STYLE, data=None)`
      
      Constructor.                  
      
      For the values of `helpStyle`, please see the documentation for :ref:`wx.html.HtmlHelpController`.                  
      
      
      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: int
      :param `helpStyle`: 
      :type `helpStyle`: int
      :param `data`: 
      :type `data`: wx.html.HtmlHelpData
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AddToolbarButtons(self, toolBar, style)

      You may override this virtual method to add more buttons to the help window's toolbar.                  

      `toolBar`  is a pointer to the toolbar and `style`  is the style flag as passed to the :meth:`Create`   method. 

      :meth:`wx.ToolBar.Realize`   is called immediately after returning from this function. See  ``samples/html/helpview``   for an example.                   


      :param `toolBar`: 
      :type `toolBar`: wx.ToolBar
      :param `style`: 
      :type `style`: int







   .. method:: Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=TAB_TRAVERSAL|BORDER_NONE, helpStyle=HF_DEFAULT_STYLE)

      Creates the help window.                  

      See :ref:`the constructor <wx.html.HtmlHelpWindow>`  for a description of the parameters.                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: int
      :param `helpStyle`: 
      :type `helpStyle`: int




      :rtype: `bool`








   .. method:: CreateContents(self)

      Creates contents panel.                  

      (May take some time.)                   





   .. method:: CreateIndex(self)

      Creates index panel.                  

      (May take some time.)                   





   .. method:: CreateSearch(self)

      Creates search panel.                   





   .. method:: Display(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **Display** `(self, x)`
      
      Displays page x.                  
      
      If not found it will give the user the choice of searching books. Looking for the page runs in these steps:
      
      - try to locate file named x (if x is for example "doc/howto.htm") 
      - try to open starting page of book x 
      - try to find x in contents (if x is for example "How To ...") 
      - try to find x in index (if x is for example "How To ...")  
      
      
                       
      
      
      :param `x`: 
      :type `x`: string
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **Display** `(self, id)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
      
      
      :param `id`: 
      :type `id`: int
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: DisplayContents(self)

      Displays contents panel.                  

      :rtype: `bool`








   .. method:: DisplayIndex(self)

      Displays index panel.                  

      :rtype: `bool`








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`VisualAttributes`








   .. method:: GetController(self)



      :rtype: :ref:`wx.html.HtmlHelpController`








   .. method:: GetData(self)

      Returns the :ref:`wx.html.HtmlHelpData`  object, which is usually a pointer to the controller's data.                  

      :rtype: :ref:`wx.html.HtmlHelpData`








   .. method:: KeywordSearch(self, keyword, mode=HELP_SEARCH_ALL)

      Search for given keyword.                  

      Optionally it searches through the index (mode =  ``HELP_SEARCH_INDEX`` ), default the content (mode =   ``HELP_SEARCH_ALL`` ).                   


      :param `keyword`: 
      :type `keyword`: string
      :param `mode`: 
      :type `mode`: wx.HelpSearchMode




      :rtype: `bool`








   .. method:: ReadCustomization(self, cfg, path=EmptyString)

      Reads the user's settings for this window.                  

                


      :param `cfg`: 
      :type `cfg`: wx.ConfigBase
      :param `path`: 
      :type `path`: string






      .. seealso:: :meth:`wx.html.HtmlHelpController.ReadCustomization`     








   .. method:: RefreshLists(self)

      Refresh all panels.                  

      This is necessary if a new book was added.                   





   .. method:: SetController(self, controller)




      :param `controller`: 
      :type `controller`: wx.html.HtmlHelpController







   .. method:: UseConfig(self, config, rootpath=EmptyString)

      Associates a Config object with the help window.                  

      It is recommended that you use :meth:`wx.html.HtmlHelpController.UseConfig`   instead.                  


      :param `config`: 
      :type `config`: wx.ConfigBase
      :param `rootpath`: 
      :type `rootpath`: string







   .. method:: WriteCustomization(self, cfg, path=EmptyString)

      Saves the user's settings for this window.                  

                


      :param `cfg`: 
      :type `cfg`: wx.ConfigBase
      :param `path`: 
      :type `path`: string






      .. seealso:: :meth:`wx.html.HtmlHelpController.WriteCustomization`     








   .. attribute:: Controller

      See :meth:`~wx.html.HtmlHelpWindow.GetController` and :meth:`~wx.html.HtmlHelpWindow.SetController`


   .. attribute:: Data

      See :meth:`~wx.html.HtmlHelpWindow.GetData`

