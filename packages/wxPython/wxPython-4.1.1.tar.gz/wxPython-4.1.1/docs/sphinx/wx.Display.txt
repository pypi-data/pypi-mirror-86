.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.Display:

==========================================================================================================================================
|phoenix_title|  **wx.Display**
==========================================================================================================================================

Determines the sizes and locations of displays connected to the system.          









|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Display</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.Display_inheritance.png" alt="Inheritance diagram of Display" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Display.html" title="wx.Display" alt="" coords="5,5,100,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.Display.__init__`                                                     Default constructor creating :ref:`wx.Display`  object representing the primary display.
:meth:`~wx.Display.ChangeMode`                                                   Changes the video mode of this display to the mode specified in the mode parameter.
:meth:`~wx.Display.GetClientArea`                                                Returns the client area of the display.
:meth:`~wx.Display.GetCount`                                                     Returns the number of connected displays.
:meth:`~wx.Display.GetCurrentMode`                                               Returns the current video mode that this display is in.
:meth:`~wx.Display.GetFromPoint`                                                 Returns the index of the display on which the given point lies, or  ``NOT_FOUND``   if the point is not on any connected display.
:meth:`~wx.Display.GetFromWindow`                                                Returns the index of the display on which the given window lies.
:meth:`~wx.Display.GetGeometry`                                                  Returns the bounding rectangle of the display whose index was passed to the constructor.
:meth:`~wx.Display.GetModes`                                                     Fills and returns an array with all the video modes that are supported by this display, or video modes that are supported by this display and match the mode parameter (if mode is not DefaultVideoMode).
:meth:`~wx.Display.GetName`                                                      Returns the display's name.
:meth:`~wx.Display.GetPPI`                                                       Returns display resolution in pixels per inch.
:meth:`~wx.Display.GetScaleFactor`                                               Returns scaling factor used by this display.
:meth:`~wx.Display.GetStdPPI`                                                    Returns default display resolution for the current platform as :ref:`wx.Size`.
:meth:`~wx.Display.GetStdPPIValue`                                               Returns default display resolution for the current platform in pixels per inch.
:meth:`~wx.Display.IsPrimary`                                                    Returns ``True`` if the display is the primary display.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.Display.ClientArea`                                                   See :meth:`~wx.Display.GetClientArea`
:attr:`~wx.Display.CurrentMode`                                                  See :meth:`~wx.Display.GetCurrentMode`
:attr:`~wx.Display.Geometry`                                                     See :meth:`~wx.Display.GetGeometry`
:attr:`~wx.Display.Name`                                                         See :meth:`~wx.Display.GetName`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.Display(object)

   **Possible constructors**::

       Display()
       
       Display(index)
       
       Display(window)
       
   
   Determines the sizes and locations of displays connected to the
   system.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor creating :ref:`wx.Display`  object representing the primary display.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, index)`
      
      Constructor, setting up a :ref:`wx.Display`  instance with the specified display.                  
      
      
      
      
      :param `index`: The index of the display to use. This must be non-negative and lower than the value returned by :meth:`GetCount` .   
      :type `index`: int
      
      
      
      
                        
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, window)`
      
      Constructor creating the display object associated with the given window.                  
      
      This is the most convenient way of finding the display on which the given window is shown while falling back to the default display if it is not shown at all or positioned outside of any display. 
      
      
      
      
      :param `window`: A valid, i.e. non-null, window.  
      :type `window`: wx.Window
      
      
      
      
                        
      
      
      
      .. versionadded:: 4.1/wxWidgets-3.1.2  
           
      
      
      
      
      
      
      
      .. seealso:: :meth:`GetFromWindow`   
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: ChangeMode(self, mode=DefaultVideoMode)

      Changes the video mode of this display to the mode specified in the mode parameter.                  

      If DefaultVideoMode is passed in as the mode parameter, the defined behaviour is that :ref:`wx.Display`  will reset the video mode to the default mode used by the display. On Windows, the behaviour is normal. However, there are differences on other platforms. On Unix variations using X11 extensions it should behave as defined, but some irregularities may occur.                  


      :param `mode`: 
      :type `mode`: wx.VideoMode




      :rtype: `bool`








   .. method:: GetClientArea(self)

      Returns the client area of the display.                  

      The client area is the part of the display available for the normal (non full screen) windows, usually it is the same as :meth:`GetGeometry`   but it could be less if there is a taskbar (or equivalent) on this display.                  

      :rtype: :ref:`wx.Rect`








   .. staticmethod:: GetCount()

      Returns the number of connected displays.                  

      :rtype: `int`








   .. method:: GetCurrentMode(self)

      Returns the current video mode that this display is in.                  

      :rtype: :ref:`wx.VideoMode`








   .. staticmethod:: GetFromPoint(pt)

      Returns the index of the display on which the given point lies, or  ``NOT_FOUND``   if the point is not on any connected display.                   




      :param `pt`: The point to locate.   
      :type `pt`: wx.Point






      :rtype: `int`



                  





   .. staticmethod:: GetFromWindow(win)

      Returns the index of the display on which the given window lies.                  

      If the window is on more than one display it gets the display that overlaps the window the most. 

      Returns  ``NOT_FOUND``   if the window is not on any connected display. 




      :param `win`: The window to locate.   
      :type `win`: wx.Window






      :rtype: `int`



                  





   .. method:: GetGeometry(self)

      Returns the bounding rectangle of the display whose index was passed to the constructor.                  

                

      :rtype: :ref:`wx.Rect`







      .. seealso:: :meth:`GetClientArea` , :ref:`wx.DisplaySize`    








   .. method:: GetModes(self, mode=DefaultVideoMode)

      Fills and returns an array with all the video modes that are supported by this display, or video modes that are supported by this display and match the mode parameter (if mode is not DefaultVideoMode).                  


      :param `mode`: 
      :type `mode`: wx.VideoMode




      :rtype: :ref:`ArrayVideoModes`








   .. method:: GetName(self)

      Returns the display's name.                  

      The returned value is currently an empty string under all platforms except MSW.                  

      :rtype: `string`








   .. method:: GetPPI(self)

      Returns display resolution in pixels per inch.                  

      Horizontal and vertical resolution are returned in  ``x``   and   ``y``   components of the  :ref:`wx.Size`  object respectively. 

      If the resolution information is not available, returns::

           wx.Size(0, 0)



                

      :rtype: :ref:`wx.Size`







      .. versionadded:: 4.1/wxWidgets-3.1.2  
     








   .. method:: GetScaleFactor(self)

      Returns scaling factor used by this display.                  

      The scaling factor is the ratio between :meth:`GetPPI`   and :meth:`GetStdPPI`   (it is implicitly assumed that this ratio is the same for both horizontal and vertical components). 

                

      :rtype: `float`







      .. versionadded:: 4.1/wxWidgets-3.1.5  
     







      .. seealso:: :meth:`wx.Window.GetContentScaleFactor` , :meth:`wx.Window.GetDPIScaleFactor`   








   .. staticmethod:: GetStdPPI()

      Returns default display resolution for the current platform as :ref:`wx.Size`.                  

      This function is equivalent to constructing :ref:`wx.Size`  object with both components set to :meth:`GetStdPPIValue` . 

                

      :rtype: :ref:`wx.Size`







      .. versionadded:: 4.1/wxWidgets-3.1.5  
     








   .. staticmethod:: GetStdPPIValue()

      Returns default display resolution for the current platform in pixels per inch.                  

      This function mostly used internally, use :meth:`GetPPI`   to get the actual display resolution. 

      Currently the standard ``PPI`` is the same in both horizontal and vertical directions on all platforms and its value is 96 everywhere except under Apple devices (those running macOS, iOS, watchOS etc), where it is 72. 

                

      :rtype: `int`







      .. versionadded:: 4.1/wxWidgets-3.1.5  
     







      .. seealso:: :meth:`GetStdPPI`   








   .. method:: IsPrimary(self)

      Returns ``True`` if the display is the primary display.                  

      The primary display is the one whose index is 0.                  

      :rtype: `bool`








   .. attribute:: ClientArea

      See :meth:`~wx.Display.GetClientArea`


   .. attribute:: CurrentMode

      See :meth:`~wx.Display.GetCurrentMode`


   .. attribute:: Geometry

      See :meth:`~wx.Display.GetGeometry`


   .. attribute:: Name

      See :meth:`~wx.Display.GetName`

