.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.adv.HyperlinkCtrl:

==========================================================================================================================================
|phoenix_title|  **wx.adv.HyperlinkCtrl**
==========================================================================================================================================

This class shows a static text element which links to an URL.          

Appearance and behaviour is completely customizable. 

In fact, when the user clicks on the hyperlink, a :ref:`wx.adv.HyperlinkEvent`  is sent but if that event is not handled (or it's skipped; see :meth:`wx.Event.Skip` ), then a call to :ref:`wx.LaunchDefaultBrowser`  is done with the hyperlink's URL. 

Note that standard :ref:`wx.Window`  functions like :meth:`wx.Window.SetBackgroundColour` , :meth:`wx.Window.SetFont` , :meth:`wx.Window.SetCursor` , :meth:`wx.Window.SetLabel`   can be used to customize appearance of the hyperlink. 





.. _HyperlinkCtrl-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  

- ``wx.adv.HL_ALIGN_LEFT``: Align the text to the left.  
- ``wx.adv.HL_ALIGN_RIGHT``: Align the text to the right. This style is not supported under Windows.  
- ``wx.adv.HL_ALIGN_CENTRE``: Center the text (horizontally). This style is not supported under Windows.  
- ``wx.adv.HL_CONTEXTMENU``: Pop up a context menu when the hyperlink is right-clicked. The context menu contains a "Copy URL" menu item which is automatically handled by the hyperlink and which just copies in the clipboard the URL (not the label) of the control.  
- ``wx.adv.HL_DEFAULT_STYLE``: The default style for :ref:`wx.adv.HyperlinkCtrl`: BORDER_NONE|wxHL_CONTEXTMENU|wxHL_ALIGN_CENTRE.  








.. _HyperlinkCtrl-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.adv.HyperlinkEvent` parameter.


- EVT_HYPERLINK: The hyperlink was (left) clicked. If this event is not handled in user's code (or it's skipped; see :meth:`wx.Event.Skip` ), then a call to LaunchDefaultBrowser is done with the hyperlink's URL.  

Currently this class is implemented using native support in wxGTK and wxMSW and a generic version is used by the other ports.








         



.. seealso:: URL, :ref:`wx.adv.HyperlinkEvent`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>HyperlinkCtrl</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.adv.HyperlinkCtrl_inheritance.png" alt="Inheritance diagram of HyperlinkCtrl" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.adv.HyperlinkCtrl.html" title="wx.adv.HyperlinkCtrl" alt="" coords="29,315,188,344"/> <area shape="rect" id="node2" href="wx.Control.html" title="wx.Control" alt="" coords="63,237,155,267"/> <area shape="rect" id="node3" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node4" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node6" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|appearance| Control Appearance
===============================

|

.. figure:: _static/images/widgets/fullsize/wxmsw/wx.adv.hyperlinkctrl.png
   :alt: wxMSW
   :figclass: floatleft

   **wxMSW**


.. figure:: _static/images/widgets/fullsize/wxmac/wx.adv.hyperlinkctrl.png
   :alt: wxMAC
   :figclass: floatright

   **wxMAC**


.. figure:: _static/images/widgets/fullsize/wxgtk/wx.adv.hyperlinkctrl.png
   :alt: wxGTK
   :figclass: floatcenter

   **wxGTK**


|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.adv.HyperlinkCtrl.__init__`                                           
:meth:`~wx.adv.HyperlinkCtrl.Create`                                             Creates the hyperlink control.
:meth:`~wx.adv.HyperlinkCtrl.GetClassDefaultAttributes`                          
:meth:`~wx.adv.HyperlinkCtrl.GetHoverColour`                                     Returns the colour used to print the label of the hyperlink when the mouse is over the control.
:meth:`~wx.adv.HyperlinkCtrl.GetNormalColour`                                    Returns the colour used to print the label when the link has never been clicked before (i.e. the link has not been `visited`) and the mouse is not over the control.
:meth:`~wx.adv.HyperlinkCtrl.GetURL`                                             Returns the URL associated with the hyperlink.
:meth:`~wx.adv.HyperlinkCtrl.GetVisited`                                         Returns ``True`` if the hyperlink has already been clicked by the user at least one time.
:meth:`~wx.adv.HyperlinkCtrl.GetVisitedColour`                                   Returns the colour used to print the label when the mouse is not over the control and the link has already been clicked before (i.e. the link has been `visited`).
:meth:`~wx.adv.HyperlinkCtrl.SetHoverColour`                                     Sets the colour used to print the label of the hyperlink when the mouse is over the control.
:meth:`~wx.adv.HyperlinkCtrl.SetNormalColour`                                    Sets the colour used to print the label when the link has never been clicked before (i.e. the link has not been `visited`) and the mouse is not over the control.
:meth:`~wx.adv.HyperlinkCtrl.SetURL`                                             Sets the URL associated with the hyperlink.
:meth:`~wx.adv.HyperlinkCtrl.SetVisited`                                         Marks the hyperlink as visited (see :meth:`wx.adv.HyperlinkCtrl.SetVisitedColour` ).
:meth:`~wx.adv.HyperlinkCtrl.SetVisitedColour`                                   Sets the colour used to print the label when the mouse is not over the control and the link has already been clicked before (i.e. the link has been `visited`).
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.adv.HyperlinkCtrl.HoverColour`                                        See :meth:`~wx.adv.HyperlinkCtrl.GetHoverColour` and :meth:`~wx.adv.HyperlinkCtrl.SetHoverColour`
:attr:`~wx.adv.HyperlinkCtrl.NormalColour`                                       See :meth:`~wx.adv.HyperlinkCtrl.GetNormalColour` and :meth:`~wx.adv.HyperlinkCtrl.SetNormalColour`
:attr:`~wx.adv.HyperlinkCtrl.URL`                                                See :meth:`~wx.adv.HyperlinkCtrl.GetURL` and :meth:`~wx.adv.HyperlinkCtrl.SetURL`
:attr:`~wx.adv.HyperlinkCtrl.Visited`                                            See :meth:`~wx.adv.HyperlinkCtrl.GetVisited` and :meth:`~wx.adv.HyperlinkCtrl.SetVisited`
:attr:`~wx.adv.HyperlinkCtrl.VisitedColour`                                      See :meth:`~wx.adv.HyperlinkCtrl.GetVisitedColour` and :meth:`~wx.adv.HyperlinkCtrl.SetVisitedColour`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.adv.HyperlinkCtrl(Control)

   **Possible constructors**::

       HyperlinkCtrl()
       
       HyperlinkCtrl(parent, id=ID_ANY, label="", url="", pos=DefaultPosition,
                     size=DefaultSize, style=HL_DEFAULT_STYLE, name=HyperlinkCtrlNameStr)
       
   
   This class shows a static text element which links to an URL.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, label=EmptyString, url=EmptyString, pos=DefaultPosition, size=DefaultSize, style=HL_DEFAULT_STYLE, name=HyperlinkCtrlNameStr)`
      
      Constructor.                  
      
      See :meth:`Create`   for more info.                  
      
      
      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `label`: 
      :type `label`: string
      :param `url`: 
      :type `url`: string
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Create(self, parent, id=ID_ANY, label=EmptyString, url=EmptyString, pos=DefaultPosition, size=DefaultSize, style=HL_DEFAULT_STYLE, name=HyperlinkCtrlNameStr)

      Creates the hyperlink control.                  




      :param `parent`: Parent window. Must not be ``None``.   
      :type `parent`: wx.Window
      :param `id`: Window identifier. A value of ``wx.ID_ANY`` indicates a default value.   
      :type `id`: wx.WindowID
      :param `label`: The label of the hyperlink.   
      :type `label`: string
      :param `url`: The URL associated with the given label.   
      :type `url`: string
      :param `pos`: Window position.   
      :type `pos`: wx.Point
      :param `size`: Window size. If the DefaultSize is specified then the window is sized appropriately.   
      :type `size`: wx.Size
      :param `style`: Window style. See :ref:`wx.adv.HyperlinkCtrl`.   
      :type `style`: long
      :param `name`: Window name.   
      :type `name`: string




















      :rtype: `bool`



                  





   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`VisualAttributes`








   .. method:: GetHoverColour(self)

      Returns the colour used to print the label of the hyperlink when the mouse is over the control.                  

      :rtype: :ref:`Colour`








   .. method:: GetNormalColour(self)

      Returns the colour used to print the label when the link has never been clicked before (i.e. the link has not been `visited`) and the mouse is not over the control.                  

      :rtype: :ref:`Colour`








   .. method:: GetURL(self)

      Returns the URL associated with the hyperlink.                  

      :rtype: `string`








   .. method:: GetVisited(self)

      Returns ``True`` if the hyperlink has already been clicked by the user at least one time.                  

      :rtype: `bool`








   .. method:: GetVisitedColour(self)

      Returns the colour used to print the label when the mouse is not over the control and the link has already been clicked before (i.e. the link has been `visited`).                  

      :rtype: :ref:`Colour`








   .. method:: SetHoverColour(self, colour)

      Sets the colour used to print the label of the hyperlink when the mouse is over the control.                  


      :param `colour`: 
      :type `colour`: wx.Colour







   .. method:: SetNormalColour(self, colour)

      Sets the colour used to print the label when the link has never been clicked before (i.e. the link has not been `visited`) and the mouse is not over the control.                  


      :param `colour`: 
      :type `colour`: wx.Colour







   .. method:: SetURL(self, url)

      Sets the URL associated with the hyperlink.                  


      :param `url`: 
      :type `url`: string







   .. method:: SetVisited(self, visited=True)

      Marks the hyperlink as visited (see :meth:`wx.adv.HyperlinkCtrl.SetVisitedColour` ).                  


      :param `visited`: 
      :type `visited`: bool







   .. method:: SetVisitedColour(self, colour)

      Sets the colour used to print the label when the mouse is not over the control and the link has already been clicked before (i.e. the link has been `visited`).                  


      :param `colour`: 
      :type `colour`: wx.Colour







   .. attribute:: HoverColour

      See :meth:`~wx.adv.HyperlinkCtrl.GetHoverColour` and :meth:`~wx.adv.HyperlinkCtrl.SetHoverColour`


   .. attribute:: NormalColour

      See :meth:`~wx.adv.HyperlinkCtrl.GetNormalColour` and :meth:`~wx.adv.HyperlinkCtrl.SetNormalColour`


   .. attribute:: URL

      See :meth:`~wx.adv.HyperlinkCtrl.GetURL` and :meth:`~wx.adv.HyperlinkCtrl.SetURL`


   .. attribute:: Visited

      See :meth:`~wx.adv.HyperlinkCtrl.GetVisited` and :meth:`~wx.adv.HyperlinkCtrl.SetVisited`


   .. attribute:: VisitedColour

      See :meth:`~wx.adv.HyperlinkCtrl.GetVisitedColour` and :meth:`~wx.adv.HyperlinkCtrl.SetVisitedColour`

