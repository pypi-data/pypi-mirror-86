.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.throbber

.. highlight:: python



.. _wx.lib.throbber.UpdateThrobberEvent:

==========================================================================================================================================
|phoenix_title|  **wx.lib.throbber.UpdateThrobberEvent**
==========================================================================================================================================

PyEvent(id=0, eventType=wxEVT_NULL)

:class:`PyEvent` can be used as a base class for implementing custom
event types in Python. You should derive from this class instead
of :class:`Event` because this class is Python-aware and is able to
transport its Python bits safely through the wxWidgets event
system and have them still be there when the event handler is
invoked. Note that since :class:`PyEvent` is taking care of preserving
the extra attributes that have been set then you do not need to
override the Clone method in your derived classes.

:see: :class:`PyCommandEvent`



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>UpdateThrobberEvent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.throbber.UpdateThrobberEvent_inheritance.png" alt="Inheritance diagram of UpdateThrobberEvent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.throbber.UpdateThrobberEvent.html" title="wx.lib.throbber.UpdateThrobberEvent" alt="" coords="5,237,271,267"/> <area shape="rect" id="node2" href="wx.PyEvent.html" title="wx.PyEvent" alt="" coords="89,160,187,189"/> <area shape="rect" id="node3" href="wx.Event.html" title="wx.Event" alt="" coords="97,83,179,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="95,5,181,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.PyEvent`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.throbber.UpdateThrobberEvent.__init__`                            Initialize self.  See help(type(self)) for accurate signature.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: UpdateThrobberEvent(wx.PyEvent)

   PyEvent(id=0, eventType=wxEVT_NULL)
   
   :class:`PyEvent` can be used as a base class for implementing custom
   event types in Python. You should derive from this class instead
   of :class:`Event` because this class is Python-aware and is able to
   transport its Python bits safely through the wxWidgets event
   system and have them still be there when the event handler is
   invoked. Note that since :class:`PyEvent` is taking care of preserving
   the extra attributes that have been set then you do not need to
   override the Clone method in your derived classes.
   
   :see: :class:`PyCommandEvent`

   .. method:: __init__(self)

      Initialize self.  See help(type(self)) for accurate signature.


