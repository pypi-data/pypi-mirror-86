.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.MessageDialog:

==========================================================================================================================================
|phoenix_title|  **wx.MessageDialog**
==========================================================================================================================================

This class represents a dialog that shows a single or multi-line message, with a choice of ``wx.OK``, Yes, No and Cancel buttons.          





.. _MessageDialog-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  

- ``wx.OK``: Puts an Ok button in the message box. May be combined with  ``CANCEL`` .   
- ``wx.CANCEL``: Puts a Cancel button in the message box. Must be combined with either  ``OK``   or   ``YES_NO`` .   
- ``wx.YES_NO``: Puts Yes and No buttons in the message box. It is recommended to always use  ``CANCEL``   with this style as otherwise the message box won't have a close button under wxMSW and the user will be forced to answer it.   
- ``wx.HELP``: Puts a Help button to the message box. This button can have special appearance or be specially positioned if its label is not changed from the default one. Notice that using this button is not supported when showing a message box from non-main thread in OSX/Cocoa. Available since wxWidgets 2.9.3.  
- ``wx.NO_DEFAULT``: Makes the "No" button default, can only be used with  ``YES_NO`` .   
- ``wx.CANCEL_DEFAULT``: Makes the "Cancel" button default, can only be used with  ``CANCEL`` . This style is currently not supported (and ignored) in wxOSX.   
- ``wx.YES_DEFAULT``: Makes the "Yes" button default, this is the default behaviour and this flag exists solely for symmetry with  ``NO_DEFAULT`` .   
- ``wx.OK_DEFAULT``: Makes the "``wx.OK``" button default, this is the default behaviour and this flag exists solely for symmetry with  ``CANCEL_DEFAULT`` .   
- ``wx.ICON_NONE``: Displays no icon in the dialog if possible (an icon might still be displayed if the current platform mandates its use). This style may be used to prevent the dialog from using the default icon based on  ``YES_NO``   presence as explained in   ``ICON_QUESTION``   and   ``ICON_INFORMATION``   documentation below.   
- ``wx.ICON_ERROR``: Displays an error icon in the dialog.  
- ``wx.ICON_WARNING``: Displays a warning icon in the dialog. This style should be used for informative warnings or, in combination with  ``YES_NO``   or   ``CANCEL`` , for questions that have potentially serious consequences (caution icon is used on macOS in this case).   
- ``wx.ICON_QUESTION``: Displays a question mark symbol. This icon is automatically used with  ``YES_NO``   so it's usually unnecessary to specify it explicitly. This style is not supported for message dialogs under wxMSW when a task dialog is used to implement them (i.e. when running under Windows Vista or later) because  `Microsoft guidelines <https://docs.microsoft.com/en-us/windows/desktop/uxguide/mess-confirm>`_  indicate that no icon should be used for routine confirmations. If it is specified, no icon will be displayed.  
- ``wx.ICON_INFORMATION``: Displays an information symbol. This icon is used by default if  ``YES_NO``   is not given so it is usually unnecessary to specify it explicitly.   
- ``wx.ICON_EXCLAMATION``: Alias for  ``ICON_WARNING`` .   
- ``wx.ICON_HAND``: Alias for  ``ICON_ERROR`` .   
- ``wx.ICON_AUTH_NEEDED``: Displays an authentication needed symbol. This style is only supported for message dialogs under wxMSW when a task dialog is used to implement them (i.e. when running under Windows Vista or later). In other cases the default icon selection logic will be used. Note this can be combined with other styles to provide a fallback. For instance, using ``wx.ICON_AUTH_NEEDED`` | ``wx.ICON_QUESTION`` will show a shield symbol on Windows Vista or above and a question symbol on other platforms. Available since wxWidgets 2.9.5  
- ``wx.STAY_ON_TOP``: Makes the message box stay on top of all other windows and not only just its parent (currently implemented only under MSW and GTK).  
- ``wx.CENTRE``: Centre the message box on its parent or on the screen if parent is not specified. Setting this style under MSW makes no differences as the dialog is always centered on the parent.  








         



.. seealso:: :ref:`MessageDialog Overview <messagedialog overview>`    







.. seealso:: :ref:`wx.RichMessageDialog`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>MessageDialog</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.MessageDialog_inheritance.png" alt="Inheritance diagram of MessageDialog" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.MessageDialog.html" title="wx.MessageDialog" alt="" coords="37,469,181,499"/> <area shape="rect" id="node2" href="wx.Dialog.html" title="wx.Dialog" alt="" coords="65,392,152,421"/> <area shape="rect" id="node3" href="wx.TopLevelWindow.html" title="wx.TopLevelWindow" alt="" coords="31,315,186,344"/> <area shape="rect" id="node4" href="wx.NonOwnedWindow.html" title="wx.NonOwnedWindow" alt="" coords="25,237,193,267"/> <area shape="rect" id="node5" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node6" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node7" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node8" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.MessageDialog.__init__`                                               Constructor specifying the message box properties.
:meth:`~wx.MessageDialog.GetCancelLabel`                                         
:meth:`~wx.MessageDialog.GetCaption`                                             
:meth:`~wx.MessageDialog.GetClassDefaultAttributes`                              
:meth:`~wx.MessageDialog.GetEffectiveIcon`                                       
:meth:`~wx.MessageDialog.GetExtendedMessage`                                     
:meth:`~wx.MessageDialog.GetHelpLabel`                                           
:meth:`~wx.MessageDialog.GetMessage`                                             
:meth:`~wx.MessageDialog.GetMessageDialogStyle`                                  
:meth:`~wx.MessageDialog.GetNoLabel`                                             
:meth:`~wx.MessageDialog.GetOKLabel`                                             
:meth:`~wx.MessageDialog.GetYesLabel`                                            
:meth:`~wx.MessageDialog.HasCustomLabels`                                        
:meth:`~wx.MessageDialog.SetExtendedMessage`                                     Sets the extended message for the dialog: this message is usually an extension of the short message specified in the constructor or set with :meth:`~MessageDialog.SetMessage` .
:meth:`~wx.MessageDialog.SetHelpLabel`                                           Sets the label for the Help button.
:meth:`~wx.MessageDialog.SetMessage`                                             Sets the message shown by the dialog.
:meth:`~wx.MessageDialog.SetOKCancelLabels`                                      Overrides the default labels of the ``wx.OK`` and Cancel buttons.
:meth:`~wx.MessageDialog.SetOKLabel`                                             Overrides the default label of the ``wx.OK`` button.
:meth:`~wx.MessageDialog.SetYesNoCancelLabels`                                   Overrides the default labels of the Yes, No and Cancel buttons.
:meth:`~wx.MessageDialog.SetYesNoLabels`                                         Overrides the default labels of the Yes and No buttons.
:meth:`~wx.MessageDialog.ShowModal`                                              Shows the dialog, returning one of ``wx.ID_OK``, ``wx.ID_CANCEL``, ``wx.ID_YES``, ``wx.ID_NO`` or ``wx.ID_HELP``.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.MessageDialog.CancelLabel`                                            See :meth:`~wx.MessageDialog.GetCancelLabel`
:attr:`~wx.MessageDialog.Caption`                                                See :meth:`~wx.MessageDialog.GetCaption`
:attr:`~wx.MessageDialog.EffectiveIcon`                                          See :meth:`~wx.MessageDialog.GetEffectiveIcon`
:attr:`~wx.MessageDialog.ExtendedMessage`                                        See :meth:`~wx.MessageDialog.GetExtendedMessage` and :meth:`~wx.MessageDialog.SetExtendedMessage`
:attr:`~wx.MessageDialog.HelpLabel`                                              See :meth:`~wx.MessageDialog.GetHelpLabel` and :meth:`~wx.MessageDialog.SetHelpLabel`
:attr:`~wx.MessageDialog.Message`                                                See :meth:`~wx.MessageDialog.GetMessage` and :meth:`~wx.MessageDialog.SetMessage`
:attr:`~wx.MessageDialog.MessageDialogStyle`                                     See :meth:`~wx.MessageDialog.GetMessageDialogStyle`
:attr:`~wx.MessageDialog.NoLabel`                                                See :meth:`~wx.MessageDialog.GetNoLabel`
:attr:`~wx.MessageDialog.OKLabel`                                                See :meth:`~wx.MessageDialog.GetOKLabel` and :meth:`~wx.MessageDialog.SetOKLabel`
:attr:`~wx.MessageDialog.YesLabel`                                               See :meth:`~wx.MessageDialog.GetYesLabel`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.MessageDialog(Dialog)

   **Possible constructors**::

       MessageDialog(parent, message, caption=MessageBoxCaptionStr,
                     style=OK|CENTRE, pos=DefaultPosition)
       
   
   This class represents a dialog that shows a single or multi-line
   message, with a choice of ``wx.OK``, Yes, No and Cancel buttons.



   .. method:: __init__(self, parent, message, caption=MessageBoxCaptionStr, style=OK|CENTRE, pos=DefaultPosition)

      Constructor specifying the message box properties.                  

      Use :meth:`ShowModal`   to show the dialog. 

      `style`  may be a bit list of the identifiers described above. 

      Notice that not all styles are compatible: only one of  ``OK``   and   ``YES_NO``   may be specified (and one of them must be specified) and at most one default button style can be used and it is only valid if the corresponding button is shown in the message box. 




      :param `parent`: Parent window.   
      :type `parent`: wx.Window
      :param `message`: Message to show in the dialog.   
      :type `message`: string
      :param `caption`: The dialog title.   
      :type `caption`: string
      :param `style`: Combination of style flags described above.   
      :type `style`: long
      :param `pos`: Dialog position (ignored under MSW).   
      :type `pos`: wx.Point












                  





   .. method:: GetCancelLabel(self)



      :rtype: `string`








   .. method:: GetCaption(self)



      :rtype: `string`








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: GetEffectiveIcon(self)



      :rtype: `long`








   .. method:: GetExtendedMessage(self)



      :rtype: `string`








   .. method:: GetHelpLabel(self)



      :rtype: `string`








   .. method:: GetMessage(self)



      :rtype: `string`








   .. method:: GetMessageDialogStyle(self)



      :rtype: `long`








   .. method:: GetNoLabel(self)



      :rtype: `string`








   .. method:: GetOKLabel(self)



      :rtype: `string`








   .. method:: GetYesLabel(self)



      :rtype: `string`








   .. method:: HasCustomLabels(self)



      :rtype: `bool`








   .. method:: SetExtendedMessage(self, extendedMessage)

      Sets the extended message for the dialog: this message is usually an extension of the short message specified in the constructor or set with :meth:`SetMessage` .                  

      If it is set, the main message appears highlighted –  if supported –  and this message appears beneath it in normal font. On the platforms which don't support extended messages, it is simply appended to the normal message with an empty line separating them. 

                


      :param `extendedMessage`: 
      :type `extendedMessage`: string






      .. versionadded:: 2.9.0 
     








   .. method:: SetHelpLabel(self, help)

      Sets the label for the Help button.                  

      Please see the remarks in :meth:`SetYesNoLabels`   documentation. 

      Notice that changing the label of the help button resets its special status (if any, this depends on the platform) and it will be treated just like another button in this case. 

                


      :param `help`: 
      :type `help`: MessageDialogButtonLabel




      :rtype: `bool`







      .. versionadded:: 2.9.3 
     








   .. method:: SetMessage(self, message)

      Sets the message shown by the dialog.                  

                


      :param `message`: 
      :type `message`: string






      .. versionadded:: 2.9.0 
     








   .. method:: SetOKCancelLabels(self, ok, cancel)

      Overrides the default labels of the ``wx.OK`` and Cancel buttons.                  

      Please see the remarks in :meth:`SetYesNoLabels`   documentation. 

                


      :param `ok`: 
      :type `ok`: MessageDialogButtonLabel
      :param `cancel`: 
      :type `cancel`: MessageDialogButtonLabel




      :rtype: `bool`







      .. versionadded:: 2.9.0 
     








   .. method:: SetOKLabel(self, ok)

      Overrides the default label of the ``wx.OK`` button.                  

      Please see the remarks in :meth:`SetYesNoLabels`   documentation. 

                


      :param `ok`: 
      :type `ok`: MessageDialogButtonLabel




      :rtype: `bool`







      .. versionadded:: 2.9.0 
     








   .. method:: SetYesNoCancelLabels(self, yes, no, cancel)

      Overrides the default labels of the Yes, No and Cancel buttons.                  

      Please see the remarks in :meth:`SetYesNoLabels`   documentation. 

                


      :param `yes`: 
      :type `yes`: MessageDialogButtonLabel
      :param `no`: 
      :type `no`: MessageDialogButtonLabel
      :param `cancel`: 
      :type `cancel`: MessageDialogButtonLabel




      :rtype: `bool`







      .. versionadded:: 2.9.0 
     








   .. method:: SetYesNoLabels(self, yes, no)

      Overrides the default labels of the Yes and No buttons.                  

      The arguments of this function can be either strings or one of the standard identifiers, such as  ``ID_APPLY``   or   ``ID_OPEN`` . Notice that even if the label is specified as an identifier, the return value of the dialog  :meth:`ShowModal`   method still remains one of  ``ID_OK`` ,   ``ID_CANCEL`` ,   ``ID_YES``   or   ``ID_NO``   values, i.e. this identifier changes only the label appearance but not the return code generated by the button. It is possible to mix stock identifiers and string labels in the same function call, for example:  ::

                  dlg = wx.MessageDialog(parent, message, caption)
                  dlg.SetYesNoLabels(wx.ID_SAVE, "&Don't save")



      Also notice that this function is not currently available on all platforms (although as of wxWidgets 2.9.0 it is implemented in all major ports), so it may return ``False`` to indicate that the labels couldn't be changed. If it returns ``True``, the labels were set successfully. 

      Typically, if the function was used successfully, the main dialog message may need to be changed, e.g.: ::

                  dlg = wx.MessageDialog(parent, message, caption)
                  if dlg.SetYesNoLabels("&Quit", "&Don't quit"):
                      dlg.SetMessage("What do you want to do?")
                  else: # buttons have standard "Yes"/"No" values, so rephrase the question
                      dlg.SetMessage("Do you really want to quit?")



                


      :param `yes`: 
      :type `yes`: MessageDialogButtonLabel
      :param `no`: 
      :type `no`: MessageDialogButtonLabel




      :rtype: `bool`







      .. versionadded:: 2.9.0 
     








   .. method:: ShowModal(self)

      Shows the dialog, returning one of ``wx.ID_OK``, ``wx.ID_CANCEL``, ``wx.ID_YES``, ``wx.ID_NO`` or ``wx.ID_HELP``.                  

      Notice that this method returns the identifier of the button which was clicked unlike :ref:`wx.MessageBox`  function.                  

      :rtype: `int`








   .. attribute:: CancelLabel

      See :meth:`~wx.MessageDialog.GetCancelLabel`


   .. attribute:: Caption

      See :meth:`~wx.MessageDialog.GetCaption`


   .. attribute:: EffectiveIcon

      See :meth:`~wx.MessageDialog.GetEffectiveIcon`


   .. attribute:: ExtendedMessage

      See :meth:`~wx.MessageDialog.GetExtendedMessage` and :meth:`~wx.MessageDialog.SetExtendedMessage`


   .. attribute:: HelpLabel

      See :meth:`~wx.MessageDialog.GetHelpLabel` and :meth:`~wx.MessageDialog.SetHelpLabel`


   .. attribute:: Message

      See :meth:`~wx.MessageDialog.GetMessage` and :meth:`~wx.MessageDialog.SetMessage`


   .. attribute:: MessageDialogStyle

      See :meth:`~wx.MessageDialog.GetMessageDialogStyle`


   .. attribute:: NoLabel

      See :meth:`~wx.MessageDialog.GetNoLabel`


   .. attribute:: OKLabel

      See :meth:`~wx.MessageDialog.GetOKLabel` and :meth:`~wx.MessageDialog.SetOKLabel`


   .. attribute:: YesLabel

      See :meth:`~wx.MessageDialog.GetYesLabel`

