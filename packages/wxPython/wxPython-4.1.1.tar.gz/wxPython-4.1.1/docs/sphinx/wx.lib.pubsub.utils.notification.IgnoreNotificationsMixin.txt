.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.pubsub.utils.notification

.. highlight:: python



.. _wx.lib.pubsub.utils.notification.IgnoreNotificationsMixin:

==========================================================================================================================================
|phoenix_title|  **wx.lib.pubsub.utils.notification.IgnoreNotificationsMixin**
==========================================================================================================================================

Derive your Notifications handler from this class if your handler
just wants to be notified of one or two types of pubsub events.
Then just override the desired methods. The rest of the notifications
will automatically be ignored.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>IgnoreNotificationsMixin</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.pubsub.utils.notification.IgnoreNotificationsMixin_inheritance.png" alt="Inheritance diagram of IgnoreNotificationsMixin" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.pubsub.utils.notification.IgnoreNotificationsMixin.html" title="wx.lib.pubsub.utils.notification.IgnoreNotificationsMixin" alt="" coords="5,83,388,112"/> <area shape="rect" id="node2" href="wx.lib.pubsub.core.notificationmgr.INotificationHandler.html" title="wx.lib.pubsub.core.notificationmgr.INotificationHandler" alt="" coords="7,5,387,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.lib.pubsub.core.notificationmgr.INotificationHandler`

|


|method_summary| Methods Summary
================================

===================================================================================== ================================================================================
:meth:`~wx.lib.pubsub.utils.notification.IgnoreNotificationsMixin.notifyDeadListener` Called when a listener has been garbage collected.
:meth:`~wx.lib.pubsub.utils.notification.IgnoreNotificationsMixin.notifyDelTopic`     Called whenever a topic is removed from topic tree.
:meth:`~wx.lib.pubsub.utils.notification.IgnoreNotificationsMixin.notifyNewTopic`     Called whenever a new topic is added to the topic tree.
:meth:`~wx.lib.pubsub.utils.notification.IgnoreNotificationsMixin.notifySend`         Called multiple times during a sendMessage: once before message
:meth:`~wx.lib.pubsub.utils.notification.IgnoreNotificationsMixin.notifySubscribe`    Called when a listener is subscribed to a topic.
:meth:`~wx.lib.pubsub.utils.notification.IgnoreNotificationsMixin.notifyUnsubscribe`  Called when a listener is unsubscribed from given topic.
===================================================================================== ================================================================================


|


|api| Class API
===============


.. class:: IgnoreNotificationsMixin(INotificationHandler)

   Derive your Notifications handler from this class if your handler
   just wants to be notified of one or two types of pubsub events.
   Then just override the desired methods. The rest of the notifications
   will automatically be ignored.

   .. method:: notifyDeadListener(self, pubListener, topicObj)

      Called when a listener has been garbage collected.
      :param pubListener: the pubsub.core.Listener that wraps GC'd listener.
      :param topicObj: the pubsub.core.Topic object it was subscribed to.


   .. method:: notifyDelTopic(self, topicName)

      Called whenever a topic is removed from topic tree.
      :param topicName: name of topic removed.


   .. method:: notifyNewTopic(self, topicObj, description, required, argsDocs)

      Called whenever a new topic is added to the topic tree.
      :param topicObj: the Topic object for the message.
      :param description: docstring for the topic.
      :param required: list of message data names (keys in argsDocs) that are required.
      :param argsDocs: dictionary of all message data names, with the 
      corresponding docstring. 


   .. method:: notifySend(self, stage, topicObj, pubListener=None)

      Called multiple times during a sendMessage: once before message
      sending has started (pre), once for each listener about to be sent the 
      message, and once after all listeners have received the message (post).
      :param stage: 'pre', 'post', or 'loop'.
      :param topicObj: the Topic object for the message.
      :param pubListener: None for pre and post stages; for loop, the listener
          that is about to be sent the message.


   .. method:: notifySubscribe(self, pubListener, topicObj, newSub)

      Called when a listener is subscribed to a topic.
      :param pubListener: the pubsub.core.Listener that wraps subscribed listener.
      :param topicObj: the pubsub.core.Topic object subscribed to.
      :param newSub: false if pubListener was already subscribed. 


   .. method:: notifyUnsubscribe(self, pubListener, topicObj)

      Called when a listener is unsubscribed from given topic.
      :param pubListener: the pubsub.core.Listener that wraps unsubscribed listener.
      :param topicObj: the pubsub.core.Topic object unsubscribed from.


