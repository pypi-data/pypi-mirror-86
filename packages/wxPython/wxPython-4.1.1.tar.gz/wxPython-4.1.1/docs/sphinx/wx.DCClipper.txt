.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.DCClipper:

==========================================================================================================================================
|phoenix_title|  **wx.DCClipper**
==========================================================================================================================================

:ref:`wx.DCClipper`  is a helper class for setting a clipping region on a :ref:`wx.DC`  during its lifetime.          

An object of :ref:`wx.DCClipper`  class is typically created on the stack so that it is automatically destroyed when the object goes out of scope. A typical usage example: 

::

        def MyFunction(dc):

            clip = wx.DCClipper(dc, rect)
            # ... drawing functions here are affected by clipping rect ...


        def OtherFunction():

            dc = wx.DC()
            MyFunction(dc)
            # ... drawing functions here are not affected by clipping rect ...









         



.. note:: 

   Since 3.1.1 :ref:`wx.DCClipper`  restores the previously active clipping region when it is destroyed. Previously it reset clipping on the associated :ref:`wx.DC`  and this has to be taken into account explicitly in previous wxWidgets versions.  







.. seealso:: :meth:`wx.DC.SetClippingRegion` , :ref:`wx.DCFontChanger`, :ref:`wx.DCTextColourChanger`, :ref:`wx.DCPenChanger`, :ref:`wx.DCBrushChanger`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>DCClipper</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.DCClipper_inheritance.png" alt="Inheritance diagram of DCClipper" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.DCClipper.html" title="wx.DCClipper" alt="" coords="5,5,116,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.DCClipper.__init__`                                                   Sets the clipping region to the specified region/coordinates.
:meth:`~wx.DCClipper.__enter__`                                                  
:meth:`~wx.DCClipper.__exit__`                                                   
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.DCClipper(object)

   **Possible constructors**::

       DCClipper(dc, region)
       
       DCClipper(dc, rect)
       
       DCClipper(dc, x, y, w, h)
       
   
   DCClipper is a helper class for setting a clipping region on a DC
   during its lifetime.



   .. method:: __init__(self, *args, **kw)

      Sets the clipping region to the specified region/coordinates.                  

      The clipping region is automatically unset when this object is destroyed.                   


      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, dc, region)`
      
      
      
      
      :param `dc`: 
      :type `dc`: wx.DC
      :param `region`: 
      :type `region`: wx.Region
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, dc, rect)`
      
      
      
      
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, dc, x, y, w, h)`
      
      
      
      
      :param `dc`: 
      :type `dc`: wx.DC
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `w`: 
      :type `w`: int
      :param `h`: 
      :type `h`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: __enter__(self)




   .. method:: __exit__(self, exc_type, exc_val, exc_tb)



