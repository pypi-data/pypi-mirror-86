.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.LogChain:

==========================================================================================================================================
|phoenix_title|  **wx.LogChain**
==========================================================================================================================================

This simple class allows you to chain log sinks, that is to install a new sink but keep passing log messages to the old one instead of replacing it completely as :meth:`wx.Log.SetActiveTarget`   does.          

It is especially useful when you want to divert the logs somewhere (for example to a file or a log window) but also keep showing the error messages using the standard dialogs as :ref:`wx.LogGui`  does by default. 

Example of usage: 

::

        logChain = wx.LogChain(wx.LogStderr)

        # all the log messages are sent to stderr and also processed as usually

        # don't delete logChain directly as this would leave a dangling
        # pointer as active log target, use SetActiveTarget() instead











|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>LogChain</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.LogChain_inheritance.png" alt="Inheritance diagram of LogChain" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.LogChain.html" title="wx.LogChain" alt="" coords="5,83,111,112"/> <area shape="rect" id="node2" href="wx.Log.html" title="wx.Log" alt="" coords="22,5,94,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.LogInterposer`, :ref:`wx.LogInterposerTemp`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.LogChain.__init__`                                                    Sets the specified  ``logger``   (which may be ``None``) as the default log target but the log messages are also passed to the previous log target if any.
:meth:`~wx.LogChain.DetachOldLog`                                                Detaches the old log target so it won't be destroyed when the :ref:`wx.LogChain`  object is destroyed.
:meth:`~wx.LogChain.GetOldLog`                                                   Returns the pointer to the previously active log target (which may be ``None``).
:meth:`~wx.LogChain.IsPassingMessages`                                           Returns ``True`` if the messages are passed to the previously active log target (default) or ``False`` if :meth:`~LogChain.PassMessages`   had been called.
:meth:`~wx.LogChain.PassMessages`                                                By default, the log messages are passed to the previously active log target.
:meth:`~wx.LogChain.SetLog`                                                      Sets another log target to use (may be ``None``).
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.LogChain.OldLog`                                                      See :meth:`~wx.LogChain.GetOldLog`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.LogChain(Log)

   **Possible constructors**::

       LogChain(logger)
       
   
   This simple class allows you to chain log sinks, that is to install a
   new sink but keep passing log messages to the old one instead of
   replacing it completely as `Log.SetActiveTarget` does.



   .. method:: __init__(self, logger)

      Sets the specified  ``logger``   (which may be ``None``) as the default log target but the log messages are also passed to the previous log target if any.                   


      :param `logger`: 
      :type `logger`: wx.Log







   .. method:: DetachOldLog(self)

      Detaches the old log target so it won't be destroyed when the :ref:`wx.LogChain`  object is destroyed.                   





   .. method:: GetOldLog(self)

      Returns the pointer to the previously active log target (which may be ``None``).                  

      :rtype: :ref:`wx.Log`








   .. method:: IsPassingMessages(self)

      Returns ``True`` if the messages are passed to the previously active log target (default) or ``False`` if :meth:`PassMessages`   had been called.                  

      :rtype: `bool`








   .. method:: PassMessages(self, passMessages)

      By default, the log messages are passed to the previously active log target.                  

      Calling this function with ``False`` parameter disables this behaviour (presumably temporarily, as you shouldn't use :ref:`wx.LogChain`  at all otherwise) and it can be re-enabled by calling it again with `passMessages`  set to ``True``.                  


      :param `passMessages`: 
      :type `passMessages`: bool







   .. method:: SetLog(self, logger)

      Sets another log target to use (may be ``None``).                  

      The log target specified in the :ref:`wx.LogChain`  constructor or in a previous call to this function is deleted. This doesn't change the old log target value (the one the messages are forwarded to) which still remains the same as was active when :ref:`wx.LogChain`  object was created.                  


      :param `logger`: 
      :type `logger`: wx.Log







   .. attribute:: OldLog

      See :meth:`~wx.LogChain.GetOldLog`

