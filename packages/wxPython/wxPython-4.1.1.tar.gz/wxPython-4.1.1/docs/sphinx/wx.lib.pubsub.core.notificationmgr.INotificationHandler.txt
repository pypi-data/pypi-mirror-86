.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.pubsub.core.notificationmgr

.. highlight:: python



.. _wx.lib.pubsub.core.notificationmgr.INotificationHandler:

==========================================================================================================================================
|phoenix_title|  **wx.lib.pubsub.core.notificationmgr.INotificationHandler**
==========================================================================================================================================

Defines the interface expected by pubsub for pubsub activity 
notifications. Any instance that supports the same methods, or 
derives from this class, will work as a notification handler
for pubsub events (see pub.addNotificationHandler).



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>INotificationHandler</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.pubsub.core.notificationmgr.INotificationHandler_inheritance.png" alt="Inheritance diagram of INotificationHandler" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.pubsub.core.notificationmgr.INotificationHandler.html" title="wx.lib.pubsub.core.notificationmgr.INotificationHandler" alt="" coords="5,5,385,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

=================================================================================== ================================================================================
:meth:`~wx.lib.pubsub.core.notificationmgr.INotificationHandler.notifyDeadListener` Called when a listener has been garbage collected.
:meth:`~wx.lib.pubsub.core.notificationmgr.INotificationHandler.notifyDelTopic`     Called whenever a topic is removed from topic tree.
:meth:`~wx.lib.pubsub.core.notificationmgr.INotificationHandler.notifyNewTopic`     Called whenever a new topic is added to the topic tree.
:meth:`~wx.lib.pubsub.core.notificationmgr.INotificationHandler.notifySend`         Called multiple times during a sendMessage: once before message
:meth:`~wx.lib.pubsub.core.notificationmgr.INotificationHandler.notifySubscribe`    Called when a listener is subscribed to a topic.
:meth:`~wx.lib.pubsub.core.notificationmgr.INotificationHandler.notifyUnsubscribe`  Called when a listener is unsubscribed from given topic.
=================================================================================== ================================================================================


|


|api| Class API
===============


.. class:: INotificationHandler

   Defines the interface expected by pubsub for pubsub activity 
   notifications. Any instance that supports the same methods, or 
   derives from this class, will work as a notification handler
   for pubsub events (see pub.addNotificationHandler).

   .. method:: notifyDeadListener(self, pubListener, topicObj)

      Called when a listener has been garbage collected.
      :param pubListener: the pubsub.core.Listener that wraps GC'd listener.
      :param topicObj: the pubsub.core.Topic object it was subscribed to.


   .. method:: notifyDelTopic(self, topicName)

      Called whenever a topic is removed from topic tree.
      :param topicName: name of topic removed.


   .. method:: notifyNewTopic(self, topicObj, description, required, argsDocs)

      Called whenever a new topic is added to the topic tree.
      :param topicObj: the Topic object for the message.
      :param description: docstring for the topic.
      :param required: list of message data names (keys in argsDocs) that are required.
      :param argsDocs: dictionary of all message data names, with the 
      corresponding docstring. 


   .. method:: notifySend(self, stage, topicObj, pubListener=None)

      Called multiple times during a sendMessage: once before message
      sending has started (pre), once for each listener about to be sent the 
      message, and once after all listeners have received the message (post).
      :param stage: 'pre', 'post', or 'loop'.
      :param topicObj: the Topic object for the message.
      :param pubListener: None for pre and post stages; for loop, the listener
          that is about to be sent the message.


   .. method:: notifySubscribe(self, pubListener, topicObj, newSub)

      Called when a listener is subscribed to a topic.
      :param pubListener: the pubsub.core.Listener that wraps subscribed listener.
      :param topicObj: the pubsub.core.Topic object subscribed to.
      :param newSub: false if pubListener was already subscribed. 


   .. method:: notifyUnsubscribe(self, pubListener, topicObj)

      Called when a listener is unsubscribed from given topic.
      :param pubListener: the pubsub.core.Listener that wraps unsubscribed listener.
      :param topicObj: the pubsub.core.Topic object unsubscribed from.


