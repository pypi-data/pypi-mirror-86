.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.grid.GridCellRenderer:

==========================================================================================================================================
|phoenix_title|  **wx.grid.GridCellRenderer**
==========================================================================================================================================

This class is responsible for actually drawing the cell in the grid.          

You may pass it to the :ref:`wx.grid.GridCellAttr`  (below) to change the format of one given cell or to :meth:`wx.grid.Grid.SetDefaultRenderer`   to change the view of all cells. This is an abstract class, and you will normally use one of the predefined derived classes or derive your own class from it. 







         



.. seealso:: :ref:`wx.grid.GridCellAutoWrapStringRenderer`, :ref:`wx.grid.GridCellBoolRenderer`, :ref:`wx.grid.GridCellDateTimeRenderer`, :ref:`wx.grid.GridCellEnumRenderer`, :ref:`wx.grid.GridCellFloatRenderer`, :ref:`wx.grid.GridCellNumberRenderer`, :ref:`wx.grid.GridCellStringRenderer`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>GridCellRenderer</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.grid.GridCellRenderer_inheritance.png" alt="Inheritance diagram of GridCellRenderer" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.grid.GridCellRenderer.html" title="wx.grid.GridCellRenderer" alt="" coords="87,83,271,112"/> <area shape="rect" id="node2" href="wx.ClientDataContainer.html" title="wx.ClientDataContainer" alt="" coords="5,5,183,35"/> <area shape="rect" id="node3" href="wx.RefCounter.html" title="wx.RefCounter" alt="" coords="207,5,325,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.grid.GridCellBoolRenderer`, :ref:`wx.grid.GridCellStringRenderer`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.grid.GridCellRenderer.__init__`                                       
:meth:`~wx.grid.GridCellRenderer.Clone`                                          This function must be implemented in derived classes to return a copy of itself.
:meth:`~wx.grid.GridCellRenderer.Draw`                                           Draw the given cell on the provided DC inside the given rectangle using the style specified by the attribute and the default or selected state corresponding to the isSelected value.
:meth:`~wx.grid.GridCellRenderer.GetBestHeight`                                  Get the preferred height of the cell at the given width.
:meth:`~wx.grid.GridCellRenderer.GetBestSize`                                    Get the preferred size of the cell for its contents.
:meth:`~wx.grid.GridCellRenderer.GetBestWidth`                                   Get the preferred width of the cell at the given height.
:meth:`~wx.grid.GridCellRenderer.GetMaxBestSize`                                 Get the maximum possible size for a cell using this renderer, if possible.
:meth:`~wx.grid.GridCellRenderer.~wxGridCellRenderer`                            The destructor is private because only :meth:`~GridCellRenderer.DecRef`   can delete us.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.grid.GridCellRenderer(ClientDataContainer, RefCounter)

   **Possible constructors**::

       GridCellRenderer()
       
   
   This class is responsible for actually drawing the cell in the grid.



   .. method:: __init__(self)






   .. method:: Clone(self)

      This function must be implemented in derived classes to return a copy of itself.                  

      :rtype: :ref:`wx.grid.GridCellRenderer`








   .. method:: Draw(self, grid, attr, dc, rect, row, col, isSelected)

      Draw the given cell on the provided DC inside the given rectangle using the style specified by the attribute and the default or selected state corresponding to the isSelected value.                  

      This pure virtual function has a default implementation which will prepare the DC using the given attribute: it will draw the rectangle with the background colour from attr and set the text colour and font.                  


      :param `grid`: 
      :type `grid`: wx.grid.Grid
      :param `attr`: 
      :type `attr`: wx.grid.GridCellAttr
      :param `dc`: 
      :type `dc`: wx.DC
      :param `rect`: 
      :type `rect`: wx.Rect
      :param `row`: 
      :type `row`: int
      :param `col`: 
      :type `col`: int
      :param `isSelected`: 
      :type `isSelected`: bool







   .. method:: GetBestHeight(self, grid, attr, dc, row, col, width)

      Get the preferred height of the cell at the given width.                  

      Some renderers may not have a well-defined best size, but only be able to provide the best height at the given width, e.g. this is the case of the standard :ref:`wx.grid.GridCellAutoWrapStringRenderer`. In this case, they should override this method, in addition to :meth:`GetBestSize` . 

                


      :param `grid`: 
      :type `grid`: wx.grid.Grid
      :param `attr`: 
      :type `attr`: wx.grid.GridCellAttr
      :param `dc`: 
      :type `dc`: wx.DC
      :param `row`: 
      :type `row`: int
      :param `col`: 
      :type `col`: int
      :param `width`: 
      :type `width`: int




      :rtype: `int`







      .. versionadded:: 4.1/wxWidgets-3.1.0  
     







      .. seealso:: :meth:`GetBestWidth`   








   .. method:: GetBestSize(self, grid, attr, dc, row, col)

      Get the preferred size of the cell for its contents.                  

      This method must be overridden in the derived classes to return the minimal fitting size for displaying the content of the given grid cell. 

                


      :param `grid`: 
      :type `grid`: wx.grid.Grid
      :param `attr`: 
      :type `attr`: wx.grid.GridCellAttr
      :param `dc`: 
      :type `dc`: wx.DC
      :param `row`: 
      :type `row`: int
      :param `col`: 
      :type `col`: int




      :rtype: :ref:`Size`







      .. seealso:: :meth:`GetBestHeight` , :meth:`GetBestWidth`     








   .. method:: GetBestWidth(self, grid, attr, dc, row, col, height)

      Get the preferred width of the cell at the given height.                  

      See :meth:`GetBestHeight` , this method is symmetric to it. 

                


      :param `grid`: 
      :type `grid`: wx.grid.Grid
      :param `attr`: 
      :type `attr`: wx.grid.GridCellAttr
      :param `dc`: 
      :type `dc`: wx.DC
      :param `row`: 
      :type `row`: int
      :param `col`: 
      :type `col`: int
      :param `height`: 
      :type `height`: int




      :rtype: `int`







      .. versionadded:: 4.1/wxWidgets-3.1.0  
     








   .. method:: GetMaxBestSize(self, grid, attr, dc)

      Get the maximum possible size for a cell using this renderer, if possible.                  

      This function may be overridden in the derived class if it can return the maximum size needed for displaying the cells rendered it without iterating over all cells. The base class version simply returns :ref:`wx.DefaultSize`, indicating that this is infeasible and that :meth:`GetBestSize`   should be called for each cell individually. 

      Note that this method will only be used if :meth:`wx.grid.GridTableBase.CanMeasureColUsingSameAttr`   is overridden to return ``True``. 

                


      :param `grid`: 
      :type `grid`: wx.grid.Grid
      :param `attr`: 
      :type `attr`: wx.grid.GridCellAttr
      :param `dc`: 
      :type `dc`: wx.DC




      :rtype: :ref:`Size`







      .. versionadded:: 4.1/wxWidgets-3.1.4  
     








   .. method:: ~wxGridCellRenderer(self)

      The destructor is private because only :meth:`DecRef`   can delete us.                   




