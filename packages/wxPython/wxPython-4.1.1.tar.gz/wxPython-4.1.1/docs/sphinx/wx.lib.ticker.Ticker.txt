.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.ticker

.. highlight:: python



.. _wx.lib.ticker.Ticker:

==========================================================================================================================================
|phoenix_title|  **wx.lib.ticker.Ticker**
==========================================================================================================================================

Control(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ControlNameStr)
Control()

This is the base class for a control or "widget".



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Ticker</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.ticker.Ticker_inheritance.png" alt="Inheritance diagram of Ticker" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.ticker.Ticker.html" title="wx.lib.ticker.Ticker" alt="" coords="36,392,181,421"/> <area shape="rect" id="node2" href="wx.Control.html" title="wx.Control" alt="" coords="63,315,155,344"/> <area shape="rect" id="node3" href="wx.Window.html" title="wx.Window" alt="" coords="60,237,157,267"/> <area shape="rect" id="node4" href="wx.WindowBase.html" title="wx.WindowBase" alt="" coords="44,160,173,189"/> <area shape="rect" id="node5" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node6" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node7" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.Control`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.ticker.Ticker.__init__`                                           Default class constructor.
:meth:`~wx.lib.ticker.Ticker.AcceptsFocus`                                       Non-interactive, so don't accept focus
:meth:`~wx.lib.ticker.Ticker.DoGetBestSize`                                      Width we don't care about, height is either -1, or the character
:meth:`~wx.lib.ticker.Ticker.DrawText`                                           Draws the ticker text at the current offset using the provided DC.
:meth:`~wx.lib.ticker.Ticker.GetDirection`                                       Get the set direction.
:meth:`~wx.lib.ticker.Ticker.GetFPS`                                             Get the frames per second speed of the ticker.
:meth:`~wx.lib.ticker.Ticker.GetPPF`                                             Get pixels per frame setting.
:meth:`~wx.lib.ticker.Ticker.GetText`                                            Get the current ticker text.
:meth:`~wx.lib.ticker.Ticker.IsTicking`                                          Is the ticker ticking? ie, is the text moving?
:meth:`~wx.lib.ticker.Ticker.OnErase`                                            Noop because of double buffering
:meth:`~wx.lib.ticker.Ticker.OnPaint`                                            Handles the ``wx.EVT_PAINT`` event for :class:`Ticker`.
:meth:`~wx.lib.ticker.Ticker.OnTick`                                             Handles the ``wx.EVT_TIMER`` event for :class:`Ticker`.
:meth:`~wx.lib.ticker.Ticker.SetDirection`                                       Sets the direction of the ticker: right to left (rtl) or
:meth:`~wx.lib.ticker.Ticker.SetFont`                                            Set the font for the control.
:meth:`~wx.lib.ticker.Ticker.SetFPS`                                             Adjust the update speed of the ticker.
:meth:`~wx.lib.ticker.Ticker.SetPPF`                                             Set the number of pixels per frame the ticker moves - ie,
:meth:`~wx.lib.ticker.Ticker.SetText`                                            Set the ticker text.
:meth:`~wx.lib.ticker.Ticker.ShouldInheritColours`                               Don't get colours from our parent.
:meth:`~wx.lib.ticker.Ticker.Start`                                              Starts the text moving
:meth:`~wx.lib.ticker.Ticker.Stop`                                               Stop moving the text
:meth:`~wx.lib.ticker.Ticker.UpdateExtent`                                       Updates the cached text extent if needed.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: Ticker(wx.Control)

   Control(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ControlNameStr)
   Control()
   
   This is the base class for a control or "widget".

   .. method:: __init__(self, parent, id=-1, text=wx.EmptyString, fgcolor = wx.BLACK, bgcolor = wx.WHITE, start=True, ppf=2, fps=20, direction="rtl", pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.NO_BORDER, name="Ticker" )

      Default class constructor.
      
      :param wx.Window `parent`: the parent
      :param integer `id`: an identifier for the control: a value of -1 is taken to mean a default
      :param string `text`: text in the ticker
      :param wx.Colour `fgcolor`: text/foreground color
      :param wx.Colour `bgcolor`: background color
      :param boolean `start`: if True, the ticker starts immediately
      :param int `ppf`: pixels per frame
      :param int `fps`: frames per second
      :param `direction`: direction of ticking, 'rtl' or 'ltr'
      :param wx.Point `pos`: the control position. A value of (-1, -1) indicates a default position,
       chosen by either the windowing system or wxPython, depending on platform
      :param `name`: the control name


   .. method:: AcceptsFocus(self)

      Non-interactive, so don't accept focus


   .. method:: DoGetBestSize(self)

      Width we don't care about, height is either -1, or the character
      height of our text with a little extra padding


   .. method:: DrawText(self, dc)

      Draws the ticker text at the current offset using the provided DC.
      
      :param wx.DC `dc`: the dc to use.


   .. method:: GetDirection(self)

      Get the set direction.


   .. method:: GetFPS(self)

      Get the frames per second speed of the ticker.


   .. method:: GetPPF(self)

      Get pixels per frame setting.


   .. method:: GetText(self)

      Get the current ticker text.


   .. method:: IsTicking(self)

      Is the ticker ticking? ie, is the text moving?


   .. method:: OnErase(self, evt)

      Noop because of double buffering
      
      Handles the ``wx.EVT_ERASE_BACKGROUND`` event for :class:`Ticker`.
      
      :param `evt`: a :class:`EraseEvent` event to be processed.


   .. method:: OnPaint(self, evt)

      Handles the ``wx.EVT_PAINT`` event for :class:`Ticker`.
      
      :param `evt`: a :class:`PaintEvent` event to be processed.


   .. method:: OnTick(self, evt)

      Handles the ``wx.EVT_TIMER`` event for :class:`Ticker`.
      
      :param `evt`: a :class:`TimerEvent` event to be processed.


   .. method:: SetDirection(self, dir)

      Sets the direction of the ticker: right to left (rtl) or
      left to right (ltr).
      
      :param `dir`: the direction 'rtl' or 'ltr'


   .. method:: SetFont(self, font)

      Set the font for the control.
      
      :param wx.Font `font`: the font to be used.


   .. method:: SetFPS(self, fps)

      Adjust the update speed of the ticker.
      
      :param int `fps`: frames per second.


   .. method:: SetPPF(self, ppf)

      Set the number of pixels per frame the ticker moves - ie,
      how "jumpy" it is.
      
      :param int `ppf`: the pixels per frame setting.


   .. method:: SetText(self, text)

      Set the ticker text.
      
      :param string `text`: the ticker text


   .. method:: ShouldInheritColours(self)

      Don't get colours from our parent.


   .. method:: Start(self)

      Starts the text moving


   .. method:: Stop(self)

      Stop moving the text


   .. method:: UpdateExtent(self, dc)

      Updates the cached text extent if needed.
      
      :param wx.DC `dc`: the dc to use.


