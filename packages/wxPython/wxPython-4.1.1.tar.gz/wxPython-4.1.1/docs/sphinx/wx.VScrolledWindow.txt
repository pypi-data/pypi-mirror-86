.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.VScrolledWindow:

==========================================================================================================================================
|phoenix_title|  **wx.VScrolledWindow**
==========================================================================================================================================

In the name of this class, "V" may stand for "variable" because it can be used for scrolling rows of variable heights; "virtual", because it is not necessary to know the heights of all rows in advance â€“  only those which are shown on the screen need to be measured; or even "vertical", because this class only supports scrolling vertically.          

In any case, this is a generalization of :ref:`wx.Scrolled`  which can be only used when all rows have the same heights. It lacks some other :ref:`wx.Scrolled`  features however, notably it can't scroll specific pixel sizes of the window or its exact client area size. 

To use this class, you need to derive from it and implement the :meth:`~wx.VScrolledWindow.OnGetRowHeight`  pure virtual method. You also must call :meth:`~wx.VScrolledWindow.SetRowCount`  to let the base class know how many rows it should display, but from that moment on the scrolling is handled entirely by :ref:`wx.VScrolledWindow`. You only need to draw the visible part of contents in your  ``OnPaint()``   method as usual. You should use  :meth:`~wx.VScrolledWindow.GetVisibleRowsBegin`  and :meth:`~wx.VScrolledWindow.GetVisibleRowsEnd`  to select the lines to display. Note that the device context origin is not shifted so the first visible row always appears at the point (0, 0) in physical as well as logical coordinates. 



|phoenix_title| wxWidgets 2.8 Compatibility Functions
=====================================================

The following functions provide backwards compatibility for applications originally built using :ref:`wx.VScrolledWindow`  in 2.6 or 2.8. Originally, :ref:`wx.VScrolledWindow`  referred to scrolling "lines". We now use "units" in :ref:`wx.VarScrollHelperBase`  to avoid implying any orientation (since the functions are used for both horizontal and vertical scrolling in derived classes). And in the new :ref:`wx.VScrolledWindow`  and :ref:`wx.HScrolledWindow`  classes, we refer to them as "rows" and "columns", respectively. This is to help clear some confusion in not only those classes, but also in :ref:`wx.HVScrolledWindow`  where functions are inherited from both. You are encouraged to update any existing code using these function to use the new replacements mentioned below, and avoid using these functions for any new code as they are deprecated. 

.. include:: rest_substitutions/tables/wx.VScrolledWindow.1.rst





.. seealso:: :ref:`wx.HScrolledWindow`, :ref:`wx.HVScrolledWindow`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>VScrolledWindow</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.VScrolledWindow_inheritance.png" alt="Inheritance diagram of VScrolledWindow" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.VScrolledWindow.html" title="wx.VScrolledWindow" alt="" coords="109,315,268,344"/> <area shape="rect" id="node2" href="wx.Panel.html" title="wx.Panel" alt="" coords="78,237,158,267"/> <area shape="rect" id="node3" href="wx.VarVScrollHelper.html" title="wx.VarVScrollHelper" alt="" coords="187,237,342,267"/> <area shape="rect" id="node4" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node5" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node6" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node7" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> <area shape="rect" id="node8" href="wx.VarScrollHelperBase.html" title="wx.VarScrollHelperBase" alt="" coords="181,160,359,189"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.VListBox`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.VScrolledWindow.__init__`                                             Default constructor, you must call :meth:`~VScrolledWindow.Create`   later.
:meth:`~wx.VScrolledWindow.Create`                                               Same as the non-default constructor, but returns a status code: ``True`` if ok, ``False`` if the window couldn't be created.
:meth:`~wx.VScrolledWindow.GetClassDefaultAttributes`                            
:meth:`~wx.VScrolledWindow.GetFirstVisibleLine`                                  Deprecated compatibility helper.
:meth:`~wx.VScrolledWindow.GetLastVisibleLine`                                   Deprecated compatibility helper.
:meth:`~wx.VScrolledWindow.GetLineCount`                                         Deprecated compatibility helper.
:meth:`~wx.VScrolledWindow.HitTest`                                              Deprecated compatibility helper.
:meth:`~wx.VScrolledWindow.RefreshLine`                                          Deprecated compatibility helper.
:meth:`~wx.VScrolledWindow.RefreshLines`                                         Deprecated compatibility helper.
:meth:`~wx.VScrolledWindow.ScrollLines`                                          Deprecated compatibility helper.
:meth:`~wx.VScrolledWindow.ScrollPages`                                          Deprecated compatibility helper.
:meth:`~wx.VScrolledWindow.ScrollToLine`                                         Deprecated compatibility helper.
:meth:`~wx.VScrolledWindow.SetLineCount`                                         Deprecated compatibility helper.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.VScrolledWindow.FirstVisibleLine`                                     See :meth:`~wx.VScrolledWindow.GetFirstVisibleLine`
:attr:`~wx.VScrolledWindow.LastVisibleLine`                                      See :meth:`~wx.VScrolledWindow.GetLastVisibleLine`
:attr:`~wx.VScrolledWindow.LineCount`                                            See :meth:`~wx.VScrolledWindow.GetLineCount` and :meth:`~wx.VScrolledWindow.SetLineCount`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.VScrolledWindow(Panel, VarVScrollHelper)

   **Possible constructors**::

       VScrolledWindow()
       
       VScrolledWindow(parent, id=ID_ANY, pos=DefaultPosition,
                       size=DefaultSize, style=0, name=PanelNameStr)
       
   
   In the name of this class, "V" may stand for "variable" because it can
   be used for scrolling rows of variable heights; "virtual", because it
   is not necessary to know the heights of all rows in advance  only
   those which are shown on the screen need to be measured; or even
   "vertical", because this class only supports scrolling vertically.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor, you must call :meth:`Create`   later.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr)`
      
      This is the normal constructor, no need to call :meth:`Create`   after using this constructor.                  
      
      
      
      
      :param `parent`: The parent window, must not be ``None``.   
      :type `parent`: wx.Window
      :param `id`: The identifier of this window, ``wx.ID_ANY`` by default.   
      :type `id`: wx.WindowID
      :param `pos`: The initial window position.   
      :type `pos`: wx.Point
      :param `size`: The initial window size.   
      :type `size`: wx.Size
      :param `style`: The window style. There are no special style bits defined for this class.   
      :type `style`: long
      :param `name`: The name for this window; usually not used.   
      :type `name`: string
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. note:: 
      
          ``VSCROLL``   is always automatically added to the style, there is no need to specify it explicitly.  
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr)

      Same as the non-default constructor, but returns a status code: ``True`` if ok, ``False`` if the window couldn't be created.                  

      Just as with the constructor, the  ``VSCROLL``   style is always used, there is no need to specify it explicitly.                   


      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: GetFirstVisibleLine(self)

      Deprecated compatibility helper. 

      :rtype: `int`







      .. wxdeprecated:: 
         Use GetVisibleRowsBegin instead. 








   .. method:: GetLastVisibleLine(self)

      Deprecated compatibility helper. 

      :rtype: `int`







      .. wxdeprecated:: 
         Use GetVisibleRowsEnd instead. 








   .. method:: GetLineCount(self)

      Deprecated compatibility helper. 

      :rtype: `int`







      .. wxdeprecated:: 
         Use GetRowCount instead. 








   .. method:: HitTest(self, *args)

      Deprecated compatibility helper.



   .. method:: RefreshLine(self, line)

      Deprecated compatibility helper.  



      .. wxdeprecated:: 
         Use RefreshRow instead. 








   .. method:: RefreshLines(self, from_, to_)

      Deprecated compatibility helper.  



      .. wxdeprecated:: 
         Use RefreshRows instead. 








   .. method:: ScrollLines(self, lines)

      Deprecated compatibility helper. 

      :rtype: `bool`







      .. wxdeprecated:: 
         Use ScrollRows instead. 








   .. method:: ScrollPages(self, pages)

      Deprecated compatibility helper. 

      :rtype: `bool`







      .. wxdeprecated:: 
         Use ScrollRowPages instead. 








   .. method:: ScrollToLine(self, line)

      Deprecated compatibility helper. 

      :rtype: `bool`







      .. wxdeprecated:: 
         Use ScrollToRow instead. 








   .. method:: SetLineCount(self, count)

      Deprecated compatibility helper.  



      .. wxdeprecated:: 
         Use SetRowCount instead. 








   .. attribute:: FirstVisibleLine

      See :meth:`~wx.VScrolledWindow.GetFirstVisibleLine`


   .. attribute:: LastVisibleLine

      See :meth:`~wx.VScrolledWindow.GetLastVisibleLine`


   .. attribute:: LineCount

      See :meth:`~wx.VScrolledWindow.GetLineCount` and :meth:`~wx.VScrolledWindow.SetLineCount`

