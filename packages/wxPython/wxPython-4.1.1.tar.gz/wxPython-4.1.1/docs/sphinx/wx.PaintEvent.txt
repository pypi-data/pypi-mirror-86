.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.PaintEvent:

==========================================================================================================================================
|phoenix_title|  **wx.PaintEvent**
==========================================================================================================================================

A paint event is sent when a window's contents needs to be repainted.          

The handler of this event must create a :ref:`wx.PaintDC`  object and use it for painting the window contents. For example: ::

        def OnPaint(self, event):

            dc = wx.PaintDC(self)
            DrawMyDocument(dc)



Notice that you must `not`  create other kinds of :ref:`wx.DC`  (e.g. :ref:`wx.ClientDC`  or :ref:`wx.WindowDC`) in ``EVT_PAINT`` handlers and also don't create :ref:`wx.PaintDC`  outside of this event handlers. 

You can optimize painting by retrieving the rectangles that have been damaged and only repainting these. The rectangles are in terms of the client area, and are unscrolled, so you will need to do some calculations using the current view position to obtain logical, scrolled units. Here is an example of using the :ref:`wx.RegionIterator`  class: ::

        # Called when window needs to be repainted.
        def OnPaint(self, event):

            dc = wx.PaintDC(self)

            # Find out where the window is scrolled to
            vbX, vbY = self.GetViewStart()

            # get the update rect list
            upd = wx.RegionIterator(self.GetUpdateRegion())

            while upd.HaveRects():

                rect = upd.GetRect()

                # Repaint this rectangle
                PaintRectangle(rect, dc)

                upd.Next()









.. _PaintEvent-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.PaintEvent` parameter.

Event macros: 

- EVT_PAINT: Process a  ``wxEVT_PAINT``   event.   








         



.. note:: 

   Please notice that in general it is impossible to change the drawing of a standard control (such as :ref:`wx.Button`) and so you shouldn't attempt to handle paint events for them as even if it might work on some platforms, this is inherently not portable and won't work everywhere.  







.. seealso:: :ref:`Events and Event Handling <events and event handling>`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>PaintEvent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.PaintEvent_inheritance.png" alt="Inheritance diagram of PaintEvent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.PaintEvent.html" title="wx.PaintEvent" alt="" coords="5,160,120,189"/> <area shape="rect" id="node2" href="wx.Event.html" title="wx.Event" alt="" coords="21,83,104,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="19,5,106,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.PaintEvent.__init__`                                                  Constructor for exclusive use of wxWidgets itself.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.PaintEvent(Event)

   **Possible constructors**::

       PaintEvent(window)
       
   
   A paint event is sent when a window's contents needs to be repainted.



   .. method:: __init__(self, window)

      Constructor for exclusive use of wxWidgets itself.                  

      Note that the objects of this class can `not`  be created from application code, they're only created by the library itself. If you need a window to be repainted, use :meth:`wx.Window.Refresh`   instead of trying to manually create an event of this class.                  


      :param `window`: 
      :type `window`: wx.Window






