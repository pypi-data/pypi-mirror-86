.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.flatnotebook

.. highlight:: python



.. _wx.lib.agw.flatnotebook.FlatNotebookEvent:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.flatnotebook.FlatNotebookEvent**
==========================================================================================================================================

This events will be sent when a ``EVT_FLATNOTEBOOK_PAGE_CHANGED``,
``EVT_FLATNOTEBOOK_PAGE_CHANGING``, ``EVT_FLATNOTEBOOK_PAGE_CLOSING``,
``EVT_FLATNOTEBOOK_PAGE_CLOSED`` and ``EVT_FLATNOTEBOOK_PAGE_CONTEXT_MENU`` is
mapped in the parent.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>FlatNotebookEvent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.flatnotebook.FlatNotebookEvent_inheritance.png" alt="Inheritance diagram of FlatNotebookEvent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.flatnotebook.FlatNotebookEvent.html" title="wx.lib.agw.flatnotebook.FlatNotebookEvent" alt="" coords="5,315,311,344"/> <area shape="rect" id="node2" href="wx.PyCommandEvent.html" title="wx.PyCommandEvent" alt="" coords="75,237,241,267"/> <area shape="rect" id="node3" href="wx.CommandEvent.html" title="wx.CommandEvent" alt="" coords="83,160,233,189"/> <area shape="rect" id="node4" href="wx.Event.html" title="wx.Event" alt="" coords="117,83,199,112"/> <area shape="rect" id="node5" href="wx.Object.html" title="wx.Object" alt="" coords="115,5,201,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:class:`wx.lib.agw.flatnotebook.FlatNotebookDragEvent`

|


|super_classes| Known Superclasses
==================================

:class:`wx.PyCommandEvent`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.flatnotebook.FlatNotebookEvent.__init__`                      Default class constructor.
:meth:`~wx.lib.agw.flatnotebook.FlatNotebookEvent.Allow`                         This is the opposite of :meth:`~FlatNotebookEvent.Veto`: it explicitly allows the event to be processed.
:meth:`~wx.lib.agw.flatnotebook.FlatNotebookEvent.GetNotifyEvent`                Returns the actual :class:`NotifyEvent`.
:meth:`~wx.lib.agw.flatnotebook.FlatNotebookEvent.GetOldSelection`               Returns the page that was selected before the change, -1 if none was selected.
:meth:`~wx.lib.agw.flatnotebook.FlatNotebookEvent.GetSelection`                  Returns the currently selected page, or -1 if none was selected.
:meth:`~wx.lib.agw.flatnotebook.FlatNotebookEvent.IsAllowed`                     Returns ``True`` if the change is allowed (:meth:`~FlatNotebookEvent.Veto` hasn't been called) or
:meth:`~wx.lib.agw.flatnotebook.FlatNotebookEvent.SetOldSelection`               Sets the id of the page selected before the change.
:meth:`~wx.lib.agw.flatnotebook.FlatNotebookEvent.SetSelection`                  Sets the event selection.
:meth:`~wx.lib.agw.flatnotebook.FlatNotebookEvent.Veto`                          Prevents the change announced by this event from happening.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: FlatNotebookEvent(wx.PyCommandEvent)

   This events will be sent when a ``EVT_FLATNOTEBOOK_PAGE_CHANGED``,
   ``EVT_FLATNOTEBOOK_PAGE_CHANGING``, ``EVT_FLATNOTEBOOK_PAGE_CLOSING``,
   ``EVT_FLATNOTEBOOK_PAGE_CLOSED`` and ``EVT_FLATNOTEBOOK_PAGE_CONTEXT_MENU`` is
   mapped in the parent.

   .. method:: __init__(self, eventType, eventId=1, nSel=-1, nOldSel=-1)

      Default class constructor.
      
      :param `eventType`: the event type;
      :param `eventId`: the event identifier;
      :param `nSel`: the current selection;
      :param `nOldSel`: the old selection.


   .. method:: Allow(self)

      This is the opposite of :meth:`~FlatNotebookEvent.Veto`: it explicitly allows the event to be processed.
      For most events it is not necessary to call this method as the events are
      allowed anyhow but some are forbidden by default (this will be mentioned
      in the corresponding event description).


   .. method:: GetNotifyEvent(self)

      Returns the actual :class:`NotifyEvent`. 


   .. method:: GetOldSelection(self)

      Returns the page that was selected before the change, -1 if none was selected. 


   .. method:: GetSelection(self)

      Returns the currently selected page, or -1 if none was selected. 


   .. method:: IsAllowed(self)

      Returns ``True`` if the change is allowed (:meth:`~FlatNotebookEvent.Veto` hasn't been called) or
      ``False`` otherwise (if it was).


   .. method:: SetOldSelection(self, nOldSel)

      Sets the id of the page selected before the change.
      
      :param `nOldSel`: an integer specifying the old selection.


   .. method:: SetSelection(self, nSel)

      Sets the event selection.
      
      :param `nSel`: an integer specifying the new selection.


   .. method:: Veto(self)

      Prevents the change announced by this event from happening.
      
      :note: It is in general a good idea to notify the user about the reasons
       for vetoing the change because otherwise the applications behaviour (which
       just refuses to do what the user wants) might be quite surprising.


