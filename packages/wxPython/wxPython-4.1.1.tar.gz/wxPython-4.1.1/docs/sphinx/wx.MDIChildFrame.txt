.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.MDIChildFrame:

==========================================================================================================================================
|phoenix_title|  **wx.MDIChildFrame**
==========================================================================================================================================

An MDI child frame is a frame that can only exist inside a :ref:`wx.MDIClientWindow`, which is itself a child of :ref:`wx.MDIParentFrame`.          





.. _MDIChildFrame-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  All of the standard :ref:`wx.Frame`  styles can be used but most of them are ignored by TDI-based MDI implementations.  







         



.. note:: 

   Although internally an MDI child frame is a child of the MDI client window, in wxWidgets you create it as a child of :ref:`wx.MDIParentFrame`. In fact, you can usually forget that the client window exists. MDI child frames are clipped to the area of the MDI client window, and may be iconized on the client window. You can associate a menubar with a child frame as usual, although an MDI child doesn't display its menubar under its own title bar. The MDI parent frame's menubar will be changed to reflect the currently active child frame. If there are currently no children, the parent frame's own menubar will be displayed.  







.. seealso:: :ref:`wx.MDIClientWindow`, :ref:`wx.MDIParentFrame`, :ref:`wx.Frame`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>MDIChildFrame</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.MDIChildFrame_inheritance.png" alt="Inheritance diagram of MDIChildFrame" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.MDIChildFrame.html" title="wx.MDIChildFrame" alt="" coords="37,469,180,499"/> <area shape="rect" id="node2" href="wx.Frame.html" title="wx.Frame" alt="" coords="66,392,151,421"/> <area shape="rect" id="node3" href="wx.TopLevelWindow.html" title="wx.TopLevelWindow" alt="" coords="31,315,186,344"/> <area shape="rect" id="node4" href="wx.NonOwnedWindow.html" title="wx.NonOwnedWindow" alt="" coords="25,237,193,267"/> <area shape="rect" id="node5" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node6" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node7" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node8" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`DocMDIChildFrame`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.MDIChildFrame.__init__`                                               Default constructor.
:meth:`~wx.MDIChildFrame.Activate`                                               Activates this MDI child frame.
:meth:`~wx.MDIChildFrame.Create`                                                 Used in two-step frame construction.
:meth:`~wx.MDIChildFrame.GetClassDefaultAttributes`                              
:meth:`~wx.MDIChildFrame.GetMDIParent`                                           Returns the MDI parent frame containing this child.
:meth:`~wx.MDIChildFrame.IsAlwaysMaximized`                                      Returns ``True`` for MDI children in TDI implementations.
:meth:`~wx.MDIChildFrame.Maximize`                                               Maximizes this MDI child frame.
:meth:`~wx.MDIChildFrame.Restore`                                                Restores this MDI child frame (unmaximizes).
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.MDIChildFrame.MDIParent`                                              See :meth:`~wx.MDIChildFrame.GetMDIParent`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.MDIChildFrame(MDIChildFrameBase)

   **Possible constructors**::

       MDIChildFrame()
       
       MDIChildFrame(parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition,
                     size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr)
       
   
   An MDI child frame is a frame that can only exist inside a
   MDIClientWindow, which is itself a child of MDIParentFrame.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr)`
      
      Constructor, creating the window.                  
      
      
      
      
      :param `parent`: The window parent. This should not be ``None``.   
      :type `parent`: wx.MDIParentFrame
      :param `id`: The window identifier. It may take a value of -1 to indicate a default value.   
      :type `id`: wx.WindowID
      :param `title`: The caption to be displayed on the frame's title bar.   
      :type `title`: string
      :param `pos`: The window position. The value :ref:`wx.DefaultPosition`  indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.   
      :type `pos`: wx.Point
      :param `size`: The window size. The value :ref:`wx.DefaultSize`  indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.   
      :type `size`: wx.Size
      :param `style`: The window style. See :ref:`wx.MDIChildFrame`.   
      :type `style`: long
      :param `name`: The name of the window. This parameter is used to associate a name with the item, allowing the application user to set Motif resource values for individual windows.  
      :type `name`: string
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. seealso:: :meth:`Create`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Activate(self)

      Activates this MDI child frame.                  

                 



      .. seealso:: :meth:`Maximize` , :meth:`Restore`     








   .. method:: Create(self, parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr)

      Used in two-step frame construction.                  

      See :ref:`wx.MDIChildFrame`  for further details.                  


      :param `parent`: 
      :type `parent`: wx.MDIParentFrame
      :param `id`: 
      :type `id`: wx.WindowID
      :param `title`: 
      :type `title`: string
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: GetMDIParent(self)

      Returns the MDI parent frame containing this child.                  

      Notice that this may return a different object than :meth:`GetParent`   as the child frames may be created as children of the client window internally.                  

      :rtype: :ref:`wx.MDIParentFrame`








   .. method:: IsAlwaysMaximized(self)

      Returns ``True`` for MDI children in TDI implementations.                  

      TDI-based implementations represent MDI children as pages in a :ref:`wx.Notebook`  and so they are always maximized and can't be restored or iconized. 

                

      :rtype: `bool`







      .. seealso:: :meth:`wx.MDIParentFrame.IsTDI` .   








   .. method:: Maximize(self, maximize=True)

      Maximizes this MDI child frame.                  

      This function doesn't do anything if :meth:`IsAlwaysMaximized`   returns ``True``. 

                


      :param `maximize`: 
      :type `maximize`: bool






      .. seealso:: :meth:`Activate` , :meth:`Restore`     








   .. method:: Restore(self)

      Restores this MDI child frame (unmaximizes).                  

      This function doesn't do anything if :meth:`IsAlwaysMaximized`   returns ``True``. 

                 



      .. seealso:: :meth:`Activate` , :meth:`Maximize`     








   .. attribute:: MDIParent

      See :meth:`~wx.MDIChildFrame.GetMDIParent`

