.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.MouseEvent:

==========================================================================================================================================
|phoenix_title|  **wx.MouseEvent**
==========================================================================================================================================

This event class contains information about the events generated by the mouse: they include mouse buttons press and release events and mouse move events.          

All mouse events involving the buttons use  ``MOUSE_BTN_LEFT``   for the left mouse button,   ``MOUSE_BTN_MIDDLE``   for the middle one and   ``MOUSE_BTN_RIGHT``   for the right one. And if the system supports more buttons, the   ``MOUSE_BTN_AUX1``   and   ``MOUSE_BTN_AUX2``   events can also be generated. Note that not all mice have even a middle button so a portable application should avoid relying on the events from it (but the right button click can be emulated using the left mouse button with the control key under Mac platforms with a single button mouse). 

For the  ``wxEVT_ENTER_WINDOW``   and   ``wxEVT_LEAVE_WINDOW``   events purposes, the mouse is considered to be inside the window if it is in the window client area and not inside one of its children. In other words, the parent window receives   ``wxEVT_LEAVE_WINDOW``   event not only when the mouse leaves the window entirely but also when it enters one of its children. 

The position associated with a mouse event is expressed in the window coordinates of the window which generated the event, you can use :meth:`wx.Window.ClientToScreen`   to convert it to screen coordinates and possibly call :meth:`wx.Window.ScreenToClient`   next to convert it to window coordinates of another window. 







.. _MouseEvent-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.MouseEvent` parameter.

Event macros: 

- EVT_LEFT_DOWN: Process a  ``wxEVT_LEFT_DOWN``   event. The handler of this event should normally call event.Skip() to allow the default processing to take place as otherwise the window under mouse wouldn't get the focus.   
- EVT_LEFT_UP: Process a  ``wxEVT_LEFT_UP``   event.   
- EVT_LEFT_DCLICK: Process a  ``wxEVT_LEFT_DCLICK``   event.   
- EVT_MIDDLE_DOWN: Process a  ``wxEVT_MIDDLE_DOWN``   event.   
- EVT_MIDDLE_UP: Process a  ``wxEVT_MIDDLE_UP``   event.   
- EVT_MIDDLE_DCLICK: Process a  ``wxEVT_MIDDLE_DCLICK``   event.   
- EVT_RIGHT_DOWN: Process a  ``wxEVT_RIGHT_DOWN``   event.   
- EVT_RIGHT_UP: Process a  ``wxEVT_RIGHT_UP``   event.   
- EVT_RIGHT_DCLICK: Process a  ``wxEVT_RIGHT_DCLICK``   event.   
- EVT_MOUSE_AUX1_DOWN: Process a  ``wxEVT_AUX1_DOWN``   event.   
- EVT_MOUSE_AUX1_UP: Process a  ``wxEVT_AUX1_UP``   event.   
- EVT_MOUSE_AUX1_DCLICK: Process a  ``wxEVT_AUX1_DCLICK``   event.   
- EVT_MOUSE_AUX2_DOWN: Process a  ``wxEVT_AUX2_DOWN``   event.   
- EVT_MOUSE_AUX2_UP: Process a  ``wxEVT_AUX2_UP``   event.   
- EVT_MOUSE_AUX2_DCLICK: Process a  ``wxEVT_AUX2_DCLICK``   event.   
- EVT_MOTION: Process a  ``wxEVT_MOTION``   event.   
- EVT_ENTER_WINDOW: Process a  ``wxEVT_ENTER_WINDOW``   event.   
- EVT_LEAVE_WINDOW: Process a  ``wxEVT_LEAVE_WINDOW``   event.   
- EVT_MOUSEWHEEL: Process a  ``wxEVT_MOUSEWHEEL``   event.   
- EVT_MOUSE_EVENTS: Process all mouse events.  
- EVT_MAGNIFY: Process a  ``wxEVT_MAGNIFY``   event (new since wxWidgets 3.1.0).   








         



.. note:: 

   Note the difference between methods like :meth:`wx.MouseEvent.LeftDown`   and the inherited :meth:`wx.MouseState.LeftIsDown` : the former returns ``True`` when the event corresponds to the left mouse button click while the latter returns ``True`` if the left mouse button is currently being pressed. For example, when the user is dragging the mouse you can use :meth:`wx.MouseEvent.LeftIsDown`   to test whether the left mouse button is (still) depressed. Also, by convention, if :meth:`wx.MouseEvent.LeftDown`   returns ``True``, :meth:`wx.MouseEvent.LeftIsDown`   will also return ``True`` in wxWidgets whatever the underlying GUI behaviour is (which is platform-dependent). The same applies, of course, to other mouse buttons as well.  







.. seealso:: :ref:`wx.KeyEvent`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>MouseEvent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.MouseEvent_inheritance.png" alt="Inheritance diagram of MouseEvent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.MouseEvent.html" title="wx.MouseEvent" alt="" coords="55,160,179,189"/> <area shape="rect" id="node2" href="wx.Event.html" title="wx.Event" alt="" coords="13,83,95,112"/> <area shape="rect" id="node3" href="wx.MouseState.html" title="wx.MouseState" alt="" coords="123,83,244,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node5" href="wx.KeyboardState.html" title="wx.KeyboardState" alt="" coords="116,5,256,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.MouseEvent.__init__`                                                  Constructor.
:meth:`~wx.MouseEvent.Aux1DClick`                                                Returns ``True`` if the event was a first extra button double click.
:meth:`~wx.MouseEvent.Aux1Down`                                                  Returns ``True`` if the first extra button mouse button changed to down.
:meth:`~wx.MouseEvent.Aux1Up`                                                    Returns ``True`` if the first extra button mouse button changed to up.
:meth:`~wx.MouseEvent.Aux2DClick`                                                Returns ``True`` if the event was a second extra button double click.
:meth:`~wx.MouseEvent.Aux2Down`                                                  Returns ``True`` if the second extra button mouse button changed to down.
:meth:`~wx.MouseEvent.Aux2Up`                                                    Returns ``True`` if the second extra button mouse button changed to up.
:meth:`~wx.MouseEvent.Button`                                                    Returns ``True`` if the event was generated by the specified button.
:meth:`~wx.MouseEvent.ButtonDClick`                                              If the argument is omitted, this returns ``True`` if the event was a mouse double click event.
:meth:`~wx.MouseEvent.ButtonDown`                                                If the argument is omitted, this returns ``True`` if the event was a mouse button down event.
:meth:`~wx.MouseEvent.ButtonUp`                                                  If the argument is omitted, this returns ``True`` if the event was a mouse button up event.
:meth:`~wx.MouseEvent.Dragging`                                                  Returns ``True`` if this was a dragging event (motion while a button is depressed).
:meth:`~wx.MouseEvent.Entering`                                                  Returns ``True`` if the mouse was entering the window.
:meth:`~wx.MouseEvent.GetButton`                                                 Returns the mouse button which generated this event or  ``MOUSE_BTN_NONE``   if no button is involved (for mouse move, enter or leave event, for example).
:meth:`~wx.MouseEvent.GetClickCount`                                             Returns the number of mouse clicks for this event: 1 for a simple click, 2 for a double-click, 3 for a triple-click and so on.
:meth:`~wx.MouseEvent.GetColumnsPerAction`                                       Returns the configured number of columns (or whatever) to be scrolled per wheel action.
:meth:`~wx.MouseEvent.GetLinesPerAction`                                         Returns the configured number of lines (or whatever) to be scrolled per wheel action.
:meth:`~wx.MouseEvent.GetLogicalPosition`                                        Returns the logical mouse position in pixels (i.e. translated according to the translation set for the DC, which usually indicates that the window has been scrolled).
:meth:`~wx.MouseEvent.GetMagnification`                                          For magnify (pinch to zoom) events: returns the change in magnification.
:meth:`~wx.MouseEvent.GetWheelAxis`                                              Gets the axis the wheel operation concerns.
:meth:`~wx.MouseEvent.GetWheelDelta`                                             Get wheel delta, normally 120.
:meth:`~wx.MouseEvent.GetWheelRotation`                                          Get wheel rotation, positive or negative indicates direction of rotation.
:meth:`~wx.MouseEvent.IsButton`                                                  Returns ``True`` if the event was a mouse button event (not necessarily a button down event - that may be tested using :meth:`~MouseEvent.ButtonDown` ).
:meth:`~wx.MouseEvent.IsPageScroll`                                              Returns ``True`` if the system has been setup to do page scrolling with the mouse wheel instead of line scrolling.
:meth:`~wx.MouseEvent.IsWheelInverted`                                           On Mac, has the user selected "Natural" scrolling in their System Preferences? Currently ``False`` on all other OS's.
:meth:`~wx.MouseEvent.Leaving`                                                   Returns ``True`` if the mouse was leaving the window.
:meth:`~wx.MouseEvent.LeftDClick`                                                Returns ``True`` if the event was a left double click.
:meth:`~wx.MouseEvent.LeftDown`                                                  Returns ``True`` if the left mouse button changed to down.
:meth:`~wx.MouseEvent.LeftUp`                                                    Returns ``True`` if the left mouse button changed to up.
:meth:`~wx.MouseEvent.Magnify`                                                   Returns ``True`` if the event is a magnify (i.e. pinch to zoom) event.
:meth:`~wx.MouseEvent.MetaDown`                                                  Returns ``True`` if the Meta key was down at the time of the event.
:meth:`~wx.MouseEvent.MiddleDClick`                                              Returns ``True`` if the event was a middle double click.
:meth:`~wx.MouseEvent.MiddleDown`                                                Returns ``True`` if the middle mouse button changed to down.
:meth:`~wx.MouseEvent.MiddleUp`                                                  Returns ``True`` if the middle mouse button changed to up.
:meth:`~wx.MouseEvent.Moving`                                                    Returns ``True`` if this was a motion event and no mouse buttons were pressed.
:meth:`~wx.MouseEvent.RightDClick`                                               Returns ``True`` if the event was a right double click.
:meth:`~wx.MouseEvent.RightDown`                                                 Returns ``True`` if the right mouse button changed to down.
:meth:`~wx.MouseEvent.RightUp`                                                   Returns ``True`` if the right mouse button changed to up.
:meth:`~wx.MouseEvent.SetColumnsPerAction`                                       
:meth:`~wx.MouseEvent.SetLinesPerAction`                                         
:meth:`~wx.MouseEvent.SetWheelAxis`                                              
:meth:`~wx.MouseEvent.SetWheelDelta`                                             
:meth:`~wx.MouseEvent.SetWheelRotation`                                          
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.MouseEvent.ColumnsPerAction`                                          See :meth:`~wx.MouseEvent.GetColumnsPerAction` and :meth:`~wx.MouseEvent.SetColumnsPerAction`
:attr:`~wx.MouseEvent.LinesPerAction`                                            See :meth:`~wx.MouseEvent.GetLinesPerAction` and :meth:`~wx.MouseEvent.SetLinesPerAction`
:attr:`~wx.MouseEvent.WheelAxis`                                                 See :meth:`~wx.MouseEvent.GetWheelAxis` and :meth:`~wx.MouseEvent.SetWheelAxis`
:attr:`~wx.MouseEvent.WheelDelta`                                                See :meth:`~wx.MouseEvent.GetWheelDelta` and :meth:`~wx.MouseEvent.SetWheelDelta`
:attr:`~wx.MouseEvent.WheelRotation`                                             See :meth:`~wx.MouseEvent.GetWheelRotation` and :meth:`~wx.MouseEvent.SetWheelRotation`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.MouseEvent(Event, MouseState)

   **Possible constructors**::

       MouseEvent(mouseEventType=wxEVT_NULL)
       
   
   This event class contains information about the events generated by
   the mouse: they include mouse buttons press and release events and
   mouse move events.



   .. method:: __init__(self, mouseEventType=wxEVT_NULL)

      Constructor.                  

      Valid event types are: 



      -  ``wxEVT_ENTER_WINDOW``       
      -  ``wxEVT_LEAVE_WINDOW``       
      -  ``wxEVT_LEFT_DOWN``       
      -  ``wxEVT_LEFT_UP``       
      -  ``wxEVT_LEFT_DCLICK``       
      -  ``wxEVT_MIDDLE_DOWN``       
      -  ``wxEVT_MIDDLE_UP``       
      -  ``wxEVT_MIDDLE_DCLICK``       
      -  ``wxEVT_RIGHT_DOWN``       
      -  ``wxEVT_RIGHT_UP``       
      -  ``wxEVT_RIGHT_DCLICK``       
      -  ``wxEVT_AUX1_DOWN``       
      -  ``wxEVT_AUX1_UP``       
      -  ``wxEVT_AUX1_DCLICK``       
      -  ``wxEVT_AUX2_DOWN``       
      -  ``wxEVT_AUX2_UP``       
      -  ``wxEVT_AUX2_DCLICK``       
      -  ``wxEVT_MOTION``       
      -  ``wxEVT_MOUSEWHEEL``       
      -  ``wxEVT_MAGNIFY``       


                 


      :param `mouseEventType`: 
      :type `mouseEventType`: wx.EventType







   .. method:: Aux1DClick(self)

      Returns ``True`` if the event was a first extra button double click.                  

      :rtype: `bool`








   .. method:: Aux1Down(self)

      Returns ``True`` if the first extra button mouse button changed to down.                  

      :rtype: `bool`








   .. method:: Aux1Up(self)

      Returns ``True`` if the first extra button mouse button changed to up.                  

      :rtype: `bool`








   .. method:: Aux2DClick(self)

      Returns ``True`` if the event was a second extra button double click.                  

      :rtype: `bool`








   .. method:: Aux2Down(self)

      Returns ``True`` if the second extra button mouse button changed to down.                  

      :rtype: `bool`








   .. method:: Aux2Up(self)

      Returns ``True`` if the second extra button mouse button changed to up.                  

      :rtype: `bool`








   .. method:: Button(self, but)

      Returns ``True`` if the event was generated by the specified button.                  

                


      :param `but`: 
      :type `but`: wx.MouseButton




      :rtype: `bool`







      .. seealso:: `MouseState.ButtoinIsDown()`   








   .. method:: ButtonDClick(self, but=MOUSE_BTN_ANY)

      If the argument is omitted, this returns ``True`` if the event was a mouse double click event.                  

      Otherwise the argument specifies which double click event was generated (see :ref:`wx.Button`  for the possible values).                  


      :param `but`: 
      :type `but`: wx.MouseButton




      :rtype: `bool`








   .. method:: ButtonDown(self, but=MOUSE_BTN_ANY)

      If the argument is omitted, this returns ``True`` if the event was a mouse button down event.                  

      Otherwise the argument specifies which button-down event was generated (see :ref:`wx.Button`  for the possible values).                  


      :param `but`: 
      :type `but`: wx.MouseButton




      :rtype: `bool`








   .. method:: ButtonUp(self, but=MOUSE_BTN_ANY)

      If the argument is omitted, this returns ``True`` if the event was a mouse button up event.                  

      Otherwise the argument specifies which button-up event was generated (see :ref:`wx.Button`  for the possible values).                  


      :param `but`: 
      :type `but`: wx.MouseButton




      :rtype: `bool`








   .. method:: Dragging(self)

      Returns ``True`` if this was a dragging event (motion while a button is depressed).                  

                

      :rtype: `bool`







      .. seealso:: :meth:`Moving`     








   .. method:: Entering(self)

      Returns ``True`` if the mouse was entering the window.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`Leaving`     








   .. method:: GetButton(self)

      Returns the mouse button which generated this event or  ``MOUSE_BTN_NONE``   if no button is involved (for mouse move, enter or leave event, for example).                   

      Otherwise  ``MOUSE_BTN_LEFT``   is returned for the left button down, up and double click events,   ``MOUSE_BTN_MIDDLE``   and   ``MOUSE_BTN_RIGHT``   for the same events for the middle and the right buttons respectively.                   

      :rtype: `int`








   .. method:: GetClickCount(self)

      Returns the number of mouse clicks for this event: 1 for a simple click, 2 for a double-click, 3 for a triple-click and so on.                  

      Currently this function is implemented only in Mac and returns -1 for the other platforms (you can still distinguish simple clicks from double-clicks as they generate different kinds of events however). 

                

      :rtype: `int`







      .. versionadded:: 2.9.0 
     








   .. method:: GetColumnsPerAction(self)

      Returns the configured number of columns (or whatever) to be scrolled per wheel action.                  

      Default value under most platforms is three. 

                

      :rtype: `int`







      .. versionadded:: 2.9.5 
     







      .. seealso:: :meth:`GetLinesPerAction`   








   .. method:: GetLinesPerAction(self)

      Returns the configured number of lines (or whatever) to be scrolled per wheel action.                  

      Default value under most platforms is three. 

                

      :rtype: `int`







      .. seealso:: :meth:`GetColumnsPerAction`     








   .. method:: GetLogicalPosition(self, dc)

      Returns the logical mouse position in pixels (i.e. translated according to the translation set for the DC, which usually indicates that the window has been scrolled).                  


      :param `dc`: 
      :type `dc`: wx.DC




      :rtype: :ref:`wx.Point`








   .. method:: GetMagnification(self)

      For magnify (pinch to zoom) events: returns the change in magnification.                  

      A value of 0 means no change, a positive value means we should enlarge (or zoom in), a negative value means we should shrink (or zoom out). 

      This method is only valid to call for  ``wxEVT_MAGNIFY``   events which are currently only generated under macOS. 

                

      :rtype: `float`







      .. versionadded:: 4.1/wxWidgets-3.1.0  
     







      .. seealso:: :meth:`Magnify`   








   .. method:: GetWheelAxis(self)

      Gets the axis the wheel operation concerns.                  

      Usually the mouse wheel is used to scroll vertically so  ``MOUSE_WHEEL_VERTICAL``   is returned but some mice (and most trackpads) also allow to use the wheel to scroll horizontally in which case   ``MOUSE_WHEEL_HORIZONTAL``   is returned. 

      Notice that before wxWidgets 2.9.4 this method returned  ``int`` .                   

      :rtype: :ref:`wx.MouseWheelAxis`








   .. method:: GetWheelDelta(self)

      Get wheel delta, normally 120.                  

      This is the threshold for action to be taken, and one such action (for example, scrolling one increment) should occur for each delta.                  

      :rtype: `int`








   .. method:: GetWheelRotation(self)

      Get wheel rotation, positive or negative indicates direction of rotation.                  

      Current devices all send an event when rotation is at least +/-WheelDelta, but finer resolution devices can be created in the future. 

      Because of this you shouldn't assume that one event is equal to 1 line, but you should be able to either do partial line scrolling or wait until several events accumulate before scrolling.                  

      :rtype: `int`








   .. method:: IsButton(self)

      Returns ``True`` if the event was a mouse button event (not necessarily a button down event - that may be tested using :meth:`ButtonDown` ).                  

      :rtype: `bool`








   .. method:: IsPageScroll(self)

      Returns ``True`` if the system has been setup to do page scrolling with the mouse wheel instead of line scrolling.                  

      :rtype: `bool`








   .. method:: IsWheelInverted(self)

      On Mac, has the user selected "Natural" scrolling in their System Preferences? Currently ``False`` on all other OS's.                  

      "Natural" scrolling means that content scrolling happens in the opposite direction, and if you are indeed scrolling content then you don't need to use this function because macOS has already inverted the scroll direction. But there can be special situations where you want the mouse wheel action to work always in the same direction and in that case you will need this function. 

                

      :rtype: `bool`







      .. versionadded:: 4.1/wxWidgets-3.1.3  
     








   .. method:: Leaving(self)

      Returns ``True`` if the mouse was leaving the window.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`Entering` .   








   .. method:: LeftDClick(self)

      Returns ``True`` if the event was a left double click.                  

      :rtype: `bool`








   .. method:: LeftDown(self)

      Returns ``True`` if the left mouse button changed to down.                  

      :rtype: `bool`








   .. method:: LeftUp(self)

      Returns ``True`` if the left mouse button changed to up.                  

      :rtype: `bool`








   .. method:: Magnify(self)

      Returns ``True`` if the event is a magnify (i.e. pinch to zoom) event.                  

      Such events are currently generated only under macOS. 

                

      :rtype: `bool`







      .. versionadded:: 4.1/wxWidgets-3.1.0  
     







      .. seealso:: :meth:`GetMagnification`   








   .. method:: MetaDown(self)

      Returns ``True`` if the Meta key was down at the time of the event.                  

      :rtype: `bool`








   .. method:: MiddleDClick(self)

      Returns ``True`` if the event was a middle double click.                  

      :rtype: `bool`








   .. method:: MiddleDown(self)

      Returns ``True`` if the middle mouse button changed to down.                  

      :rtype: `bool`








   .. method:: MiddleUp(self)

      Returns ``True`` if the middle mouse button changed to up.                  

      :rtype: `bool`








   .. method:: Moving(self)

      Returns ``True`` if this was a motion event and no mouse buttons were pressed.                  

      If any mouse button is held pressed, then this method returns ``False`` and :meth:`Dragging`   returns ``True``.                  

      :rtype: `bool`








   .. method:: RightDClick(self)

      Returns ``True`` if the event was a right double click.                  

      :rtype: `bool`








   .. method:: RightDown(self)

      Returns ``True`` if the right mouse button changed to down.                  

      :rtype: `bool`








   .. method:: RightUp(self)

      Returns ``True`` if the right mouse button changed to up.                  

      :rtype: `bool`








   .. method:: SetColumnsPerAction(self, columnsPerAction)






   .. method:: SetLinesPerAction(self, linesPerAction)






   .. method:: SetWheelAxis(self, wheelAxis)






   .. method:: SetWheelDelta(self, wheelDelta)






   .. method:: SetWheelRotation(self, wheelRotation)






   .. attribute:: ColumnsPerAction

      See :meth:`~wx.MouseEvent.GetColumnsPerAction` and :meth:`~wx.MouseEvent.SetColumnsPerAction`


   .. attribute:: LinesPerAction

      See :meth:`~wx.MouseEvent.GetLinesPerAction` and :meth:`~wx.MouseEvent.SetLinesPerAction`


   .. attribute:: WheelAxis

      See :meth:`~wx.MouseEvent.GetWheelAxis` and :meth:`~wx.MouseEvent.SetWheelAxis`


   .. attribute:: WheelDelta

      See :meth:`~wx.MouseEvent.GetWheelDelta` and :meth:`~wx.MouseEvent.SetWheelDelta`


   .. attribute:: WheelRotation

      See :meth:`~wx.MouseEvent.GetWheelRotation` and :meth:`~wx.MouseEvent.SetWheelRotation`

