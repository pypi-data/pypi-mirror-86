.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.agw.customtreectrl

.. highlight:: python



.. _wx.lib.agw.customtreectrl.TreeTextCtrl:

==========================================================================================================================================
|phoenix_title|  **wx.lib.agw.customtreectrl.TreeTextCtrl**
==========================================================================================================================================

Control used for in-place edit.

This is a subclass of :class:`lib.expando.ExpandoTextCtrl` as :class:`CustomTreeCtrl` supports multiline
text items.

:note: To add a newline character in a multiline item, press ``Shift`` + ``Enter`` as the ``Enter``
 key alone is consumed by :class:`CustomTreeCtrl` to finish the editing and ``Ctrl`` + ``Enter`` is
 consumed by the platform for tab navigation.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>TreeTextCtrl</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.agw.customtreectrl.TreeTextCtrl_inheritance.png" alt="Inheritance diagram of TreeTextCtrl" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.agw.customtreectrl.TreeTextCtrl.html" title="wx.lib.agw.customtreectrl.TreeTextCtrl" alt="" coords="35,547,305,576"/> <area shape="rect" id="node2" href="wx.lib.expando.ExpandoTextCtrl.html" title="wx.lib.expando.ExpandoTextCtrl" alt="" coords="55,469,285,499"/> <area shape="rect" id="node3" href="wx.TextCtrl.html" title="wx.TextCtrl" alt="" coords="123,392,217,421"/> <area shape="rect" id="node4" href="wx.Control.html" title="wx.Control" alt="" coords="63,315,155,344"/> <area shape="rect" id="node5" href="wx.TextEntry.html" title="wx.TextEntry" alt="" coords="179,315,286,344"/> <area shape="rect" id="node6" href="wx.Window.html" title="wx.Window" alt="" coords="60,237,157,267"/> <area shape="rect" id="node7" href="wx.WindowBase.html" title="wx.WindowBase" alt="" coords="44,160,173,189"/> <area shape="rect" id="node8" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node9" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node10" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.lib.expando.ExpandoTextCtrl`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.agw.customtreectrl.TreeTextCtrl.__init__`                         Default class constructor.
:meth:`~wx.lib.agw.customtreectrl.TreeTextCtrl.AcceptChanges`                    Accepts/rejects the changes made by the user.
:meth:`~wx.lib.agw.customtreectrl.TreeTextCtrl.Finish`                           Finish editing.
:meth:`~wx.lib.agw.customtreectrl.TreeTextCtrl.item`                             Returns the item currently edited.
:meth:`~wx.lib.agw.customtreectrl.TreeTextCtrl.OnChar`                           Handles the ``wx.EVT_CHAR`` event for :class:`TreeTextCtrl`.
:meth:`~wx.lib.agw.customtreectrl.TreeTextCtrl.OnKeyUp`                          Handles the ``wx.EVT_KEY_UP`` event for :class:`TreeTextCtrl`.
:meth:`~wx.lib.agw.customtreectrl.TreeTextCtrl.OnKillFocus`                      Handles the ``wx.EVT_KILL_FOCUS`` event for :class:`TreeTextCtrl`.
:meth:`~wx.lib.agw.customtreectrl.TreeTextCtrl.StopEditing`                      Suddenly stops the editing.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: TreeTextCtrl(ExpandoTextCtrl)

   Control used for in-place edit.
   
   This is a subclass of :class:`lib.expando.ExpandoTextCtrl` as :class:`CustomTreeCtrl` supports multiline
   text items.
   
   :note: To add a newline character in a multiline item, press ``Shift`` + ``Enter`` as the ``Enter``
    key alone is consumed by :class:`CustomTreeCtrl` to finish the editing and ``Ctrl`` + ``Enter`` is
    consumed by the platform for tab navigation.

   .. method:: __init__(self, owner, item=None)

      Default class constructor.
      For internal use: do not call it in your code!
      
      :param `owner`: the control parent (an instance of :class:`CustomTreeCtrl`);
      :param `item`: an instance of :class:`GenericTreeItem`.
      
      :raise: `Exception` when the item has an associated image but the parent
       :class:`CustomTreeCtrl` does not have a :class:`wx.ImageList` assigned.


   .. method:: AcceptChanges(self)

      Accepts/rejects the changes made by the user.
      
      :return: ``True`` if the changes to the item text have been accepted, ``False``
       if they have been rejected (i.e., vetoed by the user).


   .. method:: Finish(self)

      Finish editing. 


   .. method:: item(self)

      Returns the item currently edited.
      
      :return: An instance of :class:`GenericTreeItem`.


   .. method:: OnChar(self, event)

      Handles the ``wx.EVT_CHAR`` event for :class:`TreeTextCtrl`.
      
      :param `event`: a :class:`KeyEvent` event to be processed.


   .. method:: OnKeyUp(self, event)

      Handles the ``wx.EVT_KEY_UP`` event for :class:`TreeTextCtrl`.
      
      :param `event`: a :class:`KeyEvent` event to be processed.


   .. method:: OnKillFocus(self, event)

      Handles the ``wx.EVT_KILL_FOCUS`` event for :class:`TreeTextCtrl`.
      
      :param `event`: a :class:`FocusEvent` event to be processed.


   .. method:: StopEditing(self)

      Suddenly stops the editing. 


