//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/headerctrl.h>
%End


//---------------------------------------------------------------------------

enum 
{
    wxHD_ALLOW_REORDER,
    wxHD_ALLOW_HIDE,
    wxHD_BITMAP_ON_RIGHT,
    wxHD_DEFAULT_STYLE
};

wxEventType wxEVT_HEADER_CLICK   /PyName=wxEVT_HEADER_CLICK/;

wxEventType wxEVT_HEADER_RIGHT_CLICK   /PyName=wxEVT_HEADER_RIGHT_CLICK/;

wxEventType wxEVT_HEADER_MIDDLE_CLICK   /PyName=wxEVT_HEADER_MIDDLE_CLICK/;

wxEventType wxEVT_HEADER_DCLICK   /PyName=wxEVT_HEADER_DCLICK/;

wxEventType wxEVT_HEADER_RIGHT_DCLICK   /PyName=wxEVT_HEADER_RIGHT_DCLICK/;

wxEventType wxEVT_HEADER_MIDDLE_DCLICK   /PyName=wxEVT_HEADER_MIDDLE_DCLICK/;

wxEventType wxEVT_HEADER_SEPARATOR_DCLICK   /PyName=wxEVT_HEADER_SEPARATOR_DCLICK/;

wxEventType wxEVT_HEADER_BEGIN_RESIZE   /PyName=wxEVT_HEADER_BEGIN_RESIZE/;

wxEventType wxEVT_HEADER_RESIZING   /PyName=wxEVT_HEADER_RESIZING/;

wxEventType wxEVT_HEADER_END_RESIZE   /PyName=wxEVT_HEADER_END_RESIZE/;

wxEventType wxEVT_HEADER_BEGIN_REORDER   /PyName=wxEVT_HEADER_BEGIN_REORDER/;

wxEventType wxEVT_HEADER_END_REORDER   /PyName=wxEVT_HEADER_END_REORDER/;

wxEventType wxEVT_HEADER_DRAGGING_CANCELLED   /PyName=wxEVT_HEADER_DRAGGING_CANCELLED/;

const char* wxHeaderCtrlNameStr;

class wxHeaderCtrl : wxControl
{
    %Docstring
        HeaderCtrl()
        HeaderCtrl(parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=HD_DEFAULT_STYLE, name=HeaderCtrlNameStr)
        
        wxHeaderCtrl is the control containing the column headings which is
        usually used for display of tabular data.
    %End
    %TypeHeaderCode
        #include <wx/headerctrl.h>
    %End

public:
    wxHeaderCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxHeaderCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID winid = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxHD_DEFAULT_STYLE,
        const wxString & name = wxHeaderCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID winid = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxHD_DEFAULT_STYLE,
        const wxString & name = wxHeaderCtrlNameStr
    );
    %Docstring
        Create(parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=HD_DEFAULT_STYLE, name=HeaderCtrlNameStr) -> bool
        
        Create the header control window.
    %End

    void SetColumnCount(
        unsigned int count
    );
    %Docstring
        SetColumnCount(count)
        
        Set the number of columns in the control.
    %End

    unsigned int GetColumnCount() const;
    %Docstring
        GetColumnCount() -> unsignedint
        
        Return the number of columns in the control.
    %End

    bool IsEmpty() const;
    %Docstring
        IsEmpty() -> bool
        
        Return whether the control has any columns.
    %End

    void UpdateColumn(
        unsigned int idx
    );
    %Docstring
        UpdateColumn(idx)
        
        Update the column with the given index.
    %End

    void SetColumnsOrder(
        const wxArrayInt & order
    );
    %Docstring
        SetColumnsOrder(order)
        
        Change the columns display order.
    %End

    wxArrayInt GetColumnsOrder() const;
    %Docstring
        GetColumnsOrder() -> ArrayInt
        
        Return the array describing the columns display order.
    %End

    unsigned int GetColumnAt(
        unsigned int pos
    ) const;
    %Docstring
        GetColumnAt(pos) -> unsignedint
        
        Return the index of the column displayed at the given position.
    %End

    unsigned int GetColumnPos(
        unsigned int idx
    ) const;
    %Docstring
        GetColumnPos(idx) -> unsignedint
        
        Get the position at which this column is currently displayed.
    %End

    void ResetColumnsOrder();
    %Docstring
        ResetColumnsOrder()
        
        Reset the columns order to the natural one.
    %End

    bool ShowColumnsMenu(
        const wxPoint & pt,
        const wxString & title = wxString()
    );
    %Docstring
        ShowColumnsMenu(pt, title="") -> bool
        
        Show the popup menu allowing the user to show or hide the columns.
    %End

    void AddColumnsItems(
        wxMenu & menu,
        int idColumnsBase = 0
    );
    %Docstring
        AddColumnsItems(menu, idColumnsBase=0)
        
        Helper function appending the checkable items corresponding to all the
        columns to the given menu.
    %End

    bool ShowCustomizeDialog();
    %Docstring
        ShowCustomizeDialog() -> bool
        
        Show the column customization dialog.
    %End

    int GetColumnTitleWidth(
        const wxHeaderColumn & col
    );
    %Docstring
        GetColumnTitleWidth(col) -> int
        GetColumnTitleWidth(idx) -> int
        
        Returns width needed for given column's title.
    %End

    int GetColumnTitleWidth(
        unsigned int idx
    );

    static
    void MoveColumnInOrderArray(
        wxArrayInt & order,
        unsigned int idx,
        unsigned int pos
    );
    %Docstring
        MoveColumnInOrderArray(order, idx, pos)
        
        Helper function to manipulate the array of column indices.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ColumnCount, get=GetColumnCount, set=SetColumnCount)
    %Property(name=ColumnsOrder, get=GetColumnsOrder, set=SetColumnsOrder)

protected:
    virtual
    const wxHeaderColumn & GetColumn(
        unsigned int idx
    ) const = 0;
    %Docstring
        GetColumn(idx) -> HeaderColumn
        
        Method to be implemented by the derived classes to return the
        information for the given column.
    %End

    virtual
    void UpdateColumnVisibility(
        unsigned int idx,
        bool show
    );
    %Docstring
        UpdateColumnVisibility(idx, show)
        
        Method called when the column visibility is changed by the user.
    %End

    virtual
    void UpdateColumnsOrder(
        const wxArrayInt & order
    );
    %Docstring
        UpdateColumnsOrder(order)
        
        Method called when the columns order is changed in the customization
        dialog.
    %End

    virtual
    bool UpdateColumnWidthToFit(
        unsigned int idx,
        int widthTitle
    );
    %Docstring
        UpdateColumnWidthToFit(idx, widthTitle) -> bool
        
        Method which may be implemented by the derived classes to allow double
        clicking the column separator to resize the column to fit its
        contents.
    %End

    virtual
    void OnColumnCountChanging(
        unsigned int count
    );
    %Docstring
        OnColumnCountChanging(count)
        
        Can be overridden in the derived class to update internal data
        structures when the number of the columns in the control changes.
    %End

};  // end of class wxHeaderCtrl


class wxHeaderCtrlSimple : wxHeaderCtrl
{
    %Docstring
        HeaderCtrlSimple()
        HeaderCtrlSimple(parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=HD_DEFAULT_STYLE, name=HeaderCtrlNameStr)
        
        wxHeaderCtrlSimple is a concrete header control which can be used
        directly, without inheriting from it as you need to do when using
        wxHeaderCtrl itself.
    %End
    %TypeHeaderCode
        #include <wx/headerctrl.h>
    %End

public:
    wxHeaderCtrlSimple();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxHeaderCtrlSimple(
        wxWindow * parent   /TransferThis/,
        wxWindowID winid = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxHD_DEFAULT_STYLE,
        const wxString & name = wxHeaderCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void InsertColumn(
        const wxHeaderColumnSimple & col,
        unsigned int idx
    );
    %Docstring
        InsertColumn(col, idx)
        
        Insert the column at the given position.
    %End

    void AppendColumn(
        const wxHeaderColumnSimple & col
    );
    %Docstring
        AppendColumn(col)
        
        Append the column to the end of the control.
    %End

    void DeleteColumn(
        unsigned int idx
    );
    %Docstring
        DeleteColumn(idx)
        
        Delete the column at the given position.
    %End

    void ShowColumn(
        unsigned int idx,
        bool show = true
    );
    %Docstring
        ShowColumn(idx, show=True)
        
        Show or hide the column.
    %End

    void HideColumn(
        unsigned int idx
    );
    %Docstring
        HideColumn(idx)
        
        Hide the column with the given index.
    %End

    void ShowSortIndicator(
        unsigned int idx,
        bool sortOrder = true
    );
    %Docstring
        ShowSortIndicator(idx, sortOrder=True)
        
        Update the column sort indicator.
    %End

    void RemoveSortIndicator();
    %Docstring
        RemoveSortIndicator()
        
        Remove the sort indicator from the column being used as sort key.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End


protected:
    virtual
    int GetBestFittingWidth(
        unsigned int idx
    ) const;
    %Docstring
        GetBestFittingWidth(idx) -> int
        
        This function can be overridden in the classes deriving from this
        control instead of overriding UpdateColumnWidthToFit().
    %End

            virtual const wxHeaderColumn& GetColumn(unsigned int idx) const;
            virtual void UpdateColumnVisibility(unsigned int idx, bool show);
            virtual void UpdateColumnsOrder(const wxArrayInt& order);
            virtual bool UpdateColumnWidthToFit(unsigned int idx, int widthTitle);
            virtual void OnColumnCountChanging(unsigned int count);


};  // end of class wxHeaderCtrlSimple


class wxHeaderCtrlEvent : wxNotifyEvent
{
    %Docstring
        HeaderCtrlEvent(commandType=wxEVT_NULL, winid=0)
        HeaderCtrlEvent(event)
        
        Event class representing the events generated by wxHeaderCtrl.
    %End
    %TypeHeaderCode
        #include <wx/headerctrl.h>
    %End

public:
    wxHeaderCtrlEvent(
        wxEventType commandType = wxEVT_NULL,
        int winid = 0
    );

    wxHeaderCtrlEvent(
        const wxHeaderCtrlEvent & event
    );

    int GetColumn() const;
    %Docstring
        GetColumn() -> int
        
        Return the index of the column affected by this event.
    %End

    void SetColumn(
        int col
    );
    %Docstring
        SetColumn(col)
    %End

    int GetWidth() const;
    %Docstring
        GetWidth() -> int
        
        Return the current width of the column.
    %End

    void SetWidth(
        int width
    );
    %Docstring
        SetWidth(width)
    %End

    unsigned int GetNewOrder() const;
    %Docstring
        GetNewOrder() -> unsignedint
        
        Return the new order of the column.
    %End

    void SetNewOrder(
        unsigned int order
    );
    %Docstring
        SetNewOrder(order)
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxHeaderCtrlEvent& operator=(const wxHeaderCtrlEvent&);


    public:


    %Property(name=Column, get=GetColumn, set=SetColumn)
    %Property(name=NewOrder, get=GetNewOrder, set=SetNewOrder)
    %Property(name=Width, get=GetWidth, set=SetWidth)
};  // end of class wxHeaderCtrlEvent


%Extract(id=pycode_core)
EVT_HEADER_CLICK =              wx.PyEventBinder( wxEVT_HEADER_CLICK )
EVT_HEADER_RIGHT_CLICK =        wx.PyEventBinder( wxEVT_HEADER_RIGHT_CLICK )
EVT_HEADER_MIDDLE_CLICK =       wx.PyEventBinder( wxEVT_HEADER_MIDDLE_CLICK )
EVT_HEADER_DCLICK =             wx.PyEventBinder( wxEVT_HEADER_DCLICK )
EVT_HEADER_RIGHT_DCLICK =       wx.PyEventBinder( wxEVT_HEADER_RIGHT_DCLICK )
EVT_HEADER_MIDDLE_DCLICK =      wx.PyEventBinder( wxEVT_HEADER_MIDDLE_DCLICK )
EVT_HEADER_SEPARATOR_DCLICK =   wx.PyEventBinder( wxEVT_HEADER_SEPARATOR_DCLICK )
EVT_HEADER_BEGIN_RESIZE =       wx.PyEventBinder( wxEVT_HEADER_BEGIN_RESIZE )
EVT_HEADER_RESIZING =           wx.PyEventBinder( wxEVT_HEADER_RESIZING )
EVT_HEADER_END_RESIZE =         wx.PyEventBinder( wxEVT_HEADER_END_RESIZE )
EVT_HEADER_BEGIN_REORDER =      wx.PyEventBinder( wxEVT_HEADER_BEGIN_REORDER )
EVT_HEADER_END_REORDER =        wx.PyEventBinder( wxEVT_HEADER_END_REORDER )
EVT_HEADER_DRAGGING_CANCELLED = wx.PyEventBinder( wxEVT_HEADER_DRAGGING_CANCELLED )

# deprecated wxEVT aliases
wxEVT_COMMAND_HEADER_CLICK               = wxEVT_HEADER_CLICK
wxEVT_COMMAND_HEADER_RIGHT_CLICK         = wxEVT_HEADER_RIGHT_CLICK
wxEVT_COMMAND_HEADER_MIDDLE_CLICK        = wxEVT_HEADER_MIDDLE_CLICK
wxEVT_COMMAND_HEADER_DCLICK              = wxEVT_HEADER_DCLICK
wxEVT_COMMAND_HEADER_RIGHT_DCLICK        = wxEVT_HEADER_RIGHT_DCLICK
wxEVT_COMMAND_HEADER_MIDDLE_DCLICK       = wxEVT_HEADER_MIDDLE_DCLICK
wxEVT_COMMAND_HEADER_SEPARATOR_DCLICK    = wxEVT_HEADER_SEPARATOR_DCLICK
wxEVT_COMMAND_HEADER_BEGIN_RESIZE        = wxEVT_HEADER_BEGIN_RESIZE
wxEVT_COMMAND_HEADER_RESIZING            = wxEVT_HEADER_RESIZING
wxEVT_COMMAND_HEADER_END_RESIZE          = wxEVT_HEADER_END_RESIZE
wxEVT_COMMAND_HEADER_BEGIN_REORDER       = wxEVT_HEADER_BEGIN_REORDER
wxEVT_COMMAND_HEADER_END_REORDER         = wxEVT_HEADER_END_REORDER
wxEVT_COMMAND_HEADER_DRAGGING_CANCELLED  = wxEVT_HEADER_DRAGGING_CANCELLED

%End


//---------------------------------------------------------------------------

