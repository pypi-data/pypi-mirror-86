//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _propgrid.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxPGPropArgCls
{
    %Docstring
        PGPropArgCls(property)
        PGPropArgCls(str)
        PGPropArgCls(id)
    %End
    %TypeHeaderCode
        #include <wx/propgrid/propgridiface.h>
    %End

public:
    wxPGPropArgCls(
        const wxPGProperty * property
    );

    wxPGPropArgCls(const wxString& str)   /NoDerived/;
    %MethodCode
        PyErr_Clear();
        sipCpp = _wxPGPropArgCls_ctor(str);
    %End
    %TypeCode
    wxPGPropArgCls* _wxPGPropArgCls_ctor(const wxString* str)
    {
        wxString* name = new wxString(*str);
        return new wxPGPropArgCls(name, true);
    }
    %End

    wxPGPropArgCls(
        const wxPGPropArgCls & id
    );

    ~wxPGPropArgCls();

    wxPGProperty * GetPtr() const;
    %Docstring
        GetPtr() -> PGProperty
        GetPtr(iface) -> PGProperty
    %End

    wxPGProperty * GetPtr(
        const wxPropertyGridInterface * iface
    ) const;

    wxPGProperty * GetPtr0() const;
    %Docstring
        GetPtr0() -> PGProperty
    %End

    bool HasName() const;
    %Docstring
        HasName() -> bool
    %End

    const wxString & GetName() const;
    %Docstring
        GetName() -> String
    %End

    public:


    %Property(name=Name, get=GetName)
    %Property(name=Ptr, get=GetPtr)
    %Property(name=Ptr0, get=GetPtr0)
    %ConvertToTypeCode
        // Code to test a PyObject for compatibility with wxPGPropArgCls
        if (!sipIsErr) {
            if (sipCanConvertToType(sipPy, sipType_wxPGPropArgCls, SIP_NO_CONVERTORS))
                return TRUE;
            if (PyBytes_Check(sipPy) || PyUnicode_Check(sipPy))
                return TRUE;
            if (sipPy == Py_None)
                return TRUE;
            if (sipCanConvertToType(sipPy, sipType_wxPGProperty, SIP_NO_CONVERTORS))
                return TRUE;
            return FALSE;
        }
        
        // Code to convert a compatible PyObject to a wxPGPropArgCls
        if (PyBytes_Check(sipPy) || PyUnicode_Check(sipPy)) {
            wxString* name = new wxString(Py2wxString(sipPy));
            *sipCppPtr = new wxPGPropArgCls(name, true);
            return sipGetState(sipTransferObj);
        }
        else if (sipCanConvertToType(sipPy, sipType_wxPGProperty, SIP_NO_CONVERTORS)) {
            int state = 0;
            wxPGProperty* prop = reinterpret_cast<wxPGProperty*>(
                sipConvertToType(sipPy, sipType_wxPGProperty, sipTransferObj, SIP_NO_CONVERTORS, &state, sipIsErr));
            *sipCppPtr = new wxPGPropArgCls(prop);
            sipReleaseType(prop, sipType_wxPGProperty, state);
            return sipGetState(sipTransferObj);
        }
        else if (sipPy == Py_None) {
            *sipCppPtr = new wxPGPropArgCls(static_cast< wxPGProperty * >(NULL));
            return sipGetState(sipTransferObj);
        }
        else {
            // It's already a wxPGPropArgCls, just fetch the pointer and return
            *sipCppPtr = reinterpret_cast<wxPGPropArgCls*>(sipConvertToType(
                sipPy, sipType_wxPGPropArgCls, sipTransferObj,
                SIP_NO_CONVERTORS, 0, sipIsErr));
            return 0; // not a new instance
        }
    %End
};  // end of class wxPGPropArgCls


class wxPropertyGridInterface   /Abstract/
{
    %Docstring
        Most of the shared property manipulation interface shared by
        wxPropertyGrid, wxPropertyGridPage, and wxPropertyGridManager is
        defined in this class.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/propgridiface.h>
    %End

public:
    enum EditableStateFlags
    {
        SelectionState,
        ExpandedState,
        ScrollPosState,
        PageState,
        SplitterPosState,
        DescBoxState,
        AllStates    
    };

    virtual
    ~wxPropertyGridInterface();

    wxPropertyGridIterator GetIterator(
        int flags = wxPG_ITERATE_DEFAULT,
        wxPGProperty * firstProp = NULL
    );
    %Docstring
        GetIterator(flags=PG_ITERATE_DEFAULT, firstProp=None) -> PropertyGridIterator
        GetIterator(flags, startPos) -> PropertyGridIterator
        
        Returns iterator class instance.
    %End

    wxPropertyGridIterator GetIterator(
        int flags,
        int startPos
    );

    wxPGProperty * GetFirst(
        int flags = wxPG_ITERATE_ALL
    );
    %Docstring
        GetFirst(flags=PG_ITERATE_ALL) -> PGProperty
        
        Returns id of first item that matches given criteria.
    %End

    wxPGProperty * Append(
        wxPGProperty * property   /Transfer/
    );
    %Docstring
        Append(property) -> PGProperty
        
        Appends property to the list.
    %End

    wxPGProperty * AppendIn(
        const wxPGPropArgCls & id,
        wxPGProperty * newProperty   /Transfer/
    );
    %Docstring
        AppendIn(id, newProperty) -> PGProperty
        
        Same as Append(), but appends under given parent property.
    %End

    void BeginAddChildren(
        const wxPGPropArgCls & id
    );
    %Docstring
        BeginAddChildren(id)
        
        In order to add new items into a property with private children (for
        instance, wxFlagsProperty), you need to call this method.
    %End

    virtual
    void Clear() = 0;
    %Docstring
        Clear()
        
        Deletes all properties.
    %End

    bool ClearSelection(
        bool validation = false
    );
    %Docstring
        ClearSelection(validation=False) -> bool
        
        Clears current selection, if any.
    %End

    void ClearModifiedStatus();
    %Docstring
        ClearModifiedStatus()
        
        Resets modified status of all properties.
    %End

    bool Collapse(
        const wxPGPropArgCls & id
    );
    %Docstring
        Collapse(id) -> bool
        
        Collapses given category or property with children.
    %End

    bool CollapseAll();
    %Docstring
        CollapseAll() -> bool
        
        Collapses all items that can be collapsed.
    %End

    bool ChangePropertyValue(
        const wxPGPropArgCls & id,
        wxPGVariant newValue
    );
    %Docstring
        ChangePropertyValue(id, newValue) -> bool
        
        Changes value of a property, as if by user.
    %End

    void DeleteProperty(
        const wxPGPropArgCls & id
    );
    %Docstring
        DeleteProperty(id)
        
        Removes and deletes a property and any children.
    %End

    bool DisableProperty(
        const wxPGPropArgCls & id
    );
    %Docstring
        DisableProperty(id) -> bool
        
        Disables a property.
    %End

    bool EditorValidate();
    %Docstring
        EditorValidate() -> bool
        
        Returns true if all property grid data changes have been committed.
    %End

    bool EnableProperty(
        const wxPGPropArgCls & id,
        bool enable = true
    );
    %Docstring
        EnableProperty(id, enable=True) -> bool
        
        Enables or disables property.
    %End

    void EndAddChildren(
        const wxPGPropArgCls & id
    );
    %Docstring
        EndAddChildren(id)
        
        Called after population of property with fixed children has finished.
    %End

    bool Expand(
        const wxPGPropArgCls & id
    );
    %Docstring
        Expand(id) -> bool
        
        Expands given category or property with children.
    %End

    bool ExpandAll(
        bool expand = true
    );
    %Docstring
        ExpandAll(expand=True) -> bool
        
        Expands all items that can be expanded.
    %End

    int GetColumnProportion(
        unsigned int column
    ) const;
    %Docstring
        GetColumnProportion(column) -> int
        
        Returns auto-resize proportion of the given column.
    %End

    wxPGProperty * GetFirstChild(
        const wxPGPropArgCls & id
    );
    %Docstring
        GetFirstChild(id) -> PGProperty
        
        Returns id of first child of given property.
    %End

    wxPGProperty * GetProperty(
        const wxString & name
    ) const;
    %Docstring
        GetProperty(name) -> PGProperty
        
        Returns pointer to a property with given name (case-sensitive).
    %End

    void GetPropertiesWithFlag(
        wxArrayPGProperty * targetArr,
        wxPGProperty::FlagType flags,
        bool inverse = false,
        int iterFlags = wxPG_ITERATE_PROPERTIES|wxPG_ITERATE_HIDDEN|wxPG_ITERATE_CATEGORIES
    ) const;
    %Docstring
        GetPropertiesWithFlag(targetArr, flags, inverse=False, iterFlags=PG_ITERATE_PROPERTIES|PG_ITERATE_HIDDEN|PG_ITERATE_CATEGORIES)
        
        Adds to targetArr pointers to properties that have given flags set.
    %End

    wxPGVariant GetPropertyAttribute(
        const wxPGPropArgCls & id,
        const wxString & attrName
    ) const;
    %Docstring
        GetPropertyAttribute(id, attrName) -> PGVariant
        
        Returns value of given attribute.
    %End

    const wxPGAttributeStorage & GetPropertyAttributes(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyAttributes(id) -> PGAttributeStorage
        
        Returns map-like storage of property's attributes.
    %End

    wxColour GetPropertyBackgroundColour(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyBackgroundColour(id) -> wx.Colour
        
        Returns background colour of first cell of a property.
    %End

    wxPropertyCategory * GetPropertyCategory(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyCategory(id) -> PropertyCategory
        
        Returns pointer of property's nearest parent category.
    %End

    wxPGProperty * GetPropertyByLabel(
        const wxString & label
    ) const;
    %Docstring
        GetPropertyByLabel(label) -> PGProperty
        
        Returns first property which label matches given string.
    %End

    wxPGProperty * GetPropertyByName(
        const wxString & name
    ) const;
    %Docstring
        GetPropertyByName(name) -> PGProperty
        GetPropertyByName(name, subname) -> PGProperty
        
        Returns pointer to a property with given name (case-sensitive).
    %End

    wxPGProperty * GetPropertyByName(
        const wxString & name,
        const wxString & subname
    ) const;

    const wxPGEditor * GetPropertyEditor(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyEditor(id) -> PGEditor
        
        Returns property's editor.
    %End

    wxString GetPropertyHelpString(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyHelpString(id) -> String
        
        Returns help string associated with a property.
    %End

    wxBitmap * GetPropertyImage(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyImage(id) -> wx.Bitmap
        
        Returns property's custom value image (NULL of none).
    %End

    const wxString & GetPropertyLabel(
        const wxPGPropArgCls & id
    );
    %Docstring
        GetPropertyLabel(id) -> String
        
        Returns label of a property.
    %End

    wxString GetPropertyName(
        wxPGProperty * property
    );
    %Docstring
        GetPropertyName(property) -> String
        
        Returns property's name, by which it is globally accessible.
    %End

    wxPGProperty * GetPropertyParent(
        const wxPGPropArgCls & id
    );
    %Docstring
        GetPropertyParent(id) -> PGProperty
        
        Returns parent item of a property.
    %End

    wxColour GetPropertyTextColour(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyTextColour(id) -> wx.Colour
        
        Returns text colour of first cell of a property.
    %End

    wxValidator * GetPropertyValidator(
        const wxPGPropArgCls & id
    );
    %Docstring
        GetPropertyValidator(id) -> wx.Validator
        
        Returns validator of a property as a reference, which you can pass to
        any number of SetPropertyValidator.
    %End

    wxPGVariant GetPropertyValue(
        const wxPGPropArgCls & id
    );
    %Docstring
        GetPropertyValue(id) -> PGVariant
        
        Returns property's value as wxVariant.
    %End

    wxArrayInt GetPropertyValueAsArrayInt(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyValueAsArrayInt(id) -> ArrayInt
        
        Return's property's value as wxArrayInt.
    %End

    wxArrayString GetPropertyValueAsArrayString(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyValueAsArrayString(id) -> ArrayString
        
        Returns property's value as wxArrayString.
    %End

    bool GetPropertyValueAsBool(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyValueAsBool(id) -> bool
        
        Returns property's value as bool.
    %End

    wxDateTime GetPropertyValueAsDateTime(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyValueAsDateTime(id) -> wx.DateTime
        
        Return's property's value as wxDateTime.
    %End

    double GetPropertyValueAsDouble(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyValueAsDouble(id) -> double
        
        Returns property's value as double-precision floating point number.
    %End

    int GetPropertyValueAsInt(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyValueAsInt(id) -> int
        
        Returns property's value as integer.
    %End

    long GetPropertyValueAsLong(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyValueAsLong(id) -> long
        
        Returns property's value as integer.
    %End

    wxLongLong_t GetPropertyValueAsLongLong(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyValueAsLongLong(id) -> LongLong_t
        
        Returns property's value as native signed 64-bit integer.
    %End

    wxString GetPropertyValueAsString(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyValueAsString(id) -> String
        
        Returns property's value as wxString.
    %End

    unsigned long GetPropertyValueAsULong(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyValueAsULong(id) -> unsignedlong
        
        Returns property's value as unsigned integer.
    %End

    wxULongLong_t GetPropertyValueAsULongLong(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        GetPropertyValueAsULongLong(id) -> ULongLong_t
        
        Returns property's value as native unsigned 64-bit integer.
    %End

    const wxArrayPGProperty & GetSelectedProperties() const;
    %Docstring
        GetSelectedProperties() -> ArrayPGProperty
        
        Returns list of currently selected properties.
    %End

    wxPGProperty * GetSelection() const;
    %Docstring
        GetSelection() -> PGProperty
        
        Returns currently selected property.
    %End

    virtual
    wxPGVIterator GetVIterator(
        int flags
    ) const;
    %Docstring
        GetVIterator(flags) -> PGVIterator
        
        Similar to GetIterator(), but instead returns wxPGVIterator instance,
        which can be useful for forward-iterating through arbitrary property
        containers.
    %End

    bool HideProperty(
        const wxPGPropArgCls & id,
        bool hide = true,
        int flags = wxPG_RECURSE
    );
    %Docstring
        HideProperty(id, hide=True, flags=PG_RECURSE) -> bool
        
        Hides or reveals a property.
    %End

    wxPGProperty * Insert(
        const wxPGPropArgCls & priorThis,
        wxPGProperty * newProperty   /Transfer/
    );
    %Docstring
        Insert(priorThis, newProperty) -> PGProperty
        Insert(parent, index, newProperty) -> PGProperty
        
        Inserts property to the property container.
    %End

    wxPGProperty * Insert(
        const wxPGPropArgCls & parent,
        int index,
        wxPGProperty * newProperty   /Transfer/
    );

    bool IsPropertyCategory(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        IsPropertyCategory(id) -> bool
        
        Returns true if property is a category.
    %End

    bool IsPropertyEnabled(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        IsPropertyEnabled(id) -> bool
        
        Returns true if property is enabled.
    %End

    bool IsPropertyExpanded(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        IsPropertyExpanded(id) -> bool
        
        Returns true if given property is expanded.
    %End

    bool IsPropertyModified(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        IsPropertyModified(id) -> bool
        
        Returns true if property has been modified after value set or modify
        flag clear by software.
    %End

    bool IsPropertySelected(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        IsPropertySelected(id) -> bool
        
        Returns true if property is selected.
    %End

    bool IsPropertyShown(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        IsPropertyShown(id) -> bool
        
        Returns true if property is shown (i.e.
    %End

    bool IsPropertyValueUnspecified(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        IsPropertyValueUnspecified(id) -> bool
        
        Returns true if property value is set to unspecified.
    %End

    void LimitPropertyEditing(
        const wxPGPropArgCls & id,
        bool limit = true
    );
    %Docstring
        LimitPropertyEditing(id, limit=True)
        
        Disables (limit = true) or enables (limit = false) wxTextCtrl editor
        of a property, if it is not the sole mean to edit the value.
    %End

    virtual
    void RefreshGrid(
        wxPropertyGridPageState * state = NULL
    );
    %Docstring
        RefreshGrid(state=None)
        
        If state is shown in its grid, refresh it now.
    %End

    wxPGProperty * RemoveProperty(
        const wxPGPropArgCls & id
    );
    %Docstring
        RemoveProperty(id) -> PGProperty
        
        Removes a property.
    %End

    wxPGProperty * ReplaceProperty(
        const wxPGPropArgCls & id,
        wxPGProperty * property
    );
    %Docstring
        ReplaceProperty(id, property) -> PGProperty
        
        Replaces property with id with newly created one.
    %End

    bool RestoreEditableState(
        const wxString & src,
        int restoreStates = AllStates
    );
    %Docstring
        RestoreEditableState(src, restoreStates=AllStates) -> bool
        
        Restores user-editable state.
    %End

    wxString SaveEditableState(
        int includedStates = AllStates
    ) const;
    %Docstring
        SaveEditableState(includedStates=AllStates) -> String
        
        Used to acquire user-editable state (selected property, expanded
        properties, scrolled position, splitter positions).
    %End

    bool SetColumnProportion(
        unsigned int column,
        int proportion
    );
    %Docstring
        SetColumnProportion(column, proportion) -> bool
        
        Set proportion of a auto-stretchable column.
    %End

    void SetPropertyAttribute(
        const wxPGPropArgCls & id,
        const wxString & attrName,
        wxPGVariant value,
        long argFlags = 0
    );
    %Docstring
        SetPropertyAttribute(id, attrName, value, argFlags=0)
        
        Sets an attribute for this property.
    %End

    void SetPropertyAttributeAll(
        const wxString & attrName,
        wxPGVariant value
    );
    %Docstring
        SetPropertyAttributeAll(attrName, value)
        
        Sets property attribute for all applicable properties.
    %End

    void SetPropertyBackgroundColour(
        const wxPGPropArgCls & id,
        const wxColour & colour,
        int flags = wxPG_RECURSE
    );
    %Docstring
        SetPropertyBackgroundColour(id, colour, flags=PG_RECURSE)
        
        Sets background colour of given property.
    %End

    void SetPropertyCell(
        const wxPGPropArgCls & id,
        int column,
        const wxString & text = wxEmptyString,
        const wxBitmap & bitmap = wxNullBitmap,
        const wxColour & fgCol = wxNullColour,
        const wxColour & bgCol = wxNullColour
    );
    %Docstring
        SetPropertyCell(id, column, text=wx.EmptyString, bitmap=wx.NullBitmap, fgCol=wx.NullColour, bgCol=wx.NullColour)
        
        Sets text, bitmap, and colours for given column's cell.
    %End

    void SetPropertyColoursToDefault(
        const wxPGPropArgCls & id,
        int flags = wxPG_DONT_RECURSE
    );
    %Docstring
        SetPropertyColoursToDefault(id, flags=PG_DONT_RECURSE)
        
        Resets text and background colours of given property.
    %End

    void SetPropertyEditor(
        const wxPGPropArgCls & id,
        const wxPGEditor * editor
    );
    %Docstring
        SetPropertyEditor(id, editor)
        SetPropertyEditor(id, editorName)
        
        Sets editor for a property.
    %End

    void SetPropertyEditor(
        const wxPGPropArgCls & id,
        const wxString & editorName
    );

    void SetPropertyLabel(
        const wxPGPropArgCls & id,
        const wxString & newproplabel
    );
    %Docstring
        SetPropertyLabel(id, newproplabel)
        
        Sets label of a property.
    %End

    void SetPropertyName(
        const wxPGPropArgCls & id,
        const wxString & newName
    );
    %Docstring
        SetPropertyName(id, newName)
        
        Sets name of a property.
    %End

    void SetPropertyReadOnly(
        const wxPGPropArgCls & id,
        bool set = true,
        int flags = wxPG_RECURSE
    );
    %Docstring
        SetPropertyReadOnly(id, set=True, flags=PG_RECURSE)
        
        Sets property (and, recursively, its children) to have read-only
        value.
    %End

    void SetPropertyValueUnspecified(
        const wxPGPropArgCls & id
    );
    %Docstring
        SetPropertyValueUnspecified(id)
        
        Sets property's value to unspecified.
    %End

    void SetPropertyHelpString(
        const wxPGPropArgCls & id,
        const wxString & helpString
    );
    %Docstring
        SetPropertyHelpString(id, helpString)
        
        Associates the help string with property.
    %End

    void SetPropertyImage(
        const wxPGPropArgCls & id,
        wxBitmap & bmp
    );
    %Docstring
        SetPropertyImage(id, bmp)
        
        Set wxBitmap in front of the value.
    %End

    bool SetPropertyMaxLength(
        const wxPGPropArgCls & id,
        int maxLen
    );
    %Docstring
        SetPropertyMaxLength(id, maxLen) -> bool
        
        Sets maximum length of text in property text editor.
    %End

    void SetPropertyTextColour(
        const wxPGPropArgCls & id,
        const wxColour & colour,
        int flags = wxPG_RECURSE
    );
    %Docstring
        SetPropertyTextColour(id, colour, flags=PG_RECURSE)
        
        Sets text colour of given property.
    %End

    void SetPropertyValidator(
        const wxPGPropArgCls & id,
        const wxValidator & validator
    );
    %Docstring
        SetPropertyValidator(id, validator)
        
        Sets validator of a property.
    %End

    void SetPropertyValue(
        const wxPGPropArgCls & id,
        double value   /Constrained/
    );
    %Docstring
        SetPropertyValue(id, value)
        SetPropertyValue(id, value)
        SetPropertyValue(id, value)
        SetPropertyValue(id, value)
        SetPropertyValue(id, value)
        SetPropertyValue(id, value)
        SetPropertyValue(id, value)
        SetPropertyValue(id, value)
        SetPropertyValue(id, value)
        
        Sets value (floating point) of a property.
    %End

    void SetPropertyValue(
        const wxPGPropArgCls & id,
        bool value   /Constrained/
    );

    void SetPropertyValue(
        const wxPGPropArgCls & id,
        const wxString & value
    );

    void SetPropertyValue(
        const wxPGPropArgCls & id,
        const wxArrayString & value
    );

    void SetPropertyValue(
        const wxPGPropArgCls & id,
        const wxDateTime & value
    );

    void SetPropertyValue(
        const wxPGPropArgCls & id,
        wxObject & value
    );

    void SetPropertyValue(
        const wxPGPropArgCls & id,
        const wxArrayInt & value
    );

    void SetPropertyValue(
        const wxPGPropArgCls & id,
        wxPGVariant value
    );

    void SetPropertyValue(
        const wxPGPropArgCls & id,
        long value
    );

    void SetPropertyValueString(
        const wxPGPropArgCls & id,
        const wxString & value
    );
    %Docstring
        SetPropertyValueString(id, value)
        
        Sets value (wxString) of a property.
    %End

    void SetPropVal(
        const wxPGPropArgCls & id,
        wxPGVariant & value
    );
    %Docstring
        SetPropVal(id, value)
        
        Sets value (wxVariant&) of a property.
    %End

    void SetValidationFailureBehavior(
        int vfbFlags
    );
    %Docstring
        SetValidationFailureBehavior(vfbFlags)
        
        Adjusts how wxPropertyGrid behaves when invalid value is entered in a
        property.
    %End

    void Sort(
        int flags = 0
    );
    %Docstring
        Sort(flags=0)
        
        Sorts all properties recursively.
    %End

    void SortChildren(
        const wxPGPropArgCls & id,
        int flags = 0
    );
    %Docstring
        SortChildren(id, flags=0)
        
        Sorts children of a property.
    %End

    wxPGProperty * GetPropertyByNameA(
        const wxString & name
    ) const;
    %Docstring
        GetPropertyByNameA(name) -> PGProperty
        
        GetPropertyByName() with assertion error message.
    %End

    virtual
    void RefreshProperty(
        wxPGProperty * p
    ) = 0;
    %Docstring
        RefreshProperty(p)
    %End

    static
    void InitAllTypeHandlers();
    %Docstring
        InitAllTypeHandlers()
        
        Initializes all property types.
    %End

    static
    void RegisterAdditionalEditors();
    %Docstring
        RegisterAdditionalEditors()
        
        Initializes additional property editors (SpinCtrl etc.).
    %End

    static
    void SetBoolChoices(
        const wxString & trueChoice,
        const wxString & falseChoice
    );
    %Docstring
        SetBoolChoices(trueChoice, falseChoice)
        
        Sets strings listed in the choice dropdown of a wxBoolProperty.
    %End

    static
    wxPGEditor * GetEditorByName(
        const wxString & editorName
    );
    %Docstring
        GetEditorByName(editorName) -> PGEditor
        
        Returns editor pointer of editor with given name.
    %End

};  // end of class wxPropertyGridInterface


%Extract(id=pycode_propgrid)
def _PropertyGridInterface_MapType(self, class_, factory):
    """
    Registers Python type/class to property mapping.
    
    :param `factory`: Property builder function/class.
    """
    global _type2property
    if _type2property is None:
        raise AssertionError("call only after a propertygrid or "
                             "manager instance constructed")
    _type2property[class_] = factory
PropertyGridInterface.MapType = _PropertyGridInterface_MapType
del _PropertyGridInterface_MapType
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface_DoDefaultTypeMappings(self):
    """
    Add built-in properties to the map.
    """
    import sys
    global _type2property
    if _type2property is not None:
        return
    _type2property = dict()
    
    _type2property[str] = StringProperty
    if sys.version_info.major < 2:
        _type2property[unicode] = StringProperty
    _type2property[int] = IntProperty
    _type2property[float] = FloatProperty
    _type2property[bool] = BoolProperty
    _type2property[list] = ArrayStringProperty
    _type2property[tuple] = ArrayStringProperty
    _type2property[wx.Font] = FontProperty
    _type2property[wx.Colour] = ColourProperty
    #_type2property[wx.Size] = SizeProperty
    #_type2property[wx.Point] = PointProperty
    #_type2property[wx.FontData] = FontDataProperty
PropertyGridInterface.DoDefaultTypeMappings = _PropertyGridInterface_DoDefaultTypeMappings
del _PropertyGridInterface_DoDefaultTypeMappings
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface_DoDefaultValueTypeMappings(self):
    """
    Map pg value type ids to getter methods.
    """
    global _vt2getter
    if _vt2getter is not None:
        return
    _vt2getter = dict()
PropertyGridInterface.DoDefaultValueTypeMappings = _PropertyGridInterface_DoDefaultValueTypeMappings
del _PropertyGridInterface_DoDefaultValueTypeMappings
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface_GetPropertyValues(self, dict_=None, as_strings=False, inc_attributes=False, flags=PG_ITERATE_PROPERTIES):
    """
    Returns all property values in the grid.
    
    :param `dict_`: A diftionary to fill with the property values.
        If not given, then a new one is created. The dict_ can be an
        object as well, in which case it's __dict__ is used.
    :param `as_strings`: if True, then string representations of values
        are fetched instead of native types. Useful for config and such.
    :param `inc_attributes`: if True, then property attributes are added
        in the form of ``"@<propname>@<attr>"``.
    :param `flags`: Flags to pass to the iterator. See :ref:`wx.propgrid.PG_ITERATOR_FLAGS`.
    :returns: A dictionary with values. It is always a dictionary,
        so if dict_ was an object with __dict__ attribute, then that
        attribute is returned.
    """
    if dict_ is None:
        dict_ = {}
    elif hasattr(dict_,'__dict__'):
        dict_ = dict_.__dict__
    
    getter = self.GetPropertyValue if not as_strings else self.GetPropertyValueAsString
    
    it = self.GetVIterator(flags)
    while not it.AtEnd():
        p = it.GetProperty()
        name = p.GetName()
        dict_[name] = getter(p)
    
        if inc_attributes:
            attrs = p.GetAttributes()
            if attrs and len(attrs):
                dict_['@%s@attr'%name] = attrs
    
        it.Next()
    
    return dict_
PropertyGridInterface.GetPropertyValues = _PropertyGridInterface_GetPropertyValues
del _PropertyGridInterface_GetPropertyValues
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface_SetPropertyValues(self, dict_, autofill=False):
    """
    Sets property values from a dictionary.
    
    :param `dict_`: the source of the property values to set, which can be
        either a dictionary or an object with a __dict__ attribute.
    :param `autofill`: If true, keys with not relevant properties are
        auto-created. For more info, see :method:`AutoFill`.
    
    :note:
      * Keys starting with underscore are ignored.
      * Attributes can be set with entries named like "@<propname>@<attr>".
    """
    if dict_ is None:
        dict_ = {}
    elif hasattr(dict_,'__dict__'):
        dict_ = dict_.__dict__
    attr_dicts = []
    
    def set_sub_obj(k0, dict_):
        for k,v in dict_.items():
            if k[0] != '_':
                if k.endswith('@attr'):
                    attr_dicts.append((k[1:-5],v))
                else:
                    try:
                        self.SetPropertyValue(k,v)
                    except:
                        try:
                            if autofill:
                                self._AutoFillOne(k0,k,v)
                                continue
                        except:
                            if isinstance(v,dict):
                                set_sub_obj(k,v)
                            elif hasattr(v,'__dict__'):
                                set_sub_obj(k,v.__dict__)
    
        for k,v in attr_dicts:
            p = self.GetPropertyByName(k)
            if not p:
                raise AssertionError("No such property: '%s'"%k)
            for an,av in v.items():
                p.SetAttribute(an, av)
    
    
    cur_page = False
    is_manager = isinstance(self, PropertyGridManager)
    
    try:
        set_sub_obj(self.GetGrid().GetRoot(), dict_)
    except:
        import traceback
        traceback.print_exc()
    
    self.Refresh()
PropertyGridInterface.SetPropertyValues = _PropertyGridInterface_SetPropertyValues
del _PropertyGridInterface_SetPropertyValues
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface__AutoFillMany(self,cat,dict_):
    for k,v in dict_.items():
        self._AutoFillOne(cat,k,v)
PropertyGridInterface._AutoFillMany = _PropertyGridInterface__AutoFillMany
del _PropertyGridInterface__AutoFillMany
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface__AutoFillOne(self,cat,k,v):
    global _type2property
    factory = _type2property.get(v.__class__,None)
    if factory:
        self.AppendIn(cat, factory(k,k,v))
    elif hasattr(v,'__dict__'):
        cat2 = self.AppendIn(cat, PropertyCategory(k))
        self._AutoFillMany(cat2, v.__dict__)
    elif isinstance(v, dict):
        cat2 = self.AppendIn(cat, PropertyCategory(k))
        self._AutoFillMany(cat2, v)
    elif not k.startswith('_'):
        raise AssertionError("member '%s' is of unregistered type/"
                             "class '%s'"%(k,v.__class__))
PropertyGridInterface._AutoFillOne = _PropertyGridInterface__AutoFillOne
del _PropertyGridInterface__AutoFillOne
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface_AutoFill(self, obj, parent=None):
    """
    "Clears properties and re-fills to match members and values of
    the given object or dictionary obj.
    """
    self.edited_objects[parent] = obj
    
    cur_page = False
    is_manager = isinstance(self, PropertyGridManager)
    
    if not parent:
        if is_manager:
            page = self.GetCurrentPage()
            page.Clear()
            parent = page.GetRoot()
        else:
            self.Clear()
            parent = self.GetGrid().GetRoot()
    else:
        it = self.GetIterator(PG_ITERATE_PROPERTIES, parent)
        it.Next()  # Skip the parent
        while not it.AtEnd():
            p = it.GetProperty()
            if not p.IsSomeParent(parent):
                break
    
            self.DeleteProperty(p)
    
            name = p.GetName()
            it.Next()
    
    if not is_manager or page == self.GetCurrentPage():
        self.Freeze()
        cur_page = True
    
    try:
        self._AutoFillMany(parent,obj.__dict__)
    except:
        import traceback
        traceback.print_exc()
    
    if cur_page:
        self.Thaw()
PropertyGridInterface.AutoFill = _PropertyGridInterface_AutoFill
del _PropertyGridInterface_AutoFill
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface_RegisterEditor(self, editor, editorName=None):
    """
    Register a new editor, either an instance or a class.
    """
    if not isinstance(editor, PGEditor):
        editor = editor()
    if not editorName:
        editorName = editor.__class__.__name__
    try:
        self._editor_instances.append(editor)
    except:
        self._editor_instances = [editor]
    return PropertyGrid.DoRegisterEditorClass(editor, editorName)
PropertyGridInterface.RegisterEditor = _PropertyGridInterface_RegisterEditor
del _PropertyGridInterface_RegisterEditor
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface_GetPropertyClientData(self, p):
    if isinstance(p, str):
        p = self.GetPropertyByName(p)
    return p.GetClientData()
PropertyGridInterface.GetPropertyClientData = _PropertyGridInterface_GetPropertyClientData
del _PropertyGridInterface_GetPropertyClientData
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface_SetPropertyClientData(self, p, data):
    if isinstance(p, str):
        p = self.GetPropertyByName(p)
    return p.SetClientData(data)
PropertyGridInterface.SetPropertyClientData = _PropertyGridInterface_SetPropertyClientData
del _PropertyGridInterface_SetPropertyClientData
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface_GetPyIterator(self, flags=PG_ITERATE_DEFAULT, firstProperty=None):
    """
    Returns a pythonic property iterator for a single :ref:`PropertyGrid`
    or page in :ref:`PropertyGridManager`. Arguments are same as for
    :ref:`GetIterator`.
    
    The following example demonstrates iterating absolutely all items in
    a single grid::
    
        iterator = propGrid.GetPyIterator(wx.propgrid.PG_ITERATE_ALL)
        for prop in iterator:
            print(prop)
    
    :see: `wx.propgrid.PropertyGridInterface.Properties`
          `wx.propgrid.PropertyGridInterface.Items`
    """
    it = self.GetIterator(flags, firstProperty)
    while not it.AtEnd():
        yield it.GetProperty()
        it.Next()
PropertyGridInterface.GetPyIterator = _PropertyGridInterface_GetPyIterator
del _PropertyGridInterface_GetPyIterator
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface_GetPyVIterator(self, flags=PG_ITERATE_DEFAULT):
    """
    Similar to :ref:`GetVIterator` but returns a pythonic iterator.
    """
    it = self.GetVIterator(flags)
    while not it.AtEnd():
        yield it.GetProperty()
        it.Next()
PropertyGridInterface.GetPyVIterator = _PropertyGridInterface_GetPyVIterator
del _PropertyGridInterface_GetPyVIterator
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface__Properties(self):
    """
    This attribute is a pythonic iterator over all properties in
    this `PropertyGrid` property container. It will only skip
    categories and private child properties. Usage is simple::
    
        for prop in propGrid.Properties:
            print(prop)
    
    :see: `wx.propgrid.PropertyGridInterface.Items`
          `wx.propgrid.PropertyGridInterface.GetPyIterator`
    """
    it = self.GetIterator(PG_ITERATE_NORMAL)
    while not it.AtEnd():
        yield it.GetProperty()
        it.Next()
PropertyGridInterface._Properties = _PropertyGridInterface__Properties
del _PropertyGridInterface__Properties
%End

%Extract(id=pycode_propgrid)
PropertyGridInterface.Properties = property(PropertyGridInterface._Properties)
%End

%Extract(id=pycode_propgrid)
def _PropertyGridInterface__Items(self):
    """
    This attribute is a pythonic iterator over all items in this
    `PropertyGrid` property container, excluding only private child
    properties. Usage is simple::
    
        for prop in propGrid.Items:
            print(prop)
    
    :see: `wx.propgrid.PropertyGridInterface.Properties`
          `wx.propgrid.PropertyGridInterface.GetPyVIterator`
    """
    it = self.GetVIterator(PG_ITERATE_NORMAL | PG_ITERATE_CATEGORIES)
    while not it.AtEnd():
        yield it.GetProperty()
        it.Next()
PropertyGridInterface._Items = _PropertyGridInterface__Items
del _PropertyGridInterface__Items
%End

%Extract(id=pycode_propgrid)
PropertyGridInterface.Items = property(PropertyGridInterface._Items)
%End

%Extract(id=pycode_propgrid)
_type2property = None
_vt2getter = None

%End

%Extract(id=pycode_propgrid)
PropertyGridInterface.GetValues = PropertyGridInterface.GetPropertyValues
PropertyGridInterface.SetValues = PropertyGridInterface.SetPropertyValues

%End

class wxArrayPGProperty
{
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->GetCount();
    %End

    wxPGProperty* __getitem__(long index);
    %MethodCode
        if (0 > index)
            index += sipCpp->GetCount();

        if ((index < sipCpp->GetCount()) && (0 <= index)) {
            sipRes = sipCpp->Item(index);
        }
        else {
            wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
            sipError = sipErrorFail;
        }
    %End

    int __contains__(wxPGProperty* obj);
    %MethodCode
        int idx = sipCpp->Index(obj, false);
        sipRes = idx != wxNOT_FOUND;
    %End

    void append(wxPGProperty* obj);
    %MethodCode
        sipCpp->Add(obj);
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxPGProperty* obj);
    %MethodCode
        int idx = sipCpp->Index(obj, false);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
            }
        sipRes = idx;
    %End
};

%Extract(id=pycode_propgrid)
def _ArrayPGProperty___repr__(self):
    return "ArrayPGProperty: " + repr(list(self))
ArrayPGProperty.__repr__ = _ArrayPGProperty___repr__
del _ArrayPGProperty___repr__
%End



//---------------------------------------------------------------------------

