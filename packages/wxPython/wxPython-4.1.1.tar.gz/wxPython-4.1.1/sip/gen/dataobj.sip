//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxDataFormat
{
    %Docstring
        DataFormat(format=DF_INVALID)
        DataFormat(format)
        
        A wxDataFormat is an encapsulation of a platform-specific format
        handle which is used by the system for the clipboard and drag and drop
        operations.
    %End
    %TypeHeaderCode
        #include <wx/dataobj.h>
    %End

public:
    wxDataFormat(
        wxDataFormatId format = wxDF_INVALID
    );

    wxDataFormat(
        const wxString & format
    );

    wxString GetId() const;
    %Docstring
        GetId() -> String
        
        Returns the name of a custom format (this function will fail for a
        standard format).
    %End

    wxDataFormatId GetType() const;
    %Docstring
        GetType() -> DataFormatId
        
        Returns the platform-specific number identifying the format.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataFormat_GetType(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxDataFormatId _wxDataFormat_GetType(const wxDataFormat* self)
    {
        return static_cast<wxDataFormatId>(self->GetType());
    }
    %End

    void SetId(
        const wxString & format
    );
    %Docstring
        SetId(format)
        
        Sets the format to be the custom format identified by the given name.
    %End

    void SetType(
        wxDataFormatId type
    );
    %Docstring
        SetType(type)
        
        Sets the format to the given value, which should be one of wxDF_XXX
        constants.
    %End

    bool operator!=(
        const wxDataFormat & format
    ) const;

    bool operator!=(
        wxDataFormatId format
    ) const;

    bool operator==(
        const wxDataFormat & format
    ) const;

    bool operator==(
        wxDataFormatId format
    ) const;

    public:


    %Property(name=Id, get=GetId, set=SetId)
    %Property(name=Type, get=GetType, set=SetType)
};  // end of class wxDataFormat


const wxDataFormat wxFormatInvalid;

class wxDataObject
{
    %Docstring
        DataObject()
        
        A wxDataObject represents data that can be copied to or from the
        clipboard, or dragged and dropped.
    %End
    %TypeHeaderCode
        #include <wx/dataobj.h>
    %End

public:
    enum Direction
    {
        Get,
        Set,
        Both    
    };

    wxDataObject();

    virtual
    ~wxDataObject();

    virtual PyObject* GetAllFormats(wxDataObject::Direction dir=wxDataObject::Get) const = 0 [ void (wxDataFormat* formats, Direction dir) ];
    %Docstring
        GetAllFormats(dir=Get)
        
        Returns a list of wx.DataFormat objects which this data object
        supports transferring in the given direction.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataObject_GetAllFormats(sipCpp, dir);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        // VirtualCatcherCode for wx.DataObject.GetAllFormats
        PyObject *resObj = sipCallMethod(0,sipMethod,"F",dir,sipType_wxDataObject_Direction);
        if (resObj) {
            if (!PySequence_Check(resObj)) {
                PyErr_SetString(PyExc_TypeError, "Should return a list of wx.DataFormat objects.");
                // or this?  sipBadCatcherResult(sipMethod);
            }
            else {
                Py_ssize_t len = PySequence_Length(resObj);
                Py_ssize_t idx;
                for (idx=0; idx<len; idx+=1) {
                    PyObject* item = PySequence_GetItem(resObj, idx);
                    if (! sipCanConvertToType(item, sipType_wxDataFormat, SIP_NOT_NONE)) {
                        PyErr_SetString(PyExc_TypeError, "List of wx.DataFormat objects expected.");
                        // or this?  sipBadCatcherResult(sipMethod);
                        Py_DECREF(item);
                        break;
                    }
                    wxDataFormat* fmt;
                    int err = 0;
                    fmt = (wxDataFormat*)sipConvertToType(
                                            item, sipType_wxDataFormat, NULL,
                                            SIP_NOT_NONE|SIP_NO_CONVERTORS, NULL, &err);
                    formats[idx] = *fmt;
                    Py_DECREF(item);
                }
            }
        }
        if (PyErr_Occurred())
            PyErr_Print();
        Py_XDECREF(resObj);
    %End
    %TypeCode
    PyObject* _wxDataObject_GetAllFormats(const wxDataObject* self, wxDataObject::Direction dir)
    {
        size_t count = self->GetFormatCount(dir);
        wxDataFormat* formats = new wxDataFormat[count];
        self->GetAllFormats(formats, dir);
        wxPyThreadBlocker blocker;
        PyObject* list = PyList_New(count);
        for (size_t i=0; i<count; i++) {
            wxDataFormat* format = new wxDataFormat(formats[i]);
            PyObject* obj = wxPyConstructObject((void*)format, wxT("wxDataFormat"), true);
            PyList_SET_ITEM(list, i, obj); // PyList_SET_ITEM steals a reference
        }
        delete [] formats;
        return list;
    }
    %End

    virtual bool GetDataHere(const wxDataFormat& format,  wxPyBuffer* buf) const = 0 [ bool (const wxDataFormat& format, void* buf) ];
    %Docstring
        GetDataHere(format, buf) -> bool
        
        Copies this data object's data in the requested format to the buffer
        provided.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataObject_GetDataHere(sipCpp, format, buf);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        // Call self.GetDataSize() to find out how big the buffer should be
        PyObject* self = NULL;
        PyObject* fmtObj = NULL;
        PyObject* sizeObj = NULL;
        PyObject* buffer = NULL;
        PyObject* resObj = NULL;
        Py_ssize_t size = 0;
        
        self = wxPyMethod_Self(sipMethod); // this shouldn't fail, and the reference is borrowed
        
        fmtObj = wxPyConstructObject((void*)&format, "wxDataFormat", false);
        if (!fmtObj) goto error;
        sizeObj = PyObject_CallMethod(self, "GetDataSize", "(O)", fmtObj, NULL);
        if (!sizeObj) goto error;
        size = wxPyInt_AsSsize_t(sizeObj);
        
        // Make a buffer that big using the pointer passed to us, and then
        // call the Python method.
        buffer = wxPyMakeBuffer(buf, size);
        resObj = sipCallMethod(0, sipMethod, "SS", fmtObj, buffer);
        
        if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
            PyErr_Print();
        
        error:
        Py_XDECREF(resObj);
        Py_XDECREF(buffer);
        Py_XDECREF(fmtObj);
        Py_XDECREF(sizeObj);
    %End
    %TypeCode
    bool _wxDataObject_GetDataHere(const wxDataObject* self, const wxDataFormat* format, wxPyBuffer* buf)
    {
        if (!buf->checkSize(self->GetDataSize(*format)))
            return false;
        return self->GetDataHere(*format, buf->m_ptr);
    }
    %End

    virtual
    size_t GetDataSize(
        const wxDataFormat & format
    ) const = 0;
    %Docstring
        GetDataSize(format) -> size_t
        
        Returns the data size of the given format format.
    %End

    virtual
    size_t GetFormatCount(
        Direction dir = Get
    ) const = 0;
    %Docstring
        GetFormatCount(dir=Get) -> size_t
        
        Returns the number of available formats for rendering or setting the
        data.
    %End

    virtual
    wxDataFormat GetPreferredFormat(
        Direction dir = Get
    ) const = 0;
    %Docstring
        GetPreferredFormat(dir=Get) -> DataFormat
        
        Returns the preferred format for either rendering the data (if dir is
        Get, its default value) or for setting it.
    %End

    virtual bool SetData(const wxDataFormat& format,  wxPyBuffer* buf) [ bool (const wxDataFormat& format, size_t len, const void* buf) ];
    %Docstring
        SetData(format, buf) -> bool
        
        Copies data from the provided buffer to this data object for the
        specified format.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataObject_SetData(sipCpp, format, buf);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        PyObject* buffer = wxPyMakeBuffer((void*)buf, len);
        PyObject *resObj = sipCallMethod(0,sipMethod,"NS",
                               new wxDataFormat(format),sipType_wxDataFormat,NULL,
                               buffer);
        if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
            PyErr_Print();
        Py_XDECREF(resObj);
        Py_XDECREF(buffer);
    %End
    %TypeCode
    bool _wxDataObject_SetData(wxDataObject* self, const wxDataFormat* format, wxPyBuffer* buf)
    {
        return self->SetData(*format, buf->m_len, buf->m_ptr);
    }
    %End

    bool IsSupported(
        const wxDataFormat & format,
        Direction dir = Get
    ) const;
    %Docstring
        IsSupported(format, dir=Get) -> bool
        
        Returns true if this format is supported.
    %End

    private:
        wxDataObject(const wxDataObject&);


    public:


    void _testGetAllFormats();
    %Docstring
        _testGetAllFormats()
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxDataObject__testGetAllFormats(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxDataObject__testGetAllFormats(wxDataObject* self)
    {
        size_t count = self->GetFormatCount();
        wxDataFormat* fmts = new wxDataFormat[count];
        self->GetAllFormats(fmts);
    }
    %End

    public:


    %Property(name=AllFormats, get=GetAllFormats)
    %Property(name=DataHere, get=GetDataHere)
    %Property(name=FormatCount, get=GetFormatCount)
    %Property(name=PreferredFormat, get=GetPreferredFormat)
};  // end of class wxDataObject


class wxDataObjectSimple : wxDataObject
{
    %Docstring
        DataObjectSimple(format=FormatInvalid)
        DataObjectSimple(formatName)
        
        This is the simplest possible implementation of the wxDataObject
        class.
    %End
    %TypeHeaderCode
        #include <wx/dataobj.h>
    %End

public:
    wxDataObjectSimple(
        const wxDataFormat & format = wxFormatInvalid
    );

    wxDataObjectSimple(const wxString& formatName)   /NoDerived/;
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipCpp = new sipwxDataObjectSimple(wxDataFormat(*formatName));
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End

    virtual bool GetDataHere(wxPyBuffer* buf) const [ bool (void* buf) ];
    %Docstring
        GetDataHere(buf) -> bool
        
        Copies this data object's data bytes to the given buffer
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataObjectSimple_GetDataHere(sipCpp, buf);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        // Call self.GetDataSize() to find out how big the buffer should be
        PyObject* self = NULL;
        PyObject* sizeObj = NULL;
        PyObject* buffer = NULL;
        PyObject* resObj = NULL;
        Py_ssize_t size = 0;
        
        self = wxPyMethod_Self(sipMethod);
        
        sizeObj = PyObject_CallMethod(self, "GetDataSize", "", NULL);
        if (!sizeObj) goto error;
        size = wxPyInt_AsSsize_t(sizeObj);
        
        // Make a buffer that big using the pointer passed to us, and then
        // call the Python method.
        buffer = wxPyMakeBuffer(buf, size);
        resObj = sipCallMethod(0, sipMethod, "S", buffer);
        
        if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
            PyErr_Print();
        
        error:
        Py_XDECREF(resObj);
        Py_XDECREF(buffer);
        Py_XDECREF(sizeObj);
    %End
    %TypeCode
    bool _wxDataObjectSimple_GetDataHere(const wxDataObjectSimple* self, wxPyBuffer* buf)
    {
        if (!buf->checkSize(self->GetDataSize()))
            return false;
        return self->GetDataHere(buf->m_ptr);
    }
    %End

    virtual
    size_t GetDataSize() const;
    %Docstring
        GetDataSize() -> size_t
        
        Gets the size of our data.
    %End

    const wxDataFormat & GetFormat() const;
    %Docstring
        GetFormat() -> DataFormat
        
        Returns the (one and only one) format supported by this object.
    %End

    virtual bool SetData(wxPyBuffer* buf) [ bool (size_t len, const void* buf) ];
    %Docstring
        SetData(buf) -> bool
        SetData(format, buf) -> bool
        
        Copies data from the provided buffer to this data object.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataObjectSimple_SetData(sipCpp, buf);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        PyObject* buffer = wxPyMakeBuffer((void*)buf, len);
        PyObject *resObj = sipCallMethod(0,sipMethod,"S",buffer);
        if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
            PyErr_Print();
        Py_XDECREF(resObj);
        Py_XDECREF(buffer);
    %End
    %TypeCode
    bool _wxDataObjectSimple_SetData(wxDataObjectSimple* self, wxPyBuffer* buf)
    {
        return self->SetData(buf->m_len, buf->m_ptr);
    }
    %End

    virtual bool SetData(const wxDataFormat& format,  wxPyBuffer* buf) [ bool (const wxDataFormat& format, size_t len, const void* buf) ];
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataObjectSimple_SetData(sipCpp, format, buf);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        wxDataObjectSimple* self = static_cast<wxDataObjectSimple*>(wxPyGetCppPtr(sipPySelf));
        sipRes = self->wxDataObjectSimple::SetData(format, len, buf);
    %End
    %TypeCode
    bool _wxDataObjectSimple_SetData(wxDataObjectSimple* self, const wxDataFormat* format, wxPyBuffer* buf)
    {
        return self->SetData(*format, buf->m_len, buf->m_ptr);
    }
    %End

    void SetFormat(
        const wxDataFormat & format
    );
    %Docstring
        SetFormat(format)
        
        Sets the supported format.
    %End

    virtual PyObject* GetAllFormats(wxDataObject::Direction dir=wxDataObject::Get) const [ void (wxDataFormat* formats, Direction dir) ];
    %Docstring
        GetAllFormats(dir=DataObject.Get)
        
        Returns a list of wx.DataFormat objects which this data object
        supports transferring in the given direction.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataObjectSimple_GetAllFormats(sipCpp, dir);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxDataObjectSimple_GetAllFormats(const wxDataObjectSimple* self, wxDataObject::Direction dir)
    {
        size_t count = self->GetFormatCount(dir);
        wxDataFormat* formats = new wxDataFormat[count];
        self->GetAllFormats(formats, dir);
        wxPyThreadBlocker blocker;
        PyObject* list = PyList_New(count);
        for (size_t i=0; i<count; i++) {
            wxDataFormat* format = new wxDataFormat(formats[i]);
            PyObject* obj = wxPyConstructObject((void*)format, wxT("wxDataFormat"), true);
            PyList_SET_ITEM(list, i, obj); // PyList_SET_ITEM steals a reference
        }
        delete [] formats;
        return list;
    }
    %End

    virtual size_t GetFormatCount(Direction dir = Get) const;


            virtual wxDataFormat GetPreferredFormat(Direction dir = Get) const;
            private:
            virtual size_t GetDataSize(const wxDataFormat& format) const;
            virtual bool   GetDataHere(const wxDataFormat& format, void* buf) const;
            public:


    public:


    %Property(name=AllFormats, get=GetAllFormats)
    %Property(name=DataHere, get=GetDataHere)
    %Property(name=DataSize, get=GetDataSize)
    %Property(name=Format, get=GetFormat, set=SetFormat)
};  // end of class wxDataObjectSimple


class wxCustomDataObject : wxDataObjectSimple
{
    %Docstring
        CustomDataObject(format=FormatInvalid)
        CustomDataObject(formatName)
        
        wxCustomDataObject is a specialization of wxDataObjectSimple for some
        application-specific data in arbitrary (either custom or one of the
        standard ones).
    %End
    %TypeHeaderCode
        #include <wx/dataobj.h>
    %End

public:
    wxCustomDataObject(
        const wxDataFormat & format = wxFormatInvalid
    );

    wxCustomDataObject(const wxString& formatName)   /NoDerived/;
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipCpp = new sipwxCustomDataObject(wxDataFormat(*formatName));
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End

    ~wxCustomDataObject();

    PyObject* GetData() const;
    %Docstring
        GetData() -> PyObject
        
        Returns a reference to the data buffer.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxCustomDataObject_GetData(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxCustomDataObject_GetData(const wxCustomDataObject* self)
    {
        return wxPyMakeBuffer(self->GetData(), self->GetSize());
    }
    %End

    size_t GetSize() const;
    %Docstring
        GetSize() -> size_t
        
        Returns the data size in bytes.
    %End

    virtual bool SetData(wxPyBuffer* buf) [ bool (size_t len, const void* buf) ];
    %Docstring
        SetData(buf) -> bool
        SetData(format, buf) -> bool
        
        Copies data from the provided buffer to this data object's buffer
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = (sipSelfWasArg ? sipCpp-> ::wxCustomDataObject::SetData(buf->m_len, buf->m_ptr) : sipCpp->SetData(buf->m_len, buf->m_ptr));
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End

    virtual PyObject* GetAllFormats(wxDataObject::Direction dir=wxDataObject::Get) const [ void (wxDataFormat* formats, Direction dir) ];
    %Docstring
        GetAllFormats(dir=DataObject.Get)
        
        Returns a list of wx.DataFormat objects which this data object
        supports transferring in the given direction.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxCustomDataObject_GetAllFormats(sipCpp, dir);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxCustomDataObject_GetAllFormats(const wxCustomDataObject* self, wxDataObject::Direction dir)
    {
        size_t count = self->GetFormatCount(dir);
        wxDataFormat* formats = new wxDataFormat[count];
        self->GetAllFormats(formats, dir);
        wxPyThreadBlocker blocker;
        PyObject* list = PyList_New(count);
        for (size_t i=0; i<count; i++) {
            wxDataFormat* format = new wxDataFormat(formats[i]);
            PyObject* obj = wxPyConstructObject((void*)format, wxT("wxDataFormat"), true);
            PyList_SET_ITEM(list, i, obj); // PyList_SET_ITEM steals a reference
        }
        delete [] formats;
        return list;
    }
    %End

    virtual size_t GetFormatCount(Direction dir = Get) const;


            virtual wxDataFormat GetPreferredFormat(Direction dir = Get) const;
            private:
            virtual size_t GetDataSize(const wxDataFormat& format) const;
            virtual bool   GetDataHere(const wxDataFormat& format, void* buf) const;
            public:


            virtual bool GetDataHere(void* buf) const;
            virtual size_t GetDataSize() const;
            virtual bool SetData(size_t len, const void *buf);


    public:


    %Property(name=AllFormats, get=GetAllFormats)
    %Property(name=Data, get=GetData, set=SetData)
    %Property(name=Size, get=GetSize)
};  // end of class wxCustomDataObject


class wxDataObjectComposite : wxDataObject
{
    %Docstring
        DataObjectComposite()
        
        wxDataObjectComposite is the simplest wxDataObject derivation which
        may be used to support multiple formats.
    %End
    %TypeHeaderCode
        #include <wx/dataobj.h>
    %End

public:
    wxDataObjectComposite();

    void Add(
        wxDataObjectSimple * dataObject   /Transfer/,
        bool preferred = false
    );
    %Docstring
        Add(dataObject, preferred=False)
        
        Adds the dataObject to the list of supported objects and it becomes
        the preferred object if preferred is true.
    %End

    wxDataFormat GetReceivedFormat() const;
    %Docstring
        GetReceivedFormat() -> DataFormat
        
        Report the format passed to the SetData() method.
    %End

    wxDataObjectSimple * GetObject(
        const wxDataFormat & format,
        wxDataObject::Direction dir = wxDataObject::Get
    ) const;
    %Docstring
        GetObject(format, dir=DataObject.Get) -> DataObjectSimple
        
        Returns the pointer to the object which supports the passed format for
        the specified direction.
    %End

    virtual PyObject* GetAllFormats(wxDataObject::Direction dir=wxDataObject::Get) const [ void (wxDataFormat* formats, Direction dir) ];
    %Docstring
        GetAllFormats(dir=DataObject.Get)
        
        Returns a list of wx.DataFormat objects which this data object
        supports transferring in the given direction.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataObjectComposite_GetAllFormats(sipCpp, dir);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxDataObjectComposite_GetAllFormats(const wxDataObjectComposite* self, wxDataObject::Direction dir)
    {
        size_t count = self->GetFormatCount(dir);
        wxDataFormat* formats = new wxDataFormat[count];
        self->GetAllFormats(formats, dir);
        wxPyThreadBlocker blocker;
        PyObject* list = PyList_New(count);
        for (size_t i=0; i<count; i++) {
            wxDataFormat* format = new wxDataFormat(formats[i]);
            PyObject* obj = wxPyConstructObject((void*)format, wxT("wxDataFormat"), true);
            PyList_SET_ITEM(list, i, obj); // PyList_SET_ITEM steals a reference
        }
        delete [] formats;
        return list;
    }
    %End

    virtual bool SetData(const wxDataFormat& format,  wxPyBuffer* buf) [ bool (const wxDataFormat& format, size_t len, const void* buf) ];
    %Docstring
        SetData(format, buf) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataObjectComposite_SetData(sipCpp, format, buf);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        wxDataObjectComposite* self = static_cast<wxDataObjectComposite*>(wxPyGetCppPtr(sipPySelf));
        sipRes = self->wxDataObjectComposite::SetData(format, len, buf);
    %End
    %TypeCode
    bool _wxDataObjectComposite_SetData(wxDataObjectComposite* self, const wxDataFormat* format, wxPyBuffer* buf)
    {
        return self->SetData(*format, buf->m_len, buf->m_ptr);
    }
    %End

    virtual size_t GetFormatCount(Direction dir = Get) const;


            virtual wxDataFormat GetPreferredFormat(Direction dir = Get) const;
            private:
            virtual size_t GetDataSize(const wxDataFormat& format) const;
            virtual bool   GetDataHere(const wxDataFormat& format, void* buf) const;
            public:


    public:


    %Property(name=AllFormats, get=GetAllFormats)
    %Property(name=ReceivedFormat, get=GetReceivedFormat)
};  // end of class wxDataObjectComposite


class wxBitmapDataObject : wxDataObjectSimple
{
    %Docstring
        BitmapDataObject(bitmap=NullBitmap)
        
        wxBitmapDataObject is a specialization of wxDataObject for bitmap
        data.
    %End
    %TypeHeaderCode
        #include <wx/dataobj.h>
    %End

public:
    wxBitmapDataObject(
        const wxBitmap & bitmap = wxNullBitmap
    );

    virtual
    wxBitmap GetBitmap() const;
    %Docstring
        GetBitmap() -> Bitmap
        
        Returns the bitmap associated with the data object.
    %End

    virtual
    void SetBitmap(
        const wxBitmap & bitmap
    );
    %Docstring
        SetBitmap(bitmap)
        
        Sets the bitmap associated with the data object.
    %End

    virtual PyObject* GetAllFormats(wxDataObject::Direction dir=wxDataObject::Get) const [ void (wxDataFormat* formats, Direction dir) ];
    %Docstring
        GetAllFormats(dir=DataObject.Get)
        
        Returns a list of wx.DataFormat objects which this data object
        supports transferring in the given direction.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxBitmapDataObject_GetAllFormats(sipCpp, dir);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxBitmapDataObject_GetAllFormats(const wxBitmapDataObject* self, wxDataObject::Direction dir)
    {
        size_t count = self->GetFormatCount(dir);
        wxDataFormat* formats = new wxDataFormat[count];
        self->GetAllFormats(formats, dir);
        wxPyThreadBlocker blocker;
        PyObject* list = PyList_New(count);
        for (size_t i=0; i<count; i++) {
            wxDataFormat* format = new wxDataFormat(formats[i]);
            PyObject* obj = wxPyConstructObject((void*)format, wxT("wxDataFormat"), true);
            PyList_SET_ITEM(list, i, obj); // PyList_SET_ITEM steals a reference
        }
        delete [] formats;
        return list;
    }
    %End

    virtual bool SetData(const wxDataFormat& format,  wxPyBuffer* buf) [ bool (const wxDataFormat& format, size_t len, const void* buf) ];
    %Docstring
        SetData(format, buf) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxBitmapDataObject_SetData(sipCpp, format, buf);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        wxBitmapDataObject* self = static_cast<wxBitmapDataObject*>(wxPyGetCppPtr(sipPySelf));
        sipRes = self->wxBitmapDataObject::SetData(format, len, buf);
    %End
    %TypeCode
    bool _wxBitmapDataObject_SetData(wxBitmapDataObject* self, const wxDataFormat* format, wxPyBuffer* buf)
    {
        return self->SetData(*format, buf->m_len, buf->m_ptr);
    }
    %End

    virtual size_t GetFormatCount(Direction dir = Get) const;


            virtual wxDataFormat GetPreferredFormat(Direction dir = Get) const;
            private:
            virtual size_t GetDataSize(const wxDataFormat& format) const;
            virtual bool   GetDataHere(const wxDataFormat& format, void* buf) const;
            public:


            virtual bool GetDataHere(void* buf) const;
            virtual size_t GetDataSize() const;
            virtual bool SetData(size_t len, const void *buf);


    public:


    %Property(name=AllFormats, get=GetAllFormats)
    %Property(name=Bitmap, get=GetBitmap, set=SetBitmap)
};  // end of class wxBitmapDataObject


class wxTextDataObject : wxDataObjectSimple
{
    %Docstring
        TextDataObject(text=EmptyString)
        
        wxTextDataObject is a specialization of wxDataObjectSimple for text
        data.
    %End
    %TypeHeaderCode
        #include <wx/dataobj.h>
    %End

public:
    wxTextDataObject(
        const wxString & text = wxEmptyString
    );

    virtual
    wxString GetText() const;
    %Docstring
        GetText() -> String
        
        Returns the text associated with the data object.
    %End

    virtual
    size_t GetTextLength() const;
    %Docstring
        GetTextLength() -> size_t
        
        Returns the data size.
    %End

    virtual
    size_t GetFormatCount(
        wxDataObject::Direction dir = wxDataObject::Get
    ) const;
    %Docstring
        GetFormatCount(dir=DataObject.Get) -> size_t
        
        Returns 2 under wxMac and wxGTK, where text data coming from the
        clipboard may be provided as ANSI (wxDF_TEXT) or as Unicode text
        (wxDF_UNICODETEXT, but only when wxUSE_UNICODE==1).
    %End

    const wxDataFormat & GetFormat() const;
    %Docstring
        GetFormat() -> DataFormat
        
        Returns the preferred format supported by this object.
    %End

    virtual PyObject* GetAllFormats(wxDataObject::Direction dir=wxDataObject::Get) const [ void (wxDataFormat* formats, Direction dir) ];
    %Docstring
        GetAllFormats(dir=DataObject.Get)
        
        Returns a list of wx.DataFormat objects which this data object
        supports transferring in the given direction.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTextDataObject_GetAllFormats(sipCpp, dir);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxTextDataObject_GetAllFormats(const wxTextDataObject* self, wxDataObject::Direction dir)
    {
        size_t count = self->GetFormatCount(dir);
        wxDataFormat* formats = new wxDataFormat[count];
        self->GetAllFormats(formats, dir);
        wxPyThreadBlocker blocker;
        PyObject* list = PyList_New(count);
        for (size_t i=0; i<count; i++) {
            wxDataFormat* format = new wxDataFormat(formats[i]);
            PyObject* obj = wxPyConstructObject((void*)format, wxT("wxDataFormat"), true);
            PyList_SET_ITEM(list, i, obj); // PyList_SET_ITEM steals a reference
        }
        delete [] formats;
        return list;
    }
    %End

    virtual
    void SetText(
        const wxString & strText
    );
    %Docstring
        SetText(strText)
        
        Sets the text associated with the data object.
    %End

    virtual bool SetData(const wxDataFormat& format,  wxPyBuffer* buf) [ bool (const wxDataFormat& format, size_t len, const void* buf) ];
    %Docstring
        SetData(format, buf) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTextDataObject_SetData(sipCpp, format, buf);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        wxTextDataObject* self = static_cast<wxTextDataObject*>(wxPyGetCppPtr(sipPySelf));
        sipRes = self->wxTextDataObject::SetData(format, len, buf);
    %End
    %TypeCode
    bool _wxTextDataObject_SetData(wxTextDataObject* self, const wxDataFormat* format, wxPyBuffer* buf)
    {
        return self->SetData(*format, buf->m_len, buf->m_ptr);
    }
    %End

            virtual wxDataFormat GetPreferredFormat(Direction dir = Get) const;
            private:
            virtual size_t GetDataSize(const wxDataFormat& format) const;
            virtual bool   GetDataHere(const wxDataFormat& format, void* buf) const;
            public:


            virtual bool GetDataHere(void* buf) const;
            virtual size_t GetDataSize() const;
            virtual bool SetData(size_t len, const void *buf);


    public:


    %Property(name=AllFormats, get=GetAllFormats)
    %Property(name=Format, get=GetFormat)
    %Property(name=FormatCount, get=GetFormatCount)
    %Property(name=Text, get=GetText, set=SetText)
    %Property(name=TextLength, get=GetTextLength)
};  // end of class wxTextDataObject


class wxURLDataObject : wxDataObject
{
    %Docstring
        URLDataObject(url=EmptyString)
        
        wxURLDataObject is a wxDataObject containing an URL and can be used
        e.g.
    %End
    %TypeHeaderCode
        #include <wx/dataobj.h>
    %End

public:
    wxURLDataObject(
        const wxString & url = wxEmptyString
    );

    wxString GetURL() const;
    %Docstring
        GetURL() -> String
        
        Returns the URL stored by this object, as a string.
    %End

    void SetURL(
        const wxString & url
    );
    %Docstring
        SetURL(url)
        
        Sets the URL stored by this object.
    %End

    virtual PyObject* GetAllFormats(wxDataObject::Direction dir=wxDataObject::Get) const [ void (wxDataFormat* formats, Direction dir) ];
    %Docstring
        GetAllFormats(dir=DataObject.Get)
        
        Returns a list of wx.DataFormat objects which this data object
        supports transferring in the given direction.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxURLDataObject_GetAllFormats(sipCpp, dir);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxURLDataObject_GetAllFormats(const wxURLDataObject* self, wxDataObject::Direction dir)
    {
        size_t count = self->GetFormatCount(dir);
        wxDataFormat* formats = new wxDataFormat[count];
        self->GetAllFormats(formats, dir);
        wxPyThreadBlocker blocker;
        PyObject* list = PyList_New(count);
        for (size_t i=0; i<count; i++) {
            wxDataFormat* format = new wxDataFormat(formats[i]);
            PyObject* obj = wxPyConstructObject((void*)format, wxT("wxDataFormat"), true);
            PyList_SET_ITEM(list, i, obj); // PyList_SET_ITEM steals a reference
        }
        delete [] formats;
        return list;
    }
    %End

    virtual bool SetData(const wxDataFormat& format,  wxPyBuffer* buf) [ bool (const wxDataFormat& format, size_t len, const void* buf) ];
    %Docstring
        SetData(format, buf) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxURLDataObject_SetData(sipCpp, format, buf);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        wxURLDataObject* self = static_cast<wxURLDataObject*>(wxPyGetCppPtr(sipPySelf));
        sipRes = self->wxURLDataObject::SetData(format, len, buf);
    %End
    %TypeCode
    bool _wxURLDataObject_SetData(wxURLDataObject* self, const wxDataFormat* format, wxPyBuffer* buf)
    {
        return self->SetData(*format, buf->m_len, buf->m_ptr);
    }
    %End

    virtual size_t GetFormatCount(Direction dir = Get) const;


            virtual wxDataFormat GetPreferredFormat(Direction dir = Get) const;
            private:
            virtual size_t GetDataSize(const wxDataFormat& format) const;
            virtual bool   GetDataHere(const wxDataFormat& format, void* buf) const;
            public:


    public:


    %Property(name=AllFormats, get=GetAllFormats)
    %Property(name=URL, get=GetURL, set=SetURL)
};  // end of class wxURLDataObject


class wxFileDataObject : wxDataObjectSimple
{
    %Docstring
        FileDataObject()
        
        wxFileDataObject is a specialization of wxDataObject for file names.
    %End
    %TypeHeaderCode
        #include <wx/dataobj.h>
    %End

public:
    wxFileDataObject();

    void AddFile(
        const wxString & file
    );
    %Docstring
        AddFile(file)
        
        Adds a file to the file list represented by this data object (Windows
        only).
    %End

    const wxArrayString & GetFilenames() const;
    %Docstring
        GetFilenames() -> ArrayString
        
        Returns the array of file names.
    %End

    virtual PyObject* GetAllFormats(wxDataObject::Direction dir=wxDataObject::Get) const [ void (wxDataFormat* formats, Direction dir) ];
    %Docstring
        GetAllFormats(dir=DataObject.Get)
        
        Returns a list of wx.DataFormat objects which this data object
        supports transferring in the given direction.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileDataObject_GetAllFormats(sipCpp, dir);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxFileDataObject_GetAllFormats(const wxFileDataObject* self, wxDataObject::Direction dir)
    {
        size_t count = self->GetFormatCount(dir);
        wxDataFormat* formats = new wxDataFormat[count];
        self->GetAllFormats(formats, dir);
        wxPyThreadBlocker blocker;
        PyObject* list = PyList_New(count);
        for (size_t i=0; i<count; i++) {
            wxDataFormat* format = new wxDataFormat(formats[i]);
            PyObject* obj = wxPyConstructObject((void*)format, wxT("wxDataFormat"), true);
            PyList_SET_ITEM(list, i, obj); // PyList_SET_ITEM steals a reference
        }
        delete [] formats;
        return list;
    }
    %End

    virtual bool SetData(const wxDataFormat& format,  wxPyBuffer* buf) [ bool (const wxDataFormat& format, size_t len, const void* buf) ];
    %Docstring
        SetData(format, buf) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileDataObject_SetData(sipCpp, format, buf);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        wxFileDataObject* self = static_cast<wxFileDataObject*>(wxPyGetCppPtr(sipPySelf));
        sipRes = self->wxFileDataObject::SetData(format, len, buf);
    %End
    %TypeCode
    bool _wxFileDataObject_SetData(wxFileDataObject* self, const wxDataFormat* format, wxPyBuffer* buf)
    {
        return self->SetData(*format, buf->m_len, buf->m_ptr);
    }
    %End

    virtual size_t GetFormatCount(Direction dir = Get) const;


            virtual wxDataFormat GetPreferredFormat(Direction dir = Get) const;
            private:
            virtual size_t GetDataSize(const wxDataFormat& format) const;
            virtual bool   GetDataHere(const wxDataFormat& format, void* buf) const;
            public:


            virtual bool GetDataHere(void* buf) const;
            virtual size_t GetDataSize() const;
            virtual bool SetData(size_t len, const void *buf);


    public:


    %Property(name=AllFormats, get=GetAllFormats)
    %Property(name=Filenames, get=GetFilenames)
};  // end of class wxFileDataObject


class wxHTMLDataObject : wxDataObjectSimple
{
    %Docstring
        HTMLDataObject(html=EmptyString)
        
        wxHTMLDataObject is used for working with HTML-formatted text.
    %End
    %TypeHeaderCode
        #include <wx/dataobj.h>
    %End

public:
    wxHTMLDataObject(
        const wxString & html = wxEmptyString
    );

    virtual
    wxString GetHTML() const;
    %Docstring
        GetHTML() -> String
        
        Returns the HTML string.
    %End

    virtual
    void SetHTML(
        const wxString & html
    );
    %Docstring
        SetHTML(html)
        
        Sets the HTML string.
    %End

    virtual PyObject* GetAllFormats(wxDataObject::Direction dir=wxDataObject::Get) const [ void (wxDataFormat* formats, Direction dir) ];
    %Docstring
        GetAllFormats(dir=DataObject.Get)
        
        Returns a list of wx.DataFormat objects which this data object
        supports transferring in the given direction.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxHTMLDataObject_GetAllFormats(sipCpp, dir);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxHTMLDataObject_GetAllFormats(const wxHTMLDataObject* self, wxDataObject::Direction dir)
    {
        size_t count = self->GetFormatCount(dir);
        wxDataFormat* formats = new wxDataFormat[count];
        self->GetAllFormats(formats, dir);
        wxPyThreadBlocker blocker;
        PyObject* list = PyList_New(count);
        for (size_t i=0; i<count; i++) {
            wxDataFormat* format = new wxDataFormat(formats[i]);
            PyObject* obj = wxPyConstructObject((void*)format, wxT("wxDataFormat"), true);
            PyList_SET_ITEM(list, i, obj); // PyList_SET_ITEM steals a reference
        }
        delete [] formats;
        return list;
    }
    %End

    virtual bool SetData(const wxDataFormat& format,  wxPyBuffer* buf) [ bool (const wxDataFormat& format, size_t len, const void* buf) ];
    %Docstring
        SetData(format, buf) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxHTMLDataObject_SetData(sipCpp, format, buf);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        wxHTMLDataObject* self = static_cast<wxHTMLDataObject*>(wxPyGetCppPtr(sipPySelf));
        sipRes = self->wxHTMLDataObject::SetData(format, len, buf);
    %End
    %TypeCode
    bool _wxHTMLDataObject_SetData(wxHTMLDataObject* self, const wxDataFormat* format, wxPyBuffer* buf)
    {
        return self->SetData(*format, buf->m_len, buf->m_ptr);
    }
    %End

    virtual size_t GetFormatCount(Direction dir = Get) const;


            virtual wxDataFormat GetPreferredFormat(Direction dir = Get) const;
            private:
            virtual size_t GetDataSize(const wxDataFormat& format) const;
            virtual bool   GetDataHere(const wxDataFormat& format, void* buf) const;
            public:


            virtual bool GetDataHere(void* buf) const;
            virtual size_t GetDataSize() const;
            virtual bool SetData(size_t len, const void *buf);


    public:


    %Property(name=AllFormats, get=GetAllFormats)
    %Property(name=HTML, get=GetHTML, set=SetHTML)
};  // end of class wxHTMLDataObject


%Extract(id=pycode_core)
def CustomDataFormat(format):
    return wx.DataFormat(format)
CustomDataFormat = wx.deprecated(CustomDataFormat, "Use wx.DataFormat instead.")

%End

%Extract(id=pycode_core)
PyDataObjectSimple = wx.deprecated(DataObjectSimple), 'Use DataObjectSimple instead.'

%End

%Extract(id=pycode_core)
PyTextDataObject = wx.deprecated(TextDataObject, 'Use TextDataObject instead.')

%End

%Extract(id=pycode_core)
PyBitmapDataObject = wx.deprecated(BitmapDataObject, 'Use TextDataObject instead.')

%End


//---------------------------------------------------------------------------

