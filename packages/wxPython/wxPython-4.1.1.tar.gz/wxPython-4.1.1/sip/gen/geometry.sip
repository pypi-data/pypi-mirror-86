//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/wx.h>
%End


//---------------------------------------------------------------------------

enum wxOutCode
{
    wxInside,
    wxOutLeft,
    wxOutRight,
    wxOutTop,
    wxOutBottom
};

class wxPoint2DDouble   /PyName=Point2D/
{
    %Docstring
        Point2DDouble()
        Point2DDouble(x, y)
        Point2DDouble(pt)
        Point2DDouble(pt)
    %End
    %TypeHeaderCode
        #include <wx/geometry.h>
    %End

public:
    wxPoint2DDouble();

    wxPoint2DDouble(
        wxDouble x,
        wxDouble y
    );

    wxPoint2DDouble(
        const wxPoint2DDouble & pt
    );

    wxPoint2DDouble(
        const wxPoint & pt
    );

    wxDouble m_x   /PyName=x/;

    wxDouble m_y   /PyName=y/;

    void GetFloor(
        wxInt32 * x   /Out/,
        wxInt32 * y   /Out/
    ) const;
    %Docstring
        GetFloor() -> (x, y)
    %End

    void GetRounded(
        wxInt32 * x   /Out/,
        wxInt32 * y   /Out/
    ) const;
    %Docstring
        GetRounded() -> (x, y)
    %End

    wxDouble GetVectorLength() const;
    %Docstring
        GetVectorLength() -> Double
    %End

    wxDouble GetVectorAngle() const;
    %Docstring
        GetVectorAngle() -> Double
    %End

    void SetVectorLength(
        wxDouble length
    );
    %Docstring
        SetVectorLength(length)
    %End

    void SetVectorAngle(
        wxDouble degrees
    );
    %Docstring
        SetVectorAngle(degrees)
    %End

    void Normalize();
    %Docstring
        Normalize()
    %End

    wxDouble GetDistance(
        const wxPoint2DDouble & pt
    ) const;
    %Docstring
        GetDistance(pt) -> Double
    %End

    wxDouble GetDistanceSquare(
        const wxPoint2DDouble & pt
    ) const;
    %Docstring
        GetDistanceSquare(pt) -> Double
    %End

    wxDouble GetDotProduct(
        const wxPoint2DDouble & vec
    ) const;
    %Docstring
        GetDotProduct(vec) -> Double
    %End

    wxDouble GetCrossProduct(
        const wxPoint2DDouble & vec
    ) const;
    %Docstring
        GetCrossProduct(vec) -> Double
    %End

    wxPoint2DDouble operator-();

    wxPoint2DDouble & operator+=(
        const wxPoint2DDouble & pt
    );

    wxPoint2DDouble & operator-=(
        const wxPoint2DDouble & pt
    );

    wxPoint2DDouble & operator*=(
        const wxPoint2DDouble & pt
    );

    wxPoint2DDouble & operator/=(
        const wxPoint2DDouble & pt
    );

    bool operator==(
        const wxPoint2DDouble & pt
    ) const;

    bool operator!=(
        const wxPoint2DDouble & pt
    ) const;

    PyObject* Get();
    %Docstring
        Get() -> PyObject
        
        Get() -> (x,y)
        
        Return the x and y properties as a tuple.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxPoint2DDouble_Get(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxPoint2DDouble_Get(wxPoint2DDouble* self)
    {
        wxPyThreadBlocker blocker;
        return sipBuildResult(0, "(dd)", self->m_x, self->m_y);
    }
    %End

    public:


    %Property(name=VectorAngle, get=GetVectorAngle, set=SetVectorAngle)
    %Property(name=VectorLength, get=GetVectorLength, set=SetVectorLength)
    %ConvertToTypeCode
        // is it just a typecheck?
        if (!sipIsErr) {
            // is it already an instance of wxPoint2DDouble?
            if (sipCanConvertToType(sipPy, sipType_wxPoint2DDouble, SIP_NO_CONVERTORS))
                return 1;
        
           if (wxPyNumberSequenceCheck(sipPy, 2)) {
               return 1;
           }
            return 0;
        }
        
        // otherwise do the conversion
        if (sipCanConvertToType(sipPy, sipType_wxPoint2DDouble, SIP_NO_CONVERTORS)) {
            // Just fetch the existing instance
            *sipCppPtr = reinterpret_cast<wxPoint2DDouble*>(sipConvertToType(
                    sipPy, sipType_wxPoint2DDouble, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
            return 0; // not a new instance
        }
        
        // or create a new instance
        PyObject* o1 = PySequence_ITEM(sipPy, 0);
        PyObject* o2 = PySequence_ITEM(sipPy, 1);
        *sipCppPtr = new wxPoint2DDouble(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2));
        Py_DECREF(o1);
        Py_DECREF(o2);
        return SIP_TEMPORARY;
    %End
};  // end of class wxPoint2DDouble


%Extract(id=pycode_core)
def _Point2D_GetIM(self):
    """
    Returns an immutable representation of the ``wx.Point2D`` object, based on ``namedtuple``.
    
    This new object is hashable and can be used as a dictionary key,
    be added to sets, etc.  It can be converted back into a real ``wx.Point2D``
    with a simple statement like this: ``obj = wx.Point2D(imObj)``.
    """
    return _im_Point2D(*self.Get())
Point2D.GetIM = _Point2D_GetIM
del _Point2D_GetIM
%End

%Extract(id=pycode_core)
def _Point2D___str__(self):
    return str(self.Get())
Point2D.__str__ = _Point2D___str__
del _Point2D___str__
%End

%Extract(id=pycode_core)
def _Point2D___repr__(self):
    return "wx.Point2D"+str(self.Get())
Point2D.__repr__ = _Point2D___repr__
del _Point2D___repr__
%End

%Extract(id=pycode_core)
def _Point2D___len__(self):
    return len(self.Get())
Point2D.__len__ = _Point2D___len__
del _Point2D___len__
%End

%Extract(id=pycode_core)
def _Point2D___nonzero__(self):
    return self.Get() != (0,0)
Point2D.__nonzero__ = _Point2D___nonzero__
del _Point2D___nonzero__
%End

%Extract(id=pycode_core)
def _Point2D___bool__(self):
    return self.Get() != (0,0)
Point2D.__bool__ = _Point2D___bool__
del _Point2D___bool__
%End

%Extract(id=pycode_core)
def _Point2D___reduce__(self):
    return (Point2D, self.Get())
Point2D.__reduce__ = _Point2D___reduce__
del _Point2D___reduce__
%End

%Extract(id=pycode_core)
def _Point2D___getitem__(self, idx):
    return self.Get()[idx]
Point2D.__getitem__ = _Point2D___getitem__
del _Point2D___getitem__
%End

%Extract(id=pycode_core)
def _Point2D___setitem__(self, idx, val):
    if idx == 0: self.x = val
    elif idx == 1: self.y = val
    else: raise IndexError
Point2D.__setitem__ = _Point2D___setitem__
del _Point2D___setitem__
%End

%Extract(id=pycode_core)
Point2D.__safe_for_unpickling__ = True

%End

%Extract(id=pycode_core)
Point2D.IM = property(Point2D.GetIM)
%End

class wxRect2DDouble   /PyName=Rect2D/
{
    %Docstring
        Rect2DDouble()
        Rect2DDouble(x, y, w, h)
    %End
    %TypeHeaderCode
        #include <wx/geometry.h>
    %End

public:
    wxRect2DDouble();

    wxRect2DDouble(
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h
    );

    wxDouble m_x   /PyName=x/;

    wxDouble m_y   /PyName=y/;

    wxDouble m_width   /PyName=width/;

    wxDouble m_height   /PyName=height/;

    wxPoint2DDouble GetPosition() const;
    %Docstring
        GetPosition() -> Point2DDouble
    %End

    wxSize GetSize() const;
    %Docstring
        GetSize() -> Size
    %End

    wxDouble GetLeft() const;
    %Docstring
        GetLeft() -> Double
    %End

    void SetLeft(
        wxDouble n
    );
    %Docstring
        SetLeft(n)
    %End

    void MoveLeftTo(
        wxDouble n
    );
    %Docstring
        MoveLeftTo(n)
    %End

    wxDouble GetTop() const;
    %Docstring
        GetTop() -> Double
    %End

    void SetTop(
        wxDouble n
    );
    %Docstring
        SetTop(n)
    %End

    void MoveTopTo(
        wxDouble n
    );
    %Docstring
        MoveTopTo(n)
    %End

    wxDouble GetBottom() const;
    %Docstring
        GetBottom() -> Double
    %End

    void SetBottom(
        wxDouble n
    );
    %Docstring
        SetBottom(n)
    %End

    void MoveBottomTo(
        wxDouble n
    );
    %Docstring
        MoveBottomTo(n)
    %End

    wxDouble GetRight() const;
    %Docstring
        GetRight() -> Double
    %End

    void SetRight(
        wxDouble n
    );
    %Docstring
        SetRight(n)
    %End

    void MoveRightTo(
        wxDouble n
    );
    %Docstring
        MoveRightTo(n)
    %End

    wxPoint2DDouble GetLeftTop() const;
    %Docstring
        GetLeftTop() -> Point2DDouble
    %End

    void SetLeftTop(
        const wxPoint2DDouble & pt
    );
    %Docstring
        SetLeftTop(pt)
    %End

    void MoveLeftTopTo(
        const wxPoint2DDouble & pt
    );
    %Docstring
        MoveLeftTopTo(pt)
    %End

    wxPoint2DDouble GetLeftBottom() const;
    %Docstring
        GetLeftBottom() -> Point2DDouble
    %End

    void SetLeftBottom(
        const wxPoint2DDouble & pt
    );
    %Docstring
        SetLeftBottom(pt)
    %End

    void MoveLeftBottomTo(
        const wxPoint2DDouble & pt
    );
    %Docstring
        MoveLeftBottomTo(pt)
    %End

    wxPoint2DDouble GetRightTop() const;
    %Docstring
        GetRightTop() -> Point2DDouble
    %End

    void SetRightTop(
        const wxPoint2DDouble & pt
    );
    %Docstring
        SetRightTop(pt)
    %End

    void MoveRightTopTo(
        const wxPoint2DDouble & pt
    );
    %Docstring
        MoveRightTopTo(pt)
    %End

    wxPoint2DDouble GetRightBottom() const;
    %Docstring
        GetRightBottom() -> Point2DDouble
    %End

    void SetRightBottom(
        const wxPoint2DDouble & pt
    );
    %Docstring
        SetRightBottom(pt)
    %End

    void MoveRightBottomTo(
        const wxPoint2DDouble & pt
    );
    %Docstring
        MoveRightBottomTo(pt)
    %End

    wxPoint2DDouble GetCentre() const;
    %Docstring
        GetCentre() -> Point2DDouble
    %End

    void SetCentre(
        const wxPoint2DDouble & pt
    );
    %Docstring
        SetCentre(pt)
    %End

    void MoveCentreTo(
        const wxPoint2DDouble & pt
    );
    %Docstring
        MoveCentreTo(pt)
    %End

    wxOutCode GetOutCode(
        const wxPoint2DDouble & pt
    ) const;
    %Docstring
        GetOutCode(pt) -> OutCode
    %End

    wxOutCode GetOutcode(
        const wxPoint2DDouble & pt
    ) const;
    %Docstring
        GetOutcode(pt) -> OutCode
    %End

    bool Contains(
        const wxPoint2DDouble & pt
    ) const;
    %Docstring
        Contains(pt) -> bool
        Contains(rect) -> bool
    %End

    bool Contains(
        const wxRect2DDouble & rect
    ) const;

    bool IsEmpty() const;
    %Docstring
        IsEmpty() -> bool
    %End

    bool HaveEqualSize(
        const wxRect2DDouble & rect
    ) const;
    %Docstring
        HaveEqualSize(rect) -> bool
    %End

    void Inset(
        wxDouble x,
        wxDouble y
    );
    %Docstring
        Inset(x, y)
        Inset(left, top, right, bottom)
    %End

    void Inset(
        wxDouble left,
        wxDouble top,
        wxDouble right,
        wxDouble bottom
    );

    void Offset(
        const wxPoint2DDouble & pt
    );
    %Docstring
        Offset(pt)
    %End

    void ConstrainTo(
        const wxRect2DDouble & rect
    );
    %Docstring
        ConstrainTo(rect)
    %End

    wxPoint2DDouble Interpolate(
        wxInt32 widthfactor,
        wxInt32 heightfactor
    );
    %Docstring
        Interpolate(widthfactor, heightfactor) -> Point2DDouble
    %End

    void Intersect(
        const wxRect2DDouble & otherRect
    );
    %Docstring
        Intersect(otherRect)
        Intersect(src1, src2, dest)
    %End

    static
    void Intersect(
        const wxRect2DDouble & src1,
        const wxRect2DDouble & src2,
        wxRect2DDouble * dest
    );

    wxRect2DDouble CreateIntersection(
        const wxRect2DDouble & otherRect
    ) const;
    %Docstring
        CreateIntersection(otherRect) -> Rect2DDouble
    %End

    bool Intersects(
        const wxRect2DDouble & rect
    ) const;
    %Docstring
        Intersects(rect) -> bool
    %End

    void Union(
        const wxRect2DDouble & otherRect
    );
    %Docstring
        Union(otherRect)
        Union(pt)
        Union(src1, src2, dest)
    %End

    void Union(
        const wxPoint2DDouble & pt
    );

    static
    void Union(
        const wxRect2DDouble & src1,
        const wxRect2DDouble & src2,
        wxRect2DDouble * dest
    );

    wxRect2DDouble CreateUnion(
        const wxRect2DDouble & otherRect
    ) const;
    %Docstring
        CreateUnion(otherRect) -> Rect2DDouble
    %End

    void Scale(
        wxDouble f
    );
    %Docstring
        Scale(f)
        Scale(num, denum)
    %End

    void Scale(
        wxInt32 num,
        wxInt32 denum
    );

    bool operator==(
        const wxRect2DDouble & rect
    ) const;

    bool operator!=(
        const wxRect2DDouble & rect
    ) const;

    PyObject* Get();
    %Docstring
        Get() -> PyObject
        
        Get() -> (x, y, width, height)
        
        Return the rectangle's properties as a tuple.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxRect2DDouble_Get(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxRect2DDouble_Get(wxRect2DDouble* self)
    {
        wxPyThreadBlocker blocker;
        return sipBuildResult(0, "(dddd)",
                    self->m_x, self->m_y, self->m_width, self->m_height);
    }
    %End

    public:


    %Property(name=Bottom, get=GetBottom, set=SetBottom)
    %Property(name=Centre, get=GetCentre, set=SetCentre)
    %Property(name=Left, get=GetLeft, set=SetLeft)
    %Property(name=LeftBottom, get=GetLeftBottom, set=SetLeftBottom)
    %Property(name=LeftTop, get=GetLeftTop, set=SetLeftTop)
    %Property(name=Position, get=GetPosition)
    %Property(name=Right, get=GetRight, set=SetRight)
    %Property(name=RightBottom, get=GetRightBottom, set=SetRightBottom)
    %Property(name=RightTop, get=GetRightTop, set=SetRightTop)
    %Property(name=Size, get=GetSize)
    %Property(name=Top, get=GetTop, set=SetTop)
    %ConvertToTypeCode
        // is it just a typecheck?
        if (!sipIsErr) {
            // is it already an instance of wxRect2DDouble?
            if (sipCanConvertToType(sipPy, sipType_wxRect2DDouble, SIP_NO_CONVERTORS))
                return 1;
        
            if (wxPyNumberSequenceCheck(sipPy, 4)) {
                return 1;
            }
            return 0;
        }
        
        // otherwise do the conversion
        if (sipCanConvertToType(sipPy, sipType_wxRect2DDouble, SIP_NO_CONVERTORS)) {
            // Just fetch the existing instance
            *sipCppPtr = reinterpret_cast<wxRect2DDouble*>(sipConvertToType(
                    sipPy, sipType_wxRect2DDouble, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
            return 0; // not a new instance
        }
        
        // or create a new instance
        PyObject* o1 = PySequence_ITEM(sipPy, 0);
        PyObject* o2 = PySequence_ITEM(sipPy, 1);
        PyObject* o3 = PySequence_ITEM(sipPy, 2);
        PyObject* o4 = PySequence_ITEM(sipPy, 3);
        *sipCppPtr = new wxRect2DDouble(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2),
                                 PyFloat_AsDouble(o3), PyFloat_AsDouble(o4));
        Py_DECREF(o1);
        Py_DECREF(o2);
        Py_DECREF(o3);
        Py_DECREF(o4);
        return SIP_TEMPORARY;
    %End
};  // end of class wxRect2DDouble


%Extract(id=pycode_core)
def _Rect2D_GetIM(self):
    """
    Returns an immutable representation of the ``wx.Rect2D`` object, based on ``namedtuple``.
    
    This new object is hashable and can be used as a dictionary key,
    be added to sets, etc.  It can be converted back into a real ``wx.Rect2D``
    with a simple statement like this: ``obj = wx.Rect2D(imObj)``.
    """
    return _im_Rect2D(*self.Get())
Rect2D.GetIM = _Rect2D_GetIM
del _Rect2D_GetIM
%End

%Extract(id=pycode_core)
def _Rect2D___str__(self):
    return str(self.Get())
Rect2D.__str__ = _Rect2D___str__
del _Rect2D___str__
%End

%Extract(id=pycode_core)
def _Rect2D___repr__(self):
    return "wx.Rect2D"+str(self.Get())
Rect2D.__repr__ = _Rect2D___repr__
del _Rect2D___repr__
%End

%Extract(id=pycode_core)
def _Rect2D___len__(self):
    return len(self.Get())
Rect2D.__len__ = _Rect2D___len__
del _Rect2D___len__
%End

%Extract(id=pycode_core)
def _Rect2D___nonzero__(self):
    return self.Get() != (0,0,0,0)
Rect2D.__nonzero__ = _Rect2D___nonzero__
del _Rect2D___nonzero__
%End

%Extract(id=pycode_core)
def _Rect2D___bool__(self):
    return self.Get() != (0,0,0,0)
Rect2D.__bool__ = _Rect2D___bool__
del _Rect2D___bool__
%End

%Extract(id=pycode_core)
def _Rect2D___reduce__(self):
    return (Rect2D, self.Get())
Rect2D.__reduce__ = _Rect2D___reduce__
del _Rect2D___reduce__
%End

%Extract(id=pycode_core)
def _Rect2D___getitem__(self, idx):
    return self.Get()[idx]
Rect2D.__getitem__ = _Rect2D___getitem__
del _Rect2D___getitem__
%End

%Extract(id=pycode_core)
def _Rect2D___setitem__(self, idx, val):
    if idx == 0: self.x = val
    elif idx == 1: self.y = val
    elif idx == 2: self.width = val
    elif idx == 3: self.height = val
    else: raise IndexError
Rect2D.__setitem__ = _Rect2D___setitem__
del _Rect2D___setitem__
%End

%Extract(id=pycode_core)
Rect2D.__safe_for_unpickling__ = True

%End

%Extract(id=pycode_core)
Rect2D.IM = property(Rect2D.GetIM)
%End

%Extract(id=pycode_core)
from collections import namedtuple
_im_Point2D = namedtuple('_im_Point2D', ['x', 'y'])
del namedtuple

%End

%Extract(id=pycode_core)
from collections import namedtuple
_im_Rect2D = namedtuple('_im_Rect2D', ['x', 'y', 'width', 'height'])
del namedtuple

%End


//---------------------------------------------------------------------------

