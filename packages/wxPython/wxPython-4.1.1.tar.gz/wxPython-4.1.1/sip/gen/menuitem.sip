//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxMenuItem : wxObject
{
    %Docstring
        MenuItem(parentMenu=None, id=ID_SEPARATOR, text=EmptyString, helpString=EmptyString, kind=ITEM_NORMAL, subMenu=None)
        
        A menu item represents an item in a menu.
    %End
    %TypeHeaderCode
        #include <wx/menuitem.h>
    %End

public:
    wxMenuItem(
        wxMenu * parentMenu = NULL,
        int id = wxID_SEPARATOR,
        const wxString & text = wxEmptyString,
        const wxString & helpString = wxEmptyString,
        wxItemKind kind = wxITEM_NORMAL,
        wxMenu * subMenu   /Transfer/ = NULL
    );

    ~wxMenuItem();

    const wxColour* GetBackgroundColour() const;
    %Docstring
        GetBackgroundColour() -> Colour
        
        Returns the background colour associated with the menu item.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxMenuItem_GetBackgroundColour(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    const wxColour* _wxMenuItem_GetBackgroundColour(const wxMenuItem* self)
    {
        #ifdef __WXMSW__
            return &self->GetBackgroundColour();
        #else
            return &wxNullColour;
        #endif
    }
    %End

    const wxBitmap* GetBitmap(
        bool checked = true
    ) const;
    %Docstring
        GetBitmap(checked=True) -> Bitmap
        
        Returns the checked or unchecked bitmap.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxMenuItem_GetBitmap(sipCpp, checked);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    const wxBitmap* _wxMenuItem_GetBitmap(const wxMenuItem* self, bool checked)
    {
        #ifdef __WXMSW__
            return &self->GetBitmap(checked);
        #else
            return &self->GetBitmap();
        #endif
    }
    %End

    const wxBitmap* GetDisabledBitmap() const;
    %Docstring
        GetDisabledBitmap() -> Bitmap
        
        Returns the bitmap to be used for disabled items.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxMenuItem_GetDisabledBitmap(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    const wxBitmap* _wxMenuItem_GetDisabledBitmap(const wxMenuItem* self)
    {
        #ifdef __WXMSW__
            return &self->GetDisabledBitmap();
        #else
            return &wxNullBitmap;
        #endif
    }
    %End

    const wxFont* GetFont() const;
    %Docstring
        GetFont() -> Font
        
        Returns the font associated with the menu item.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxMenuItem_GetFont(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    const wxFont* _wxMenuItem_GetFont(const wxMenuItem* self)
    {
        #ifdef __WXMSW__
            return &self->GetFont();
        #else
            return &wxNullFont;
        #endif
    }
    %End

    const wxString & GetHelp() const;
    %Docstring
        GetHelp() -> String
        
        Returns the help string associated with the menu item.
    %End

    int GetId() const;
    %Docstring
        GetId() -> int
        
        Returns the menu item identifier.
    %End

    wxString GetItemLabel() const;
    %Docstring
        GetItemLabel() -> String
        
        Returns the text associated with the menu item including any
        accelerator characters that were passed to the constructor or
        SetItemLabel().
    %End

    wxString GetItemLabelText() const;
    %Docstring
        GetItemLabelText() -> String
        
        Returns the text associated with the menu item, without any
        accelerator characters.
    %End

    wxItemKind GetKind() const;
    %Docstring
        GetKind() -> ItemKind
        
        Returns the item kind, one of wxITEM_SEPARATOR, wxITEM_NORMAL,
        wxITEM_CHECK or wxITEM_RADIO.
    %End

    int GetMarginWidth() const;
    %Docstring
        GetMarginWidth() -> int
        
        Gets the width of the menu item checkmark bitmap.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxMenuItem_GetMarginWidth(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxMenuItem_GetMarginWidth(const wxMenuItem* self)
    {
        #ifdef __WXMSW__
            return self->GetMarginWidth();
        #else
            return -1;
        #endif
    }
    %End

    wxMenu * GetMenu() const;
    %Docstring
        GetMenu() -> Menu
        
        Returns the menu this menu item is in, or NULL if this menu item is
        not attached.
    %End

    wxMenu * GetSubMenu() const;
    %Docstring
        GetSubMenu() -> Menu
        
        Returns the submenu associated with the menu item, or NULL if there
        isn't one.
    %End

    const wxColour* GetTextColour() const;
    %Docstring
        GetTextColour() -> Colour
        
        Returns the text colour associated with the menu item.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxMenuItem_GetTextColour(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    const wxColour* _wxMenuItem_GetTextColour(const wxMenuItem* self)
    {
        #ifdef __WXMSW__
            return &self->GetTextColour();
        #else
            return &wxNullColour;
        #endif
    }
    %End

    wxAcceleratorEntry * GetAccel() const   /Factory/;
    %Docstring
        GetAccel() -> AcceleratorEntry
        
        Get our accelerator or NULL (caller must delete the pointer)
    %End

    bool IsCheck() const;
    %Docstring
        IsCheck() -> bool
        
        Returns true if the item is a check item.
    %End

    bool IsCheckable() const;
    %Docstring
        IsCheckable() -> bool
        
        Returns true if the item is checkable.
    %End

    bool IsChecked() const;
    %Docstring
        IsChecked() -> bool
        
        Returns true if the item is checked.
    %End

    bool IsEnabled() const;
    %Docstring
        IsEnabled() -> bool
        
        Returns true if the item is enabled.
    %End

    bool IsRadio() const;
    %Docstring
        IsRadio() -> bool
        
        Returns true if the item is a radio button.
    %End

    bool IsSeparator() const;
    %Docstring
        IsSeparator() -> bool
        
        Returns true if the item is a separator.
    %End

    bool IsSubMenu() const;
    %Docstring
        IsSubMenu() -> bool
        
        Returns true if the item is a submenu.
    %End

    void SetBackgroundColour(
        const wxColour & colour
    );
    %Docstring
        SetBackgroundColour(colour)
        
        Sets the background colour associated with the menu item.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxMenuItem_SetBackgroundColour(sipCpp, colour);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxMenuItem_SetBackgroundColour(wxMenuItem* self, const wxColour *colour)
    {
        #ifdef __WXMSW__
            self->SetBackgroundColour(*colour);
        #endif
    }
    %End

    void SetBitmap(
        const wxBitmap & bmp,
        bool checked = true
    );
    %Docstring
        SetBitmap(bmp, checked=True)
        
        Sets the bitmap for the menu item.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxMenuItem_SetBitmap(sipCpp, bmp, checked);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxMenuItem_SetBitmap(wxMenuItem* self, const wxBitmap *bmp, bool checked)
    {
        #ifdef __WXMSW__
            self->SetBitmap(*bmp, checked);
        #else
            self->SetBitmap(*bmp); // no checked arg in this case
        #endif
    }
    %End

    void SetBitmaps(
        const wxBitmap & checked,
        const wxBitmap & unchecked = wxNullBitmap
    );
    %Docstring
        SetBitmaps(checked, unchecked=NullBitmap)
        
        Sets the checked/unchecked bitmaps for the menu item.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxMenuItem_SetBitmaps(sipCpp, checked, unchecked);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxMenuItem_SetBitmaps(wxMenuItem* self, const wxBitmap *checked, const wxBitmap *unchecked)
    {
        #ifdef __WXMSW__
            self->SetBitmaps(*checked, *unchecked);
        #else
            self->SetBitmap(*checked);
        #endif
    }
    %End

    void SetDisabledBitmap(
        const wxBitmap & disabled
    );
    %Docstring
        SetDisabledBitmap(disabled)
        
        Sets the to be used for disabled menu items.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxMenuItem_SetDisabledBitmap(sipCpp, disabled);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxMenuItem_SetDisabledBitmap(wxMenuItem* self, const wxBitmap *disabled)
    {
        #ifdef __WXMSW__
            self->SetDisabledBitmap(*disabled);
        #endif
    }
    %End

    void SetFont(
        const wxFont & font
    );
    %Docstring
        SetFont(font)
        
        Sets the font associated with the menu item.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxMenuItem_SetFont(sipCpp, font);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxMenuItem_SetFont(wxMenuItem* self, const wxFont *font)
    {
        #ifdef __WXMSW__
            self->SetFont(*font);
        #endif
    }
    %End

    void SetHelp(
        const wxString & helpString
    );
    %Docstring
        SetHelp(helpString)
        
        Sets the help string.
    %End

    void SetItemLabel(
        const wxString & label
    );
    %Docstring
        SetItemLabel(label)
        
        Sets the label associated with the menu item.
    %End

    void SetMarginWidth(
        int width
    );
    %Docstring
        SetMarginWidth(width)
        
        Sets the width of the menu item checkmark bitmap.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxMenuItem_SetMarginWidth(sipCpp, width);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxMenuItem_SetMarginWidth(wxMenuItem* self, int width)
    {
        #ifdef __WXMSW__
            self->SetMarginWidth(width);
        #endif
    }
    %End

    void SetMenu(
        wxMenu * menu
    );
    %Docstring
        SetMenu(menu)
        
        Sets the parent menu which will contain this menu item.
    %End

    void SetSubMenu(
        wxMenu * menu   /Transfer/
    );
    %Docstring
        SetSubMenu(menu)
        
        Sets the submenu of this menu item.
    %End

    void SetTextColour(
        const wxColour & colour
    );
    %Docstring
        SetTextColour(colour)
        
        Sets the text colour associated with the menu item.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxMenuItem_SetTextColour(sipCpp, colour);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxMenuItem_SetTextColour(wxMenuItem* self, const wxColour *colour)
    {
        #ifdef __WXMSW__
            self->SetTextColour(*colour);
        #endif
    }
    %End

    void SetAccel(
        wxAcceleratorEntry * accel
    );
    %Docstring
        SetAccel(accel)
        
        Set the accel for this item - this may also be done indirectly with
        SetText()
    %End

    void Check(
        bool check = true
    );
    %Docstring
        Check(check=True)
        
        Checks or unchecks the menu item.
    %End

    void Enable(
        bool enable = true
    );
    %Docstring
        Enable(enable=True)
        
        Enables or disables the menu item.
    %End

    static
    wxString GetLabelText(
        const wxString & text
    );
    %Docstring
        GetLabelText(text) -> String
        
        Strips all accelerator characters and mnemonics from the given text.
    %End

    private:
        wxMenuItem(const wxMenuItem&);


    public:


    %Property(name=Accel, get=GetAccel, set=SetAccel)
    %Property(name=BackgroundColour, get=GetBackgroundColour, set=SetBackgroundColour)
    %Property(name=Bitmap, get=GetBitmap, set=SetBitmap)
    %Property(name=DisabledBitmap, get=GetDisabledBitmap, set=SetDisabledBitmap)
    %Property(name=Font, get=GetFont, set=SetFont)
    %Property(name=Help, get=GetHelp, set=SetHelp)
    %Property(name=Id, get=GetId)
    %Property(name=ItemLabel, get=GetItemLabel, set=SetItemLabel)
    %Property(name=ItemLabelText, get=GetItemLabelText)
    %Property(name=Kind, get=GetKind)
    %Property(name=MarginWidth, get=GetMarginWidth, set=SetMarginWidth)
    %Property(name=Menu, get=GetMenu, set=SetMenu)
    %Property(name=SubMenu, get=GetSubMenu, set=SetSubMenu)
    %Property(name=TextColour, get=GetTextColour, set=SetTextColour)
    %Property(name=Enabled, get=IsEnabled, set=Enable)
};  // end of class wxMenuItem


class wxMenuItemList_iterator /Abstract/
{
    // the C++ implementation of this class
    %TypeHeaderCode
        
        
        class wxMenuItemList_iterator {
        public:
            wxMenuItemList_iterator(wxMenuItemList::compatibility_iterator start)
                : m_node(start) {}

            wxMenuItem* __next__() {
                wxMenuItem* obj = NULL;
                if (m_node) {
                    obj = (wxMenuItem*) m_node->GetData();
                    m_node = m_node->GetNext();
                }
                else {
                    PyErr_SetString(PyExc_StopIteration, "");
                }
                return (wxMenuItem*)obj;
            }
        private:
            wxMenuItemList::compatibility_iterator m_node;
        };
    %End
public:
    wxMenuItem* __next__();
    %MethodCode
        sipRes = sipCpp->__next__();
        if (PyErr_Occurred())
            return NULL;
    %End
};

class wxMenuItemList
{
    %TypeHeaderCode
        
        
    %End
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->size();
    %End

    wxMenuItem* __getitem__(long index);
    %MethodCode
        if (0 > index)
            index += sipCpp->size();

        if (index < sipCpp->size() && (0 <= index)) {
            wxMenuItemList::compatibility_iterator node = sipCpp->Item(index);
            if (node)
                sipRes = (wxMenuItem*)node->GetData();
        }
        else {
            wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
            sipError = sipErrorFail;
        }
    %End

    int __contains__(const wxMenuItem* obj);
    %MethodCode
        wxMenuItemList::compatibility_iterator node;
        node = sipCpp->Find((wxMenuItem*)obj);
        sipRes = node != NULL;
    %End

    wxMenuItemList_iterator* __iter__() /Factory/;
    %MethodCode
        sipRes =  new wxMenuItemList_iterator(sipCpp->GetFirst());
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxMenuItem* obj);
    %MethodCode
        int idx = sipCpp->IndexOf((wxMenuItem*)obj);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
        }
        sipRes = idx;
    %End

    
};

%Extract(id=pycode_core)
def _MenuItemList___repr__(self):
    return "MenuItemList: " + repr(list(self))
MenuItemList.__repr__ = _MenuItemList___repr__
del _MenuItemList___repr__
%End



//---------------------------------------------------------------------------

