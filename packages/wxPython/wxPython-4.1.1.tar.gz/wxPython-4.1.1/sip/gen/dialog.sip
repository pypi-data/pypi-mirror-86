//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxDIALOG_NO_PARENT;
const int wxDEFAULT_DIALOG_STYLE;
const int wxDIALOG_ADAPTATION_NONE;
const int wxDIALOG_ADAPTATION_STANDARD_SIZER;
const int wxDIALOG_ADAPTATION_ANY_SIZER;
const int wxDIALOG_ADAPTATION_LOOSE_BUTTONS;
enum wxDialogLayoutAdaptationMode
{
    wxDIALOG_ADAPTATION_MODE_DEFAULT,
    wxDIALOG_ADAPTATION_MODE_ENABLED,
    wxDIALOG_ADAPTATION_MODE_DISABLED
};

const char* wxDialogNameStr;

class wxDialog : wxTopLevelWindow
{
    %Docstring
        Dialog()
        Dialog(parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_DIALOG_STYLE, name=DialogNameStr)
        
        A dialog box is a window with a title bar and sometimes a system menu,
        which can be moved around the screen.
    %End
    %TypeHeaderCode
        #include <wx/dialog.h>
    %End

public:
    wxDialog();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxDialog(
        wxWindow * parent,
        wxWindowID id = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_DIALOG_STYLE,
        const wxString & name = wxDialogNameStr
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxDialog();

    void AddMainButtonId(
        wxWindowID id
    );
    %Docstring
        AddMainButtonId(id)
        
        Adds an identifier to be regarded as a main button for the non-
        scrolling area of a dialog.
    %End

    bool CanDoLayoutAdaptation();
    %Docstring
        CanDoLayoutAdaptation() -> bool
        
        Returns true if this dialog can and should perform layout adaptation
        using DoLayoutAdaptation(), usually if the dialog is too large to fit
        on the display.
    %End

    void Centre(
        int direction = wxBOTH
    );
    %Docstring
        Centre(direction=BOTH)
        
        Centres the dialog box on the display.
    %End

    bool Create(
        wxWindow * parent,
        wxWindowID id = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_DIALOG_STYLE,
        const wxString & name = wxDialogNameStr
    )   /TransferThis/;
    %Docstring
        Create(parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_DIALOG_STYLE, name=DialogNameStr) -> bool
        
        Used for two-step dialog box construction.
    %End

    wxSizer * CreateButtonSizer(
        long flags
    );
    %Docstring
        CreateButtonSizer(flags) -> Sizer
        
        Creates a sizer with standard buttons.
    %End

    wxSizer * CreateSeparatedButtonSizer(
        long flags
    );
    %Docstring
        CreateSeparatedButtonSizer(flags) -> Sizer
        
        Creates a sizer with standard buttons using CreateButtonSizer()
        separated from the rest of the dialog contents by a horizontal
        wxStaticLine.
    %End

    wxSizer * CreateSeparatedSizer(
        wxSizer * sizer
    );
    %Docstring
        CreateSeparatedSizer(sizer) -> Sizer
        
        Returns the sizer containing the given one with a separating
        wxStaticLine if necessarily.
    %End

    wxStdDialogButtonSizer * CreateStdDialogButtonSizer(
        long flags
    );
    %Docstring
        CreateStdDialogButtonSizer(flags) -> StdDialogButtonSizer
        
        Creates a wxStdDialogButtonSizer with standard buttons.
    %End

    wxSizer * CreateTextSizer(
        const wxString & message,
        int widthMax = -1
    );
    %Docstring
        CreateTextSizer(message, widthMax=-1) -> Sizer
        
        Splits text up at newlines and places the lines into wxStaticText
        objects with the specified maximum width in a vertical wxBoxSizer.
    %End

    bool DoLayoutAdaptation();
    %Docstring
        DoLayoutAdaptation() -> bool
        
        Performs layout adaptation, usually if the dialog is too large to fit
        on the display.
    %End

    void EndModal(
        int retCode
    );
    %Docstring
        EndModal(retCode)
        
        Ends a modal dialog, passing a value to be returned from the
        ShowModal() invocation.
    %End

    int GetAffirmativeId() const;
    %Docstring
        GetAffirmativeId() -> int
        
        Gets the identifier of the button which works like standard OK button
        in this dialog.
    %End

    virtual
    wxWindow * GetContentWindow() const;
    %Docstring
        GetContentWindow() -> Window
        
        Override this to return a window containing the main content of the
        dialog.
    %End

    int GetEscapeId() const;
    %Docstring
        GetEscapeId() -> int
        
        Gets the identifier of the button to map presses of ESC button to.
    %End

    bool GetLayoutAdaptationDone() const;
    %Docstring
        GetLayoutAdaptationDone() -> bool
        
        Returns true if the dialog has been adapted, usually by making it
        scrollable to work with a small display.
    %End

    int GetLayoutAdaptationLevel() const;
    %Docstring
        GetLayoutAdaptationLevel() -> int
        
        Gets a value representing the aggressiveness of search for buttons and
        sizers to be in the non-scrolling part of a layout-adapted dialog.
    %End

    wxDialogLayoutAdaptationMode GetLayoutAdaptationMode() const;
    %Docstring
        GetLayoutAdaptationMode() -> DialogLayoutAdaptationMode
        
        Gets the adaptation mode, overriding the global adaptation flag.
    %End

    wxArrayInt & GetMainButtonIds();
    %Docstring
        GetMainButtonIds() -> ArrayInt
        
        Returns an array of identifiers to be regarded as the main buttons for
        the non-scrolling area of a dialog.
    %End

    int GetReturnCode() const;
    %Docstring
        GetReturnCode() -> int
        
        Gets the return code for this window.
    %End

    void Iconize(
        bool iconize = true
    );
    %Docstring
        Iconize(iconize=True)
        
        Iconizes or restores the dialog.
    %End

    bool IsIconized() const;
    %Docstring
        IsIconized() -> bool
        
        Returns true if the dialog box is iconized.
    %End

    bool IsMainButtonId(
        wxWindowID id
    ) const;
    %Docstring
        IsMainButtonId(id) -> bool
        
        Returns true if id is in the array of identifiers to be regarded as
        the main buttons for the non-scrolling area of a dialog.
    %End

    bool IsModal() const;
    %Docstring
        IsModal() -> bool
        
        Returns true if the dialog box is modal, false otherwise.
    %End

    void SetAffirmativeId(
        int id
    );
    %Docstring
        SetAffirmativeId(id)
        
        Sets the identifier to be used as OK button.
    %End

    void SetEscapeId(
        int id
    );
    %Docstring
        SetEscapeId(id)
        
        Sets the identifier of the button which should work like the standard
        "Cancel" button in this dialog.
    %End

    void SetIcon(
        const wxIcon & icon
    );
    %Docstring
        SetIcon(icon)
        
        Sets the icon for this dialog.
    %End

    void SetIcons(
        const wxIconBundle & icons
    );
    %Docstring
        SetIcons(icons)
        
        Sets the icons for this dialog.
    %End

    void SetLayoutAdaptationDone(
        bool done
    );
    %Docstring
        SetLayoutAdaptationDone(done)
        
        Marks the dialog as having been adapted, usually by making it
        scrollable to work with a small display.
    %End

    void SetLayoutAdaptationLevel(
        int level
    );
    %Docstring
        SetLayoutAdaptationLevel(level)
        
        Sets the aggressiveness of search for buttons and sizers to be in the
        non-scrolling part of a layout-adapted dialog.
    %End

    void SetLayoutAdaptationMode(
        wxDialogLayoutAdaptationMode mode
    );
    %Docstring
        SetLayoutAdaptationMode(mode)
        
        Sets the adaptation mode, overriding the global adaptation flag.
    %End

    void SetReturnCode(
        int retCode
    );
    %Docstring
        SetReturnCode(retCode)
        
        Sets the return code for this window.
    %End

    bool Show(
        bool show = true
    );
    %Docstring
        Show(show=True) -> bool
        
        Hides or shows the dialog.
    %End

    int ShowModal()   /ReleaseGIL/;
    %Docstring
        ShowModal() -> int
        
        Shows an application-modal dialog.
    %End

    void ShowWindowModal();
    %Docstring
        ShowWindowModal()
        
        Shows a dialog modal to the parent top level window only.
    %End

    static
    void EnableLayoutAdaptation(
        bool enable
    );
    %Docstring
        EnableLayoutAdaptation(enable)
        
        A static function enabling or disabling layout adaptation for all
        dialogs.
    %End

    static
    wxDialogLayoutAdapter * GetLayoutAdapter();
    %Docstring
        GetLayoutAdapter() -> DialogLayoutAdapter
        
        A static function getting the current layout adapter object.
    %End

    static
    bool IsLayoutAdaptationEnabled();
    %Docstring
        IsLayoutAdaptationEnabled() -> bool
        
        A static function returning true if layout adaptation is enabled for
        all dialogs.
    %End

    static
    wxDialogLayoutAdapter * SetLayoutAdapter(
        wxDialogLayoutAdapter * adapter
    );
    %Docstring
        SetLayoutAdapter(adapter) -> DialogLayoutAdapter
        
        A static function for setting the current layout adapter object,
        returning the old adapter.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=AffirmativeId, get=GetAffirmativeId, set=SetAffirmativeId)
    %Property(name=ContentWindow, get=GetContentWindow)
    %Property(name=EscapeId, get=GetEscapeId, set=SetEscapeId)
    %Property(name=LayoutAdaptationDone, get=GetLayoutAdaptationDone, set=SetLayoutAdaptationDone)
    %Property(name=LayoutAdaptationLevel, get=GetLayoutAdaptationLevel, set=SetLayoutAdaptationLevel)
    %Property(name=LayoutAdaptationMode, get=GetLayoutAdaptationMode, set=SetLayoutAdaptationMode)
    %Property(name=MainButtonIds, get=GetMainButtonIds)
    %Property(name=ReturnCode, get=GetReturnCode, set=SetReturnCode)
};  // end of class wxDialog


%Extract(id=pycode_core)
def _Dialog___enter__(self):
    return self
Dialog.__enter__ = _Dialog___enter__
del _Dialog___enter__
%End

%Extract(id=pycode_core)
def _Dialog___exit__(self, exc_type, exc_val, exc_tb):
    self.Destroy()
Dialog.__exit__ = _Dialog___exit__
del _Dialog___exit__
%End

class wxDialogLayoutAdapter
{
    %Docstring
        DialogLayoutAdapter()
        
        This abstract class is the base for classes that help wxWidgets
        perform run-time layout adaptation of dialogs.
    %End
    %TypeHeaderCode
        #include <wx/dialog.h>
    %End

public:
    wxDialogLayoutAdapter();

    virtual
    bool CanDoLayoutAdaptation(
        wxDialog * dialog
    ) = 0;
    %Docstring
        CanDoLayoutAdaptation(dialog) -> bool
        
        Override this to returns true if adaptation can and should be done.
    %End

    virtual
    bool DoLayoutAdaptation(
        wxDialog * dialog
    ) = 0;
    %Docstring
        DoLayoutAdaptation(dialog) -> bool
        
        Override this to perform layout adaptation, such as making parts of
        the dialog scroll and resizing the dialog to fit the display.
    %End

};  // end of class wxDialogLayoutAdapter


class wxWindowModalDialogEvent : wxCommandEvent
{
    %Docstring
        WindowModalDialogEvent(commandType=wxEVT_NULL, id=0)
        
        Event sent by wxDialog::ShowWindowModal() when the dialog closes.
    %End
    %TypeHeaderCode
        #include <wx/dialog.h>
    %End

public:
    wxWindowModalDialogEvent(
        wxEventType commandType = wxEVT_NULL,
        int id = 0
    );

    wxDialog * GetDialog() const;
    %Docstring
        GetDialog() -> Dialog
        
        Return the corresponding dialog.
    %End

    int GetReturnCode() const;
    %Docstring
        GetReturnCode() -> int
        
        Return the dialog's return code.
    %End

    virtual
    wxEvent * Clone() const   /Factory/;
    %Docstring
        Clone() -> Event
        
        Clone the event.
    %End

    private:
        wxWindowModalDialogEvent& operator=(const wxWindowModalDialogEvent&);


    public:


    %Property(name=Dialog, get=GetDialog)
    %Property(name=ReturnCode, get=GetReturnCode)
};  // end of class wxWindowModalDialogEvent



//---------------------------------------------------------------------------

