//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _adv.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxAC_NO_AUTORESIZE;
const int wxAC_DEFAULT_STYLE;
enum wxAnimationType
{
    wxANIMATION_TYPE_INVALID,
    wxANIMATION_TYPE_GIF,
    wxANIMATION_TYPE_ANI,
    wxANIMATION_TYPE_ANY
};

enum wxAnimationDisposal
{
    wxANIM_UNSPECIFIED,
    wxANIM_DONOTREMOVE,
    wxANIM_TOBACKGROUND,
    wxANIM_TOPREVIOUS
};

class wxAnimation : wxObject
{
    %Docstring
        Animation()
        Animation(name, type=ANIMATION_TYPE_ANY)
        Animation(other)
        
        The wxAnimation class handles the interface between the animation
        control and the details of the animation image or data.
    %End
    %TypeHeaderCode
        #include <wx/animate.h>
    %End

public:
    wxAnimation();

    wxAnimation(
        const wxString & name,
        wxAnimationType type = wxANIMATION_TYPE_ANY
    );

    wxAnimation(
        const wxAnimation & other
    );

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if animation data is present.
    %End

    bool IsCompatibleWith(
        wxClassInfo * ci
    ) const;
    %Docstring
        IsCompatibleWith(ci) -> bool
        
        Returns true if animation can be used with controls of the given type.
    %End

    int GetDelay(
        unsigned int frame
    ) const;
    %Docstring
        GetDelay(frame) -> int
        
        Returns the delay for the i-th frame in milliseconds.
    %End

    unsigned int GetFrameCount() const;
    %Docstring
        GetFrameCount() -> unsignedint
        
        Returns the number of frames for this animation.
    %End

    wxImage GetFrame(
        unsigned int frame
    ) const;
    %Docstring
        GetFrame(frame) -> wx.Image
        
        Returns the i-th frame as a wxImage.
    %End

    wxSize GetSize() const;
    %Docstring
        GetSize() -> wx.Size
        
        Returns the size of the animation.
    %End

    bool LoadFile(
        const wxString & name,
        wxAnimationType type = wxANIMATION_TYPE_ANY
    );
    %Docstring
        LoadFile(name, type=ANIMATION_TYPE_ANY) -> bool
        
        Loads an animation from a file.
    %End

    bool Load(
        wxInputStream & stream,
        wxAnimationType type = wxANIMATION_TYPE_ANY
    );
    %Docstring
        Load(stream, type=ANIMATION_TYPE_ANY) -> bool
        
        Loads an animation from the given stream.
    %End

    static
    wxAnimationDecoderList & GetHandlers();
    %Docstring
        GetHandlers() -> AnimationDecoderList
        
        Returns the list of animation decoders used by the generic animation
        and wxGenericAnimationCtrl.
    %End

    static
    void AddHandler(
        wxAnimationDecoder * handler
    );
    %Docstring
        AddHandler(handler)
        
        Add a new decoder to the list of animation decoders.
    %End

    static
    void InsertHandler(
        wxAnimationDecoder * handler
    );
    %Docstring
        InsertHandler(handler)
        
        Insert a new decoder to the front of the list of animation decoders.
    %End

    static
    const wxAnimationDecoder * FindHandler(
        wxAnimationType animType
    );
    %Docstring
        FindHandler(animType) -> AnimationDecoder
        
        Search for an animation decoder by type.
    %End

    static
    void InitStandardHandlers();
    %Docstring
        InitStandardHandlers()
        
        Load the stock animation decoders (currently GIF and ANI) into the
        list of decoders.
    %End

    static
    void CleanUpHandlers();
    %Docstring
        CleanUpHandlers()
        
        Clear out the animation decoder list.
    %End

    public:


    %Property(name=FrameCount, get=GetFrameCount)
    %Property(name=Size, get=GetSize)
};  // end of class wxAnimation


class wxAnimationCtrl : wxControl
{
    %Docstring
        AnimationCtrl(parent, id=wx.ID_ANY, anim=NullAnimation, pos=wx.DefaultPosition, size=wx.DefaultSize, style=AC_DEFAULT_STYLE, name=AnimationCtrlNameStr)
        
        This is a static control which displays an animation.
    %End
    %TypeHeaderCode
        #include <wx/animate.h>
    %End

public:
    wxAnimationCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxAnimation & anim = wxNullAnimation,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxAC_DEFAULT_STYLE,
        const wxString & name = wxAnimationCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxAnimation & anim = wxNullAnimation,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxAC_DEFAULT_STYLE,
        const wxString & name = wxAnimationCtrlNameStr
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, anim=NullAnimation, pos=wx.DefaultPosition, size=wx.DefaultSize, style=AC_DEFAULT_STYLE, name=AnimationCtrlNameStr) -> bool
        
        Creates the control with the given anim animation.
    %End

    wxAnimation CreateAnimation() const;
    %Docstring
        CreateAnimation() -> Animation
        
        Create a new animation object compatible with this control.
    %End

    wxAnimation GetAnimation() const;
    %Docstring
        GetAnimation() -> Animation
        
        Returns the animation associated with this control.
    %End

    wxBitmap GetInactiveBitmap() const;
    %Docstring
        GetInactiveBitmap() -> wx.Bitmap
        
        Returns the inactive bitmap shown in this control when the; see
        SetInactiveBitmap() for more info.
    %End

    virtual
    bool IsPlaying() const;
    %Docstring
        IsPlaying() -> bool
        
        Returns true if the animation is being played.
    %End

    virtual
    bool LoadFile(
        const wxString & file,
        wxAnimationType animType = wxANIMATION_TYPE_ANY
    );
    %Docstring
        LoadFile(file, animType=ANIMATION_TYPE_ANY) -> bool
        
        Loads the animation from the given file and calls SetAnimation().
    %End

    virtual
    bool Load(
        wxInputStream & file,
        wxAnimationType animType = wxANIMATION_TYPE_ANY
    );
    %Docstring
        Load(file, animType=ANIMATION_TYPE_ANY) -> bool
        
        Loads the animation from the given stream and calls SetAnimation().
    %End

    virtual
    bool Play();
    %Docstring
        Play() -> bool
        
        Starts playing the animation.
    %End

    virtual
    void SetAnimation(
        const wxAnimation & anim
    );
    %Docstring
        SetAnimation(anim)
        
        Sets the animation to play in this control.
    %End

    virtual
    void SetInactiveBitmap(
        const wxBitmap & bmp
    );
    %Docstring
        SetInactiveBitmap(bmp)
        
        Sets the bitmap to show on the control when it's not playing an
        animation.
    %End

    virtual
    void Stop();
    %Docstring
        Stop()
        
        Stops playing the animation.
    %End

    static
    wxAnimation CreateCompatibleAnimation();
    %Docstring
        CreateCompatibleAnimation() -> Animation
        
        Create a new animation object compatible with this control.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Animation, get=GetAnimation, set=SetAnimation)
    %Property(name=InactiveBitmap, get=GetInactiveBitmap, set=SetInactiveBitmap)
};  // end of class wxAnimationCtrl


const char* wxAnimationCtrlNameStr;

wxAnimation wxNullAnimation;

class wxGenericAnimationCtrl : wxControl
{
    %Docstring
        GenericAnimationCtrl(parent, id=wx.ID_ANY, anim=NullAnimation, pos=wx.DefaultPosition, size=wx.DefaultSize, style=AC_DEFAULT_STYLE, name=AnimationCtrlNameStr)
        
        Generic implementation of wxAnimationCtrl interface.
    %End
    %TypeHeaderCode
        #include <wx/animate.h>
    %End

    %TypeHeaderCode
        #include <wx/generic/animate.h>
    %End
public:
    wxGenericAnimationCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxAnimation & anim = wxNullAnimation,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxAC_DEFAULT_STYLE,
        const wxString & name = wxAnimationCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxAnimation & anim = wxNullAnimation,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxAC_DEFAULT_STYLE,
        const wxString & name = wxAnimationCtrlNameStr
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, anim=NullAnimation, pos=wx.DefaultPosition, size=wx.DefaultSize, style=AC_DEFAULT_STYLE, name=AnimationCtrlNameStr) -> bool
        
        Creates the control with the given anim animation.
    %End

    void DrawCurrentFrame(
        wxDC & dc
    );
    %Docstring
        DrawCurrentFrame(dc)
        
        Draw the current frame of the animation into given DC.
    %End

    wxBitmap & GetBackingStore();
    %Docstring
        GetBackingStore() -> wx.Bitmap
        
        Returns a wxBitmap with the current frame drawn in it.
    %End

    bool Play(
        bool looped
    );
    %Docstring
        Play(looped) -> bool
        Play() -> bool
        
        This overload of Play() lets you specify if the animation must loop or
        not.
    %End

    virtual
    bool Play();

    void SetUseWindowBackgroundColour(
        bool useWinBackground = true
    );
    %Docstring
        SetUseWindowBackgroundColour(useWinBackground=True)
        
        Specify whether the animation's background colour is to be shown (the
        default), or whether the window background should show through.
    %End

    bool IsUsingWindowBackgroundColour() const;
    %Docstring
        IsUsingWindowBackgroundColour() -> bool
        
        Returns true if the window's background colour is being used.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    void Stop();
    %Docstring
        Stop()
        
        Stops playing the animation.
    %End

    virtual
    bool IsPlaying() const;
    %Docstring
        IsPlaying() -> bool
        
        Returns true if the animation is being played.
    %End

    virtual
    bool Load(
        wxInputStream & file,
        wxAnimationType animType = wxANIMATION_TYPE_ANY
    );
    %Docstring
        Load(file, animType=ANIMATION_TYPE_ANY) -> bool
        
        Loads the animation from the given stream and calls SetAnimation().
    %End

    virtual
    bool LoadFile(
        const wxString & file,
        wxAnimationType animType = wxANIMATION_TYPE_ANY
    );
    %Docstring
        LoadFile(file, animType=ANIMATION_TYPE_ANY) -> bool
        
        Loads the animation from the given file and calls SetAnimation().
    %End

    wxAnimation GetAnimation() const;
    %Docstring
        GetAnimation() -> Animation
        
        Returns the animation associated with this control.
    %End

    virtual
    void SetAnimation(
        const wxAnimation & anim
    );
    %Docstring
        SetAnimation(anim)
        
        Sets the animation to play in this control.
    %End

    virtual
    void SetInactiveBitmap(
        const wxBitmap & bmp
    );
    %Docstring
        SetInactiveBitmap(bmp)
        
        Sets the bitmap to show on the control when it's not playing an
        animation.
    %End

    wxBitmap GetInactiveBitmap() const;
    %Docstring
        GetInactiveBitmap() -> wx.Bitmap
        
        Returns the inactive bitmap shown in this control when the; see
        SetInactiveBitmap() for more info.
    %End

    wxAnimation CreateAnimation() const;
    %Docstring
        CreateAnimation() -> Animation
        
        Create a new animation object compatible with this control.
    %End

    static
    wxAnimation CreateCompatibleAnimation();
    %Docstring
        CreateCompatibleAnimation() -> Animation
        
        Create a new animation object compatible with this control.
    %End

    public:


    %Property(name=Animation, get=GetAnimation, set=SetAnimation)
    %Property(name=BackingStore, get=GetBackingStore)
    %Property(name=InactiveBitmap, get=GetInactiveBitmap, set=SetInactiveBitmap)
};  // end of class wxGenericAnimationCtrl


class wxAnimationDecoder : wxObjectRefData
{
    %Docstring
        AnimationDecoder()
        
        wxAnimationDecoder is used by wxAnimation for loading frames and other
        information for the animation from the animation image file.
    %End
    %TypeHeaderCode
        #include <wx/animdecod.h>
    %End

public:
    wxAnimationDecoder();

    virtual
    bool Load(
        wxInputStream & stream
    ) = 0;
    %Docstring
        Load(stream) -> bool
        
        Load the animation image frames from the given stream.
    %End

    bool CanRead(
        wxInputStream & stream
    ) const;
    %Docstring
        CanRead(stream) -> bool
        
        Returns true if this decoder supports loading from the given stream.
    %End

    virtual
    wxAnimationDecoder * Clone() const = 0;
    %Docstring
        Clone() -> AnimationDecoder
        
        Create a copy of this decoder.
    %End

    virtual
    wxAnimationType GetType() const = 0;
    %Docstring
        GetType() -> AnimationType
        
        Return the animation type this decoder implements.
    %End

    virtual
    bool ConvertToImage(
        unsigned int frame,
        wxImage * image
    ) const = 0;
    %Docstring
        ConvertToImage(frame, image) -> bool
        
        Convert given frame to wxImage.
    %End

    virtual
    wxSize GetFrameSize(
        unsigned int frame
    ) const = 0;
    %Docstring
        GetFrameSize(frame) -> wx.Size
    %End

    virtual
    wxPoint GetFramePosition(
        unsigned int frame
    ) const = 0;
    %Docstring
        GetFramePosition(frame) -> wx.Point
    %End

    virtual
    wxAnimationDisposal GetDisposalMethod(
        unsigned int frame
    ) const = 0;
    %Docstring
        GetDisposalMethod(frame) -> AnimationDisposal
        
        What should be done after displaying this frame.
    %End

    virtual
    long GetDelay(
        unsigned int frame
    ) const = 0;
    %Docstring
        GetDelay(frame) -> long
        
        Return the number of milliseconds this frame should be displayed.
    %End

    virtual
    wxColour GetTransparentColour(
        unsigned int frame
    ) const = 0;
    %Docstring
        GetTransparentColour(frame) -> wx.Colour
        
        The transparent colour for this frame, if any, or wxNullColour.
    %End

    wxSize GetAnimationSize() const;
    %Docstring
        GetAnimationSize() -> wx.Size
    %End

    wxColour GetBackgroundColour() const;
    %Docstring
        GetBackgroundColour() -> wx.Colour
    %End

    unsigned int GetFrameCount() const;
    %Docstring
        GetFrameCount() -> unsignedint
    %End

    public:


    %Property(name=AnimationSize, get=GetAnimationSize)
    %Property(name=BackgroundColour, get=GetBackgroundColour)
    %Property(name=FrameCount, get=GetFrameCount)
    %Property(name=Type, get=GetType)

protected:
    virtual
    bool DoCanRead(
        wxInputStream & stream
    ) const = 0;
    %Docstring
        DoCanRead(stream) -> bool
        
        Checks the signature of the data in the given stream and returns true
        if it appears to be a valid animation format recognized by the
        animation decoder; this function should modify the stream current
        position without taking care of restoring it since CanRead() will do
        it.
    %End

};  // end of class wxAnimationDecoder


class wxANIDecoder : wxAnimationDecoder
{
    %Docstring
        ANIDecoder()
        
        An animation decoder supporting animated cursor (.ani) files.
    %End
    %TypeHeaderCode
        #include <wx/anidecod.h>
    %End

public:
    wxANIDecoder();

    ~wxANIDecoder();

    virtual
    bool Load(
        wxInputStream & stream
    );
    %Docstring
        Load(stream) -> bool
        
        Load the animation image frames from the given stream.
    %End

    virtual
    wxAnimationDecoder * Clone() const;
    %Docstring
        Clone() -> AnimationDecoder
        
        Create a copy of this decoder.
    %End

    virtual
    wxAnimationType GetType() const;
    %Docstring
        GetType() -> AnimationType
        
        Return the animation type this decoder implements.
    %End

    virtual
    bool ConvertToImage(
        unsigned int frame,
        wxImage * image
    ) const;
    %Docstring
        ConvertToImage(frame, image) -> bool
        
        Convert given frame to wxImage.
    %End

    virtual
    wxSize GetFrameSize(
        unsigned int frame
    ) const;
    %Docstring
        GetFrameSize(frame) -> wx.Size
    %End

    virtual
    wxPoint GetFramePosition(
        unsigned int frame
    ) const;
    %Docstring
        GetFramePosition(frame) -> wx.Point
    %End

    virtual
    wxAnimationDisposal GetDisposalMethod(
        unsigned int frame
    ) const;
    %Docstring
        GetDisposalMethod(frame) -> AnimationDisposal
        
        What should be done after displaying this frame.
    %End

    virtual
    long GetDelay(
        unsigned int frame
    ) const;
    %Docstring
        GetDelay(frame) -> long
        
        Return the number of milliseconds this frame should be displayed.
    %End

    virtual
    wxColour GetTransparentColour(
        unsigned int frame
    ) const;
    %Docstring
        GetTransparentColour(frame) -> wx.Colour
        
        The transparent colour for this frame, if any, or wxNullColour.
    %End

    public:


    %Property(name=Type, get=GetType)

protected:
    virtual
    bool DoCanRead(
        wxInputStream & stream
    ) const;
    %Docstring
        DoCanRead(stream) -> bool
        
        Checks the signature of the data in the given stream and returns true
        if it appears to be a valid animation format recognized by the
        animation decoder; this function should modify the stream current
        position without taking care of restoring it since CanRead() will do
        it.
    %End

};  // end of class wxANIDecoder


class wxGIFDecoder : wxAnimationDecoder
{
    %Docstring
        GIFDecoder()
        
        An animation decoder supporting animated GIF files.
    %End
    %TypeHeaderCode
        #include <wx/gifdecod.h>
    %End

public:
    wxGIFDecoder();

    ~wxGIFDecoder();

    virtual
    bool Load(
        wxInputStream & stream
    );
    %Docstring
        Load(stream) -> bool
        
        Load the animation image frames from the given stream.
    %End

    virtual
    wxAnimationDecoder * Clone() const;
    %Docstring
        Clone() -> AnimationDecoder
        
        Create a copy of this decoder.
    %End

    virtual
    wxAnimationType GetType() const;
    %Docstring
        GetType() -> AnimationType
        
        Return the animation type this decoder implements.
    %End

    virtual
    bool ConvertToImage(
        unsigned int frame,
        wxImage * image
    ) const;
    %Docstring
        ConvertToImage(frame, image) -> bool
        
        Convert given frame to wxImage.
    %End

    virtual
    wxSize GetFrameSize(
        unsigned int frame
    ) const;
    %Docstring
        GetFrameSize(frame) -> wx.Size
    %End

    virtual
    wxPoint GetFramePosition(
        unsigned int frame
    ) const;
    %Docstring
        GetFramePosition(frame) -> wx.Point
    %End

    virtual
    wxAnimationDisposal GetDisposalMethod(
        unsigned int frame
    ) const;
    %Docstring
        GetDisposalMethod(frame) -> AnimationDisposal
        
        What should be done after displaying this frame.
    %End

    virtual
    long GetDelay(
        unsigned int frame
    ) const;
    %Docstring
        GetDelay(frame) -> long
        
        Return the number of milliseconds this frame should be displayed.
    %End

    virtual
    wxColour GetTransparentColour(
        unsigned int frame
    ) const;
    %Docstring
        GetTransparentColour(frame) -> wx.Colour
        
        The transparent colour for this frame, if any, or wxNullColour.
    %End

    public:


    %Property(name=Type, get=GetType)

protected:
    virtual
    bool DoCanRead(
        wxInputStream & stream
    ) const;
    %Docstring
        DoCanRead(stream) -> bool
        
        Checks the signature of the data in the given stream and returns true
        if it appears to be a valid animation format recognized by the
        animation decoder; this function should modify the stream current
        position without taking care of restoring it since CanRead() will do
        it.
    %End

};  // end of class wxGIFDecoder


class wxAnimationDecoderList_iterator /Abstract/
{
    // the C++ implementation of this class
    %TypeHeaderCode
        #include <wx/animate.h>
        
        class wxAnimationDecoderList_iterator {
        public:
            wxAnimationDecoderList_iterator(wxAnimationDecoderList::compatibility_iterator start)
                : m_node(start) {}

            wxAnimationDecoder* __next__() {
                wxAnimationDecoder* obj = NULL;
                if (m_node) {
                    obj = (wxAnimationDecoder*) m_node->GetData();
                    m_node = m_node->GetNext();
                }
                else {
                    PyErr_SetString(PyExc_StopIteration, "");
                }
                return (wxAnimationDecoder*)obj;
            }
        private:
            wxAnimationDecoderList::compatibility_iterator m_node;
        };
    %End
public:
    wxAnimationDecoder* __next__();
    %MethodCode
        sipRes = sipCpp->__next__();
        if (PyErr_Occurred())
            return NULL;
    %End
};

class wxAnimationDecoderList
{
    %TypeHeaderCode
        #include <wx/animate.h>
        
    %End
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->size();
    %End

    wxAnimationDecoder* __getitem__(long index);
    %MethodCode
        if (0 > index)
            index += sipCpp->size();

        if (index < sipCpp->size() && (0 <= index)) {
            wxAnimationDecoderList::compatibility_iterator node = sipCpp->Item(index);
            if (node)
                sipRes = (wxAnimationDecoder*)node->GetData();
        }
        else {
            wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
            sipError = sipErrorFail;
        }
    %End

    int __contains__(const wxAnimationDecoder* obj);
    %MethodCode
        wxAnimationDecoderList::compatibility_iterator node;
        node = sipCpp->Find((wxAnimationDecoder*)obj);
        sipRes = node != NULL;
    %End

    wxAnimationDecoderList_iterator* __iter__() /Factory/;
    %MethodCode
        sipRes =  new wxAnimationDecoderList_iterator(sipCpp->GetFirst());
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxAnimationDecoder* obj);
    %MethodCode
        int idx = sipCpp->IndexOf((wxAnimationDecoder*)obj);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
        }
        sipRes = idx;
    %End

    
};

%Extract(id=pycode_adv)
def _AnimationDecoderList___repr__(self):
    return "AnimationDecoderList: " + repr(list(self))
AnimationDecoderList.__repr__ = _AnimationDecoderList___repr__
del _AnimationDecoderList___repr__
%End



//---------------------------------------------------------------------------

