//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

wxEventType wxEVT_END_PROCESS   /PyName=wxEVT_END_PROCESS/;

class wxProcess : wxEvtHandler
{
    %Docstring
        Process(parent=None, id=-1)
        Process(flags)
        
        The objects of this class are used in conjunction with the wxExecute()
        function.
    %End
    %TypeHeaderCode
        #include <wx/process.h>
    %End

public:
    wxProcess(
        wxEvtHandler * parent = NULL,
        int id = -1
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxProcess(
        int flags
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxProcess();

    bool Activate() const;
    %Docstring
        Activate() -> bool
        
        Activates a GUI process by bringing up its main window to the front.
    %End

    void CloseOutput();
    %Docstring
        CloseOutput()
        
        Closes the output stream (the one connected to the stdin of the child
        process).
    %End

    void Detach();
    %Docstring
        Detach()
        
        Detaches this event handler from the parent specified in the
        constructor (see wxEvtHandler::Unlink() for a similar but not
        identical function).
    %End

    wxInputStream * GetErrorStream() const;
    %Docstring
        GetErrorStream() -> InputStream
        
        Returns an input stream which corresponds to the standard error output
        (stderr) of the child process.
    %End

    wxInputStream * GetInputStream() const;
    %Docstring
        GetInputStream() -> InputStream
        
        It returns an input stream corresponding to the standard output stream
        of the subprocess.
    %End

    wxOutputStream * GetOutputStream() const;
    %Docstring
        GetOutputStream() -> OutputStream
        
        It returns an output stream corresponding to the input stream of the
        subprocess.
    %End

    long GetPid() const;
    %Docstring
        GetPid() -> long
        
        Returns the process ID of the process launched by Open() or set by
        wxExecute() (if you passed this wxProcess as argument).
    %End

    bool IsErrorAvailable() const;
    %Docstring
        IsErrorAvailable() -> bool
        
        Returns true if there is data to be read on the child process standard
        error stream.
    %End

    bool IsInputAvailable() const;
    %Docstring
        IsInputAvailable() -> bool
        
        Returns true if there is data to be read on the child process standard
        output stream.
    %End

    bool IsInputOpened() const;
    %Docstring
        IsInputOpened() -> bool
        
        Returns true if the child process standard output stream is opened.
    %End

    virtual
    void OnTerminate(
        int pid,
        int status
    );
    %Docstring
        OnTerminate(pid, status)
        
        It is called when the process with the pid pid finishes.
    %End

    void Redirect();
    %Docstring
        Redirect()
        
        Turns on redirection.
    %End

    void SetPriority(
        unsigned priority
    );
    %Docstring
        SetPriority(priority)
        
        Sets the priority of the process, between 0 (lowest) and 100
        (highest).
    %End

    static
    bool Exists(
        int pid
    );
    %Docstring
        Exists(pid) -> bool
        
        Returns true if the given process exists in the system.
    %End

    static
    wxKillError Kill(
        int pid,
        wxSignal sig = wxSIGTERM,
        int flags = wxKILL_NOCHILDREN
    );
    %Docstring
        Kill(pid, sig=SIGTERM, flags=KILL_NOCHILDREN) -> KillError
        
        Send the specified signal to the given process.
    %End

    static
    wxProcess * Open(
        const wxString & cmd,
        int flags = wxEXEC_ASYNC
    );
    %Docstring
        Open(cmd, flags=EXEC_ASYNC) -> Process
        
        This static method replaces the standard popen() function: it launches
        the process specified by the cmd parameter and returns the wxProcess
        object which can be used to retrieve the streams connected to the
        standard input, output and error output of the child process.
    %End

    public:


    %Property(name=ErrorStream, get=GetErrorStream)
    %Property(name=InputStream, get=GetInputStream)
    %Property(name=OutputStream, get=GetOutputStream)
    %Property(name=Pid, get=GetPid)
};  // end of class wxProcess


class wxProcessEvent : wxEvent
{
    %Docstring
        ProcessEvent(id=0, pid=0, exitcode=0)
        
        A process event is sent to the wxEvtHandler specified to wxProcess
        when a process is terminated.
    %End
    %TypeHeaderCode
        #include <wx/process.h>
    %End

public:
    wxProcessEvent(
        int id = 0,
        int pid = 0,
        int exitcode = 0
    );

    int GetExitCode();
    %Docstring
        GetExitCode() -> int
        
        Returns the exist status.
    %End

    int GetPid();
    %Docstring
        GetPid() -> int
        
        Returns the process id.
    %End

    public:


    %Property(name=ExitCode, get=GetExitCode)
    %Property(name=Pid, get=GetPid)
};  // end of class wxProcessEvent


%Extract(id=pycode_core)
EVT_END_PROCESS = wx.PyEventBinder( wxEVT_END_PROCESS )

%End


//---------------------------------------------------------------------------

