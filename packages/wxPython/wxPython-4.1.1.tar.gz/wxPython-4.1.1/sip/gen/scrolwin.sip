//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
typedef wxScrolled<wxPanel> _ScrolledWindowBase;
%End


//---------------------------------------------------------------------------

enum wxScrollbarVisibility
{
    wxSHOW_SB_NEVER,
    wxSHOW_SB_DEFAULT,
    wxSHOW_SB_ALWAYS
};

template<T>
class wxScrolled : T
{
    %Docstring
        Scrolled()
        Scrolled(parent, id=-1, pos=DefaultPosition, size=DefaultSize, style=HSCROLL|VSCROLL, name="scrolledWindow")
        
        The wxScrolled class manages scrolling for its client area,
        transforming the coordinates according to the scrollbar positions, and
        setting the scroll positions, thumb sizes and ranges according to the
        area in view.
    %End
    %TypeHeaderCode
        #include <wx/scrolwin.h>
    %End

public:
    wxScrolled();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxScrolled(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = -1,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxHSCROLL|wxVSCROLL,
        const wxString & name = "scrolledWindow"
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void CalcScrolledPosition(
        int x,
        int y,
        int * xx   /Out/,
        int * yy   /Out/
    ) const;
    %Docstring
        CalcScrolledPosition(x, y) -> (xx, yy)
        CalcScrolledPosition(pt) -> Point
        
        Translates the logical coordinates to the device ones.
    %End

    wxPoint CalcScrolledPosition(
        const wxPoint & pt
    ) const;

    void CalcUnscrolledPosition(
        int x,
        int y,
        int * xx   /Out/,
        int * yy   /Out/
    ) const;
    %Docstring
        CalcUnscrolledPosition(x, y) -> (xx, yy)
        CalcUnscrolledPosition(pt) -> Point
        
        Translates the device coordinates to the logical ones.
    %End

    wxPoint CalcUnscrolledPosition(
        const wxPoint & pt
    ) const;

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = -1,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxHSCROLL|wxVSCROLL,
        const wxString & name = "scrolledWindow"
    );
    %Docstring
        Create(parent, id=-1, pos=DefaultPosition, size=DefaultSize, style=HSCROLL|VSCROLL, name="scrolledWindow") -> bool
        
        Creates the window for two-step construction.
    %End

    void DisableKeyboardScrolling();
    %Docstring
        DisableKeyboardScrolling()
        
        Disable use of keyboard keys for scrolling.
    %End

    void DoPrepareDC(
        wxDC & dc
    );
    %Docstring
        DoPrepareDC(dc)
        
        Call this function to prepare the device context for drawing a
        scrolled image.
    %End

    void EnableScrolling(
        bool xScrolling,
        bool yScrolling
    );
    %Docstring
        EnableScrolling(xScrolling, yScrolling)
        
        Enable or disable use of wxWindow::ScrollWindow() for scrolling.
    %End

    void ShowScrollbars(
        wxScrollbarVisibility horz,
        wxScrollbarVisibility vert
    );
    %Docstring
        ShowScrollbars(horz, vert)
        
        Set the scrollbar visibility.
    %End

    void GetScrollPixelsPerUnit(
        int * xUnit   /Out/,
        int * yUnit   /Out/
    ) const;
    %Docstring
        GetScrollPixelsPerUnit() -> (xUnit, yUnit)
        
        Get the number of pixels per scroll unit (line), in each direction, as
        set by SetScrollbars().
    %End

    void GetViewStart(
        int * x   /Out/,
        int * y   /Out/
    ) const;
    %Docstring
        GetViewStart() -> (x, y)
        
        Get the position at which the visible portion of the window starts.
    %End

    bool IsRetained() const;
    %Docstring
        IsRetained() -> bool
        
        Motif only: true if the window has a backing bitmap.
    %End

    virtual
    void OnDraw(
        wxDC & dc
    );
    %Docstring
        OnDraw(dc)
        
        Called by the default paint event handler to allow the application to
        define painting behaviour without having to worry about calling
        DoPrepareDC().
    %End

    void PrepareDC(
        wxDC & dc
    );
    %Docstring
        PrepareDC(dc)
        
        This function is for backwards compatibility only and simply calls
        DoPrepareDC() now.
    %End

    void Scroll(
        int x,
        int y
    );
    %Docstring
        Scroll(x, y)
        Scroll(pt)
        
        Scrolls a window so the view start is at the given point.
    %End

    void Scroll(
        const wxPoint & pt
    );

    void SetScrollRate(
        int xstep,
        int ystep
    );
    %Docstring
        SetScrollRate(xstep, ystep)
        
        Set the horizontal and vertical scrolling increment only.
    %End

    void SetScrollbars(
        int pixelsPerUnitX,
        int pixelsPerUnitY,
        int noUnitsX,
        int noUnitsY,
        int xPos = 0,
        int yPos = 0,
        bool noRefresh = false
    );
    %Docstring
        SetScrollbars(pixelsPerUnitX, pixelsPerUnitY, noUnitsX, noUnitsY, xPos=0, yPos=0, noRefresh=False)
        
        Sets up vertical and/or horizontal scrollbars.
    %End

    void SetTargetWindow(
        wxWindow * window
    );
    %Docstring
        SetTargetWindow(window)
        
        Call this function to tell wxScrolled to perform the actual scrolling
        on a different window (and not on itself).
    %End

    wxWindow * GetTargetWindow() const;
    %Docstring
        GetTargetWindow() -> Window
    %End

    void SetTargetRect(
        const wxRect & rect
    );
    %Docstring
        SetTargetRect(rect)
    %End

    wxRect GetTargetRect() const;
    %Docstring
        GetTargetRect() -> Rect
    %End

    int GetScrollPageSize(
        int orient
    ) const;
    %Docstring
        GetScrollPageSize(orient) -> int
    %End

    void SetScrollPageSize(
        int orient,
        int pageSize
    );
    %Docstring
        SetScrollPageSize(orient, pageSize)
    %End

    int GetScrollLines(
        int orient
    ) const;
    %Docstring
        GetScrollLines(orient) -> int
    %End

    void SetScale(
        double xs,
        double ys
    );
    %Docstring
        SetScale(xs, ys)
    %End

    double GetScaleX() const;
    %Docstring
        GetScaleX() -> double
    %End

    double GetScaleY() const;
    %Docstring
        GetScaleY() -> double
    %End

    void AdjustScrollbars();
    %Docstring
        AdjustScrollbars()
    %End

    bool IsAutoScrolling() const;
    %Docstring
        IsAutoScrolling() -> bool
        
        Are we generating the autoscroll events?
    %End

    void StopAutoScrolling();
    %Docstring
        StopAutoScrolling()
        
        Stop generating the scroll events when mouse is held outside the
        window.
    %End

    virtual
    bool SendAutoScrollEvents(
        wxScrollWinEvent & event
    ) const;
    %Docstring
        SendAutoScrollEvents(event) -> bool
        
        This method can be overridden in a derived class to forbid sending the
        auto scroll events - note that unlike StopAutoScrolling() it doesn't
        stop the timer, so it will be called repeatedly and will typically
        return different values depending on the current mouse position.
    %End

    private:
        wxScrolled(const wxScrolled&);


    private:
        wxScrolled& operator=(const wxScrolled&);


    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ScaleX, get=GetScaleX)
    %Property(name=ScaleY, get=GetScaleY)
    %Property(name=TargetRect, get=GetTargetRect, set=SetTargetRect)
    %Property(name=TargetWindow, get=GetTargetWindow, set=SetTargetWindow)

protected:
    virtual
    bool ShouldScrollToChildOnFocus(
        wxWindow * child
    );
    %Docstring
        ShouldScrollToChildOnFocus(child) -> bool
        
        This method can be overridden in a derived class to prevent scrolling
        the child window into view automatically when it gets focus.
    %End

    virtual
    wxSize GetSizeAvailableForScrollTarget(
        const wxSize & size
    );
    %Docstring
        GetSizeAvailableForScrollTarget(size) -> Size
        
        Function which must be overridden to implement the size available for
        the scroll target for the given size of the main window.
    %End

};  // end of class wxScrolled


typedef wxScrolled<wxWindow > wxScrolledCanvas;

typedef wxScrolled<wxPanel> _ScrolledWindowBase   /NoTypeName/;

class wxScrolledWindow : _ScrolledWindowBase
{
    %Docstring
        ScrolledWindow()
        ScrolledWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=ScrolledWindowStyle, name=PanelNameStr)
        
        Scrolled window derived from wxPanel.
    %End
public:
    wxScrolledWindow();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxScrolledWindow(
        wxWindow* parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint& pos = wxDefaultPosition,
        const wxSize& size = wxDefaultSize,
        long style = wxScrolledWindowStyle,
        const wxString& name = wxPanelNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void SetFocusIgnoringChildren();
    %Docstring
        SetFocusIgnoringChildren()
        
        In contrast to SetFocus() this will set the focus to the panel even if
        there are child windows in the panel. This is only rarely needed.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

};  // end of class wxScrolledWindow


%Extract(id=pycode_core)
PyScrolledWindow = wx.deprecated(ScrolledWindow, 'Use ScrolledWindow instead.')

%End


//---------------------------------------------------------------------------

