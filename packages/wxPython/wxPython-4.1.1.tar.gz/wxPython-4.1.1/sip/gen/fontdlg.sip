//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/fontdlg.h>
%End


//---------------------------------------------------------------------------

class wxFontData : wxObject
{
    %Docstring
        FontData()
        
        This class holds a variety of information related to font dialogs.
    %End
    %TypeHeaderCode
        #include <wx/fontdata.h>
    %End

public:
    wxFontData();

    void EnableEffects(
        bool enable
    );
    %Docstring
        EnableEffects(enable)
        
        Enables or disables "effects" under Windows or generic only.
    %End

    bool GetAllowSymbols() const;
    %Docstring
        GetAllowSymbols() -> bool
        
        Under Windows, returns a flag determining whether symbol fonts can be
        selected.
    %End

    wxFont GetChosenFont() const;
    %Docstring
        GetChosenFont() -> Font
        
        Gets the font chosen by the user if the user pressed OK
        (wxFontDialog::ShowModal() returned wxID_OK).
    %End

    const wxColour & GetColour() const;
    %Docstring
        GetColour() -> Colour
        
        Gets the colour associated with the font dialog.
    %End

    bool GetEnableEffects() const;
    %Docstring
        GetEnableEffects() -> bool
        
        Determines whether "effects" are enabled under Windows.
    %End

    int GetRestrictSelection() const;
    %Docstring
        GetRestrictSelection() -> int
        
        Returns the state of the flags restricting the selection.
    %End

    wxFont GetInitialFont() const;
    %Docstring
        GetInitialFont() -> Font
        
        Gets the font that will be initially used by the font dialog.
    %End

    bool GetShowHelp() const;
    %Docstring
        GetShowHelp() -> bool
        
        Returns true if the Help button will be shown (Windows only).
    %End

    void RestrictSelection(
        int flags
    );
    %Docstring
        RestrictSelection(flags)
        
        Restricts the selection to a subset of the available fonts.
    %End

    void SetAllowSymbols(
        bool allowSymbols
    );
    %Docstring
        SetAllowSymbols(allowSymbols)
        
        Under Windows, determines whether symbol fonts can be selected.
    %End

    void SetChosenFont(
        const wxFont & font
    );
    %Docstring
        SetChosenFont(font)
        
        Sets the font that will be returned to the user (for internal use
        only).
    %End

    void SetColour(
        const wxColour & colour
    );
    %Docstring
        SetColour(colour)
        
        Sets the colour that will be used for the font foreground colour.
    %End

    void SetInitialFont(
        const wxFont & font
    );
    %Docstring
        SetInitialFont(font)
        
        Sets the font that will be initially used by the font dialog.
    %End

    void SetRange(
        int min,
        int max
    );
    %Docstring
        SetRange(min, max)
        
        Sets the valid range for the font point size (Windows only).
    %End

    void SetShowHelp(
        bool showHelp
    );
    %Docstring
        SetShowHelp(showHelp)
        
        Determines whether the Help button will be displayed in the font
        dialog (Windows only).
    %End

    public:


    %Property(name=AllowSymbols, get=GetAllowSymbols, set=SetAllowSymbols)
    %Property(name=ChosenFont, get=GetChosenFont, set=SetChosenFont)
    %Property(name=Colour, get=GetColour, set=SetColour)
    %Property(name=InitialFont, get=GetInitialFont, set=SetInitialFont)
    %Property(name=ShowHelp, get=GetShowHelp, set=SetShowHelp)
};  // end of class wxFontData


class wxFontDialog : wxDialog
{
    %Docstring
        FontDialog()
        FontDialog(parent)
        FontDialog(parent, data)
        
        This class represents the font chooser dialog.
    %End
    %TypeHeaderCode
        #include <wx/fontdlg.h>
    %End

public:
    wxFontDialog();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxFontDialog(
        wxWindow * parent
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxFontDialog(
        wxWindow * parent,
        const wxFontData & data
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxFontData & GetFontData();
    %Docstring
        GetFontData() -> FontData
        
        Returns the font data associated with the font dialog.
    %End

    bool Create(
        wxWindow * parent
    )   /TransferThis/;
    %Docstring
        Create(parent) -> bool
        Create(parent, data) -> bool
        
        Creates the dialog if the wxFontDialog object had been initialized
        using the default constructor.
    %End

    bool Create(
        wxWindow * parent,
        const wxFontData & data
    );

    int ShowModal();
    %Docstring
        ShowModal() -> int
        
        Shows the dialog, returning wxID_OK if the user pressed Ok, and
        wxID_CANCEL otherwise.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=FontData, get=GetFontData)
};  // end of class wxFontDialog


wxFont wxGetFontFromUser(
    wxWindow * parent,
    const wxFont & fontInit,
    const wxString & caption = wxEmptyString
);
%Docstring
    GetFontFromUser(parent, fontInit, caption=EmptyString) -> Font
    
    Shows the font selection dialog and returns the font selected by user
    or invalid font (use wxFont::IsOk() to test whether a font is valid)
    if the dialog was cancelled.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End


//---------------------------------------------------------------------------

