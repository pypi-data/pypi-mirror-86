//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _webkit.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/html/webkit.h>
#if !wxUSE_WEBKIT
class wxWebKitCtrl;
class wxWebKitBeforeLoadEvent;
class wxWebKitStateChangedEvent;
class wxWebKitNewWindowEvent;
extern const char* wxWebKitCtrlNameStr;


enum  {
    wxWEBKIT_STATE_START,
    wxWEBKIT_STATE_NEGOTIATING,
    wxWEBKIT_STATE_REDIRECTING,
    wxWEBKIT_STATE_TRANSFERRING,
    wxWEBKIT_STATE_STOP,
    wxWEBKIT_STATE_FAILED,
};

enum  {
    wxWEBKIT_NAV_LINK_CLICKED,
    wxWEBKIT_NAV_BACK_NEXT,
    wxWEBKIT_NAV_FORM_SUBMITTED,
    wxWEBKIT_NAV_RELOAD,
    wxWEBKIT_NAV_FORM_RESUBMITTED,
    wxWEBKIT_NAV_OTHER,
};
extern wxEventType wxEVT_WEBKIT_STATE_CHANGED;
extern wxEventType wxEVT_WEBKIT_BEFORE_LOAD;
extern wxEventType wxEVT_WEBKIT_NEW_WINDOW;

class wxWebKitCtrl : public wxControl {
public:
    wxWebKitCtrl()
        { wxPyRaiseNotImplemented(); }

    wxWebKitCtrl(wxWindow *parent, wxWindowID winid, const wxString &strURL, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=0, const wxValidator &validator=wxDefaultValidator, const wxString &name=wxWebKitCtrlNameStr)
        { wxPyRaiseNotImplemented(); }

    bool Create(wxWindow *parent, wxWindowID winid, const wxString &strURL, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=0, const wxValidator &validator=wxDefaultValidator, const wxString &name=wxWebKitCtrlNameStr)
        { return false; }

    virtual ~wxWebKitCtrl()
        { }

    void LoadURL(const wxString &url)
        { }

    bool CanGoBack()
        { return false; }

    bool CanGoForward()
        { return false; }

    bool GoBack()
        { return false; }

    bool GoForward()
        { return false; }

    void Reload()
        { }

    void Stop()
        { }

    bool CanGetPageSource()
        { return false; }

    wxString GetPageSource()
        { return wxEmptyString; }

    void SetPageSource(const wxString &source, const wxString &baseUrl=wxEmptyString)
        { }

    wxString GetPageURL()
        { return wxEmptyString; }

    void SetPageTitle(const wxString &title)
        { }

    wxString GetPageTitle()
        { return wxEmptyString; }

    void SetTitle(const wxString &title)
        { }

    wxString GetTitle()
        { return wxEmptyString; }

    wxString GetSelection()
        { return wxEmptyString; }

    bool CanIncreaseTextSize()
        { return false; }

    void IncreaseTextSize()
        { }

    bool CanDecreaseTextSize()
        { return false; }

    void DecreaseTextSize()
        { }

    void Print(bool showPrompt=false)
        { }

    void MakeEditable(bool enable=true)
        { }

    bool IsEditable()
        { return false; }

    wxString RunScript(const wxString &javascript)
        { return wxEmptyString; }

    void SetScrollPos(int pos)
        { }

    int GetScrollPos()
        { return 0; }

};

class wxWebKitBeforeLoadEvent : public wxCommandEvent {
public:
    bool IsCancelled()
        { return false; }

    void Cancel(bool cancel=true)
        { }

    wxString GetURL()
        { return wxEmptyString; }

    void SetURL(const wxString &url)
        { }

    void SetNavigationType(int navType)
        { }

    int GetNavigationType()
        { return 0; }

    wxWebKitBeforeLoadEvent(wxWindow *win=0)
        { wxPyRaiseNotImplemented(); }

};

class wxWebKitStateChangedEvent : public wxCommandEvent {
public:
    int GetState()
        { return 0; }

    void SetState(int state)
        { }

    wxString GetURL()
        { return wxEmptyString; }

    void SetURL(const wxString &url)
        { }

    wxWebKitStateChangedEvent(wxWindow *win=0)
        { wxPyRaiseNotImplemented(); }

};

class wxWebKitNewWindowEvent : public wxCommandEvent {
public:
    wxString GetURL() const 
        { return wxEmptyString; }

    void SetURL(const wxString &url)
        { }

    wxString GetTargetName() const 
        { return wxEmptyString; }

    void SetTargetName(const wxString &name)
        { }

    wxWebKitNewWindowEvent(wxWindow *win=0)
        { wxPyRaiseNotImplemented(); }

};
#endif //!wxUSE_WEBKIT

%End

%ModuleCode
#if !wxUSE_WEBKIT
const char* wxWebKitCtrlNameStr = "";

wxEventType wxEVT_WEBKIT_STATE_CHANGED;
wxEventType wxEVT_WEBKIT_BEFORE_LOAD;
wxEventType wxEVT_WEBKIT_NEW_WINDOW;
#endif //!wxUSE_WEBKIT

%End

//---------------------------------------------------------------------------

enum 
{
    wxWEBKIT_STATE_START,
    wxWEBKIT_STATE_NEGOTIATING,
    wxWEBKIT_STATE_REDIRECTING,
    wxWEBKIT_STATE_TRANSFERRING,
    wxWEBKIT_STATE_STOP,
    wxWEBKIT_STATE_FAILED
};

enum 
{
    wxWEBKIT_NAV_LINK_CLICKED,
    wxWEBKIT_NAV_BACK_NEXT,
    wxWEBKIT_NAV_FORM_SUBMITTED,
    wxWEBKIT_NAV_RELOAD,
    wxWEBKIT_NAV_FORM_RESUBMITTED,
    wxWEBKIT_NAV_OTHER
};

wxEventType wxEVT_WEBKIT_STATE_CHANGED   /PyName=wxEVT_WEBKIT_STATE_CHANGED/;

wxEventType wxEVT_WEBKIT_BEFORE_LOAD   /PyName=wxEVT_WEBKIT_BEFORE_LOAD/;

wxEventType wxEVT_WEBKIT_NEW_WINDOW   /PyName=wxEVT_WEBKIT_NEW_WINDOW/;

const char* wxWebKitCtrlNameStr;

class wxWebKitCtrl : wxControl
{
    %Docstring
        WebKitCtrl()
        WebKitCtrl(parent, winid=wx.ID_ANY, strURL="", pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, validator=wx.DefaultValidator, name=WebKitCtrlNameStr)
        
        This control is a native wrapper around the Safari web browsing
        engine.
    %End
    %TypeHeaderCode
        #include <wx/html/webkit.h>
    %End

public:
    wxWebKitCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxWebKitCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID winid = wxID_ANY,
        const wxString & strURL = "",
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxWebKitCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxWebKitCtrl();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID winid = wxID_ANY,
        const wxString & strURL = "",
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxWebKitCtrlNameStr
    );
    %Docstring
        Create(parent, winid=wx.ID_ANY, strURL="", pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, validator=wx.DefaultValidator, name=WebKitCtrlNameStr) -> bool
    %End

    void LoadURL(
        const wxString & url
    );
    %Docstring
        LoadURL(url)
    %End

    bool CanGoBack();
    %Docstring
        CanGoBack() -> bool
    %End

    bool CanGoForward();
    %Docstring
        CanGoForward() -> bool
    %End

    bool GoBack();
    %Docstring
        GoBack() -> bool
    %End

    bool GoForward();
    %Docstring
        GoForward() -> bool
    %End

    void Reload();
    %Docstring
        Reload()
    %End

    void Stop();
    %Docstring
        Stop()
    %End

    bool CanGetPageSource();
    %Docstring
        CanGetPageSource() -> bool
    %End

    wxString GetPageSource();
    %Docstring
        GetPageSource() -> String
    %End

    void SetPageSource(
        const wxString & source,
        const wxString & baseUrl = wxEmptyString
    );
    %Docstring
        SetPageSource(source, baseUrl=wx.EmptyString)
    %End

    wxString GetPageURL();
    %Docstring
        GetPageURL() -> String
    %End

    void SetPageTitle(
        const wxString & title
    );
    %Docstring
        SetPageTitle(title)
    %End

    wxString GetPageTitle();
    %Docstring
        GetPageTitle() -> String
    %End

    void SetTitle(
        const wxString & title
    );
    %Docstring
        SetTitle(title)
    %End

    wxString GetTitle();
    %Docstring
        GetTitle() -> String
    %End

    wxString GetSelection();
    %Docstring
        GetSelection() -> String
    %End

    bool CanIncreaseTextSize();
    %Docstring
        CanIncreaseTextSize() -> bool
    %End

    void IncreaseTextSize();
    %Docstring
        IncreaseTextSize()
    %End

    bool CanDecreaseTextSize();
    %Docstring
        CanDecreaseTextSize() -> bool
    %End

    void DecreaseTextSize();
    %Docstring
        DecreaseTextSize()
    %End

    void Print(
        bool showPrompt = false
    );
    %Docstring
        Print(showPrompt=False)
    %End

    void MakeEditable(
        bool enable = true
    );
    %Docstring
        MakeEditable(enable=True)
    %End

    bool IsEditable();
    %Docstring
        IsEditable() -> bool
    %End

    wxString RunScript(
        const wxString & javascript
    );
    %Docstring
        RunScript(javascript) -> String
    %End

    void SetScrollPos(
        int pos
    );
    %Docstring
        SetScrollPos(pos)
    %End

    int GetScrollPos();
    %Docstring
        GetScrollPos() -> int
    %End

    private:
        wxWebKitCtrl(const wxWebKitCtrl&);


    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=PageSource, get=GetPageSource, set=SetPageSource)
    %Property(name=PageTitle, get=GetPageTitle, set=SetPageTitle)
    %Property(name=PageURL, get=GetPageURL)
    %Property(name=ScrollPos, get=GetScrollPos, set=SetScrollPos)
    %Property(name=Selection, get=GetSelection)
    %Property(name=Title, get=GetTitle, set=SetTitle)
};  // end of class wxWebKitCtrl


class wxWebKitBeforeLoadEvent : wxCommandEvent
{
    %Docstring
        WebKitBeforeLoadEvent(win=0)
    %End
    %TypeHeaderCode
        #include <wx/html/webkit.h>
    %End

public:
    wxWebKitBeforeLoadEvent(
        wxWindow * win = 0
    );

    bool IsCancelled();
    %Docstring
        IsCancelled() -> bool
    %End

    void Cancel(
        bool cancel = true
    );
    %Docstring
        Cancel(cancel=True)
    %End

    wxString GetURL();
    %Docstring
        GetURL() -> String
    %End

    void SetURL(
        const wxString & url
    );
    %Docstring
        SetURL(url)
    %End

    void SetNavigationType(
        int navType
    );
    %Docstring
        SetNavigationType(navType)
    %End

    int GetNavigationType();
    %Docstring
        GetNavigationType() -> int
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxWebKitBeforeLoadEvent& operator=(const wxWebKitBeforeLoadEvent&);


    public:


    %Property(name=NavigationType, get=GetNavigationType, set=SetNavigationType)
    %Property(name=URL, get=GetURL, set=SetURL)
};  // end of class wxWebKitBeforeLoadEvent


class wxWebKitStateChangedEvent : wxCommandEvent
{
    %Docstring
        WebKitStateChangedEvent(win=0)
    %End
    %TypeHeaderCode
        #include <wx/html/webkit.h>
    %End

public:
    wxWebKitStateChangedEvent(
        wxWindow * win = 0
    );

    int GetState();
    %Docstring
        GetState() -> int
    %End

    void SetState(
        int state
    );
    %Docstring
        SetState(state)
    %End

    wxString GetURL();
    %Docstring
        GetURL() -> String
    %End

    void SetURL(
        const wxString & url
    );
    %Docstring
        SetURL(url)
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxWebKitStateChangedEvent& operator=(const wxWebKitStateChangedEvent&);


    public:


    %Property(name=State, get=GetState, set=SetState)
    %Property(name=URL, get=GetURL, set=SetURL)
};  // end of class wxWebKitStateChangedEvent


class wxWebKitNewWindowEvent : wxCommandEvent
{
    %Docstring
        WebKitNewWindowEvent(win=0)
    %End
    %TypeHeaderCode
        #include <wx/html/webkit.h>
    %End

public:
    wxWebKitNewWindowEvent(
        wxWindow * win = 0
    );

    wxString GetURL() const;
    %Docstring
        GetURL() -> String
    %End

    void SetURL(
        const wxString & url
    );
    %Docstring
        SetURL(url)
    %End

    wxString GetTargetName() const;
    %Docstring
        GetTargetName() -> String
    %End

    void SetTargetName(
        const wxString & name
    );
    %Docstring
        SetTargetName(name)
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxWebKitNewWindowEvent& operator=(const wxWebKitNewWindowEvent&);


    public:


    %Property(name=TargetName, get=GetTargetName, set=SetTargetName)
    %Property(name=URL, get=GetURL, set=SetURL)
};  // end of class wxWebKitNewWindowEvent


const int wxUSE_WEBKIT;
%Extract(id=pycode_webkit)
EVT_WEBKIT_BEFORE_LOAD = wx.PyEventBinder( wxEVT_WEBKIT_BEFORE_LOAD, 1 )
EVT_WEBKIT_STATE_CHANGED = wx.PyEventBinder( wxEVT_WEBKIT_STATE_CHANGED, 1 )
EVT_WEBKIT_NEW_WINDOW = wx.PyEventBinder( wxEVT_WEBKIT_NEW_WINDOW, 1 )

%End


//---------------------------------------------------------------------------

