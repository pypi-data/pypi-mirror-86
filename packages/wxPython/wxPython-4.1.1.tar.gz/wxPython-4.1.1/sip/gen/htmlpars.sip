//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _html.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

enum wxHtmlURLType
{
    wxHTML_URL_PAGE,
    wxHTML_URL_IMAGE,
    wxHTML_URL_OTHER
};

class wxHtmlTagHandler : wxObject
{
    %Docstring
        HtmlTagHandler()
    %End
    %TypeHeaderCode
        #include <wx/html/htmlpars.h>
    %End

public:
    wxHtmlTagHandler();

    virtual
    wxString GetSupportedTags() = 0;
    %Docstring
        GetSupportedTags() -> String
        
        Returns list of supported tags.
    %End

    virtual
    bool HandleTag(
        const wxHtmlTag & tag
    ) = 0;
    %Docstring
        HandleTag(tag) -> bool
        
        This is the core method of each handler.
    %End

    virtual
    void SetParser(
        wxHtmlParser * parser
    );
    %Docstring
        SetParser(parser)
        
        Assigns parser to this handler.
    %End

    wxHtmlParser * GetParser() const;
    %Docstring
        GetParser() -> HtmlParser
        
        Returns the parser associated with this tag handler.
    %End

    private:
        wxHtmlTagHandler(const wxHtmlTagHandler&);


    public:


    %Property(name=Parser, get=GetParser, set=SetParser)
    %Property(name=SupportedTags, get=GetSupportedTags)

protected:
    void ParseInner(
        const wxHtmlTag & tag
    );
    %Docstring
        ParseInner(tag)
        
        This method calls parser's wxHtmlParser::DoParsing method for the
        string between this tag and the paired ending tag:
    %End

    void ParseInnerSource(
        const wxString & source
    );
    %Docstring
        ParseInnerSource(source)
        
        Parses given source as if it was tag's inner code (see
        wxHtmlParser::GetInnerSource).
    %End

};  // end of class wxHtmlTagHandler


class wxHtmlParser   /Abstract/
{
    %Docstring
        HtmlParser()
        
        Classes derived from this handle the generic parsing of HTML
        documents: it scans the document and divide it into blocks of tags
        (where one block consists of beginning and ending tag and of text
        between these two tags).
    %End
    %TypeHeaderCode
        #include <wx/html/htmlpars.h>
    %End

public:
    wxHtmlParser();

    virtual
    void AddTagHandler(
        wxHtmlTagHandler * handler
    );
    %Docstring
        AddTagHandler(handler)
        
        Adds handler to the internal list ( hash table) of handlers.
    %End

    void DoParsing();
    %Docstring
        DoParsing()
        
        Parses the whole m_Source.
    %End

    virtual
    void DoneParser();
    %Docstring
        DoneParser()
        
        This must be called after DoParsing().
    %End

    wxFileSystem * GetFS() const;
    %Docstring
        GetFS() -> wx.FileSystem
        
        Returns pointer to the file system.
    %End

    virtual
    wxObject * GetProduct() = 0;
    %Docstring
        GetProduct() -> wx.Object
        
        Returns product of parsing.
    %End

    const wxString * GetSource();
    %Docstring
        GetSource() -> String
        
        Returns pointer to the source being parsed.
    %End

    virtual
    void InitParser(
        const wxString & source
    );
    %Docstring
        InitParser(source)
        
        Setups the parser for parsing the source string.
    %End

    virtual
    wxFSFile * OpenURL(
        wxHtmlURLType type,
        const wxString & url
    ) const;
    %Docstring
        OpenURL(type, url) -> wx.FSFile
        
        Opens given URL and returns wxFSFile object that can be used to read
        data from it.
    %End

    wxObject * Parse(
        const wxString & source
    );
    %Docstring
        Parse(source) -> wx.Object
        
        Proceeds parsing of the document.
    %End

    void PopTagHandler();
    %Docstring
        PopTagHandler()
        
        Restores parser's state before last call to PushTagHandler().
    %End

    void PushTagHandler(
        wxHtmlTagHandler * handler,
        const wxString & tags
    );
    %Docstring
        PushTagHandler(handler, tags)
        
        Forces the handler to handle additional tags (not returned by
        wxHtmlTagHandler::GetSupportedTags).
    %End

    void SetFS(
        wxFileSystem * fs
    );
    %Docstring
        SetFS(fs)
        
        Sets the virtual file system that will be used to request additional
        files.
    %End

    virtual
    void StopParsing();
    %Docstring
        StopParsing()
        
        Call this function to interrupt parsing from a tag handler.
    %End

    private:
        wxHtmlParser(const wxHtmlParser&);


    public:


    %Property(name=FS, get=GetFS, set=SetFS)
    %Property(name=Product, get=GetProduct)
    %Property(name=Source, get=GetSource)

protected:
    virtual
    void AddTag(
        const wxHtmlTag & tag
    );
    %Docstring
        AddTag(tag)
        
        This may (and may not) be overwritten in derived class.
    %End

};  // end of class wxHtmlParser



//---------------------------------------------------------------------------

