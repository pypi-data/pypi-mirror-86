//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxFileHistory : wxObject
{
    %Docstring
        FileHistory(maxFiles=9, idBase=ID_FILE1)
        
        The wxFileHistory encapsulates a user interface convenience, the list
        of most recently visited files as shown on a menu (usually the File
        menu).
    %End
    %TypeHeaderCode
        #include <wx/filehistory.h>
    %End

public:
    wxFileHistory(
        size_t maxFiles = 9,
        wxWindowID idBase = wxID_FILE1
    );

    virtual
    ~wxFileHistory();

    virtual
    void AddFileToHistory(
        const wxString & filename
    );
    %Docstring
        AddFileToHistory(filename)
        
        Adds a file to the file history list, if the object has a pointer to
        an appropriate file menu.
    %End

    virtual
    void AddFilesToMenu();
    %Docstring
        AddFilesToMenu()
        AddFilesToMenu(menu)
        
        Appends the files in the history list, to all menus managed by the
        file history object.
    %End

    virtual
    void AddFilesToMenu(
        wxMenu * menu
    );

    wxWindowID GetBaseId() const;
    %Docstring
        GetBaseId() -> WindowID
        
        Returns the base identifier for the range used for appending items.
    %End

    virtual
    size_t GetCount() const;
    %Docstring
        GetCount() -> size_t
        
        Returns the number of files currently stored in the file history.
    %End

    virtual
    wxString GetHistoryFile(
        size_t index
    ) const;
    %Docstring
        GetHistoryFile(index) -> String
        
        Returns the file at this index (zero-based).
    %End

    virtual
    int GetMaxFiles() const;
    %Docstring
        GetMaxFiles() -> int
        
        Returns the maximum number of files that can be stored.
    %End

    const wxFileHistoryMenuList& GetMenus() const   /NoCopy/;
    %Docstring
        GetMenus() -> FileHistoryMenuList
        
        Returns the list of menus that are managed by this file history
        object.
    %End

    virtual
    void Load(
        const wxConfigBase & config
    );
    %Docstring
        Load(config)
        
        Loads the file history from the given config object.
    %End

    virtual
    void RemoveFileFromHistory(
        size_t i
    );
    %Docstring
        RemoveFileFromHistory(i)
        
        Removes the specified file from the history.
    %End

    virtual
    void RemoveMenu(
        wxMenu * menu
    );
    %Docstring
        RemoveMenu(menu)
        
        Removes this menu from the list of those managed by this object.
    %End

    virtual
    void Save(
        wxConfigBase & config
    );
    %Docstring
        Save(config)
        
        Saves the file history into the given config object.
    %End

    void SetBaseId(
        wxWindowID baseId
    );
    %Docstring
        SetBaseId(baseId)
        
        Sets the base identifier for the range used for appending items.
    %End

    virtual
    void UseMenu(
        wxMenu * menu
    );
    %Docstring
        UseMenu(menu)
        
        Adds this menu to the list of those menus that are managed by this
        file history object.
    %End

    private:
        wxFileHistory(const wxFileHistory&);


    public:


    %Property(name=BaseId, get=GetBaseId, set=SetBaseId)
    %Property(name=Count, get=GetCount)
    %Property(name=MaxFiles, get=GetMaxFiles)
    %Property(name=Menus, get=GetMenus)
};  // end of class wxFileHistory


class wxFileHistoryMenuList_iterator /Abstract/
{
    // the C++ implementation of this class
    %TypeHeaderCode
        
        typedef wxList wxFileHistoryMenuList;
        class wxFileHistoryMenuList_iterator {
        public:
            wxFileHistoryMenuList_iterator(wxFileHistoryMenuList::compatibility_iterator start)
                : m_node(start) {}

            wxMenu* __next__() {
                wxMenu* obj = NULL;
                if (m_node) {
                    obj = (wxMenu*) m_node->GetData();
                    m_node = m_node->GetNext();
                }
                else {
                    PyErr_SetString(PyExc_StopIteration, "");
                }
                return (wxMenu*)obj;
            }
        private:
            wxFileHistoryMenuList::compatibility_iterator m_node;
        };
    %End
public:
    wxMenu* __next__();
    %MethodCode
        sipRes = sipCpp->__next__();
        if (PyErr_Occurred())
            return NULL;
    %End
};

class wxFileHistoryMenuList
{
    %TypeHeaderCode
        
        typedef wxList wxFileHistoryMenuList;
    %End
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->size();
    %End

    wxMenu* __getitem__(long index);
    %MethodCode
        if (0 > index)
            index += sipCpp->size();

        if (index < sipCpp->size() && (0 <= index)) {
            wxFileHistoryMenuList::compatibility_iterator node = sipCpp->Item(index);
            if (node)
                sipRes = (wxMenu*)node->GetData();
        }
        else {
            wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
            sipError = sipErrorFail;
        }
    %End

    int __contains__(const wxMenu* obj);
    %MethodCode
        wxFileHistoryMenuList::compatibility_iterator node;
        node = sipCpp->Find((wxMenu*)obj);
        sipRes = node != NULL;
    %End

    wxFileHistoryMenuList_iterator* __iter__() /Factory/;
    %MethodCode
        sipRes =  new wxFileHistoryMenuList_iterator(sipCpp->GetFirst());
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxMenu* obj);
    %MethodCode
        int idx = sipCpp->IndexOf((wxMenu*)obj);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
        }
        sipRes = idx;
    %End

    
};

%Extract(id=pycode_core)
def _FileHistoryMenuList___repr__(self):
    return "FileHistoryMenuList: " + repr(list(self))
FileHistoryMenuList.__repr__ = _FileHistoryMenuList___repr__
del _FileHistoryMenuList___repr__
%End



//---------------------------------------------------------------------------

