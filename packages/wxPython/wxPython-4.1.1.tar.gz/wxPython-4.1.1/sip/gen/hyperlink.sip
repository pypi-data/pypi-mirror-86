//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _adv.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/hyperlink.h>
%End


//---------------------------------------------------------------------------

const int wxHL_CONTEXTMENU;
const int wxHL_ALIGN_LEFT;
const int wxHL_ALIGN_RIGHT;
const int wxHL_ALIGN_CENTRE;
const int wxHL_DEFAULT_STYLE;
wxEventType wxEVT_HYPERLINK   /PyName=wxEVT_HYPERLINK/;

class wxHyperlinkEvent : wxCommandEvent
{
    %Docstring
        HyperlinkEvent(generator, id, url)
        
        This event class is used for the events generated by wxHyperlinkCtrl.
    %End
    %TypeHeaderCode
        #include <wx/hyperlink.h>
    %End

public:
    wxHyperlinkEvent(
        wxObject * generator,
        int id,
        const wxString & url
    );

    wxString GetURL() const;
    %Docstring
        GetURL() -> String
        
        Returns the URL of the hyperlink where the user has just clicked.
    %End

    void SetURL(
        const wxString & url
    );
    %Docstring
        SetURL(url)
        
        Sets the URL associated with the event.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxHyperlinkEvent& operator=(const wxHyperlinkEvent&);


    public:


    %Property(name=URL, get=GetURL, set=SetURL)
};  // end of class wxHyperlinkEvent


const char* wxHyperlinkCtrlNameStr;

class wxHyperlinkCtrl : wxControl
{
    %Docstring
        HyperlinkCtrl()
        HyperlinkCtrl(parent, id=wx.ID_ANY, label=wx.EmptyString, url=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=HL_DEFAULT_STYLE, name=HyperlinkCtrlNameStr)
        
        This class shows a static text element which links to an URL.
    %End
    %TypeHeaderCode
        #include <wx/hyperlink.h>
    %End

public:
    wxHyperlinkCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxHyperlinkCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & label = wxEmptyString,
        const wxString & url = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxHL_DEFAULT_STYLE,
        const wxString & name = wxHyperlinkCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & label = wxEmptyString,
        const wxString & url = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxHL_DEFAULT_STYLE,
        const wxString & name = wxHyperlinkCtrlNameStr
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, label=wx.EmptyString, url=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=HL_DEFAULT_STYLE, name=HyperlinkCtrlNameStr) -> bool
        
        Creates the hyperlink control.
    %End

    wxColour GetHoverColour() const;
    %Docstring
        GetHoverColour() -> wx.Colour
        
        Returns the colour used to print the label of the hyperlink when the
        mouse is over the control.
    %End

    wxColour GetNormalColour() const;
    %Docstring
        GetNormalColour() -> wx.Colour
        
        Returns the colour used to print the label when the link has never
        been clicked before (i.e. the link has not been visited) and the mouse
        is not over the control.
    %End

    wxString GetURL() const;
    %Docstring
        GetURL() -> String
        
        Returns the URL associated with the hyperlink.
    %End

    bool GetVisited() const;
    %Docstring
        GetVisited() -> bool
        
        Returns true if the hyperlink has already been clicked by the user at
        least one time.
    %End

    wxColour GetVisitedColour() const;
    %Docstring
        GetVisitedColour() -> wx.Colour
        
        Returns the colour used to print the label when the mouse is not over
        the control and the link has already been clicked before (i.e. the
        link has been visited).
    %End

    void SetHoverColour(
        const wxColour & colour
    );
    %Docstring
        SetHoverColour(colour)
        
        Sets the colour used to print the label of the hyperlink when the
        mouse is over the control.
    %End

    void SetNormalColour(
        const wxColour & colour
    );
    %Docstring
        SetNormalColour(colour)
        
        Sets the colour used to print the label when the link has never been
        clicked before (i.e. the link has not been visited) and the mouse is
        not over the control.
    %End

    void SetURL(
        const wxString & url
    );
    %Docstring
        SetURL(url)
        
        Sets the URL associated with the hyperlink.
    %End

    void SetVisited(
        bool visited = true
    );
    %Docstring
        SetVisited(visited=True)
        
        Marks the hyperlink as visited (see
        wxHyperlinkCtrl::SetVisitedColour).
    %End

    void SetVisitedColour(
        const wxColour & colour
    );
    %Docstring
        SetVisitedColour(colour)
        
        Sets the colour used to print the label when the mouse is not over the
        control and the link has already been clicked before (i.e. the link
        has been visited).
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=HoverColour, get=GetHoverColour, set=SetHoverColour)
    %Property(name=NormalColour, get=GetNormalColour, set=SetNormalColour)
    %Property(name=URL, get=GetURL, set=SetURL)
    %Property(name=Visited, get=GetVisited, set=SetVisited)
    %Property(name=VisitedColour, get=GetVisitedColour, set=SetVisitedColour)
};  // end of class wxHyperlinkCtrl


%Extract(id=pycode_adv)
EVT_HYPERLINK = wx.PyEventBinder( wxEVT_HYPERLINK, 1 )

# deprecated wxEVT alias
wxEVT_COMMAND_HYPERLINK  = wxEVT_HYPERLINK

%End


//---------------------------------------------------------------------------

