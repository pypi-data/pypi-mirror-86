//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxVarScrollHelperBase   /Abstract/
{
    %Docstring
        VarScrollHelperBase(winToScroll)
        
        This class provides all common base functionality for scroll
        calculations shared among all variable scrolled window implementations
        as well as automatic scrollbar functionality, saved scroll positions,
        controlling target windows to be scrolled, as well as defining all
        required virtual functions that need to be implemented for any
        orientation specific work.
    %End
    %TypeHeaderCode
        #include <wx/vscroll.h>
    %End

public:
    wxVarScrollHelperBase(
        wxWindow * winToScroll
    );

    virtual
    ~wxVarScrollHelperBase();

    int CalcScrolledPosition(
        int coord
    ) const;
    %Docstring
        CalcScrolledPosition(coord) -> int
        
        Translates the logical coordinate given to the current device
        coordinate.
    %End

    int CalcUnscrolledPosition(
        int coord
    ) const;
    %Docstring
        CalcUnscrolledPosition(coord) -> int
        
        Translates the device coordinate given to the corresponding logical
        coordinate.
    %End

    void EnablePhysicalScrolling(
        bool scrolling = true
    );
    %Docstring
        EnablePhysicalScrolling(scrolling=True)
        
        With physical scrolling on (when this is true), the device origin is
        changed properly when a wxPaintDC is prepared, children are actually
        moved and laid out properly, and the contents of the window (pixels)
        are actually moved.
    %End

    virtual
    int GetNonOrientationTargetSize() const = 0;
    %Docstring
        GetNonOrientationTargetSize() -> int
        
        This function needs to be overridden in the in the derived class to
        return the window size with respect to the opposing orientation.
    %End

    virtual
    wxOrientation GetOrientation() const = 0;
    %Docstring
        GetOrientation() -> Orientation
        
        This function need to be overridden to return the orientation that
        this helper is working with, either wxHORIZONTAL or wxVERTICAL.
    %End

    virtual
    int GetOrientationTargetSize() const = 0;
    %Docstring
        GetOrientationTargetSize() -> int
        
        This function needs to be overridden in the in the derived class to
        return the window size with respect to the orientation this helper is
        working with.
    %End

    wxWindow * GetTargetWindow() const;
    %Docstring
        GetTargetWindow() -> Window
        
        This function will return the target window this helper class is
        currently scrolling.
    %End

    size_t GetVisibleBegin() const;
    %Docstring
        GetVisibleBegin() -> size_t
        
        Returns the index of the first visible unit based on the scroll
        position.
    %End

    size_t GetVisibleEnd() const;
    %Docstring
        GetVisibleEnd() -> size_t
        
        Returns the index of the last visible unit based on the scroll
        position.
    %End

    bool IsVisible(
        size_t unit
    ) const;
    %Docstring
        IsVisible(unit) -> bool
        
        Returns true if the given scroll unit is currently visible (even if
        only partially visible) or false otherwise.
    %End

    void RefreshAll();
    %Docstring
        RefreshAll()
        
        Recalculate all parameters and repaint all units.
    %End

    void SetTargetWindow(
        wxWindow * target
    );
    %Docstring
        SetTargetWindow(target)
        
        Normally the window will scroll itself, but in some rare occasions you
        might want it to scroll (part of) another window (e.g.
    %End

    void UpdateScrollbar();
    %Docstring
        UpdateScrollbar()
        
        Update the thumb size shown by the scrollbar.
    %End

    int VirtualHitTest(
        wxCoord coord
    ) const;
    %Docstring
        VirtualHitTest(coord) -> int
        
        Returns the virtual scroll unit under the device unit given accounting
        for scroll position or wxNOT_FOUND if none (i.e.
    %End

    public:


    %Property(name=NonOrientationTargetSize, get=GetNonOrientationTargetSize)
    %Property(name=Orientation, get=GetOrientation)
    %Property(name=OrientationTargetSize, get=GetOrientationTargetSize)
    %Property(name=TargetWindow, get=GetTargetWindow, set=SetTargetWindow)
    %Property(name=VisibleBegin, get=GetVisibleBegin)
    %Property(name=VisibleEnd, get=GetVisibleEnd)

protected:
    virtual
    void OnGetUnitsSizeHint(
        size_t unitMin,
        size_t unitMax
    ) const;
    %Docstring
        OnGetUnitsSizeHint(unitMin, unitMax)
        
        This function doesn't have to be overridden but it may be useful to do
        so if calculating the units' sizes is a relatively expensive operation
        as it gives your code a chance to calculate several of them at once
        and cache the result if necessary.
    %End

    virtual
    wxCoord EstimateTotalSize() const;
    %Docstring
        EstimateTotalSize() -> Coord
        
        When the number of scroll units change, we try to estimate the total
        size of all units when the full window size is needed (i.e.
    %End

    virtual
    wxCoord OnGetUnitSize(
        size_t unit
    ) const = 0;
    %Docstring
        OnGetUnitSize(unit) -> Coord
        
        This function must be overridden in the derived class, and should
        return the size of the given unit in pixels.
    %End

};  // end of class wxVarScrollHelperBase


class wxVarVScrollHelper : wxVarScrollHelperBase
{
    %Docstring
        VarVScrollHelper(winToScroll)
        
        This class provides functions wrapping the wxVarScrollHelperBase
        class, targeted for vertical-specific scrolling.
    %End
    %TypeHeaderCode
        #include <wx/vscroll.h>
    %End

public:
    wxVarVScrollHelper(
        wxWindow * winToScroll
    );

    size_t GetRowCount() const;
    %Docstring
        GetRowCount() -> size_t
        
        Returns the number of rows the target window contains.
    %End

    size_t GetVisibleRowsBegin() const;
    %Docstring
        GetVisibleRowsBegin() -> size_t
        
        Returns the index of the first visible row based on the scroll
        position.
    %End

    size_t GetVisibleRowsEnd() const;
    %Docstring
        GetVisibleRowsEnd() -> size_t
        
        Returns the index of the last visible row based on the scroll
        position.
    %End

    bool IsRowVisible(
        size_t row
    ) const;
    %Docstring
        IsRowVisible(row) -> bool
        
        Returns true if the given row is currently visible (even if only
        partially visible) or false otherwise.
    %End

    virtual
    void RefreshRow(
        size_t row
    );
    %Docstring
        RefreshRow(row)
        
        Triggers a refresh for just the given row's area of the window if it's
        visible.
    %End

    virtual
    void RefreshRows(
        size_t from_,
        size_t to_
    );
    %Docstring
        RefreshRows(from_, to_)
        
        Triggers a refresh for the area between the specified range of rows
        given (inclusively).
    %End

    virtual
    bool ScrollRowPages(
        int pages
    );
    %Docstring
        ScrollRowPages(pages) -> bool
        
        Scroll by the specified number of pages which may be positive (to
        scroll down) or negative (to scroll up).
    %End

    virtual
    bool ScrollRows(
        int rows
    );
    %Docstring
        ScrollRows(rows) -> bool
        
        Scroll by the specified number of rows which may be positive (to
        scroll down) or negative (to scroll up).
    %End

    bool ScrollToRow(
        size_t row
    );
    %Docstring
        ScrollToRow(row) -> bool
        
        Scroll to the specified row.
    %End

    void SetRowCount(
        size_t rowCount
    );
    %Docstring
        SetRowCount(rowCount)
        
        Set the number of rows the window contains.
    %End

    public:


    %Property(name=RowCount, get=GetRowCount, set=SetRowCount)
    %Property(name=VisibleRowsBegin, get=GetVisibleRowsBegin)
    %Property(name=VisibleRowsEnd, get=GetVisibleRowsEnd)

protected:
    virtual
    void OnGetRowsHeightHint(
        size_t rowMin,
        size_t rowMax
    ) const;
    %Docstring
        OnGetRowsHeightHint(rowMin, rowMax)
        
        This function doesn't have to be overridden but it may be useful to do
        so if calculating the rows' sizes is a relatively expensive operation
        as it gives your code a chance to calculate several of them at once
        and cache the result if necessary.
    %End

    virtual
    wxCoord EstimateTotalHeight() const;
    %Docstring
        EstimateTotalHeight() -> Coord
        
        This class forwards calls from EstimateTotalSize() to this function so
        derived classes can override either just the height or the width
        estimation, or just estimate both differently if desired in any
        wxHVScrolledWindow derived class.
    %End

    virtual
    wxCoord OnGetRowHeight(
        size_t row
    ) const = 0;
    %Docstring
        OnGetRowHeight(row) -> Coord
        
        This function must be overridden in the derived class, and should
        return the height of the given row in pixels.
    %End

        virtual void OnGetUnitsSizeHint(size_t unitMin, size_t unitMax) const;
        virtual wxCoord EstimateTotalSize() const;
        virtual int GetNonOrientationTargetSize() const;
        virtual wxOrientation GetOrientation() const;
        virtual int GetOrientationTargetSize() const;
        virtual wxCoord OnGetUnitSize(size_t unit) const;


};  // end of class wxVarVScrollHelper


class wxVarHScrollHelper : wxVarScrollHelperBase
{
    %Docstring
        VarHScrollHelper(winToScroll)
        
        This class provides functions wrapping the wxVarScrollHelperBase
        class, targeted for horizontal-specific scrolling.
    %End
    %TypeHeaderCode
        #include <wx/vscroll.h>
    %End

public:
    wxVarHScrollHelper(
        wxWindow * winToScroll
    );

    size_t GetColumnCount() const;
    %Docstring
        GetColumnCount() -> size_t
        
        Returns the number of columns the target window contains.
    %End

    size_t GetVisibleColumnsBegin() const;
    %Docstring
        GetVisibleColumnsBegin() -> size_t
        
        Returns the index of the first visible column based on the scroll
        position.
    %End

    size_t GetVisibleColumnsEnd() const;
    %Docstring
        GetVisibleColumnsEnd() -> size_t
        
        Returns the index of the last visible column based on the scroll
        position.
    %End

    bool IsColumnVisible(
        size_t column
    ) const;
    %Docstring
        IsColumnVisible(column) -> bool
        
        Returns true if the given column is currently visible (even if only
        partially visible) or false otherwise.
    %End

    virtual
    void RefreshColumn(
        size_t column
    );
    %Docstring
        RefreshColumn(column)
        
        Triggers a refresh for just the given column's area of the window if
        it's visible.
    %End

    virtual
    void RefreshColumns(
        size_t from_,
        size_t to_
    );
    %Docstring
        RefreshColumns(from_, to_)
        
        Triggers a refresh for the area between the specified range of columns
        given (inclusively).
    %End

    virtual
    bool ScrollColumnPages(
        int pages
    );
    %Docstring
        ScrollColumnPages(pages) -> bool
        
        Scroll by the specified number of pages which may be positive (to
        scroll right) or negative (to scroll left).
    %End

    virtual
    bool ScrollColumns(
        int columns
    );
    %Docstring
        ScrollColumns(columns) -> bool
        
        Scroll by the specified number of columns which may be positive (to
        scroll right) or negative (to scroll left).
    %End

    bool ScrollToColumn(
        size_t column
    );
    %Docstring
        ScrollToColumn(column) -> bool
        
        Scroll to the specified column.
    %End

    void SetColumnCount(
        size_t columnCount
    );
    %Docstring
        SetColumnCount(columnCount)
        
        Set the number of columns the window contains.
    %End

    public:


    %Property(name=ColumnCount, get=GetColumnCount, set=SetColumnCount)
    %Property(name=VisibleColumnsBegin, get=GetVisibleColumnsBegin)
    %Property(name=VisibleColumnsEnd, get=GetVisibleColumnsEnd)

protected:
    virtual
    wxCoord EstimateTotalWidth() const;
    %Docstring
        EstimateTotalWidth() -> Coord
        
        This class forwards calls from EstimateTotalSize() to this function so
        derived classes can override either just the height or the width
        estimation, or just estimate both differently if desired in any
        wxHVScrolledWindow derived class.
    %End

    virtual
    void OnGetColumnsWidthHint(
        size_t columnMin,
        size_t columnMax
    ) const;
    %Docstring
        OnGetColumnsWidthHint(columnMin, columnMax)
        
        This function doesn't have to be overridden but it may be useful to do
        so if calculating the columns' sizes is a relatively expensive
        operation as it gives your code a chance to calculate several of them
        at once and cache the result if necessary.
    %End

    virtual
    wxCoord OnGetColumnWidth(
        size_t column
    ) const = 0;
    %Docstring
        OnGetColumnWidth(column) -> Coord
        
        This function must be overridden in the derived class, and should
        return the width of the given column in pixels.
    %End

        virtual void OnGetUnitsSizeHint(size_t unitMin, size_t unitMax) const;
        virtual wxCoord EstimateTotalSize() const;
        virtual int GetNonOrientationTargetSize() const;
        virtual wxOrientation GetOrientation() const;
        virtual int GetOrientationTargetSize() const;
        virtual wxCoord OnGetUnitSize(size_t unit) const;


};  // end of class wxVarHScrollHelper


class wxVarHVScrollHelper : wxVarVScrollHelper, wxVarHScrollHelper
{
    %Docstring
        VarHVScrollHelper(winToScroll)
        
        This class provides functions wrapping the wxVarHScrollHelper and
        wxVarVScrollHelper classes, targeted for scrolling a window in both
        axis.
    %End
    %TypeHeaderCode
        #include <wx/vscroll.h>
    %End

public:
    wxVarHVScrollHelper(
        wxWindow * winToScroll
    );

    bool IsVisible(
        size_t row,
        size_t column
    ) const;
    %Docstring
        IsVisible(row, column) -> bool
        IsVisible(pos) -> bool
        
        Returns true if both the given row and column are currently visible
        (even if only partially visible) or false otherwise.
    %End

    bool IsVisible(
        const wxPosition & pos
    ) const;

    virtual
    void RefreshRowColumn(
        size_t row,
        size_t column
    );
    %Docstring
        RefreshRowColumn(row, column)
        RefreshRowColumn(pos)
        
        Triggers a refresh for just the area shared between the given row and
        column of the window if it is visible.
    %End

    virtual
    void RefreshRowColumn(
        const wxPosition & pos
    );

    virtual
    void RefreshRowsColumns(
        size_t fromRow,
        size_t toRow,
        size_t fromColumn,
        size_t toColumn
    );
    %Docstring
        RefreshRowsColumns(fromRow, toRow, fromColumn, toColumn)
        RefreshRowsColumns(from, to)
        
        Triggers a refresh for the visible area shared between all given rows
        and columns (inclusive) of the window.
    %End

    virtual
    void RefreshRowsColumns(
        const wxPosition & from,
        const wxPosition & to
    );

    bool ScrollToRowColumn(
        size_t row,
        size_t column
    );
    %Docstring
        ScrollToRowColumn(row, column) -> bool
        ScrollToRowColumn(pos) -> bool
        
        Scroll to the specified row and column.
    %End

    bool ScrollToRowColumn(
        const wxPosition & pos
    );

    wxPosition VirtualHitTest(
        wxCoord x,
        wxCoord y
    ) const;
    %Docstring
        VirtualHitTest(x, y) -> Position
        VirtualHitTest(pos) -> Position
        
        Returns the virtual scroll unit under the device unit given accounting
        for scroll position or wxNOT_FOUND (for the row, column, or possibly
        both values) if none.
    %End

    wxPosition VirtualHitTest(
        const wxPoint & pos
    ) const;

    void EnablePhysicalScrolling(
        bool vscrolling = true,
        bool hscrolling = true
    );
    %Docstring
        EnablePhysicalScrolling(vscrolling=True, hscrolling=True)
        
        With physical scrolling on (when this is true), the device origin is
        changed properly when a wxPaintDC is prepared, children are actually
        moved and laid out properly, and the contents of the window (pixels)
        are actually moved.
    %End

    wxSize GetRowColumnCount() const;
    %Docstring
        GetRowColumnCount() -> Size
        
        Returns the number of columns and rows the target window contains.
    %End

    wxPosition GetVisibleBegin() const;
    %Docstring
        GetVisibleBegin() -> Position
        
        Returns the index of the first visible column and row based on the
        current scroll position.
    %End

    wxPosition GetVisibleEnd() const;
    %Docstring
        GetVisibleEnd() -> Position
        
        Returns the index of the last visible column and row based on the
        scroll position.
    %End

    void SetRowColumnCount(
        size_t rowCount,
        size_t columnCount
    );
    %Docstring
        SetRowColumnCount(rowCount, columnCount)
        
        Set the number of rows and columns the target window will contain.
    %End

    public:


    %Property(name=RowColumnCount, get=GetRowColumnCount, set=SetRowColumnCount)
    %Property(name=VisibleBegin, get=GetVisibleBegin)
    %Property(name=VisibleEnd, get=GetVisibleEnd)

private:
        virtual void OnGetUnitsSizeHint(size_t unitMin, size_t unitMax) const;
        virtual wxCoord EstimateTotalSize() const;
        virtual int GetNonOrientationTargetSize() const;
        virtual wxOrientation GetOrientation() const;
        virtual int GetOrientationTargetSize() const;
        virtual wxCoord OnGetUnitSize(size_t unit) const;


};  // end of class wxVarHVScrollHelper


class wxVScrolledWindow : wxPanel, wxVarVScrollHelper
{
    %Docstring
        VScrolledWindow()
        VScrolledWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr)
        
        In the name of this class, "V" may stand for "variable" because it can
        be used for scrolling rows of variable heights; "virtual", because it
        is not necessary to know the heights of all rows in advance  only
        those which are shown on the screen need to be measured; or even
        "vertical", because this class only supports scrolling vertically.
    %End
    %TypeHeaderCode
        #include <wx/vscroll.h>
    %End

public:
    wxVScrolledWindow();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxVScrolledWindow(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxPanelNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxPanelNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr) -> bool
        
        Same as the non-default constructor, but returns a status code: true
        if ok, false if the window couldn't be created.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    unsigned long GetFirstVisibleLine()   /Deprecated/;
    %Docstring
        GetFirstVisibleLine() -> unsignedlong
        
        Deprecated compatibility helper.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxVScrolledWindow_GetFirstVisibleLine(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    unsigned long _wxVScrolledWindow_GetFirstVisibleLine(wxVScrolledWindow* self)
    {
        return self->GetVisibleRowsBegin();
    }
    %End

    unsigned long GetLastVisibleLine()   /Deprecated/;
    %Docstring
        GetLastVisibleLine() -> unsignedlong
        
        Deprecated compatibility helper.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxVScrolledWindow_GetLastVisibleLine(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    unsigned long _wxVScrolledWindow_GetLastVisibleLine(wxVScrolledWindow* self)
    {
        return self->GetVisibleRowsEnd();
    }
    %End

    unsigned long GetLineCount()   /Deprecated/;
    %Docstring
        GetLineCount() -> unsignedlong
        
        Deprecated compatibility helper.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxVScrolledWindow_GetLineCount(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    unsigned long _wxVScrolledWindow_GetLineCount(wxVScrolledWindow* self)
    {
        return self->GetRowCount();
    }
    %End

    void SetLineCount(unsigned long count)   /Deprecated/;
    %Docstring
        SetLineCount(count)
        
        Deprecated compatibility helper.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxVScrolledWindow_SetLineCount(sipCpp, count);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxVScrolledWindow_SetLineCount(wxVScrolledWindow* self, unsigned long count)
    {
        self->SetRowCount(count);
    }
    %End

    void RefreshLine(unsigned long line)   /Deprecated/;
    %Docstring
        RefreshLine(line)
        
        Deprecated compatibility helper.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxVScrolledWindow_RefreshLine(sipCpp, line);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxVScrolledWindow_RefreshLine(wxVScrolledWindow* self, unsigned long line)
    {
        self->RefreshRow(line);
    }
    %End

    void RefreshLines(unsigned long from_,  unsigned long to_)   /Deprecated/;
    %Docstring
        RefreshLines(from_, to_)
        
        Deprecated compatibility helper.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxVScrolledWindow_RefreshLines(sipCpp, from_, to_);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxVScrolledWindow_RefreshLines(wxVScrolledWindow* self, unsigned long from_, unsigned long to_)
    {
        self->RefreshRows(from_, to_);
    }
    %End

    bool ScrollToLine(unsigned long line)   /Deprecated/;
    %Docstring
        ScrollToLine(line) -> bool
        
        Deprecated compatibility helper.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxVScrolledWindow_ScrollToLine(sipCpp, line);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxVScrolledWindow_ScrollToLine(wxVScrolledWindow* self, unsigned long line)
    {
        return self->ScrollToRow(line);
    }
    %End

    bool ScrollLines(int lines)   /Deprecated/;
    %Docstring
        ScrollLines(lines) -> bool
        
        Deprecated compatibility helper.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxVScrolledWindow_ScrollLines(sipCpp, lines);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxVScrolledWindow_ScrollLines(wxVScrolledWindow* self, int lines)
    {
        return self->ScrollRows(lines);
    }
    %End

    bool ScrollPages(int pages)   /Deprecated/;
    %Docstring
        ScrollPages(pages) -> bool
        
        Deprecated compatibility helper.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxVScrolledWindow_ScrollPages(sipCpp, pages);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxVScrolledWindow_ScrollPages(wxVScrolledWindow* self, int pages)
    {
        return self->ScrollRowPages(pages);
    }
    %End

    public:


    %Property(name=FirstVisibleLine, get=GetFirstVisibleLine)
    %Property(name=LastVisibleLine, get=GetLastVisibleLine)
    %Property(name=LineCount, get=GetLineCount, set=SetLineCount)
};  // end of class wxVScrolledWindow


%Extract(id=pycode_core)
def _VScrolledWindow_HitTest(self, *args):
    """
    Deprecated compatibility helper.
    """
    if len(args) == 2:
        x, y = args
        return self.VirtualHitTest(y)
    else:
        pt = args[0]
        return self.VirtualHitTest(pt[1])
VScrolledWindow.HitTest = wx.deprecated(_VScrolledWindow_HitTest, "Use VirtualHitTest instead.")
del _VScrolledWindow_HitTest
%End

class wxHScrolledWindow : wxPanel, wxVarHScrollHelper
{
    %Docstring
        HScrolledWindow()
        HScrolledWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr)
        
        In the name of this class, "H" stands for "horizontal" because it can
        be used for scrolling columns of variable widths.
    %End
    %TypeHeaderCode
        #include <wx/vscroll.h>
    %End

public:
    wxHScrolledWindow();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxHScrolledWindow(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxPanelNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxPanelNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr) -> bool
        
        Same as the non-default constructor, but returns a status code: true
        if ok, false if the window couldn't be created.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

};  // end of class wxHScrolledWindow


class wxHVScrolledWindow : wxPanel, wxVarHVScrollHelper
{
    %Docstring
        HVScrolledWindow()
        HVScrolledWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr)
        
        This window inherits all functionality of both vertical and
        horizontal, variable scrolled windows.
    %End
    %TypeHeaderCode
        #include <wx/vscroll.h>
    %End

public:
    wxHVScrolledWindow();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxHVScrolledWindow(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxPanelNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxPanelNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr) -> bool
        
        Same as the non-default constructor, but returns a status code: true
        if ok, false if the window couldn't be created.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

};  // end of class wxHVScrolledWindow



//---------------------------------------------------------------------------

