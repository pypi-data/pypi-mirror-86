//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
        enum wxAppAssertMode {
            wxAPP_ASSERT_SUPPRESS  = 1,
            wxAPP_ASSERT_EXCEPTION = 2,
            wxAPP_ASSERT_DIALOG    = 4,
            wxAPP_ASSERT_LOG       = 8
        };
        wxAppConsole* wxGetApp();
        
%End


//---------------------------------------------------------------------------

class wxAppConsole : wxEvtHandler, wxEventFilter
{
    %Docstring
        This class is essential for writing console-only or hybrid apps
        without having to define wxUSE_GUI=0.
    %End
    %TypeHeaderCode
        #include <wx/app.h>
    %End

public:
    virtual
    ~wxAppConsole();

    virtual
    int MainLoop()   /ReleaseGIL/;
    %Docstring
        MainLoop() -> int
        
        Called by wxWidgets on creation of the application.
    %End

    virtual
    void ExitMainLoop();
    %Docstring
        ExitMainLoop()
        
        Call this to explicitly exit the main message (event) loop.
    %End

    virtual
    int FilterEvent(
        wxEvent & event
    );
    %Docstring
        FilterEvent(event) -> int
        
        Overridden wxEventFilter method.
    %End

    wxEventLoopBase * GetMainLoop() const;
    %Docstring
        GetMainLoop() -> EventLoopBase
        
        Returns the main event loop instance, i.e. the event loop which is
        started by OnRun() and which dispatches all events sent from the
        native toolkit to the application (except when new event loops are
        temporarily set-up).
    %End

    virtual
    bool UsesEventLoop() const;
    %Docstring
        UsesEventLoop() -> bool
        
        Returns true if the application is using an event loop.
    %End

    virtual
    void ProcessPendingEvents()   /ReleaseGIL/;
    %Docstring
        ProcessPendingEvents()
        
        Process all pending events; it is necessary to call this function to
        process events posted with wxEvtHandler::QueueEvent or
        wxEvtHandler::AddPendingEvent.
    %End

    void DeletePendingEvents();
    %Docstring
        DeletePendingEvents()
        
        Deletes the pending events of all wxEvtHandlers of this application.
    %End

    bool HasPendingEvents() const;
    %Docstring
        HasPendingEvents() -> bool
        
        Returns true if there are pending events on the internal pending event
        list.
    %End

    void SuspendProcessingOfPendingEvents();
    %Docstring
        SuspendProcessingOfPendingEvents()
        
        Temporary suspends processing of the pending events.
    %End

    void ResumeProcessingOfPendingEvents();
    %Docstring
        ResumeProcessingOfPendingEvents()
        
        Resume processing of the pending events previously stopped because of
        a call to SuspendProcessingOfPendingEvents().
    %End

    void ScheduleForDestruction(
        wxObject * object
    );
    %Docstring
        ScheduleForDestruction(object)
        
        Delayed objects destruction.
    %End

    bool IsScheduledForDestruction(
        wxObject * object
    ) const;
    %Docstring
        IsScheduledForDestruction(object) -> bool
        
        Check if the object had been scheduled for destruction with
        ScheduleForDestruction().
    %End

    virtual
    void OnEventLoopEnter(
        wxEventLoopBase * loop
    );
    %Docstring
        OnEventLoopEnter(loop)
        
        Called by wxEventLoopBase::SetActive(): you can override this function
        and put here the code which needs an active event loop.
    %End

    virtual
    void OnEventLoopExit(
        wxEventLoopBase * loop
    );
    %Docstring
        OnEventLoopExit(loop)
        
        Called by wxEventLoopBase::OnExit() for each event loop which is
        exited.
    %End

    virtual
    int OnExit();
    %Docstring
        OnExit() -> int
        
        Override this member function for any processing which needs to be
        done as the application is about to exit.
    %End

    virtual
    bool OnInit();
    %Docstring
        OnInit() -> bool
        
        This must be provided by the application, and will usually create the
        application's main window, optionally calling SetTopWindow().
    %End

    virtual
    int OnRun();
    %Docstring
        OnRun() -> int
        
        This virtual function is where the execution of a program written in
        wxWidgets starts.
    %End

    wxString GetAppDisplayName() const;
    %Docstring
        GetAppDisplayName() -> String
        
        Returns the user-readable application name.
    %End

    wxString GetAppName() const;
    %Docstring
        GetAppName() -> String
        
        Returns the application name.
    %End

    wxString GetClassName() const;
    %Docstring
        GetClassName() -> String
        
        Gets the class name of the application.
    %End

    wxAppTraits * GetTraits();
    %Docstring
        GetTraits() -> AppTraits
        
        Returns a pointer to the wxAppTraits object for the application.
    %End

    const wxString & GetVendorDisplayName() const;
    %Docstring
        GetVendorDisplayName() -> String
        
        Returns the user-readable vendor name.
    %End

    const wxString & GetVendorName() const;
    %Docstring
        GetVendorName() -> String
        
        Returns the application's vendor name.
    %End

    void SetAppDisplayName(
        const wxString & name
    );
    %Docstring
        SetAppDisplayName(name)
        
        Set the application name to be used in the user-visible places such as
        window titles.
    %End

    void SetAppName(
        const wxString & name
    );
    %Docstring
        SetAppName(name)
        
        Sets the name of the application.
    %End

    void SetClassName(
        const wxString & name
    );
    %Docstring
        SetClassName(name)
        
        Sets the class name of the application.
    %End

    void SetVendorDisplayName(
        const wxString & name
    );
    %Docstring
        SetVendorDisplayName(name)
        
        Set the vendor name to be used in the user-visible places.
    %End

    void SetVendorName(
        const wxString & name
    );
    %Docstring
        SetVendorName(name)
        
        Sets the name of application's vendor.
    %End

    bool Yield(
        bool onlyIfNeeded = false
    )   /ReleaseGIL/;
    %Docstring
        Yield(onlyIfNeeded=False) -> bool
        
        Yields control to pending messages in the event loop.
    %End

    void SetCLocale();
    %Docstring
        SetCLocale()
        
        Sets the C locale to the default locale for the current environment.
    %End

    static
    void SetInstance(
        wxAppConsole * app
    );
    %Docstring
        SetInstance(app)
        
        Allows external code to modify global wxTheApp, but you should really
        know what you're doing if you call it.
    %End

    static
    wxAppConsole * GetInstance();
    %Docstring
        GetInstance() -> AppConsole
        
        Returns the one and only global application object.
    %End

    static
    bool IsMainLoopRunning();
    %Docstring
        IsMainLoopRunning() -> bool
        
        Returns true if the main event loop is currently running, i.e. if the
        application is inside OnRun().
    %End

    %Property(name=AppDisplayName, get=GetAppDisplayName, set=SetAppDisplayName)
    %Property(name=AppName, get=GetAppName, set=SetAppName)
    %Property(name=ClassName, get=GetClassName, set=SetClassName)
    %Property(name=VendorDisplayName, get=GetVendorDisplayName, set=SetVendorDisplayName)
    %Property(name=VendorName, get=GetVendorName, set=SetVendorName)
    %Property(name=Traits, get=GetTraits)
};  // end of class wxAppConsole


enum wxAppAssertMode
{
    wxAPP_ASSERT_SUPPRESS,
    wxAPP_ASSERT_EXCEPTION,
    wxAPP_ASSERT_DIALOG,
    wxAPP_ASSERT_LOG
};

class wxPyApp : wxAppConsole
{
    %Docstring
        PyApp()
        
        The wxApp class represents the application itself when wxUSE_GUI=1.
    %End
    %TypeHeaderCode
        #include <wx/app.h>
    %End

    %TypeCode
        
        #ifdef __WXGTK__
        #include <gdk/gdkx.h>
        #include <gtk/gtk.h>
        #endif
        
        #ifdef __WXMAC__
        #include <wx/osx/private.h>
        #endif
        
        #ifdef __WXMSW__
        #include <wx/msw/private.h>
        #include <wx/msw/winundef.h>
        #include <wx/msw/msvcrt.h>
        #endif
        
        
        #ifdef __WXMSW__             // If building for Windows...
        
        //----------------------------------------------------------------------
        // This gets run when the DLL is loaded.  We just need to save the
        // instance handle.
        //----------------------------------------------------------------------
        
        extern "C"
        BOOL WINAPI DllMain(
            HINSTANCE   hinstDLL,    // handle to DLL module
            DWORD       fdwReason,   // reason for calling function
            LPVOID      lpvReserved  // reserved
           )
        {
            // If wxPython is embedded in another wxWidgets app then
            // the instance has already been set.
            if (! wxGetInstance())
                wxSetInstance(hinstDLL);
        
            return TRUE;
        }
        #endif  // __WXMSW__
        
        //----------------------------------------------------------------------
        // Classes for implementing the wxp main application shell.
        //----------------------------------------------------------------------
        
        
        class wxPyApp : public wxApp
        {
            DECLARE_ABSTRACT_CLASS(wxPyApp)
        
        public:
            wxPyApp() : wxApp() {
                m_assertMode = wxAPP_ASSERT_EXCEPTION;
                m_startupComplete = false;
                //m_callFilterEvent = false;
                wxApp::SetInstance(this);
            }
        
            ~wxPyApp() {
                wxApp::SetInstance(NULL);
            }
        
        
        #ifndef __WXMAC__
            virtual void MacNewFile() {}
            virtual void MacOpenFile(const wxString &) {}
            virtual void MacOpenFiles(const wxArrayString& fileNames) {}
            virtual void MacOpenURL(const wxString &) {}
            virtual void MacPrintFile(const wxString &) {}
            virtual void MacReopenApp() {}
            virtual bool OSXIsGUIApplication() { return true; }
            void OSXEnableAutomaticTabbing(bool) {}
        #endif
        
        #ifdef __WXMAC__
            static long GetMacAboutMenuItemId()               { return s_macAboutMenuItemId; }
            static long GetMacPreferencesMenuItemId()         { return s_macPreferencesMenuItemId; }
            static long GetMacExitMenuItemId()                { return s_macExitMenuItemId; }
            static wxString GetMacHelpMenuTitleName()         { return s_macHelpMenuTitleName; }
            static void SetMacAboutMenuItemId(long val)       { s_macAboutMenuItemId = val; }
            static void SetMacPreferencesMenuItemId(long val) { s_macPreferencesMenuItemId = val; }
            static void SetMacExitMenuItemId(long val)        { s_macExitMenuItemId = val; }
            static void SetMacHelpMenuTitleName(const wxString& val) { s_macHelpMenuTitleName = val; }
        #else
            static long GetMacAboutMenuItemId()               { return 0; }
            static long GetMacPreferencesMenuItemId()         { return 0; }
            static long GetMacExitMenuItemId()                { return 0; }
            static wxString GetMacHelpMenuTitleName()         { return wxEmptyString; }
            static void SetMacAboutMenuItemId(long)           { }
            static void SetMacPreferencesMenuItemId(long)     { }
            static void SetMacExitMenuItemId(long)            { }
            static void SetMacHelpMenuTitleName(const wxString&) { }
        #endif
        
            wxAppAssertMode  GetAssertMode() { return m_assertMode; }
            void SetAssertMode(wxAppAssertMode mode) {
                m_assertMode = mode;
                if (mode & wxAPP_ASSERT_SUPPRESS)
                    wxDisableAsserts();
                else
                    wxSetDefaultAssertHandler();
            }
        
            virtual void OnAssertFailure(const wxChar *file,
                                         int line,
                                         const wxChar *func,
                                         const wxChar *cond,
                                         const wxChar *msg);
        
        
            // Implementing OnInit is optional for wxPython apps
            virtual bool OnInit()     { return true; }
            virtual void OnPreInit()  { }
        
            void _BootstrapApp();
            virtual int MainLoop();
        
            static bool IsDisplayAvailable();
        
            // implementation only
            void SetStartupComplete(bool val) { m_startupComplete = val; }
        
        private:
            wxAppAssertMode m_assertMode;
            bool m_startupComplete;
            //bool m_callFilterEvent;
        };
        
        IMPLEMENT_ABSTRACT_CLASS(wxPyApp, wxApp);
        
        extern PyObject* wxAssertionError;         // Exception object raised for wxASSERT failures
        
        
        void wxPyApp::OnAssertFailure(const wxChar *file,
                                      int line,
                                      const wxChar *func,
                                      const wxChar *cond,
                                      const wxChar *msg)
        {
            // ignore it?
            if (m_assertMode & wxAPP_ASSERT_SUPPRESS)
                return;
        
            // turn it into a Python exception?
            if (m_assertMode & wxAPP_ASSERT_EXCEPTION) {
                wxString buf;
                buf.Alloc(4096);
                buf.Printf(wxT("C++ assertion \"%s\" failed at %s(%d)"), cond, file, line);
                if ( func && *func )
                    buf << wxT(" in ") << func << wxT("()");
                if (msg != NULL)
                    buf << wxT(": ") << msg;
        
                // set the exception
                wxPyThreadBlocker blocker;
                PyObject* s = wx2PyString(buf);
                PyErr_SetObject(wxAssertionError, s);
                Py_DECREF(s);
        
                // Now when control returns to whatever API wrapper was called from
                // Python it should detect that an exception is set and will return
                // NULL, signalling the exception to Python.
            }
        
            // Send it to the normal log destination, but only if
            // not _DIALOG because it will call this too
            if ( (m_assertMode & wxAPP_ASSERT_LOG) && !(m_assertMode & wxAPP_ASSERT_DIALOG)) {
                wxString buf;
                buf.Alloc(4096);
                buf.Printf(wxT("%s(%d): assert \"%s\" failed"),
                           file, line, cond);
                if ( func && *func )
                    buf << wxT(" in ") << func << wxT("()");
                if (msg != NULL)
                    buf << wxT(": ") << msg;
                wxLogDebug(buf);
            }
        
            // do the normal wx assert dialog?
            if (m_assertMode & wxAPP_ASSERT_DIALOG)
                wxApp::OnAssertFailure(file, line, func, cond, msg);
        }
        
        
        void wxPyApp::_BootstrapApp()
        {
            static      bool haveInitialized = false;
            bool        result;
        
            // Only initialize wxWidgets once
            if (! haveInitialized) {
        
                // Copy the values in Python's sys.argv list to a C array of char* to
                // be passed to the wxEntryStart function below.
                #if PY_MAJOR_VERSION >= 3
                    #define argType   wchar_t
                #else
                    #define argType   char
                #endif
                int       argc = 0;
                argType** argv = NULL;
                {
                    wxPyThreadBlocker blocker;
                    PyObject* sysargv = PySys_GetObject("argv");
                    if (sysargv != NULL) {
                        argc = PyList_Size(sysargv);
                        argv = new argType*[argc+1];
                        int x;
                        for(x=0; x<argc; x++) {
                            PyObject *pyArg = PyList_GetItem(sysargv, x); // borrowed reference
                            // if there isn't anything in sys.argv[0] then set it to the python executable
                            if (x == 0 && PyObject_Length(pyArg) < 1)
                                pyArg = PySys_GetObject("executable");
                            #if PY_MAJOR_VERSION >= 3
                                int len = PyObject_Length(pyArg);
                                argv[x] = new argType[len+1];
                                wxPyUnicode_AsWideChar(pyArg, argv[x], len+1);
                            #else
                                argv[x] = strdup(PyBytes_AsString(pyArg));
                            #endif
                        }
                        argv[argc] = NULL;
                    }
                }
        
                // Initialize wxWidgets
        #ifdef __WXOSX__
                wxMacAutoreleasePool autoreleasePool;
        #endif
                result = wxEntryStart(argc, argv);
                // wxApp takes ownership of the argv array, don't delete it here
        
                if (! result)  {
                    wxPyThreadBlocker blocker;
                    PyErr_SetString(PyExc_SystemError,
                                      "wxEntryStart failed, unable to initialize wxWidgets!"
        #ifdef __WXGTK__
                                      "  (Is DISPLAY set properly?)"
        #endif
                        );
                    goto error;
                }
            }
            else {
                this->argc = 0;
            }
        
            // It's now ok to generate exceptions for assertion errors.
            SetStartupComplete(true);
        
            // Call the Python wxApp's OnPreInit and OnInit functions if they exist
            OnPreInit();
        
            // Only use CallOnInit the first time, otherwise it will block on [NSApp run] in wxOSX_Cocoa;
            if (! haveInitialized)
                result = CallOnInit();
            else
                result = OnInit();
        
        //#ifdef __WXOSX_COCOA__
        //    OSXSetInitWasCalled(true);  TODO: consider adding this method to wxApp
        //#endif
        
            if (! result) {
                wxPyErr_SetString(PyExc_SystemExit, "OnInit returned false, exiting...");
            }
        
            haveInitialized = true;
        
        error:
            return;
        }
        
        
        int wxPyApp::MainLoop()
        {
            int retval = 0;
        
            {
        #ifdef __WXOSX__
                wxMacAutoreleasePool autoreleasePool;
        #endif
                DeletePendingObjects();
            }
            bool initialized = wxTopLevelWindows.GetCount() != 0;
            if (initialized) {
                if ( m_exitOnFrameDelete == Later ) {
                    m_exitOnFrameDelete = Yes;
                }
        
                retval = wxApp::MainLoop();
                OnExit();
            }
            return retval;
        }
        
        
        // Function to test if the Display (or whatever is the platform equivallent)
        // can be connected to.
        bool wxPyApp::IsDisplayAvailable()
        {
        #ifdef __WXGTK__
            Display* display;
            display = XOpenDisplay(NULL);
            if (display == NULL)
                return false;
            XCloseDisplay(display);
            return true;
        #endif
        
        #ifdef __WXMAC__
            // This is adapted from Python's Mac/Modules/MacOS.c in the
            // MacOS_WMAvailable function.
            bool rv;
            ProcessSerialNumber psn;
        
            /*
            ** This is a fairly innocuous call to make if we don't have a window
            ** manager, or if we have no permission to talk to it. It will print
            ** a message on stderr, but at least it won't abort the process.
            ** It appears the function caches the result itself, and it's cheap, so
            ** no need for us to cache.
            */
        #ifdef kCGNullDirectDisplay
            /* On 10.1 CGMainDisplayID() isn't available, and
            ** kCGNullDirectDisplay isn't defined.
            */
            if (CGMainDisplayID() == 0) {
                rv = false;
            } else
        #endif
            {
                // Also foreground the application on the first call as a side-effect.
                // 
                // TODO: These APIs are deprecated, and will likely be gone in the 10.15 SDK
                //
                // [NSRunningApplication activateIgnoringOtherApps: YES]  ??
                // 
                if (GetCurrentProcess(&psn) < 0 || SetFrontProcess(&psn) < 0) {
                    rv = false;
                } else {
                    rv = true;
                }
            }
            return rv;
        #endif
        
        #ifdef __WXMSW__
            // TODO...
            return true;
        #endif
        }
        
        
        
        wxAppConsole* wxGetApp()
        {
            return wxApp::GetInstance();
        }
    %End
public:
    wxPyApp();

    virtual
    ~wxPyApp();

    virtual
    void MacNewFile();
    %Docstring
        MacNewFile()
        
        Called in response of an "open-application" Apple event.
    %End

    virtual
    void MacOpenFiles(
        const wxArrayString & fileNames
    );
    %Docstring
        MacOpenFiles(fileNames)
        
        Called in response of an openFiles message.
    %End

    virtual
    void MacOpenFile(
        const wxString & fileName
    )   /Deprecated/;
    %Docstring
        MacOpenFile(fileName)
        
        Called in response of an "open-document" Apple event.
    %End

    virtual
    void MacOpenURL(
        const wxString & url
    );
    %Docstring
        MacOpenURL(url)
        
        Called in response of a "get-url" Apple event.
    %End

    virtual
    void MacPrintFile(
        const wxString & fileName
    );
    %Docstring
        MacPrintFile(fileName)
        
        Called in response of a "print-document" Apple event.
    %End

    virtual
    void MacReopenApp();
    %Docstring
        MacReopenApp()
        
        Called in response of a "reopen-application" Apple event.
    %End

    virtual
    bool OSXIsGUIApplication();
    %Docstring
        OSXIsGUIApplication() -> bool
        
        May be overridden to indicate that the application is not a foreground
        GUI application under macOS.
    %End

    void OSXEnableAutomaticTabbing(
        bool enable
    );
    %Docstring
        OSXEnableAutomaticTabbing(enable)
        
        Enable the automatic tabbing features of macOS.
    %End

    wxVideoMode GetDisplayMode() const;
    %Docstring
        GetDisplayMode() -> VideoMode
        
        Get display mode that is used use.
    %End

    bool GetExitOnFrameDelete() const;
    %Docstring
        GetExitOnFrameDelete() -> bool
        
        Returns true if the application will exit when the top-level frame is
        deleted.
    %End

    wxLayoutDirection GetLayoutDirection() const;
    %Docstring
        GetLayoutDirection() -> LayoutDirection
        
        Return the layout direction for the current locale or wxLayout_Default
        if it's unknown.
    %End

    bool GetUseBestVisual() const;
    %Docstring
        GetUseBestVisual() -> bool
        
        Returns true if the application will use the best visual on systems
        that support different visuals, false otherwise.
    %End

    wxWindow * GetTopWindow() const;
    %Docstring
        GetTopWindow() -> Window
        
        Returns a pointer to the top window.
    %End

    bool IsActive() const;
    %Docstring
        IsActive() -> bool
        
        Returns true if the application is active, i.e. if one of its windows
        is currently in the foreground.
    %End

    bool SafeYield(
        wxWindow * win,
        bool onlyIfNeeded
    )   /ReleaseGIL/;
    %Docstring
        SafeYield(win, onlyIfNeeded) -> bool
        
        This function is similar to wxYield(), except that it disables the
        user input to all program windows before calling wxAppConsole::Yield
        and re-enables it again afterwards.
    %End

    bool SafeYieldFor(
        wxWindow * win,
        long eventsToProcess
    )   /ReleaseGIL/;
    %Docstring
        SafeYieldFor(win, eventsToProcess) -> bool
        
        Works like SafeYield() with onlyIfNeeded == true except that it allows
        the caller to specify a mask of events to be processed.
    %End

    bool SetDisplayMode(
        const wxVideoMode & info
    );
    %Docstring
        SetDisplayMode(info) -> bool
        
        Set display mode to use.
    %End

    void SetExitOnFrameDelete(
        bool flag
    );
    %Docstring
        SetExitOnFrameDelete(flag)
        
        Allows the programmer to specify whether the application will exit
        when the top-level frame is deleted.
    %End

    bool SetNativeTheme(
        const wxString & theme
    );
    %Docstring
        SetNativeTheme(theme) -> bool
        
        Allows runtime switching of the UI environment theme.
    %End

    void SetTopWindow(
        wxWindow * window
    );
    %Docstring
        SetTopWindow(window)
        
        Sets the 'top' window.
    %End

    void SetUseBestVisual(
        bool flag,
        bool forceTrueColour = false
    );
    %Docstring
        SetUseBestVisual(flag, forceTrueColour=False)
        
        Allows the programmer to specify whether the application will use the
        best visual on systems that support several visual on the same
        display.
    %End

    void MacHideApp();
    %Docstring
        MacHideApp()
        
        Hide all application windows just as the user can do with the
        system Hide command.  Mac only.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxPyApp_MacHideApp(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxPyApp_MacHideApp(wxPyApp* self)
    {
        #ifdef __WXMAC__
            self->MacHideApp();
        #endif
    }
    %End

    static int GetComCtl32Version();
    %Docstring
        GetComCtl32Version() -> int
        
        Returns 400, 470, 471, etc. for comctl32.dll 4.00, 4.70, 4.71 or 0 if
        it wasn't found at all.  Raises an exception on non-Windows platforms.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxPyApp_GetComCtl32Version();
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxPyApp_GetComCtl32Version()
    {
        #ifdef __WXMSW__
            return wxApp::GetComCtl32Version();
        #else
            wxPyRaiseNotImplemented();
            return 0;
        #endif
    }
    %End

            protected:
            virtual bool TryBefore(wxEvent& event);
            virtual bool TryAfter(wxEvent& event);
    
            public:
            virtual int  MainLoop() /ReleaseGIL/;
            virtual void OnPreInit();
            virtual bool OnInit();
            virtual bool OnInitGui();
            virtual int  OnRun();
            virtual int  OnExit();
    
            void         _BootstrapApp();
    
            static long GetMacAboutMenuItemId();
            static long GetMacPreferencesMenuItemId();
            static long GetMacExitMenuItemId();
            static wxString GetMacHelpMenuTitleName();
            static void SetMacAboutMenuItemId(long val);
            static void SetMacPreferencesMenuItemId(long val);
            static void SetMacExitMenuItemId(long val);
            static void SetMacHelpMenuTitleName(const wxString& val);


    wxAppAssertMode GetAssertMode();
    %Docstring
        GetAssertMode() -> AppAssertMode
        
        Returns the current mode for how the application responds to wx
        asserts.
    %End

    void SetAssertMode(
        wxAppAssertMode wxAppAssertMode
    );
    %Docstring
        SetAssertMode(wxAppAssertMode)
        
        Set the mode indicating how the application responds to wx assertion
        statements. Valid settings are a combination of these flags:
        
            - wx.APP_ASSERT_SUPPRESS
            - wx.APP_ASSERT_EXCEPTION
            - wx.APP_ASSERT_DIALOG
            - wx.APP_ASSERT_LOG
        
        The default behavior is to raise a wx.wxAssertionError exception.
    %End

    static
    bool IsDisplayAvailable();
    %Docstring
        IsDisplayAvailable() -> bool
        
        Returns True if the application is able to connect to the system's
        display, or whatever the equivallent is for the platform.
    %End

    %Property(name=AssertMode, get=GetAssertMode, set=SetAssertMode)
    %Property(name=DisplayMode, get=GetDisplayMode, set=SetDisplayMode)
    %Property(name=ExitOnFrameDelete, get=GetExitOnFrameDelete, set=SetExitOnFrameDelete)
    %Property(name=LayoutDirection, get=GetLayoutDirection)
    %Property(name=UseBestVisual, get=GetUseBestVisual, set=SetUseBestVisual)
    %Property(name=TopWindow, get=GetTopWindow, set=SetTopWindow)
};  // end of class wxPyApp


wxAppConsole* wxGetApp();
%Docstring
    GetApp() -> AppConsole
    
    Returns the current application object.
%End

bool wxHandleFatalExceptions(
    bool doIt = true
);
%Docstring
    HandleFatalExceptions(doIt=True) -> bool
    
    If doIt is true, the fatal exceptions (also known as general
    protection faults under Windows or segmentation violations in the Unix
    world) will be caught and passed to wxApp::OnFatalException.
%End

void wxWakeUpIdle();
%Docstring
    WakeUpIdle()
    
    This function wakes up the (internal and platform dependent) idle
    system, i.e.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

bool wxYield()   /ReleaseGIL/;
%Docstring
    Yield() -> bool
    
    Calls wxAppConsole::Yield if there is an existing application object.
%End

bool wxSafeYield(
    wxWindow * win = NULL,
    bool onlyIfNeeded = false
)   /ReleaseGIL/;
%Docstring
    SafeYield(win=None, onlyIfNeeded=False) -> bool
    
    Calls wxApp::SafeYield.
%End

void wxExit();
%Docstring
    Exit()
    
    Exits application after calling wxApp::OnExit.
%End

%Extract(id=pycode_core)
def YieldIfNeeded():
    """
    Convenience function for wx.GetApp().Yield(True)
    """
    return wx.GetApp().Yield(True)

%End

%Extract(id=pycode_core)
class PyOnDemandOutputWindow(object):
    """
    A class that can be used for redirecting Python's stdout and
    stderr streams.  It will do nothing until something is wrriten to
    the stream at which point it will create a Frame with a text area
    and write the text there.
    """
    def __init__(self, title="wxPython: stdout/stderr"):
        self.frame  = None
        self.title  = title
        self.pos    = wx.DefaultPosition
        self.size   = (450, 300)
        self.parent = None

    def SetParent(self, parent):
        """
        Set the window to be used as the popup Frame's parent.
        """
        self.parent = parent

    def CreateOutputWindow(self, txt):
        self.frame = wx.Frame(self.parent, -1, self.title, self.pos, self.size,
                              style=wx.DEFAULT_FRAME_STYLE)
        self.text  = wx.TextCtrl(self.frame, -1, "",
                                 style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.text.AppendText(txt)
        self.frame.Show(True)
        self.frame.Bind(wx.EVT_CLOSE, self.OnCloseWindow)

    def OnCloseWindow(self, event):
        if self.frame is not None:
            self.frame.Destroy()
        self.frame = None
        self.text  = None
        self.parent = None

    def write(self, text):
        """
        Create the output window if needed and write the string to it.
        If not called in the context of the gui thread then CallAfter is
        used to do the work there.
        """
        if self.frame is None:
            if not wx.IsMainThread():
                wx.CallAfter(self.CreateOutputWindow, text)
            else:
                self.CreateOutputWindow(text)
        else:
            if not wx.IsMainThread():
                wx.CallAfter(self.text.AppendText, text)
            else:
                self.text.AppendText(text)

    def close(self):
        if self.frame is not None:
            wx.CallAfter(self.frame.Close)

    def flush(self):
        pass


%End

%Extract(id=pycode_core)
class App(PyApp):
    """
    The ``wx.App`` class represents the application and is used to:
    
      * bootstrap the wxPython system and initialize the underlying
        gui toolkit
      * set and get application-wide properties
      * implement the native windowing system main message or event loop,
        and to dispatch events to window instances
      * etc.
    
    Every wx application must have a single ``wx.App`` instance, and all
    creation of UI objects should be delayed until after the ``wx.App`` object
    has been created in order to ensure that the gui platform and wxWidgets
    have been fully initialized.
    
    Normally you would derive from this class and implement an ``OnInit``
    method that creates a frame and then calls ``self.SetTopWindow(frame)``,
    however ``wx.App`` is also usable on its own without derivation.
    
    :note: In Python the wrapper for the C++ class ``wxApp`` has been renamed tp
        :class:`wx.PyApp`. This ``wx.App`` class derives from ``wx.PyApp``, and is
        responsible for handling the Python-specific needs for bootstrapping the
        wxWidgets library and other Python integration related requirements.
    """
    outputWindowClass = PyOnDemandOutputWindow
    def __init__(self, redirect=False, filename=None, useBestVisual=False, clearSigInt=True):
        """
        Construct a ``wx.App`` object.
        
        :param redirect: Should ``sys.stdout`` and ``sys.stderr`` be
            redirected?  Defaults to False. If ``filename`` is None
            then output will be redirected to a window that pops up
            as needed.  (You can control what kind of window is created
            for the output by resetting the class variable
            ``outputWindowClass`` to a class of your choosing.)
        
        :param filename: The name of a file to redirect output to, if
            redirect is True.
        
        :param useBestVisual: Should the app try to use the best
            available visual provided by the system (only relevant on
            systems that have more than one visual.)  This parameter
            must be used instead of calling `SetUseBestVisual` later
            on because it must be set before the underlying GUI
            toolkit is initialized.
        
        :param clearSigInt: Should SIGINT be cleared?  This allows the
            app to terminate upon a Ctrl-C in the console like other
            GUI apps will.
        
        :note: You should override OnInit to do application
            initialization to ensure that the system, toolkit and
            wxWidgets are fully initialized.
        """
        PyApp.__init__(self)
        
        # make sure we can create a GUI
        if not self.IsDisplayAvailable():
        
            if wx.Port == "__WXMAC__":
                msg = "This program needs access to the screen. Please run with a\n" \
                      "Framework build of python, and only when you are logged in\n" \
                      "on the main display of your Mac."
        
            elif wx.Port == "__WXGTK__":
                msg ="Unable to access the X Display, is $DISPLAY set properly?"
        
            else:
                msg = "Unable to create GUI"
                # TODO: more description is needed for wxMSW...
        
            raise SystemExit(msg)
        
        # This has to be done before OnInit
        self.SetUseBestVisual(useBestVisual)
        
        # Set the default handler for SIGINT.  This fixes a problem
        # where if Ctrl-C is pressed in the console that started this
        # app then it will not appear to do anything, (not even send
        # KeyboardInterrupt???)  but will later segfault on exit.  By
        # setting the default handler then the app will exit, as
        # expected (depending on platform.)
        if clearSigInt:
            try:
                import signal
                signal.signal(signal.SIGINT, signal.SIG_DFL)
            except:
                pass
        
        # Save and redirect the stdio to a window?
        self.stdioWin = None
        self.saveStdio = (_sys.stdout, _sys.stderr)
        if redirect:
            self.RedirectStdio(filename)
        
        # Use Python's install prefix as the default
        prefix = _sys.prefix
        if isinstance(prefix, (bytes, bytearray)):
            prefix = prefix.decode(_sys.getfilesystemencoding())
        wx.StandardPaths.Get().SetInstallPrefix(prefix)
        
        # Until the new native control for wxMac is up to par, still use the generic one.
        wx.SystemOptions.SetOption("mac.listctrl.always_use_generic", 1)
        
        # This finishes the initialization of wxWindows and then calls
        # the OnInit that should be present in the derived class
        self._BootstrapApp()

    def OnPreInit(self):
        """
        Things that must be done after _BootstrapApp has done its thing, but
        would be nice if they were already done by the time that OnInit is
        called.  This can be overridden in derived classes, but be sure to call
        this method from there.
        """
        wx.StockGDI._initStockObjects()
        self.InitLocale()

    def __del__(self):
        # Just in case the MainLoop was overridden without calling RestoreStio
        self.RestoreStdio()

    def SetTopWindow(self, frame):
        """
        Set the "main" top level window, which will be used for the parent of
        the on-demand output window as well as for dialogs that do not have
        an explicit parent set.
        """
        if self.stdioWin:
            self.stdioWin.SetParent(frame)
        wx.PyApp.SetTopWindow(self, frame)

    def MainLoop(self):
        """
        Execute the main GUI event loop
        """
        rv = wx.PyApp.MainLoop(self)
        self.RestoreStdio()
        return rv

    def RedirectStdio(self, filename=None):
        """
        Redirect sys.stdout and sys.stderr to a file or a popup window.
        """
        if filename:
            _sys.stdout = _sys.stderr = open(filename, 'a')
        else:
            self.stdioWin = self.outputWindowClass()
            _sys.stdout = _sys.stderr = self.stdioWin

    def RestoreStdio(self):
        try:
            _sys.stdout, _sys.stderr = self.saveStdio
        except:
            pass

    def SetOutputWindowAttributes(self, title=None, pos=None, size=None):
        """
        Set the title, position and/or size of the output window if the stdio
        has been redirected. This should be called before any output would
        cause the output window to be created.
        """
        if self.stdioWin:
            if title is not None:
                self.stdioWin.title = title
            if pos is not None:
                self.stdioWin.pos = pos
            if size is not None:
                self.stdioWin.size = size

    def InitLocale(self):
        """
        Try to ensure that the C and Python locale is in sync with the wxWidgets
        locale on Windows. If you have troubles from the default behavior of this
        method you can override it in a derived class to behave differently.
        Please report the problem you encountered.
        """
        self.ResetLocale()
        if 'wxMSW' in PlatformInfo:
            import locale
            try:
                lang, enc = locale.getdefaultlocale()
                self._initial_locale = wx.Locale(lang, lang[:2], lang)
                locale.setlocale(locale.LC_ALL, lang)
            except (ValueError, locale.Error) as ex:
                target = wx.LogStderr()
                orig = wx.Log.SetActiveTarget(target)
                wx.LogError("Unable to set default locale: '{}'".format(ex))
                wx.Log.SetActiveTarget(orig)

    def ResetLocale(self):
        """
        Release the wx.Locale object created in :meth:`InitLocale`.
        This should reset the application's locale to the previous settings.
        """
        self._initial_locale = None

    @staticmethod
    def Get():
        """
        A staticmethod returning the currently active application object.
        Essentially just a more pythonic version of :meth:`GetApp`.
        """
        return GetApp()


%End

%Extract(id=pycode_core)
@wx.deprecatedMsg("Use :class:`App` instead.")
class PySimpleApp(App):
    """
    This class is deprecated.  Please use :class:`App` instead.
    """
    def __init__(self, *args, **kw):
        App.__init__(self, *args, **kw)


%End


//---------------------------------------------------------------------------

