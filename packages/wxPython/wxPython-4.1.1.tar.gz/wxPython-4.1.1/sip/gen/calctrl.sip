//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _adv.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

enum 
{
    wxCAL_SUNDAY_FIRST,
    wxCAL_MONDAY_FIRST,
    wxCAL_SHOW_HOLIDAYS,
    wxCAL_NO_YEAR_CHANGE,
    wxCAL_NO_MONTH_CHANGE,
    wxCAL_SEQUENTIAL_MONTH_SELECTION,
    wxCAL_SHOW_SURROUNDING_WEEKS,
    wxCAL_SHOW_WEEK_NUMBERS
};

enum wxCalendarDateBorder
{
    wxCAL_BORDER_NONE,
    wxCAL_BORDER_SQUARE,
    wxCAL_BORDER_ROUND
};

enum wxCalendarHitTestResult
{
    wxCAL_HITTEST_NOWHERE,
    wxCAL_HITTEST_HEADER,
    wxCAL_HITTEST_DAY,
    wxCAL_HITTEST_INCMONTH,
    wxCAL_HITTEST_DECMONTH,
    wxCAL_HITTEST_SURROUNDING_WEEK,
    wxCAL_HITTEST_WEEK
};

wxEventType wxEVT_CALENDAR_SEL_CHANGED   /PyName=wxEVT_CALENDAR_SEL_CHANGED/;

wxEventType wxEVT_CALENDAR_PAGE_CHANGED   /PyName=wxEVT_CALENDAR_PAGE_CHANGED/;

wxEventType wxEVT_CALENDAR_DOUBLECLICKED   /PyName=wxEVT_CALENDAR_DOUBLECLICKED/;

wxEventType wxEVT_CALENDAR_WEEKDAY_CLICKED   /PyName=wxEVT_CALENDAR_WEEKDAY_CLICKED/;

wxEventType wxEVT_CALENDAR_WEEK_CLICKED   /PyName=wxEVT_CALENDAR_WEEK_CLICKED/;

wxEventType wxEVT_CALENDAR_YEAR_CHANGED   /PyName=wxEVT_CALENDAR_YEAR_CHANGED/;

wxEventType wxEVT_CALENDAR_MONTH_CHANGED   /PyName=wxEVT_CALENDAR_MONTH_CHANGED/;

wxEventType wxEVT_CALENDAR_DAY_CHANGED   /PyName=wxEVT_CALENDAR_DAY_CHANGED/;

class wxCalendarEvent : wxDateEvent
{
    %Docstring
        CalendarEvent()
        CalendarEvent(win, dt, type)
        
        The wxCalendarEvent class is used together with wxCalendarCtrl.
    %End
    %TypeHeaderCode
        #include <wx/calctrl.h>
    %End

public:
    wxCalendarEvent();

    wxCalendarEvent(
        wxWindow * win,
        const wxDateTime & dt,
        wxEventType type
    );

    wxDateTime::WeekDay GetWeekDay() const;
    %Docstring
        GetWeekDay() -> DateTime.WeekDay
        
        Returns the week day on which the user clicked in
        EVT_CALENDAR_WEEKDAY_CLICKED handler.
    %End

    void SetWeekDay(
        wxDateTime::WeekDay day
    );
    %Docstring
        SetWeekDay(day)
        
        Sets the week day carried by the event, normally only used by the
        library internally.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxCalendarEvent& operator=(const wxCalendarEvent&);


    public:


    %Property(name=WeekDay, get=GetWeekDay, set=SetWeekDay)
};  // end of class wxCalendarEvent


class wxCalendarDateAttr
{
    %Docstring
        CalendarDateAttr(colText=wx.NullColour, colBack=wx.NullColour, colBorder=wx.NullColour, font=wx.NullFont, border=CAL_BORDER_NONE)
        CalendarDateAttr(border, colBorder=wx.NullColour)
        
        wxCalendarDateAttr is a custom attributes for a calendar date.
    %End
    %TypeHeaderCode
        #include <wx/calctrl.h>
    %End

public:
    wxCalendarDateAttr(
        const wxColour & colText = wxNullColour,
        const wxColour & colBack = wxNullColour,
        const wxColour & colBorder = wxNullColour,
        const wxFont & font = wxNullFont,
        wxCalendarDateBorder border = wxCAL_BORDER_NONE
    );

    wxCalendarDateAttr(
        wxCalendarDateBorder border,
        const wxColour & colBorder = wxNullColour
    );

    const wxColour & GetBackgroundColour() const;
    %Docstring
        GetBackgroundColour() -> wx.Colour
        
        Returns the background colour set for the calendar date.
    %End

    wxCalendarDateBorder GetBorder() const;
    %Docstring
        GetBorder() -> CalendarDateBorder
        
        Returns the border set for the calendar date.
    %End

    const wxColour & GetBorderColour() const;
    %Docstring
        GetBorderColour() -> wx.Colour
        
        Returns the border colour set for the calendar date.
    %End

    const wxFont & GetFont() const;
    %Docstring
        GetFont() -> wx.Font
        
        Returns the font set for the calendar date.
    %End

    const wxColour & GetTextColour() const;
    %Docstring
        GetTextColour() -> wx.Colour
        
        Returns the text colour set for the calendar date.
    %End

    bool HasBackgroundColour() const;
    %Docstring
        HasBackgroundColour() -> bool
        
        Returns true if a non-default text background colour is set.
    %End

    bool HasBorder() const;
    %Docstring
        HasBorder() -> bool
        
        Returns true if a non-default (i.e. any) border is set.
    %End

    bool HasBorderColour() const;
    %Docstring
        HasBorderColour() -> bool
        
        Returns true if a non-default border colour is set.
    %End

    bool HasFont() const;
    %Docstring
        HasFont() -> bool
        
        Returns true if a non-default font is set.
    %End

    bool HasTextColour() const;
    %Docstring
        HasTextColour() -> bool
        
        Returns true if a non-default text foreground colour is set.
    %End

    bool IsHoliday() const;
    %Docstring
        IsHoliday() -> bool
        
        Returns true if this calendar day is displayed as a holiday.
    %End

    void SetBackgroundColour(
        const wxColour & colBack
    );
    %Docstring
        SetBackgroundColour(colBack)
        
        Sets the text background colour to use.
    %End

    void SetBorder(
        wxCalendarDateBorder border
    );
    %Docstring
        SetBorder(border)
        
        Sets the border to use.
    %End

    void SetBorderColour(
        const wxColour & col
    );
    %Docstring
        SetBorderColour(col)
        
        Sets the border colour to use.
    %End

    void SetFont(
        const wxFont & font
    );
    %Docstring
        SetFont(font)
        
        Sets the font to use.
    %End

    void SetHoliday(
        bool holiday
    );
    %Docstring
        SetHoliday(holiday)
        
        If holiday is true, this calendar day will be displayed as a holiday.
    %End

    void SetTextColour(
        const wxColour & colText
    );
    %Docstring
        SetTextColour(colText)
        
        Sets the text (foreground) colour to use.
    %End

    static
    const wxCalendarDateAttr & GetMark();
    %Docstring
        GetMark() -> CalendarDateAttr
        
        Used (internally) by the generic wxCalendarCtrl::Mark().
    %End

    static
    void SetMark(
        const wxCalendarDateAttr & m
    );
    %Docstring
        SetMark(m)
        
        Set the attributes that will be used to Mark() days on the generic
        wxCalendarCtrl.
    %End

    public:


    %Property(name=BackgroundColour, get=GetBackgroundColour, set=SetBackgroundColour)
    %Property(name=Border, get=GetBorder, set=SetBorder)
    %Property(name=BorderColour, get=GetBorderColour, set=SetBorderColour)
    %Property(name=Font, get=GetFont, set=SetFont)
    %Property(name=TextColour, get=GetTextColour, set=SetTextColour)
};  // end of class wxCalendarDateAttr


const char* wxCalendarNameStr;

class wxCalendarCtrl : wxControl
{
    %Docstring
        CalendarCtrl()
        CalendarCtrl(parent, id=wx.ID_ANY, date=wx.DefaultDateTime, pos=wx.DefaultPosition, size=wx.DefaultSize, style=CAL_SHOW_HOLIDAYS, name=CalendarNameStr)
        
        The calendar control allows the user to pick a date.
    %End
    %TypeHeaderCode
        #include <wx/calctrl.h>
    %End

public:
    wxCalendarCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxCalendarCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxDateTime & date = wxDefaultDateTime,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxCAL_SHOW_HOLIDAYS,
        const wxString & name = wxCalendarNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxCalendarCtrl();

    bool SetDateRange(
        const wxDateTime & lowerdate = wxDefaultDateTime,
        const wxDateTime & upperdate = wxDefaultDateTime
    );
    %Docstring
        SetDateRange(lowerdate=wx.DefaultDateTime, upperdate=wx.DefaultDateTime) -> bool
        
        Restrict the dates that can be selected in the control to the
        specified range.
    %End

    bool GetDateRange(
        wxDateTime * lowerdate   /Out/,
        wxDateTime * upperdate   /Out/
    ) const;
    %Docstring
        GetDateRange() -> (bool, lowerdate, upperdate)
        
        Returns the limits currently being used.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxDateTime & date = wxDefaultDateTime,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxCAL_SHOW_HOLIDAYS,
        const wxString & name = wxCalendarNameStr
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, date=wx.DefaultDateTime, pos=wx.DefaultPosition, size=wx.DefaultSize, style=CAL_SHOW_HOLIDAYS, name=CalendarNameStr) -> bool
        
        Creates the control.
    %End

    void EnableHolidayDisplay(
        bool display = true
    );
    %Docstring
        EnableHolidayDisplay(display=True)
        
        This function should be used instead of changing wxCAL_SHOW_HOLIDAYS
        style bit directly.
    %End

    bool EnableMonthChange(
        bool enable = true
    );
    %Docstring
        EnableMonthChange(enable=True) -> bool
        
        This function should be used instead of changing wxCAL_NO_MONTH_CHANGE
        style bit.
    %End

    wxCalendarDateAttr * GetAttr(
        size_t day
    ) const;
    %Docstring
        GetAttr(day) -> CalendarDateAttr
        
        Returns the attribute for the given date (should be in the range
        1...31).
    %End

    wxDateTime GetDate() const;
    %Docstring
        GetDate() -> wx.DateTime
        
        Gets the currently selected date.
    %End

    const wxColour & GetHeaderColourBg() const;
    %Docstring
        GetHeaderColourBg() -> wx.Colour
        
        Gets the background colour of the header part of the calendar window.
    %End

    const wxColour & GetHeaderColourFg() const;
    %Docstring
        GetHeaderColourFg() -> wx.Colour
        
        Gets the foreground colour of the header part of the calendar window.
    %End

    const wxColour & GetHighlightColourBg() const;
    %Docstring
        GetHighlightColourBg() -> wx.Colour
        
        Gets the background highlight colour.
    %End

    const wxColour & GetHighlightColourFg() const;
    %Docstring
        GetHighlightColourFg() -> wx.Colour
        
        Gets the foreground highlight colour.
    %End

    const wxColour & GetHolidayColourBg() const;
    %Docstring
        GetHolidayColourBg() -> wx.Colour
        
        Return the background colour currently used for holiday highlighting.
    %End

    const wxColour & GetHolidayColourFg() const;
    %Docstring
        GetHolidayColourFg() -> wx.Colour
        
        Return the foreground colour currently used for holiday highlighting.
    %End

    wxCalendarHitTestResult HitTest(
        const wxPoint & pos,
        wxDateTime * date   /Out/ = NULL,
        wxDateTime::WeekDay * wd   /Out/ = NULL
    );
    %Docstring
        HitTest(pos) -> (CalendarHitTestResult, date, wd)
        
        Returns one of wxCalendarHitTestResult constants and fills either date
        or wd pointer with the corresponding value depending on the hit test
        code.
    %End

    void ResetAttr(
        size_t day
    );
    %Docstring
        ResetAttr(day)
        
        Clears any attributes associated with the given day (in the range
        1...31).
    %End

    void SetAttr(
        size_t day,
        wxCalendarDateAttr * attr   /Transfer/
    );
    %Docstring
        SetAttr(day, attr)
        
        Associates the attribute with the specified date (in the range
        1...31).
    %End

    bool SetDate(
        const wxDateTime & date
    );
    %Docstring
        SetDate(date) -> bool
        
        Sets the current date.
    %End

    void SetHeaderColours(
        const wxColour & colFg,
        const wxColour & colBg
    );
    %Docstring
        SetHeaderColours(colFg, colBg)
        
        Set the colours used for painting the weekdays at the top of the
        control.
    %End

    void SetHighlightColours(
        const wxColour & colFg,
        const wxColour & colBg
    );
    %Docstring
        SetHighlightColours(colFg, colBg)
        
        Set the colours to be used for highlighting the currently selected
        date.
    %End

    void SetHoliday(
        size_t day
    );
    %Docstring
        SetHoliday(day)
        
        Marks the specified day as being a holiday in the current month.
    %End

    void SetHolidayColours(
        const wxColour & colFg,
        const wxColour & colBg
    );
    %Docstring
        SetHolidayColours(colFg, colBg)
        
        Sets the colours to be used for the holidays highlighting.
    %End

    void Mark(
        size_t day,
        bool mark
    );
    %Docstring
        Mark(day, mark)
        
        Mark or unmark the day.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Date, get=GetDate, set=SetDate)
    %Property(name=DateRange, get=GetDateRange, set=SetDateRange)
    %Property(name=HeaderColourBg, get=GetHeaderColourBg)
    %Property(name=HeaderColourFg, get=GetHeaderColourFg)
    %Property(name=HighlightColourBg, get=GetHighlightColourBg)
    %Property(name=HighlightColourFg, get=GetHighlightColourFg)
    %Property(name=HolidayColourBg, get=GetHolidayColourBg)
    %Property(name=HolidayColourFg, get=GetHolidayColourFg)
};  // end of class wxCalendarCtrl


%Extract(id=pycode_adv)
def _CalendarCtrl_PyGetDate(self):
    """
    Return the date as a Python datetime.date object.
    """
    return wx.wxdate2pydate(self.GetDate())
CalendarCtrl.PyGetDate = wx.deprecated(_CalendarCtrl_PyGetDate, "Use GetDate instead.")
del _CalendarCtrl_PyGetDate
%End

%Extract(id=pycode_adv)
CalendarCtrl.PySetDate = wx.deprecated(CalendarCtrl.SetDate, 'Use SetDate instead.')
CalendarCtrl.PySetDateRange = wx.deprecated(CalendarCtrl.SetDateRange, 'Use SetDateRange instead.')

%End

class wxGenericCalendarCtrl : wxControl
{
    %Docstring
        GenericCalendarCtrl()
        GenericCalendarCtrl(parent, id=wx.ID_ANY, date=wx.DefaultDateTime, pos=wx.DefaultPosition, size=wx.DefaultSize, style=CAL_SHOW_HOLIDAYS, name=CalendarNameStr)
        
        The calendar control allows the user to pick a date.
    %End
    %TypeHeaderCode
        #include <wx/calctrl.h>
    %End

    %TypeHeaderCode
        #include <wx/generic/calctrlg.h>
    %End
public:
    wxGenericCalendarCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxGenericCalendarCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxDateTime & date = wxDefaultDateTime,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxCAL_SHOW_HOLIDAYS,
        const wxString & name = wxCalendarNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxGenericCalendarCtrl();

    bool SetDateRange(
        const wxDateTime & lowerdate = wxDefaultDateTime,
        const wxDateTime & upperdate = wxDefaultDateTime
    );
    %Docstring
        SetDateRange(lowerdate=wx.DefaultDateTime, upperdate=wx.DefaultDateTime) -> bool
        
        Restrict the dates that can be selected in the control to the
        specified range.
    %End

    bool GetDateRange(
        wxDateTime * lowerdate   /Out/,
        wxDateTime * upperdate   /Out/
    ) const;
    %Docstring
        GetDateRange() -> (bool, lowerdate, upperdate)
        
        Returns the limits currently being used.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxDateTime & date = wxDefaultDateTime,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxCAL_SHOW_HOLIDAYS,
        const wxString & name = wxCalendarNameStr
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, date=wx.DefaultDateTime, pos=wx.DefaultPosition, size=wx.DefaultSize, style=CAL_SHOW_HOLIDAYS, name=CalendarNameStr) -> bool
        
        Creates the control.
    %End

    void EnableHolidayDisplay(
        bool display = true
    );
    %Docstring
        EnableHolidayDisplay(display=True)
        
        This function should be used instead of changing wxCAL_SHOW_HOLIDAYS
        style bit directly.
    %End

    bool EnableMonthChange(
        bool enable = true
    );
    %Docstring
        EnableMonthChange(enable=True) -> bool
        
        This function should be used instead of changing wxCAL_NO_MONTH_CHANGE
        style bit.
    %End

    void EnableYearChange(
        bool enable = true
    )   /Deprecated/;
    %Docstring
        EnableYearChange(enable=True)
    %End

    wxCalendarDateAttr * GetAttr(
        size_t day
    ) const;
    %Docstring
        GetAttr(day) -> CalendarDateAttr
        
        Returns the attribute for the given date (should be in the range
        1...31).
    %End

    wxDateTime GetDate() const;
    %Docstring
        GetDate() -> wx.DateTime
        
        Gets the currently selected date.
    %End

    const wxColour & GetHeaderColourBg() const;
    %Docstring
        GetHeaderColourBg() -> wx.Colour
        
        Gets the background colour of the header part of the calendar window.
    %End

    const wxColour & GetHeaderColourFg() const;
    %Docstring
        GetHeaderColourFg() -> wx.Colour
        
        Gets the foreground colour of the header part of the calendar window.
    %End

    const wxColour & GetHighlightColourBg() const;
    %Docstring
        GetHighlightColourBg() -> wx.Colour
        
        Gets the background highlight colour.
    %End

    const wxColour & GetHighlightColourFg() const;
    %Docstring
        GetHighlightColourFg() -> wx.Colour
        
        Gets the foreground highlight colour.
    %End

    const wxColour & GetHolidayColourBg() const;
    %Docstring
        GetHolidayColourBg() -> wx.Colour
        
        Return the background colour currently used for holiday highlighting.
    %End

    const wxColour & GetHolidayColourFg() const;
    %Docstring
        GetHolidayColourFg() -> wx.Colour
        
        Return the foreground colour currently used for holiday highlighting.
    %End

    wxCalendarHitTestResult HitTest(
        const wxPoint & pos,
        wxDateTime * date   /Out/ = NULL,
        wxDateTime::WeekDay * wd   /Out/ = NULL
    );
    %Docstring
        HitTest(pos) -> (CalendarHitTestResult, date, wd)
        
        Returns one of wxCalendarHitTestResult constants and fills either date
        or wd pointer with the corresponding value depending on the hit test
        code.
    %End

    void ResetAttr(
        size_t day
    );
    %Docstring
        ResetAttr(day)
        
        Clears any attributes associated with the given day (in the range
        1...31).
    %End

    void SetAttr(
        size_t day,
        wxCalendarDateAttr * attr   /Transfer/
    );
    %Docstring
        SetAttr(day, attr)
        
        Associates the attribute with the specified date (in the range
        1...31).
    %End

    bool SetDate(
        const wxDateTime & date
    );
    %Docstring
        SetDate(date) -> bool
        
        Sets the current date.
    %End

    void SetHeaderColours(
        const wxColour & colFg,
        const wxColour & colBg
    );
    %Docstring
        SetHeaderColours(colFg, colBg)
        
        Set the colours used for painting the weekdays at the top of the
        control.
    %End

    void SetHighlightColours(
        const wxColour & colFg,
        const wxColour & colBg
    );
    %Docstring
        SetHighlightColours(colFg, colBg)
        
        Set the colours to be used for highlighting the currently selected
        date.
    %End

    void SetHoliday(
        size_t day
    );
    %Docstring
        SetHoliday(day)
        
        Marks the specified day as being a holiday in the current month.
    %End

    void SetHolidayColours(
        const wxColour & colFg,
        const wxColour & colBg
    );
    %Docstring
        SetHolidayColours(colFg, colBg)
        
        Sets the colours to be used for the holidays highlighting.
    %End

    void Mark(
        size_t day,
        bool mark
    );
    %Docstring
        Mark(day, mark)
        
        Mark or unmark the day.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Date, get=GetDate, set=SetDate)
    %Property(name=DateRange, get=GetDateRange, set=SetDateRange)
    %Property(name=HeaderColourBg, get=GetHeaderColourBg)
    %Property(name=HeaderColourFg, get=GetHeaderColourFg)
    %Property(name=HighlightColourBg, get=GetHighlightColourBg)
    %Property(name=HighlightColourFg, get=GetHighlightColourFg)
    %Property(name=HolidayColourBg, get=GetHolidayColourBg)
    %Property(name=HolidayColourFg, get=GetHolidayColourFg)
};  // end of class wxGenericCalendarCtrl


%Extract(id=pycode_adv)
def _GenericCalendarCtrl_PyGetDate(self):
    """
    Return the date as a Python datetime.date object.
    """
    return wx.wxdate2pydate(self.GetDate())
GenericCalendarCtrl.PyGetDate = wx.deprecated(_GenericCalendarCtrl_PyGetDate, "Use GetDate instead.")
del _GenericCalendarCtrl_PyGetDate
%End

%Extract(id=pycode_adv)
GenericCalendarCtrl.PySetDate = wx.deprecated(GenericCalendarCtrl.SetDate, 'Use SetDate instead.')
GenericCalendarCtrl.PySetDateRange = wx.deprecated(GenericCalendarCtrl.SetDateRange, 'Use SetDateRange instead.')

%End

%Extract(id=pycode_adv)
EVT_CALENDAR =                 wx.PyEventBinder( wxEVT_CALENDAR_DOUBLECLICKED, 1)
EVT_CALENDAR_SEL_CHANGED =     wx.PyEventBinder( wxEVT_CALENDAR_SEL_CHANGED, 1)
EVT_CALENDAR_WEEKDAY_CLICKED = wx.PyEventBinder( wxEVT_CALENDAR_WEEKDAY_CLICKED, 1)
EVT_CALENDAR_PAGE_CHANGED =    wx.PyEventBinder( wxEVT_CALENDAR_PAGE_CHANGED, 1)
EVT_CALENDAR_WEEK_CLICKED =    wx.PyEventBinder( wxEVT_CALENDAR_WEEK_CLICKED, 1)

%End

%Extract(id=pycode_adv)
# These are deprecated, will be removed later...
EVT_CALENDAR_DAY =             wx.PyEventBinder( wxEVT_CALENDAR_DAY_CHANGED, 1)
EVT_CALENDAR_MONTH =           wx.PyEventBinder( wxEVT_CALENDAR_MONTH_CHANGED, 1)
EVT_CALENDAR_YEAR =            wx.PyEventBinder( wxEVT_CALENDAR_YEAR_CHANGED, 1)

%End


//---------------------------------------------------------------------------

