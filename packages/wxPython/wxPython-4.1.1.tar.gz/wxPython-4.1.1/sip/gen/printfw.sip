//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxPREVIEW_PRINT;
const int wxPREVIEW_PREVIOUS;
const int wxPREVIEW_NEXT;
const int wxPREVIEW_ZOOM;
const int wxPREVIEW_FIRST;
const int wxPREVIEW_LAST;
const int wxPREVIEW_GOTO;
const int wxPREVIEW_DEFAULT;
const int wxID_PREVIEW_CLOSE;
const int wxID_PREVIEW_NEXT;
const int wxID_PREVIEW_PREVIOUS;
const int wxID_PREVIEW_PRINT;
const int wxID_PREVIEW_ZOOM;
const int wxID_PREVIEW_FIRST;
const int wxID_PREVIEW_LAST;
const int wxID_PREVIEW_GOTO;
const int wxID_PREVIEW_ZOOM_IN;
const int wxID_PREVIEW_ZOOM_OUT;
enum wxPrinterError
{
    wxPRINTER_NO_ERROR,
    wxPRINTER_CANCELLED,
    wxPRINTER_ERROR
};

enum wxPreviewFrameModalityKind
{
    wxPreviewFrame_AppModal,
    wxPreviewFrame_WindowModal,
    wxPreviewFrame_NonModal
};

class wxPreviewControlBar : wxPanel
{
    %Docstring
        PreviewControlBar(preview, buttons, parent, pos=DefaultPosition, size=DefaultSize, style=0, name="panel")
        
        This is the default implementation of the preview control bar, a panel
        with buttons and a zoom control.
    %End
    %TypeHeaderCode
        #include <wx/print.h>
    %End

public:
    wxPreviewControlBar(
        wxPrintPreview * preview,
        long buttons,
        wxWindow * parent   /TransferThis/,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = "panel"
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxPreviewControlBar();

    virtual
    void CreateButtons();
    %Docstring
        CreateButtons()
        
        Creates buttons, according to value of the button style flags.
    %End

    wxPrintPreview* GetPrintPreview() const;
    %Docstring
        GetPrintPreview() -> PrintPreview
        
        Gets the print preview object associated with the control bar.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxPreviewControlBar_GetPrintPreview(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxPrintPreview* _wxPreviewControlBar_GetPrintPreview(const wxPreviewControlBar* self)
    {
        return static_cast<wxPrintPreview*>(self->GetPrintPreview());
    }
    %End

    virtual
    int GetZoomControl();
    %Docstring
        GetZoomControl() -> int
        
        Gets the current zoom setting in percent.
    %End

    virtual
    void SetZoomControl(
        int percent
    );
    %Docstring
        SetZoomControl(percent)
        
        Sets the zoom control.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=PrintPreview, get=GetPrintPreview)
    %Property(name=ZoomControl, get=GetZoomControl, set=SetZoomControl)
};  // end of class wxPreviewControlBar


class wxPreviewCanvas : wxScrolledWindow
{
    %Docstring
        PreviewCanvas(preview, parent, pos=DefaultPosition, size=DefaultSize, style=0, name="canvas")
        
        A preview canvas is the default canvas used by the print preview
        system to display the preview.
    %End
    %TypeHeaderCode
        #include <wx/print.h>
    %End

public:
    wxPreviewCanvas(
        wxPrintPreview * preview,
        wxWindow * parent   /TransferThis/,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = "canvas"
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxPreviewCanvas();

    void OnPaint(
        wxPaintEvent & event
    );
    %Docstring
        OnPaint(event)
        
        Calls wxPrintPreview::PaintPage() to refresh the canvas.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

};  // end of class wxPreviewCanvas


class wxPreviewFrame : wxFrame
{
    %Docstring
        PreviewFrame(preview, parent, title="PrintPreview", pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr)
        
        This class provides the default method of managing the print preview
        interface.
    %End
    %TypeHeaderCode
        #include <wx/print.h>
    %End

public:
    wxPreviewFrame(
        wxPrintPreview* preview   /Transfer/,
        wxWindow * parent,
        const wxString & title = "Print Preview",
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_FRAME_STYLE,
        const wxString & name = wxFrameNameStr
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxPreviewFrame();

    virtual
    void CreateCanvas();
    %Docstring
        CreateCanvas()
        
        Creates a wxPreviewCanvas.
    %End

    virtual
    void CreateControlBar();
    %Docstring
        CreateControlBar()
        
        Creates a wxPreviewControlBar.
    %End

    virtual
    void Initialize();
    %Docstring
        Initialize()
        
        Initializes the frame elements and prepares for showing it.
    %End

    void InitializeWithModality(
        wxPreviewFrameModalityKind kind
    );
    %Docstring
        InitializeWithModality(kind)
        
        Initializes the frame elements and prepares for showing it with the
        given modality kind.
    %End

    void OnCloseWindow(
        wxCloseEvent & event
    );
    %Docstring
        OnCloseWindow(event)
        
        Enables any disabled frames in the application, and deletes the print
        preview object, implicitly deleting any printout objects associated
        with the print preview object.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

};  // end of class wxPreviewFrame


class wxPrintPreview : wxObject
{
    %Docstring
        PrintPreview(printout, printoutForPrinting=None, data=None)
        PrintPreview(printout, printoutForPrinting, data)
        
        Objects of this class manage the print preview process.
    %End
    %TypeHeaderCode
        #include <wx/print.h>
    %End

public:
    wxPrintPreview(
        wxPrintout * printout   /Transfer/,
        wxPrintout * printoutForPrinting   /Transfer/ = NULL,
        wxPrintDialogData * data = NULL
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxPrintPreview(
        wxPrintout * printout   /Transfer/,
        wxPrintout * printoutForPrinting   /Transfer/,
        wxPrintData * data
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxPrintPreview();

    virtual
    wxPreviewCanvas * GetCanvas() const;
    %Docstring
        GetCanvas() -> PreviewCanvas
        
        Gets the preview window used for displaying the print preview image.
    %End

    virtual
    int GetCurrentPage() const;
    %Docstring
        GetCurrentPage() -> int
        
        Gets the page currently being previewed.
    %End

    virtual
    wxFrame * GetFrame() const;
    %Docstring
        GetFrame() -> Frame
        
        Gets the frame used for displaying the print preview canvas and
        control bar.
    %End

    virtual
    int GetMaxPage() const;
    %Docstring
        GetMaxPage() -> int
        
        Returns the maximum page number.
    %End

    virtual
    int GetMinPage() const;
    %Docstring
        GetMinPage() -> int
        
        Returns the minimum page number.
    %End

    virtual
    wxPrintout * GetPrintout() const;
    %Docstring
        GetPrintout() -> Printout
        
        Gets the preview printout object associated with the wxPrintPreview
        object.
    %End

    virtual
    wxPrintout * GetPrintoutForPrinting() const;
    %Docstring
        GetPrintoutForPrinting() -> Printout
        
        Gets the printout object to be used for printing from within the
        preview interface, or NULL if none exists.
    %End

    virtual
    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if the wxPrintPreview is valid, false otherwise.
    %End

    virtual
    bool PaintPage(
        wxPreviewCanvas * canvas,
        wxDC & dc
    );
    %Docstring
        PaintPage(canvas, dc) -> bool
        
        This refreshes the preview window with the preview image.
    %End

    virtual
    bool Print(
        bool prompt
    );
    %Docstring
        Print(prompt) -> bool
        
        Invokes the print process using the second wxPrintout object supplied
        in the wxPrintPreview constructor.
    %End

    virtual
    bool RenderPage(
        int pageNum
    );
    %Docstring
        RenderPage(pageNum) -> bool
        
        Renders a page into a wxMemoryDC.
    %End

    virtual
    void SetCanvas(
        wxPreviewCanvas * window
    );
    %Docstring
        SetCanvas(window)
        
        Sets the window to be used for displaying the print preview image.
    %End

    virtual
    bool SetCurrentPage(
        int pageNum
    );
    %Docstring
        SetCurrentPage(pageNum) -> bool
        
        Sets the current page to be previewed.
    %End

    virtual
    void SetFrame(
        wxFrame * frame
    );
    %Docstring
        SetFrame(frame)
        
        Sets the frame to be used for displaying the print preview canvas and
        control bar.
    %End

    virtual
    void SetPrintout(
        wxPrintout * printout
    );
    %Docstring
        SetPrintout(printout)
        
        Associates a printout object with the wxPrintPreview object.
    %End

    virtual
    void SetZoom(
        int percent
    );
    %Docstring
        SetZoom(percent)
        
        Sets the percentage preview zoom, and refreshes the preview canvas
        accordingly.
    %End

    private:
        wxPrintPreview(const wxPrintPreview&);


    int __nonzero__();
    %Docstring
        __nonzero__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxPrintPreview___nonzero__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxPrintPreview___nonzero__(wxPrintPreview* self)
    {
        return self->IsOk();
    }
    %End

    int __bool__();
    %Docstring
        __bool__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxPrintPreview___bool__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxPrintPreview___bool__(wxPrintPreview* self)
    {
        return self->IsOk();
    }
    %End

    public:


    %Property(name=Canvas, get=GetCanvas, set=SetCanvas)
    %Property(name=CurrentPage, get=GetCurrentPage, set=SetCurrentPage)
    %Property(name=Frame, get=GetFrame, set=SetFrame)
    %Property(name=MaxPage, get=GetMaxPage)
    %Property(name=MinPage, get=GetMinPage)
    %Property(name=Printout, get=GetPrintout, set=SetPrintout)
    %Property(name=PrintoutForPrinting, get=GetPrintoutForPrinting)
};  // end of class wxPrintPreview


%Extract(id=pycode_core)
PrintPreview.Ok = wx.deprecated(PrintPreview.IsOk, 'Use IsOk instead.')

%End

class wxPrinter : wxObject
{
    %Docstring
        Printer(data=None)
        
        This class represents the Windows or PostScript printer, and is the
        vehicle through which printing may be launched by an application.
    %End
    %TypeHeaderCode
        #include <wx/print.h>
    %End

public:
    wxPrinter(
        wxPrintDialogData * data = NULL
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    wxPrintAbortDialog * CreateAbortWindow(
        wxWindow * parent,
        wxPrintout * printout
    );
    %Docstring
        CreateAbortWindow(parent, printout) -> PrintAbortDialog
        
        Creates the default printing abort window, with a cancel button.
    %End

    bool GetAbort() const;
    %Docstring
        GetAbort() -> bool
        
        Returns true if the user has aborted the print job.
    %End

    virtual
    wxPrintDialogData & GetPrintDialogData() const;
    %Docstring
        GetPrintDialogData() -> PrintDialogData
        
        Returns the print data associated with the printer object.
    %End

    virtual
    bool Print(
        wxWindow * parent,
        wxPrintout * printout,
        bool prompt = true
    );
    %Docstring
        Print(parent, printout, prompt=True) -> bool
        
        Starts the printing process.
    %End

    virtual
    wxDC * PrintDialog(
        wxWindow * parent
    );
    %Docstring
        PrintDialog(parent) -> DC
        
        Invokes the print dialog.
    %End

    virtual
    void ReportError(
        wxWindow * parent,
        wxPrintout * printout,
        const wxString & message
    );
    %Docstring
        ReportError(parent, printout, message)
        
        Default error-reporting function.
    %End

    virtual
    bool Setup(
        wxWindow * parent
    )   /Deprecated/;
    %Docstring
        Setup(parent) -> bool
        
        Invokes the print setup dialog.
    %End

    static
    wxPrinterError GetLastError();
    %Docstring
        GetLastError() -> PrinterError
        
        Return last error.
    %End

    private:
        wxPrinter(const wxPrinter&);


    public:


    %Property(name=Abort, get=GetAbort)
    %Property(name=PrintDialogData, get=GetPrintDialogData)
};  // end of class wxPrinter


class wxPrintout : wxObject
{
    %Docstring
        Printout(title="Printout")
        
        This class encapsulates the functionality of printing out an
        application document.
    %End
    %TypeHeaderCode
        #include <wx/print.h>
    %End

public:
    wxPrintout(
        const wxString & title = "Printout"
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxPrintout();

    void FitThisSizeToPage(
        const wxSize & imageSize
    );
    %Docstring
        FitThisSizeToPage(imageSize)
        
        Set the user scale and device origin of the wxDC associated with this
        wxPrintout so that the given image size fits entirely within the page
        rectangle and the origin is at the top left corner of the page
        rectangle.
    %End

    void FitThisSizeToPageMargins(
        const wxSize & imageSize,
        const wxPageSetupDialogData & pageSetupData
    );
    %Docstring
        FitThisSizeToPageMargins(imageSize, pageSetupData)
        
        Set the user scale and device origin of the wxDC associated with this
        wxPrintout so that the given image size fits entirely within the page
        margins set in the given wxPageSetupDialogData object.
    %End

    void FitThisSizeToPaper(
        const wxSize & imageSize
    );
    %Docstring
        FitThisSizeToPaper(imageSize)
        
        Set the user scale and device origin of the wxDC associated with this
        wxPrintout so that the given image size fits entirely within the paper
        and the origin is at the top left corner of the paper.
    %End

    wxDC * GetDC() const;
    %Docstring
        GetDC() -> DC
        
        Returns the device context associated with the printout (given to the
        printout at start of printing or previewing).
    %End

    wxRect GetLogicalPageMarginsRect(
        const wxPageSetupDialogData & pageSetupData
    ) const;
    %Docstring
        GetLogicalPageMarginsRect(pageSetupData) -> Rect
        
        Return the rectangle corresponding to the page margins specified by
        the given wxPageSetupDialogData object in the associated wxDC's
        logical coordinates for the current user scale and device origin.
    %End

    wxRect GetLogicalPageRect() const;
    %Docstring
        GetLogicalPageRect() -> Rect
        
        Return the rectangle corresponding to the page in the associated wxDC
        's logical coordinates for the current user scale and device origin.
    %End

    wxRect GetLogicalPaperRect() const;
    %Docstring
        GetLogicalPaperRect() -> Rect
        
        Return the rectangle corresponding to the paper in the associated wxDC
        's logical coordinates for the current user scale and device origin.
    %End

    void GetPPIPrinter(
        int * w   /Out/,
        int * h   /Out/
    ) const;
    %Docstring
        GetPPIPrinter() -> (w, h)
        
        Returns the number of pixels per logical inch of the printer device
        context.
    %End

    void GetPPIScreen(
        int * w   /Out/,
        int * h   /Out/
    ) const;
    %Docstring
        GetPPIScreen() -> (w, h)
        
        Returns the number of pixels per logical inch of the screen device
        context.
    %End

    virtual
    void GetPageInfo(
        int * minPage   /Out/,
        int * maxPage   /Out/,
        int * pageFrom   /Out/,
        int * pageTo   /Out/
    );
    %Docstring
        GetPageInfo() -> (minPage, maxPage, pageFrom, pageTo)
        
        Called by the framework to obtain information from the application
        about minimum and maximum page values that the user can select, and
        the required page range to be printed.
    %End

    void GetPageSizeMM(
        int * w   /Out/,
        int * h   /Out/
    ) const;
    %Docstring
        GetPageSizeMM() -> (w, h)
        
        Returns the size of the printer page in millimetres.
    %End

    void GetPageSizePixels(
        int * w   /Out/,
        int * h   /Out/
    ) const;
    %Docstring
        GetPageSizePixels() -> (w, h)
        
        Returns the size of the printer page in pixels, called the page
        rectangle.
    %End

    wxRect GetPaperRectPixels() const;
    %Docstring
        GetPaperRectPixels() -> Rect
        
        Returns the rectangle that corresponds to the entire paper in pixels,
        called the paper rectangle.
    %End

    virtual
    wxString GetTitle() const;
    %Docstring
        GetTitle() -> String
        
        Returns the title of the printout.
    %End

    virtual
    bool HasPage(
        int pageNum
    );
    %Docstring
        HasPage(pageNum) -> bool
        
        Should be overridden to return true if the document has this page, or
        false if not.
    %End

    virtual
    bool IsPreview() const;
    %Docstring
        IsPreview() -> bool
        
        Returns true if the printout is currently being used for previewing.
    %End

    wxPrintPreview * GetPreview() const;
    %Docstring
        GetPreview() -> PrintPreview
        
        Returns the associated preview object if any.
    %End

    void MapScreenSizeToDevice();
    %Docstring
        MapScreenSizeToDevice()
        
        Set the user scale and device origin of the wxDC associated with this
        wxPrintout so that one screen pixel maps to one device pixel on the
        DC.
    %End

    void MapScreenSizeToPage();
    %Docstring
        MapScreenSizeToPage()
        
        This sets the user scale of the wxDC associated with this wxPrintout
        to the same scale as MapScreenSizeToPaper() but sets the logical
        origin to the top left corner of the page rectangle.
    %End

    void MapScreenSizeToPageMargins(
        const wxPageSetupDialogData & pageSetupData
    );
    %Docstring
        MapScreenSizeToPageMargins(pageSetupData)
        
        This sets the user scale of the wxDC associated with this wxPrintout
        to the same scale as MapScreenSizeToPageMargins() but sets the logical
        origin to the top left corner of the page margins specified by the
        given wxPageSetupDialogData object.
    %End

    void MapScreenSizeToPaper();
    %Docstring
        MapScreenSizeToPaper()
        
        Set the user scale and device origin of the wxDC associated with this
        wxPrintout so that the printed page matches the screen size as closely
        as possible and the logical origin is in the top left corner of the
        paper rectangle.
    %End

    void OffsetLogicalOrigin(
        wxCoord xoff,
        wxCoord yoff
    );
    %Docstring
        OffsetLogicalOrigin(xoff, yoff)
        
        Shift the device origin by an amount specified in logical coordinates.
    %End

    virtual
    bool OnBeginDocument(
        int startPage,
        int endPage
    );
    %Docstring
        OnBeginDocument(startPage, endPage) -> bool
        
        Called by the framework at the start of document printing.
    %End

    virtual
    void OnBeginPrinting();
    %Docstring
        OnBeginPrinting()
        
        Called by the framework at the start of printing.
    %End

    virtual
    void OnEndDocument();
    %Docstring
        OnEndDocument()
        
        Called by the framework at the end of document printing.
    %End

    virtual
    void OnEndPrinting();
    %Docstring
        OnEndPrinting()
        
        Called by the framework at the end of printing.
    %End

    virtual
    void OnPreparePrinting();
    %Docstring
        OnPreparePrinting()
        
        Called once by the framework before any other demands are made of the
        wxPrintout object.
    %End

    virtual
    bool OnPrintPage(
        int pageNum
    ) = 0;
    %Docstring
        OnPrintPage(pageNum) -> bool
        
        Called by the framework when a page should be printed.
    %End

    void SetLogicalOrigin(
        wxCoord x,
        wxCoord y
    );
    %Docstring
        SetLogicalOrigin(x, y)
        
        Set the device origin of the associated wxDC so that the current
        logical point becomes the new logical origin.
    %End

    private:
        wxPrintout(const wxPrintout&);


    public:


    %Property(name=DC, get=GetDC)
    %Property(name=LogicalPageRect, get=GetLogicalPageRect)
    %Property(name=LogicalPaperRect, get=GetLogicalPaperRect)
    %Property(name=PaperRectPixels, get=GetPaperRectPixels)
    %Property(name=Preview, get=GetPreview)
    %Property(name=Title, get=GetTitle)
};  // end of class wxPrintout


class wxPrintAbortDialog : wxDialog
{
    %Docstring
        PrintAbortDialog(parent, documentTitle, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_DIALOG_STYLE, name="dialog")
        
        The dialog created by default by the print framework that enables
        aborting the printing process.
    %End
    %TypeHeaderCode
        #include <wx/print.h>
    %End

public:
    wxPrintAbortDialog(
        wxWindow * parent,
        const wxString & documentTitle,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_DIALOG_STYLE,
        const wxString & name = "dialog"
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void SetProgress(
        int currentPage,
        int totalPages,
        int currentCopy,
        int totalCopies
    );
    %Docstring
        SetProgress(currentPage, totalPages, currentCopy, totalCopies)
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

};  // end of class wxPrintAbortDialog


%Extract(id=pycode_core)
PyPrintPreview = wx.deprecated(PrintPreview, 'Use PrintPreview instead.')

%End

%Extract(id=pycode_core)
PyPreviewFrame = wx.deprecated(PreviewFrame, 'Use PreviewFrame instead.')

%End

%Extract(id=pycode_core)
PyPreviewControlBar = wx.deprecated(PreviewControlBar, 'Use PreviewControlBar instead.')

%End

%Extract(id=pycode_core)
PyPrintout = wx.deprecated(Printout, 'Use Printout instead.')

%End


//---------------------------------------------------------------------------

