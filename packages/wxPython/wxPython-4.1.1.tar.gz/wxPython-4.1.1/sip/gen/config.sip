//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

enum 
{
    wxCONFIG_USE_LOCAL_FILE,
    wxCONFIG_USE_GLOBAL_FILE,
    wxCONFIG_USE_RELATIVE_PATH,
    wxCONFIG_USE_NO_ESCAPE_CHARACTERS,
    wxCONFIG_USE_SUBDIR
};

class wxConfigBase : wxObject   /Abstract/
{
    %Docstring
        ConfigBase(appName=EmptyString, vendorName=EmptyString, localFilename=EmptyString, globalFilename=EmptyString, style=0)
        
        wxConfigBase defines the basic interface of all config classes.
    %End
    %TypeHeaderCode
        #include <wx/config.h>
    %End

    %TypeCode
        static PyObject* _Config_EnumerationHelper(bool flag, wxString& str, long index) {
        wxPyThreadBlocker blocker;
            PyObject* ret = PyTuple_New(3);
            if (ret) {
                PyTuple_SET_ITEM(ret, 0, PyBool_FromLong(flag));
                PyTuple_SET_ITEM(ret, 1, wx2PyString(str));
                PyTuple_SET_ITEM(ret, 2, wxPyInt_FromLong(index));
            }
            return ret;
        }
    %End
public:
    enum EntryType
    {
        Type_Unknown,
        Type_String,
        Type_Boolean,
        Type_Integer,
        Type_Float    
    };

    wxConfigBase(
        const wxString & appName = wxEmptyString,
        const wxString & vendorName = wxEmptyString,
        const wxString & localFilename = wxEmptyString,
        const wxString & globalFilename = wxEmptyString,
        long style = 0
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxConfigBase();

    virtual
    const wxString & GetPath() const = 0;
    %Docstring
        GetPath() -> String
        
        Retrieve the current path (always as absolute path).
    %End

    virtual
    void SetPath(
        const wxString & strPath
    ) = 0;
    %Docstring
        SetPath(strPath)
        
        Set current path: if the first character is '/', it is the absolute
        path, otherwise it is a relative path.
    %End

    PyObject* GetFirstEntry();
    %Docstring
        GetFirstEntry() -> PyObject
        
        GetFirstEntry() -> (more, value, index)
        
        Allows enumerating the entries in the current group in a config
        object.  Returns a tuple containing a flag indicating if there are
        more
        items, the name of the current item, and an index to pass to
        GetNextEntry to fetch the next item.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxConfigBase_GetFirstEntry(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxConfigBase_GetFirstEntry(wxConfigBase* self)
    {
        bool     more;
        long     index = 0;
        wxString value;
        more = self->GetFirstEntry(value, index);
        return _Config_EnumerationHelper(more, value, index);
    }
    %End

    PyObject* GetFirstGroup();
    %Docstring
        GetFirstGroup() -> PyObject
        
        GetFirstGroup() -> (more, value, index)
        
        Allows enumerating the subgroups in a config object.  Returns a tuple
        containing a flag indicating if there are more items, the name of the
        current item, and an index to pass to GetNextGroup to fetch the next
        item.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxConfigBase_GetFirstGroup(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxConfigBase_GetFirstGroup(wxConfigBase* self)
    {
        bool     more;
        long     index = 0;
        wxString value;
        more = self->GetFirstGroup(value, index);
        return _Config_EnumerationHelper(more, value, index);
    }
    %End

    PyObject* GetNextEntry(long index);
    %Docstring
        GetNextEntry(index) -> PyObject
        
        GetNextEntry() -> (more, value, index)
        
        Allows enumerating the entries in the current group in a config
        object.  Returns a tuple containing a flag indicating if there are
        more
        items, the name of the current item, and an index to pass to
        GetNextEntry to fetch the next item.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxConfigBase_GetNextEntry(sipCpp, index);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxConfigBase_GetNextEntry(wxConfigBase* self, long index)
    {
        bool     more;
        wxString value;
        more = self->GetNextEntry(value, index);
        return _Config_EnumerationHelper(more, value, index);
    }
    %End

    PyObject* GetNextGroup(long index);
    %Docstring
        GetNextGroup(index) -> PyObject
        
        GetNextGroup(long index) -> (more, value, index)
        
        Allows enumerating the subgroups in a config object.  Returns a tuple
        containing a flag indicating if there are more items, the name of the
        current item, and an index to pass to GetNextGroup to fetch the next
        item.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxConfigBase_GetNextGroup(sipCpp, index);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxConfigBase_GetNextGroup(wxConfigBase* self, long index)
    {
        bool more;
        wxString value;
        more = self->GetNextGroup(value, index);
        return _Config_EnumerationHelper(more, value, index);
    }
    %End

    virtual
    size_t GetNumberOfEntries(
        bool bRecursive = false
    ) const = 0;
    %Docstring
        GetNumberOfEntries(bRecursive=False) -> size_t
        
        Get number of entries in the current group.
    %End

    virtual
    size_t GetNumberOfGroups(
        bool bRecursive = false
    ) const = 0;
    %Docstring
        GetNumberOfGroups(bRecursive=False) -> size_t
        
        Get number of entries/subgroups in the current group, with or without
        its subgroups.
    %End

    bool Exists(
        const wxString & strName
    ) const;
    %Docstring
        Exists(strName) -> bool
    %End

    virtual
    wxConfigBase::EntryType GetEntryType(
        const wxString & name
    ) const;
    %Docstring
        GetEntryType(name) -> ConfigBase.EntryType
        
        Returns the type of the given entry or Unknown if the entry doesn't
        exist.
    %End

    virtual
    bool HasEntry(
        const wxString & strName
    ) const = 0;
    %Docstring
        HasEntry(strName) -> bool
    %End

    virtual
    bool HasGroup(
        const wxString & strName
    ) const = 0;
    %Docstring
        HasGroup(strName) -> bool
    %End

    wxString GetAppName() const;
    %Docstring
        GetAppName() -> String
        
        Returns the application name.
    %End

    wxString GetVendorName() const;
    %Docstring
        GetVendorName() -> String
        
        Returns the vendor name.
    %End

    virtual
    bool Flush(
        bool bCurrentOnly = false
    ) = 0;
    %Docstring
        Flush(bCurrentOnly=False) -> bool
        
        Permanently writes all changes (otherwise, they're only written from
        object's destructor).
    %End

    const wxString Read(
        const wxString & key,
        const wxString & defaultVal = wxEmptyString
    ) const;
    %Docstring
        Read(key, defaultVal=EmptyString) -> String
        
        Another version of Read(), returning the string value directly.
    %End

    bool ReadBool(const wxString& key,  bool defaultVal=false);
    %Docstring
        ReadBool(key, defaultVal=False) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxConfigBase_ReadBool(sipCpp, key, defaultVal);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxConfigBase_ReadBool(wxConfigBase* self, const wxString* key, bool defaultVal)
    {
        bool rv;
        self->Read(*key, &rv, defaultVal);
        return rv;
    }
    %End

    double ReadDouble(
        const wxString & key,
        double defaultVal
    ) const;
    %Docstring
        ReadDouble(key, defaultVal) -> double
        
        Reads a double value from the key and returns it.
    %End

    long ReadLong(
        const wxString & key,
        long defaultVal
    ) const;
    %Docstring
        ReadLong(key, defaultVal) -> long
        
        Reads a long value from the key and returns it.
    %End

    bool Write(
        const wxString & key,
        const wxString & value
    );
    %Docstring
        Write(key, value) -> bool
        
        Writes the wxString value to the config file and returns true on
        success.
    %End

    virtual
    bool RenameEntry(
        const wxString & oldName,
        const wxString & newName
    ) = 0;
    %Docstring
        RenameEntry(oldName, newName) -> bool
        
        Renames an entry in the current group.
    %End

    virtual
    bool RenameGroup(
        const wxString & oldName,
        const wxString & newName
    ) = 0;
    %Docstring
        RenameGroup(oldName, newName) -> bool
        
        Renames a subgroup of the current group.
    %End

    virtual
    bool DeleteAll() = 0;
    %Docstring
        DeleteAll() -> bool
        
        Delete the whole underlying object (disk file, registry key, ...).
    %End

    virtual
    bool DeleteEntry(
        const wxString & key,
        bool bDeleteGroupIfEmpty = true
    ) = 0;
    %Docstring
        DeleteEntry(key, bDeleteGroupIfEmpty=True) -> bool
        
        Deletes the specified entry and the group it belongs to if it was the
        last key in it and the second parameter is true.
    %End

    virtual
    bool DeleteGroup(
        const wxString & key
    ) = 0;
    %Docstring
        DeleteGroup(key) -> bool
        
        Delete the group (with all subgroups).
    %End

    bool IsExpandingEnvVars() const;
    %Docstring
        IsExpandingEnvVars() -> bool
        
        Returns true if we are expanding environment variables in key values.
    %End

    bool IsRecordingDefaults() const;
    %Docstring
        IsRecordingDefaults() -> bool
        
        Returns true if we are writing defaults back to the config file.
    %End

    void SetExpandEnvVars(
        bool bDoIt = true
    );
    %Docstring
        SetExpandEnvVars(bDoIt=True)
        
        Determine whether we wish to expand environment variables in key
        values.
    %End

    void SetRecordDefaults(
        bool bDoIt = true
    );
    %Docstring
        SetRecordDefaults(bDoIt=True)
        
        Sets whether defaults are recorded to the config file whenever an
        attempt to read the value which is not present in it is done.
    %End

    static
    wxConfigBase * Create();
    %Docstring
        Create() -> ConfigBase
        
        Create a new config object and sets it as the current one.
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    void DontCreateOnDemand();
    %Docstring
        DontCreateOnDemand()
        
        Calling this function will prevent Get() from automatically creating a
        new config object if the current one is NULL.
    %End

    static
    wxConfigBase * Get(
        bool CreateOnDemand = true
    );
    %Docstring
        Get(CreateOnDemand=True) -> ConfigBase
        
        Get the current config object.
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    wxConfigBase * Set(
        wxConfigBase * pConfig   /Transfer/
    )   /TransferBack/;
    %Docstring
        Set(pConfig) -> ConfigBase
        
        Sets the config object as the current one, returns the pointer to the
        previous current object (both the parameter and returned value may be
        NULL).
    %End

    long _cpp_ReadInt(const wxString& key,  long defaultVal=0);
    %Docstring
        _cpp_ReadInt(key, defaultVal=0) -> long
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxConfigBase__cpp_ReadInt(sipCpp, key, defaultVal);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    long _wxConfigBase__cpp_ReadInt(wxConfigBase* self, const wxString* key, long defaultVal)
    {
        long rv;
        self->Read(*key, &rv, defaultVal);
        return rv;
    }
    %End

    double ReadFloat(const wxString& key,  double defaultVal=0.0);
    %Docstring
        ReadFloat(key, defaultVal=0.0) -> double
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxConfigBase_ReadFloat(sipCpp, key, defaultVal);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    double _wxConfigBase_ReadFloat(wxConfigBase* self, const wxString* key, double defaultVal)
    {
        double rv;
        self->Read(*key, &rv, defaultVal);
        return rv;
    }
    %End

    bool WriteInt(const wxString& key,  long value);
    %Docstring
        WriteInt(key, value) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxConfigBase_WriteInt(sipCpp, key, value);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxConfigBase_WriteInt(wxConfigBase* self, const wxString* key, long value)
    {
        return self->Write(*key, value);
    }
    %End

    bool WriteFloat(const wxString& key,  double value);
    %Docstring
        WriteFloat(key, value) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxConfigBase_WriteFloat(sipCpp, key, value);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxConfigBase_WriteFloat(wxConfigBase* self, const wxString* key, double value)
    {
        return self->Write(*key, value);
    }
    %End

    bool WriteBool(const wxString& key,  bool value);
    %Docstring
        WriteBool(key, value) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxConfigBase_WriteBool(sipCpp, key, value);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxConfigBase_WriteBool(wxConfigBase* self, const wxString* key, bool value)
    {
        return self->Write(*key, value);
    }
    %End

    public:


    %Property(name=AppName, get=GetAppName)
    %Property(name=FirstEntry, get=GetFirstEntry)
    %Property(name=FirstGroup, get=GetFirstGroup)
    %Property(name=NextEntry, get=GetNextEntry)
    %Property(name=NextGroup, get=GetNextGroup)
    %Property(name=NumberOfEntries, get=GetNumberOfEntries)
    %Property(name=NumberOfGroups, get=GetNumberOfGroups)
    %Property(name=Path, get=GetPath, set=SetPath)
    %Property(name=VendorName, get=GetVendorName)
};  // end of class wxConfigBase


%Extract(id=pycode_core)
def _ConfigBase_ReadInt(self, key, defaultVal=0):
    import six
    rv = self._cpp_ReadInt(key, defaultVal)
    if six.PY2:
        rv = int(rv)
    return rv
ConfigBase.ReadInt = _ConfigBase_ReadInt
del _ConfigBase_ReadInt
%End

class wxFileConfig : wxConfigBase
{
    %Docstring
        FileConfig(appName=EmptyString, vendorName=EmptyString, localFilename=EmptyString, globalFilename=EmptyString, style=CONFIG_USE_LOCAL_FILE|CONFIG_USE_GLOBAL_FILE)
        FileConfig(is)
        
        wxFileConfig implements wxConfigBase interface for storing and
        retrieving configuration information using plain text files.
    %End
    %TypeHeaderCode
        #include <wx/fileconf.h>
    %End

public:
    wxFileConfig(
        const wxString & appName = wxEmptyString,
        const wxString & vendorName = wxEmptyString,
        const wxString & localFilename = wxEmptyString,
        const wxString & globalFilename = wxEmptyString,
        long style = wxCONFIG_USE_LOCAL_FILE|wxCONFIG_USE_GLOBAL_FILE
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxFileConfig(
        wxInputStream & is
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Save(wxOutputStream& os);
    %Docstring
        Save(os) -> bool
        
        Saves all config data to the given stream, returns true if data was
        saved successfully or false on error.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileConfig_Save(sipCpp, os);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxFileConfig_Save(wxFileConfig* self, wxOutputStream* os)
    {
        #if wxUSE_STREAMS
            return self->Save(*os);
        #else
            wxPyRaiseNotImplemented();
        #endif
    }
    %End

    void EnableAutoSave();
    %Docstring
        EnableAutoSave()
        
        Enables saving data to the disk file when this object is destroyed.
    %End

    void DisableAutoSave();
    %Docstring
        DisableAutoSave()
        
        Prevent this object from saving data to the disk file when it is
        destroyed.
    %End

    void SetUmask(
        int mode
    );
    %Docstring
        SetUmask(mode)
        
        Allows setting the mode to be used for the config file creation.
    %End

    virtual
    void SetPath(
        const wxString & strPath
    );
    %Docstring
        SetPath(strPath)
        
        Set current path: if the first character is '/', it is the absolute
        path, otherwise it is a relative path.
    %End

    virtual
    const wxString & GetPath() const;
    %Docstring
        GetPath() -> String
        
        Retrieve the current path (always as absolute path).
    %End

    virtual
    size_t GetNumberOfEntries(
        bool bRecursive = false
    ) const;
    %Docstring
        GetNumberOfEntries(bRecursive=False) -> size_t
        
        Get number of entries in the current group.
    %End

    virtual
    size_t GetNumberOfGroups(
        bool bRecursive = false
    ) const;
    %Docstring
        GetNumberOfGroups(bRecursive=False) -> size_t
        
        Get number of entries/subgroups in the current group, with or without
        its subgroups.
    %End

    virtual
    bool HasGroup(
        const wxString & strName
    ) const;
    %Docstring
        HasGroup(strName) -> bool
    %End

    virtual
    bool HasEntry(
        const wxString & strName
    ) const;
    %Docstring
        HasEntry(strName) -> bool
    %End

    virtual
    bool Flush(
        bool bCurrentOnly = false
    );
    %Docstring
        Flush(bCurrentOnly=False) -> bool
        
        Permanently writes all changes (otherwise, they're only written from
        object's destructor).
    %End

    virtual
    bool RenameEntry(
        const wxString & oldName,
        const wxString & newName
    );
    %Docstring
        RenameEntry(oldName, newName) -> bool
        
        Renames an entry in the current group.
    %End

    virtual
    bool RenameGroup(
        const wxString & oldName,
        const wxString & newName
    );
    %Docstring
        RenameGroup(oldName, newName) -> bool
        
        Renames a subgroup of the current group.
    %End

    virtual
    bool DeleteEntry(
        const wxString & key,
        bool bDeleteGroupIfEmpty = true
    );
    %Docstring
        DeleteEntry(key, bDeleteGroupIfEmpty=True) -> bool
        
        Deletes the specified entry and the group it belongs to if it was the
        last key in it and the second parameter is true.
    %End

    virtual
    bool DeleteGroup(
        const wxString & key
    );
    %Docstring
        DeleteGroup(key) -> bool
        
        Delete the group (with all subgroups).
    %End

    virtual
    bool DeleteAll();
    %Docstring
        DeleteAll() -> bool
        
        Delete the whole underlying object (disk file, registry key, ...).
    %End

    static
    wxString GetGlobalFileName(
        const wxString & szFile
    );
    %Docstring
        GetGlobalFileName(szFile) -> String
    %End

    static
    wxString GetLocalFileName(
        const wxString & szFile,
        int style = 0
    );
    %Docstring
        GetLocalFileName(szFile, style=0) -> String
    %End

    private:
        wxFileConfig(const wxFileConfig&);


    public:


    %Property(name=NumberOfEntries, get=GetNumberOfEntries)
    %Property(name=NumberOfGroups, get=GetNumberOfGroups)
    %Property(name=Path, get=GetPath, set=SetPath)
};  // end of class wxFileConfig


class wxConfigPathChanger
{
    %Docstring
        ConfigPathChanger(pContainer, strEntry)
        
        A handy little class which changes the current path in a wxConfig
        object and restores it in dtor.
    %End
    %TypeHeaderCode
        #include <wx/config.h>
    %End

public:
    wxConfigPathChanger(
        const wxConfigBase * pContainer,
        const wxString & strEntry
    );

    ~wxConfigPathChanger();

    const wxString & Name() const;
    %Docstring
        Name() -> String
        
        Returns the name of the key which was passed to the ctor.
    %End

    void UpdateIfDeleted();
    %Docstring
        UpdateIfDeleted()
        
        This method must be called if the original path inside the wxConfig
        object (i.e.
    %End

    private:
        wxConfigPathChanger(const wxConfigPathChanger&);


};  // end of class wxConfigPathChanger


%Extract(id=pycode_core)
def _ConfigPathChanger___enter__(self):
    return self
ConfigPathChanger.__enter__ = _ConfigPathChanger___enter__
del _ConfigPathChanger___enter__
%End

%Extract(id=pycode_core)
def _ConfigPathChanger___exit__(self, exc_type, exc_val, exc_tb):
    return False
ConfigPathChanger.__exit__ = _ConfigPathChanger___exit__
del _ConfigPathChanger___exit__
%End

    class wxConfig : wxConfigBase
    {
    public:
        wxConfig(const wxString& appName = wxEmptyString,
                 const wxString& vendorName = wxEmptyString,
                 const wxString& localFilename = wxEmptyString,
                 const wxString& globalFilename = wxEmptyString,
                 long style = wxCONFIG_USE_LOCAL_FILE | wxCONFIG_USE_GLOBAL_FILE);
        ~wxConfig();

        // pure virtuals with implementations here
        const wxString & GetPath() const;
        void SetPath(const wxString & strPath);
        size_t GetNumberOfEntries(bool bRecursive = false) const;
        size_t GetNumberOfGroups(bool bRecursive = false) const;
        bool HasEntry(const wxString & strName) const;
        bool HasGroup(const wxString & strName) const;
        bool Flush(bool bCurrentOnly = false);
        bool RenameEntry(const wxString & oldName, const wxString & newName);
        bool RenameGroup(const wxString & oldName, const wxString & newName);
        bool DeleteAll();
        bool DeleteEntry(const wxString & key, bool bDeleteGroupIfEmpty = true);
        bool DeleteGroup(const wxString & key);

    private:
        wxConfig(const wxConfig&);
    };



//---------------------------------------------------------------------------

