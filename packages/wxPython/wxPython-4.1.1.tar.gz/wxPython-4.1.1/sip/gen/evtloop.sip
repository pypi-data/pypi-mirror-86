//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxEventLoopBase   /Abstract/
{
    %Docstring
        Base class for all event loop implementations.
    %End
    %TypeHeaderCode
        #include <wx/evtloop.h>
    %End

public:
    virtual
    int Run() = 0;
    %Docstring
        Run() -> int
        
        Start the event loop, return the exit code when it is finished.
    %End

    bool IsRunning() const;
    %Docstring
        IsRunning() -> bool
        
        Return true if this event loop is currently running.
    %End

    virtual
    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Use this to check whether the event loop was successfully created
        before using it.
    %End

    virtual
    void Exit(
        int rc = 0
    );
    %Docstring
        Exit(rc=0)
        
        Exit the currently running loop with the given exit code.
    %End

    virtual
    void ScheduleExit(
        int rc = 0
    ) = 0;
    %Docstring
        ScheduleExit(rc=0)
        
        Schedule an exit from the loop with the given exit code.
    %End

    virtual
    bool Pending() const = 0;
    %Docstring
        Pending() -> bool
        
        Return true if any events are available.
    %End

    virtual
    bool Dispatch() = 0;
    %Docstring
        Dispatch() -> bool
        
        Dispatches the next event in the windowing system event queue.
    %End

    virtual
    int DispatchTimeout(
        unsigned long timeout
    ) = 0;
    %Docstring
        DispatchTimeout(timeout) -> int
        
        Dispatch an event but not wait longer than the specified timeout for
        it.
    %End

    virtual
    void WakeUp() = 0;
    %Docstring
        WakeUp()
        
        Called by wxWidgets to wake up the event loop even if it is currently
        blocked inside Dispatch().
    %End

    void WakeUpIdle();
    %Docstring
        WakeUpIdle()
        
        Makes sure that idle events are sent again.
    %End

    virtual
    bool ProcessIdle();
    %Docstring
        ProcessIdle() -> bool
        
        This virtual function is called when the application becomes idle and
        normally just sends wxIdleEvent to all interested parties.
    %End

    virtual
    bool IsYielding() const;
    %Docstring
        IsYielding() -> bool
        
        Returns true if called from inside Yield() or from inside YieldFor().
    %End

    bool Yield(
        bool onlyIfNeeded = false
    )   /ReleaseGIL/;
    %Docstring
        Yield(onlyIfNeeded=False) -> bool
        
        Yields control to pending messages in the windowing system.
    %End

    bool YieldFor(
        long eventsToProcess
    )   /ReleaseGIL/;
    %Docstring
        YieldFor(eventsToProcess) -> bool
        
        Works like Yield() with onlyIfNeeded == true, except that it allows
        the caller to specify a mask of the wxEventCategory values which
        indicates which events should be processed and which should instead be
        "delayed" (i.e.
    %End

    virtual
    bool IsEventAllowedInsideYield(
        wxEventCategory cat
    ) const;
    %Docstring
        IsEventAllowedInsideYield(cat) -> bool
        
        Returns true if the given event category is allowed inside a
        YieldFor() call (i.e.
    %End

    static
    wxEventLoopBase * GetActive();
    %Docstring
        GetActive() -> EventLoopBase
        
        Return the currently active (running) event loop.
    %End

    static
    void SetActive(
        wxEventLoopBase * loop
    );
    %Docstring
        SetActive(loop)
        
        Set currently active (running) event loop.
    %End

    bool IsMain() const;
    %Docstring
        IsMain() -> bool
        
        Returns true if this is the main loop executed by wxApp::OnRun().
    %End


protected:
    virtual
    void OnExit();
    %Docstring
        OnExit()
        
        This function is called before the event loop terminates, whether this
        happens normally (because of Exit() call) or abnormally (because of an
        exception thrown from inside the loop).
    %End

};  // end of class wxEventLoopBase


class wxEventLoopActivator
{
    %Docstring
        EventLoopActivator(loop)
        
        Makes an event loop temporarily active.
    %End
    %TypeHeaderCode
        #include <wx/evtloop.h>
    %End

public:
    wxEventLoopActivator(
        wxEventLoopBase * loop
    );

    ~wxEventLoopActivator();

    private:
        wxEventLoopActivator& operator=(const wxEventLoopActivator&);


    private:
        wxEventLoopActivator(const wxEventLoopActivator&);


};  // end of class wxEventLoopActivator


%Extract(id=pycode_core)
def _EventLoopActivator___enter__(self):
    return self
EventLoopActivator.__enter__ = _EventLoopActivator___enter__
del _EventLoopActivator___enter__
%End

%Extract(id=pycode_core)
def _EventLoopActivator___exit__(self, exc_type, exc_val, exc_tb):
    return False
EventLoopActivator.__exit__ = _EventLoopActivator___exit__
del _EventLoopActivator___exit__
%End

class wxGUIEventLoop : wxEventLoopBase
{
    %Docstring
        GUIEventLoop()
        
        A generic implementation of the GUI event loop.
    %End
    %TypeHeaderCode
        #include <wx/evtloop.h>
    %End

public:
    wxGUIEventLoop();

    virtual
    ~wxGUIEventLoop();

    private:
        wxGUIEventLoop(const wxGUIEventLoop&);


            public:
            virtual int Run();
            virtual void Exit(int rc = 0);
            virtual void ScheduleExit(int rc = 0);
            virtual bool Pending() const;
            virtual bool Dispatch();
            virtual int DispatchTimeout(unsigned long timeout);
            virtual void WakeUp();
            virtual bool YieldFor(long eventsToProcess);


};  // end of class wxGUIEventLoop


%Extract(id=pycode_core)
@wx.deprecatedMsg('Use GUIEventLoop instead.')
class EventLoop(GUIEventLoop):
    '''A class using the old name for compatibility.'''
    def __init__(self):
        GUIEventLoop.__init__(self)

%End


//---------------------------------------------------------------------------

