//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

enum 
{
    wxCONTROL_NONE,
    wxCONTROL_DISABLED,
    wxCONTROL_FOCUSED,
    wxCONTROL_PRESSED,
    wxCONTROL_SPECIAL,
    wxCONTROL_ISDEFAULT,
    wxCONTROL_ISSUBMENU,
    wxCONTROL_EXPANDED,
    wxCONTROL_SIZEGRIP,
    wxCONTROL_FLAT,
    wxCONTROL_CELL,
    wxCONTROL_CURRENT,
    wxCONTROL_SELECTED,
    wxCONTROL_CHECKED,
    wxCONTROL_CHECKABLE,
    wxCONTROL_UNDETERMINED
};

enum wxTitleBarButton
{
    wxTITLEBAR_BUTTON_CLOSE,
    wxTITLEBAR_BUTTON_MAXIMIZE,
    wxTITLEBAR_BUTTON_ICONIZE,
    wxTITLEBAR_BUTTON_RESTORE,
    wxTITLEBAR_BUTTON_HELP
};

enum wxHeaderSortIconType
{
    wxHDR_SORT_ICON_NONE,
    wxHDR_SORT_ICON_UP,
    wxHDR_SORT_ICON_DOWN
};

struct wxSplitterRenderParams
{
    %Docstring
        SplitterRenderParams(widthSash_, border_, isSens_)
        
        This is just a simple struct used as a return value of
        wxRendererNative::GetSplitterParams().
    %End
    %TypeHeaderCode
        #include <wx/renderer.h>
    %End

    wxSplitterRenderParams(
        wxCoord widthSash_,
        wxCoord border_,
        bool isSens_
    );

    const wxCoord border;

    const bool isHotSensitive;

    const wxCoord widthSash;

    private:
        wxSplitterRenderParams& operator=(const wxSplitterRenderParams&);


};  // end of class wxSplitterRenderParams


struct wxHeaderButtonParams
{
    %Docstring
        HeaderButtonParams()
        
        This struct can optionally be used with
        wxRendererNative::DrawHeaderButton() to specify custom values used to
        draw the text or bitmap label.
    %End
    %TypeHeaderCode
        #include <wx/renderer.h>
    %End

    wxHeaderButtonParams();

    wxColour m_arrowColour;

    wxColour m_selectionColour;

    wxString m_labelText;

    wxFont m_labelFont;

    wxColour m_labelColour;

    wxBitmap m_labelBitmap;

    int m_labelAlignment;

};  // end of class wxHeaderButtonParams


class wxRendererNative
{
    %Docstring
        First, a brief introduction to wxRendererNative and why it is needed.
    %End
    %TypeHeaderCode
        #include <wx/renderer.h>
    %End

public:
    virtual
    ~wxRendererNative();

    virtual
    void DrawCheckBox(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawCheckBox(win, dc, rect, flags=0)
        
        Draw a check box.
    %End

    virtual
    void DrawComboBoxDropButton(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawComboBoxDropButton(win, dc, rect, flags=0)
        
        Draw a button like the one used by wxComboBox to show a drop down
        window.
    %End

    virtual
    void DrawDropArrow(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawDropArrow(win, dc, rect, flags=0)
        
        Draw a drop down arrow that is suitable for use outside a combo box.
    %End

    virtual
    void DrawFocusRect(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawFocusRect(win, dc, rect, flags=0)
        
        Draw a focus rectangle using the specified rectangle.
    %End

    virtual
    void DrawGauge(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int value,
        int max,
        int flags = 0
    ) = 0;
    %Docstring
        DrawGauge(win, dc, rect, value, max, flags=0)
        
        Draw a progress bar in the specified rectangle.
    %End

    virtual
    int DrawHeaderButton(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0,
        wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE,
        wxHeaderButtonParams * params = NULL
    ) = 0;
    %Docstring
        DrawHeaderButton(win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None) -> int
        
        Draw the header control button (used, for example, by wxListCtrl).
    %End

    virtual
    int DrawHeaderButtonContents(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0,
        wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE,
        wxHeaderButtonParams * params = NULL
    ) = 0;
    %Docstring
        DrawHeaderButtonContents(win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None) -> int
        
        Draw the contents of a header control button (label, sort arrows,
        etc.).
    %End

    virtual
    void DrawItemSelectionRect(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawItemSelectionRect(win, dc, rect, flags=0)
        
        Draw a selection rectangle underneath the text as used e.g.
    %End

    virtual
    void DrawItemText(
        wxWindow * win,
        wxDC & dc,
        const wxString & text,
        const wxRect & rect,
        int align = wxALIGN_LEFT|wxALIGN_TOP,
        int flags = 0,
        wxEllipsizeMode ellipsizeMode = wxELLIPSIZE_END
    ) = 0;
    %Docstring
        DrawItemText(win, dc, text, rect, align=ALIGN_LEFT|ALIGN_TOP, flags=0, ellipsizeMode=ELLIPSIZE_END)
        
        Draw item text in the correct color based on selection status.
    %End

    virtual
    void DrawPushButton(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawPushButton(win, dc, rect, flags=0)
        
        Draw a blank push button that looks very similar to wxButton.
    %End

    virtual
    void DrawCollapseButton(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawCollapseButton(win, dc, rect, flags=0)
        
        Draw a collapse button.
    %End

    virtual
    wxSize GetCollapseButtonSize(
        wxWindow * win,
        wxDC & dc
    ) = 0;
    %Docstring
        GetCollapseButtonSize(win, dc) -> Size
        
        Returns the size of a collapse button.
    %End

    virtual
    void DrawSplitterBorder(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawSplitterBorder(win, dc, rect, flags=0)
        
        Draw the border for sash window: this border must be such that the
        sash drawn by DrawSplitterSash() blends into it well.
    %End

    virtual
    void DrawSplitterSash(
        wxWindow * win,
        wxDC & dc,
        const wxSize & size,
        wxCoord position,
        wxOrientation orient,
        int flags = 0
    ) = 0;
    %Docstring
        DrawSplitterSash(win, dc, size, position, orient, flags=0)
        
        Draw a sash.
    %End

    virtual
    void DrawTreeItemButton(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawTreeItemButton(win, dc, rect, flags=0)
        
        Draw the expanded/collapsed icon for a tree control item.
    %End

    virtual
    void DrawChoice(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawChoice(win, dc, rect, flags=0)
        
        Draw a native wxChoice.
    %End

    virtual
    void DrawComboBox(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawComboBox(win, dc, rect, flags=0)
        
        Draw a native wxComboBox.
    %End

    virtual
    void DrawTextCtrl(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawTextCtrl(win, dc, rect, flags=0)
        
        Draw a native wxTextCtrl frame.
    %End

    virtual
    void DrawRadioBitmap(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawRadioBitmap(win, dc, rect, flags=0)
        
        Draw a native wxRadioButton bitmap.
    %End

    virtual void DrawTitleBarBitmap(wxWindow* win,  wxDC& dc,  const wxRect& rect,  wxTitleBarButton button,  int flags = 0) = 0;
    %Docstring
        DrawTitleBarBitmap(win, dc, rect, button, flags=0)
        
        Draw a title bar button in the given state.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxRendererNative_DrawTitleBarBitmap(sipCpp, win, dc, rect, button, flags);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxRendererNative_DrawTitleBarBitmap(wxRendererNative* self, wxWindow* win, wxDC* dc, const wxRect* rect, wxTitleBarButton button, int flags)
    {
        #ifdef wxHAS_DRAW_TITLE_BAR_BITMAP
            self->DrawTitleBarBitmap(win, *dc, *rect, button, flags);
        #else
            wxPyRaiseNotImplemented();
        #endif
    }
    %End

    virtual
    void DrawCheckMark(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    ) = 0;
    %Docstring
        DrawCheckMark(win, dc, rect, flags=0)
        
        Draw a check mark.
    %End

    virtual
    wxSize GetCheckBoxSize(
        wxWindow * win,
        int flags = 0
    ) = 0;
    %Docstring
        GetCheckBoxSize(win, flags=0) -> Size
        
        Returns the size of a check box.
    %End

    virtual
    wxSize GetCheckMarkSize(
        wxWindow * win
    ) = 0;
    %Docstring
        GetCheckMarkSize(win) -> Size
        
        Returns the size of a check mark.
    %End

    virtual
    wxSize GetExpanderSize(
        wxWindow * win
    ) = 0;
    %Docstring
        GetExpanderSize(win) -> Size
        
        Returns the size of the expander used in tree-like controls.
    %End

    virtual
    int GetHeaderButtonHeight(
        wxWindow * win
    ) = 0;
    %Docstring
        GetHeaderButtonHeight(win) -> int
        
        Returns the height of a header button, either a fixed platform height
        if available, or a generic height based on the win window's font.
    %End

    virtual
    int GetHeaderButtonMargin(
        wxWindow * win
    ) = 0;
    %Docstring
        GetHeaderButtonMargin(win) -> int
        
        Returns the horizontal margin on the left and right sides of header
        button's label.
    %End

    virtual
    wxSplitterRenderParams GetSplitterParams(
        const wxWindow * win
    ) = 0;
    %Docstring
        GetSplitterParams(win) -> SplitterRenderParams
        
        Get the splitter parameters, see wxSplitterRenderParams.
    %End

    virtual
    wxRendererVersion GetVersion() const = 0;
    %Docstring
        GetVersion() -> RendererVersion
        
        This function is used for version checking: Load() refuses to load any
        shared libraries implementing an older or incompatible version.
    %End

    static
    wxRendererNative & Get();
    %Docstring
        Get() -> RendererNative
        
        Return the currently used renderer.
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    wxRendererNative & GetDefault();
    %Docstring
        GetDefault() -> RendererNative
        
        Return the default (native) implementation for this platform  this is
        also the one used by default but this may be changed by calling Set()
        in which case the return value of this method may be different from
        the return value of Get().
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    wxRendererNative & GetGeneric();
    %Docstring
        GetGeneric() -> RendererNative
        
        Return the generic implementation of the renderer.
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    wxRendererNative * Load(
        const wxString & name
    );
    %Docstring
        Load(name) -> RendererNative
        
        Load the renderer from the specified DLL, the returned pointer must be
        deleted by caller if not NULL when it is not used any more.
    %End

    static
    wxRendererNative * Set(
        wxRendererNative * renderer
    );
    %Docstring
        Set(renderer) -> RendererNative
        
        Set the renderer to use, passing NULL reverts to using the default
        renderer (the global renderer must always exist).
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    private:
        wxRendererNative(const wxRendererNative&);


    public:


    %Property(name=Version, get=GetVersion)
};  // end of class wxRendererNative


class wxDelegateRendererNative : wxRendererNative
{
    %Docstring
        DelegateRendererNative()
        DelegateRendererNative(rendererNative)
        
        wxDelegateRendererNative allows reuse of renderers code by forwarding
        all the wxRendererNative methods to the given object and thus allowing
        you to only modify some of its methods  without having to reimplement
        all of them.
    %End
    %TypeHeaderCode
        #include <wx/renderer.h>
    %End

public:
    wxDelegateRendererNative();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxDelegateRendererNative(
        wxRendererNative & rendererNative
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    int DrawHeaderButton(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0,
        wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE,
        wxHeaderButtonParams * params = NULL
    );
    %Docstring
        DrawHeaderButton(win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None) -> int
        
        Draw the header control button (used, for example, by wxListCtrl).
    %End

    virtual
    int DrawHeaderButtonContents(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0,
        wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE,
        wxHeaderButtonParams * params = NULL
    );
    %Docstring
        DrawHeaderButtonContents(win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None) -> int
        
        Draw the contents of a header control button (label, sort arrows,
        etc.).
    %End

    virtual
    int GetHeaderButtonHeight(
        wxWindow * win
    );
    %Docstring
        GetHeaderButtonHeight(win) -> int
        
        Returns the height of a header button, either a fixed platform height
        if available, or a generic height based on the win window's font.
    %End

    virtual
    int GetHeaderButtonMargin(
        wxWindow * win
    );
    %Docstring
        GetHeaderButtonMargin(win) -> int
        
        Returns the horizontal margin on the left and right sides of header
        button's label.
    %End

    virtual
    void DrawTreeItemButton(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    );
    %Docstring
        DrawTreeItemButton(win, dc, rect, flags=0)
        
        Draw the expanded/collapsed icon for a tree control item.
    %End

    virtual
    void DrawSplitterBorder(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    );
    %Docstring
        DrawSplitterBorder(win, dc, rect, flags=0)
        
        Draw the border for sash window: this border must be such that the
        sash drawn by DrawSplitterSash() blends into it well.
    %End

    virtual
    void DrawSplitterSash(
        wxWindow * win,
        wxDC & dc,
        const wxSize & size,
        wxCoord position,
        wxOrientation orient,
        int flags = 0
    );
    %Docstring
        DrawSplitterSash(win, dc, size, position, orient, flags=0)
        
        Draw a sash.
    %End

    virtual
    void DrawComboBoxDropButton(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    );
    %Docstring
        DrawComboBoxDropButton(win, dc, rect, flags=0)
        
        Draw a button like the one used by wxComboBox to show a drop down
        window.
    %End

    virtual
    void DrawDropArrow(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    );
    %Docstring
        DrawDropArrow(win, dc, rect, flags=0)
        
        Draw a drop down arrow that is suitable for use outside a combo box.
    %End

    virtual
    void DrawCheckBox(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    );
    %Docstring
        DrawCheckBox(win, dc, rect, flags=0)
        
        Draw a check box.
    %End

    virtual
    void DrawCheckMark(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    );
    %Docstring
        DrawCheckMark(win, dc, rect, flags=0)
        
        Draw a check mark.
    %End

    virtual
    wxSize GetCheckBoxSize(
        wxWindow * win,
        int flags = 0
    );
    %Docstring
        GetCheckBoxSize(win, flags=0) -> Size
        
        Returns the size of a check box.
    %End

    virtual
    wxSize GetCheckMarkSize(
        wxWindow * win
    );
    %Docstring
        GetCheckMarkSize(win) -> Size
        
        Returns the size of a check mark.
    %End

    virtual
    wxSize GetExpanderSize(
        wxWindow * win
    );
    %Docstring
        GetExpanderSize(win) -> Size
        
        Returns the size of the expander used in tree-like controls.
    %End

    virtual
    void DrawPushButton(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    );
    %Docstring
        DrawPushButton(win, dc, rect, flags=0)
        
        Draw a blank push button that looks very similar to wxButton.
    %End

    virtual
    void DrawItemSelectionRect(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    );
    %Docstring
        DrawItemSelectionRect(win, dc, rect, flags=0)
        
        Draw a selection rectangle underneath the text as used e.g.
    %End

    virtual
    void DrawFocusRect(
        wxWindow * win,
        wxDC & dc,
        const wxRect & rect,
        int flags = 0
    );
    %Docstring
        DrawFocusRect(win, dc, rect, flags=0)
        
        Draw a focus rectangle using the specified rectangle.
    %End

    virtual
    wxSplitterRenderParams GetSplitterParams(
        const wxWindow * win
    );
    %Docstring
        GetSplitterParams(win) -> SplitterRenderParams
        
        Get the splitter parameters, see wxSplitterRenderParams.
    %End

    virtual
    wxRendererVersion GetVersion() const;
    %Docstring
        GetVersion() -> RendererVersion
        
        This function is used for version checking: Load() refuses to load any
        shared libraries implementing an older or incompatible version.
    %End

    private:
        wxDelegateRendererNative(const wxDelegateRendererNative&);


    virtual void DrawTitleBarBitmap(wxWindow* win,  wxDC& dc,  const wxRect& rect,  wxTitleBarButton button,  int flags = 0);
    %Docstring
        DrawTitleBarBitmap(win, dc, rect, button, flags=0)
        
        Draw a title bar button in the given state.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxDelegateRendererNative_DrawTitleBarBitmap(sipCpp, win, dc, rect, button, flags);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxDelegateRendererNative_DrawTitleBarBitmap(wxDelegateRendererNative* self, wxWindow* win, wxDC* dc, const wxRect* rect, wxTitleBarButton button, int flags)
    {
        #ifdef wxHAS_DRAW_TITLE_BAR_BITMAP
            self->DrawTitleBarBitmap(win, *dc, *rect, button, flags);
        #else
            wxPyRaiseNotImplemented();
        #endif
    }
    %End

    public:


    %Property(name=Version, get=GetVersion)
};  // end of class wxDelegateRendererNative


struct wxRendererVersion
{
    %Docstring
        RendererVersion(version_, age_)
        
        This simple struct represents the wxRendererNative interface version
        and is only used as the return value of
        wxRendererNative::GetVersion().
    %End
    %TypeHeaderCode
        #include <wx/renderer.h>
    %End

    wxRendererVersion(
        int version_,
        int age_
    );

    const int age;

    const int version;

    static
    bool IsCompatible(
        const wxRendererVersion & ver
    );
    %Docstring
        IsCompatible(ver) -> bool
        
        Checks if the main program is compatible with the renderer having the
        version ver, returns true if it is and false otherwise.
    %End

    private:
        wxRendererVersion& operator=(const wxRendererVersion&);


};  // end of class wxRendererVersion



//---------------------------------------------------------------------------

