//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _propgrid.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxPG_PROP_MAX;
const int wxPG_PROP_PARENTAL_FLAGS;
const int wxPG_STRING_STORED_FLAGS;
enum wxPGPropertyFlags
{
    wxPG_PROP_MODIFIED,
    wxPG_PROP_DISABLED,
    wxPG_PROP_HIDDEN,
    wxPG_PROP_CUSTOMIMAGE,
    wxPG_PROP_NOEDITOR,
    wxPG_PROP_COLLAPSED,
    wxPG_PROP_INVALID_VALUE,
    wxPG_PROP_WAS_MODIFIED,
    wxPG_PROP_AGGREGATE,
    wxPG_PROP_CHILDREN_ARE_COPIES,
    wxPG_PROP_PROPERTY,
    wxPG_PROP_CATEGORY,
    wxPG_PROP_MISC_PARENT,
    wxPG_PROP_READONLY,
    wxPG_PROP_COMPOSED_VALUE,
    wxPG_PROP_USES_COMMON_VALUE,
    wxPG_PROP_AUTO_UNSPECIFIED,
    wxPG_PROP_CLASS_SPECIFIC_1,
    wxPG_PROP_CLASS_SPECIFIC_2,
    wxPG_PROP_BEING_DELETED
};

class wxPGPaintData
{
    %Docstring
        Contains information related to property's OnCustomPaint.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/property.h>
    %End

public:
    const wxPropertyGrid * m_parent;

    int m_choiceItem;

    int m_drawnWidth;

    int m_drawnHeight;

};  // end of class wxPGPaintData


class wxPGCellRenderer : wxRefCounter
{
    %Docstring
        PGCellRenderer()
        
        Base class for wxPropertyGrid cell renderers.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/property.h>
    %End

public:
    enum 
    {
        Selected,
        ChoicePopup,
        Control,
        Disabled,
        DontUseCellFgCol,
        DontUseCellBgCol,
        DontUseCellColours    
    };

    wxPGCellRenderer();

    virtual
    ~wxPGCellRenderer();

    virtual
    bool Render(
        wxDC & dc,
        const wxRect & rect,
        const wxPropertyGrid * propertyGrid,
        wxPGProperty * property,
        int column,
        int item,
        int flags
    ) const = 0;
    %Docstring
        Render(dc, rect, propertyGrid, property, column, item, flags) -> bool
        
        Returns true if rendered something in the foreground (text or bitmap).
    %End

    virtual
    wxSize GetImageSize(
        const wxPGProperty * property,
        int column,
        int item
    ) const;
    %Docstring
        GetImageSize(property, column, item) -> wx.Size
        
        Returns size of the image in front of the editable area.
    %End

    virtual
    void DrawCaptionSelectionRect(
        wxDC & dc,
        int x,
        int y,
        int w,
        int h
    ) const;
    %Docstring
        DrawCaptionSelectionRect(dc, x, y, w, h)
        
        Paints property category selection rectangle.
    %End

    void DrawText(
        wxDC & dc,
        const wxRect & rect,
        int imageWidth,
        const wxString & text
    ) const;
    %Docstring
        DrawText(dc, rect, imageWidth, text)
        
        Utility to draw vertically centered text.
    %End

    void DrawEditorValue(
        wxDC & dc,
        const wxRect & rect,
        int xOffset,
        const wxString & text,
        wxPGProperty * property,
        const wxPGEditor * editor
    ) const;
    %Docstring
        DrawEditorValue(dc, rect, xOffset, text, property, editor)
        
        Utility to draw editor's value, or vertically aligned text if editor
        is NULL.
    %End

    int PreDrawCell(
        wxDC & dc,
        const wxRect & rect,
        const wxPGCell & cell,
        int flags
    ) const;
    %Docstring
        PreDrawCell(dc, rect, cell, flags) -> int
        
        Utility to render cell bitmap and set text colour plus bg brush
        colour.
    %End

    void PostDrawCell(
        wxDC & dc,
        const wxPropertyGrid * propGrid,
        const wxPGCell & cell,
        int flags
    ) const;
    %Docstring
        PostDrawCell(dc, propGrid, cell, flags)
        
        Utility to be called after drawing is done, to revert whatever changes
        PreDrawCell() did.
    %End

};  // end of class wxPGCellRenderer


class wxPGDefaultRenderer : wxPGCellRenderer
{
    %Docstring
        Default cell renderer, that can handles the common scenarios.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/property.h>
    %End

public:
    virtual
    bool Render(
        wxDC & dc,
        const wxRect & rect,
        const wxPropertyGrid * propertyGrid,
        wxPGProperty * property,
        int column,
        int item,
        int flags
    ) const;
    %Docstring
        Render(dc, rect, propertyGrid, property, column, item, flags) -> bool
        
        Returns true if rendered something in the foreground (text or bitmap.
    %End

    virtual
    wxSize GetImageSize(
        const wxPGProperty * property,
        int column,
        int item
    ) const;
    %Docstring
        GetImageSize(property, column, item) -> wx.Size
        
        Returns size of the image in front of the editable area.
    %End

};  // end of class wxPGDefaultRenderer


class wxPGCellData : wxRefCounter
{
    %Docstring
        PGCellData()
    %End
    %TypeHeaderCode
        #include <wx/propgrid/property.h>
    %End

public:
    wxPGCellData();

    void SetText(
        const wxString & text
    );
    %Docstring
        SetText(text)
    %End

    void SetBitmap(
        const wxBitmap & bitmap
    );
    %Docstring
        SetBitmap(bitmap)
    %End

    void SetFgCol(
        const wxColour & col
    );
    %Docstring
        SetFgCol(col)
    %End

    void SetBgCol(
        const wxColour & col
    );
    %Docstring
        SetBgCol(col)
    %End

    void SetFont(
        const wxFont & font
    );
    %Docstring
        SetFont(font)
    %End

    public:



protected:
    virtual
    ~wxPGCellData();

};  // end of class wxPGCellData


class wxPGCell : wxObject
{
    %Docstring
        PGCell()
        PGCell(other)
        PGCell(text, bitmap=wx.NullBitmap, fgCol=wx.NullColour, bgCol=wx.NullColour)
        
        Base class for wxPropertyGrid cell information.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/property.h>
    %End

public:
    wxPGCell();

    wxPGCell(
        const wxPGCell & other
    );

    wxPGCell(
        const wxString & text,
        const wxBitmap & bitmap = wxNullBitmap,
        const wxColour & fgCol = wxNullColour,
        const wxColour & bgCol = wxNullColour
    );

    virtual
    ~wxPGCell();

    wxPGCellData * GetData();
    %Docstring
        GetData() -> PGCellData
    %End

    bool HasText() const;
    %Docstring
        HasText() -> bool
        
        Returns true if this cell has custom text stored within.
    %End

    void SetEmptyData();
    %Docstring
        SetEmptyData()
        
        Sets empty but valid data to this cell object.
    %End

    void MergeFrom(
        const wxPGCell & srcCell
    );
    %Docstring
        MergeFrom(srcCell)
        
        Merges valid data from srcCell into this.
    %End

    void SetText(
        const wxString & text
    );
    %Docstring
        SetText(text)
    %End

    void SetBitmap(
        const wxBitmap & bitmap
    );
    %Docstring
        SetBitmap(bitmap)
    %End

    void SetFgCol(
        const wxColour & col
    );
    %Docstring
        SetFgCol(col)
    %End

    void SetFont(
        const wxFont & font
    );
    %Docstring
        SetFont(font)
        
        Sets font of the cell.
    %End

    void SetBgCol(
        const wxColour & col
    );
    %Docstring
        SetBgCol(col)
    %End

    const wxString & GetText() const;
    %Docstring
        GetText() -> String
    %End

    const wxBitmap & GetBitmap() const;
    %Docstring
        GetBitmap() -> wx.Bitmap
    %End

    const wxColour & GetFgCol() const;
    %Docstring
        GetFgCol() -> wx.Colour
    %End

    const wxFont & GetFont() const;
    %Docstring
        GetFont() -> wx.Font
        
        Returns font of the cell.
    %End

    const wxColour & GetBgCol() const;
    %Docstring
        GetBgCol() -> wx.Colour
    %End

    public:


    %Property(name=BgCol, get=GetBgCol, set=SetBgCol)
    %Property(name=Bitmap, get=GetBitmap, set=SetBitmap)
    %Property(name=Data, get=GetData)
    %Property(name=FgCol, get=GetFgCol, set=SetFgCol)
    %Property(name=Font, get=GetFont, set=SetFont)
    %Property(name=Text, get=GetText, set=SetText)
};  // end of class wxPGCell


class wxPGAttributeStorage
{
    %Docstring
        PGAttributeStorage()
        
        wxPGAttributeStorage is somewhat optimized storage for key=variant
        pairs (i.e.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/property.h>
    %End

public:
    wxPGAttributeStorage();

    ~wxPGAttributeStorage();

    void Set(
        const wxString & name,
        const wxPGVariant & value
    );
    %Docstring
        Set(name, value)
    %End

    unsigned int GetCount() const;
    %Docstring
        GetCount() -> unsignedint
    %End

    wxPGVariant FindValue(
        const wxString & name
    ) const;
    %Docstring
        FindValue(name) -> PGVariant
    %End

    public:


    %Property(name=Count, get=GetCount)
};  // end of class wxPGAttributeStorage


class wxPGProperty : wxObject
{
    %Docstring
        PGProperty()
        PGProperty(label, name)
        
        wxPGProperty is base class for all wxPropertyGrid properties and as
        such it is not intended to be instantiated directly.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/property.h>
    %End

public:
    virtual
    ~wxPGProperty();

    typedef wxUint32 FlagType;

    void * m_clientData;

    virtual
    void OnSetValue();
    %Docstring
        OnSetValue()
        
        This virtual function is called after m_value has been set.
    %End

    virtual
    wxPGVariant DoGetValue() const;
    %Docstring
        DoGetValue() -> PGVariant
        
        Override this to return something else than m_value as the value.
    %End

    virtual
    bool ValidateValue(
        wxPGVariant & value,
        wxPGValidationInfo & validationInfo
    ) const;
    %Docstring
        ValidateValue(value, validationInfo) -> bool
        
        Implement this function in derived class to check the value.
    %End

    virtual
    bool StringToValue(
        wxPGVariant & variant   /Out/,
        const wxString & text,
        int argFlags = 0
    ) const;
    %Docstring
        StringToValue(text, argFlags=0) -> (bool, variant)
        
        Converts text into wxVariant value appropriate for this property.
    %End

    virtual
    bool IntToValue(
        wxPGVariant & variant   /Out/,
        int number,
        int argFlags = 0
    ) const;
    %Docstring
        IntToValue(number, argFlags=0) -> (bool, variant)
        
        Converts integer (possibly a choice selection) into wxVariant value
        appropriate for this property.
    %End

    virtual
    wxString ValueToString(
        wxPGVariant & value,
        int argFlags = 0
    ) const;
    %Docstring
        ValueToString(value, argFlags=0) -> String
        
        Converts property value into a text representation.
    %End

    bool SetValueFromString(
        const wxString & text,
        int flags = wxPG_PROGRAMMATIC_VALUE
    );
    %Docstring
        SetValueFromString(text, flags=PG_PROGRAMMATIC_VALUE) -> bool
        
        Converts string to a value, and if successful, calls SetValue() on it.
    %End

    bool SetValueFromInt(
        long value,
        int flags = 0
    );
    %Docstring
        SetValueFromInt(value, flags=0) -> bool
        
        Converts integer to a value, and if successful, calls SetValue() on
        it.
    %End

    virtual
    wxSize OnMeasureImage(
        int item = -1
    ) const;
    %Docstring
        OnMeasureImage(item=-1) -> wx.Size
        
        Returns size of the custom painted image in front of property.
    %End

    virtual
    bool OnEvent(
        wxPropertyGrid * propgrid,
        wxWindow * wnd_primary,
        wxEvent & event
    );
    %Docstring
        OnEvent(propgrid, wnd_primary, event) -> bool
        
        Events received by editor widgets are processed here.
    %End

    virtual
    wxPGVariant ChildChanged(
        wxPGVariant & thisValue,
        int childIndex,
        wxPGVariant & childValue
    ) const;
    %Docstring
        ChildChanged(thisValue, childIndex, childValue) -> PGVariant
        
        Called after value of a child property has been altered.
    %End

    virtual
    const wxPGEditor * DoGetEditorClass() const;
    %Docstring
        DoGetEditorClass() -> PGEditor
        
        Returns pointer to an instance of used editor.
    %End

    virtual
    wxValidator * DoGetValidator() const;
    %Docstring
        DoGetValidator() -> wx.Validator
        
        Returns pointer to the wxValidator that should be used with the editor
        of this property (NULL for no validator).
    %End

    virtual
    void OnCustomPaint(
        wxDC & dc,
        const wxRect & rect,
        wxPGPaintData & paintdata
    );
    %Docstring
        OnCustomPaint(dc, rect, paintdata)
        
        Override to paint an image in front of the property value text or
        drop-down list item (but only if wxPGProperty::OnMeasureImage is
        overridden as well).
    %End

    virtual
    wxPGCellRenderer * GetCellRenderer(
        int column
    ) const;
    %Docstring
        GetCellRenderer(column) -> PGCellRenderer
        
        Returns used wxPGCellRenderer instance for given property column
        (label=0, value=1).
    %End

    virtual
    int GetChoiceSelection() const;
    %Docstring
        GetChoiceSelection() -> int
        
        Returns which choice is currently selected.
    %End

    virtual
    void RefreshChildren();
    %Docstring
        RefreshChildren()
        
        Refresh values of child properties.
    %End

    virtual
    bool DoSetAttribute(
        const wxString & name,
        wxPGVariant & value
    );
    %Docstring
        DoSetAttribute(name, value) -> bool
        
        Reimplement this member function to add special handling for
        attributes of this property.
    %End

    virtual
    wxPGVariant DoGetAttribute(
        const wxString & name
    ) const;
    %Docstring
        DoGetAttribute(name) -> PGVariant
        
        Returns value of an attribute.
    %End

    virtual
    wxPGEditorDialogAdapter * GetEditorDialog() const   /Factory/;
    %Docstring
        GetEditorDialog() -> PGEditorDialogAdapter
        
        Returns instance of a new wxPGEditorDialogAdapter instance, which is
        used when user presses the (optional) button next to the editor
        control;.
    %End

    virtual
    void OnValidationFailure(
        wxPGVariant & pendingValue
    );
    %Docstring
        OnValidationFailure(pendingValue)
        
        Called whenever validation has failed with given pending value.
    %End

    int AddChoice(
        const wxString & label,
        int value = wxPG_INVALID_VALUE
    );
    %Docstring
        AddChoice(label, value=PG_INVALID_VALUE) -> int
        
        Append a new choice to property's list of choices.
    %End

    void AddPrivateChild(
        wxPGProperty * prop   /Transfer/
    );
    %Docstring
        AddPrivateChild(prop)
        
        Adds a private child property.
    %End

    void AdaptListToValue(
        wxPGVariant & list,
        wxPGVariant * value
    ) const;
    %Docstring
        AdaptListToValue(list, value)
        
        Adapts list variant into proper value using consecutive ChildChanged()
        calls.
    %End

    wxPGProperty * AppendChild(
        wxPGProperty * childProperty
    );
    %Docstring
        AppendChild(childProperty) -> PGProperty
        
        Use this member function to add independent (i.e.
    %End

    bool AreAllChildrenSpecified(
        wxPGVariant * pendingList = NULL
    ) const;
    %Docstring
        AreAllChildrenSpecified(pendingList=None) -> bool
        
        Determines, recursively, if all children are not unspecified.
    %End

    bool AreChildrenComponents() const;
    %Docstring
        AreChildrenComponents() -> bool
        
        Returns true if children of this property are component values (for
        instance, points size, face name, and is_underlined are component
        values of a font).
    %End

    void ChangeFlag(
        wxPGPropertyFlags flag,
        bool set
    );
    %Docstring
        ChangeFlag(flag, set)
        
        Sets or clears given property flag.
    %End

    void DeleteChildren();
    %Docstring
        DeleteChildren()
        
        Deletes children of the property.
    %End

    void DeleteChoice(
        int index
    );
    %Docstring
        DeleteChoice(index)
        
        Removes entry from property's wxPGChoices and editor control (if it is
        active).
    %End

    void Enable(
        bool enable = true
    );
    %Docstring
        Enable(enable=True)
        
        Enables or disables the property.
    %End

    void EnableCommonValue(
        bool enable = true
    );
    %Docstring
        EnableCommonValue(enable=True)
        
        Call to enable or disable usage of common value (integer value that
        can be selected for properties instead of their normal values) for
        this property.
    %End

    wxString GenerateComposedValue() const;
    %Docstring
        GenerateComposedValue() -> String
        
        Composes text from values of child properties.
    %End

    const wxString & GetLabel() const;
    %Docstring
        GetLabel() -> String
        
        Returns property's label.
    %End

    wxPGVariant GetAttribute(
        const wxString & name
    ) const;
    %Docstring
        GetAttribute(name) -> PGVariant
        GetAttribute(name, defVal) -> String
        
        Returns property attribute value, null variant if not found.
    %End

    wxString GetAttribute(
        const wxString & name,
        const wxString & defVal
    ) const;

    long GetAttributeAsLong(
        const wxString & name,
        long defVal
    ) const;
    %Docstring
        GetAttributeAsLong(name, defVal) -> long
        
        Returns named attribute, as long, if found.
    %End

    double GetAttributeAsDouble(
        const wxString & name,
        double defVal
    ) const;
    %Docstring
        GetAttributeAsDouble(name, defVal) -> double
        
        Returns named attribute, as double, if found.
    %End

    PyObject* GetAttributes() const;
    %Docstring
        GetAttributes() -> PyObject
        
        Returns map-like storage of property's attributes.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxPGProperty_GetAttributes(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxPGProperty_GetAttributes(const wxPGProperty* self)
    {
        const wxPGAttributeStorage& attrs = self->GetAttributes();
        wxPGAttributeStorage::const_iterator it = attrs.StartIteration();
        wxVariant v;
        wxPyThreadBlocker blocker;
        
        PyObject* dict = PyDict_New();
        if ( !dict ) return NULL;
        
        while ( attrs.GetNext( it, v ) ) {
            const wxString& name = v.GetName();
            PyObject* pyStr = wx2PyString(name);
            PyObject* pyVal = wxPGVariant_out_helper(v);
            int res = PyDict_SetItem( dict, pyStr, pyVal );
        }
        return dict;
    }
    %End

    wxPGVariant GetAttributesAsList() const;
    %Docstring
        GetAttributesAsList() -> PGVariant
        
        Returns attributes as list wxVariant.
    %End

    const wxPGEditor * GetColumnEditor(
        int column
    ) const;
    %Docstring
        GetColumnEditor(column) -> PGEditor
        
        Returns editor used for given column.
    %End

    const wxString & GetBaseName() const;
    %Docstring
        GetBaseName() -> String
        
        Returns property's base name (i.e.
    %End

    wxPGCell & GetCell(
        unsigned int column
    );
    %Docstring
        GetCell(column) -> PGCell
        
        Returns wxPGCell of given column, creating one if necessary.
    %End

    wxPGCell & GetOrCreateCell(
        unsigned int column
    );
    %Docstring
        GetOrCreateCell(column) -> PGCell
        
        Returns wxPGCell of given column, creating one if necessary.
    %End

    unsigned int GetChildCount() const;
    %Docstring
        GetChildCount() -> unsignedint
        
        Returns number of child properties.
    %End

    int GetChildrenHeight(
        int lh,
        int iMax = -1
    ) const;
    %Docstring
        GetChildrenHeight(lh, iMax=-1) -> int
        
        Returns height of children, recursively, and by taking
        expanded/collapsed status into account.
    %End

    const wxPGChoices & GetChoices() const;
    %Docstring
        GetChoices() -> PGChoices
        
        Returns read-only reference to property's list of choices.
    %End

    wxClientData * GetClientObject() const   /PyName=GetClientData/;
    %Docstring
        GetClientData() -> ClientData
        
        Gets managed client object of a property.
    %End

    wxPGVariant GetDefaultValue() const;
    %Docstring
        GetDefaultValue() -> PGVariant
        
        Returns property's default value.
    %End

    int GetCommonValue() const;
    %Docstring
        GetCommonValue() -> int
        
        Returns common value selected for this property.
    %End

    unsigned int GetDepth() const;
    %Docstring
        GetDepth() -> unsignedint
    %End

    int GetDisplayedCommonValueCount() const;
    %Docstring
        GetDisplayedCommonValueCount() -> int
        
        Return number of displayed common values for this property.
    %End

    wxString GetDisplayedString() const;
    %Docstring
        GetDisplayedString() -> String
        
        Returns property's displayed text.
    %End

    const wxPGEditor * GetEditorClass() const;
    %Docstring
        GetEditorClass() -> PGEditor
        
        Returns wxPGEditor that will be used and created when property becomes
        selected.
    %End

    wxString GetHintText() const;
    %Docstring
        GetHintText() -> String
        
        Returns property's hint text (shown in empty value cell).
    %End

    wxPropertyGrid * GetGrid() const;
    %Docstring
        GetGrid() -> PropertyGrid
        
        Returns property grid where property lies.
    %End

    wxPropertyGrid * GetGridIfDisplayed() const;
    %Docstring
        GetGridIfDisplayed() -> PropertyGrid
        
        Returns owner wxPropertyGrid, but only if one is currently on a page
        displaying this property.
    %End

    const wxString & GetHelpString() const;
    %Docstring
        GetHelpString() -> String
        
        Returns property's help or description text.
    %End

    wxString GetFlagsAsString(
        FlagType flagsMask
    ) const;
    %Docstring
        GetFlagsAsString(flagsMask) -> String
        
        Gets flags as a'|' delimited string.
    %End

    unsigned int GetIndexInParent() const;
    %Docstring
        GetIndexInParent() -> unsignedint
        
        Returns position in parent's array.
    %End

    const wxPGProperty * GetLastVisibleSubItem() const;
    %Docstring
        GetLastVisibleSubItem() -> PGProperty
        
        Returns last visible child property, recursively.
    %End

    wxPGProperty * GetMainParent() const;
    %Docstring
        GetMainParent() -> PGProperty
        
        Returns highest level non-category, non-root parent.
    %End

    int GetMaxLength() const;
    %Docstring
        GetMaxLength() -> int
        
        Returns maximum allowed length of the text the user can enter in the
        property text editor.
    %End

    wxString GetName() const;
    %Docstring
        GetName() -> String
        
        Returns property's name with all (non-category, non-root) parents.
    %End

    wxPGProperty * GetParent() const;
    %Docstring
        GetParent() -> PGProperty
        
        Return parent of property.
    %End

    wxPGProperty * GetPropertyByName(
        const wxString & name
    ) const;
    %Docstring
        GetPropertyByName(name) -> PGProperty
        
        Returns (direct) child property with given name (or NULL if not
        found).
    %End

    wxValidator * GetValidator() const;
    %Docstring
        GetValidator() -> wx.Validator
        
        Gets assignable version of property's validator.
    %End

    wxPGVariant GetValue() const;
    %Docstring
        GetValue() -> PGVariant
        
        Returns property's value.
    %End

    wxBitmap * GetValueImage() const;
    %Docstring
        GetValueImage() -> wx.Bitmap
        
        Returns bitmap that appears next to value text.
    %End

    virtual
    wxString GetValueAsString(
        int argFlags = 0
    ) const;
    %Docstring
        GetValueAsString(argFlags=0) -> String
        
        Returns text representation of property's value.
    %End

    wxString GetValueType() const;
    %Docstring
        GetValueType() -> String
        
        Returns value type used by this property.
    %End

    int GetY() const;
    %Docstring
        GetY() -> int
        
        Returns coordinate to the top y of the property.
    %End

    int GetImageOffset(
        int imageWidth
    ) const;
    %Docstring
        GetImageOffset(imageWidth) -> int
        
        Converts image width into full image offset, with margins.
    %End

    wxPGProperty * GetItemAtY(
        unsigned int y
    ) const;
    %Docstring
        GetItemAtY(y) -> PGProperty
        
        Returns property at given virtual y coordinate.
    %End

    bool HasFlag(
        wxPGPropertyFlags flag
    ) const;
    %Docstring
        HasFlag(flag) -> bool
        
        Returns true if property has given flag set.
    %End

    bool HasFlagsExact(
        FlagType flags
    ) const;
    %Docstring
        HasFlagsExact(flags) -> bool
        
        Returns true if property has all given flags set.
    %End

    bool HasVisibleChildren() const;
    %Docstring
        HasVisibleChildren() -> bool
        
        Returns true if property has even one visible child.
    %End

    bool Hide(
        bool hide,
        int flags = wxPG_RECURSE
    );
    %Docstring
        Hide(hide, flags=PG_RECURSE) -> bool
        
        Hides or reveals the property.
    %End

    int Index(
        const wxPGProperty * p
    ) const;
    %Docstring
        Index(p) -> int
        
        Returns index of given child property.
    %End

    wxPGProperty * InsertChild(
        int index,
        wxPGProperty * childProperty
    );
    %Docstring
        InsertChild(index, childProperty) -> PGProperty
        
        Use this member function to add independent (i.e.
    %End

    int InsertChoice(
        const wxString & label,
        int index,
        int value = wxPG_INVALID_VALUE
    );
    %Docstring
        InsertChoice(label, index, value=PG_INVALID_VALUE) -> int
        
        Inserts a new choice to property's list of choices.
    %End

    bool IsCategory() const;
    %Docstring
        IsCategory() -> bool
        
        Returns true if this property is actually a wxPropertyCategory.
    %End

    bool IsEnabled() const;
    %Docstring
        IsEnabled() -> bool
        
        Returns true if property is enabled.
    %End

    bool IsExpanded() const;
    %Docstring
        IsExpanded() -> bool
        
        Returns true if property has visible children.
    %End

    bool IsRoot() const;
    %Docstring
        IsRoot() -> bool
        
        Returns true if this property is actually a wxRootProperty.
    %End

    bool IsSubProperty() const;
    %Docstring
        IsSubProperty() -> bool
        
        Returns true if this is a sub-property.
    %End

    bool IsSomeParent(
        wxPGProperty * candidateParent
    ) const;
    %Docstring
        IsSomeParent(candidateParent) -> bool
        
        Returns true if candidateParent is some parent of this property.
    %End

    bool IsTextEditable() const;
    %Docstring
        IsTextEditable() -> bool
        
        Returns true if property has editable wxTextCtrl when selected.
    %End

    bool IsValueUnspecified() const;
    %Docstring
        IsValueUnspecified() -> bool
        
        Returns true if property's value is considered unspecified.
    %End

    bool IsVisible() const;
    %Docstring
        IsVisible() -> bool
        
        Returns true if all parents expanded.
    %End

    wxPGProperty * Item(
        unsigned int i
    ) const;
    %Docstring
        Item(i) -> PGProperty
        
        Returns child property at index i.
    %End

    wxPGProperty * Last() const;
    %Docstring
        Last() -> PGProperty
        
        Returns last sub-property.
    %End

    bool RecreateEditor();
    %Docstring
        RecreateEditor() -> bool
        
        If property's editor is created this forces its recreation.
    %End

    void RefreshEditor();
    %Docstring
        RefreshEditor()
        
        If property's editor is active, then update it's value.
    %End

    void SetAttribute(
        const wxString & name,
        wxPGVariant value
    );
    %Docstring
        SetAttribute(name, value)
        
        Sets an attribute for this property.
    %End

    void SetAutoUnspecified(
        bool enable = true
    );
    %Docstring
        SetAutoUnspecified(enable=True)
        
        Set if user can change the property's value to unspecified by
        modifying the value of the editor control (usually by clearing it).
    %End

    void SetBackgroundColour(
        const wxColour & colour,
        int flags = wxPG_RECURSE
    );
    %Docstring
        SetBackgroundColour(colour, flags=PG_RECURSE)
        
        Sets property's background colour.
    %End

    void SetEditor(
        const wxPGEditor * editor
    );
    %Docstring
        SetEditor(editor)
        SetEditor(editorName)
        
        Sets editor for a property.
    %End

    void SetEditor(
        const wxString & editorName
    );

    void SetCell(
        int column,
        const wxPGCell & cell
    );
    %Docstring
        SetCell(column, cell)
        
        Sets cell information for given column.
    %End

    void SetCommonValue(
        int commonValue
    );
    %Docstring
        SetCommonValue(commonValue)
        
        Sets common value selected for this property.
    %End

    bool SetChoices(
        wxPGChoices & choices
    );
    %Docstring
        SetChoices(choices) -> bool
        
        Sets new set of choices for the property.
    %End

    void SetClientObject(
        wxClientData * data   /Transfer/
    )   /PyName=SetClientData/;
    %Docstring
        SetClientData(data)
        
        Sets client object of a property.
    %End

    void SetChoiceSelection(
        int newValue
    );
    %Docstring
        SetChoiceSelection(newValue)
        
        Sets selected choice and changes property value.
    %End

    void SetDefaultValue(
        wxPGVariant & value
    );
    %Docstring
        SetDefaultValue(value)
        
        Set default value of a property.
    %End

    void SetExpanded(
        bool expanded
    );
    %Docstring
        SetExpanded(expanded)
    %End

    void SetFlagsFromString(
        const wxString & str
    );
    %Docstring
        SetFlagsFromString(str)
        
        Sets flags from a '|' delimited string.
    %End

    void SetFlagRecursively(
        wxPGPropertyFlags flag,
        bool set
    );
    %Docstring
        SetFlagRecursively(flag, set)
        
        Sets or clears given property flag, recursively.
    %End

    void SetHelpString(
        const wxString & helpString
    );
    %Docstring
        SetHelpString(helpString)
        
        Sets property's help string, which is shown, for example, in
        wxPropertyGridManager's description text box.
    %End

    void SetLabel(
        const wxString & label
    );
    %Docstring
        SetLabel(label)
        
        Sets property's label.
    %End

    bool SetMaxLength(
        int maxLen
    );
    %Docstring
        SetMaxLength(maxLen) -> bool
        
        Set maximum length of the text the user can enter in the text editor.
    %End

    void SetModifiedStatus(
        bool modified
    );
    %Docstring
        SetModifiedStatus(modified)
        
        Sets property's "is it modified?" flag.
    %End

    void SetName(
        const wxString & newName
    );
    %Docstring
        SetName(newName)
        
        Sets new (base) name for property.
    %End

    void SetParentalType(
        int flag
    );
    %Docstring
        SetParentalType(flag)
        
        Changes what sort of parent this property is for its children.
    %End

    void SetTextColour(
        const wxColour & colour,
        int flags = wxPG_RECURSE
    );
    %Docstring
        SetTextColour(colour, flags=PG_RECURSE)
        
        Sets property's text colour.
    %End

    void SetDefaultColours(
        int flags = wxPG_RECURSE
    );
    %Docstring
        SetDefaultColours(flags=PG_RECURSE)
        
        Sets property's default text and background colours.
    %End

    void SetValidator(
        const wxValidator & validator
    );
    %Docstring
        SetValidator(validator)
        
        Sets wxValidator for a property.
    %End

    void SetValue(
        wxPGVariant value,
        wxPGVariant * pList = NULL,
        int flags = wxPG_SETVAL_REFRESH_EDITOR
    );
    %Docstring
        SetValue(value, pList=None, flags=PG_SETVAL_REFRESH_EDITOR)
        
        Call this to set value of the property.
    %End

    void SetValueImage(
        wxBitmap & bmp
    );
    %Docstring
        SetValueImage(bmp)
        
        Set wxBitmap in front of the value.
    %End

    void SetValueInEvent(
        wxPGVariant value
    ) const;
    %Docstring
        SetValueInEvent(value)
        
        Call this function in OnEvent(), OnButtonClick() etc.
    %End

    void SetValueToUnspecified();
    %Docstring
        SetValueToUnspecified()
        
        Sets property's value to unspecified (i.e.
    %End

    void SetWasModified(
        bool set = true
    );
    %Docstring
        SetWasModified(set=True)
        
        Call with false in OnSetValue() to cancel value changes after all
        (i.e.
    %End

    wxPGProperty * UpdateParentValues();
    %Docstring
        UpdateParentValues() -> PGProperty
        
        Updates composed values of parent non-category properties,
        recursively.
    %End

    bool UsesAutoUnspecified() const;
    %Docstring
        UsesAutoUnspecified() -> bool
        
        Returns true if containing grid uses wxPG_EX_AUTO_UNSPECIFIED_VALUES.
    %End

    %Property(name=m_value, get=GetValue, set=SetValue)

protected:
    wxPGProperty();

    wxPGProperty(
        const wxString & label,
        const wxString & name
    );

};  // end of class wxPGProperty


%Extract(id=pycode_propgrid)
def _PGProperty_SetAttributes(self, attributes):
    """
    Set the property's attributes from a Python dictionary.
    """
    for name,value in attributes.items():
        self.SetAttribute(name, value)
PGProperty.SetAttributes = _PGProperty_SetAttributes
del _PGProperty_SetAttributes
%End

%Extract(id=pycode_propgrid)
def _PGProperty_GetClientObject(self, n):
    """
    Alias for :meth:`GetClientData`
    """
    return self.GetClientData(n)
PGProperty.GetClientObject = _PGProperty_GetClientObject
del _PGProperty_GetClientObject
%End

%Extract(id=pycode_propgrid)
def _PGProperty_SetClientObject(self, n, data):
    """
    Alias for :meth:`SetClientData`
    """
    self.SetClientData(n, data)
PGProperty.SetClientObject = _PGProperty_SetClientObject
del _PGProperty_SetClientObject
%End

class wxPropertyCategory : wxPGProperty
{
    %Docstring
        PropertyCategory()
        PropertyCategory(label, name=PG_LABEL)
        
        Category (caption) property.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/property.h>
    %End

public:
    wxPropertyCategory();

    wxPropertyCategory(
        const wxString & label,
        const wxString & name = wxPG_LABEL
    );

    ~wxPropertyCategory();

    int GetTextExtent(
        const wxWindow * wnd,
        const wxFont & font
    ) const;
    %Docstring
        GetTextExtent(wnd, font) -> int
    %End

    virtual
    wxString ValueToString(
        wxPGVariant & value,
        int argFlags
    ) const;
    %Docstring
        ValueToString(value, argFlags) -> String
        
        Converts property value into a text representation.
    %End

    virtual
    wxString GetValueAsString(
        int argFlags = 0
    ) const;
    %Docstring
        GetValueAsString(argFlags=0) -> String
        
        Returns text representation of property's value.
    %End

    public:


    %Property(name=ValueAsString, get=GetValueAsString)
};  // end of class wxPropertyCategory


class wxPGChoiceEntry : wxPGCell
{
    %Docstring
        PGChoiceEntry()
        PGChoiceEntry(other)
        PGChoiceEntry(label, value=PG_INVALID_VALUE)
        
        Data of a single wxPGChoices choice.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/property.h>
    %End

public:
    wxPGChoiceEntry();

    wxPGChoiceEntry(
        const wxPGChoiceEntry & other
    );

    wxPGChoiceEntry(
        const wxString & label,
        int value = wxPG_INVALID_VALUE
    );

    virtual
    ~wxPGChoiceEntry();

    void SetValue(
        int value
    );
    %Docstring
        SetValue(value)
    %End

    int GetValue() const;
    %Docstring
        GetValue() -> int
    %End

    public:


    %Property(name=Value, get=GetValue, set=SetValue)
};  // end of class wxPGChoiceEntry


class wxPGChoicesData : wxRefCounter
{
    %Docstring
        PGChoicesData()
    %End
    %TypeHeaderCode
        #include <wx/propgrid/property.h>
    %End

public:
    wxPGChoicesData();

    void CopyDataFrom(
        wxPGChoicesData * data
    );
    %Docstring
        CopyDataFrom(data)
    %End

    wxPGChoiceEntry & Insert(
        int index,
        const wxPGChoiceEntry & item
    );
    %Docstring
        Insert(index, item) -> PGChoiceEntry
    %End

    void Clear();
    %Docstring
        Clear()
    %End

    unsigned int GetCount() const;
    %Docstring
        GetCount() -> unsignedint
    %End

    wxPGChoiceEntry & Item(
        unsigned int i
    );
    %Docstring
        Item(i) -> PGChoiceEntry
    %End

    public:


    %Property(name=Count, get=GetCount)

protected:
    virtual
    ~wxPGChoicesData();

};  // end of class wxPGChoicesData


class wxPGChoices
{
    %Docstring
        PGChoices()
        PGChoices(a)
        PGChoices(labels, values=[])
        PGChoices(data)
        
        Helper class for managing choices of wxPropertyGrid properties.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/property.h>
    %End

public:
    wxPGChoices();

    wxPGChoices(
        const wxPGChoices & a
    );

    wxPGChoices(
        const wxArrayString & labels,
        const wxArrayInt & values = wxArrayInt()
    );

    wxPGChoices(
        wxPGChoicesData * data
    );

    ~wxPGChoices();

    typedef long ValArrItem;

    void Add(
        const wxArrayString & arr,
        const wxArrayInt & arrint
    );
    %Docstring
        Add(arr, arrint)
        Add(label, value=PG_INVALID_VALUE) -> PGChoiceEntry
        Add(label, bitmap, value=PG_INVALID_VALUE) -> PGChoiceEntry
        Add(entry) -> PGChoiceEntry
        
        This is an overloaded member function, provided for convenience. It
        differs from the above function only in what argument(s) it accepts.
    %End

    wxPGChoiceEntry & Add(
        const wxString & label,
        int value = wxPG_INVALID_VALUE
    );

    wxPGChoiceEntry & Add(
        const wxString & label,
        const wxBitmap & bitmap,
        int value = wxPG_INVALID_VALUE
    );

    wxPGChoiceEntry & Add(
        const wxPGChoiceEntry & entry
    );

    wxPGChoiceEntry & AddAsSorted(
        const wxString & label,
        int value = wxPG_INVALID_VALUE
    );
    %Docstring
        AddAsSorted(label, value=PG_INVALID_VALUE) -> PGChoiceEntry
        
        Adds a single item, sorted.
    %End

    void Assign(
        const wxPGChoices & a
    );
    %Docstring
        Assign(a)
        
        Assigns choices data, using reference counting.
    %End

    void AssignData(
        wxPGChoicesData * data
    );
    %Docstring
        AssignData(data)
        
        Assigns data from another set of choices.
    %End

    void Clear();
    %Docstring
        Clear()
        
        Deletes all items.
    %End

    wxPGChoices Copy() const;
    %Docstring
        Copy() -> PGChoices
        
        Returns a real copy of the choices.
    %End

    void EnsureData();
    %Docstring
        EnsureData()
    %End

    wxIntPtr GetId() const;
    %Docstring
        GetId() -> IntPtr
        
        Gets a unsigned number identifying this list.
    %End
    %MethodCode
        sipRes = new  ::wxIntPtr((wxIntPtr)sipCpp->GetId());
    %End

    const wxString & GetLabel(
        unsigned int ind
    ) const;
    %Docstring
        GetLabel(ind) -> String
        
        Returns label of item.
    %End

    unsigned int GetCount() const;
    %Docstring
        GetCount() -> unsignedint
        
        Returns number of items.
    %End

    int GetValue(
        unsigned int ind
    ) const;
    %Docstring
        GetValue(ind) -> int
        
        Returns value of item.
    %End

    wxArrayInt GetValuesForStrings(
        const wxArrayString & strings
    ) const;
    %Docstring
        GetValuesForStrings(strings) -> ArrayInt
        
        Returns array of values matching the given strings.
    %End

    wxArrayInt GetIndicesForStrings(
        const wxArrayString & strings,
        wxArrayString * unmatched = NULL
    ) const;
    %Docstring
        GetIndicesForStrings(strings, unmatched=None) -> ArrayInt
        
        Returns array of indices matching given strings.
    %End

    int Index(
        const wxString & label
    ) const;
    %Docstring
        Index(label) -> int
        Index(val) -> int
        
        Returns index of item with given label.
    %End

    int Index(
        int val
    ) const;

    wxPGChoiceEntry & Insert(
        const wxString & label,
        int index,
        int value = wxPG_INVALID_VALUE
    );
    %Docstring
        Insert(label, index, value=PG_INVALID_VALUE) -> PGChoiceEntry
        Insert(entry, index) -> PGChoiceEntry
        
        Inserts a single item.
    %End

    wxPGChoiceEntry & Insert(
        const wxPGChoiceEntry & entry,
        int index
    );

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns false if this is a constant empty set of choices, which should
        not be modified.
    %End

    wxPGChoiceEntry & Item(
        unsigned int i
    );
    %Docstring
        Item(i) -> PGChoiceEntry
        
        Returns item at given index.
    %End

    void RemoveAt(
        size_t nIndex,
        size_t count = 1
    );
    %Docstring
        RemoveAt(nIndex, count=1)
        
        Removes count items starting at position nIndex.
    %End

    void Set(
        const wxArrayString & labels,
        const wxArrayInt & values = wxArrayInt()
    );
    %Docstring
        Set(labels, values=[])
        
        This is an overloaded member function, provided for convenience. It
        differs from the above function only in what argument(s) it accepts.
    %End

    void AllocExclusive();
    %Docstring
        AllocExclusive()
        
        Creates exclusive copy of current choices.
    %End

    wxPGChoicesData * GetData();
    %Docstring
        GetData() -> PGChoicesData
        
        Returns data, increases refcount.
    %End

    wxPGChoicesData * GetDataPtr() const;
    %Docstring
        GetDataPtr() -> PGChoicesData
        
        Returns plain data ptr - no refcounting stuff is done.
    %End

    wxPGChoicesData * ExtractData();
    %Docstring
        ExtractData() -> PGChoicesData
        
        Changes ownership of data to you.
    %End

    wxArrayString GetLabels() const;
    %Docstring
        GetLabels() -> ArrayString
        
        Returns array of choice labels.
    %End

    public:


    %Property(name=Count, get=GetCount)
    %Property(name=Data, get=GetData)
    %Property(name=DataPtr, get=GetDataPtr)
    %Property(name=Id, get=GetId)
    %Property(name=Labels, get=GetLabels)
};  // end of class wxPGChoices


%Extract(id=pycode_propgrid)
def _PGChoices___getitem__(self, index):
    """
    Returns a reference to a :class:PGChoiceEntry using Python list syntax.
    """
    return self.Item(index)
PGChoices.__getitem__ = _PGChoices___getitem__
del _PGChoices___getitem__
%End

%Extract(id=pycode_propgrid)
def _PGChoices___len__(self):
    return self.GetCount()
PGChoices.__len__ = _PGChoices___len__
del _PGChoices___len__
%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End

%Extract(id=pycode_propgrid)
PG_ATTR_DEFAULT_VALUE             = u"DefaultValue"
PG_ATTR_MIN                       = u"Min"
PG_ATTR_MAX                       = u"Max"
PG_ATTR_UNITS                     = u"Units"
PG_ATTR_HINT                      = u"Hint"
PG_ATTR_INLINE_HELP               = PG_ATTR_HINT
PG_ATTR_AUTOCOMPLETE              = u"AutoComplete"
PG_BOOL_USE_CHECKBOX              = u"UseCheckbox"
PG_BOOL_USE_DOUBLE_CLICK_CYCLING  = u"UseDClickCycling"
PG_FLOAT_PRECISION                = u"Precision"
PG_STRING_PASSWORD                = u"Password"
PG_UINT_BASE                      = u"Base"
PG_UINT_PREFIX                    = u"Prefix"
PG_FILE_WILDCARD                  = u"Wildcard"
PG_FILE_SHOW_FULL_PATH            = u"ShowFullPath"
PG_FILE_SHOW_RELATIVE_PATH        = u"ShowRelativePath"
PG_FILE_INITIAL_PATH              = u"InitialPath"
PG_FILE_DIALOG_TITLE              = u"DialogTitle"
PG_DIALOG_TITLE                   = u"DialogTitle"
PG_FILE_DIALOG_STYLE              = u"DialogStyle"
PG_DIR_DIALOG_MESSAGE             = u"DialogMessage"
PG_ARRAY_DELIMITER                = u"Delimiter"
PG_DATE_FORMAT                    = u"DateFormat"
PG_DATE_PICKER_STYLE              = u"PickerStyle"
PG_ATTR_SPINCTRL_STEP             = u"Step"
PG_ATTR_SPINCTRL_WRAP             = u"Wrap"
PG_ATTR_SPINCTRL_MOTION           = u"MotionSpin"
PG_ATTR_SPINCTRL_MOTIONSPIN       = PG_ATTR_SPINCTRL_MOTION
PG_ATTR_MULTICHOICE_USERSTRINGMODE= u"UserStringMode"
PG_COLOUR_ALLOW_CUSTOM            = u"AllowCustom"
PG_COLOUR_HAS_ALPHA               = u"HasAlpha"

NullProperty                      = None
PGChoicesEmptyData                = None

%End


//---------------------------------------------------------------------------

