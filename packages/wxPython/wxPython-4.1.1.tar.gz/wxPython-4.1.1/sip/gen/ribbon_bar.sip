//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _ribbon.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/ribbon/bar.h>
%End


//---------------------------------------------------------------------------

enum wxRibbonBarOption
{
    wxRIBBON_BAR_SHOW_PAGE_LABELS,
    wxRIBBON_BAR_SHOW_PAGE_ICONS,
    wxRIBBON_BAR_FLOW_HORIZONTAL,
    wxRIBBON_BAR_FLOW_VERTICAL,
    wxRIBBON_BAR_SHOW_PANEL_EXT_BUTTONS,
    wxRIBBON_BAR_SHOW_PANEL_MINIMISE_BUTTONS,
    wxRIBBON_BAR_ALWAYS_SHOW_TABS,
    wxRIBBON_BAR_SHOW_TOGGLE_BUTTON,
    wxRIBBON_BAR_SHOW_HELP_BUTTON,
    wxRIBBON_BAR_DEFAULT_STYLE,
    wxRIBBON_BAR_FOLDBAR_STYLE
};

enum wxRibbonDisplayMode
{
    wxRIBBON_BAR_PINNED,
    wxRIBBON_BAR_MINIMIZED,
    wxRIBBON_BAR_EXPANDED
};

wxEventType wxEVT_RIBBONBAR_PAGE_CHANGED   /PyName=wxEVT_RIBBONBAR_PAGE_CHANGED/;

wxEventType wxEVT_RIBBONBAR_PAGE_CHANGING   /PyName=wxEVT_RIBBONBAR_PAGE_CHANGING/;

wxEventType wxEVT_RIBBONBAR_TAB_MIDDLE_DOWN   /PyName=wxEVT_RIBBONBAR_TAB_MIDDLE_DOWN/;

wxEventType wxEVT_RIBBONBAR_TAB_MIDDLE_UP   /PyName=wxEVT_RIBBONBAR_TAB_MIDDLE_UP/;

wxEventType wxEVT_RIBBONBAR_TAB_RIGHT_DOWN   /PyName=wxEVT_RIBBONBAR_TAB_RIGHT_DOWN/;

wxEventType wxEVT_RIBBONBAR_TAB_RIGHT_UP   /PyName=wxEVT_RIBBONBAR_TAB_RIGHT_UP/;

wxEventType wxEVT_RIBBONBAR_TAB_LEFT_DCLICK   /PyName=wxEVT_RIBBONBAR_TAB_LEFT_DCLICK/;

wxEventType wxEVT_RIBBONBAR_TOGGLED   /PyName=wxEVT_RIBBONBAR_TOGGLED/;

wxEventType wxEVT_RIBBONBAR_HELP_CLICK   /PyName=wxEVT_RIBBONBAR_HELP_CLICK/;

class wxRibbonBarEvent : wxNotifyEvent
{
    %Docstring
        RibbonBarEvent(command_type=wx.wxEVT_NULL, win_id=0, page=None)
        
        Event used to indicate various actions relating to a wxRibbonBar.
    %End
    %TypeHeaderCode
        #include <wx/ribbon/bar.h>
    %End

public:
    wxRibbonBarEvent(
        wxEventType command_type = wxEVT_NULL,
        int win_id = 0,
        wxRibbonPage * page = NULL
    );

    wxRibbonPage * GetPage();
    %Docstring
        GetPage() -> RibbonPage
        
        Returns the page being changed to, or being clicked on.
    %End

    void SetPage(
        wxRibbonPage * page
    );
    %Docstring
        SetPage(page)
        
        Sets the page relating to this event.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxRibbonBarEvent& operator=(const wxRibbonBarEvent&);


    public:


    %Property(name=Page, get=GetPage, set=SetPage)
};  // end of class wxRibbonBarEvent


class wxRibbonPageTabInfo
{
    %Docstring
        
    %End
    %TypeHeaderCode
        #include <wx/ribbon/bar.h>
    %End

public:
    wxRect rect;

    wxRibbonPage * page;

    int ideal_width;

    int small_begin_need_separator_width;

    int small_must_have_separator_width;

    int minimum_width;

    bool active;

    bool hovered;

    bool highlight;

    bool shown;

};  // end of class wxRibbonPageTabInfo


class wxRibbonBar : wxRibbonControl
{
    %Docstring
        RibbonBar()
        RibbonBar(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_BAR_DEFAULT_STYLE)
        
        Top-level control in a ribbon user interface.
    %End
    %TypeHeaderCode
        #include <wx/ribbon/bar.h>
    %End

public:
    wxRibbonBar();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxRibbonBar(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxRIBBON_BAR_DEFAULT_STYLE
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxRibbonBar();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxRIBBON_BAR_DEFAULT_STYLE
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_BAR_DEFAULT_STYLE) -> bool
        
        Create a ribbon bar in two-step ribbon bar construction.
    %End

    void SetTabCtrlMargins(
        int left,
        int right
    );
    %Docstring
        SetTabCtrlMargins(left, right)
        
        Set the margin widths (in pixels) on the left and right sides of the
        tab bar region of the ribbon bar.
    %End

    void SetArtProvider(
        wxRibbonArtProvider * art   /Transfer/
    );
    %Docstring
        SetArtProvider(art)
        
        Set the art provider to be used be the ribbon bar.
    %End

    bool SetActivePage(
        size_t page
    );
    %Docstring
        SetActivePage(page) -> bool
        SetActivePage(page) -> bool
        
        Set the active page by index, without triggering any events.
    %End

    bool SetActivePage(
        wxRibbonPage * page
    );

    int GetActivePage() const;
    %Docstring
        GetActivePage() -> int
        
        Get the index of the active page.
    %End

    wxRibbonPage * GetPage(
        int n
    );
    %Docstring
        GetPage(n) -> RibbonPage
        
        Get a page by index.
    %End

    size_t GetPageCount() const;
    %Docstring
        GetPageCount() -> size_t
        
        Get the number of pages in this bar.
    %End

    bool DismissExpandedPanel();
    %Docstring
        DismissExpandedPanel() -> bool
        
        Dismiss the expanded panel of the currently active page.
    %End

    int GetPageNumber(
        wxRibbonPage * page
    ) const;
    %Docstring
        GetPageNumber(page) -> int
        
        Returns the number for a given ribbon bar page.
    %End

    void DeletePage(
        size_t n
    );
    %Docstring
        DeletePage(n)
        
        Delete a single page from this ribbon bar.
    %End

    void ClearPages();
    %Docstring
        ClearPages()
        
        Delete all pages from the ribbon bar.
    %End

    bool IsPageShown(
        size_t page
    ) const;
    %Docstring
        IsPageShown(page) -> bool
        
        Indicates whether the tab for the given page is shown to the user or
        not.
    %End

    void ShowPage(
        size_t page,
        bool show_tab = true
    );
    %Docstring
        ShowPage(page, show_tab=True)
        
        Show or hide the tab for a given page.
    %End

    void HidePage(
        size_t page
    );
    %Docstring
        HidePage(page)
        
        Hides the tab for a given page.
    %End

    bool IsPageHighlighted(
        size_t page
    ) const;
    %Docstring
        IsPageHighlighted(page) -> bool
        
        Indicates whether a tab is currently highlighted.
    %End

    void AddPageHighlight(
        size_t page,
        bool highlight = true
    );
    %Docstring
        AddPageHighlight(page, highlight=True)
        
        Highlight the specified tab.
    %End

    void RemovePageHighlight(
        size_t page
    );
    %Docstring
        RemovePageHighlight(page)
        
        Changes a tab to not be highlighted.
    %End

    void ShowPanels(
        wxRibbonDisplayMode mode
    );
    %Docstring
        ShowPanels(mode)
        ShowPanels(show=True)
        
        Shows or hide the panel area of the ribbon bar according to the given
        display mode.
    %End

    void ShowPanels(
        bool show = true
    );

    void HidePanels();
    %Docstring
        HidePanels()
        
        Hides the panel area of the ribbon bar.
    %End

    bool ArePanelsShown() const;
    %Docstring
        ArePanelsShown() -> bool
        
        Indicates whether the panel area of the ribbon bar is shown.
    %End

    wxRibbonDisplayMode GetDisplayMode() const;
    %Docstring
        GetDisplayMode() -> RibbonDisplayMode
        
        Returns the current display mode of the panel area.
    %End

    bool Realize();
    %Docstring
        Realize() -> bool
        
        Perform initial layout and size calculations of the bar and its
        children.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ActivePage, get=GetActivePage, set=SetActivePage)
    %Property(name=DisplayMode, get=GetDisplayMode)
    %Property(name=PageCount, get=GetPageCount)
};  // end of class wxRibbonBar


%Extract(id=pycode_ribbon)
EVT_RIBBONBAR_PAGE_CHANGED    = wx.PyEventBinder(wxEVT_RIBBONBAR_PAGE_CHANGED, 1)
EVT_RIBBONBAR_PAGE_CHANGING   = wx.PyEventBinder(wxEVT_RIBBONBAR_PAGE_CHANGING,1)
EVT_RIBBONBAR_TAB_MIDDLE_DOWN = wx.PyEventBinder(wxEVT_RIBBONBAR_TAB_MIDDLE_DOWN, 1)
EVT_RIBBONBAR_TAB_MIDDLE_UP   = wx.PyEventBinder(wxEVT_RIBBONBAR_TAB_MIDDLE_UP, 1)
EVT_RIBBONBAR_TAB_RIGHT_DOWN  = wx.PyEventBinder(wxEVT_RIBBONBAR_TAB_RIGHT_DOWN, 1)
EVT_RIBBONBAR_TAB_RIGHT_UP    = wx.PyEventBinder(wxEVT_RIBBONBAR_TAB_RIGHT_UP, 1)
EVT_RIBBONBAR_TAB_LEFT_DCLICK = wx.PyEventBinder(wxEVT_RIBBONBAR_TAB_LEFT_DCLICK, 1)
EVT_RIBBONBAR_TOGGLED         = wx.PyEventBinder(wxEVT_RIBBONBAR_TOGGLED, 1)
EVT_RIBBONBAR_HELP_CLICK      = wx.PyEventBinder(wxEVT_RIBBONBAR_HELP_CLICK, 1)

%End

class wxRibbonPageTabInfoArray
{
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->GetCount();
    %End

            wxRibbonPageTabInfo& __getitem__(long index);
        %MethodCode
            if (0 > index)
                index += sipCpp->GetCount();

            if ((index < sipCpp->GetCount()) && (0 <= index)) {
                sipRes = &sipCpp->Item(index);
            }
            else {
                wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
                sipError = sipErrorFail;
            }
        %End
        

    int __contains__(wxRibbonPageTabInfo& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        sipRes = idx != wxNOT_FOUND;
    %End

    void append(wxRibbonPageTabInfo& obj);
    %MethodCode
        sipCpp->Add(*obj);
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxRibbonPageTabInfo& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
            }
        sipRes = idx;
    %End
};

%Extract(id=pycode_ribbon)
def _RibbonPageTabInfoArray___repr__(self):
    return "RibbonPageTabInfoArray: " + repr(list(self))
RibbonPageTabInfoArray.__repr__ = _RibbonPageTabInfoArray___repr__
del _RibbonPageTabInfoArray___repr__
%End



//---------------------------------------------------------------------------

