//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxFontMapper
{
    %Docstring
        FontMapper()
        
        wxFontMapper manages user-definable correspondence between logical
        font names and the fonts present on the machine.
    %End
    %TypeHeaderCode
        #include <wx/fontmap.h>
    %End

public:
    wxFontMapper();

    virtual
    ~wxFontMapper();

    bool GetAltForEncoding(
        wxFontEncoding encoding,
        wxFontEncoding * alt_encoding   /Out/,
        const wxString & facename = wxEmptyString,
        bool interactive = true
    );
    %Docstring
        GetAltForEncoding(encoding, facename=EmptyString, interactive=True) -> (bool, alt_encoding)
        
        Find an alternative for the given encoding (which is supposed to not
        be available on this system).
    %End

    virtual
    wxFontEncoding CharsetToEncoding(
        const wxString & charset,
        bool interactive = true
    );
    %Docstring
        CharsetToEncoding(charset, interactive=True) -> FontEncoding
        
        Returns the encoding for the given charset (in the form of RFC 2046)
        or wxFONTENCODING_SYSTEM if couldn't decode it.
    %End

    virtual
    bool IsEncodingAvailable(
        wxFontEncoding encoding,
        const wxString & facename = wxEmptyString
    );
    %Docstring
        IsEncodingAvailable(encoding, facename=EmptyString) -> bool
        
        Check whether given encoding is available in given face or not.
    %End

    void SetConfigPath(
        const wxString & prefix
    );
    %Docstring
        SetConfigPath(prefix)
        
        Set the root config path to use (should be an absolute path).
    %End

    void SetDialogParent(
        wxWindow * parent
    );
    %Docstring
        SetDialogParent(parent)
        
        The parent window for modal dialogs.
    %End

    void SetDialogTitle(
        const wxString & title
    );
    %Docstring
        SetDialogTitle(title)
        
        The title for the dialogs (note that default is quite reasonable).
    %End

    static
    wxFontMapper * Get();
    %Docstring
        Get() -> FontMapper
        
        Get the current font mapper object.
    %End

    static wxArrayString* GetAllEncodingNames(wxFontEncoding encoding);
    %Docstring
        GetAllEncodingNames(encoding) -> ArrayString
        
        Returns the array of all possible names for the given encoding. If it
        isn't empty, the first name in it is the canonical encoding name,
        i.e. the same string as returned by GetEncodingName()
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFontMapper_GetAllEncodingNames(encoding);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxArrayString* _wxFontMapper_GetAllEncodingNames(wxFontEncoding encoding)
    {
        wxArrayString* sArr = new wxArrayString;
        const wxChar** cArr = wxFontMapper::GetAllEncodingNames(encoding);
        if (cArr) {
            for (int idx=0; cArr[idx]; idx+=1)
                sArr->Add(cArr[idx]);
        }
        return sArr;
    }
    %End

    static
    wxFontEncoding GetEncoding(
        size_t n
    );
    %Docstring
        GetEncoding(n) -> FontEncoding
        
        Returns the n-th supported encoding.
    %End

    static
    wxString GetEncodingDescription(
        wxFontEncoding encoding
    );
    %Docstring
        GetEncodingDescription(encoding) -> String
        
        Return user-readable string describing the given encoding.
    %End

    static
    wxFontEncoding GetEncodingFromName(
        const wxString & encoding
    );
    %Docstring
        GetEncodingFromName(encoding) -> FontEncoding
        
        Return the encoding corresponding to the given internal name.
    %End

    static
    wxString GetEncodingName(
        wxFontEncoding encoding
    );
    %Docstring
        GetEncodingName(encoding) -> String
        
        Return internal string identifier for the encoding (see also
        wxFontMapper::GetEncodingDescription).
    %End

    static
    size_t GetSupportedEncodingsCount();
    %Docstring
        GetSupportedEncodingsCount() -> size_t
        
        Returns the number of the font encodings supported by this class.
    %End

    static
    wxFontMapper * Set(
        wxFontMapper * mapper
    );
    %Docstring
        Set(mapper) -> FontMapper
        
        Set the current font mapper object and return previous one (may be
        NULL).
    %End

    private:
        wxFontMapper(const wxFontMapper&);


    public:


};  // end of class wxFontMapper



//---------------------------------------------------------------------------

