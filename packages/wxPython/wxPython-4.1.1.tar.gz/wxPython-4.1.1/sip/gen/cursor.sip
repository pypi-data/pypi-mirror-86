//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxCursor : wxGDIObject
{
    %Docstring
        Cursor()
        Cursor(cursorName, type=BITMAP_TYPE_ANY, hotSpotX=0, hotSpotY=0)
        Cursor(cursorId)
        Cursor(image)
        Cursor(cursor)
        
        A cursor is a small bitmap usually used for denoting where the mouse
        pointer is, with a picture that might indicate the interpretation of a
        mouse click.
    %End
    %TypeHeaderCode
        #include <wx/cursor.h>
    %End

public:
    wxCursor();

    wxCursor(
        const wxString & cursorName,
        wxBitmapType type = wxBITMAP_TYPE_ANY,
        int hotSpotX = 0,
        int hotSpotY = 0
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxCursor(
        wxStockCursor cursorId
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxCursor(
        const wxImage & image
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxCursor(
        const wxCursor & cursor
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxCursor();

    virtual
    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if cursor data is present.
    %End

    wxPoint GetHotSpot() const;
    %Docstring
        GetHotSpot() -> Point
        
        Returns the coordinates of the cursor hot spot.
    %End

    int __nonzero__();
    %Docstring
        __nonzero__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxCursor___nonzero__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxCursor___nonzero__(wxCursor* self)
    {
        return self->IsOk();
    }
    %End

    int __bool__();
    %Docstring
        __bool__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxCursor___bool__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxCursor___bool__(wxCursor* self)
    {
        return self->IsOk();
    }
    %End

    long GetHandle();
    %Docstring
        GetHandle() -> long
        
        Get the handle for the Cursor.  Windows only.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxCursor_GetHandle(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    long _wxCursor_GetHandle(wxCursor* self)
    {
        #ifdef __WXMSW__
            return (long)self->GetHandle();
        #else
            return 0;
        #endif
    }
    %End

    void SetHandle(long handle);
    %Docstring
        SetHandle(handle)
        
        Set the handle to use for this Cursor.  Windows only.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxCursor_SetHandle(sipCpp, handle);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxCursor_SetHandle(wxCursor* self, long handle)
    {
        #ifdef __WXMSW__
            self->SetHandle((WXHANDLE)handle);
        #endif
    }
    %End

    void _copyFrom(const wxCursor* other);
    %Docstring
        _copyFrom(other)
        
        For internal use only.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxCursor__copyFrom(sipCpp, other);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxCursor__copyFrom(wxCursor* self, const wxCursor* other)
    {
        *self = *other;
    }
    %End

    public:


    %Property(name=Handle, get=GetHandle, set=SetHandle)
    %Property(name=HotSpot, get=GetHotSpot)
};  // end of class wxCursor


wxCursor wxNullCursor;

%Extract(id=pycode_core)
# These stock cursors will be initialized when the wx.App object is created.
STANDARD_CURSOR = Cursor()
HOURGLASS_CURSOR = Cursor()
CROSS_CURSOR = Cursor()

%End

%Extract(id=pycode_core)
StockCursor = wx.deprecated(Cursor, "Use Cursor instead.")

%End

%Extract(id=pycode_core)
CursorFromImage = wx.deprecated(Cursor, "Use Cursor instead.")

%End


//---------------------------------------------------------------------------

