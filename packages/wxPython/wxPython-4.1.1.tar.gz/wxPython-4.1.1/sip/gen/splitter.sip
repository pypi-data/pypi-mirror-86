//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/splitter.h>
%End


//---------------------------------------------------------------------------

const int wxSP_NOBORDER;
const int wxSP_THIN_SASH;
const int wxSP_NOSASH;
const int wxSP_PERMIT_UNSPLIT;
const int wxSP_LIVE_UPDATE;
const int wxSP_3DSASH;
const int wxSP_3DBORDER;
const int wxSP_NO_XP_THEME;
const int wxSP_BORDER;
const int wxSP_3D;
enum wxSplitMode
{
    wxSPLIT_HORIZONTAL,
    wxSPLIT_VERTICAL
};

enum 
{
    wxSPLIT_DRAG_NONE,
    wxSPLIT_DRAG_DRAGGING,
    wxSPLIT_DRAG_LEFT_DOWN
};

wxEventType wxEVT_SPLITTER_SASH_POS_CHANGED   /PyName=wxEVT_SPLITTER_SASH_POS_CHANGED/;

wxEventType wxEVT_SPLITTER_SASH_POS_CHANGING   /PyName=wxEVT_SPLITTER_SASH_POS_CHANGING/;

wxEventType wxEVT_SPLITTER_DOUBLECLICKED   /PyName=wxEVT_SPLITTER_DOUBLECLICKED/;

wxEventType wxEVT_SPLITTER_UNSPLIT   /PyName=wxEVT_SPLITTER_UNSPLIT/;

class wxSplitterWindow : wxWindow
{
    %Docstring
        SplitterWindow()
        SplitterWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=SP_3D, name="splitterWindow")
        
        This class manages up to two subwindows.
    %End
    %TypeHeaderCode
        #include <wx/splitter.h>
    %End

public:
    wxSplitterWindow();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxSplitterWindow(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxSP_3D,
        const wxString & name = "splitterWindow"
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxSplitterWindow();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & point = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxSP_3D,
        const wxString & name = "splitter"
    );
    %Docstring
        Create(parent, id=ID_ANY, point=DefaultPosition, size=DefaultSize, style=SP_3D, name="splitter") -> bool
        
        Creation function, for two-step construction.
    %End

    int GetMinimumPaneSize() const;
    %Docstring
        GetMinimumPaneSize() -> int
        
        Returns the current minimum pane size (defaults to zero).
    %End

    double GetSashGravity() const;
    %Docstring
        GetSashGravity() -> double
        
        Returns the current sash gravity.
    %End

    int GetSashPosition() const;
    %Docstring
        GetSashPosition() -> int
        
        Returns the current sash position.
    %End

    int GetSashSize() const;
    %Docstring
        GetSashSize() -> int
        
        Returns the default sash size in pixels or 0 if it is invisible.
    %End

    int GetDefaultSashSize() const;
    %Docstring
        GetDefaultSashSize() -> int
        
        Returns the default sash size in pixels.
    %End

    wxSplitMode GetSplitMode() const;
    %Docstring
        GetSplitMode() -> SplitMode
        
        Gets the split mode.
    %End

    wxWindow * GetWindow1() const;
    %Docstring
        GetWindow1() -> Window
        
        Returns the left/top or only pane.
    %End

    wxWindow * GetWindow2() const;
    %Docstring
        GetWindow2() -> Window
        
        Returns the right/bottom pane.
    %End

    void Initialize(
        wxWindow * window
    );
    %Docstring
        Initialize(window)
        
        Initializes the splitter window to have one pane.
    %End

    bool IsSashInvisible() const;
    %Docstring
        IsSashInvisible() -> bool
        
        Returns true if the sash is invisible even when the window is split,
        false otherwise.
    %End

    bool IsSplit() const;
    %Docstring
        IsSplit() -> bool
        
        Returns true if the window is split, false otherwise.
    %End

    bool ReplaceWindow(
        wxWindow * winOld,
        wxWindow * winNew
    );
    %Docstring
        ReplaceWindow(winOld, winNew) -> bool
        
        This function replaces one of the windows managed by the
        wxSplitterWindow with another one.
    %End

    void SetMinimumPaneSize(
        int paneSize
    );
    %Docstring
        SetMinimumPaneSize(paneSize)
        
        Sets the minimum pane size.
    %End

    void SetSashGravity(
        double gravity
    );
    %Docstring
        SetSashGravity(gravity)
        
        Sets the sash gravity.
    %End

    void SetSashPosition(
        int position,
        bool redraw = true
    );
    %Docstring
        SetSashPosition(position, redraw=True)
        
        Sets the sash position.
    %End

    void SetSplitMode(
        int mode
    );
    %Docstring
        SetSplitMode(mode)
        
        Sets the split mode.
    %End

    void SetSashInvisible(
        bool invisible = true
    );
    %Docstring
        SetSashInvisible(invisible=True)
        
        Sets whether the sash should be invisible, even when the window is
        split.
    %End

    bool SplitHorizontally(
        wxWindow * window1,
        wxWindow * window2,
        int sashPosition = 0
    );
    %Docstring
        SplitHorizontally(window1, window2, sashPosition=0) -> bool
        
        Initializes the top and bottom panes of the splitter window.
    %End

    bool SplitVertically(
        wxWindow * window1,
        wxWindow * window2,
        int sashPosition = 0
    );
    %Docstring
        SplitVertically(window1, window2, sashPosition=0) -> bool
        
        Initializes the left and right panes of the splitter window.
    %End

    bool Unsplit(
        wxWindow * toRemove = NULL
    );
    %Docstring
        Unsplit(toRemove=None) -> bool
        
        Unsplits the window.
    %End

    void UpdateSize();
    %Docstring
        UpdateSize()
        
        Causes any pending sizing of the sash and child panes to take place
        immediately.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=DefaultSashSize, get=GetDefaultSashSize)
    %Property(name=MinimumPaneSize, get=GetMinimumPaneSize, set=SetMinimumPaneSize)
    %Property(name=SashGravity, get=GetSashGravity, set=SetSashGravity)
    %Property(name=SashPosition, get=GetSashPosition, set=SetSashPosition)
    %Property(name=SashSize, get=GetSashSize)
    %Property(name=SplitMode, get=GetSplitMode, set=SetSplitMode)
    %Property(name=Window1, get=GetWindow1)
    %Property(name=Window2, get=GetWindow2)
    %Property(name=SashInvisible, get=IsSashInvisible, set=SetSashInvisible)
};  // end of class wxSplitterWindow


class wxSplitterEvent : wxNotifyEvent
{
    %Docstring
        SplitterEvent(eventType=wxEVT_NULL, splitter=None)
        
        This class represents the events generated by a splitter control.
    %End
    %TypeHeaderCode
        #include <wx/splitter.h>
    %End

public:
    wxSplitterEvent(
        wxEventType eventType = wxEVT_NULL,
        wxSplitterWindow * splitter = NULL
    );

    int GetSashPosition() const;
    %Docstring
        GetSashPosition() -> int
        
        Returns the new sash position.
    %End

    wxWindow * GetWindowBeingRemoved() const;
    %Docstring
        GetWindowBeingRemoved() -> Window
        
        Returns a pointer to the window being removed when a splitter window
        is unsplit.
    %End

    int GetX() const;
    %Docstring
        GetX() -> int
        
        Returns the x coordinate of the double-click point.
    %End

    int GetY() const;
    %Docstring
        GetY() -> int
        
        Returns the y coordinate of the double-click point.
    %End

    void SetSashPosition(
        int pos
    );
    %Docstring
        SetSashPosition(pos)
        
        In the case of wxEVT_SPLITTER_SASH_POS_CHANGED events, sets the new
        sash position.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxSplitterEvent& operator=(const wxSplitterEvent&);


    public:


    %Property(name=SashPosition, get=GetSashPosition, set=SetSashPosition)
    %Property(name=WindowBeingRemoved, get=GetWindowBeingRemoved)
    %Property(name=X, get=GetX)
    %Property(name=Y, get=GetY)
};  // end of class wxSplitterEvent


%Extract(id=pycode_core)
EVT_SPLITTER_SASH_POS_CHANGED = wx.PyEventBinder( wxEVT_SPLITTER_SASH_POS_CHANGED, 1 )
EVT_SPLITTER_SASH_POS_CHANGING = wx.PyEventBinder( wxEVT_SPLITTER_SASH_POS_CHANGING, 1 )
EVT_SPLITTER_DOUBLECLICKED = wx.PyEventBinder( wxEVT_SPLITTER_DOUBLECLICKED, 1 )
EVT_SPLITTER_UNSPLIT = wx.PyEventBinder( wxEVT_SPLITTER_UNSPLIT, 1 )
EVT_SPLITTER_DCLICK = EVT_SPLITTER_DOUBLECLICKED

# deprecated wxEVT aliases
wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED   = wxEVT_SPLITTER_SASH_POS_CHANGED
wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING  = wxEVT_SPLITTER_SASH_POS_CHANGING
wxEVT_COMMAND_SPLITTER_DOUBLECLICKED      = wxEVT_SPLITTER_DOUBLECLICKED
wxEVT_COMMAND_SPLITTER_UNSPLIT            = wxEVT_SPLITTER_UNSPLIT

%End


//---------------------------------------------------------------------------

