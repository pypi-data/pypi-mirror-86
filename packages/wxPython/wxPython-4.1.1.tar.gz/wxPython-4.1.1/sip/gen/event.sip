//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------
%ModuleCode

    #if !wxUSE_HOTKEY
    #define wxEVT_HOTKEY 0
    #endif
    
%End

//---------------------------------------------------------------------------

enum wxEventPropagation
{
    wxEVENT_PROPAGATE_NONE,
    wxEVENT_PROPAGATE_MAX
};

enum wxEventCategory
{
    wxEVT_CATEGORY_UI,
    wxEVT_CATEGORY_USER_INPUT,
    wxEVT_CATEGORY_SOCKET,
    wxEVT_CATEGORY_TIMER,
    wxEVT_CATEGORY_THREAD,
    wxEVT_CATEGORY_ALL
};

enum wxKeyCategoryFlags
{
    WXK_CATEGORY_ARROW,
    WXK_CATEGORY_PAGING,
    WXK_CATEGORY_JUMP,
    WXK_CATEGORY_TAB,
    WXK_CATEGORY_CUT,
    WXK_CATEGORY_NAVIGATION
};

enum 
{
    wxJOYSTICK1,
    wxJOYSTICK2
};

enum 
{
    wxJOY_BUTTON_ANY,
    wxJOY_BUTTON1,
    wxJOY_BUTTON2,
    wxJOY_BUTTON3,
    wxJOY_BUTTON4
};

enum wxUpdateUIMode
{
    wxUPDATE_UI_PROCESS_ALL,
    wxUPDATE_UI_PROCESS_SPECIFIED
};

enum wxMouseWheelAxis
{
    wxMOUSE_WHEEL_VERTICAL,
    wxMOUSE_WHEEL_HORIZONTAL
};

enum wxIdleMode
{
    wxIDLE_PROCESS_ALL,
    wxIDLE_PROCESS_SPECIFIED
};

typedef int wxEventType;

wxEventType wxEVT_NULL   /PyName=wxEVT_NULL/;

wxEventType wxEVT_ANY   /PyName=wxEVT_ANY/;

wxEventType wxEVT_BUTTON   /PyName=wxEVT_BUTTON/;

wxEventType wxEVT_CHECKBOX   /PyName=wxEVT_CHECKBOX/;

wxEventType wxEVT_CHOICE   /PyName=wxEVT_CHOICE/;

wxEventType wxEVT_LISTBOX   /PyName=wxEVT_LISTBOX/;

wxEventType wxEVT_LISTBOX_DCLICK   /PyName=wxEVT_LISTBOX_DCLICK/;

wxEventType wxEVT_CHECKLISTBOX   /PyName=wxEVT_CHECKLISTBOX/;

wxEventType wxEVT_MENU   /PyName=wxEVT_MENU/;

wxEventType wxEVT_SLIDER   /PyName=wxEVT_SLIDER/;

wxEventType wxEVT_RADIOBOX   /PyName=wxEVT_RADIOBOX/;

wxEventType wxEVT_RADIOBUTTON   /PyName=wxEVT_RADIOBUTTON/;

wxEventType wxEVT_SCROLLBAR   /PyName=wxEVT_SCROLLBAR/;

wxEventType wxEVT_VLBOX   /PyName=wxEVT_VLBOX/;

wxEventType wxEVT_COMBOBOX   /PyName=wxEVT_COMBOBOX/;

wxEventType wxEVT_TOOL_RCLICKED   /PyName=wxEVT_TOOL_RCLICKED/;

wxEventType wxEVT_TOOL_DROPDOWN   /PyName=wxEVT_TOOL_DROPDOWN/;

wxEventType wxEVT_TOOL_ENTER   /PyName=wxEVT_TOOL_ENTER/;

wxEventType wxEVT_COMBOBOX_DROPDOWN   /PyName=wxEVT_COMBOBOX_DROPDOWN/;

wxEventType wxEVT_COMBOBOX_CLOSEUP   /PyName=wxEVT_COMBOBOX_CLOSEUP/;

wxEventType wxEVT_THREAD   /PyName=wxEVT_THREAD/;

wxEventType wxEVT_LEFT_DOWN   /PyName=wxEVT_LEFT_DOWN/;

wxEventType wxEVT_LEFT_UP   /PyName=wxEVT_LEFT_UP/;

wxEventType wxEVT_MIDDLE_DOWN   /PyName=wxEVT_MIDDLE_DOWN/;

wxEventType wxEVT_MIDDLE_UP   /PyName=wxEVT_MIDDLE_UP/;

wxEventType wxEVT_RIGHT_DOWN   /PyName=wxEVT_RIGHT_DOWN/;

wxEventType wxEVT_RIGHT_UP   /PyName=wxEVT_RIGHT_UP/;

wxEventType wxEVT_MOTION   /PyName=wxEVT_MOTION/;

wxEventType wxEVT_ENTER_WINDOW   /PyName=wxEVT_ENTER_WINDOW/;

wxEventType wxEVT_LEAVE_WINDOW   /PyName=wxEVT_LEAVE_WINDOW/;

wxEventType wxEVT_LEFT_DCLICK   /PyName=wxEVT_LEFT_DCLICK/;

wxEventType wxEVT_MIDDLE_DCLICK   /PyName=wxEVT_MIDDLE_DCLICK/;

wxEventType wxEVT_RIGHT_DCLICK   /PyName=wxEVT_RIGHT_DCLICK/;

wxEventType wxEVT_SET_FOCUS   /PyName=wxEVT_SET_FOCUS/;

wxEventType wxEVT_KILL_FOCUS   /PyName=wxEVT_KILL_FOCUS/;

wxEventType wxEVT_CHILD_FOCUS   /PyName=wxEVT_CHILD_FOCUS/;

wxEventType wxEVT_MOUSEWHEEL   /PyName=wxEVT_MOUSEWHEEL/;

wxEventType wxEVT_MAGNIFY   /PyName=wxEVT_MAGNIFY/;

wxEventType wxEVT_AUX1_DOWN   /PyName=wxEVT_AUX1_DOWN/;

wxEventType wxEVT_AUX1_UP   /PyName=wxEVT_AUX1_UP/;

wxEventType wxEVT_AUX1_DCLICK   /PyName=wxEVT_AUX1_DCLICK/;

wxEventType wxEVT_AUX2_DOWN   /PyName=wxEVT_AUX2_DOWN/;

wxEventType wxEVT_AUX2_UP   /PyName=wxEVT_AUX2_UP/;

wxEventType wxEVT_AUX2_DCLICK   /PyName=wxEVT_AUX2_DCLICK/;

wxEventType wxEVT_CHAR   /PyName=wxEVT_CHAR/;

wxEventType wxEVT_CHAR_HOOK   /PyName=wxEVT_CHAR_HOOK/;

wxEventType wxEVT_NAVIGATION_KEY   /PyName=wxEVT_NAVIGATION_KEY/;

wxEventType wxEVT_KEY_DOWN   /PyName=wxEVT_KEY_DOWN/;

wxEventType wxEVT_KEY_UP   /PyName=wxEVT_KEY_UP/;

wxEventType wxEVT_HOTKEY   /PyName=wxEVT_HOTKEY/;

wxEventType wxEVT_SET_CURSOR   /PyName=wxEVT_SET_CURSOR/;

wxEventType wxEVT_SCROLL_TOP   /PyName=wxEVT_SCROLL_TOP/;

wxEventType wxEVT_SCROLL_BOTTOM   /PyName=wxEVT_SCROLL_BOTTOM/;

wxEventType wxEVT_SCROLL_LINEUP   /PyName=wxEVT_SCROLL_LINEUP/;

wxEventType wxEVT_SCROLL_LINEDOWN   /PyName=wxEVT_SCROLL_LINEDOWN/;

wxEventType wxEVT_SCROLL_PAGEUP   /PyName=wxEVT_SCROLL_PAGEUP/;

wxEventType wxEVT_SCROLL_PAGEDOWN   /PyName=wxEVT_SCROLL_PAGEDOWN/;

wxEventType wxEVT_SCROLL_THUMBTRACK   /PyName=wxEVT_SCROLL_THUMBTRACK/;

wxEventType wxEVT_SCROLL_THUMBRELEASE   /PyName=wxEVT_SCROLL_THUMBRELEASE/;

wxEventType wxEVT_SCROLL_CHANGED   /PyName=wxEVT_SCROLL_CHANGED/;

wxEventType wxEVT_SPIN_UP   /PyName=wxEVT_SPIN_UP/;

wxEventType wxEVT_SPIN_DOWN   /PyName=wxEVT_SPIN_DOWN/;

wxEventType wxEVT_SPIN   /PyName=wxEVT_SPIN/;

wxEventType wxEVT_SCROLLWIN_TOP   /PyName=wxEVT_SCROLLWIN_TOP/;

wxEventType wxEVT_SCROLLWIN_BOTTOM   /PyName=wxEVT_SCROLLWIN_BOTTOM/;

wxEventType wxEVT_SCROLLWIN_LINEUP   /PyName=wxEVT_SCROLLWIN_LINEUP/;

wxEventType wxEVT_SCROLLWIN_LINEDOWN   /PyName=wxEVT_SCROLLWIN_LINEDOWN/;

wxEventType wxEVT_SCROLLWIN_PAGEUP   /PyName=wxEVT_SCROLLWIN_PAGEUP/;

wxEventType wxEVT_SCROLLWIN_PAGEDOWN   /PyName=wxEVT_SCROLLWIN_PAGEDOWN/;

wxEventType wxEVT_SCROLLWIN_THUMBTRACK   /PyName=wxEVT_SCROLLWIN_THUMBTRACK/;

wxEventType wxEVT_SCROLLWIN_THUMBRELEASE   /PyName=wxEVT_SCROLLWIN_THUMBRELEASE/;

wxEventType wxEVT_GESTURE_PAN   /PyName=wxEVT_GESTURE_PAN/;

wxEventType wxEVT_GESTURE_ZOOM   /PyName=wxEVT_GESTURE_ZOOM/;

wxEventType wxEVT_GESTURE_ROTATE   /PyName=wxEVT_GESTURE_ROTATE/;

wxEventType wxEVT_TWO_FINGER_TAP   /PyName=wxEVT_TWO_FINGER_TAP/;

wxEventType wxEVT_LONG_PRESS   /PyName=wxEVT_LONG_PRESS/;

wxEventType wxEVT_PRESS_AND_TAP   /PyName=wxEVT_PRESS_AND_TAP/;

wxEventType wxEVT_SIZE   /PyName=wxEVT_SIZE/;

wxEventType wxEVT_MOVE   /PyName=wxEVT_MOVE/;

wxEventType wxEVT_CLOSE_WINDOW   /PyName=wxEVT_CLOSE_WINDOW/;

wxEventType wxEVT_END_SESSION   /PyName=wxEVT_END_SESSION/;

wxEventType wxEVT_QUERY_END_SESSION   /PyName=wxEVT_QUERY_END_SESSION/;

wxEventType wxEVT_ACTIVATE_APP   /PyName=wxEVT_ACTIVATE_APP/;

wxEventType wxEVT_ACTIVATE   /PyName=wxEVT_ACTIVATE/;

wxEventType wxEVT_CREATE   /PyName=wxEVT_CREATE/;

wxEventType wxEVT_DESTROY   /PyName=wxEVT_DESTROY/;

wxEventType wxEVT_SHOW   /PyName=wxEVT_SHOW/;

wxEventType wxEVT_ICONIZE   /PyName=wxEVT_ICONIZE/;

wxEventType wxEVT_MAXIMIZE   /PyName=wxEVT_MAXIMIZE/;

wxEventType wxEVT_MOUSE_CAPTURE_CHANGED   /PyName=wxEVT_MOUSE_CAPTURE_CHANGED/;

wxEventType wxEVT_MOUSE_CAPTURE_LOST   /PyName=wxEVT_MOUSE_CAPTURE_LOST/;

wxEventType wxEVT_PAINT   /PyName=wxEVT_PAINT/;

wxEventType wxEVT_ERASE_BACKGROUND   /PyName=wxEVT_ERASE_BACKGROUND/;

wxEventType wxEVT_NC_PAINT   /PyName=wxEVT_NC_PAINT/;

wxEventType wxEVT_MENU_OPEN   /PyName=wxEVT_MENU_OPEN/;

wxEventType wxEVT_MENU_CLOSE   /PyName=wxEVT_MENU_CLOSE/;

wxEventType wxEVT_MENU_HIGHLIGHT   /PyName=wxEVT_MENU_HIGHLIGHT/;

wxEventType wxEVT_CONTEXT_MENU   /PyName=wxEVT_CONTEXT_MENU/;

wxEventType wxEVT_SYS_COLOUR_CHANGED   /PyName=wxEVT_SYS_COLOUR_CHANGED/;

wxEventType wxEVT_DISPLAY_CHANGED   /PyName=wxEVT_DISPLAY_CHANGED/;

wxEventType wxEVT_DPI_CHANGED   /PyName=wxEVT_DPI_CHANGED/;

wxEventType wxEVT_QUERY_NEW_PALETTE   /PyName=wxEVT_QUERY_NEW_PALETTE/;

wxEventType wxEVT_PALETTE_CHANGED   /PyName=wxEVT_PALETTE_CHANGED/;

wxEventType wxEVT_JOY_BUTTON_DOWN   /PyName=wxEVT_JOY_BUTTON_DOWN/;

wxEventType wxEVT_JOY_BUTTON_UP   /PyName=wxEVT_JOY_BUTTON_UP/;

wxEventType wxEVT_JOY_MOVE   /PyName=wxEVT_JOY_MOVE/;

wxEventType wxEVT_JOY_ZMOVE   /PyName=wxEVT_JOY_ZMOVE/;

wxEventType wxEVT_DROP_FILES   /PyName=wxEVT_DROP_FILES/;

wxEventType wxEVT_INIT_DIALOG   /PyName=wxEVT_INIT_DIALOG/;

wxEventType wxEVT_IDLE   /PyName=wxEVT_IDLE/;

wxEventType wxEVT_UPDATE_UI   /PyName=wxEVT_UPDATE_UI/;

wxEventType wxEVT_SIZING   /PyName=wxEVT_SIZING/;

wxEventType wxEVT_MOVING   /PyName=wxEVT_MOVING/;

wxEventType wxEVT_MOVE_START   /PyName=wxEVT_MOVE_START/;

wxEventType wxEVT_MOVE_END   /PyName=wxEVT_MOVE_END/;

wxEventType wxEVT_HIBERNATE   /PyName=wxEVT_HIBERNATE/;

wxEventType wxEVT_TEXT_COPY   /PyName=wxEVT_TEXT_COPY/;

wxEventType wxEVT_TEXT_CUT   /PyName=wxEVT_TEXT_CUT/;

wxEventType wxEVT_TEXT_PASTE   /PyName=wxEVT_TEXT_PASTE/;

wxEventType wxEVT_COMMAND_LEFT_CLICK   /PyName=wxEVT_COMMAND_LEFT_CLICK/;

wxEventType wxEVT_COMMAND_LEFT_DCLICK   /PyName=wxEVT_COMMAND_LEFT_DCLICK/;

wxEventType wxEVT_COMMAND_RIGHT_CLICK   /PyName=wxEVT_COMMAND_RIGHT_CLICK/;

wxEventType wxEVT_COMMAND_RIGHT_DCLICK   /PyName=wxEVT_COMMAND_RIGHT_DCLICK/;

wxEventType wxEVT_COMMAND_SET_FOCUS   /PyName=wxEVT_COMMAND_SET_FOCUS/;

wxEventType wxEVT_COMMAND_KILL_FOCUS   /PyName=wxEVT_COMMAND_KILL_FOCUS/;

wxEventType wxEVT_COMMAND_ENTER   /PyName=wxEVT_COMMAND_ENTER/;

wxEventType wxEVT_HELP   /PyName=wxEVT_HELP/;

wxEventType wxEVT_DETAILED_HELP   /PyName=wxEVT_DETAILED_HELP/;

wxEventType wxEVT_TOOL   /PyName=wxEVT_TOOL/;

wxEventType wxEVT_WINDOW_MODAL_DIALOG_CLOSED   /PyName=wxEVT_WINDOW_MODAL_DIALOG_CLOSED/;

class wxEvtHandler : wxObject, wxTrackable
{
    %Docstring
        EvtHandler()
        
        A class that can handle events from the windowing system.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

    %TypeCode
        
        class wxPyCallback : public wxEvtHandler {
            DECLARE_ABSTRACT_CLASS(wxPyCallback)
        public:
            wxPyCallback(PyObject* func);
            wxPyCallback(const wxPyCallback& other);
            ~wxPyCallback();
        
            void EventThunker(wxEvent& event);
        
            PyObject*   m_func;
        };
        
        IMPLEMENT_ABSTRACT_CLASS(wxPyCallback, wxEvtHandler);
        
        wxPyCallback::wxPyCallback(PyObject* func) {
            m_func = func;
            wxPyBLOCK_THREADS( Py_INCREF(m_func) );
        }
        
        wxPyCallback::wxPyCallback(const wxPyCallback& other) {
            m_func = other.m_func;
            wxPyBLOCK_THREADS( Py_INCREF(m_func) );
        }
        
        wxPyCallback::~wxPyCallback() {
            wxPyBLOCK_THREADS( Py_DECREF(m_func) );
        }
        
        
        // #define wxPy_PRECALLINIT     "_preCallInit"
        // #define wxPy_POSTCALLCLEANUP "_postCallCleanup"
        
        // This function is used for all events destined for Python event handlers.
        void wxPyCallback::EventThunker(wxEvent& event) {
            wxPyCallback*   cb = (wxPyCallback*)event.m_callbackUserData;
            PyObject*       func = cb->m_func;
            PyObject*       result;
            PyObject*       arg;
            PyObject*       tuple;
            bool            checkSkip = false;
        
            wxPyThreadBlocker blocker;
            wxString className = event.GetClassInfo()->GetClassName();
            arg = wxPyConstructObject((void*)&event, className);
        
            if (!arg) {
                PyErr_Print();
            } else {
                // Call the event handler, passing the event object
                tuple = PyTuple_New(1);
                PyTuple_SET_ITEM(tuple, 0, arg);  // steals ref to arg
                result = PyEval_CallObject(func, tuple);
                if ( result ) {
                    Py_DECREF(result);   // result is ignored, but we still need to decref it
                    PyErr_Clear();       // Just in case...
                } else {
                    PyErr_Print();
                }
                Py_DECREF(tuple);
            }
        }
    %End
public:
    wxEvtHandler();

    ~wxEvtHandler();

    void QueueEvent(
        wxEvent * event   /Transfer/
    );
    %Docstring
        QueueEvent(event)
        
        Queue event for a later processing.
    %End

    void AddPendingEvent(
        const wxEvent & event
    );
    %Docstring
        AddPendingEvent(event)
        
        Post an event to be processed later.
    %End

    virtual
    bool ProcessEvent(
        wxEvent & event
    )   /ReleaseGIL/;
    %Docstring
        ProcessEvent(event) -> bool
        
        Processes an event, searching event tables and calling zero or more
        suitable event handler function(s).
    %End

    bool ProcessEventLocally(
        wxEvent & event
    )   /ReleaseGIL/;
    %Docstring
        ProcessEventLocally(event) -> bool
        
        Try to process the event in this handler and all those chained to it.
    %End

    bool SafelyProcessEvent(
        wxEvent & event
    )   /ReleaseGIL/;
    %Docstring
        SafelyProcessEvent(event) -> bool
        
        Processes an event by calling ProcessEvent() and handles any
        exceptions that occur in the process.
    %End

    void ProcessPendingEvents()   /ReleaseGIL/;
    %Docstring
        ProcessPendingEvents()
        
        Processes the pending events previously queued using QueueEvent() or
        AddPendingEvent(); you must call this function only if you are sure
        there are pending events for this handler, otherwise a wxCHECK will
        fail.
    %End

    void DeletePendingEvents();
    %Docstring
        DeletePendingEvents()
        
        Deletes all events queued on this event handler using QueueEvent() or
        AddPendingEvent().
    %End

    void Connect(int id,  int lastId,  wxEventType eventType,  PyObject* func);
    %Docstring
        Connect(id, lastId, eventType, func)
        
        Make an entry in the dynamic event table for an event binding.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxEvtHandler_Connect(sipCpp, id, lastId, eventType, func);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxEvtHandler_Connect(wxEvtHandler* self, int id, int lastId, wxEventType eventType, PyObject* func)
    {
        if (PyCallable_Check(func)) {
            self->Connect(id, lastId, eventType,
                          (wxObjectEventFunction)&wxPyCallback::EventThunker,
                          new wxPyCallback(func));
        }
        else if (func == Py_None) {
            self->Disconnect(id, lastId, eventType,
                             (wxObjectEventFunction)(wxEventFunction)
                             &wxPyCallback::EventThunker);
        }
        else {
            PyErr_SetString(PyExc_TypeError, "Expected callable object or None.");
        }
    }
    %End

    bool Disconnect(int id,  int lastId=-1,  wxEventType eventType=wxEVT_NULL,  PyObject* func=NULL);
    %Docstring
        Disconnect(id, lastId=-1, eventType=wxEVT_NULL, func=None) -> bool
        
        Remove an event binding by removing its entry in the dynamic event
        table.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxEvtHandler_Disconnect(sipCpp, id, lastId, eventType, func);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxEvtHandler_Disconnect(wxEvtHandler* self, int id, int lastId, wxEventType eventType, PyObject* func)
    {
        if (func && func != Py_None) {
            // Find the current matching binder that has this function
            // pointer and disconnect that one.  Unfortunately since we
            // wrapped the PyObject function pointer in another object we
            // have to do the searching ourselves...
            size_t cookie;
            wxDynamicEventTableEntry *entry = self->GetFirstDynamicEntry(cookie);
            while (entry)
            {
                if ((entry->m_id == id) &&
                    ((entry->m_lastId == lastId) || (lastId == wxID_ANY)) &&
                    ((entry->m_eventType == eventType) || (eventType == wxEVT_NULL)) &&
                    entry->m_fn->IsMatching(wxObjectEventFunctor((wxObjectEventFunction)&wxPyCallback::EventThunker, NULL)) &&
                    (entry->m_callbackUserData != NULL))
                {
                    wxPyThreadBlocker block;
                    wxPyCallback *cb = (wxPyCallback*)entry->m_callbackUserData;
                    // NOTE: Just comparing PyObject pointers is not enough, as bound
                    // methods can result in different PyObjects each time obj.Method
                    // is evaluated. (!!!)
                    if (PyObject_RichCompareBool(cb->m_func, func, Py_EQ) == 1) {
                        delete cb;
                        entry->m_callbackUserData = NULL;
                        // Now Disconnect should work
                        return self->Disconnect(id, lastId, eventType,
                                                (wxObjectEventFunction)&wxPyCallback::EventThunker);
                    }
                }
                entry = self->GetNextDynamicEntry(cookie);
            }
            return false;
        }
        else {
            return self->Disconnect(id, lastId, eventType,
                                    (wxObjectEventFunction)&wxPyCallback::EventThunker);
        }
    }
    %End

    bool GetEvtHandlerEnabled() const;
    %Docstring
        GetEvtHandlerEnabled() -> bool
        
        Returns true if the event handler is enabled, false otherwise.
    %End

    wxEvtHandler * GetNextHandler() const;
    %Docstring
        GetNextHandler() -> EvtHandler
        
        Returns the pointer to the next handler in the chain.
    %End

    wxEvtHandler * GetPreviousHandler() const;
    %Docstring
        GetPreviousHandler() -> EvtHandler
        
        Returns the pointer to the previous handler in the chain.
    %End

    void SetEvtHandlerEnabled(
        bool enabled
    );
    %Docstring
        SetEvtHandlerEnabled(enabled)
        
        Enables or disables the event handler.
    %End

    void SetNextHandler(
        wxEvtHandler * handler
    );
    %Docstring
        SetNextHandler(handler)
        
        Sets the pointer to the next handler.
    %End

    void SetPreviousHandler(
        wxEvtHandler * handler
    );
    %Docstring
        SetPreviousHandler(handler)
        
        Sets the pointer to the previous handler.
    %End

    void Unlink();
    %Docstring
        Unlink()
        
        Unlinks this event handler from the chain it's part of (if any); then
        links the "previous" event handler to the "next" one (so that the
        chain won't be interrupted).
    %End

    bool IsUnlinked() const;
    %Docstring
        IsUnlinked() -> bool
        
        Returns true if the next and the previous handler pointers of this
        event handler instance are NULL.
    %End

    static
    void AddFilter(
        wxEventFilter * filter
    );
    %Docstring
        AddFilter(filter)
        
        Add an event filter whose FilterEvent() method will be called for each
        and every event processed by wxWidgets.
    %End

    static
    void RemoveFilter(
        wxEventFilter * filter
    );
    %Docstring
        RemoveFilter(filter)
        
        Remove a filter previously installed with AddFilter().
    %End

    private:
        wxEvtHandler(const wxEvtHandler&);


    public:


    public:


    %Property(name=EvtHandlerEnabled, get=GetEvtHandlerEnabled, set=SetEvtHandlerEnabled)
    %Property(name=NextHandler, get=GetNextHandler, set=SetNextHandler)
    %Property(name=PreviousHandler, get=GetPreviousHandler, set=SetPreviousHandler)

protected:
    virtual
    bool TryBefore(
        wxEvent & event
    );
    %Docstring
        TryBefore(event) -> bool
        
        Method called by ProcessEvent() before examining this object event
        tables.
    %End

    virtual
    bool TryAfter(
        wxEvent & event
    );
    %Docstring
        TryAfter(event) -> bool
        
        Method called by ProcessEvent() as last resort.
    %End

};  // end of class wxEvtHandler


%Extract(id=pycode_core)
def _EvtHandler_Bind(self, event, handler, source=None, id=wx.ID_ANY, id2=wx.ID_ANY):
    """
    Bind an event to an event handler.
    
    :param event: One of the ``EVT_*`` event binder objects that
                  specifies the type of event to bind.
    
    :param handler: A callable object to be invoked when the
                    event is delivered to self.  Pass ``None`` to
                    disconnect an event handler.
    
    :param source: Sometimes the event originates from a
                   different window than self, but you still
                   want to catch it in self.  (For example, a
                   button event delivered to a frame.)  By
                   passing the source of the event, the event
                   handling system is able to differentiate
                   between the same event type from different
                   controls.
    
    :param id: Used to spcify the event source by ID instead
               of instance.
    
    :param id2: Used when it is desirable to bind a handler
                to a range of IDs, such as with EVT_MENU_RANGE.
    """
    assert isinstance(event, wx.PyEventBinder)
    assert callable(handler) or handler is None
    assert source is None or hasattr(source, 'GetId')
    if source is not None:
        id  = source.GetId()
    event.Bind(self, id, id2, handler)
EvtHandler.Bind = _EvtHandler_Bind
del _EvtHandler_Bind
%End

%Extract(id=pycode_core)
def _EvtHandler_Unbind(self, event, source=None, id=wx.ID_ANY, id2=wx.ID_ANY, handler=None):
    """
    Disconnects the event handler binding for event from `self`.
    Returns ``True`` if successful.
    """
    if source is not None:
        id  = source.GetId()
    return event.Unbind(self, id, id2, handler)
EvtHandler.Unbind = _EvtHandler_Unbind
del _EvtHandler_Unbind
%End

class wxEventBlocker : wxEvtHandler
{
    %Docstring
        EventBlocker(win, type=-1)
        
        This class is a special event handler which allows discarding any
        event (or a set of event types) directed to a specific window.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxEventBlocker(
        wxWindow * win,
        wxEventType type = -1
    );

    virtual
    ~wxEventBlocker();

    void Block(
        wxEventType eventType
    );
    %Docstring
        Block(eventType)
        
        Adds to the list of event types which should be blocked the given
        eventType.
    %End

};  // end of class wxEventBlocker


%Extract(id=pycode_core)
def _EventBlocker___enter__(self):
    return self
EventBlocker.__enter__ = _EventBlocker___enter__
del _EventBlocker___enter__
%End

%Extract(id=pycode_core)
def _EventBlocker___exit__(self, exc_type, exc_val, exc_tb):
    return False
EventBlocker.__exit__ = _EventBlocker___exit__
del _EventBlocker___exit__
%End

class wxPropagationDisabler
{
    %Docstring
        PropagationDisabler(event)
        
        Helper class to temporarily change an event to not propagate.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxPropagationDisabler(
        wxEvent & event
    );

    ~wxPropagationDisabler();

    private:
        wxPropagationDisabler(const wxPropagationDisabler&);


};  // end of class wxPropagationDisabler


%Extract(id=pycode_core)
def _PropagationDisabler___enter__(self):
    return self
PropagationDisabler.__enter__ = _PropagationDisabler___enter__
del _PropagationDisabler___enter__
%End

%Extract(id=pycode_core)
def _PropagationDisabler___exit__(self, exc_type, exc_val, exc_tb):
    return False
PropagationDisabler.__exit__ = _PropagationDisabler___exit__
del _PropagationDisabler___exit__
%End

class wxPropagateOnce
{
    %Docstring
        PropagateOnce(event)
        
        Helper class to temporarily lower propagation level.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxPropagateOnce(
        wxEvent & event
    );

    ~wxPropagateOnce();

    private:
        wxPropagateOnce(const wxPropagateOnce&);


};  // end of class wxPropagateOnce


%Extract(id=pycode_core)
def _PropagateOnce___enter__(self):
    return self
PropagateOnce.__enter__ = _PropagateOnce___enter__
del _PropagateOnce___enter__
%End

%Extract(id=pycode_core)
def _PropagateOnce___exit__(self, exc_type, exc_val, exc_tb):
    return False
PropagateOnce.__exit__ = _PropagateOnce___exit__
del _PropagateOnce___exit__
%End

class wxEvent : wxObject   /Abstract/
{
    %Docstring
        Event(id=0, eventType=wxEVT_NULL)
        
        An event is a structure holding information about an event passed to a
        callback or member function.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxEvent(
        int id = 0,
        wxEventType eventType = wxEVT_NULL
    );

    virtual
    wxEvent * Clone() const = 0   /Factory/;
    %Docstring
        Clone() -> Event
        
        Returns a copy of the event.
    %End

    wxObject * GetEventObject() const;
    %Docstring
        GetEventObject() -> Object
        
        Returns the object (usually a window) associated with the event, if
        any.
    %End

    wxEventType GetEventType() const;
    %Docstring
        GetEventType() -> EventType
        
        Returns the identifier of the given event type, such as wxEVT_BUTTON.
    %End

    virtual
    wxEventCategory GetEventCategory() const;
    %Docstring
        GetEventCategory() -> EventCategory
        
        Returns a generic category for this event.
    %End

    int GetId() const;
    %Docstring
        GetId() -> int
        
        Returns the identifier associated with this event, such as a button
        command id.
    %End

    bool GetSkipped() const;
    %Docstring
        GetSkipped() -> bool
        
        Returns true if the event handler should be skipped, false otherwise.
    %End

    long GetTimestamp() const;
    %Docstring
        GetTimestamp() -> long
        
        Gets the timestamp for the event.
    %End

    bool IsCommandEvent() const;
    %Docstring
        IsCommandEvent() -> bool
        
        Returns true if the event is or is derived from wxCommandEvent else it
        returns false.
    %End

    void ResumePropagation(
        int propagationLevel
    );
    %Docstring
        ResumePropagation(propagationLevel)
        
        Sets the propagation level to the given value (for example returned
        from an earlier call to wxEvent::StopPropagation).
    %End

    void SetEventObject(
        wxObject * object
    );
    %Docstring
        SetEventObject(object)
        
        Sets the originating object.
    %End

    void SetEventType(
        wxEventType type
    );
    %Docstring
        SetEventType(type)
        
        Sets the event type.
    %End

    void SetId(
        int id
    );
    %Docstring
        SetId(id)
        
        Sets the identifier associated with this event, such as a button
        command id.
    %End

    void SetTimestamp(
        long timeStamp = 0
    );
    %Docstring
        SetTimestamp(timeStamp=0)
        
        Sets the timestamp for the event.
    %End

    bool ShouldPropagate() const;
    %Docstring
        ShouldPropagate() -> bool
        
        Test if this event should be propagated or not, i.e. if the
        propagation level is currently greater than 0.
    %End

    void Skip(
        bool skip = true
    );
    %Docstring
        Skip(skip=True)
        
        This method can be used inside an event handler to control whether
        further event handlers bound to this event will be called after the
        current one returns.
    %End

    int StopPropagation();
    %Docstring
        StopPropagation() -> int
        
        Stop the event from propagating to its parent window.
    %End

    %Property(name=EventObject, get=GetEventObject, set=SetEventObject)
    %Property(name=EventType, get=GetEventType, set=SetEventType)
    %Property(name=Id, get=GetId, set=SetId)
    %Property(name=Skipped, get=GetSkipped)
    %Property(name=Timestamp, get=GetTimestamp, set=SetTimestamp)
    private:
        wxEvent& operator=(const wxEvent&);


};  // end of class wxEvent


class wxCommandEvent : wxEvent
{
    %Docstring
        CommandEvent(commandEventType=wxEVT_NULL, id=0)
        
        This event class contains information about command events, which
        originate from a variety of simple controls.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxCommandEvent(
        wxEventType commandEventType = wxEVT_NULL,
        int id = 0
    );

    wxClientData * GetClientObject() const   /PyName=GetClientData/;
    %Docstring
        GetClientData() -> ClientData
        
        Returns client object pointer for a listbox or choice selection event
        (not valid for a deselection).
    %End

    long GetExtraLong() const;
    %Docstring
        GetExtraLong() -> long
        
        Returns extra information dependent on the event objects type.
    %End

    int GetInt() const;
    %Docstring
        GetInt() -> int
        
        Returns the integer identifier corresponding to a listbox, choice or
        radiobox selection (only if the event was a selection, not a
        deselection), or a boolean value representing the value of a checkbox.
    %End

    int GetSelection() const;
    %Docstring
        GetSelection() -> int
        
        Returns item index for a listbox or choice selection event (not valid
        for a deselection).
    %End

    wxString GetString() const;
    %Docstring
        GetString() -> String
        
        Returns item string for a listbox or choice selection event.
    %End

    bool IsChecked() const;
    %Docstring
        IsChecked() -> bool
        
        This method can be used with checkbox and menu events: for the
        checkboxes, the method returns true for a selection event and false
        for a deselection one.
    %End

    bool IsSelection() const;
    %Docstring
        IsSelection() -> bool
        
        For a listbox or similar event, returns true if it is a selection,
        false if it is a deselection.
    %End

    void SetClientObject(
        wxClientData * data   /Transfer/
    )   /PyName=SetClientData/;
    %Docstring
        SetClientData(data)
        
        Sets the client object for this event.
    %End

    void SetExtraLong(
        long extraLong
    );
    %Docstring
        SetExtraLong(extraLong)
        
        Sets the m_extraLong member.
    %End

    void SetInt(
        int intCommand
    );
    %Docstring
        SetInt(intCommand)
        
        Sets the m_commandInt member.
    %End

    void SetString(
        const wxString & string
    );
    %Docstring
        SetString(string)
        
        Sets the m_commandString member.
    %End

    %Property(name=ExtraLong, get=GetExtraLong, set=SetExtraLong)
    %Property(name=Int, get=GetInt, set=SetInt)
    %Property(name=Selection, get=GetSelection)
    %Property(name=String, get=GetString, set=SetString)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxCommandEvent& operator=(const wxCommandEvent&);


};  // end of class wxCommandEvent


%Extract(id=pycode_core)
def _CommandEvent_GetClientObject(self):
    """
    Alias for :meth:`GetClientData`
    """
    return self.GetClientData()
CommandEvent.GetClientObject = _CommandEvent_GetClientObject
del _CommandEvent_GetClientObject
%End

%Extract(id=pycode_core)
def _CommandEvent_SetClientObject(self, data):
    """
    Alias for :meth:`SetClientData`
    """
    self.SetClientData(data)
CommandEvent.SetClientObject = _CommandEvent_SetClientObject
del _CommandEvent_SetClientObject
%End

%Extract(id=pycode_core)
CommandEvent.ClientData = property(CommandEvent.GetClientData, CommandEvent.SetClientData)
%End

class wxActivateEvent : wxEvent
{
    %Docstring
        ActivateEvent(eventType=wxEVT_NULL, active=True, id=0, ActivationReason=Reason_Unknown)
        
        An activate event is sent when a window or application is being
        activated or deactivated.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    enum Reason
    {
        Reason_Mouse,
        Reason_Unknown    
    };

    wxActivateEvent(
        wxEventType eventType = wxEVT_NULL,
        bool active = true,
        int id = 0,
        Reason ActivationReason = Reason_Unknown
    );

    bool GetActive() const;
    %Docstring
        GetActive() -> bool
        
        Returns true if the application or window is being activated, false
        otherwise.
    %End

    Reason GetActivationReason() const;
    %Docstring
        GetActivationReason() -> Reason
        
        Allows checking if the window was activated by clicking it with the
        mouse or in some other way.
    %End

    %Property(name=Active, get=GetActive)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxActivateEvent& operator=(const wxActivateEvent&);


};  // end of class wxActivateEvent


class wxChildFocusEvent : wxCommandEvent
{
    %Docstring
        ChildFocusEvent(win=None)
        
        A child focus event is sent to a (parent-)window when one of its child
        windows gains focus, so that the window could restore the focus back
        to its corresponding child if it loses it now and regains later.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxChildFocusEvent(
        wxWindow * win = NULL
    );

    wxWindow * GetWindow() const;
    %Docstring
        GetWindow() -> Window
        
        Returns the direct child which receives the focus, or a (grand-)parent
        of the control receiving the focus.
    %End

    %Property(name=Window, get=GetWindow)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxChildFocusEvent& operator=(const wxChildFocusEvent&);


};  // end of class wxChildFocusEvent


class wxClipboardTextEvent : wxCommandEvent
{
    %Docstring
        ClipboardTextEvent(commandType=wxEVT_NULL, id=0)
        
        This class represents the events generated by a control (typically a
        wxTextCtrl but other windows can generate these events as well) when
        its content gets copied or cut to, or pasted from the clipboard.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxClipboardTextEvent(
        wxEventType commandType = wxEVT_NULL,
        int id = 0
    );

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxClipboardTextEvent& operator=(const wxClipboardTextEvent&);


};  // end of class wxClipboardTextEvent


class wxCloseEvent : wxEvent
{
    %Docstring
        CloseEvent(commandEventType=wxEVT_NULL, id=0)
        
        This event class contains information about window and session close
        events.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxCloseEvent(
        wxEventType commandEventType = wxEVT_NULL,
        int id = 0
    );

    bool CanVeto() const;
    %Docstring
        CanVeto() -> bool
        
        Returns true if you can veto a system shutdown or a window close
        event.
    %End

    bool GetLoggingOff() const;
    %Docstring
        GetLoggingOff() -> bool
        
        Returns true if the user is just logging off or false if the system is
        shutting down.
    %End

    void SetCanVeto(
        bool canVeto
    );
    %Docstring
        SetCanVeto(canVeto)
        
        Sets the 'can veto' flag.
    %End

    void SetLoggingOff(
        bool loggingOff
    );
    %Docstring
        SetLoggingOff(loggingOff)
        
        Sets the 'logging off' flag.
    %End

    void Veto(
        bool veto = true
    );
    %Docstring
        Veto(veto=True)
        
        Call this from your event handler to veto a system shutdown or to
        signal to the calling application that a window close did not happen.
    %End

    bool GetVeto() const;
    %Docstring
        GetVeto() -> bool
        
        Returns whether the Veto flag was set.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxCloseEvent& operator=(const wxCloseEvent&);


    public:


    %Property(name=LoggingOff, get=GetLoggingOff, set=SetLoggingOff)
};  // end of class wxCloseEvent


class wxContextMenuEvent : wxCommandEvent
{
    %Docstring
        ContextMenuEvent(type=wxEVT_NULL, id=0, pos=DefaultPosition)
        
        This class is used for context menu events, sent to give the
        application a chance to show a context (popup) menu for a wxWindow.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxContextMenuEvent(
        wxEventType type = wxEVT_NULL,
        int id = 0,
        const wxPoint & pos = wxDefaultPosition
    );

    const wxPoint & GetPosition() const;
    %Docstring
        GetPosition() -> Point
        
        Returns the position in screen coordinates at which the menu should be
        shown.
    %End

    void SetPosition(
        const wxPoint & point
    );
    %Docstring
        SetPosition(point)
        
        Sets the position at which the menu should be shown.
    %End

    %Property(name=Position, get=GetPosition, set=SetPosition)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxContextMenuEvent& operator=(const wxContextMenuEvent&);


};  // end of class wxContextMenuEvent


class wxDisplayChangedEvent : wxEvent
{
    %Docstring
        DisplayChangedEvent()
        
        A display changed event is sent to top-level windows when the display
        resolution has changed.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxDisplayChangedEvent();

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxDisplayChangedEvent& operator=(const wxDisplayChangedEvent&);


};  // end of class wxDisplayChangedEvent


class wxDPIChangedEvent : wxEvent
{
    %Docstring
        Event sent when the display scale factor or pixel density (measured in
        dots-per-inch, or DPI) of the monitor a window is on changes.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxSize GetOldDPI() const;
    %Docstring
        GetOldDPI() -> Size
        
        Returns the old DPI.
    %End

    wxSize GetNewDPI() const;
    %Docstring
        GetNewDPI() -> Size
        
        Returns the new DPI.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxDPIChangedEvent& operator=(const wxDPIChangedEvent&);


    public:


    %Property(name=NewDPI, get=GetNewDPI)
    %Property(name=OldDPI, get=GetOldDPI)
};  // end of class wxDPIChangedEvent


class wxDropFilesEvent : wxEvent
{
    %Docstring
        DropFilesEvent(id=0, files=None)
        
        This class is used for drop files events, that is, when files have
        been dropped onto the window.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

    %TypeHeaderCode
        #include "arrayholder.h"
    %End
public:
    wxDropFilesEvent(
        wxEventType id = 0,
        int noFiles   /ArraySize/ = 0,
        wxString * files   /Array, Transfer/ = NULL
    );
    %MethodCode
        if (files) {
            wxStringCArrayHolder* holder = new wxStringCArrayHolder;
            holder->m_array = files;
            // Make a PyObject for the holder, and transfer its ownership to self.
            PyObject* pyHolder = sipConvertFromNewType(
                    (void*)holder, sipType_wxStringCArrayHolder, (PyObject*)sipSelf);
            Py_DECREF(pyHolder);
            sipCpp = new sipwxDropFilesEvent(id,(int)noFiles, holder->m_array);
        }
        else
            sipCpp = new sipwxDropFilesEvent(id);
    %End

    PyObject* GetFiles() const;
    %Docstring
        GetFiles() -> PyObject
        
        Returns an array of filenames.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDropFilesEvent_GetFiles(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxDropFilesEvent_GetFiles(const wxDropFilesEvent* self)
    {
        int         count   = self->GetNumberOfFiles();
        wxString*   files   = self->GetFiles();
        wxPyThreadBlocker   blocker;
        PyObject*   list    = PyList_New(count);
        if (!list) {
            PyErr_SetString(PyExc_MemoryError, "Can't allocate list of files!");
            return NULL;
        }
        for (int i=0; i<count; i++) {
            PyObject* s = wx2PyString(files[i]);
            PyList_SET_ITEM(list, i, s);
        }
        return list;
    }
    %End

    int GetNumberOfFiles() const;
    %Docstring
        GetNumberOfFiles() -> int
        
        Returns the number of files dropped.
    %End

    wxPoint GetPosition() const;
    %Docstring
        GetPosition() -> Point
        
        Returns the position at which the files were dropped.
    %End

    %Property(name=Files, get=GetFiles)
    %Property(name=NumberOfFiles, get=GetNumberOfFiles)
    %Property(name=Position, get=GetPosition)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxDropFilesEvent& operator=(const wxDropFilesEvent&);


};  // end of class wxDropFilesEvent


class wxEraseEvent : wxEvent
{
    %Docstring
        EraseEvent(id=0, dc=None)
        
        An erase event is sent when a window's background needs to be
        repainted.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxEraseEvent(
        int id = 0,
        wxDC * dc = NULL
    );

    wxDC * GetDC() const;
    %Docstring
        GetDC() -> DC
        
        Returns the device context associated with the erase event to draw on.
    %End

    %Property(name=DC, get=GetDC)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxEraseEvent& operator=(const wxEraseEvent&);


};  // end of class wxEraseEvent


class wxFocusEvent : wxEvent
{
    %Docstring
        FocusEvent(eventType=wxEVT_NULL, id=0)
        
        A focus event is sent when a window's focus changes.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxFocusEvent(
        wxEventType eventType = wxEVT_NULL,
        int id = 0
    );

    wxWindow * GetWindow() const;
    %Docstring
        GetWindow() -> Window
        
        Returns the window associated with this event, that is the window
        which had the focus before for the wxEVT_SET_FOCUS event and the
        window which is going to receive focus for the wxEVT_KILL_FOCUS one.
    %End

    void SetWindow(
        wxWindow * win
    );
    %Docstring
        SetWindow(win)
    %End

    %Property(name=Window, get=GetWindow, set=SetWindow)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxFocusEvent& operator=(const wxFocusEvent&);


};  // end of class wxFocusEvent


class wxHelpEvent : wxCommandEvent
{
    %Docstring
        HelpEvent(type=wxEVT_NULL, winid=0, pt=DefaultPosition, origin=Origin_Unknown)
        
        A help event is sent when the user has requested context-sensitive
        help.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    enum Origin
    {
        Origin_Unknown,
        Origin_Keyboard,
        Origin_HelpButton    
    };

    wxHelpEvent(
        wxEventType type = wxEVT_NULL,
        wxWindowID winid = 0,
        const wxPoint & pt = wxDefaultPosition,
        wxHelpEvent::Origin origin = Origin_Unknown
    );

    wxHelpEvent::Origin GetOrigin() const;
    %Docstring
        GetOrigin() -> HelpEvent.Origin
        
        Returns the origin of the help event which is one of the
        wxHelpEvent::Origin values.
    %End

    const wxPoint & GetPosition() const;
    %Docstring
        GetPosition() -> Point
        
        Returns the left-click position of the mouse, in screen coordinates.
    %End

    void SetOrigin(
        wxHelpEvent::Origin origin
    );
    %Docstring
        SetOrigin(origin)
        
        Set the help event origin, only used internally by wxWidgets normally.
    %End

    void SetPosition(
        const wxPoint & pt
    );
    %Docstring
        SetPosition(pt)
        
        Sets the left-click position of the mouse, in screen coordinates.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxHelpEvent& operator=(const wxHelpEvent&);


    public:


    %Property(name=Position, get=GetPosition, set=SetPosition)
};  // end of class wxHelpEvent


class wxIconizeEvent : wxEvent
{
    %Docstring
        IconizeEvent(id=0, iconized=True)
        
        An event being sent when the frame is iconized (minimized) or
        restored.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxIconizeEvent(
        int id = 0,
        bool iconized = true
    );

    bool IsIconized() const;
    %Docstring
        IsIconized() -> bool
        
        Returns true if the frame has been iconized, false if it has been
        restored.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxIconizeEvent& operator=(const wxIconizeEvent&);


};  // end of class wxIconizeEvent


class wxIdleEvent : wxEvent
{
    %Docstring
        IdleEvent()
        
        This class is used for idle events, which are generated when the
        system becomes idle.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxIdleEvent();

    bool MoreRequested() const;
    %Docstring
        MoreRequested() -> bool
        
        Returns true if the OnIdle function processing this event requested
        more processing time.
    %End

    void RequestMore(
        bool needMore = true
    );
    %Docstring
        RequestMore(needMore=True)
        
        Tells wxWidgets that more processing is required.
    %End

    static
    wxIdleMode GetMode();
    %Docstring
        GetMode() -> IdleMode
        
        Static function returning a value specifying how wxWidgets will send
        idle events: to all windows, or only to those which specify that they
        will process the events.
    %End

    static
    void SetMode(
        wxIdleMode mode
    );
    %Docstring
        SetMode(mode)
        
        Static function for specifying how wxWidgets will send idle events: to
        all windows, or only to those which specify that they will process the
        events.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxIdleEvent& operator=(const wxIdleEvent&);


};  // end of class wxIdleEvent


class wxInitDialogEvent : wxEvent
{
    %Docstring
        InitDialogEvent(id=0)
        
        A wxInitDialogEvent is sent as a dialog or panel is being initialised.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxInitDialogEvent(
        int id = 0
    );

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxInitDialogEvent& operator=(const wxInitDialogEvent&);


};  // end of class wxInitDialogEvent


class wxJoystickEvent : wxEvent
{
    %Docstring
        JoystickEvent(eventType=wxEVT_NULL, state=0, joystick=JOYSTICK1, change=0)
        
        This event class contains information about joystick events,
        particularly events received by windows.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxJoystickEvent(
        wxEventType eventType = wxEVT_NULL,
        int state = 0,
        int joystick = wxJOYSTICK1,
        int change = 0
    );

    bool ButtonDown(
        int button = wxJOY_BUTTON_ANY
    ) const;
    %Docstring
        ButtonDown(button=JOY_BUTTON_ANY) -> bool
        
        Returns true if the event was a down event from the specified button
        (or any button).
    %End

    bool ButtonIsDown(
        int button = wxJOY_BUTTON_ANY
    ) const;
    %Docstring
        ButtonIsDown(button=JOY_BUTTON_ANY) -> bool
        
        Returns true if the specified button (or any button) was in a down
        state.
    %End

    bool ButtonUp(
        int button = wxJOY_BUTTON_ANY
    ) const;
    %Docstring
        ButtonUp(button=JOY_BUTTON_ANY) -> bool
        
        Returns true if the event was an up event from the specified button
        (or any button).
    %End

    int GetButtonChange() const;
    %Docstring
        GetButtonChange() -> int
        
        Returns the identifier of the button changing state.
    %End

    int GetButtonOrdinal() const;
    %Docstring
        GetButtonOrdinal() -> int
        
        Returns the 0-indexed ordinal of the button changing state.
    %End

    int GetButtonState() const;
    %Docstring
        GetButtonState() -> int
        
        Returns the down state of the buttons.
    %End

    int GetJoystick() const;
    %Docstring
        GetJoystick() -> int
        
        Returns the identifier of the joystick generating the event - one of
        wxJOYSTICK1 and wxJOYSTICK2.
    %End

    wxPoint GetPosition() const;
    %Docstring
        GetPosition() -> Point
        
        Returns the x, y position of the joystick event.
    %End

    int GetZPosition() const;
    %Docstring
        GetZPosition() -> int
        
        Returns the z position of the joystick event.
    %End

    bool IsButton() const;
    %Docstring
        IsButton() -> bool
        
        Returns true if this was a button up or down event (not 'is any button
        down?').
    %End

    bool IsMove() const;
    %Docstring
        IsMove() -> bool
        
        Returns true if this was an x, y move event.
    %End

    bool IsZMove() const;
    %Docstring
        IsZMove() -> bool
        
        Returns true if this was a z move event.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxJoystickEvent& operator=(const wxJoystickEvent&);


    public:


    %Property(name=ButtonChange, get=GetButtonChange)
    %Property(name=ButtonOrdinal, get=GetButtonOrdinal)
    %Property(name=ButtonState, get=GetButtonState)
    %Property(name=Joystick, get=GetJoystick)
    %Property(name=Position, get=GetPosition)
    %Property(name=ZPosition, get=GetZPosition)
};  // end of class wxJoystickEvent


class wxKeyEvent : wxEvent, wxKeyboardState
{
    %Docstring
        KeyEvent(keyEventType=wxEVT_NULL)
        
        This event class contains information about key press and release
        events.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxKeyEvent(
        wxEventType keyEventType = wxEVT_NULL
    );

    wxPoint GetPosition() const;
    %Docstring
        GetPosition() -> Point
        
        Obtains the position (in client coordinates) at which the key was
        pressed.
    %End

    int GetKeyCode() const;
    %Docstring
        GetKeyCode() -> int
        
        Returns the key code of the key that generated this event.
    %End

    bool IsKeyInCategory(
        int category
    ) const;
    %Docstring
        IsKeyInCategory(category) -> bool
        
        Returns true if the key is in the given key category.
    %End

    wxUint32 GetRawKeyCode() const;
    %Docstring
        GetRawKeyCode() -> Uint32
        
        Returns the raw key code for this event.
    %End

    wxUint32 GetRawKeyFlags() const;
    %Docstring
        GetRawKeyFlags() -> Uint32
        
        Returns the low level key flags for this event.
    %End

    int GetUnicodeKey() const;
    %Docstring
        GetUnicodeKey() -> int
        
        Returns the Unicode character corresponding to this key event.
    %End

    wxCoord GetX() const;
    %Docstring
        GetX() -> Coord
        
        Returns the X position (in client coordinates) of the event.
    %End

    wxCoord GetY() const;
    %Docstring
        GetY() -> Coord
        
        Returns the Y position (in client coordinates) of the event.
    %End

    void DoAllowNextEvent();
    %Docstring
        DoAllowNextEvent()
        
        Allow normal key events generation.
    %End

    bool IsNextEventAllowed() const;
    %Docstring
        IsNextEventAllowed() -> bool
        
        Returns true if DoAllowNextEvent() had been called, false by default.
    %End

    void SetKeyCode(int keyCode);
    %Docstring
        SetKeyCode(keyCode)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxKeyEvent_SetKeyCode(sipCpp, keyCode);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxKeyEvent_SetKeyCode(wxKeyEvent* self, int keyCode)
    {
        self->m_keyCode = keyCode;
    }
    %End

    void SetRawKeyCode(int rawKeyCode);
    %Docstring
        SetRawKeyCode(rawKeyCode)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxKeyEvent_SetRawKeyCode(sipCpp, rawKeyCode);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxKeyEvent_SetRawKeyCode(wxKeyEvent* self, int rawKeyCode)
    {
        self->m_rawCode = rawKeyCode;
    }
    %End

    void SetRawKeyFlags(int rawFlags);
    %Docstring
        SetRawKeyFlags(rawFlags)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxKeyEvent_SetRawKeyFlags(sipCpp, rawFlags);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxKeyEvent_SetRawKeyFlags(wxKeyEvent* self, int rawFlags)
    {
        self->m_rawFlags = rawFlags;
    }
    %End

    void SetUnicodeKey(int uniChar);
    %Docstring
        SetUnicodeKey(uniChar)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxKeyEvent_SetUnicodeKey(sipCpp, uniChar);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxKeyEvent_SetUnicodeKey(wxKeyEvent* self, int uniChar)
    {
        self->m_uniChar = uniChar;
    }
    %End

    %Property(name=X, get=GetX)
    %Property(name=Y, get=GetY)
    %Property(name=KeyCode, get=GetKeyCode, set=SetKeyCode)
    %Property(name=Position, get=GetPosition)
    %Property(name=RawKeyCode, get=GetRawKeyCode, set=SetRawKeyCode)
    %Property(name=RawKeyFlags, get=GetRawKeyFlags, set=SetRawKeyFlags)
    %Property(name=UnicodeKey, get=GetUnicodeKey, set=SetUnicodeKey)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxKeyEvent& operator=(const wxKeyEvent&);


};  // end of class wxKeyEvent


class wxMaximizeEvent : wxEvent
{
    %Docstring
        MaximizeEvent(id=0)
        
        An event being sent when a top level window is maximized.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxMaximizeEvent(
        int id = 0
    );

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxMaximizeEvent& operator=(const wxMaximizeEvent&);


};  // end of class wxMaximizeEvent


class wxMenuEvent : wxEvent
{
    %Docstring
        MenuEvent(type=wxEVT_NULL, id=0, menu=None)
        
        This class is used for a variety of menu-related events.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxMenuEvent(
        wxEventType type = wxEVT_NULL,
        int id = 0,
        wxMenu * menu = NULL
    );

    wxMenu * GetMenu() const;
    %Docstring
        GetMenu() -> Menu
        
        Returns the menu which is being opened or closed, or the menu
        containing the highlighted item.
    %End

    int GetMenuId() const;
    %Docstring
        GetMenuId() -> int
        
        Returns the menu identifier associated with the event.
    %End

    bool IsPopup() const;
    %Docstring
        IsPopup() -> bool
        
        Returns true if the menu which is being opened or closed is a popup
        menu, false if it is a normal one.
    %End

    %Property(name=Menu, get=GetMenu)
    %Property(name=MenuId, get=GetMenuId)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxMenuEvent& operator=(const wxMenuEvent&);


};  // end of class wxMenuEvent


class wxMouseCaptureChangedEvent : wxEvent
{
    %Docstring
        MouseCaptureChangedEvent(windowId=0, gainedCapture=None)
        
        An mouse capture changed event is sent to a window that loses its
        mouse capture.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxMouseCaptureChangedEvent(
        wxWindowID windowId = 0,
        wxWindow * gainedCapture = NULL
    );

    wxWindow * GetCapturedWindow() const;
    %Docstring
        GetCapturedWindow() -> Window
        
        Returns the window that gained the capture, or NULL if it was a non-
        wxWidgets window.
    %End

    %Property(name=CapturedWindow, get=GetCapturedWindow)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxMouseCaptureChangedEvent& operator=(const wxMouseCaptureChangedEvent&);


};  // end of class wxMouseCaptureChangedEvent


class wxMouseCaptureLostEvent : wxEvent
{
    %Docstring
        MouseCaptureLostEvent(windowId=0)
        
        A mouse capture lost event is sent to a window that had obtained mouse
        capture, which was subsequently lost due to an "external" event (for
        example, when a dialog box is shown or if another application captures
        the mouse).
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxMouseCaptureLostEvent(
        wxWindowID windowId = 0
    );

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxMouseCaptureLostEvent& operator=(const wxMouseCaptureLostEvent&);


};  // end of class wxMouseCaptureLostEvent


class wxMouseEvent : wxEvent, wxMouseState
{
    %Docstring
        MouseEvent(mouseEventType=wxEVT_NULL)
        
        This event class contains information about the events generated by
        the mouse: they include mouse buttons press and release events and
        mouse move events.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxMouseEvent(
        wxEventType mouseEventType = wxEVT_NULL
    );

    bool Aux1DClick() const;
    %Docstring
        Aux1DClick() -> bool
        
        Returns true if the event was a first extra button double click.
    %End

    bool Aux1Down() const;
    %Docstring
        Aux1Down() -> bool
        
        Returns true if the first extra button mouse button changed to down.
    %End

    bool Aux1Up() const;
    %Docstring
        Aux1Up() -> bool
        
        Returns true if the first extra button mouse button changed to up.
    %End

    bool Aux2DClick() const;
    %Docstring
        Aux2DClick() -> bool
        
        Returns true if the event was a second extra button double click.
    %End

    bool Aux2Down() const;
    %Docstring
        Aux2Down() -> bool
        
        Returns true if the second extra button mouse button changed to down.
    %End

    bool Aux2Up() const;
    %Docstring
        Aux2Up() -> bool
        
        Returns true if the second extra button mouse button changed to up.
    %End

    bool Button(
        wxMouseButton but
    ) const;
    %Docstring
        Button(but) -> bool
        
        Returns true if the event was generated by the specified button.
    %End

    bool ButtonDClick(
        wxMouseButton but = wxMOUSE_BTN_ANY
    ) const;
    %Docstring
        ButtonDClick(but=MOUSE_BTN_ANY) -> bool
        
        If the argument is omitted, this returns true if the event was a mouse
        double click event.
    %End

    bool ButtonDown(
        wxMouseButton but = wxMOUSE_BTN_ANY
    ) const;
    %Docstring
        ButtonDown(but=MOUSE_BTN_ANY) -> bool
        
        If the argument is omitted, this returns true if the event was a mouse
        button down event.
    %End

    bool ButtonUp(
        wxMouseButton but = wxMOUSE_BTN_ANY
    ) const;
    %Docstring
        ButtonUp(but=MOUSE_BTN_ANY) -> bool
        
        If the argument is omitted, this returns true if the event was a mouse
        button up event.
    %End

    bool Dragging() const;
    %Docstring
        Dragging() -> bool
        
        Returns true if this was a dragging event (motion while a button is
        depressed).
    %End

    bool Entering() const;
    %Docstring
        Entering() -> bool
        
        Returns true if the mouse was entering the window.
    %End

    int GetButton() const;
    %Docstring
        GetButton() -> int
        
        Returns the mouse button which generated this event or
        wxMOUSE_BTN_NONE if no button is involved (for mouse move, enter or
        leave event, for example).
    %End

    int GetClickCount() const;
    %Docstring
        GetClickCount() -> int
        
        Returns the number of mouse clicks for this event: 1 for a simple
        click, 2 for a double-click, 3 for a triple-click and so on.
    %End

    int GetLinesPerAction() const;
    %Docstring
        GetLinesPerAction() -> int
        
        Returns the configured number of lines (or whatever) to be scrolled
        per wheel action.
    %End

    int GetColumnsPerAction() const;
    %Docstring
        GetColumnsPerAction() -> int
        
        Returns the configured number of columns (or whatever) to be scrolled
        per wheel action.
    %End

    wxPoint GetLogicalPosition(
        const wxDC & dc
    ) const;
    %Docstring
        GetLogicalPosition(dc) -> Point
        
        Returns the logical mouse position in pixels (i.e. translated
        according to the translation set for the DC, which usually indicates
        that the window has been scrolled).
    %End

    float GetMagnification() const;
    %Docstring
        GetMagnification() -> float
        
        For magnify (pinch to zoom) events: returns the change in
        magnification.
    %End

    int GetWheelDelta() const;
    %Docstring
        GetWheelDelta() -> int
        
        Get wheel delta, normally 120.
    %End

    bool IsWheelInverted() const;
    %Docstring
        IsWheelInverted() -> bool
        
        On Mac, has the user selected "Natural" scrolling in their System
        Preferences? Currently false on all other OS's.
    %End

    int GetWheelRotation() const;
    %Docstring
        GetWheelRotation() -> int
        
        Get wheel rotation, positive or negative indicates direction of
        rotation.
    %End

    wxMouseWheelAxis GetWheelAxis() const;
    %Docstring
        GetWheelAxis() -> MouseWheelAxis
        
        Gets the axis the wheel operation concerns.
    %End

    bool IsButton() const;
    %Docstring
        IsButton() -> bool
        
        Returns true if the event was a mouse button event (not necessarily a
        button down event - that may be tested using ButtonDown()).
    %End

    bool IsPageScroll() const;
    %Docstring
        IsPageScroll() -> bool
        
        Returns true if the system has been setup to do page scrolling with
        the mouse wheel instead of line scrolling.
    %End

    bool Leaving() const;
    %Docstring
        Leaving() -> bool
        
        Returns true if the mouse was leaving the window.
    %End

    bool LeftDClick() const;
    %Docstring
        LeftDClick() -> bool
        
        Returns true if the event was a left double click.
    %End

    bool LeftDown() const;
    %Docstring
        LeftDown() -> bool
        
        Returns true if the left mouse button changed to down.
    %End

    bool LeftUp() const;
    %Docstring
        LeftUp() -> bool
        
        Returns true if the left mouse button changed to up.
    %End

    bool Magnify() const;
    %Docstring
        Magnify() -> bool
        
        Returns true if the event is a magnify (i.e. pinch to zoom) event.
    %End

    bool MetaDown() const;
    %Docstring
        MetaDown() -> bool
        
        Returns true if the Meta key was down at the time of the event.
    %End

    bool MiddleDClick() const;
    %Docstring
        MiddleDClick() -> bool
        
        Returns true if the event was a middle double click.
    %End

    bool MiddleDown() const;
    %Docstring
        MiddleDown() -> bool
        
        Returns true if the middle mouse button changed to down.
    %End

    bool MiddleUp() const;
    %Docstring
        MiddleUp() -> bool
        
        Returns true if the middle mouse button changed to up.
    %End

    bool Moving() const;
    %Docstring
        Moving() -> bool
        
        Returns true if this was a motion event and no mouse buttons were
        pressed.
    %End

    bool RightDClick() const;
    %Docstring
        RightDClick() -> bool
        
        Returns true if the event was a right double click.
    %End

    bool RightDown() const;
    %Docstring
        RightDown() -> bool
        
        Returns true if the right mouse button changed to down.
    %End

    bool RightUp() const;
    %Docstring
        RightUp() -> bool
        
        Returns true if the right mouse button changed to up.
    %End

    void SetWheelAxis(wxMouseWheelAxis wheelAxis);
    %Docstring
        SetWheelAxis(wheelAxis)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxMouseEvent_SetWheelAxis(sipCpp, wheelAxis);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxMouseEvent_SetWheelAxis(wxMouseEvent* self, wxMouseWheelAxis wheelAxis)
    {
        self->m_wheelAxis = wheelAxis;
    }
    %End

    void SetWheelRotation(int wheelRotation);
    %Docstring
        SetWheelRotation(wheelRotation)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxMouseEvent_SetWheelRotation(sipCpp, wheelRotation);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxMouseEvent_SetWheelRotation(wxMouseEvent* self, int wheelRotation)
    {
        self->m_wheelRotation = wheelRotation;
    }
    %End

    void SetWheelDelta(int wheelDelta);
    %Docstring
        SetWheelDelta(wheelDelta)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxMouseEvent_SetWheelDelta(sipCpp, wheelDelta);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxMouseEvent_SetWheelDelta(wxMouseEvent* self, int wheelDelta)
    {
        self->m_wheelDelta = wheelDelta;
    }
    %End

    void SetLinesPerAction(int linesPerAction);
    %Docstring
        SetLinesPerAction(linesPerAction)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxMouseEvent_SetLinesPerAction(sipCpp, linesPerAction);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxMouseEvent_SetLinesPerAction(wxMouseEvent* self, int linesPerAction)
    {
        self->m_linesPerAction = linesPerAction;
    }
    %End

    void SetColumnsPerAction(int columnsPerAction);
    %Docstring
        SetColumnsPerAction(columnsPerAction)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxMouseEvent_SetColumnsPerAction(sipCpp, columnsPerAction);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxMouseEvent_SetColumnsPerAction(wxMouseEvent* self, int columnsPerAction)
    {
        self->m_columnsPerAction = columnsPerAction;
    }
    %End

    %Property(name=WheelAxis, get=GetWheelAxis, set=SetWheelAxis)
    %Property(name=WheelRotation, get=GetWheelRotation, set=SetWheelRotation)
    %Property(name=WheelDelta, get=GetWheelDelta, set=SetWheelDelta)
    %Property(name=LinesPerAction, get=GetLinesPerAction, set=SetLinesPerAction)
    %Property(name=ColumnsPerAction, get=GetColumnsPerAction, set=SetColumnsPerAction)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxMouseEvent& operator=(const wxMouseEvent&);


};  // end of class wxMouseEvent


class wxMoveEvent : wxEvent
{
    %Docstring
        MoveEvent(pt, id=0)
        
        A move event holds information about window position change.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxMoveEvent(
        const wxPoint & pt,
        int id = 0
    );

    wxPoint GetPosition() const;
    %Docstring
        GetPosition() -> Point
        
        Returns the position of the window generating the move change event.
    %End

    wxRect GetRect() const;
    %Docstring
        GetRect() -> Rect
    %End

    void SetRect(
        const wxRect & rect
    );
    %Docstring
        SetRect(rect)
    %End

    void SetPosition(
        const wxPoint & pos
    );
    %Docstring
        SetPosition(pos)
    %End

    %Property(name=Rect, get=GetRect, set=SetRect)
    %Property(name=Position, get=GetPosition, set=SetPosition)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxMoveEvent& operator=(const wxMoveEvent&);


};  // end of class wxMoveEvent


class wxNavigationKeyEvent : wxEvent
{
    %Docstring
        NavigationKeyEvent()
        NavigationKeyEvent(event)
        
        This event class contains information about navigation events,
        generated by navigation keys such as tab and page down.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    enum wxNavigationKeyEventFlags
    {
        IsBackward,
        IsForward,
        WinChange,
        FromTab    
    };

    wxNavigationKeyEvent();

    wxNavigationKeyEvent(
        const wxNavigationKeyEvent & event
    );

    wxWindow * GetCurrentFocus() const;
    %Docstring
        GetCurrentFocus() -> Window
        
        Returns the child that has the focus, or NULL.
    %End

    bool GetDirection() const;
    %Docstring
        GetDirection() -> bool
        
        Returns true if the navigation was in the forward direction.
    %End

    bool IsFromTab() const;
    %Docstring
        IsFromTab() -> bool
        
        Returns true if the navigation event was from a tab key.
    %End

    bool IsWindowChange() const;
    %Docstring
        IsWindowChange() -> bool
        
        Returns true if the navigation event represents a window change (for
        example, from Ctrl-Page Down in a notebook).
    %End

    void SetCurrentFocus(
        wxWindow * currentFocus
    );
    %Docstring
        SetCurrentFocus(currentFocus)
        
        Sets the current focus window member.
    %End

    void SetDirection(
        bool direction
    );
    %Docstring
        SetDirection(direction)
        
        Sets the direction to forward if direction is true, or backward if
        false.
    %End

    void SetFlags(
        long flags
    );
    %Docstring
        SetFlags(flags)
        
        Sets the flags for this event.
    %End

    void SetFromTab(
        bool fromTab
    );
    %Docstring
        SetFromTab(fromTab)
        
        Marks the navigation event as from a tab key.
    %End

    void SetWindowChange(
        bool windowChange
    );
    %Docstring
        SetWindowChange(windowChange)
        
        Marks the event as a window change event.
    %End

    %Property(name=CurrentFocus, get=GetCurrentFocus, set=SetCurrentFocus)
    %Property(name=Direction, get=GetDirection, set=SetDirection)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxNavigationKeyEvent& operator=(const wxNavigationKeyEvent&);


};  // end of class wxNavigationKeyEvent


class wxNotifyEvent : wxCommandEvent
{
    %Docstring
        NotifyEvent(eventType=wxEVT_NULL, id=0)
        
        This class is not used by the event handlers by itself, but is a base
        class for other event classes (such as wxBookCtrlEvent).
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxNotifyEvent(
        wxEventType eventType = wxEVT_NULL,
        int id = 0
    );

    void Allow();
    %Docstring
        Allow()
        
        This is the opposite of Veto(): it explicitly allows the event to be
        processed.
    %End

    bool IsAllowed() const;
    %Docstring
        IsAllowed() -> bool
        
        Returns true if the change is allowed (Veto() hasn't been called) or
        false otherwise (if it was).
    %End

    void Veto();
    %Docstring
        Veto()
        
        Prevents the change announced by this event from happening.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxNotifyEvent& operator=(const wxNotifyEvent&);


};  // end of class wxNotifyEvent


class wxPaintEvent : wxEvent
{
    %Docstring
        PaintEvent(window)
        
        A paint event is sent when a window's contents needs to be repainted.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxPaintEvent& operator=(const wxPaintEvent&);



private:
    wxPaintEvent(
        wxWindow * window
    );

};  // end of class wxPaintEvent


class wxPaletteChangedEvent : wxEvent
{
    %Docstring
        PaletteChangedEvent(winid=0)
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxPaletteChangedEvent(
        wxWindowID winid = 0
    );

    void SetChangedWindow(
        wxWindow * win
    );
    %Docstring
        SetChangedWindow(win)
    %End

    wxWindow * GetChangedWindow() const;
    %Docstring
        GetChangedWindow() -> Window
    %End

    %Property(name=ChangedWindow, get=GetChangedWindow, set=SetChangedWindow)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxPaletteChangedEvent& operator=(const wxPaletteChangedEvent&);


};  // end of class wxPaletteChangedEvent


class wxQueryNewPaletteEvent : wxEvent
{
    %Docstring
        QueryNewPaletteEvent(winid=0)
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxQueryNewPaletteEvent(
        wxWindowID winid = 0
    );

    void SetPaletteRealized(
        bool realized
    );
    %Docstring
        SetPaletteRealized(realized)
    %End

    bool GetPaletteRealized();
    %Docstring
        GetPaletteRealized() -> bool
    %End

    %Property(name=PaletteRealized, get=GetPaletteRealized, set=SetPaletteRealized)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxQueryNewPaletteEvent& operator=(const wxQueryNewPaletteEvent&);


};  // end of class wxQueryNewPaletteEvent


class wxScrollEvent : wxCommandEvent
{
    %Docstring
        ScrollEvent(commandType=wxEVT_NULL, id=0, pos=0, orientation=0)
        
        A scroll event holds information about events sent from stand-alone
        scrollbars (see wxScrollBar) and sliders (see wxSlider).
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxScrollEvent(
        wxEventType commandType = wxEVT_NULL,
        int id = 0,
        int pos = 0,
        int orientation = 0
    );

    int GetOrientation() const;
    %Docstring
        GetOrientation() -> int
        
        Returns wxHORIZONTAL or wxVERTICAL, depending on the orientation of
        the scrollbar.
    %End

    int GetPosition() const;
    %Docstring
        GetPosition() -> int
        
        Returns the position of the scrollbar.
    %End

    void SetOrientation(
        int orient
    );
    %Docstring
        SetOrientation(orient)
    %End

    void SetPosition(
        int pos
    );
    %Docstring
        SetPosition(pos)
    %End

    %Property(name=Orientation, get=GetOrientation, set=SetOrientation)
    %Property(name=Position, get=GetPosition, set=SetPosition)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxScrollEvent& operator=(const wxScrollEvent&);


};  // end of class wxScrollEvent


class wxScrollWinEvent : wxEvent
{
    %Docstring
        ScrollWinEvent(commandType=wxEVT_NULL, pos=0, orientation=0)
        
        A scroll event holds information about events sent from scrolling
        windows.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxScrollWinEvent(
        wxEventType commandType = wxEVT_NULL,
        int pos = 0,
        int orientation = 0
    );

    int GetOrientation() const;
    %Docstring
        GetOrientation() -> int
        
        Returns wxHORIZONTAL or wxVERTICAL, depending on the orientation of
        the scrollbar.
    %End

    int GetPosition() const;
    %Docstring
        GetPosition() -> int
        
        Returns the position of the scrollbar for the thumb track and release
        events.
    %End

    void SetOrientation(
        int orient
    );
    %Docstring
        SetOrientation(orient)
    %End

    void SetPosition(
        int pos
    );
    %Docstring
        SetPosition(pos)
    %End

    %Property(name=Orientation, get=GetOrientation, set=SetOrientation)
    %Property(name=Position, get=GetPosition, set=SetPosition)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxScrollWinEvent& operator=(const wxScrollWinEvent&);


};  // end of class wxScrollWinEvent


class wxSetCursorEvent : wxEvent
{
    %Docstring
        SetCursorEvent(x=0, y=0)
        
        A wxSetCursorEvent is generated from wxWindow when the mouse cursor is
        about to be set as a result of mouse motion.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxSetCursorEvent(
        wxCoord x = 0,
        wxCoord y = 0
    );

    const wxCursor & GetCursor() const;
    %Docstring
        GetCursor() -> Cursor
        
        Returns a reference to the cursor specified by this event.
    %End

    wxCoord GetX() const;
    %Docstring
        GetX() -> Coord
        
        Returns the X coordinate of the mouse in client coordinates.
    %End

    wxCoord GetY() const;
    %Docstring
        GetY() -> Coord
        
        Returns the Y coordinate of the mouse in client coordinates.
    %End

    bool HasCursor() const;
    %Docstring
        HasCursor() -> bool
        
        Returns true if the cursor specified by this event is a valid cursor.
    %End

    void SetCursor(
        const wxCursor & cursor
    );
    %Docstring
        SetCursor(cursor)
        
        Sets the cursor associated with this event.
    %End

    %Property(name=Cursor, get=GetCursor, set=SetCursor)
    %Property(name=X, get=GetX)
    %Property(name=Y, get=GetY)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxSetCursorEvent& operator=(const wxSetCursorEvent&);


};  // end of class wxSetCursorEvent


class wxShowEvent : wxEvent
{
    %Docstring
        ShowEvent(winid=0, show=False)
        
        An event being sent when the window is shown or hidden.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxShowEvent(
        int winid = 0,
        bool show = false
    );

    void SetShow(
        bool show
    );
    %Docstring
        SetShow(show)
        
        Set whether the windows was shown or hidden.
    %End

    bool IsShown() const;
    %Docstring
        IsShown() -> bool
        
        Return true if the window has been shown, false if it has been hidden.
    %End

    %Property(name=Show, get=IsShown, set=SetShow)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxShowEvent& operator=(const wxShowEvent&);


};  // end of class wxShowEvent


class wxSizeEvent : wxEvent
{
    %Docstring
        SizeEvent(sz, id=0)
        
        A size event holds information about size change events of wxWindow.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxSizeEvent(
        const wxSize & sz,
        int id = 0
    );

    wxSize GetSize() const;
    %Docstring
        GetSize() -> Size
        
        Returns the entire size of the window generating the size change
        event.
    %End

    void SetSize(
        wxSize size
    );
    %Docstring
        SetSize(size)
    %End

    wxRect GetRect() const;
    %Docstring
        GetRect() -> Rect
    %End

    void SetRect(
        wxRect rect
    );
    %Docstring
        SetRect(rect)
    %End

    %Property(name=Rect, get=GetRect, set=SetRect)
    %Property(name=Size, get=GetSize, set=SetSize)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxSizeEvent& operator=(const wxSizeEvent&);


};  // end of class wxSizeEvent


class wxSysColourChangedEvent : wxEvent
{
    %Docstring
        SysColourChangedEvent()
        
        This class is used for system colour change events, which are
        generated when the user changes the colour settings using the control
        panel.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxSysColourChangedEvent();

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxSysColourChangedEvent& operator=(const wxSysColourChangedEvent&);


};  // end of class wxSysColourChangedEvent


class wxUpdateUIEvent : wxCommandEvent
{
    %Docstring
        UpdateUIEvent(commandId=0)
        
        This class is used for pseudo-events which are called by wxWidgets to
        give an application the chance to update various user interface
        elements.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxUpdateUIEvent(
        wxWindowID commandId = 0
    );

    void Check(
        bool check
    );
    %Docstring
        Check(check)
        
        Check or uncheck the UI element.
    %End

    void Enable(
        bool enable
    );
    %Docstring
        Enable(enable)
        
        Enable or disable the UI element.
    %End

    bool GetChecked() const;
    %Docstring
        GetChecked() -> bool
        
        Returns true if the UI element should be checked.
    %End

    bool GetEnabled() const;
    %Docstring
        GetEnabled() -> bool
        
        Returns true if the UI element should be enabled.
    %End

    bool IsCheckable() const;
    %Docstring
        IsCheckable() -> bool
        
        Returns true if the UI element can be checked.
    %End

    bool GetSetChecked() const;
    %Docstring
        GetSetChecked() -> bool
        
        Returns true if the application has called Check().
    %End

    bool GetSetEnabled() const;
    %Docstring
        GetSetEnabled() -> bool
        
        Returns true if the application has called Enable().
    %End

    bool GetSetShown() const;
    %Docstring
        GetSetShown() -> bool
        
        Returns true if the application has called Show().
    %End

    bool GetSetText() const;
    %Docstring
        GetSetText() -> bool
        
        Returns true if the application has called SetText().
    %End

    bool GetShown() const;
    %Docstring
        GetShown() -> bool
        
        Returns true if the UI element should be shown.
    %End

    wxString GetText() const;
    %Docstring
        GetText() -> String
        
        Returns the text that should be set for the UI element.
    %End

    void SetText(
        const wxString & text
    );
    %Docstring
        SetText(text)
        
        Sets the text for this UI element.
    %End

    void Show(
        bool show
    );
    %Docstring
        Show(show)
        
        Show or hide the UI element.
    %End

    static
    bool CanUpdate(
        wxWindow * window
    );
    %Docstring
        CanUpdate(window) -> bool
        
        Returns true if it is appropriate to update (send UI update events to)
        this window.
    %End

    static
    wxUpdateUIMode GetMode();
    %Docstring
        GetMode() -> UpdateUIMode
        
        Static function returning a value specifying how wxWidgets will send
        update events: to all windows, or only to those which specify that
        they will process the events.
    %End

    static
    long GetUpdateInterval();
    %Docstring
        GetUpdateInterval() -> long
        
        Returns the current interval between updates in milliseconds.
    %End

    static
    void ResetUpdateTime();
    %Docstring
        ResetUpdateTime()
        
        Used internally to reset the last-updated time to the current time.
    %End

    static
    void SetMode(
        wxUpdateUIMode mode
    );
    %Docstring
        SetMode(mode)
        
        Specify how wxWidgets will send update events: to all windows, or only
        to those which specify that they will process the events.
    %End

    static
    void SetUpdateInterval(
        long updateInterval
    );
    %Docstring
        SetUpdateInterval(updateInterval)
        
        Sets the interval between updates in milliseconds.
    %End

    %Property(name=Checked, get=GetChecked, set=Check)
    %Property(name=Enabled, get=GetEnabled, set=Enable)
    %Property(name=Shown, get=GetShown, set=Show)
    %Property(name=Text, get=GetText, set=SetText)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxUpdateUIEvent& operator=(const wxUpdateUIEvent&);


};  // end of class wxUpdateUIEvent


class wxWindowCreateEvent : wxCommandEvent
{
    %Docstring
        WindowCreateEvent(win=None)
        
        This event is sent just after the actual window associated with a
        wxWindow object has been created.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxWindowCreateEvent(
        wxWindow * win = NULL
    );

    wxWindow * GetWindow() const;
    %Docstring
        GetWindow() -> Window
        
        Return the window being created.
    %End

    %Property(name=Window, get=GetWindow)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxWindowCreateEvent& operator=(const wxWindowCreateEvent&);


};  // end of class wxWindowCreateEvent


class wxWindowDestroyEvent : wxCommandEvent
{
    %Docstring
        WindowDestroyEvent(win=None)
        
        This event is sent as early as possible during the window destruction
        process.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxWindowDestroyEvent(
        wxWindow * win = NULL
    );

    wxWindow * GetWindow() const;
    %Docstring
        GetWindow() -> Window
        
        Return the window being destroyed.
    %End

    %Property(name=Window, get=GetWindow)
    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxWindowDestroyEvent& operator=(const wxWindowDestroyEvent&);


};  // end of class wxWindowDestroyEvent


class wxGestureEvent : wxEvent
{
    %Docstring
        GestureEvent(winid=0, type=wxEVT_NULL)
        
        This is the base class for all supported gesture events.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxGestureEvent(
        wxWindowID winid = 0,
        wxEventType type = wxEVT_NULL
    );

    const wxPoint & GetPosition() const;
    %Docstring
        GetPosition() -> Point
        
        Returns the position where the event took effect, in client
        coordinates: position of Pan event, center of zoom for Zoom event,
        center of rotation for Rotate event, center of box formed by 2 fingers
        for Two Finger Tap event and position of the pressed finger for Press
        and Tap Event.
    %End

    bool IsGestureStart() const;
    %Docstring
        IsGestureStart() -> bool
        
        Returns true if the event was the first in a gesture sequence.
    %End

    bool IsGestureEnd() const;
    %Docstring
        IsGestureEnd() -> bool
        
        Returns true if the event was the last in a gesture sequence.
    %End

    void SetPosition(
        const wxPoint & pos
    );
    %Docstring
        SetPosition(pos)
        
        Sets the position where the event took effect, in client coordinates:
        position of Pan event, center of zoom for Zoom event, center of
        rotation for Rotate event.
    %End

    void SetGestureStart(
        bool isStart = true
    );
    %Docstring
        SetGestureStart(isStart=True)
        
        Sets the event to be the first in a gesture sequence.
    %End

    void SetGestureEnd(
        bool isEnd = true
    );
    %Docstring
        SetGestureEnd(isEnd=True)
        
        Sets the event to be the last in a gesture sequence.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxGestureEvent& operator=(const wxGestureEvent&);


    public:


    %Property(name=Position, get=GetPosition, set=SetPosition)
};  // end of class wxGestureEvent


class wxPanGestureEvent : wxGestureEvent
{
    %Docstring
        PanGestureEvent(winid=0)
        
        This event is generated when the user moves a finger on the surface.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxPanGestureEvent(
        wxWindowID winid = 0
    );

    wxPoint GetDelta() const;
    %Docstring
        GetDelta() -> Point
        
        Returns the distance covered since the previous panning event.
    %End

    void SetDelta(
        const wxPoint & delta
    );
    %Docstring
        SetDelta(delta)
        
        Sets the distance covered since the previous panning event.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxPanGestureEvent& operator=(const wxPanGestureEvent&);


    public:


    %Property(name=Delta, get=GetDelta, set=SetDelta)
};  // end of class wxPanGestureEvent


class wxZoomGestureEvent : wxGestureEvent
{
    %Docstring
        ZoomGestureEvent(windid=0)
        
        This event is generated when two fingers pinch the surface to zoom in
        or out.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxZoomGestureEvent(
        wxWindowID windid = 0
    );

    double GetZoomFactor() const;
    %Docstring
        GetZoomFactor() -> double
        
        Returns the zoom Factor since the gesture started.
    %End

    void SetZoomFactor(
        double zoomFactor
    );
    %Docstring
        SetZoomFactor(zoomFactor)
        
        Sets the zoom Factor.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxZoomGestureEvent& operator=(const wxZoomGestureEvent&);


    public:


    %Property(name=ZoomFactor, get=GetZoomFactor, set=SetZoomFactor)
};  // end of class wxZoomGestureEvent


class wxRotateGestureEvent : wxGestureEvent
{
    %Docstring
        RotateGestureEvent(windid=0)
        
        This event is generated when two fingers move in opposite directions
        on the surface.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxRotateGestureEvent(
        wxWindowID windid = 0
    );

    double GetRotationAngle() const;
    %Docstring
        GetRotationAngle() -> double
        
        Returns the total angle of rotation in radians in clockwise direction
        since the gesture was first started i.e.
    %End

    void SetRotationAngle(
        double rotationAngle
    );
    %Docstring
        SetRotationAngle(rotationAngle)
        
        Sets the total angle of rotation in radians in clockwise direction
        since the gesture was first started i.e.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxRotateGestureEvent& operator=(const wxRotateGestureEvent&);


    public:


    %Property(name=RotationAngle, get=GetRotationAngle, set=SetRotationAngle)
};  // end of class wxRotateGestureEvent


class wxTwoFingerTapEvent : wxGestureEvent
{
    %Docstring
        TwoFingerTapEvent(windid=0)
        
        This event is generated when two fingers touch the surface at the same
        time.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxTwoFingerTapEvent(
        wxWindowID windid = 0
    );

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxTwoFingerTapEvent& operator=(const wxTwoFingerTapEvent&);


};  // end of class wxTwoFingerTapEvent


class wxLongPressEvent : wxGestureEvent
{
    %Docstring
        LongPressEvent(windid=0)
        
        This event is generated when one finger touches the surface and
        remains stationary.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxLongPressEvent(
        wxWindowID windid = 0
    );

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxLongPressEvent& operator=(const wxLongPressEvent&);


};  // end of class wxLongPressEvent


class wxPressAndTapEvent : wxGestureEvent
{
    %Docstring
        PressAndTapEvent(windid=0)
        
        This event is generated when the user press the surface with one
        finger and taps with another.
    %End
    %TypeHeaderCode
        #include <wx/event.h>
    %End

public:
    wxPressAndTapEvent(
        wxWindowID windid = 0
    );

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxPressAndTapEvent& operator=(const wxPressAndTapEvent&);


};  // end of class wxPressAndTapEvent


wxEventType wxNewEventType();
%Docstring
    NewEventType() -> EventType
    
    Generates a new unique event type.
%End

void wxPostEvent(
    wxEvtHandler * dest,
    const wxEvent & event
);
%Docstring
    PostEvent(dest, event)
    
    In a GUI application, this function posts event to the specified dest
    object using wxEvtHandler::AddPendingEvent().
%End

void wxQueueEvent(
    wxEvtHandler * dest,
    wxEvent * event   /Transfer/
);
%Docstring
    QueueEvent(dest, event)
    
    Queue an event for processing on the given object.
%End

%Extract(id=pycode_core)
class PyEventBinder(object):
    """
    Instances of this class are used to bind specific events to event handlers.
    """
    def __init__(self, evtType, expectedIDs=0):
        if expectedIDs not in [0, 1, 2]:
            raise ValueError("Invalid number of expectedIDs")
        self.expectedIDs = expectedIDs
        
        if isinstance(evtType, (list, tuple)):
            self.evtType = list(evtType)
        else:
            self.evtType = [evtType]

    def Bind(self, target, id1, id2, function):
        """
        Bind this set of event types to target using its Connect() method.
        """
        for et in self.evtType:
            target.Connect(id1, id2, et, function)

    def Unbind(self, target, id1, id2, handler=None):
        """
        Remove an event binding.
        """
        success = 0
        for et in self.evtType:
            success += int(target.Disconnect(id1, id2, et, handler))
        return success != 0

    def _getEvtType(self):
        """
        Make it easy to get to the default wxEventType typeID for this
        event binder.
        """
        return self.evtType[0]

    typeId = property(_getEvtType)
    @wx.deprecatedMsg("Use :meth:`EvtHandler.Bind` instead.")
    def __call__(self, *args):
        """
        For backwards compatibility with the old ``EVT_*`` functions.
        Should be called with either (window, func), (window, ID,
        func) or (window, ID1, ID2, func) parameters depending on the
        type of the event.
        """
        assert len(args) == 2 + self.expectedIDs
        id1 = ID_ANY
        id2 = ID_ANY
        target = args[0]
        if self.expectedIDs == 0:
            func = args[1]
        elif self.expectedIDs == 1:
            id1 = args[1]
            func = args[2]
        elif self.expectedIDs == 2:
            id1 = args[1]
            id2 = args[2]
            func = args[3]
        else:
            raise ValueError("Unexpected number of IDs")
        
        self.Bind(target, id1, id2, func)


%End

%Extract(id=pycode_core)
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# This code block was included from src/event_ex.py
# Create some event binders
EVT_SIZE = wx.PyEventBinder( wxEVT_SIZE )
EVT_SIZING = wx.PyEventBinder( wxEVT_SIZING )
EVT_MOVE = wx.PyEventBinder( wxEVT_MOVE )
EVT_MOVING = wx.PyEventBinder( wxEVT_MOVING )
EVT_MOVE_START = wx.PyEventBinder( wxEVT_MOVE_START )
EVT_MOVE_END = wx.PyEventBinder( wxEVT_MOVE_END )
EVT_CLOSE = wx.PyEventBinder( wxEVT_CLOSE_WINDOW )
EVT_END_SESSION = wx.PyEventBinder( wxEVT_END_SESSION )
EVT_QUERY_END_SESSION = wx.PyEventBinder( wxEVT_QUERY_END_SESSION )
EVT_PAINT = wx.PyEventBinder( wxEVT_PAINT )
EVT_NC_PAINT = wx.PyEventBinder( wxEVT_NC_PAINT )
EVT_ERASE_BACKGROUND = wx.PyEventBinder( wxEVT_ERASE_BACKGROUND )
EVT_CHAR = wx.PyEventBinder( wxEVT_CHAR )
EVT_KEY_DOWN = wx.PyEventBinder( wxEVT_KEY_DOWN )
EVT_KEY_UP = wx.PyEventBinder( wxEVT_KEY_UP )
EVT_HOTKEY = wx.PyEventBinder( wxEVT_HOTKEY, 1)
EVT_CHAR_HOOK = wx.PyEventBinder( wxEVT_CHAR_HOOK )
EVT_MENU_OPEN = wx.PyEventBinder( wxEVT_MENU_OPEN )
EVT_MENU_CLOSE = wx.PyEventBinder( wxEVT_MENU_CLOSE )
EVT_MENU_HIGHLIGHT = wx.PyEventBinder( wxEVT_MENU_HIGHLIGHT, 1)
EVT_MENU_HIGHLIGHT_ALL = wx.PyEventBinder( wxEVT_MENU_HIGHLIGHT )
EVT_SET_FOCUS = wx.PyEventBinder( wxEVT_SET_FOCUS )
EVT_KILL_FOCUS = wx.PyEventBinder( wxEVT_KILL_FOCUS )
EVT_CHILD_FOCUS = wx.PyEventBinder( wxEVT_CHILD_FOCUS )
EVT_ACTIVATE = wx.PyEventBinder( wxEVT_ACTIVATE )
EVT_ACTIVATE_APP = wx.PyEventBinder( wxEVT_ACTIVATE_APP )
EVT_HIBERNATE = wx.PyEventBinder( wxEVT_HIBERNATE )
EVT_DROP_FILES = wx.PyEventBinder( wxEVT_DROP_FILES )
EVT_INIT_DIALOG = wx.PyEventBinder( wxEVT_INIT_DIALOG )
EVT_SYS_COLOUR_CHANGED = wx.PyEventBinder( wxEVT_SYS_COLOUR_CHANGED )
EVT_DISPLAY_CHANGED = wx.PyEventBinder( wxEVT_DISPLAY_CHANGED )
EVT_DPI_CHANGED = wx.PyEventBinder( wxEVT_DPI_CHANGED )
EVT_SHOW = wx.PyEventBinder( wxEVT_SHOW )
EVT_MAXIMIZE = wx.PyEventBinder( wxEVT_MAXIMIZE )
EVT_ICONIZE = wx.PyEventBinder( wxEVT_ICONIZE )
EVT_NAVIGATION_KEY = wx.PyEventBinder( wxEVT_NAVIGATION_KEY )
EVT_PALETTE_CHANGED = wx.PyEventBinder( wxEVT_PALETTE_CHANGED )
EVT_QUERY_NEW_PALETTE = wx.PyEventBinder( wxEVT_QUERY_NEW_PALETTE )
EVT_WINDOW_CREATE = wx.PyEventBinder( wxEVT_CREATE )
EVT_WINDOW_DESTROY = wx.PyEventBinder( wxEVT_DESTROY )
EVT_SET_CURSOR = wx.PyEventBinder( wxEVT_SET_CURSOR )
EVT_MOUSE_CAPTURE_CHANGED = wx.PyEventBinder( wxEVT_MOUSE_CAPTURE_CHANGED )
EVT_MOUSE_CAPTURE_LOST = wx.PyEventBinder( wxEVT_MOUSE_CAPTURE_LOST )

EVT_LEFT_DOWN = wx.PyEventBinder( wxEVT_LEFT_DOWN )
EVT_LEFT_UP = wx.PyEventBinder( wxEVT_LEFT_UP )
EVT_MIDDLE_DOWN = wx.PyEventBinder( wxEVT_MIDDLE_DOWN )
EVT_MIDDLE_UP = wx.PyEventBinder( wxEVT_MIDDLE_UP )
EVT_RIGHT_DOWN = wx.PyEventBinder( wxEVT_RIGHT_DOWN )
EVT_RIGHT_UP = wx.PyEventBinder( wxEVT_RIGHT_UP )
EVT_MOTION = wx.PyEventBinder( wxEVT_MOTION )
EVT_LEFT_DCLICK = wx.PyEventBinder( wxEVT_LEFT_DCLICK )
EVT_MIDDLE_DCLICK = wx.PyEventBinder( wxEVT_MIDDLE_DCLICK )
EVT_RIGHT_DCLICK = wx.PyEventBinder( wxEVT_RIGHT_DCLICK )
EVT_LEAVE_WINDOW = wx.PyEventBinder( wxEVT_LEAVE_WINDOW )
EVT_ENTER_WINDOW = wx.PyEventBinder( wxEVT_ENTER_WINDOW )
EVT_MOUSEWHEEL = wx.PyEventBinder( wxEVT_MOUSEWHEEL )
EVT_MOUSE_AUX1_DOWN = wx.PyEventBinder( wxEVT_AUX1_DOWN )
EVT_MOUSE_AUX1_UP = wx.PyEventBinder( wxEVT_AUX1_UP )
EVT_MOUSE_AUX1_DCLICK = wx.PyEventBinder( wxEVT_AUX1_DCLICK )
EVT_MOUSE_AUX2_DOWN = wx.PyEventBinder( wxEVT_AUX2_DOWN )
EVT_MOUSE_AUX2_UP = wx.PyEventBinder( wxEVT_AUX2_UP )
EVT_MOUSE_AUX2_DCLICK = wx.PyEventBinder( wxEVT_AUX2_DCLICK )

EVT_MOUSE_EVENTS = wx.PyEventBinder([ wxEVT_LEFT_DOWN,
                                      wxEVT_LEFT_UP,
                                      wxEVT_MIDDLE_DOWN,
                                      wxEVT_MIDDLE_UP,
                                      wxEVT_RIGHT_DOWN,
                                      wxEVT_RIGHT_UP,
                                      wxEVT_MOTION,
                                      wxEVT_LEFT_DCLICK,
                                      wxEVT_MIDDLE_DCLICK,
                                      wxEVT_RIGHT_DCLICK,
                                      wxEVT_ENTER_WINDOW,
                                      wxEVT_LEAVE_WINDOW,
                                      wxEVT_MOUSEWHEEL,
                                      wxEVT_AUX1_DOWN,
                                      wxEVT_AUX1_UP,
                                      wxEVT_AUX1_DCLICK,
                                      wxEVT_AUX2_DOWN,
                                      wxEVT_AUX2_UP,
                                      wxEVT_AUX2_DCLICK,
                                     ])
EVT_MAGNIFY = wx.PyEventBinder( wxEVT_MAGNIFY )


# Scrolling from wxWindow (sent to wxScrolledWindow)
EVT_SCROLLWIN = wx.PyEventBinder([ wxEVT_SCROLLWIN_TOP,
                                  wxEVT_SCROLLWIN_BOTTOM,
                                  wxEVT_SCROLLWIN_LINEUP,
                                  wxEVT_SCROLLWIN_LINEDOWN,
                                  wxEVT_SCROLLWIN_PAGEUP,
                                  wxEVT_SCROLLWIN_PAGEDOWN,
                                  wxEVT_SCROLLWIN_THUMBTRACK,
                                  wxEVT_SCROLLWIN_THUMBRELEASE,
                                  ])

EVT_SCROLLWIN_TOP = wx.PyEventBinder( wxEVT_SCROLLWIN_TOP )
EVT_SCROLLWIN_BOTTOM = wx.PyEventBinder( wxEVT_SCROLLWIN_BOTTOM )
EVT_SCROLLWIN_LINEUP = wx.PyEventBinder( wxEVT_SCROLLWIN_LINEUP )
EVT_SCROLLWIN_LINEDOWN = wx.PyEventBinder( wxEVT_SCROLLWIN_LINEDOWN )
EVT_SCROLLWIN_PAGEUP = wx.PyEventBinder( wxEVT_SCROLLWIN_PAGEUP )
EVT_SCROLLWIN_PAGEDOWN = wx.PyEventBinder( wxEVT_SCROLLWIN_PAGEDOWN )
EVT_SCROLLWIN_THUMBTRACK = wx.PyEventBinder( wxEVT_SCROLLWIN_THUMBTRACK )
EVT_SCROLLWIN_THUMBRELEASE = wx.PyEventBinder( wxEVT_SCROLLWIN_THUMBRELEASE )

# Scrolling from wx.Slider and wx.ScrollBar
EVT_SCROLL = wx.PyEventBinder([ wxEVT_SCROLL_TOP,
                               wxEVT_SCROLL_BOTTOM,
                               wxEVT_SCROLL_LINEUP,
                               wxEVT_SCROLL_LINEDOWN,
                               wxEVT_SCROLL_PAGEUP,
                               wxEVT_SCROLL_PAGEDOWN,
                               wxEVT_SCROLL_THUMBTRACK,
                               wxEVT_SCROLL_THUMBRELEASE,
                               wxEVT_SCROLL_CHANGED,
                               ])

EVT_SCROLL_TOP = wx.PyEventBinder( wxEVT_SCROLL_TOP )
EVT_SCROLL_BOTTOM = wx.PyEventBinder( wxEVT_SCROLL_BOTTOM )
EVT_SCROLL_LINEUP = wx.PyEventBinder( wxEVT_SCROLL_LINEUP )
EVT_SCROLL_LINEDOWN = wx.PyEventBinder( wxEVT_SCROLL_LINEDOWN )
EVT_SCROLL_PAGEUP = wx.PyEventBinder( wxEVT_SCROLL_PAGEUP )
EVT_SCROLL_PAGEDOWN = wx.PyEventBinder( wxEVT_SCROLL_PAGEDOWN )
EVT_SCROLL_THUMBTRACK = wx.PyEventBinder( wxEVT_SCROLL_THUMBTRACK )
EVT_SCROLL_THUMBRELEASE = wx.PyEventBinder( wxEVT_SCROLL_THUMBRELEASE )
EVT_SCROLL_CHANGED = wx.PyEventBinder( wxEVT_SCROLL_CHANGED )
EVT_SCROLL_ENDSCROLL = EVT_SCROLL_CHANGED

# Scrolling from wx.Slider and wx.ScrollBar, with an id
EVT_COMMAND_SCROLL = wx.PyEventBinder([ wxEVT_SCROLL_TOP,
                                       wxEVT_SCROLL_BOTTOM,
                                       wxEVT_SCROLL_LINEUP,
                                       wxEVT_SCROLL_LINEDOWN,
                                       wxEVT_SCROLL_PAGEUP,
                                       wxEVT_SCROLL_PAGEDOWN,
                                       wxEVT_SCROLL_THUMBTRACK,
                                       wxEVT_SCROLL_THUMBRELEASE,
                                       wxEVT_SCROLL_CHANGED,
                                       ], 1)

EVT_COMMAND_SCROLL_TOP = wx.PyEventBinder( wxEVT_SCROLL_TOP, 1)
EVT_COMMAND_SCROLL_BOTTOM = wx.PyEventBinder( wxEVT_SCROLL_BOTTOM, 1)
EVT_COMMAND_SCROLL_LINEUP = wx.PyEventBinder( wxEVT_SCROLL_LINEUP, 1)
EVT_COMMAND_SCROLL_LINEDOWN = wx.PyEventBinder( wxEVT_SCROLL_LINEDOWN, 1)
EVT_COMMAND_SCROLL_PAGEUP = wx.PyEventBinder( wxEVT_SCROLL_PAGEUP, 1)
EVT_COMMAND_SCROLL_PAGEDOWN = wx.PyEventBinder( wxEVT_SCROLL_PAGEDOWN, 1)
EVT_COMMAND_SCROLL_THUMBTRACK = wx.PyEventBinder( wxEVT_SCROLL_THUMBTRACK, 1)
EVT_COMMAND_SCROLL_THUMBRELEASE = wx.PyEventBinder( wxEVT_SCROLL_THUMBRELEASE, 1)
EVT_COMMAND_SCROLL_CHANGED = wx.PyEventBinder( wxEVT_SCROLL_CHANGED, 1)
EVT_COMMAND_SCROLL_ENDSCROLL = EVT_COMMAND_SCROLL_CHANGED

EVT_BUTTON = wx.PyEventBinder( wxEVT_BUTTON, 1)
EVT_CHECKBOX = wx.PyEventBinder( wxEVT_CHECKBOX, 1)
EVT_CHOICE = wx.PyEventBinder( wxEVT_CHOICE, 1)
EVT_LISTBOX = wx.PyEventBinder( wxEVT_LISTBOX, 1)
EVT_LISTBOX_DCLICK = wx.PyEventBinder( wxEVT_LISTBOX_DCLICK, 1)
EVT_MENU = wx.PyEventBinder( wxEVT_MENU, 1)
EVT_MENU_RANGE = wx.PyEventBinder( wxEVT_MENU, 2)
EVT_SLIDER = wx.PyEventBinder( wxEVT_SLIDER, 1)
EVT_RADIOBOX = wx.PyEventBinder( wxEVT_RADIOBOX, 1)
EVT_RADIOBUTTON = wx.PyEventBinder( wxEVT_RADIOBUTTON, 1)

EVT_SCROLLBAR = wx.PyEventBinder( wxEVT_SCROLLBAR, 1)
EVT_VLBOX = wx.PyEventBinder( wxEVT_VLBOX, 1)
EVT_COMBOBOX = wx.PyEventBinder( wxEVT_COMBOBOX, 1)
EVT_TOOL = wx.PyEventBinder( wxEVT_TOOL, 1)
EVT_TOOL_RANGE = wx.PyEventBinder( wxEVT_TOOL, 2)
EVT_TOOL_RCLICKED = wx.PyEventBinder( wxEVT_TOOL_RCLICKED, 1)
EVT_TOOL_RCLICKED_RANGE = wx.PyEventBinder( wxEVT_TOOL_RCLICKED, 2)
EVT_TOOL_ENTER = wx.PyEventBinder( wxEVT_TOOL_ENTER, 1)
EVT_TOOL_DROPDOWN = wx.PyEventBinder( wxEVT_TOOL_DROPDOWN, 1)
EVT_CHECKLISTBOX = wx.PyEventBinder( wxEVT_CHECKLISTBOX, 1)
EVT_COMBOBOX_DROPDOWN = wx.PyEventBinder( wxEVT_COMBOBOX_DROPDOWN , 1)
EVT_COMBOBOX_CLOSEUP  = wx.PyEventBinder( wxEVT_COMBOBOX_CLOSEUP , 1)

EVT_COMMAND_LEFT_CLICK = wx.PyEventBinder( wxEVT_COMMAND_LEFT_CLICK, 1)
EVT_COMMAND_LEFT_DCLICK = wx.PyEventBinder( wxEVT_COMMAND_LEFT_DCLICK, 1)
EVT_COMMAND_RIGHT_CLICK = wx.PyEventBinder( wxEVT_COMMAND_RIGHT_CLICK, 1)
EVT_COMMAND_RIGHT_DCLICK = wx.PyEventBinder( wxEVT_COMMAND_RIGHT_DCLICK, 1)
EVT_COMMAND_SET_FOCUS = wx.PyEventBinder( wxEVT_COMMAND_SET_FOCUS, 1)
EVT_COMMAND_KILL_FOCUS = wx.PyEventBinder( wxEVT_COMMAND_KILL_FOCUS, 1)
EVT_COMMAND_ENTER = wx.PyEventBinder( wxEVT_COMMAND_ENTER, 1)

EVT_HELP = wx.PyEventBinder( wxEVT_HELP, 1)
EVT_HELP_RANGE = wx.PyEventBinder(  wxEVT_HELP, 2)
EVT_DETAILED_HELP = wx.PyEventBinder( wxEVT_DETAILED_HELP, 1)
EVT_DETAILED_HELP_RANGE = wx.PyEventBinder( wxEVT_DETAILED_HELP, 2)

EVT_IDLE = wx.PyEventBinder( wxEVT_IDLE )

EVT_UPDATE_UI = wx.PyEventBinder( wxEVT_UPDATE_UI, 1)
EVT_UPDATE_UI_RANGE = wx.PyEventBinder( wxEVT_UPDATE_UI, 2)

EVT_CONTEXT_MENU = wx.PyEventBinder( wxEVT_CONTEXT_MENU )

EVT_THREAD = wx.PyEventBinder( wxEVT_THREAD )

EVT_WINDOW_MODAL_DIALOG_CLOSED = wx.PyEventBinder( wxEVT_WINDOW_MODAL_DIALOG_CLOSED )

EVT_JOY_BUTTON_DOWN = wx.PyEventBinder( wxEVT_JOY_BUTTON_DOWN )
EVT_JOY_BUTTON_UP = wx.PyEventBinder( wxEVT_JOY_BUTTON_UP )
EVT_JOY_MOVE = wx.PyEventBinder( wxEVT_JOY_MOVE )
EVT_JOY_ZMOVE = wx.PyEventBinder( wxEVT_JOY_ZMOVE )
EVT_JOYSTICK_EVENTS = wx.PyEventBinder([ wxEVT_JOY_BUTTON_DOWN,
                                        wxEVT_JOY_BUTTON_UP,
                                        wxEVT_JOY_MOVE,
                                        wxEVT_JOY_ZMOVE,
                                        ])

EVT_GESTURE_PAN = wx.PyEventBinder( wxEVT_GESTURE_PAN )
EVT_GESTURE_ZOOM = wx.PyEventBinder( wxEVT_GESTURE_ZOOM )
EVT_GESTURE_ROTATE = wx.PyEventBinder( wxEVT_GESTURE_ROTATE )
EVT_TWO_FINGER_TAP = wx.PyEventBinder( wxEVT_TWO_FINGER_TAP )
EVT_LONG_PRESS = wx.PyEventBinder( wxEVT_LONG_PRESS )
EVT_PRESS_AND_TAP = wx.PyEventBinder( wxEVT_PRESS_AND_TAP )

EVT_CLIPBOARD_CHANGED = PyEventBinder(wxEVT_CLIPBOARD_CHANGED, 1)


# deprecated wxEVT aliases
wxEVT_COMMAND_BUTTON_CLICKED         = wxEVT_BUTTON
wxEVT_COMMAND_CHECKBOX_CLICKED       = wxEVT_CHECKBOX
wxEVT_COMMAND_CHOICE_SELECTED        = wxEVT_CHOICE
wxEVT_COMMAND_LISTBOX_SELECTED       = wxEVT_LISTBOX
wxEVT_COMMAND_LISTBOX_DOUBLECLICKED  = wxEVT_LISTBOX_DCLICK
wxEVT_COMMAND_CHECKLISTBOX_TOGGLED   = wxEVT_CHECKLISTBOX
wxEVT_COMMAND_MENU_SELECTED          = wxEVT_MENU
wxEVT_COMMAND_TOOL_CLICKED           = wxEVT_TOOL
wxEVT_COMMAND_SLIDER_UPDATED         = wxEVT_SLIDER
wxEVT_COMMAND_RADIOBOX_SELECTED      = wxEVT_RADIOBOX
wxEVT_COMMAND_RADIOBUTTON_SELECTED   = wxEVT_RADIOBUTTON
wxEVT_COMMAND_SCROLLBAR_UPDATED      = wxEVT_SCROLLBAR
wxEVT_COMMAND_VLBOX_SELECTED         = wxEVT_VLBOX
wxEVT_COMMAND_COMBOBOX_SELECTED      = wxEVT_COMBOBOX
wxEVT_COMMAND_TOOL_RCLICKED          = wxEVT_TOOL_RCLICKED
wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED  = wxEVT_TOOL_DROPDOWN
wxEVT_COMMAND_TOOL_ENTER             = wxEVT_TOOL_ENTER
wxEVT_COMMAND_COMBOBOX_DROPDOWN      = wxEVT_COMBOBOX_DROPDOWN
wxEVT_COMMAND_COMBOBOX_CLOSEUP       = wxEVT_COMBOBOX_CLOSEUP

# End of included code block
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

%End

%Extract(id=pycode_core)
PyEvtHandler = wx.deprecated(EvtHandler, "Use :class:`EvtHandler` instead.")

%End


//---------------------------------------------------------------------------

