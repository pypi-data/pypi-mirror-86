//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _dataview.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/treelist.h>
%End


//---------------------------------------------------------------------------

enum 
{
    wxTL_SINGLE,
    wxTL_MULTIPLE,
    wxTL_CHECKBOX,
    wxTL_3STATE,
    wxTL_USER_3STATE,
    wxTL_NO_HEADER,
    wxTL_DEFAULT_STYLE,
    wxTL_STYLE_MASK
};

wxEventType wxEVT_TREELIST_SELECTION_CHANGED   /PyName=wxEVT_TREELIST_SELECTION_CHANGED/;

wxEventType wxEVT_TREELIST_ITEM_EXPANDING   /PyName=wxEVT_TREELIST_ITEM_EXPANDING/;

wxEventType wxEVT_TREELIST_ITEM_EXPANDED   /PyName=wxEVT_TREELIST_ITEM_EXPANDED/;

wxEventType wxEVT_TREELIST_ITEM_CHECKED   /PyName=wxEVT_TREELIST_ITEM_CHECKED/;

wxEventType wxEVT_TREELIST_ITEM_ACTIVATED   /PyName=wxEVT_TREELIST_ITEM_ACTIVATED/;

wxEventType wxEVT_TREELIST_ITEM_CONTEXT_MENU   /PyName=wxEVT_TREELIST_ITEM_CONTEXT_MENU/;

wxEventType wxEVT_TREELIST_COLUMN_SORTED   /PyName=wxEVT_TREELIST_COLUMN_SORTED/;

class wxTreeListItem
{
    %Docstring
        TreeListItem()
        
        Unique identifier of an item in wxTreeListCtrl.
    %End
    %TypeHeaderCode
        #include <wx/treelist.h>
    %End

public:
    wxTreeListItem();

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Return true if the item is valid.
    %End

    int __nonzero__();
    %Docstring
        __nonzero__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreeListItem___nonzero__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxTreeListItem___nonzero__(wxTreeListItem* self)
    {
        return self->IsOk();
    }
    %End

    int __bool__();
    %Docstring
        __bool__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreeListItem___bool__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxTreeListItem___bool__(wxTreeListItem* self)
    {
        return self->IsOk();
    }
    %End

    long __hash__();
    %Docstring
        __hash__() -> long
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreeListItem___hash__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    long _wxTreeListItem___hash__(wxTreeListItem* self)
    {
        return (long)self->GetID();
    }
    %End

    bool __eq__(wxTreeListItem* other);
    %Docstring
        __eq__(other) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreeListItem___eq__(sipCpp, other);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxTreeListItem___eq__(wxTreeListItem* self, wxTreeListItem* other)
    {
        return other ? (self->GetID() == other->GetID()) : false;
    }
    %End

    bool __ne__(wxTreeListItem* other);
    %Docstring
        __ne__(other) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreeListItem___ne__(sipCpp, other);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxTreeListItem___ne__(wxTreeListItem* self, wxTreeListItem* other)
    {
        return other ? (self->GetID() != other->GetID()) : true;
    }
    %End

};  // end of class wxTreeListItem


class wxTreeListItemComparator
{
    %Docstring
        TreeListItemComparator()
        
        Class defining sort order for the items in wxTreeListCtrl.
    %End
    %TypeHeaderCode
        #include <wx/treelist.h>
    %End

public:
    wxTreeListItemComparator();

    virtual
    ~wxTreeListItemComparator();

    virtual
    int Compare(
        wxTreeListCtrl * treelist,
        unsigned column,
        wxTreeListItem first,
        wxTreeListItem second
    ) = 0;
    %Docstring
        Compare(treelist, column, first, second) -> int
        
        Pure virtual function which must be overridden to define sort order.
    %End

    private:
        wxTreeListItemComparator(const wxTreeListItemComparator&);


};  // end of class wxTreeListItemComparator


const char* wxTreeListCtrlNameStr;

class wxTreeListCtrl : wxWindow
{
    %Docstring
        TreeListCtrl()
        TreeListCtrl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=TL_DEFAULT_STYLE, name=TreeListCtrlNameStr)
        
        A control combining wxTreeCtrl and wxListCtrl features.
    %End
    %TypeHeaderCode
        #include <wx/treelist.h>
    %End

public:
    wxTreeListCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxTreeListCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxTL_DEFAULT_STYLE,
        const wxString & name = wxTreeListCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    const int NO_IMAGE;

    void AssignImageList(
        wxImageList * imageList   /Transfer/
    );
    %Docstring
        AssignImageList(imageList)
        
        Sets the image list and gives its ownership to the control.
    %End

    void SetImageList(
        wxImageList * imageList
    );
    %Docstring
        SetImageList(imageList)
        
        Sets the image list.
    %End

    int AppendColumn(
        const wxString & title,
        int width = wxCOL_WIDTH_AUTOSIZE,
        wxAlignment align = wxALIGN_LEFT,
        int flags = wxCOL_RESIZABLE
    );
    %Docstring
        AppendColumn(title, width=wx.COL_WIDTH_AUTOSIZE, align=wx.ALIGN_LEFT, flags=wx.COL_RESIZABLE) -> int
        
        Add a column with the given title and attributes.
    %End

    unsigned GetColumnCount() const;
    %Docstring
        GetColumnCount() -> unsigned
        
        Return the total number of columns.
    %End

    bool DeleteColumn(
        unsigned col
    );
    %Docstring
        DeleteColumn(col) -> bool
        
        Delete the column with the given index.
    %End

    void ClearColumns();
    %Docstring
        ClearColumns()
        
        Delete all columns.
    %End

    void SetColumnWidth(
        unsigned col,
        int width
    );
    %Docstring
        SetColumnWidth(col, width)
        
        Change the width of the given column.
    %End

    int GetColumnWidth(
        unsigned col
    ) const;
    %Docstring
        GetColumnWidth(col) -> int
        
        Get the current width of the given column in pixels.
    %End

    int WidthFor(
        const wxString & text
    ) const;
    %Docstring
        WidthFor(text) -> int
        
        Get the width appropriate for showing the given text.
    %End

    wxTreeListItem AppendItem(
        wxTreeListItem parent,
        const wxString & text,
        int imageClosed = -1,
        int imageOpened = -1,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        AppendItem(parent, text, imageClosed=-1, imageOpened=-1, data=None) -> TreeListItem
        
        Same as InsertItem() with wxTLI_LAST.
    %End

    wxTreeListItem InsertItem(
        wxTreeListItem parent,
        wxTreeListItem previous,
        const wxString & text,
        int imageClosed = -1,
        int imageOpened = -1,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        InsertItem(parent, previous, text, imageClosed=-1, imageOpened=-1, data=None) -> TreeListItem
        
        Insert a new item into the tree.
    %End

    wxTreeListItem PrependItem(
        wxTreeListItem parent,
        const wxString & text,
        int imageClosed = -1,
        int imageOpened = -1,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        PrependItem(parent, text, imageClosed=-1, imageOpened=-1, data=None) -> TreeListItem
        
        Same as InsertItem() with wxTLI_FIRST.
    %End

    void DeleteItem(
        wxTreeListItem item
    );
    %Docstring
        DeleteItem(item)
        
        Delete the specified item.
    %End

    void DeleteAllItems();
    %Docstring
        DeleteAllItems()
        
        Delete all tree items.
    %End

    wxTreeListItem GetRootItem() const;
    %Docstring
        GetRootItem() -> TreeListItem
        
        Return the (never shown) root item.
    %End

    wxTreeListItem GetItemParent(
        wxTreeListItem item
    ) const;
    %Docstring
        GetItemParent(item) -> TreeListItem
        
        Return the parent of the given item.
    %End

    wxTreeListItem GetFirstChild(
        wxTreeListItem item
    ) const;
    %Docstring
        GetFirstChild(item) -> TreeListItem
        
        Return the first child of the given item.
    %End

    wxTreeListItem GetNextSibling(
        wxTreeListItem item
    ) const;
    %Docstring
        GetNextSibling(item) -> TreeListItem
        
        Return the next sibling of the given item.
    %End

    wxTreeListItem GetFirstItem() const;
    %Docstring
        GetFirstItem() -> TreeListItem
        
        Return the first item in the tree.
    %End

    wxTreeListItem GetNextItem(
        wxTreeListItem item
    ) const;
    %Docstring
        GetNextItem(item) -> TreeListItem
        
        Get item after the given one in the depth-first tree-traversal order.
    %End

    const wxString & GetItemText(
        wxTreeListItem item,
        unsigned col = 0
    ) const;
    %Docstring
        GetItemText(item, col=0) -> String
        
        Return the text of the given item.
    %End

    void SetItemText(
        wxTreeListItem item,
        unsigned col,
        const wxString & text
    );
    %Docstring
        SetItemText(item, col, text)
        SetItemText(item, text)
        
        Set the text of the specified column of the given item.
    %End

    void SetItemText(
        wxTreeListItem item,
        const wxString & text
    );

    void SetItemImage(
        wxTreeListItem item,
        int closed,
        int opened = -1
    );
    %Docstring
        SetItemImage(item, closed, opened=-1)
        
        Set the images for the given item.
    %End

    wxClientData * GetItemData(
        wxTreeListItem item
    ) const;
    %Docstring
        GetItemData(item) -> ClientData
        
        Get the data associated with the given item.
    %End

    void SetItemData(
        wxTreeListItem item,
        wxClientData * data   /Transfer/
    );
    %Docstring
        SetItemData(item, data)
        
        Set the data associated with the given item.
    %End

    void Expand(
        wxTreeListItem item
    );
    %Docstring
        Expand(item)
        
        Expand the given tree branch.
    %End

    void Collapse(
        wxTreeListItem item
    );
    %Docstring
        Collapse(item)
        
        Collapse the given tree branch.
    %End

    bool IsExpanded(
        wxTreeListItem item
    ) const;
    %Docstring
        IsExpanded(item) -> bool
        
        Return whether the given item is expanded.
    %End

    wxTreeListItem GetSelection() const;
    %Docstring
        GetSelection() -> TreeListItem
        
        Return the currently selected item.
    %End

    PyObject* GetSelections();
    %Docstring
        GetSelections() -> PyObject
        
        Returns a list of all selected items. This method can be used in
        both single and multi-selection case.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreeListCtrl_GetSelections(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxTreeListCtrl_GetSelections(wxTreeListCtrl* self)
    {
        unsigned count;
        wxTreeListItems items;
        count = self->GetSelections(items);
        
        wxPyThreadBlocker blocker;
        PyObject* list = PyList_New(count);
        for (size_t i=0; i<count; i++) {
            wxTreeListItem* item = new wxTreeListItem(items[i]);
            PyObject* obj = wxPyConstructObject((void*)item, wxT("wxTreeListItem"), true);
            PyList_SET_ITEM(list, i, obj); // PyList_SET_ITEM steals a reference
        }
        return list;
    }
    %End

    void Select(
        wxTreeListItem item
    );
    %Docstring
        Select(item)
        
        Select the given item.
    %End

    void Unselect(
        wxTreeListItem item
    );
    %Docstring
        Unselect(item)
        
        Deselect the given item.
    %End

    bool IsSelected(
        wxTreeListItem item
    ) const;
    %Docstring
        IsSelected(item) -> bool
        
        Return true if the item is selected.
    %End

    void SelectAll();
    %Docstring
        SelectAll()
        
        Select all the control items.
    %End

    void UnselectAll();
    %Docstring
        UnselectAll()
        
        Deselect all the control items.
    %End

    void EnsureVisible(
        wxTreeListItem item
    );
    %Docstring
        EnsureVisible(item)
        
        Call this to ensure that the given item is visible.
    %End

    void CheckItem(
        wxTreeListItem item,
        wxCheckBoxState state = wxCHK_CHECKED
    );
    %Docstring
        CheckItem(item, state=wx.CHK_CHECKED)
        
        Change the item checked state.
    %End

    void CheckItemRecursively(
        wxTreeListItem item,
        wxCheckBoxState state = wxCHK_CHECKED
    );
    %Docstring
        CheckItemRecursively(item, state=wx.CHK_CHECKED)
        
        Change the checked state of the given item and all its children.
    %End

    void UncheckItem(
        wxTreeListItem item
    );
    %Docstring
        UncheckItem(item)
        
        Uncheck the given item.
    %End

    void UpdateItemParentStateRecursively(
        wxTreeListItem item
    );
    %Docstring
        UpdateItemParentStateRecursively(item)
        
        Update the state of the parent item to reflect the checked state of
        its children.
    %End

    wxCheckBoxState GetCheckedState(
        wxTreeListItem item
    ) const;
    %Docstring
        GetCheckedState(item) -> CheckBoxState
        
        Return the checked state of the item.
    %End

    bool AreAllChildrenInState(
        wxTreeListItem item,
        wxCheckBoxState state
    ) const;
    %Docstring
        AreAllChildrenInState(item, state) -> bool
        
        Return true if all children of the given item are in the specified
        state.
    %End

    void SetSortColumn(
        unsigned col,
        bool ascendingOrder = true
    );
    %Docstring
        SetSortColumn(col, ascendingOrder=True)
        
        Set the column to use for sorting and the order in which to sort.
    %End

    bool GetSortColumn(
        unsigned * col   /Out/,
        bool * ascendingOrder   /Out/ = NULL
    );
    %Docstring
        GetSortColumn() -> (bool, col, ascendingOrder)
        
        Return the column currently used for sorting, if any.
    %End

    void SetItemComparator(
        wxTreeListItemComparator * comparator
    );
    %Docstring
        SetItemComparator(comparator)
        
        Set the object to use for comparing the items.
    %End

    wxWindow * GetView() const;
    %Docstring
        GetView() -> wx.Window
        
        Return the view part of this control as a wxWindow.
    %End

    wxDataViewCtrl * GetDataView() const;
    %Docstring
        GetDataView() -> DataViewCtrl
        
        Return the view part of this control as wxDataViewCtrl.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxTL_DEFAULT_STYLE,
        const wxString & name = wxTreeListCtrlNameStr
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=TL_DEFAULT_STYLE, name=TreeListCtrlNameStr) -> bool
        
        Create the control window.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ColumnCount, get=GetColumnCount)
    %Property(name=DataView, get=GetDataView)
    %Property(name=FirstItem, get=GetFirstItem)
    %Property(name=RootItem, get=GetRootItem)
    %Property(name=Selection, get=GetSelection)
    %Property(name=Selections, get=GetSelections)
    %Property(name=SortColumn, get=GetSortColumn, set=SetSortColumn)
    %Property(name=View, get=GetView)
};  // end of class wxTreeListCtrl


class wxTreeListEvent : wxNotifyEvent
{
    %Docstring
        TreeListEvent()
        
        Event generated by wxTreeListCtrl.
    %End
    %TypeHeaderCode
        #include <wx/treelist.h>
    %End

public:
    wxTreeListEvent();

    wxTreeListItem GetItem() const;
    %Docstring
        GetItem() -> TreeListItem
        
        Return the item affected by the event.
    %End

    wxCheckBoxState GetOldCheckedState() const;
    %Docstring
        GetOldCheckedState() -> CheckBoxState
        
        Return the previous state of the item checkbox.
    %End

    unsigned GetColumn() const;
    %Docstring
        GetColumn() -> unsigned
        
        Return the column affected by the event.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxTreeListEvent& operator=(const wxTreeListEvent&);


    public:


    %Property(name=Column, get=GetColumn)
    %Property(name=Item, get=GetItem)
    %Property(name=OldCheckedState, get=GetOldCheckedState)
};  // end of class wxTreeListEvent


const wxTreeListItem wxTLI_FIRST;

const wxTreeListItem wxTLI_LAST;

%Extract(id=pycode_dataview)
EVT_TREELIST_SELECTION_CHANGED = wx.PyEventBinder( wxEVT_TREELIST_SELECTION_CHANGED )
EVT_TREELIST_ITEM_EXPANDING =    wx.PyEventBinder( wxEVT_TREELIST_ITEM_EXPANDING )
EVT_TREELIST_ITEM_EXPANDED =     wx.PyEventBinder( wxEVT_TREELIST_ITEM_EXPANDED )
EVT_TREELIST_ITEM_CHECKED =      wx.PyEventBinder( wxEVT_TREELIST_ITEM_CHECKED )
EVT_TREELIST_ITEM_ACTIVATED =    wx.PyEventBinder( wxEVT_TREELIST_ITEM_ACTIVATED )
EVT_TREELIST_ITEM_CONTEXT_MENU = wx.PyEventBinder( wxEVT_TREELIST_ITEM_CONTEXT_MENU )
EVT_TREELIST_COLUMN_SORTED =     wx.PyEventBinder( wxEVT_TREELIST_COLUMN_SORTED )

# deprecated wxEVT aliases
wxEVT_COMMAND_TREELIST_SELECTION_CHANGED  = wxEVT_TREELIST_SELECTION_CHANGED
wxEVT_COMMAND_TREELIST_ITEM_EXPANDING     = wxEVT_TREELIST_ITEM_EXPANDING
wxEVT_COMMAND_TREELIST_ITEM_EXPANDED      = wxEVT_TREELIST_ITEM_EXPANDED
wxEVT_COMMAND_TREELIST_ITEM_CHECKED       = wxEVT_TREELIST_ITEM_CHECKED
wxEVT_COMMAND_TREELIST_ITEM_ACTIVATED     = wxEVT_TREELIST_ITEM_ACTIVATED
wxEVT_COMMAND_TREELIST_ITEM_CONTEXT_MENU  = wxEVT_TREELIST_ITEM_CONTEXT_MENU
wxEVT_COMMAND_TREELIST_COLUMN_SORTED      = wxEVT_TREELIST_COLUMN_SORTED

%End


//---------------------------------------------------------------------------

