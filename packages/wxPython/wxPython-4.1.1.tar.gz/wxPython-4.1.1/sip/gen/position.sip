//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxPosition
{
    %Docstring
        Position()
        Position(row, col)
        
        This class represents the position of an item in any kind of grid of
        rows and columns such as wxGridBagSizer, or wxHVScrolledWindow.
    %End
    %TypeHeaderCode
        #include <wx/position.h>
    %End

public:
    wxPosition();

    wxPosition(
        int row,
        int col
    );

    bool operator==(
        const wxPosition & pos
    ) const;

    bool operator!=(
        const wxPosition & pos
    ) const;

    wxPosition & operator+=(
        const wxPosition & pos
    );

    wxPosition & operator+=(
        const wxSize & size
    );

    wxPosition & operator-=(
        const wxPosition & pos
    );

    wxPosition & operator-=(
        const wxSize & size
    );

    wxPosition operator+(
        const wxPosition & pos
    ) const;

    wxPosition operator+(
        const wxSize & size
    ) const;

    wxPosition operator-(
        const wxPosition & pos
    ) const;

    wxPosition operator-(
        const wxSize & size
    ) const;

    int GetCol() const;
    %Docstring
        GetCol() -> int
        
        A synonym for GetColumn().
    %End

    int GetColumn() const;
    %Docstring
        GetColumn() -> int
        
        Get the current row value.
    %End

    int GetRow() const;
    %Docstring
        GetRow() -> int
        
        Get the current row value.
    %End

    void SetCol(
        int column
    );
    %Docstring
        SetCol(column)
        
        A synonym for SetColumn().
    %End

    void SetColumn(
        int column
    );
    %Docstring
        SetColumn(column)
        
        Set a new column value.
    %End

    void SetRow(
        int row
    );
    %Docstring
        SetRow(row)
        
        Set a new row value.
    %End

    PyObject* Get();
    %Docstring
        Get() -> (row,col)
        
        Return the row and col properties as a tuple.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxPosition_Get(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxPosition_Get(wxPosition* self)
    {
        wxPyThreadBlocker blocker;
        return sipBuildResult(0, "(ii)", self->GetRow(), self->GetCol());
    }
    %End

    public:


    %Property(name=Col, get=GetCol, set=SetCol)
    %Property(name=Column, get=GetColumn, set=SetColumn)
    %Property(name=Row, get=GetRow, set=SetRow)
    %ConvertToTypeCode
        // is it just a typecheck?
        if (!sipIsErr) {
            // is it already an instance of wxPosition?
            if (sipCanConvertToType(sipPy, sipType_wxPosition, SIP_NO_CONVERTORS))
                return 1;
        
            if (wxPyNumberSequenceCheck(sipPy, 2)) {
                return 1;
            }
            return 0;
        }
        
         // otherwise do the conversion
         if (sipCanConvertToType(sipPy, sipType_wxPosition, SIP_NO_CONVERTORS)) {
             // Just fetch the existing instance
             *sipCppPtr = reinterpret_cast<wxPosition*>(sipConvertToType(
                     sipPy, sipType_wxPosition, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
             return 0;  // not a new instance
         }
        
         // or create a new instance
         PyObject* o1 = PySequence_ITEM(sipPy, 0);
         PyObject* o2 = PySequence_ITEM(sipPy, 1);
         *sipCppPtr = new wxPosition(wxPyInt_AsLong(o1), wxPyInt_AsLong(o2));
         Py_DECREF(o1);
         Py_DECREF(o2);
         return SIP_TEMPORARY;
    %End
};  // end of class wxPosition


%Extract(id=pycode_core)
def _Position_GetIM(self):
    """
    Returns an immutable representation of the ``wx.Position`` object, based on ``namedtuple``.
    
    This new object is hashable and can be used as a dictionary key,
    be added to sets, etc.  It can be converted back into a real ``wx.Position``
    with a simple statement like this: ``obj = wx.Position(imObj)``.
    """
    return _im_Position(*self.Get())
Position.GetIM = _Position_GetIM
del _Position_GetIM
%End

%Extract(id=pycode_core)
def _Position___str__(self):
    return str(self.Get())
Position.__str__ = _Position___str__
del _Position___str__
%End

%Extract(id=pycode_core)
def _Position___repr__(self):
    return "wx.Position"+str(self.Get())
Position.__repr__ = _Position___repr__
del _Position___repr__
%End

%Extract(id=pycode_core)
def _Position___len__(self):
    return len(self.Get())
Position.__len__ = _Position___len__
del _Position___len__
%End

%Extract(id=pycode_core)
def _Position___nonzero__(self):
    return self.Get() != (0,0)
Position.__nonzero__ = _Position___nonzero__
del _Position___nonzero__
%End

%Extract(id=pycode_core)
def _Position___bool__(self):
    return self.Get() != (0,0)
Position.__bool__ = _Position___bool__
del _Position___bool__
%End

%Extract(id=pycode_core)
def _Position___reduce__(self):
    return (Position, self.Get())
Position.__reduce__ = _Position___reduce__
del _Position___reduce__
%End

%Extract(id=pycode_core)
def _Position___getitem__(self, idx):
    return self.Get()[idx]
Position.__getitem__ = _Position___getitem__
del _Position___getitem__
%End

%Extract(id=pycode_core)
def _Position___setitem__(self, idx, val):
    if idx == 0: self.Row = val
    elif idx == 1: self.Col = val
    else: raise IndexError
Position.__setitem__ = _Position___setitem__
del _Position___setitem__
%End

%Extract(id=pycode_core)
Position.__safe_for_unpickling__ = True

%End

%Extract(id=pycode_core)
Position.IM = property(Position.GetIM)
%End

%Extract(id=pycode_core)
from collections import namedtuple
_im_Position = namedtuple('_im_Position', ['Row', 'Col'])
del namedtuple

%End


//---------------------------------------------------------------------------

