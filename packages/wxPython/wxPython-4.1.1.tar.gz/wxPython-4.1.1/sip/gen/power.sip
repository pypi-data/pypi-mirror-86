//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/power.h>
        #ifndef wxHAS_POWER_EVENTS
        // Dummy class and other definitions for platforms that don't have power events

        class wxPowerEvent : public wxEvent
        {
        public:
            wxPowerEvent() {}
            wxPowerEvent(wxEventType evtType) : wxEvent(wxID_NONE, evtType) {}
            void Veto() {}
            bool IsVetoed() const { return false; }
            virtual wxEvent *Clone() const { return new wxPowerEvent(*this); }
        };

        enum {
            wxEVT_POWER_SUSPENDING,
            wxEVT_POWER_SUSPENDED,
            wxEVT_POWER_SUSPEND_CANCEL,
            wxEVT_POWER_RESUME,
        };
        #endif
        
%End


//---------------------------------------------------------------------------

enum wxPowerType
{
    wxPOWER_SOCKET,
    wxPOWER_BATTERY,
    wxPOWER_UNKNOWN
};

enum wxBatteryState
{
    wxBATTERY_NORMAL_STATE,
    wxBATTERY_LOW_STATE,
    wxBATTERY_CRITICAL_STATE,
    wxBATTERY_SHUTDOWN_STATE,
    wxBATTERY_UNKNOWN_STATE
};

enum wxPowerResourceKind
{
    wxPOWER_RESOURCE_SCREEN,
    wxPOWER_RESOURCE_SYSTEM
};

wxEventType wxEVT_POWER_SUSPENDING   /PyName=wxEVT_POWER_SUSPENDING/;

wxEventType wxEVT_POWER_SUSPENDED   /PyName=wxEVT_POWER_SUSPENDED/;

wxEventType wxEVT_POWER_SUSPEND_CANCEL   /PyName=wxEVT_POWER_SUSPEND_CANCEL/;

wxEventType wxEVT_POWER_RESUME   /PyName=wxEVT_POWER_RESUME/;

class wxPowerEvent : wxEvent
{
    %Docstring
        PowerEvent()
        PowerEvent(evtType)
        
        The power events are generated when the system power state changes,
        e.g.
    %End
    %TypeHeaderCode
        #include <wx/power.h>
    %End

public:
    wxPowerEvent();

    wxPowerEvent(
        wxEventType evtType
    );

    void Veto();
    %Docstring
        Veto()
        
        Call this to prevent suspend from taking place in
        wxEVT_POWER_SUSPENDING handler (it is ignored for all the others).
    %End

    bool IsVetoed() const;
    %Docstring
        IsVetoed() -> bool
        
        Returns whether Veto has been called.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxPowerEvent& operator=(const wxPowerEvent&);


};  // end of class wxPowerEvent


class wxPowerResource
{
    %Docstring
        Helper functions for acquiring and releasing the given power resource.
    %End
    %TypeHeaderCode
        #include <wx/power.h>
    %End

public:
    static
    bool Acquire(
        wxPowerResourceKind kind,
        const wxString & reason = wxString()
    );
    %Docstring
        Acquire(kind, reason="") -> bool
        
        Acquire a power resource for the application.
    %End

    static
    void Release(
        wxPowerResourceKind kind
    );
    %Docstring
        Release(kind)
        
        Release a previously acquired power resource.
    %End

};  // end of class wxPowerResource


class wxPowerResourceBlocker
{
    %Docstring
        PowerResourceBlocker(kind, reason="")
        
        Helper RAII class ensuring that power resources are released.
    %End
    %TypeHeaderCode
        #include <wx/power.h>
    %End

public:
    wxPowerResourceBlocker(
        wxPowerResourceKind kind,
        const wxString & reason = wxString()
    );

    ~wxPowerResourceBlocker();

    bool IsInEffect() const;
    %Docstring
        IsInEffect() -> bool
        
        Returns whether the power resource could be acquired.
    %End

    private:
        wxPowerResourceBlocker(const wxPowerResourceBlocker&);


    private:
        wxPowerResourceBlocker& operator=(const wxPowerResourceBlocker&);


};  // end of class wxPowerResourceBlocker


%Extract(id=pycode_core)
def _PowerResourceBlocker___enter__(self):
    return self
PowerResourceBlocker.__enter__ = _PowerResourceBlocker___enter__
del _PowerResourceBlocker___enter__
%End

%Extract(id=pycode_core)
def _PowerResourceBlocker___exit__(self, exc_type, exc_val, exc_tb):
    pass
PowerResourceBlocker.__exit__ = _PowerResourceBlocker___exit__
del _PowerResourceBlocker___exit__
%End

%Extract(id=pycode_core)
EVT_POWER_SUSPENDING       = wx.PyEventBinder( wxEVT_POWER_SUSPENDING , 1 )
EVT_POWER_SUSPENDED        = wx.PyEventBinder( wxEVT_POWER_SUSPENDED , 1 )
EVT_POWER_SUSPEND_CANCEL   = wx.PyEventBinder( wxEVT_POWER_SUSPEND_CANCEL , 1 )
EVT_POWER_RESUME           = wx.PyEventBinder( wxEVT_POWER_RESUME , 1 )

%End


//---------------------------------------------------------------------------

