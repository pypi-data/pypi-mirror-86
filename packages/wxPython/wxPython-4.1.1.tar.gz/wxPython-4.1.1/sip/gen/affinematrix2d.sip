//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxMatrix2D
{
    %Docstring
        Matrix2D(v11=1, v12=0, v21=0, v22=1)
        
        A simple container for 2x2 matrix.
    %End
    %TypeHeaderCode
        #include <wx/affinematrix2dbase.h>
    %End

public:
    wxMatrix2D(
        wxDouble v11 = 1,
        wxDouble v12 = 0,
        wxDouble v21 = 0,
        wxDouble v22 = 1
    );

    wxDouble m_11;

    wxDouble m_12;

    wxDouble m_21;

    wxDouble m_22;

};  // end of class wxMatrix2D


class wxAffineMatrix2DBase   /Abstract/
{
    %Docstring
        AffineMatrix2DBase()
        
        A 2x3 matrix representing an affine 2D transformation.
    %End
    %TypeHeaderCode
        #include <wx/affinematrix2dbase.h>
    %End

public:
    wxAffineMatrix2DBase();

    virtual
    ~wxAffineMatrix2DBase();

    virtual
    bool IsEqual(
        const wxAffineMatrix2DBase & t
    ) const = 0;
    %Docstring
        IsEqual(t) -> bool
        
        Check that this matrix is identical with t.
    %End

    bool operator==(
        const wxAffineMatrix2DBase & t
    ) const;

    virtual
    void Set(
        const wxMatrix2D & mat2D,
        const wxPoint2DDouble & tr
    ) = 0;
    %Docstring
        Set(mat2D, tr)
        
        Set all elements of this matrix.
    %End

    virtual
    void Get(
        wxMatrix2D * mat2D   /Out/,
        wxPoint2DDouble * tr   /Out/
    ) const = 0;
    %Docstring
        Get() -> (mat2D, tr)
        
        Get the component values of the matrix.
    %End

    virtual
    void Concat(
        const wxAffineMatrix2DBase & t
    ) = 0;
    %Docstring
        Concat(t)
        
        Concatenate this matrix with another one.
    %End

    virtual
    bool Invert() = 0;
    %Docstring
        Invert() -> bool
        
        Invert this matrix.
    %End

    virtual
    bool IsIdentity() const = 0;
    %Docstring
        IsIdentity() -> bool
        
        Check if this is the identity matrix.
    %End

    bool operator!=(
        const wxAffineMatrix2DBase & t
    ) const;

    virtual
    void Translate(
        wxDouble dx,
        wxDouble dy
    ) = 0;
    %Docstring
        Translate(dx, dy)
        
        Add the translation to this matrix.
    %End

    virtual
    void Scale(
        wxDouble xScale,
        wxDouble yScale
    ) = 0;
    %Docstring
        Scale(xScale, yScale)
        
        Add scaling to this matrix.
    %End

    virtual
    void Rotate(
        wxDouble cRadians
    ) = 0;
    %Docstring
        Rotate(cRadians)
        
        Add clockwise rotation to this matrix.
    %End

    void Mirror(
        int direction = wxHORIZONTAL
    );
    %Docstring
        Mirror(direction=HORIZONTAL)
        
        Add mirroring to this matrix.
    %End

    wxPoint2DDouble TransformPoint(
        const wxPoint2DDouble & p
    ) const;
    %Docstring
        TransformPoint(p) -> Point2DDouble
        TransformPoint(x, y) -> (x, y)
        
        Applies this matrix to the point.
    %End

    void TransformPoint(
        wxDouble * x   /In, Out/,
        wxDouble * y   /In, Out/
    ) const;

    wxPoint2DDouble TransformDistance(
        const wxPoint2DDouble & p
    ) const;
    %Docstring
        TransformDistance(p) -> Point2DDouble
        TransformDistance(dx, dy) -> (dx, dy)
        
        Applies the linear part of this matrix, i.e. without translation.
    %End

    void TransformDistance(
        wxDouble * dx   /In, Out/,
        wxDouble * dy   /In, Out/
    ) const;

};  // end of class wxAffineMatrix2DBase


class wxAffineMatrix2D : wxAffineMatrix2DBase
{
    %Docstring
        AffineMatrix2D()
        
        A 3x2 matrix representing an affine 2D transformation.
    %End
    %TypeHeaderCode
        #include <wx/affinematrix2d.h>
    %End

public:
    wxAffineMatrix2D();

    void IsEqual(
        const wxAffineMatrix2DBase & t
    );
    %Docstring
        IsEqual(t)
        
        Check that this matrix is identical with t.
    %End

    bool operator==(
        const wxAffineMatrix2DBase & t
    ) const;

    virtual
    void Get(
        wxMatrix2D * mat2D   /Out/,
        wxPoint2DDouble * tr   /Out/
    ) const;
    %Docstring
        Get() -> (mat2D, tr)
        
        Get the component values of the matrix.
    %End

    virtual
    void Set(
        const wxMatrix2D & mat2D,
        const wxPoint2DDouble & tr
    );
    %Docstring
        Set(mat2D, tr)
        
        Set all elements of this matrix.
    %End

    virtual
    void Concat(
        const wxAffineMatrix2DBase & t
    );
    %Docstring
        Concat(t)
        
        Concatenate this matrix with another one.
    %End

    virtual
    bool Invert();
    %Docstring
        Invert() -> bool
        
        Invert this matrix.
    %End

    virtual
    bool IsIdentity() const;
    %Docstring
        IsIdentity() -> bool
        
        Check if this is the identity matrix.
    %End

    bool operator!=(
        const wxAffineMatrix2DBase & t
    ) const;

    virtual
    void Translate(
        wxDouble dx,
        wxDouble dy
    );
    %Docstring
        Translate(dx, dy)
        
        Add the translation to this matrix.
    %End

    virtual
    void Scale(
        wxDouble xScale,
        wxDouble yScale
    );
    %Docstring
        Scale(xScale, yScale)
        
        Add scaling to this matrix.
    %End

    void Mirror(
        int direction = wxHORIZONTAL
    );
    %Docstring
        Mirror(direction=HORIZONTAL)
        
        Add mirroring to this matrix.
    %End

    virtual
    void Rotate(
        wxDouble cRadians
    );
    %Docstring
        Rotate(cRadians)
        
        Add clockwise rotation to this matrix.
    %End

    wxPoint2DDouble TransformPoint(
        const wxPoint2DDouble & p
    ) const;
    %Docstring
        TransformPoint(p) -> Point2DDouble
        TransformPoint(x, y) -> (x, y)
        
        Applies this matrix to the point.
    %End

    void TransformPoint(
        wxDouble * x   /In, Out/,
        wxDouble * y   /In, Out/
    ) const;

    wxPoint2DDouble TransformDistance(
        const wxPoint2DDouble & p
    ) const;
    %Docstring
        TransformDistance(p) -> Point2DDouble
        TransformDistance(dx, dy) -> (dx, dy)
        
        Applies the linear part of this matrix, i.e. without translation.
    %End

    void TransformDistance(
        wxDouble * dx   /In, Out/,
        wxDouble * dy   /In, Out/
    ) const;

};  // end of class wxAffineMatrix2D



//---------------------------------------------------------------------------

