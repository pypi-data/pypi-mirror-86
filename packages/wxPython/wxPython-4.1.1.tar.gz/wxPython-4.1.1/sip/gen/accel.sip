//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

enum wxAcceleratorEntryFlags
{
    wxACCEL_NORMAL,
    wxACCEL_ALT,
    wxACCEL_CTRL,
    wxACCEL_SHIFT,
    wxACCEL_RAW_CTRL,
    wxACCEL_CMD
};

class wxAcceleratorEntry
{
    %Docstring
        AcceleratorEntry(flags=0, keyCode=0, cmd=0, item=None)
        AcceleratorEntry(entry)
        
        An object used by an application wishing to create an accelerator
        table (see wxAcceleratorTable).
    %End
    %TypeHeaderCode
        #include <wx/accel.h>
    %End

public:
    wxAcceleratorEntry(
        int flags = 0,
        int keyCode = 0,
        int cmd = 0,
        wxMenuItem * item = NULL
    );

    wxAcceleratorEntry(
        const wxAcceleratorEntry & entry
    );

    int GetCommand() const;
    %Docstring
        GetCommand() -> int
        
        Returns the command identifier for the accelerator table entry.
    %End

    int GetFlags() const;
    %Docstring
        GetFlags() -> int
        
        Returns the flags for the accelerator table entry.
    %End

    int GetKeyCode() const;
    %Docstring
        GetKeyCode() -> int
        
        Returns the keycode for the accelerator table entry.
    %End

    wxMenuItem * GetMenuItem() const;
    %Docstring
        GetMenuItem() -> MenuItem
        
        Returns the menu item associated with this accelerator entry.
    %End

    void Set(
        int flags,
        int keyCode,
        int cmd,
        wxMenuItem * item = NULL
    );
    %Docstring
        Set(flags, keyCode, cmd, item=None)
        
        Sets the accelerator entry parameters.
    %End

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if this object is correctly initialized.
    %End

    wxString ToString() const;
    %Docstring
        ToString() -> String
        
        Returns a textual representation of this accelerator.
    %End

    wxString ToRawString() const;
    %Docstring
        ToRawString() -> String
        
        Returns a textual representation of this accelerator which is
        appropriate for saving in configuration files.
    %End

    bool FromString(
        const wxString & str
    );
    %Docstring
        FromString(str) -> bool
        
        Parses the given string and sets the accelerator accordingly.
    %End

    bool operator==(
        const wxAcceleratorEntry & entry
    ) const;

    bool operator!=(
        const wxAcceleratorEntry & entry
    ) const;

    public:


    %Property(name=Command, get=GetCommand)
    %Property(name=Flags, get=GetFlags)
    %Property(name=KeyCode, get=GetKeyCode)
    %Property(name=MenuItem, get=GetMenuItem)
};  // end of class wxAcceleratorEntry


class wxAcceleratorTable : wxObject
{
    %Docstring
        AcceleratorTable()
        AcceleratorTable(entries)
        
        An accelerator table allows the application to specify a table of
        keyboard shortcuts for menu or button commands.
    %End
    %TypeHeaderCode
        #include <wx/accel.h>
    %End

public:
    wxAcceleratorTable();

    wxAcceleratorTable(PyObject* entries)   /NoDerived/;
    %MethodCode
        PyErr_Clear();
        sipCpp = _wxAcceleratorTable_ctor(entries);
    %End
    %TypeCode
    wxAcceleratorTable* _wxAcceleratorTable_ctor(PyObject* entries)
    {
        const char* errmsg = "Expected a sequence of 3-tuples or wx.AcceleratorEntry objects.";
        if (!PySequence_Check(entries)) {
            PyErr_SetString(PyExc_TypeError, errmsg);
            return NULL;
        }
        int count = PySequence_Size(entries);
        wxAcceleratorEntry* tmpEntries = new wxAcceleratorEntry[count];
        if (! tmpEntries) {
            PyErr_SetString(PyExc_MemoryError, "Unable to allocate temporary array");
            return NULL;
        }
        int idx;
        for (idx=0; idx<count; idx++) {
            PyObject* obj = PySequence_ITEM(entries, idx);
            if (sipCanConvertToType(obj, sipType_wxAcceleratorEntry, SIP_NO_CONVERTORS)) {
                int err = 0;
                wxAcceleratorEntry* entryPtr = reinterpret_cast<wxAcceleratorEntry*>(
                    sipConvertToType(obj, sipType_wxAcceleratorEntry, NULL, 0, 0, &err));
                tmpEntries[idx] = *entryPtr;
            }
            else if (PySequence_Check(obj) && PySequence_Size(obj) == 3) {
                PyObject* o1 = PySequence_ITEM(obj, 0);
                PyObject* o2 = PySequence_ITEM(obj, 1);
                PyObject* o3 = PySequence_ITEM(obj, 2);
                tmpEntries[idx].Set(wxPyInt_AsLong(o1), wxPyInt_AsLong(o2), wxPyInt_AsLong(o3));
                Py_DECREF(o1);
                Py_DECREF(o2);
                Py_DECREF(o3);
            }
            else {
                PyErr_SetString(PyExc_TypeError, errmsg);
                return NULL;
            }
            Py_DECREF(obj);
        }
        
        wxAcceleratorTable* table = new wxAcceleratorTable(count, tmpEntries);
        delete [] tmpEntries;
        return table;
    }
    %End

    ~wxAcceleratorTable();

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if the accelerator table is valid.
    %End

};  // end of class wxAcceleratorTable


wxAcceleratorTable wxNullAcceleratorTable;

%Extract(id=pycode_core)
@wx.deprecated
def GetAccelFromString(label):
    accel = wx.AcceleratorEntry()
    accel.FromString(label)
    return accel

%End


//---------------------------------------------------------------------------

