//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _aui.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxAuiMDIParentFrame : wxFrame
{
    %Docstring
        AuiMDIParentFrame()
        AuiMDIParentFrame(parent, winid=wx.ID_ANY, title=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.DEFAULT_FRAME_STYLE|wx.VSCROLL|wx.HSCROLL, name=wx.FrameNameStr)
    %End
    %TypeHeaderCode
        #include <wx/aui/tabmdi.h>
    %End

public:
    wxAuiMDIParentFrame();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxAuiMDIParentFrame(
        wxWindow * parent,
        wxWindowID winid = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL,
        const wxString & name = wxFrameNameStr
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxAuiMDIParentFrame();

    bool Create(
        wxWindow * parent,
        wxWindowID winid = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL,
        const wxString & name = wxFrameNameStr
    )   /TransferThis/;
    %Docstring
        Create(parent, winid=wx.ID_ANY, title=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.DEFAULT_FRAME_STYLE|wx.VSCROLL|wx.HSCROLL, name=wx.FrameNameStr) -> bool
    %End

    void SetArtProvider(
        wxAuiTabArt * provider   /Transfer/
    );
    %Docstring
        SetArtProvider(provider)
    %End

    wxAuiTabArt * GetArtProvider();
    %Docstring
        GetArtProvider() -> AuiTabArt
    %End

    wxAuiNotebook * GetNotebook() const;
    %Docstring
        GetNotebook() -> AuiNotebook
    %End

    wxMenu * GetWindowMenu() const;
    %Docstring
        GetWindowMenu() -> wx.Menu
    %End

    void SetWindowMenu(
        wxMenu * pMenu
    );
    %Docstring
        SetWindowMenu(pMenu)
    %End

    void SetMenuBar(
        wxMenuBar * menuBar   /Transfer/
    );
    %Docstring
        SetMenuBar(menuBar)
        
        Tells the frame to show the given menu bar.
    %End

    void SetChildMenuBar(
        wxAuiMDIChildFrame * pChild
    );
    %Docstring
        SetChildMenuBar(pChild)
    %End

    wxAuiMDIChildFrame * GetActiveChild() const;
    %Docstring
        GetActiveChild() -> AuiMDIChildFrame
    %End

    void SetActiveChild(
        wxAuiMDIChildFrame * pChildFrame
    );
    %Docstring
        SetActiveChild(pChildFrame)
    %End

    wxAuiMDIClientWindow * GetClientWindow() const;
    %Docstring
        GetClientWindow() -> AuiMDIClientWindow
    %End

    wxAuiMDIClientWindow * OnCreateClient();
    %Docstring
        OnCreateClient() -> AuiMDIClientWindow
    %End

    void Cascade();
    %Docstring
        Cascade()
    %End

    void Tile(
        wxOrientation orient = wxHORIZONTAL
    );
    %Docstring
        Tile(orient=wx.HORIZONTAL)
    %End

    void ArrangeIcons();
    %Docstring
        ArrangeIcons()
    %End

    void ActivateNext();
    %Docstring
        ActivateNext()
    %End

    void ActivatePrevious();
    %Docstring
        ActivatePrevious()
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ActiveChild, get=GetActiveChild, set=SetActiveChild)
    %Property(name=ArtProvider, get=GetArtProvider, set=SetArtProvider)
    %Property(name=ClientWindow, get=GetClientWindow)
    %Property(name=Notebook, get=GetNotebook)
    %Property(name=WindowMenu, get=GetWindowMenu, set=SetWindowMenu)
};  // end of class wxAuiMDIParentFrame


class wxAuiMDIChildFrame : wxTDIChildFrame
{
    %Docstring
        AuiMDIChildFrame()
        AuiMDIChildFrame(parent, winid=wx.ID_ANY, title=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.DEFAULT_FRAME_STYLE, name=wx.FrameNameStr)
    %End
    %TypeHeaderCode
        #include <wx/aui/tabmdi.h>
    %End

public:
    wxAuiMDIChildFrame();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxAuiMDIChildFrame(
        wxAuiMDIParentFrame * parent,
        wxWindowID winid = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_FRAME_STYLE,
        const wxString & name = wxFrameNameStr
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxAuiMDIChildFrame();

    bool Create(
        wxAuiMDIParentFrame * parent,
        wxWindowID winid = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_FRAME_STYLE,
        const wxString & name = wxFrameNameStr
    )   /TransferThis/;
    %Docstring
        Create(parent, winid=wx.ID_ANY, title=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.DEFAULT_FRAME_STYLE, name=wx.FrameNameStr) -> bool
    %End

    void SetMenuBar(
        wxMenuBar * menuBar   /Transfer/
    );
    %Docstring
        SetMenuBar(menuBar)
    %End

    wxMenuBar * GetMenuBar() const;
    %Docstring
        GetMenuBar() -> wx.MenuBar
    %End

    void SetTitle(
        const wxString & title
    );
    %Docstring
        SetTitle(title)
    %End

    wxString GetTitle() const;
    %Docstring
        GetTitle() -> String
    %End

    void SetIcons(
        const wxIconBundle & icons
    );
    %Docstring
        SetIcons(icons)
    %End

    const wxIconBundle & GetIcons() const;
    %Docstring
        GetIcons() -> wx.IconBundle
    %End

    void SetIcon(
        const wxIcon & icon
    );
    %Docstring
        SetIcon(icon)
    %End

    const wxIcon & GetIcon() const;
    %Docstring
        GetIcon() -> wx.Icon
    %End

    void Activate();
    %Docstring
        Activate()
    %End

    virtual
    bool Destroy();
    %Docstring
        Destroy() -> bool
        
        Destroys the window safely.
    %End

    virtual
    bool Show(
        bool show = true
    );
    %Docstring
        Show(show=True) -> bool
        
        Shows or hides the window.
    %End

    wxStatusBar * CreateStatusBar(
        int number = 1,
        long style = 1,
        wxWindowID winid = 1,
        const wxString & name = wxEmptyString
    );
    %Docstring
        CreateStatusBar(number=1, style=1, winid=1, name=wx.EmptyString) -> wx.StatusBar
    %End

    wxStatusBar * GetStatusBar() const;
    %Docstring
        GetStatusBar() -> wx.StatusBar
    %End

    void SetStatusText(
        const wxString & text,
        int number = 0
    );
    %Docstring
        SetStatusText(text, number=0)
    %End

    void SetStatusWidths(
        const wxArrayInt& widths
    );
    %Docstring
        SetStatusWidths(widths)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxAuiMDIChildFrame_SetStatusWidths(sipCpp, widths);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxAuiMDIChildFrame_SetStatusWidths(wxAuiMDIChildFrame* self, const wxArrayInt* widths)
    {
        const int* ptr = &widths->front();
        self->SetStatusWidths(widths->size(), ptr);
    }
    %End

    wxToolBar * CreateToolBar(
        long style,
        wxWindowID winid,
        const wxString & name
    );
    %Docstring
        CreateToolBar(style, winid, name) -> wx.ToolBar
    %End

    wxToolBar * GetToolBar() const;
    %Docstring
        GetToolBar() -> wx.ToolBar
    %End

    void Maximize(
        bool maximize = true
    );
    %Docstring
        Maximize(maximize=True)
    %End

    void Restore();
    %Docstring
        Restore()
    %End

    void Iconize(
        bool iconize = true
    );
    %Docstring
        Iconize(iconize=True)
    %End

    bool IsMaximized() const;
    %Docstring
        IsMaximized() -> bool
    %End

    bool IsIconized() const;
    %Docstring
        IsIconized() -> bool
    %End

    bool ShowFullScreen(
        bool show,
        long style
    );
    %Docstring
        ShowFullScreen(show, style) -> bool
    %End

    bool IsFullScreen() const;
    %Docstring
        IsFullScreen() -> bool
    %End

    bool IsTopLevel() const;
    %Docstring
        IsTopLevel() -> bool
        
        Returns true if the given window is a top-level one.
    %End

    void SetMDIParentFrame(
        wxAuiMDIParentFrame * parent
    );
    %Docstring
        SetMDIParentFrame(parent)
    %End

    wxAuiMDIParentFrame * GetMDIParentFrame() const;
    %Docstring
        GetMDIParentFrame() -> AuiMDIParentFrame
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Icon, get=GetIcon, set=SetIcon)
    %Property(name=Icons, get=GetIcons, set=SetIcons)
    %Property(name=MDIParentFrame, get=GetMDIParentFrame, set=SetMDIParentFrame)
    %Property(name=MenuBar, get=GetMenuBar, set=SetMenuBar)
    %Property(name=StatusBar, get=GetStatusBar)
    %Property(name=Title, get=GetTitle, set=SetTitle)
    %Property(name=ToolBar, get=GetToolBar)
};  // end of class wxAuiMDIChildFrame


class wxAuiMDIClientWindow : wxAuiNotebook
{
    %Docstring
        AuiMDIClientWindow()
        AuiMDIClientWindow(parent, style=0)
    %End
    %TypeHeaderCode
        #include <wx/aui/tabmdi.h>
    %End

public:
    wxAuiMDIClientWindow();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxAuiMDIClientWindow(
        wxAuiMDIParentFrame * parent   /TransferThis/,
        long style = 0
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool CreateClient(
        wxAuiMDIParentFrame * parent,
        long style = wxVSCROLL|wxHSCROLL
    );
    %Docstring
        CreateClient(parent, style=wx.VSCROLL|wx.HSCROLL) -> bool
    %End

    int SetSelection(
        size_t new_page
    );
    %Docstring
        SetSelection(new_page) -> int
        
        Sets the page selection.
    %End

    wxAuiMDIChildFrame * GetActiveChild();
    %Docstring
        GetActiveChild() -> AuiMDIChildFrame
    %End

    void SetActiveChild(
        wxAuiMDIChildFrame * pChildFrame
    );
    %Docstring
        SetActiveChild(pChildFrame)
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ActiveChild, get=GetActiveChild, set=SetActiveChild)
};  // end of class wxAuiMDIClientWindow



//---------------------------------------------------------------------------

