//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------
%ModuleCode
        wxEvent* testCppClone(wxEvent& evt) {
            return evt.Clone();
        }
%End

//---------------------------------------------------------------------------

class wxPyEvent : wxEvent
{
    %Docstring
        PyEvent(id=0, eventType=wxEVT_NULL)
        
        :class:`PyEvent` can be used as a base class for implementing custom
        event types in Python. You should derive from this class instead
        of :class:`Event` because this class is Python-aware and is able to
        transport its Python bits safely through the wxWidgets event
        system and have them still be there when the event handler is
        invoked. Note that since :class:`PyEvent` is taking care of preserving
        the extra attributes that have been set then you do not need to
        override the Clone method in your derived classes.
        
        :see: :class:`PyCommandEvent`
    %End
    %TypeHeaderCode
        #include "pyevent.h"
    %End
    %TypeCode
        IMPLEMENT_DYNAMIC_CLASS(wxPyEvent, wxEvent);
    %End
public:
    wxPyEvent(
        int id = 0,
        wxEventType eventType = wxEVT_NULL
    );

    PyObject* __getattr__(
        PyObject* name
    );
    %Docstring
        __getattr__(name) -> PyObject
    %End
    %MethodCode
        sipRes = sipCpp->__getattr__(name);
    %End

    void __delattr__(
        PyObject* name
    );
    %Docstring
        __delattr__(name)
    %End
    %MethodCode
        sipCpp->__delattr__(name);
    %End

    void __setattr__(
        PyObject* name,
        PyObject* value
    );
    %Docstring
        __setattr__(name, value)
    %End
    %MethodCode
        sipCpp->__setattr__(name, value);
    %End

    virtual
    wxEvent* Clone() const   /Factory/;
    %Docstring
        Clone() -> Event
    %End

    PyObject* _getAttrDict();
    %Docstring
        _getAttrDict() -> PyObject
        
        Gives access to the internal object that is tracking the event's
        python attributes.
    %End

};  // end of class wxPyEvent


%Extract(id=pycode_core)
def _PyEvent_Clone(self):
    """
    Make a new instance of the event that is a copy of self.
    
    Through the magic of Python this implementation should work for
    this and all derived classes.
    """
    # Create a new instance of the same type as this instance and
    # then invoke the C++ copy constructor to copy the C++ parts and
    # any custom attributes.
    clone = wx.PyEvent.__new__(self.__class__)
    wx.PyEvent.__init__(clone, self)
    return clone
PyEvent.Clone = _PyEvent_Clone
del _PyEvent_Clone
%End

class wxPyCommandEvent : wxCommandEvent
{
    %Docstring
        PyCommandEvent(eventType=wxEVT_NULL, id=0)
        
        :class:`PyCommandEvent` can be used as a base class for implementing
        custom event types in Python. You should derive from this class
        instead of :class:`CommandEvent` because this class is Python-aware
        and is able to transport its Python bits safely through the
        wxWidgets event system and have them still be there when the
        event handler is invoked. Note that since :class:`PyCommandEvent` is
        taking care of preserving the extra attributes that have been set
        then you do not need to override the Clone method in your
        derived classes.
        
        :see: :class:`PyEvent`
    %End
    %TypeHeaderCode
        #include "pyevent.h"
    %End
    %TypeCode
        IMPLEMENT_DYNAMIC_CLASS(wxPyCommandEvent, wxCommandEvent);
    %End
public:
    wxPyCommandEvent(
        wxEventType eventType = wxEVT_NULL,
        int id = 0
    );

    PyObject* __getattr__(
        PyObject* name
    );
    %Docstring
        __getattr__(name) -> PyObject
    %End
    %MethodCode
        sipRes = sipCpp->__getattr__(name);
    %End

    void __delattr__(
        PyObject* name
    );
    %Docstring
        __delattr__(name)
    %End
    %MethodCode
        sipCpp->__delattr__(name);
    %End

    void __setattr__(
        PyObject* name,
        PyObject* value
    );
    %Docstring
        __setattr__(name, value)
    %End
    %MethodCode
        sipCpp->__setattr__(name, value);
    %End

    virtual
    wxEvent* Clone() const   /Factory/;
    %Docstring
        Clone() -> Event
    %End

    PyObject* _getAttrDict();
    %Docstring
        _getAttrDict() -> PyObject
        
        Gives access to the internal object that is tracking the event's
        python attributes.
    %End

};  // end of class wxPyCommandEvent


%Extract(id=pycode_core)
def _PyCommandEvent_Clone(self):
    """
    Make a new instance of the event that is a copy of self.
    
    Through the magic of Python this implementation should work for
    this and all derived classes.
    """
    # Create a new instance of the same type as this instance and
    # then invoke the C++ copy constructor to copy the C++ parts and
    # any custom attributes.
    clone = wx.PyCommandEvent.__new__(self.__class__)
    wx.PyCommandEvent.__init__(clone, self)
    return clone
PyCommandEvent.Clone = _PyCommandEvent_Clone
del _PyCommandEvent_Clone
%End

wxEvent* testCppClone(wxEvent& evt);



//---------------------------------------------------------------------------

