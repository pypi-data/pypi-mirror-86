//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const char* wxMessageBoxCaptionStr;

class wxMessageDialog : wxDialog
{
    %Docstring
        MessageDialog(parent, message, caption=MessageBoxCaptionStr, style=OK|CENTRE, pos=DefaultPosition)
        
        This class represents a dialog that shows a single or multi-line
        message, with a choice of OK, Yes, No and Cancel buttons.
    %End
    %TypeHeaderCode
        #include <wx/msgdlg.h>
    %End

public:
public:
    wxMessageDialog(
        wxWindow * parent,
        const wxString & message,
        const wxString & caption = wxMessageBoxCaptionStr,
        long style = wxOK|wxCENTRE,
        const wxPoint & pos = wxDefaultPosition
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void SetExtendedMessage(
        const wxString & extendedMessage
    );
    %Docstring
        SetExtendedMessage(extendedMessage)
        
        Sets the extended message for the dialog: this message is usually an
        extension of the short message specified in the constructor or set
        with SetMessage().
    %End

    bool SetHelpLabel(
        const wxMessageDialogButtonLabel & help
    );
    %Docstring
        SetHelpLabel(help) -> bool
        
        Sets the label for the Help button.
    %End

    void SetMessage(
        const wxString & message
    );
    %Docstring
        SetMessage(message)
        
        Sets the message shown by the dialog.
    %End

    bool SetOKCancelLabels(
        const wxMessageDialogButtonLabel & ok,
        const wxMessageDialogButtonLabel & cancel
    );
    %Docstring
        SetOKCancelLabels(ok, cancel) -> bool
        
        Overrides the default labels of the OK and Cancel buttons.
    %End

    bool SetOKLabel(
        const wxMessageDialogButtonLabel & ok
    );
    %Docstring
        SetOKLabel(ok) -> bool
        
        Overrides the default label of the OK button.
    %End

    bool SetYesNoCancelLabels(
        const wxMessageDialogButtonLabel & yes,
        const wxMessageDialogButtonLabel & no,
        const wxMessageDialogButtonLabel & cancel
    );
    %Docstring
        SetYesNoCancelLabels(yes, no, cancel) -> bool
        
        Overrides the default labels of the Yes, No and Cancel buttons.
    %End

    bool SetYesNoLabels(
        const wxMessageDialogButtonLabel & yes,
        const wxMessageDialogButtonLabel & no
    );
    %Docstring
        SetYesNoLabels(yes, no) -> bool
        
        Overrides the default labels of the Yes and No buttons.
    %End

    int ShowModal();
    %Docstring
        ShowModal() -> int
        
        Shows the dialog, returning one of wxID_OK, wxID_CANCEL, wxID_YES,
        wxID_NO or wxID_HELP.
    %End

    wxString GetCaption() const;
    %Docstring
        GetCaption() -> String
    %End

    wxString GetMessage() const;
    %Docstring
        GetMessage() -> String
    %End

    wxString GetExtendedMessage() const;
    %Docstring
        GetExtendedMessage() -> String
    %End

    long GetMessageDialogStyle() const;
    %Docstring
        GetMessageDialogStyle() -> long
    %End

    bool HasCustomLabels() const;
    %Docstring
        HasCustomLabels() -> bool
    %End

    wxString GetYesLabel() const;
    %Docstring
        GetYesLabel() -> String
    %End

    wxString GetNoLabel() const;
    %Docstring
        GetNoLabel() -> String
    %End

    wxString GetOKLabel() const;
    %Docstring
        GetOKLabel() -> String
    %End

    wxString GetCancelLabel() const;
    %Docstring
        GetCancelLabel() -> String
    %End

    wxString GetHelpLabel() const;
    %Docstring
        GetHelpLabel() -> String
    %End

    long GetEffectiveIcon() const;
    %Docstring
        GetEffectiveIcon() -> long
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=CancelLabel, get=GetCancelLabel)
    %Property(name=Caption, get=GetCaption)
    %Property(name=EffectiveIcon, get=GetEffectiveIcon)
    %Property(name=ExtendedMessage, get=GetExtendedMessage, set=SetExtendedMessage)
    %Property(name=HelpLabel, get=GetHelpLabel, set=SetHelpLabel)
    %Property(name=Message, get=GetMessage, set=SetMessage)
    %Property(name=MessageDialogStyle, get=GetMessageDialogStyle)
    %Property(name=NoLabel, get=GetNoLabel)
    %Property(name=OKLabel, get=GetOKLabel, set=SetOKLabel)
    %Property(name=YesLabel, get=GetYesLabel)
};  // end of class wxMessageDialog


int wxMessageBox(
    const wxString & message,
    const wxString & caption = wxMessageBoxCaptionStr,
    int style = wxOK|wxCENTRE,
    wxWindow * parent = NULL,
    int x = wxDefaultCoord,
    int y = wxDefaultCoord
)   /ReleaseGIL/;
%Docstring
    MessageBox(message, caption=MessageBoxCaptionStr, style=OK|CENTRE, parent=None, x=DefaultCoord, y=DefaultCoord) -> int
    
    Show a general purpose message dialog.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

class wxGenericMessageDialog : wxDialog
{
    %Docstring
        GenericMessageDialog(parent, message, caption=MessageBoxCaptionStr, style=OK|CENTRE, pos=DefaultPosition)
        
        This class represents a dialog that shows a single or multi-line
        message, with a choice of OK, Yes, No and Cancel buttons.
    %End
    %TypeHeaderCode
        #include <wx/msgdlg.h>
    %End

public:
public:
    wxGenericMessageDialog(
        wxWindow * parent,
        const wxString & message,
        const wxString & caption = wxMessageBoxCaptionStr,
        long style = wxOK|wxCENTRE,
        const wxPoint & pos = wxDefaultPosition
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void SetExtendedMessage(
        const wxString & extendedMessage
    );
    %Docstring
        SetExtendedMessage(extendedMessage)
        
        Sets the extended message for the dialog: this message is usually an
        extension of the short message specified in the constructor or set
        with SetMessage().
    %End

    bool SetHelpLabel(
        const wxMessageDialogButtonLabel & help
    );
    %Docstring
        SetHelpLabel(help) -> bool
        
        Sets the label for the Help button.
    %End

    void SetMessage(
        const wxString & message
    );
    %Docstring
        SetMessage(message)
        
        Sets the message shown by the dialog.
    %End

    bool SetOKCancelLabels(
        const wxMessageDialogButtonLabel & ok,
        const wxMessageDialogButtonLabel & cancel
    );
    %Docstring
        SetOKCancelLabels(ok, cancel) -> bool
        
        Overrides the default labels of the OK and Cancel buttons.
    %End

    bool SetOKLabel(
        const wxMessageDialogButtonLabel & ok
    );
    %Docstring
        SetOKLabel(ok) -> bool
        
        Overrides the default label of the OK button.
    %End

    bool SetYesNoCancelLabels(
        const wxMessageDialogButtonLabel & yes,
        const wxMessageDialogButtonLabel & no,
        const wxMessageDialogButtonLabel & cancel
    );
    %Docstring
        SetYesNoCancelLabels(yes, no, cancel) -> bool
        
        Overrides the default labels of the Yes, No and Cancel buttons.
    %End

    bool SetYesNoLabels(
        const wxMessageDialogButtonLabel & yes,
        const wxMessageDialogButtonLabel & no
    );
    %Docstring
        SetYesNoLabels(yes, no) -> bool
        
        Overrides the default labels of the Yes and No buttons.
    %End

    int ShowModal();
    %Docstring
        ShowModal() -> int
        
        Shows the dialog, returning one of wxID_OK, wxID_CANCEL, wxID_YES,
        wxID_NO or wxID_HELP.
    %End

    wxString GetCaption() const;
    %Docstring
        GetCaption() -> String
    %End

    wxString GetMessage() const;
    %Docstring
        GetMessage() -> String
    %End

    wxString GetExtendedMessage() const;
    %Docstring
        GetExtendedMessage() -> String
    %End

    long GetMessageDialogStyle() const;
    %Docstring
        GetMessageDialogStyle() -> long
    %End

    bool HasCustomLabels() const;
    %Docstring
        HasCustomLabels() -> bool
    %End

    wxString GetYesLabel() const;
    %Docstring
        GetYesLabel() -> String
    %End

    wxString GetNoLabel() const;
    %Docstring
        GetNoLabel() -> String
    %End

    wxString GetOKLabel() const;
    %Docstring
        GetOKLabel() -> String
    %End

    wxString GetCancelLabel() const;
    %Docstring
        GetCancelLabel() -> String
    %End

    wxString GetHelpLabel() const;
    %Docstring
        GetHelpLabel() -> String
    %End

    long GetEffectiveIcon() const;
    %Docstring
        GetEffectiveIcon() -> long
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=CancelLabel, get=GetCancelLabel)
    %Property(name=Caption, get=GetCaption)
    %Property(name=EffectiveIcon, get=GetEffectiveIcon)
    %Property(name=ExtendedMessage, get=GetExtendedMessage, set=SetExtendedMessage)
    %Property(name=HelpLabel, get=GetHelpLabel, set=SetHelpLabel)
    %Property(name=Message, get=GetMessage, set=SetMessage)
    %Property(name=MessageDialogStyle, get=GetMessageDialogStyle)
    %Property(name=NoLabel, get=GetNoLabel)
    %Property(name=OKLabel, get=GetOKLabel, set=SetOKLabel)
    %Property(name=YesLabel, get=GetYesLabel)

protected:
    void AddMessageDialogCheckBox(
        wxSizer* sizer
    );
    %Docstring
        AddMessageDialogCheckBox(sizer)
        
        Can be overridden to provide more contents for the dialog
    %End

    void AddMessageDialogDetails(
        wxSizer* sizer
    );
    %Docstring
        AddMessageDialogDetails(sizer)
        
        Can be overridden to provide more contents for the dialog
    %End

};  // end of class wxGenericMessageDialog



//---------------------------------------------------------------------------

