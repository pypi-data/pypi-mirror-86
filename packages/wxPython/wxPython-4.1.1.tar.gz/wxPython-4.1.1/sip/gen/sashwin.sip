//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _adv.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/sashwin.h>
%End


//---------------------------------------------------------------------------

const int wxSW_NOBORDER;
const int wxSW_BORDER;
const int wxSW_3DSASH;
const int wxSW_3DBORDER;
const int wxSW_3D;
enum wxSashEdgePosition
{
    wxSASH_TOP,
    wxSASH_RIGHT,
    wxSASH_BOTTOM,
    wxSASH_LEFT,
    wxSASH_NONE
};

enum wxSashDragStatus
{
    wxSASH_STATUS_OK,
    wxSASH_STATUS_OUT_OF_RANGE
};

wxEventType wxEVT_SASH_DRAGGED   /PyName=wxEVT_SASH_DRAGGED/;

class wxSashWindow : wxWindow
{
    %Docstring
        SashWindow()
        SashWindow(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.CLIP_CHILDREN|SW_3D, name="sashWindow")
        
        wxSashWindow allows any of its edges to have a sash which can be
        dragged to resize the window.
    %End
    %TypeHeaderCode
        #include <wx/sashwin.h>
    %End

public:
    wxSashWindow();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxSashWindow(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxCLIP_CHILDREN|wxSW_3D,
        const wxString & name = "sashWindow"
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxSashWindow();

    int GetMaximumSizeX() const;
    %Docstring
        GetMaximumSizeX() -> int
        
        Gets the maximum window size in the x direction.
    %End

    int GetMaximumSizeY() const;
    %Docstring
        GetMaximumSizeY() -> int
        
        Gets the maximum window size in the y direction.
    %End

    int GetMinimumSizeX() const;
    %Docstring
        GetMinimumSizeX() -> int
        
        Gets the minimum window size in the x direction.
    %End

    int GetMinimumSizeY() const;
    %Docstring
        GetMinimumSizeY() -> int
        
        Gets the minimum window size in the y direction.
    %End

    bool GetSashVisible(
        wxSashEdgePosition edge
    ) const;
    %Docstring
        GetSashVisible(edge) -> bool
        
        Returns true if a sash is visible on the given edge, false otherwise.
    %End

    void SetMaximumSizeX(
        int min
    );
    %Docstring
        SetMaximumSizeX(min)
        
        Sets the maximum window size in the x direction.
    %End

    void SetMaximumSizeY(
        int min
    );
    %Docstring
        SetMaximumSizeY(min)
        
        Sets the maximum window size in the y direction.
    %End

    void SetMinimumSizeX(
        int min
    );
    %Docstring
        SetMinimumSizeX(min)
        
        Sets the minimum window size in the x direction.
    %End

    void SetMinimumSizeY(
        int min
    );
    %Docstring
        SetMinimumSizeY(min)
        
        Sets the minimum window size in the y direction.
    %End

    void SetSashVisible(
        wxSashEdgePosition edge,
        bool visible
    );
    %Docstring
        SetSashVisible(edge, visible)
        
        Call this function to make a sash visible or invisible on a particular
        edge.
    %End

    int GetEdgeMargin(
        wxSashEdgePosition edge
    ) const;
    %Docstring
        GetEdgeMargin(edge) -> int
        
        Get border size.
    %End

    void SetDefaultBorderSize(
        int width
    );
    %Docstring
        SetDefaultBorderSize(width)
        
        Sets the default sash border size.
    %End

    int GetDefaultBorderSize() const;
    %Docstring
        GetDefaultBorderSize() -> int
        
        Gets the default sash border size.
    %End

    void SetExtraBorderSize(
        int width
    );
    %Docstring
        SetExtraBorderSize(width)
        
        Sets the additional border size between child and sash window.
    %End

    int GetExtraBorderSize() const;
    %Docstring
        GetExtraBorderSize() -> int
        
        Gets the addition border size between child and sash window.
    %End

    wxSashEdgePosition SashHitTest(
        int x,
        int y,
        int tolerance = 2
    );
    %Docstring
        SashHitTest(x, y, tolerance=2) -> SashEdgePosition
        
        Tests for x, y over sash.
    %End

    void SizeWindows();
    %Docstring
        SizeWindows()
        
        Resizes subwindows.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=DefaultBorderSize, get=GetDefaultBorderSize, set=SetDefaultBorderSize)
    %Property(name=ExtraBorderSize, get=GetExtraBorderSize, set=SetExtraBorderSize)
    %Property(name=MaximumSizeX, get=GetMaximumSizeX, set=SetMaximumSizeX)
    %Property(name=MaximumSizeY, get=GetMaximumSizeY, set=SetMaximumSizeY)
    %Property(name=MinimumSizeX, get=GetMinimumSizeX, set=SetMinimumSizeX)
    %Property(name=MinimumSizeY, get=GetMinimumSizeY, set=SetMinimumSizeY)
};  // end of class wxSashWindow


class wxSashEvent : wxCommandEvent
{
    %Docstring
        SashEvent(id=0, edge=SASH_NONE)
        
        A sash event is sent when the sash of a wxSashWindow has been dragged
        by the user.
    %End
    %TypeHeaderCode
        #include <wx/sashwin.h>
    %End

public:
    wxSashEvent(
        int id = 0,
        wxSashEdgePosition edge = wxSASH_NONE
    );

    wxRect GetDragRect() const;
    %Docstring
        GetDragRect() -> wx.Rect
        
        Returns the rectangle representing the new size the window would be if
        the resize was applied.
    %End

    wxSashDragStatus GetDragStatus() const;
    %Docstring
        GetDragStatus() -> SashDragStatus
        
        Returns the status of the sash: one of wxSASH_STATUS_OK,
        wxSASH_STATUS_OUT_OF_RANGE.
    %End

    wxSashEdgePosition GetEdge() const;
    %Docstring
        GetEdge() -> SashEdgePosition
        
        Returns the dragged edge.
    %End

    void SetEdge(
        wxSashEdgePosition edge
    );
    %Docstring
        SetEdge(edge)
    %End

    void SetDragRect(
        const wxRect & rect
    );
    %Docstring
        SetDragRect(rect)
    %End

    void SetDragStatus(
        wxSashDragStatus status
    );
    %Docstring
        SetDragStatus(status)
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxSashEvent& operator=(const wxSashEvent&);


    public:


    %Property(name=DragRect, get=GetDragRect, set=SetDragRect)
    %Property(name=DragStatus, get=GetDragStatus, set=SetDragStatus)
    %Property(name=Edge, get=GetEdge, set=SetEdge)
};  // end of class wxSashEvent


%Extract(id=pycode_adv)
EVT_SASH_DRAGGED = wx.PyEventBinder( wxEVT_SASH_DRAGGED, 1 )
EVT_SASH_DRAGGED_RANGE = wx.PyEventBinder( wxEVT_SASH_DRAGGED, 2 )

%End


//---------------------------------------------------------------------------

