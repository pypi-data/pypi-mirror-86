//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _propgrid.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxPG_DEFAULT_STYLE;
const int wxPGMAN_DEFAULT_STYLE;
enum wxPG_WINDOW_STYLES
{
    wxPG_AUTO_SORT,
    wxPG_HIDE_CATEGORIES,
    wxPG_ALPHABETIC_MODE,
    wxPG_BOLD_MODIFIED,
    wxPG_SPLITTER_AUTO_CENTER,
    wxPG_TOOLTIPS,
    wxPG_HIDE_MARGIN,
    wxPG_STATIC_SPLITTER,
    wxPG_STATIC_LAYOUT,
    wxPG_LIMITED_EDITING,
    wxPG_TOOLBAR,
    wxPG_DESCRIPTION,
    wxPG_NO_INTERNAL_BORDER,
    wxPG_WINDOW_STYLE_MASK
};

enum wxPG_EX_WINDOW_STYLES
{
    wxPG_EX_INIT_NOCAT,
    wxPG_EX_NO_FLAT_TOOLBAR,
    wxPG_EX_MODE_BUTTONS,
    wxPG_EX_HELP_AS_TOOLTIPS,
    wxPG_EX_NATIVE_DOUBLE_BUFFERING,
    wxPG_EX_AUTO_UNSPECIFIED_VALUES,
    wxPG_EX_WRITEONLY_BUILTIN_ATTRIBUTES,
    wxPG_EX_HIDE_PAGE_BUTTONS,
    wxPG_EX_MULTIPLE_SELECTION,
    wxPG_EX_ENABLE_TLP_TRACKING,
    wxPG_EX_NO_TOOLBAR_DIVIDER,
    wxPG_EX_TOOLBAR_SEPARATOR,
    wxPG_EX_ALWAYS_ALLOW_FOCUS,
    wxPG_EX_WINDOW_PG_STYLE_MASK,
    wxPG_EX_WINDOW_PGMAN_STYLE_MASK,
    wxPG_EX_WINDOW_STYLE_MASK
};

enum wxPG_VALIDATION_FAILURE_BEHAVIOR_FLAGS
{
    wxPG_VFB_STAY_IN_PROPERTY,
    wxPG_VFB_BEEP,
    wxPG_VFB_MARK_CELL,
    wxPG_VFB_SHOW_MESSAGE,
    wxPG_VFB_SHOW_MESSAGEBOX,
    wxPG_VFB_SHOW_MESSAGE_ON_STATUSBAR,
    wxPG_VFB_DEFAULT
};

enum wxPG_KEYBOARD_ACTIONS
{
    wxPG_ACTION_INVALID,
    wxPG_ACTION_NEXT_PROPERTY,
    wxPG_ACTION_PREV_PROPERTY,
    wxPG_ACTION_EXPAND_PROPERTY,
    wxPG_ACTION_COLLAPSE_PROPERTY,
    wxPG_ACTION_CANCEL_EDIT,
    wxPG_ACTION_EDIT,
    wxPG_ACTION_PRESS_BUTTON,
    wxPG_ACTION_MAX
};

wxEventType wxEVT_PG_SELECTED   /PyName=wxEVT_PG_SELECTED/;

wxEventType wxEVT_PG_CHANGING   /PyName=wxEVT_PG_CHANGING/;

wxEventType wxEVT_PG_CHANGED   /PyName=wxEVT_PG_CHANGED/;

wxEventType wxEVT_PG_HIGHLIGHTED   /PyName=wxEVT_PG_HIGHLIGHTED/;

wxEventType wxEVT_PG_RIGHT_CLICK   /PyName=wxEVT_PG_RIGHT_CLICK/;

wxEventType wxEVT_PG_PAGE_CHANGED   /PyName=wxEVT_PG_PAGE_CHANGED/;

wxEventType wxEVT_PG_ITEM_COLLAPSED   /PyName=wxEVT_PG_ITEM_COLLAPSED/;

wxEventType wxEVT_PG_ITEM_EXPANDED   /PyName=wxEVT_PG_ITEM_EXPANDED/;

wxEventType wxEVT_PG_DOUBLE_CLICK   /PyName=wxEVT_PG_DOUBLE_CLICK/;

wxEventType wxEVT_PG_LABEL_EDIT_BEGIN   /PyName=wxEVT_PG_LABEL_EDIT_BEGIN/;

wxEventType wxEVT_PG_LABEL_EDIT_ENDING   /PyName=wxEVT_PG_LABEL_EDIT_ENDING/;

wxEventType wxEVT_PG_COL_BEGIN_DRAG   /PyName=wxEVT_PG_COL_BEGIN_DRAG/;

wxEventType wxEVT_PG_COL_DRAGGING   /PyName=wxEVT_PG_COL_DRAGGING/;

wxEventType wxEVT_PG_COL_END_DRAG   /PyName=wxEVT_PG_COL_END_DRAG/;

class wxPGValidationInfo
{
    %Docstring
        Used to convey validation information to and from functions that
        actually perform validation.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/propgrid.h>
    %End

public:
    byte GetFailureBehavior();
    %Docstring
        GetFailureBehavior() -> byte
    %End

    const wxString & GetFailureMessage() const;
    %Docstring
        GetFailureMessage() -> String
        
        Returns current failure message.
    %End

    wxPGVariant & GetValue();
    %Docstring
        GetValue() -> PGVariant
        
        Returns reference to pending value.
    %End

    void SetFailureBehavior(
        byte failureBehavior
    );
    %Docstring
        SetFailureBehavior(failureBehavior)
        
        Set validation failure behaviour.
    %End

    void SetFailureMessage(
        const wxString & message
    );
    %Docstring
        SetFailureMessage(message)
        
        Set current failure message.
    %End

    public:


    %Property(name=FailureBehavior, get=GetFailureBehavior, set=SetFailureBehavior)
    %Property(name=FailureMessage, get=GetFailureMessage, set=SetFailureMessage)
    %Property(name=Value, get=GetValue)
};  // end of class wxPGValidationInfo


const char* wxPropertyGridNameStr;

class wxPropertyGrid : wxControl, wxPropertyGridInterface
{
    %Docstring
        PropertyGrid()
        PropertyGrid(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=PG_DEFAULT_STYLE, name=PropertyGridNameStr)
        
        wxPropertyGrid is a specialized grid for editing properties - in other
        words name = value pairs.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/propgrid.h>
    %End

public:
    wxPropertyGrid();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxPropertyGrid(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxPG_DEFAULT_STYLE,
        const wxString & name = wxPropertyGridNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxPropertyGrid();

    virtual
    void DoShowPropertyError(
        wxPGProperty * property,
        const wxString & msg
    );
    %Docstring
        DoShowPropertyError(property, msg)
        
        Override in derived class to display error messages in custom manner
        (these message usually only result from validation failure).
    %End

    virtual
    void DoHidePropertyError(
        wxPGProperty * property
    );
    %Docstring
        DoHidePropertyError(property)
        
        Override in derived class to hide an error displayed by
        DoShowPropertyError().
    %End

    virtual
    wxStatusBar * GetStatusBar();
    %Docstring
        GetStatusBar() -> wx.StatusBar
        
        Return wxStatusBar that is used by this wxPropertyGrid.
    %End

    virtual
    bool DoOnValidationFailure(
        wxPGProperty * property,
        wxPGVariant & invalidValue
    );
    %Docstring
        DoOnValidationFailure(property, invalidValue) -> bool
        
        Override to customize property validation failure behaviour.
    %End

    virtual
    void DoOnValidationFailureReset(
        wxPGProperty * property
    );
    %Docstring
        DoOnValidationFailureReset(property)
        
        Override to customize resetting of property validation failure status.
    %End

    void EditorsValueWasModified();
    %Docstring
        EditorsValueWasModified()
        
        Call when editor widget's contents is modified.
    %End

    void EditorsValueWasNotModified();
    %Docstring
        EditorsValueWasNotModified()
        
        Reverse of EditorsValueWasModified().
    %End

    wxPGVariant GetUncommittedPropertyValue();
    %Docstring
        GetUncommittedPropertyValue() -> PGVariant
        
        Returns most up-to-date value of selected property.
    %End

    bool IsEditorsValueModified() const;
    %Docstring
        IsEditorsValueModified() -> bool
        
        Returns true if editor's value was marked modified.
    %End

    void ShowPropertyError(
        const wxPGPropArgCls & id,
        const wxString & msg
    );
    %Docstring
        ShowPropertyError(id, msg)
        
        Shows an brief error message that is related to a property.
    %End

    void ValueChangeInEvent(
        wxPGVariant variant
    );
    %Docstring
        ValueChangeInEvent(variant)
        
        Call this from wxPGProperty::OnEvent() to cause property value to be
        changed after the function returns (with true as return value).
    %End

    bool WasValueChangedInEvent() const;
    %Docstring
        WasValueChangedInEvent() -> bool
        
        You can use this member function, for instance, to detect in
        wxPGProperty::OnEvent() if wxPGProperty::SetValueInEvent() was already
        called in wxPGEditor::OnEvent().
    %End

    void AddActionTrigger(
        int action,
        int keycode,
        int modifiers = 0
    );
    %Docstring
        AddActionTrigger(action, keycode, modifiers=0)
        
        Adds given key combination to trigger given action.
    %End

    bool AddToSelection(
        const wxPGPropArgCls & id
    );
    %Docstring
        AddToSelection(id) -> bool
        
        Adds given property into selection.
    %End

    void BeginLabelEdit(
        unsigned int colIndex = 0
    );
    %Docstring
        BeginLabelEdit(colIndex=0)
        
        Creates label editor wxTextCtrl for given column, for property that is
        currently selected.
    %End

    bool ChangePropertyValue(
        const wxPGPropArgCls & id,
        wxPGVariant newValue
    );
    %Docstring
        ChangePropertyValue(id, newValue) -> bool
        
        Changes value of a property, as if from an editor.
    %End

    void CenterSplitter(
        bool enableAutoResizing = false
    );
    %Docstring
        CenterSplitter(enableAutoResizing=False)
        
        Centers the splitter.
    %End

    virtual
    void Clear();
    %Docstring
        Clear()
        
        Deletes all properties.
    %End

    void ClearActionTriggers(
        int action
    );
    %Docstring
        ClearActionTriggers(action)
        
        Clears action triggers for given action.
    %End

    virtual
    bool CommitChangesFromEditor(
        wxUint32 flags = 0
    );
    %Docstring
        CommitChangesFromEditor(flags=0) -> bool
        
        Forces updating the value of property from the editor control.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxPG_DEFAULT_STYLE,
        const wxString & name = wxPropertyGridNameStr
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=PG_DEFAULT_STYLE, name=PropertyGridNameStr) -> bool
        
        Two step creation.
    %End

    void DedicateKey(
        int keycode
    );
    %Docstring
        DedicateKey(keycode)
        
        Dedicates a specific keycode to wxPropertyGrid.
    %End

    bool EnableCategories(
        bool enable
    );
    %Docstring
        EnableCategories(enable) -> bool
        
        Enables or disables (shows/hides) categories according to parameter
        enable.
    %End

    void EndLabelEdit(
        bool commit = true
    );
    %Docstring
        EndLabelEdit(commit=True)
        
        Destroys label editor wxTextCtrl, if any.
    %End

    bool EnsureVisible(
        const wxPGPropArgCls & id
    );
    %Docstring
        EnsureVisible(id) -> bool
        
        Scrolls and/or expands items to ensure that the given item is visible.
    %End

    wxSize FitColumns();
    %Docstring
        FitColumns() -> wx.Size
        
        Reduces column sizes to minimum possible, while still retaining fully
        visible grid contents (labels, images).
    %End

    wxTextCtrl * GetLabelEditor() const;
    %Docstring
        GetLabelEditor() -> wx.TextCtrl
        
        Returns currently active label editor, NULL if none.
    %End

    wxWindow * GetPanel();
    %Docstring
        GetPanel() -> wx.Window
        
        Returns wxWindow that the properties are painted on, and which should
        be used as the parent for editor controls.
    %End

    wxColour GetCaptionBackgroundColour() const;
    %Docstring
        GetCaptionBackgroundColour() -> wx.Colour
        
        Returns current category caption background colour.
    %End

    wxFont & GetCaptionFont();
    %Docstring
        GetCaptionFont() -> wx.Font
        
        Returns current category caption font.
    %End

    wxColour GetCaptionForegroundColour() const;
    %Docstring
        GetCaptionForegroundColour() -> wx.Colour
        
        Returns current category caption text colour.
    %End

    wxColour GetCellBackgroundColour() const;
    %Docstring
        GetCellBackgroundColour() -> wx.Colour
        
        Returns current cell background colour.
    %End

    wxColour GetCellDisabledTextColour() const;
    %Docstring
        GetCellDisabledTextColour() -> wx.Colour
        
        Returns current cell text colour when disabled.
    %End

    wxColour GetCellTextColour() const;
    %Docstring
        GetCellTextColour() -> wx.Colour
        
        Returns current cell text colour.
    %End

    unsigned int GetColumnCount() const;
    %Docstring
        GetColumnCount() -> unsignedint
        
        Returns number of columns currently on grid.
    %End

    wxColour GetEmptySpaceColour() const;
    %Docstring
        GetEmptySpaceColour() -> wx.Colour
        
        Returns colour of empty space below properties.
    %End

    int GetFontHeight() const;
    %Docstring
        GetFontHeight() -> int
        
        Returns height of highest characters of used font.
    %End

    wxPropertyGrid * GetGrid();
    %Docstring
        GetGrid() -> PropertyGrid
        
        Returns pointer to itself.
    %End

    wxRect GetImageRect(
        wxPGProperty * property,
        int item
    ) const;
    %Docstring
        GetImageRect(property, item) -> wx.Rect
        
        Returns rectangle of custom paint image.
    %End

    wxSize GetImageSize(
        wxPGProperty * property = NULL,
        int item = -1
    ) const;
    %Docstring
        GetImageSize(property=None, item=-1) -> wx.Size
        
        Returns size of the custom paint image in front of property.
    %End

    wxPGProperty * GetLastItem(
        int flags = wxPG_ITERATE_DEFAULT
    );
    %Docstring
        GetLastItem(flags=PG_ITERATE_DEFAULT) -> PGProperty
        
        Returns last item which could be iterated using given flags.
    %End

    wxColour GetLineColour() const;
    %Docstring
        GetLineColour() -> wx.Colour
        
        Returns colour of lines between cells.
    %End

    wxColour GetMarginColour() const;
    %Docstring
        GetMarginColour() -> wx.Colour
        
        Returns background colour of margin.
    %End

    int GetMarginWidth() const;
    %Docstring
        GetMarginWidth() -> int
        
        Returns margin width.
    %End

    wxPGProperty * GetRoot() const;
    %Docstring
        GetRoot() -> PGProperty
        
        Returns "root property".
    %End

    int GetRowHeight() const;
    %Docstring
        GetRowHeight() -> int
        
        Returns height of a single grid row (in pixels).
    %End

    wxPGProperty * GetSelectedProperty() const;
    %Docstring
        GetSelectedProperty() -> PGProperty
        
        Returns currently selected property.
    %End

    wxPGProperty * GetSelection() const;
    %Docstring
        GetSelection() -> PGProperty
        
        Returns currently selected property.
    %End

    wxColour GetSelectionBackgroundColour() const;
    %Docstring
        GetSelectionBackgroundColour() -> wx.Colour
        
        Returns current selection background colour.
    %End

    wxColour GetSelectionForegroundColour() const;
    %Docstring
        GetSelectionForegroundColour() -> wx.Colour
        
        Returns current selection text colour.
    %End

    int GetSplitterPosition(
        unsigned int splitterIndex = 0
    ) const;
    %Docstring
        GetSplitterPosition(splitterIndex=0) -> int
        
        Returns current splitter x position.
    %End

    wxTextCtrl * GetEditorTextCtrl() const;
    %Docstring
        GetEditorTextCtrl() -> wx.TextCtrl
        
        Returns wxTextCtrl active in currently selected property, if any.
    %End

    const wxPGCell & GetUnspecifiedValueAppearance() const;
    %Docstring
        GetUnspecifiedValueAppearance() -> PGCell
        
        Returns current appearance of unspecified value cells.
    %End

    wxString GetUnspecifiedValueText(
        int argFlags = 0
    ) const;
    %Docstring
        GetUnspecifiedValueText(argFlags=0) -> String
        
        Returns (visual) text representation of the unspecified property
        value.
    %End

    int GetVerticalSpacing() const;
    %Docstring
        GetVerticalSpacing() -> int
        
        Returns current vertical spacing.
    %End

    wxPropertyGridHitTestResult HitTest(
        const wxPoint & pt
    ) const;
    %Docstring
        HitTest(pt) -> PropertyGridHitTestResult
        
        Returns information about arbitrary position in the grid.
    %End

    bool IsAnyModified() const;
    %Docstring
        IsAnyModified() -> bool
        
        Returns true if any property has been modified by the user.
    %End

    bool IsEditorFocused() const;
    %Docstring
        IsEditorFocused() -> bool
        
        Returns true if a property editor control has focus.
    %End

    bool IsFrozen() const;
    %Docstring
        IsFrozen() -> bool
        
        Returns true if updating is frozen (i.e.
    %End

    void MakeColumnEditable(
        unsigned int column,
        bool editable = true
    );
    %Docstring
        MakeColumnEditable(column, editable=True)
        
        Makes given column editable by user.
    %End

    void OnTLPChanging(
        wxWindow * newTLP
    );
    %Docstring
        OnTLPChanging(newTLP)
        
        It is recommended that you call this function any time your code
        causes wxPropertyGrid's top-level parent to change.
    %End

    void RefreshEditor();
    %Docstring
        RefreshEditor()
        
        Refreshes any active editor control.
    %End

    virtual
    void RefreshProperty(
        wxPGProperty * p
    );
    %Docstring
        RefreshProperty(p)
        
        Redraws given property.
    %End

    void ResetColours();
    %Docstring
        ResetColours()
        
        Resets all colours to the original system values.
    %End

    void ResetColumnSizes(
        bool enableAutoResizing = false
    );
    %Docstring
        ResetColumnSizes(enableAutoResizing=False)
        
        Resets column sizes and splitter positions, based on proportions.
    %End

    bool RemoveFromSelection(
        const wxPGPropArgCls & id
    );
    %Docstring
        RemoveFromSelection(id) -> bool
        
        Removes given property from selection.
    %End

    bool SelectProperty(
        const wxPGPropArgCls & id,
        bool focus = false
    );
    %Docstring
        SelectProperty(id, focus=False) -> bool
        
        Selects a property.
    %End

    void SetCaptionBackgroundColour(
        const wxColour & col
    );
    %Docstring
        SetCaptionBackgroundColour(col)
        
        Sets category caption background colour.
    %End

    void SetCaptionTextColour(
        const wxColour & col
    );
    %Docstring
        SetCaptionTextColour(col)
        
        Sets category caption text colour.
    %End

    void SetCellBackgroundColour(
        const wxColour & col
    );
    %Docstring
        SetCellBackgroundColour(col)
        
        Sets default cell background colour - applies to property cells.
    %End

    void SetCellDisabledTextColour(
        const wxColour & col
    );
    %Docstring
        SetCellDisabledTextColour(col)
        
        Sets cell text colour for disabled properties.
    %End

    void SetCellTextColour(
        const wxColour & col
    );
    %Docstring
        SetCellTextColour(col)
        
        Sets default cell text colour - applies to property name and value
        text.
    %End

    void SetColumnCount(
        int colCount
    );
    %Docstring
        SetColumnCount(colCount)
        
        Set number of columns (2 or more).
    %End

    void SetCurrentCategory(
        const wxPGPropArgCls & id
    );
    %Docstring
        SetCurrentCategory(id)
        
        Sets the 'current' category - Append will add non-category properties
        under it.
    %End

    void SetEmptySpaceColour(
        const wxColour & col
    );
    %Docstring
        SetEmptySpaceColour(col)
        
        Sets colour of empty space below properties.
    %End

    void SetLineColour(
        const wxColour & col
    );
    %Docstring
        SetLineColour(col)
        
        Sets colour of lines between cells.
    %End

    void SetMarginColour(
        const wxColour & col
    );
    %Docstring
        SetMarginColour(col)
        
        Sets background colour of margin.
    %End

    void SetSelection(
        const wxArrayPGProperty & newSelection
    );
    %Docstring
        SetSelection(newSelection)
        
        Set entire new selection from given list of properties.
    %End

    void SetSelectionBackgroundColour(
        const wxColour & col
    );
    %Docstring
        SetSelectionBackgroundColour(col)
        
        Sets selection background colour - applies to selected property name
        background.
    %End

    void SetSelectionTextColour(
        const wxColour & col
    );
    %Docstring
        SetSelectionTextColour(col)
        
        Sets selection foreground colour - applies to selected property name
        text.
    %End

    void SetSplitterPosition(
        int newxpos,
        int col = 0
    );
    %Docstring
        SetSplitterPosition(newxpos, col=0)
        
        Sets x coordinate of the splitter.
    %End

    void SetSplitterLeft(
        bool privateChildrenToo = false
    );
    %Docstring
        SetSplitterLeft(privateChildrenToo=False)
        
        Moves splitter as left as possible, while still allowing all labels to
        be shown in full.
    %End

    void SetUnspecifiedValueAppearance(
        const wxPGCell & cell
    );
    %Docstring
        SetUnspecifiedValueAppearance(cell)
        
        Sets appearance of value cells representing an unspecified property
        value.
    %End

    void SetVerticalSpacing(
        int vspacing
    );
    %Docstring
        SetVerticalSpacing(vspacing)
        
        Sets vertical spacing.
    %End

    void SetVirtualWidth(
        int width
    );
    %Docstring
        SetVirtualWidth(width)
        
        Set virtual width for this particular page.
    %End

    void SetupTextCtrlValue(
        const wxString & text
    );
    %Docstring
        SetupTextCtrlValue(text)
        
        Must be called in wxPGEditor::CreateControls() if primary editor
        window is wxTextCtrl, just before textctrl is created.
    %End

    bool UnfocusEditor();
    %Docstring
        UnfocusEditor() -> bool
        
        Unfocuses or closes editor if one was open, but does not deselect
        property.
    %End

    void DrawItemAndValueRelated(
        wxPGProperty * p
    );
    %Docstring
        DrawItemAndValueRelated(p)
        
        Draws item, children, and consecutive parents as long as category is
        not met.
    %End

    static
    void AutoGetTranslation(
        bool enable
    );
    %Docstring
        AutoGetTranslation(enable)
        
        This static function enables or disables automatic use of
        wxGetTranslation() for following strings: wxEnumProperty list labels,
        wxFlagsProperty child property labels.
    %End

    static
    wxPGEditor * RegisterEditorClass(
        wxPGEditor * editor   /Transfer/,
        bool noDefCheck = false
    );
    %Docstring
        RegisterEditorClass(editor, noDefCheck=False) -> PGEditor
        
        Forwards to DoRegisterEditorClass with empty name.
    %End

    static
    wxPGEditor * DoRegisterEditorClass(
        wxPGEditor * editor   /Transfer/,
        const wxString & name,
        bool noDefCheck = false
    );
    %Docstring
        DoRegisterEditorClass(editor, name, noDefCheck=False) -> PGEditor
        
        Registers a new editor class.
    %End

    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void CalcScrolledPosition(
        int x,
        int y,
        int * xx   /Out/,
        int * yy   /Out/
    ) const;
    %Docstring
        CalcScrolledPosition(x, y) -> (xx, yy)
        CalcScrolledPosition(pt) -> Point
        
        Translates the logical coordinates to the device ones.
    %End

    wxPoint CalcScrolledPosition(
        const wxPoint & pt
    ) const;

    void CalcUnscrolledPosition(
        int x,
        int y,
        int * xx   /Out/,
        int * yy   /Out/
    ) const;
    %Docstring
        CalcUnscrolledPosition(x, y) -> (xx, yy)
        CalcUnscrolledPosition(pt) -> Point
        
        Translates the device coordinates to the logical ones.
    %End

    wxPoint CalcUnscrolledPosition(
        const wxPoint & pt
    ) const;

    void DisableKeyboardScrolling();
    %Docstring
        DisableKeyboardScrolling()
        
        Disable use of keyboard keys for scrolling.
    %End

    void DoPrepareDC(
        wxDC & dc
    );
    %Docstring
        DoPrepareDC(dc)
        
        Call this function to prepare the device context for drawing a
        scrolled image.
    %End

    void EnableScrolling(
        bool xScrolling,
        bool yScrolling
    );
    %Docstring
        EnableScrolling(xScrolling, yScrolling)
        
        Enable or disable use of wxWindow::ScrollWindow() for scrolling.
    %End

    void ShowScrollbars(
        wxScrollbarVisibility horz,
        wxScrollbarVisibility vert
    );
    %Docstring
        ShowScrollbars(horz, vert)
        
        Set the scrollbar visibility.
    %End

    void GetScrollPixelsPerUnit(
        int * xUnit   /Out/,
        int * yUnit   /Out/
    ) const;
    %Docstring
        GetScrollPixelsPerUnit() -> (xUnit, yUnit)
        
        Get the number of pixels per scroll unit (line), in each direction, as
        set by SetScrollbars().
    %End

    void GetViewStart(
        int * x   /Out/,
        int * y   /Out/
    ) const;
    %Docstring
        GetViewStart() -> (x, y)
        
        Get the position at which the visible portion of the window starts.
    %End

    bool IsRetained() const;
    %Docstring
        IsRetained() -> bool
        
        Motif only: true if the window has a backing bitmap.
    %End

    virtual
    void OnDraw(
        wxDC & dc
    );
    %Docstring
        OnDraw(dc)
        
        Called by the default paint event handler to allow the application to
        define painting behaviour without having to worry about calling
        DoPrepareDC().
    %End

    void PrepareDC(
        wxDC & dc
    );
    %Docstring
        PrepareDC(dc)
        
        This function is for backwards compatibility only and simply calls
        DoPrepareDC() now.
    %End

    void Scroll(
        int x,
        int y
    );
    %Docstring
        Scroll(x, y)
        Scroll(pt)
        
        Scrolls a window so the view start is at the given point.
    %End

    void Scroll(
        const wxPoint & pt
    );

    void SetScrollRate(
        int xstep,
        int ystep
    );
    %Docstring
        SetScrollRate(xstep, ystep)
        
        Set the horizontal and vertical scrolling increment only.
    %End

    void SetScrollbars(
        int pixelsPerUnitX,
        int pixelsPerUnitY,
        int noUnitsX,
        int noUnitsY,
        int xPos = 0,
        int yPos = 0,
        bool noRefresh = false
    );
    %Docstring
        SetScrollbars(pixelsPerUnitX, pixelsPerUnitY, noUnitsX, noUnitsY, xPos=0, yPos=0, noRefresh=False)
        
        Sets up vertical and/or horizontal scrollbars.
    %End

    void SetTargetWindow(
        wxWindow * window
    );
    %Docstring
        SetTargetWindow(window)
        
        Call this function to tell wxScrolled to perform the actual scrolling
        on a different window (and not on itself).
    %End

    wxWindow * GetTargetWindow() const;
    %Docstring
        GetTargetWindow() -> Window
    %End

    void SetTargetRect(
        const wxRect & rect
    );
    %Docstring
        SetTargetRect(rect)
    %End

    wxRect GetTargetRect() const;
    %Docstring
        GetTargetRect() -> Rect
    %End

    int GetScrollPageSize(
        int orient
    ) const;
    %Docstring
        GetScrollPageSize(orient) -> int
    %End

    void SetScrollPageSize(
        int orient,
        int pageSize
    );
    %Docstring
        SetScrollPageSize(orient, pageSize)
    %End

    int GetScrollLines(
        int orient
    ) const;
    %Docstring
        GetScrollLines(orient) -> int
    %End

    void SetScale(
        double xs,
        double ys
    );
    %Docstring
        SetScale(xs, ys)
    %End

    double GetScaleX() const;
    %Docstring
        GetScaleX() -> double
    %End

    double GetScaleY() const;
    %Docstring
        GetScaleY() -> double
    %End

    void AdjustScrollbars();
    %Docstring
        AdjustScrollbars()
    %End

    bool IsAutoScrolling() const;
    %Docstring
        IsAutoScrolling() -> bool
        
        Are we generating the autoscroll events?
    %End

    void StopAutoScrolling();
    %Docstring
        StopAutoScrolling()
        
        Stop generating the scroll events when mouse is held outside the
        window.
    %End

    virtual
    bool SendAutoScrollEvents(
        wxScrollWinEvent & event
    ) const;
    %Docstring
        SendAutoScrollEvents(event) -> bool
        
        This method can be overridden in a derived class to forbid sending the
        auto scroll events - note that unlike StopAutoScrolling() it doesn't
        stop the timer, so it will be called repeatedly and will typically
        return different values depending on the current mouse position.
    %End

    public:


    %Property(name=CaptionBackgroundColour, get=GetCaptionBackgroundColour, set=SetCaptionBackgroundColour)
    %Property(name=CaptionFont, get=GetCaptionFont)
    %Property(name=CaptionForegroundColour, get=GetCaptionForegroundColour)
    %Property(name=CellBackgroundColour, get=GetCellBackgroundColour, set=SetCellBackgroundColour)
    %Property(name=CellDisabledTextColour, get=GetCellDisabledTextColour, set=SetCellDisabledTextColour)
    %Property(name=CellTextColour, get=GetCellTextColour, set=SetCellTextColour)
    %Property(name=ColumnCount, get=GetColumnCount, set=SetColumnCount)
    %Property(name=EditorTextCtrl, get=GetEditorTextCtrl)
    %Property(name=EmptySpaceColour, get=GetEmptySpaceColour, set=SetEmptySpaceColour)
    %Property(name=FontHeight, get=GetFontHeight)
    %Property(name=Grid, get=GetGrid)
    %Property(name=ImageSize, get=GetImageSize)
    %Property(name=LabelEditor, get=GetLabelEditor)
    %Property(name=LastItem, get=GetLastItem)
    %Property(name=LineColour, get=GetLineColour, set=SetLineColour)
    %Property(name=MarginColour, get=GetMarginColour, set=SetMarginColour)
    %Property(name=MarginWidth, get=GetMarginWidth)
    %Property(name=Panel, get=GetPanel)
    %Property(name=Root, get=GetRoot)
    %Property(name=RowHeight, get=GetRowHeight)
    %Property(name=ScaleX, get=GetScaleX)
    %Property(name=ScaleY, get=GetScaleY)
    %Property(name=SelectedProperty, get=GetSelectedProperty)
    %Property(name=Selection, get=GetSelection, set=SetSelection)
    %Property(name=SelectionBackgroundColour, get=GetSelectionBackgroundColour, set=SetSelectionBackgroundColour)
    %Property(name=SelectionForegroundColour, get=GetSelectionForegroundColour)
    %Property(name=SplitterPosition, get=GetSplitterPosition, set=SetSplitterPosition)
    %Property(name=StatusBar, get=GetStatusBar)
    %Property(name=TargetRect, get=GetTargetRect, set=SetTargetRect)
    %Property(name=TargetWindow, get=GetTargetWindow, set=SetTargetWindow)
    %Property(name=UncommittedPropertyValue, get=GetUncommittedPropertyValue)
    %Property(name=UnspecifiedValueAppearance, get=GetUnspecifiedValueAppearance, set=SetUnspecifiedValueAppearance)
    %Property(name=UnspecifiedValueText, get=GetUnspecifiedValueText)
    %Property(name=VerticalSpacing, get=GetVerticalSpacing, set=SetVerticalSpacing)

protected:
    virtual
    bool ShouldScrollToChildOnFocus(
        wxWindow * child
    );
    %Docstring
        ShouldScrollToChildOnFocus(child) -> bool
        
        This method can be overridden in a derived class to prevent scrolling
        the child window into view automatically when it gets focus.
    %End

    virtual
    wxSize GetSizeAvailableForScrollTarget(
        const wxSize & size
    );
    %Docstring
        GetSizeAvailableForScrollTarget(size) -> Size
        
        Function which must be overridden to implement the size available for
        the scroll target for the given size of the main window.
    %End

};  // end of class wxPropertyGrid


%Extract(id=pycode_propgrid)
_PropertyGrid__init__orig = PropertyGrid.__init__
def _PropertyGrid__init__(self, *args, **kw):
    _PropertyGrid__init__orig(self, *args, **kw)
    self.DoDefaultTypeMappings()
    self.edited_objects = {}
    self.DoDefaultValueTypeMappings()
    if not hasattr(self.__class__, '_vt2setter'):
        self.__class__._vt2setter = {}
PropertyGrid.__init__ = _PropertyGrid__init__

%End

class wxPropertyGridEvent : wxCommandEvent
{
    %Docstring
        PropertyGridEvent(commandType=0, id=0)
        PropertyGridEvent(event)
        
        A property grid event holds information about events associated with
        wxPropertyGrid objects.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/propgrid.h>
    %End

public:
    wxPropertyGridEvent(
        wxEventType commandType = 0,
        int id = 0
    );

    wxPropertyGridEvent(
        const wxPropertyGridEvent & event
    );

    ~wxPropertyGridEvent();

    bool CanVeto() const;
    %Docstring
        CanVeto() -> bool
        
        Returns true if you can veto the action that the event is signaling.
    %End

    unsigned int GetColumn() const;
    %Docstring
        GetColumn() -> unsignedint
        
        Returns the column index associated with this event.
    %End

    wxPGProperty * GetMainParent() const;
    %Docstring
        GetMainParent() -> PGProperty
        
        Returns highest level non-category, non-root parent of property for
        which event occurred.
    %End

    wxPGProperty * GetProperty() const;
    %Docstring
        GetProperty() -> PGProperty
        
        Returns property associated with this event.
    %End

    byte GetValidationFailureBehavior() const;
    %Docstring
        GetValidationFailureBehavior() -> byte
        
        Returns current validation failure flags.
    %End

    wxString GetPropertyName() const;
    %Docstring
        GetPropertyName() -> String
        
        Returns name of the associated property.
    %End

    wxPGVariant GetPropertyValue() const;
    %Docstring
        GetPropertyValue() -> PGVariant
        
        Returns value of the associated property.
    %End

    void SetCanVeto(
        bool canVeto
    );
    %Docstring
        SetCanVeto(canVeto)
        
        Set if event can be vetoed.
    %End

    void SetProperty(
        wxPGProperty * p
    );
    %Docstring
        SetProperty(p)
        
        Changes the property associated with this event.
    %End

    void SetValidationFailureBehavior(
        byte flags
    );
    %Docstring
        SetValidationFailureBehavior(flags)
        
        Set override validation failure behaviour.
    %End

    void SetValidationFailureMessage(
        const wxString & message
    );
    %Docstring
        SetValidationFailureMessage(message)
        
        Sets custom failure message for this time only.
    %End

    void Veto(
        bool veto = true
    );
    %Docstring
        Veto(veto=True)
        
        Call this from your event handler to veto action that the event is
        signaling.
    %End

    bool WasVetoed() const;
    %Docstring
        WasVetoed() -> bool
        
        Returns true if event was vetoed.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxPropertyGridEvent& operator=(const wxPropertyGridEvent&);


    public:


    %Property(name=Column, get=GetColumn)
    %Property(name=MainParent, get=GetMainParent)
    %Property(name=Property, get=GetProperty, set=SetProperty)
    %Property(name=PropertyName, get=GetPropertyName)
    %Property(name=PropertyValue, get=GetPropertyValue)
    %Property(name=ValidationFailureBehavior, get=GetValidationFailureBehavior, set=SetValidationFailureBehavior)
};  // end of class wxPropertyGridEvent


class wxPropertyGridPopulator
{
    %Docstring
        PropertyGridPopulator()
        
        Allows populating wxPropertyGrid from arbitrary text source.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/propgrid.h>
    %End

public:
    wxPropertyGridPopulator();

    virtual
    ~wxPropertyGridPopulator();

    void SetState(
        wxPropertyGridPageState * state
    );
    %Docstring
        SetState(state)
    %End

    void SetGrid(
        wxPropertyGrid * pg
    );
    %Docstring
        SetGrid(pg)
    %End

    wxPGProperty * Add(
        const wxString & propClass,
        const wxString & propLabel,
        const wxString & propName,
        const wxString * propValue,
        wxPGChoices * pChoices = NULL
    );
    %Docstring
        Add(propClass, propLabel, propName, propValue, pChoices=None) -> PGProperty
        
        Appends a new property under bottommost parent.
    %End

    void AddChildren(
        wxPGProperty * property
    );
    %Docstring
        AddChildren(property)
        
        Pushes property to the back of parent array (ie it becomes bottommost
        parent), and starts scanning/adding children for it.
    %End

    bool AddAttribute(
        const wxString & name,
        const wxString & type,
        const wxString & value
    );
    %Docstring
        AddAttribute(name, type, value) -> bool
        
        Adds attribute to the bottommost property.
    %End

    virtual
    void DoScanForChildren() = 0;
    %Docstring
        DoScanForChildren()
        
        Called once in AddChildren.
    %End

    wxPGProperty * GetCurParent() const;
    %Docstring
        GetCurParent() -> PGProperty
        
        Returns id of parent property for which children can currently be
        added.
    %End

    wxPropertyGridPageState * GetState();
    %Docstring
        GetState() -> PropertyGridPageState
    %End

    wxPGChoices ParseChoices(
        const wxString & choicesString,
        const wxString & idString
    );
    %Docstring
        ParseChoices(choicesString, idString) -> PGChoices
        
        Parses strings of format "choice1"[=value1] ...
    %End

    virtual
    void ProcessError(
        const wxString & msg
    );
    %Docstring
        ProcessError(msg)
        
        Implement in derived class to do custom process when an error occurs.
    %End

    static
    bool ToLongPCT(
        const wxString & s,
        long * pval,
        long max
    );
    %Docstring
        ToLongPCT(s, pval, max) -> bool
        
        Like wxString::ToLong, except allows N% in addition of N.
    %End

    public:


    %Property(name=CurParent, get=GetCurParent)
    %Property(name=State, get=GetState, set=SetState)
};  // end of class wxPropertyGridPopulator


%Extract(id=pycode_propgrid)
EVT_PG_CHANGED = wx.PyEventBinder( wxEVT_PG_CHANGED, 1 )
EVT_PG_CHANGING = wx.PyEventBinder( wxEVT_PG_CHANGING, 1 )
EVT_PG_SELECTED = wx.PyEventBinder( wxEVT_PG_SELECTED, 1 )
EVT_PG_HIGHLIGHTED = wx.PyEventBinder( wxEVT_PG_HIGHLIGHTED, 1 )
EVT_PG_RIGHT_CLICK = wx.PyEventBinder( wxEVT_PG_RIGHT_CLICK, 1 )
EVT_PG_PAGE_CHANGED = wx.PyEventBinder( wxEVT_PG_PAGE_CHANGED, 1 )
EVT_PG_ITEM_COLLAPSED = wx.PyEventBinder( wxEVT_PG_ITEM_COLLAPSED, 1 )
EVT_PG_ITEM_EXPANDED = wx.PyEventBinder( wxEVT_PG_ITEM_EXPANDED, 1 )
EVT_PG_DOUBLE_CLICK = wx.PyEventBinder( wxEVT_PG_DOUBLE_CLICK, 1 )
EVT_PG_LABEL_EDIT_BEGIN = wx.PyEventBinder( wxEVT_PG_LABEL_EDIT_BEGIN, 1 )
EVT_PG_LABEL_EDIT_ENDING = wx.PyEventBinder( wxEVT_PG_LABEL_EDIT_ENDING, 1 )
EVT_PG_COL_BEGIN_DRAG = wx.PyEventBinder( wxEVT_PG_COL_BEGIN_DRAG, 1 )
EVT_PG_COL_DRAGGING = wx.PyEventBinder( wxEVT_PG_COL_DRAGGING, 1 )
EVT_PG_COL_END_DRAG = wx.PyEventBinder( wxEVT_PG_COL_END_DRAG, 1 )

%End


//---------------------------------------------------------------------------

