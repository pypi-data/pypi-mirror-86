//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxCheckListBox : wxListBox
{
    %Docstring
        CheckListBox(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, choices=[], style=0, validator=DefaultValidator, name="listBox")
        CheckListBox()
        
        A wxCheckListBox is like a wxListBox, but allows items to be checked
        or unchecked.
    %End
    %TypeHeaderCode
        #include <wx/checklst.h>
    %End

public:
    wxCheckListBox(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        const wxArrayString & choices = wxArrayString(),
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = "listBox"
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxCheckListBox();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxCheckListBox();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        const wxArrayString & choices = wxArrayString(),
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxListBoxNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, choices=[], style=0, validator=DefaultValidator, name=ListBoxNameStr) -> bool
    %End

    void Check(
        unsigned int item,
        bool check = true
    );
    %Docstring
        Check(item, check=True)
        
        Checks the given item.
    %End

    bool IsChecked(
        unsigned int item
    ) const;
    %Docstring
        IsChecked(item) -> bool
        
        Returns true if the given item is checked, false otherwise.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

};  // end of class wxCheckListBox


%Extract(id=pycode_core)
def _CheckListBox_GetCheckedItems(self):
    """
    GetCheckedItems()
    
    Return a sequence of integers corresponding to the checked items in
    the control, based on :meth:`IsChecked`.
    """
    return tuple([i for i in range(self.Count) if self.IsChecked(i)])
CheckListBox.GetCheckedItems = _CheckListBox_GetCheckedItems
del _CheckListBox_GetCheckedItems
%End

%Extract(id=pycode_core)
def _CheckListBox_GetCheckedStrings(self):
    """
    GetCheckedStrings()
    
    Return a tuple of strings corresponding to the checked
    items of the control, based on :meth:`GetChecked`.
    """
    return tuple([self.GetString(i) for i in self.GetCheckedItems()])
CheckListBox.GetCheckedStrings = _CheckListBox_GetCheckedStrings
del _CheckListBox_GetCheckedStrings
%End

%Extract(id=pycode_core)
def _CheckListBox_SetCheckedItems(self, indexes):
    """
    SetCheckedItems(indexes)
    
    Sets the checked state of items if the index of the item is
    found in the indexes sequence.
    """
    for i in indexes:
        assert 0 <= i < self.Count, "Index (%s) out of range" % i
    for i in range(self.Count):
        self.Check(i, i in indexes)
CheckListBox.SetCheckedItems = _CheckListBox_SetCheckedItems
del _CheckListBox_SetCheckedItems
%End

%Extract(id=pycode_core)
def _CheckListBox_SetCheckedStrings(self, strings):
    """
    SetCheckedStrings(strings)
    
    Sets the checked state of items if the item's string is found
    in the strings sequence.
    """
    for s in strings:
        assert s in self.GetStrings(), "String ('%s') not found" % s
    for i in range(self.Count):
        self.Check(i, self.GetString(i) in strings)
CheckListBox.SetCheckedStrings = _CheckListBox_SetCheckedStrings
del _CheckListBox_SetCheckedStrings
%End

%Extract(id=pycode_core)
def _CheckListBox_GetChecked(self):
    return self.GetCheckedItems()
CheckListBox.GetChecked = wx.deprecated(_CheckListBox_GetChecked, "Use GetCheckedItems instead.")
del _CheckListBox_GetChecked
%End

%Extract(id=pycode_core)
def _CheckListBox_SetChecked(self, indexes):
    return self.SetCheckedItems(indexes)
CheckListBox.SetChecked = wx.deprecated(_CheckListBox_SetChecked, "Use SetCheckedItems instead.")
del _CheckListBox_SetChecked
%End

%Extract(id=pycode_core)
CheckListBox.Checked = property(CheckListBox.GetChecked, CheckListBox.SetChecked)
%End

%Extract(id=pycode_core)
CheckListBox.CheckedItems = property(CheckListBox.GetCheckedItems, CheckListBox.SetCheckedItems)
%End

%Extract(id=pycode_core)
CheckListBox.CheckedStrings = property(CheckListBox.GetCheckedStrings, CheckListBox.SetCheckedStrings)
%End


//---------------------------------------------------------------------------

