//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------
%ModuleCode
    #ifdef __WXMAC__
    #include <wx/osx/private.h>
    #endif
    
    #undef wxTransparentColour
    wxColour wxTransparentColour(0, 0, 0, wxALPHA_TRANSPARENT);
    
    wxColour testColourTypeMap(const wxColour& c)
    {
        return c;
    }
    
%End

//---------------------------------------------------------------------------

enum 
{
    wxC2S_NAME,
    wxC2S_CSS_SYNTAX,
    wxC2S_HTML_SYNTAX
};

const int wxALPHA_TRANSPARENT;

const int wxALPHA_OPAQUE;

class wxColour : wxObject   /AllowNone/
{
    %Docstring
        Colour()
        Colour(red, green, blue, alpha=ALPHA_OPAQUE)
        Colour(colRGB)
        Colour(colour)
        
        A colour is an object representing a combination of Red, Green, and
        Blue (RGB) intensity values and an Alpha value, and is used to
        determine drawing colours.
    %End
    %TypeHeaderCode
        #include <wx/colour.h>
    %End

public:
    wxColour();

    wxColour(
        unsigned char red   /PyInt/,
        unsigned char green   /PyInt/,
        unsigned char blue   /PyInt/,
        unsigned char alpha   /PyInt/ = wxALPHA_OPAQUE
    );

    wxColour(
        unsigned long colRGB
    );

    wxColour(
        const wxColour & colour
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void SetRGB(
        wxUint32 colRGB
    );
    %Docstring
        SetRGB(colRGB)
        
        Sets the RGB or RGBA colour values from a single 32 bit value.
    %End

    void SetRGBA(
        wxUint32 colRGBA
    );
    %Docstring
        SetRGBA(colRGBA)
        
        Sets the RGB or RGBA colour values from a single 32 bit value.
    %End

    wxUint32 GetRGB() const;
    %Docstring
        GetRGB() -> Uint32
        
        Gets the RGB or RGBA colour values as a single 32 bit value.
    %End

    wxUint32 GetRGBA() const;
    %Docstring
        GetRGBA() -> Uint32
        
        Gets the RGB or RGBA colour values as a single 32 bit value.
    %End

    void Set(
        unsigned char red   /PyInt/,
        unsigned char green   /PyInt/,
        unsigned char blue   /PyInt/,
        unsigned char alpha   /PyInt/ = wxALPHA_OPAQUE
    );
    %Docstring
        Set(red, green, blue, alpha=ALPHA_OPAQUE)
        Set(RGB)
        Set(str) -> bool
        
        Sets the RGB intensity values using the given values (first overload),
        extracting them from the packed long (second overload), using the
        given string (third overload).
    %End

    void Set(
        unsigned long RGB
    );

    bool Set(
        const wxString & str
    );

    unsigned char Alpha() const   /PyInt/;
    %Docstring
        Alpha() -> unsignedchar
        
        Returns the alpha value, on platforms where alpha is not yet
        supported, this always returns wxALPHA_OPAQUE.
    %End

    unsigned char Blue() const   /PyInt/;
    %Docstring
        Blue() -> unsignedchar
        
        Returns the blue intensity.
    %End

    wxString GetAsString(
        long flags = wxC2S_NAME|wxC2S_CSS_SYNTAX
    ) const;
    %Docstring
        GetAsString(flags=C2S_NAME|C2S_CSS_SYNTAX) -> String
        
        Converts this colour to a wxString using the given flags.
    %End

    double GetLuminance() const;
    %Docstring
        GetLuminance() -> double
        
        Return the perceived brightness of the colour.
    %End

    wxIntPtr* GetPixel();
    %Docstring
        GetPixel() -> IntPtr
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxColour_GetPixel(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxIntPtr* _wxColour_GetPixel(wxColour* self)
    {
        #if defined(__WXGTK3__) || defined(__WXOSX__)
            return new wxIntPtr(0);
        #else
            return new wxIntPtr((wxIntPtr)self->GetPixel());
        #endif
    }
    %End

    unsigned char Green() const   /PyInt/;
    %Docstring
        Green() -> unsignedchar
        
        Returns the green intensity.
    %End

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if the colour object is valid (the colour has been
        initialised with RGB values).
    %End

    unsigned char Red() const   /PyInt/;
    %Docstring
        Red() -> unsignedchar
        
        Returns the red intensity.
    %End

    bool IsSolid() const;
    %Docstring
        IsSolid() -> bool
        
        Returns true if the color can be described using RGB values, i.e.
    %End

    bool operator!=(
        const wxColour & colour
    ) const;

    bool operator==(
        const wxColour & colour
    ) const;

    wxColour & MakeDisabled(
        unsigned char brightness   /PyInt/ = 255
    );
    %Docstring
        MakeDisabled(brightness=255) -> Colour
        MakeDisabled(r, g, b, brightness=255) -> (r, g, b)
        
        Make a disabled version of this colour.
    %End

    static
    void MakeDisabled(
        unsigned char * r   /In, Out/,
        unsigned char * g   /In, Out/,
        unsigned char * b   /In, Out/,
        unsigned char brightness   /PyInt/ = 255
    );

    wxColour ChangeLightness(
        int ialpha
    ) const;
    %Docstring
        ChangeLightness(ialpha) -> Colour
        ChangeLightness(r, g, b, ialpha) -> (r, g, b)
        
        wxColour wrapper for ChangeLightness(r,g,b,ialpha).
    %End

    static
    void ChangeLightness(
        unsigned char * r   /In, Out/,
        unsigned char * g   /In, Out/,
        unsigned char * b   /In, Out/,
        int ialpha
    );

    static
    void MakeMono(
        unsigned char * r   /Out/,
        unsigned char * g   /Out/,
        unsigned char * b   /Out/,
        bool on
    );
    %Docstring
        MakeMono(on) -> (r, g, b)
        
        Assigns the same value to r, g, b: 0 if on is false, 255 otherwise.
    %End

    static
    void MakeGrey(
        unsigned char * r   /In, Out/,
        unsigned char * g   /In, Out/,
        unsigned char * b   /In, Out/
    );
    %Docstring
        MakeGrey(r, g, b) -> (r, g, b)
        MakeGrey(r, g, b, weight_r, weight_g, weight_b) -> (r, g, b)
        
        Create a grey colour from (in/out) rgb parameters using integer
        arithmetic.
    %End

    static
    void MakeGrey(
        unsigned char * r   /In, Out/,
        unsigned char * g   /In, Out/,
        unsigned char * b   /In, Out/,
        double weight_r,
        double weight_g,
        double weight_b
    );

    static
    unsigned char AlphaBlend(
        unsigned char fg   /PyInt/,
        unsigned char bg   /PyInt/,
        double alpha
    )   /PyInt/;
    %Docstring
        AlphaBlend(fg, bg, alpha) -> unsignedchar
        
        Blend colour, taking alpha into account.
    %End

    %Property(name=Pixel, get=GetPixel)
    %Property(name=RGB, get=GetRGB, set=SetRGB)
    %Property(name=RGBA, get=GetRGBA, set=SetRGBA)
    %Property(name=red, get=Red)
    %Property(name=green, get=Green)
    %Property(name=blue, get=Blue)
    %Property(name=alpha, get=Alpha)
    void _copyFrom(const wxColour* other);
    %Docstring
        _copyFrom(other)
        
        For internal use only.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxColour__copyFrom(sipCpp, other);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxColour__copyFrom(wxColour* self, const wxColour* other)
    {
        *self = *other;
    }
    %End

    PyObject* Get(bool includeAlpha=true);
    %Docstring
        Get(includeAlpha=True) -> (r,g,b) or (r,g,b,a)
        
        Returns the RGB intensity values as a tuple, optionally the alpha
        value as well.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxColour_Get(sipCpp, includeAlpha);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxColour_Get(wxColour* self, bool includeAlpha)
    {
        int red = -1;
        int green = -1;
        int blue = -1;
        int alpha = wxALPHA_OPAQUE;
        if (self->IsOk()) {
            red =   self->Red();
            green = self->Green();
            blue =  self->Blue();
            alpha = self->Alpha();
        }
        wxPyThreadBlocker blocker;
        if (includeAlpha)
            return sipBuildResult(0, "(iiii)", red, green, blue, alpha);
        else
            return sipBuildResult(0, "(iii)", red, green, blue);
    }
    %End

    int __nonzero__();
    %Docstring
        __nonzero__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxColour___nonzero__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxColour___nonzero__(wxColour* self)
    {
        return self->IsOk();
    }
    %End

    int __bool__();
    %Docstring
        __bool__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxColour___bool__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxColour___bool__(wxColour* self)
    {
        return self->IsOk();
    }
    %End

    %ConvertToTypeCode
        // is it just a typecheck?
        if (!sipIsErr) {
            if (sipPy == Py_None)
                return 1;
            if (sipCanConvertToType(sipPy, sipType_wxColour, SIP_NO_CONVERTORS))
                return 1;
            if (PyBytes_Check(sipPy) || PyUnicode_Check(sipPy))
                return 1;
            if (wxPyNumberSequenceCheck(sipPy, 4) || wxPyNumberSequenceCheck(sipPy, 3)) {
                return 1;
            }
            return 0;
        }
        
        // otherwise do the conversion
        // is it None?
        if (sipPy == Py_None) {
            *sipCppPtr = new wxColour(wxNullColour);
            return sipGetState(sipTransferObj);
        }
        // Is it a string?
        else if (PyBytes_Check(sipPy) || PyUnicode_Check(sipPy)) {
            wxString spec = Py2wxString(sipPy);
            if (!spec.empty()
                && spec.GetChar(0) == '#'
                && (spec.length() == 7 || spec.length() == 9)) {  // It's  #RRGGBB[AA]
                long red, green, blue;
                red = green = blue = 0;
                spec.Mid(1,2).ToLong(&red,   16);
                spec.Mid(3,2).ToLong(&green, 16);
                spec.Mid(5,2).ToLong(&blue,  16);
        
                if (spec.length() == 7)         // no alpha
                    *sipCppPtr = new wxColour(red, green, blue);
                else {                          // yes alpha
                    long alpha;
                    spec.Mid(7,2).ToLong(&alpha, 16);
                    *sipCppPtr = new wxColour(red, green, blue, alpha);
                }
                return sipGetState(sipTransferObj);
            }
            else {                                       // assume it's a colour name
                // check if alpha is there too
                int pos;
                if (((pos = spec.Find(':', true)) != wxNOT_FOUND) && (pos == spec.length()-3)) {
                    long alpha;
                    spec.Right(2).ToLong(&alpha, 16);
                    wxColour c = wxColour(spec.Left(spec.length()-3));
                    *sipCppPtr = new wxColour(c.Red(), c.Green(), c.Blue(), alpha);
                }
                else
                    *sipCppPtr = new wxColour(spec);
                return sipGetState(sipTransferObj);
            }
        }
        // Is it a sequence? (if so then length was checked above)
        else if (wxPyNumberSequenceCheck(sipPy)) {
            size_t len = PySequence_Size(sipPy);
        
            PyObject* o1 = PySequence_ITEM(sipPy, 0);
            PyObject* o2 = PySequence_ITEM(sipPy, 1);
            PyObject* o3 = PySequence_ITEM(sipPy, 2);
            if (len == 3)
                *sipCppPtr = new wxColour(wxPyInt_AsLong(o1), wxPyInt_AsLong(o2), wxPyInt_AsLong(o3));
            else {
                PyObject* o4 = PySequence_ITEM(sipPy, 3);
                *sipCppPtr = new wxColour(wxPyInt_AsLong(o1), wxPyInt_AsLong(o2), wxPyInt_AsLong(o3),
                                          wxPyInt_AsLong(o4));
                Py_DECREF(o4);
            }
            Py_DECREF(o1);
            Py_DECREF(o2);
            Py_DECREF(o3);
            return sipGetState(sipTransferObj);
        }
        
        // if we get this far then it must already be a wxColour instance
        *sipCppPtr = reinterpret_cast<wxColour*>(sipConvertToType(
            sipPy, sipType_wxColour, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
        return 0; // not a new instance
    %End
};  // end of class wxColour


%Extract(id=pycode_core)
def _Colour_GetIM(self):
    """
    Returns an immutable representation of the ``wx.Colour`` object, based on ``namedtuple``.
    
    This new object is hashable and can be used as a dictionary key,
    be added to sets, etc.  It can be converted back into a real ``wx.Colour``
    with a simple statement like this: ``obj = wx.Colour(imObj)``.
    """
    return _im_Colour(*self.Get())
Colour.GetIM = _Colour_GetIM
del _Colour_GetIM
%End

%Extract(id=pycode_core)
def _Colour___str__(self):
    return str(self.Get())
Colour.__str__ = _Colour___str__
del _Colour___str__
%End

%Extract(id=pycode_core)
def _Colour___repr__(self):
    return "wx.Colour"+str(self.Get())
Colour.__repr__ = _Colour___repr__
del _Colour___repr__
%End

%Extract(id=pycode_core)
def _Colour___len__(self):
    return len(self.Get())
Colour.__len__ = _Colour___len__
del _Colour___len__
%End

%Extract(id=pycode_core)
def _Colour___reduce__(self):
    return (Colour, self.Get())
Colour.__reduce__ = _Colour___reduce__
del _Colour___reduce__
%End

%Extract(id=pycode_core)
def _Colour___getitem__(self, idx):
    return self.Get()[idx]
Colour.__getitem__ = _Colour___getitem__
del _Colour___getitem__
%End

%Extract(id=pycode_core)
def _Colour___setitem__(self, idx, val):
    if idx == 0:   self.red = val
    elif idx == 1: self.green = val
    elif idx == 2: self.blue = val
    elif idx == 3: self.alpha = val
    else: raise IndexError
Colour.__setitem__ = _Colour___setitem__
del _Colour___setitem__
%End

%Extract(id=pycode_core)
Colour.__safe_for_unpickling__ = True

%End

wxColour wxNullColour;

wxColour wxTransparentColour;

wxColour* MacThemeColour(int themeBrushID)   /Factory/;
%Docstring
    MacThemeColour(themeBrushID) -> Colour
%End
%MethodCode
    PyErr_Clear();
    Py_BEGIN_ALLOW_THREADS
    sipRes = _MacThemeColour_function(themeBrushID);
    Py_END_ALLOW_THREADS
    if (PyErr_Occurred()) sipIsErr = 1;
%End
%ModuleCode
wxColour* _MacThemeColour_function(int themeBrushID)
{
    #ifdef __WXMAC__
        return new wxColour(wxMacCreateCGColorFromHITheme(themeBrushID));
    #else
        wxPyRaiseNotImplemented();
        return NULL;
    #endif
}
%End

%Extract(id=pycode_core)
# These stock colours will be initialized when the wx.App object is created.
BLACK = Colour()
BLUE = Colour()
CYAN = Colour()
GREEN = Colour()
YELLOW = Colour()
LIGHT_GREY = Colour()
RED = Colour()
WHITE = Colour()

%End

%Extract(id=pycode_core)
from collections import namedtuple
_im_Colour = namedtuple('_im_Colour', ['red', 'green', 'blue', 'alpha'])
del namedtuple

%End

%Extract(id=pycode_core)
NamedColour = wx.deprecated(Colour, "Use Colour instead.")

%End

    wxColour testColourTypeMap(const wxColour& c);



//---------------------------------------------------------------------------

