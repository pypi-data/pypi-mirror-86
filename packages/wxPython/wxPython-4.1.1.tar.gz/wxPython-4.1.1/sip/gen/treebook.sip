//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/treebook.h>
%End


//---------------------------------------------------------------------------

wxEventType wxEVT_TREEBOOK_PAGE_CHANGED   /PyName=wxEVT_TREEBOOK_PAGE_CHANGED/;

wxEventType wxEVT_TREEBOOK_PAGE_CHANGING   /PyName=wxEVT_TREEBOOK_PAGE_CHANGING/;

wxEventType wxEVT_TREEBOOK_NODE_COLLAPSED   /PyName=wxEVT_TREEBOOK_NODE_COLLAPSED/;

wxEventType wxEVT_TREEBOOK_NODE_EXPANDED   /PyName=wxEVT_TREEBOOK_NODE_EXPANDED/;

class wxTreebook : wxBookCtrlBase
{
    %Docstring
        Treebook()
        Treebook(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=BK_DEFAULT, name=EmptyString)
        
        This class is an extension of the wxNotebook class that allows a tree
        structured set of pages to be shown in a control.
    %End
    %TypeHeaderCode
        #include <wx/treebook.h>
    %End

public:
    wxTreebook();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxTreebook(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxBK_DEFAULT,
        const wxString & name = wxEmptyString
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxTreebook();

    bool AddPage(
        wxWindow * page,
        const wxString & text,
        bool bSelect = false,
        int imageId = wxNOT_FOUND
    );
    %Docstring
        AddPage(page, text, bSelect=False, imageId=NOT_FOUND) -> bool
        
        Adds a new page.
    %End

    bool AddSubPage(
        wxWindow * page,
        const wxString & text,
        bool bSelect = false,
        int imageId = wxNOT_FOUND
    );
    %Docstring
        AddSubPage(page, text, bSelect=False, imageId=NOT_FOUND) -> bool
        
        Adds a new child-page to the last top-level page.
    %End

    bool CollapseNode(
        size_t pageId
    );
    %Docstring
        CollapseNode(pageId) -> bool
        
        Shortcut for ExpandNode( pageId, false ).
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxBK_DEFAULT,
        const wxString & name = wxEmptyString
    );
    %Docstring
        Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=BK_DEFAULT, name=EmptyString) -> bool
        
        Creates a treebook control.
    %End

    bool DeletePage(
        size_t pagePos
    );
    %Docstring
        DeletePage(pagePos) -> bool
        
        Deletes the page at the specified position and all its children.
    %End

    bool ExpandNode(
        size_t pageId,
        bool expand = true
    );
    %Docstring
        ExpandNode(pageId, expand=True) -> bool
        
        Expands (collapses) the pageId node.
    %End

    int GetPageParent(
        size_t page
    ) const;
    %Docstring
        GetPageParent(page) -> int
        
        Returns the parent page of the given one or wxNOT_FOUND if this is a
        top-level page.
    %End

    int GetSelection() const;
    %Docstring
        GetSelection() -> int
        
        Returns the currently selected page, or wxNOT_FOUND if none was
        selected.
    %End

    bool InsertPage(
        size_t pagePos,
        wxWindow * page,
        const wxString & text,
        bool bSelect = false,
        int imageId = wxNOT_FOUND
    );
    %Docstring
        InsertPage(pagePos, page, text, bSelect=False, imageId=NOT_FOUND) -> bool
        
        Inserts a new page just before the page indicated by pagePos.
    %End

    bool InsertSubPage(
        size_t pagePos,
        wxWindow * page,
        const wxString & text,
        bool bSelect = false,
        int imageId = wxNOT_FOUND
    );
    %Docstring
        InsertSubPage(pagePos, page, text, bSelect=False, imageId=NOT_FOUND) -> bool
        
        Inserts a sub page under the specified page.
    %End

    bool IsNodeExpanded(
        size_t pageId
    ) const;
    %Docstring
        IsNodeExpanded(pageId) -> bool
        
        Returns true if the page represented by pageId is expanded.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual int GetPageImage(size_t nPage) const;


    virtual bool SetPageImage(size_t page, int image);


    virtual wxString GetPageText(size_t nPage) const;


    virtual bool SetPageText(size_t page, const wxString& text);


    virtual int SetSelection(size_t page);


    virtual int ChangeSelection(size_t page);


    virtual int HitTest(const wxPoint& pt, long* flags /Out/ = NULL) const;


    virtual bool DeleteAllPages();


    wxTreeCtrl* GetTreeCtrl();
    %Docstring
        GetTreeCtrl() -> TreeCtrl
        
        Returns the tree control used for selecting pages.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreebook_GetTreeCtrl(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxTreeCtrl* _wxTreebook_GetTreeCtrl(wxTreebook* self)
    {
        return(self->GetTreeCtrl());
    }
    %End

    public:


    %Property(name=Selection, get=GetSelection)
    %Property(name=TreeCtrl, get=GetTreeCtrl)
};  // end of class wxTreebook


%Extract(id=pycode_core)
EVT_TREEBOOK_PAGE_CHANGED = wx.PyEventBinder( wxEVT_TREEBOOK_PAGE_CHANGED, 1 )
EVT_TREEBOOK_PAGE_CHANGING = wx.PyEventBinder( wxEVT_TREEBOOK_PAGE_CHANGING, 1)
EVT_TREEBOOK_NODE_COLLAPSED = wx.PyEventBinder( wxEVT_TREEBOOK_NODE_COLLAPSED, 1 )
EVT_TREEBOOK_NODE_EXPANDED = wx.PyEventBinder( wxEVT_TREEBOOK_NODE_EXPANDED, 1 )

# deprecated wxEVT aliases
wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED    = wxEVT_TREEBOOK_PAGE_CHANGED
wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING   = wxEVT_TREEBOOK_PAGE_CHANGING
wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED  = wxEVT_TREEBOOK_NODE_COLLAPSED
wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED   = wxEVT_TREEBOOK_NODE_EXPANDED

%End


//---------------------------------------------------------------------------

