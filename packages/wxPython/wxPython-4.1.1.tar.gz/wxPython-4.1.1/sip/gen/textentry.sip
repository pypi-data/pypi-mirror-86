//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

typedef long wxTextPos;

class wxTextEntry   /Abstract/
{
    %Docstring
        Common base class for single line text entry fields.
    %End
    %TypeHeaderCode
        #include <wx/textentry.h>
    %End

public:
    bool SetMargins(
        const wxPoint & pt
    );
    %Docstring
        SetMargins(pt) -> bool
        SetMargins(left, top=-1) -> bool
        
        Attempts to set the control margins.
    %End

    bool SetMargins(
        wxCoord left,
        wxCoord top = -1
    );

    void AppendText(
        const wxString & text
    );
    %Docstring
        AppendText(text)
        
        Appends the text to the end of the text control.
    %End

    bool AutoComplete(
        const wxArrayString & choices
    );
    %Docstring
        AutoComplete(choices) -> bool
        AutoComplete(completer) -> bool
        
        Call this function to enable auto-completion of the text typed in a
        single-line text control using the given choices.
    %End

    bool AutoComplete(
        wxTextCompleter * completer   /Transfer/
    );

    bool AutoCompleteFileNames();
    %Docstring
        AutoCompleteFileNames() -> bool
        
        Call this function to enable auto-completion of the text typed in a
        single-line text control using all valid file system paths.
    %End

    bool AutoCompleteDirectories();
    %Docstring
        AutoCompleteDirectories() -> bool
        
        Call this function to enable auto-completion of the text using the
        file system directories.
    %End

    virtual
    bool CanCopy() const;
    %Docstring
        CanCopy() -> bool
        
        Returns true if the selection can be copied to the clipboard.
    %End

    virtual
    bool CanCut() const;
    %Docstring
        CanCut() -> bool
        
        Returns true if the selection can be cut to the clipboard.
    %End

    virtual
    bool CanPaste() const;
    %Docstring
        CanPaste() -> bool
        
        Returns true if the contents of the clipboard can be pasted into the
        text control.
    %End

    virtual
    bool CanRedo() const;
    %Docstring
        CanRedo() -> bool
        
        Returns true if there is a redo facility available and the last
        operation can be redone.
    %End

    virtual
    bool CanUndo() const;
    %Docstring
        CanUndo() -> bool
        
        Returns true if there is an undo facility available and the last
        operation can be undone.
    %End

    void ChangeValue(
        const wxString & value
    );
    %Docstring
        ChangeValue(value)
        
        Sets the new text control value.
    %End

    void Clear();
    %Docstring
        Clear()
        
        Clears the text in the control.
    %End

    virtual
    void Copy();
    %Docstring
        Copy()
        
        Copies the selected text to the clipboard.
    %End

    virtual
    void Cut();
    %Docstring
        Cut()
        
        Copies the selected text to the clipboard and removes it from the
        control.
    %End

    void ForceUpper();
    %Docstring
        ForceUpper()
        
        Convert all text entered into the control to upper case.
    %End

    long GetInsertionPoint() const;
    %Docstring
        GetInsertionPoint() -> long
        
        Returns the insertion point, or cursor, position.
    %End

    wxTextPos GetLastPosition() const;
    %Docstring
        GetLastPosition() -> TextPos
        
        Returns the zero based index of the last position in the text control,
        which is equal to the number of characters in the control.
    %End

    wxString GetRange(
        long from_,
        long to_
    ) const;
    %Docstring
        GetRange(from_, to_) -> String
        
        Returns the string containing the text starting in the positions from
        and up to to in the control.
    %End

    void GetSelection(
        long * from   /Out/,
        long * to   /Out/
    ) const;
    %Docstring
        GetSelection() -> (from, to)
        
        Gets the current selection span.
    %End

    wxString GetStringSelection() const;
    %Docstring
        GetStringSelection() -> String
        
        Gets the text currently selected in the control.
    %End

    wxString GetValue() const;
    %Docstring
        GetValue() -> String
        
        Gets the contents of the control.
    %End

    bool IsEditable() const;
    %Docstring
        IsEditable() -> bool
        
        Returns true if the controls contents may be edited by user (note that
        it always can be changed by the program).
    %End

    bool IsEmpty() const;
    %Docstring
        IsEmpty() -> bool
        
        Returns true if the control is currently empty.
    %End

    virtual
    void Paste();
    %Docstring
        Paste()
        
        Pastes text from the clipboard to the text item.
    %End

    virtual
    void Redo();
    %Docstring
        Redo()
        
        If there is a redo facility and the last operation can be redone,
        redoes the last operation.
    %End

    void Remove(
        long from_,
        long to_
    );
    %Docstring
        Remove(from_, to_)
        
        Removes the text starting at the first given position up to (but not
        including) the character at the last position.
    %End

    void Replace(
        long from_,
        long to_,
        const wxString & value
    );
    %Docstring
        Replace(from_, to_, value)
        
        Replaces the text starting at the first position up to (but not
        including) the character at the last position with the given text.
    %End

    void SetEditable(
        bool editable
    );
    %Docstring
        SetEditable(editable)
        
        Makes the text item editable or read-only, overriding the
        wxTE_READONLY flag.
    %End

    void SetInsertionPoint(
        long pos
    );
    %Docstring
        SetInsertionPoint(pos)
        
        Sets the insertion point at the given position.
    %End

    void SetInsertionPointEnd();
    %Docstring
        SetInsertionPointEnd()
        
        Sets the insertion point at the end of the text control.
    %End

    void SetMaxLength(
        unsigned long len
    );
    %Docstring
        SetMaxLength(len)
        
        This function sets the maximum number of characters the user can enter
        into the control.
    %End

    void SetSelection(
        long from_,
        long to_
    );
    %Docstring
        SetSelection(from_, to_)
        
        Selects the text starting at the first position up to (but not
        including) the character at the last position.
    %End

    void SelectAll();
    %Docstring
        SelectAll()
        
        Selects all text in the control.
    %End

    void SelectNone();
    %Docstring
        SelectNone()
        
        Deselects selected text in the control.
    %End

    bool SetHint(
        const wxString & hint
    );
    %Docstring
        SetHint(hint) -> bool
        
        Sets a hint shown in an empty unfocused text control.
    %End

    wxString GetHint() const;
    %Docstring
        GetHint() -> String
        
        Returns the current hint string.
    %End

    wxPoint GetMargins() const;
    %Docstring
        GetMargins() -> Point
        
        Returns the margins used by the control.
    %End

    void SetValue(
        const wxString & value
    );
    %Docstring
        SetValue(value)
        
        Sets the new text control value.
    %End

    virtual
    void Undo();
    %Docstring
        Undo()
        
        If there is an undo facility and the last operation can be undone,
        undoes the last operation.
    %End

    void WriteText(
        const wxString & text
    );
    %Docstring
        WriteText(text)
        
        Writes the text into the text control at the current insertion
        position.
    %End

    public:


    %Property(name=Hint, get=GetHint, set=SetHint)
    %Property(name=InsertionPoint, get=GetInsertionPoint, set=SetInsertionPoint)
    %Property(name=LastPosition, get=GetLastPosition)
    %Property(name=Margins, get=GetMargins, set=SetMargins)
    %Property(name=StringSelection, get=GetStringSelection)
    %Property(name=Value, get=GetValue, set=SetValue)
};  // end of class wxTextEntry



//---------------------------------------------------------------------------

