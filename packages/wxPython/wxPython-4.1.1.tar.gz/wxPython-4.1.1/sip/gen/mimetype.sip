//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxFileType
{
    %Docstring
        FileType(ftInfo)
        
        This class holds information about a given file type.
    %End
    %TypeHeaderCode
        #include <wx/mimetype.h>
    %End

public:
public:
    class MessageParameters
    {
        %Docstring
            MessageParameters()
            MessageParameters(filename, mimetype=EmptyString)
            
            Class representing message parameters.
        %End
        %TypeHeaderCode
            #include <wx/mimetype.h>
        %End

    public:
        MessageParameters();

        MessageParameters(
            const wxString & filename,
            const wxString & mimetype = wxEmptyString
        );

        virtual
        ~MessageParameters();

        const wxString & GetFileName() const;
        %Docstring
            GetFileName() -> String
            
            Return the filename.
        %End

        const wxString & GetMimeType() const;
        %Docstring
            GetMimeType() -> String
            
            Return the MIME type.
        %End

        virtual
        wxString GetParamValue(
            const wxString & name
        ) const;
        %Docstring
            GetParamValue(name) -> String
            
            Overridable method for derived classes. Returns empty string by
            default.
        %End

        public:


        %Property(name=FileName, get=GetFileName)
        %Property(name=MimeType, get=GetMimeType)
    };  // end of class MessageParameters


    wxFileType(
        const wxFileTypeInfo & ftInfo
    );

    ~wxFileType();

    wxString GetOpenCommand(const wxFileType::MessageParameters& params);
    %Docstring
        GetOpenCommand(params) -> String
        GetOpenCommand(filename) -> String
        
        Returns the command which must be executed (see wx.Execute()) in order
        to open the file of the given type. The name of the file as well as
        any other parameters is retrieved from MessageParameters() class.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileType_GetOpenCommand(sipCpp, params);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxString* _wxFileType_GetOpenCommand(wxFileType* self, const wxFileType::MessageParameters* params)
    {
        wxString rv;
        self->GetOpenCommand(&rv, *params);
        return new wxString(rv);
    }
    %End

    wxString GetOpenCommand(const wxString& filename);
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileType_GetOpenCommand(sipCpp, filename);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxString* _wxFileType_GetOpenCommand(wxFileType* self, const wxString* filename)
    {
        return new wxString( self->GetOpenCommand(*filename) );
    }
    %End

    wxString GetDescription();
    %Docstring
        GetDescription() -> String
        
        Returns a brief description for this file type: for example, "text
        document" for
        the "text/plain" MIME type.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileType_GetDescription(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxString* _wxFileType_GetDescription(wxFileType* self)
    {
        wxString rv;
        self->GetDescription(&rv);
        return new wxString(rv);
    }
    %End

    wxArrayString* GetExtensions()   /Factory/;
    %Docstring
        GetExtensions() -> ArrayString
        
        Returns all extensions associated with this file type: for
        example, it may contain the following two elements for the MIME
        type "text/html" (notice the absence of the leading dot): "html"
        and "htm".
        
        This function is not implemented on Windows, there is no (efficient)
        way to retrieve associated extensions from the given MIME type on
        this platform.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileType_GetExtensions(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxArrayString* _wxFileType_GetExtensions(wxFileType* self)
    {
        wxArrayString* arr = new wxArrayString;
        self->GetExtensions(*arr); return arr;
    }
    %End

    wxIcon* GetIcon()   /Factory/;
    %Docstring
        GetIcon() -> Icon
        
        Return the icon associated with this mime type, if any.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileType_GetIcon(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxIcon* _wxFileType_GetIcon(wxFileType* self)
    {
        wxIconLocation loc;
        if (self->GetIcon(&loc))
            return new wxIcon(loc);
        else
            return NULL;
    }
    %End

    wxString GetMimeType();
    %Docstring
        GetMimeType() -> String
        
        Returns full MIME type specification for this file type: for example,
        "text/plain".
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileType_GetMimeType(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxString* _wxFileType_GetMimeType(wxFileType* self)
    {
        wxString rv;
        self->GetMimeType(&rv);
        return new wxString(rv);
    }
    %End

    wxArrayString* GetMimeTypes()   /Factory/;
    %Docstring
        GetMimeTypes() -> ArrayString
        
        Same as GetMimeType but returns a list of types.  This will usually
        contain
        only one item, but sometimes, such as on Unix with KDE more than one
        type
        if there are differences between KDE< mailcap and mime.types.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileType_GetMimeTypes(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxArrayString* _wxFileType_GetMimeTypes(wxFileType* self)
    {
        wxArrayString* arr = new wxArrayString;
        self->GetMimeTypes(*arr);
        return arr;
    }
    %End

    wxString GetPrintCommand(const wxFileType::MessageParameters& params);
    %Docstring
        GetPrintCommand(params) -> String
        
        Returns the command which must be executed (see wxExecute()) in order
        to
        print the file of the given type. The name of the file is retrieved
        from
        the MessageParameters class.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileType_GetPrintCommand(sipCpp, params);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxString* _wxFileType_GetPrintCommand(wxFileType* self, const wxFileType::MessageParameters* params)
    {
        wxString rv;
        self->GetPrintCommand(&rv, *params);
        return new wxString(rv);
    }
    %End

    wxString GetExpandedCommand(
        const wxString & verb,
        const wxFileType::MessageParameters & params
    ) const;
    %Docstring
        GetExpandedCommand(verb, params) -> String
        
        The returned string is the command to be executed in order to
        open/print/edit the file of the given type.
    %End

    void GetAllCommands(
        wxArrayString * verbs   /Out/,
        wxArrayString * commands   /Out/,
        const wxFileType::MessageParameters & params
    ) const;
    %Docstring
        GetAllCommands(params) -> (verbs, commands)
        
        Returns a tuple containing the `verbs` and `commands` arrays,
        corresponding for the registered information for this mime type.
    %End

    static
    wxString ExpandCommand(
        const wxString & command,
        const MessageParameters & params
    );
    %Docstring
        ExpandCommand(command, params) -> String
        
        This function is primarily intended for GetOpenCommand and
        GetPrintCommand usage but may be also used by the application directly
        if, for example, you want to use some non-default command to open the
        file.
    %End

    private:
        wxFileType(const wxFileType&);


    public:


    wxIconLocation* GetIconLocation()   /Factory/;
    %Docstring
        GetIconLocation() -> IconLocation
        
        Returns a wx.IconLocation that can be used to fetch the icon for this
        mime type.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileType_GetIconLocation(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxIconLocation* _wxFileType_GetIconLocation(wxFileType* self)
    {
        wxIconLocation loc;
        if (self->GetIcon(&loc))
            return new wxIconLocation(loc);
        else
            return NULL;
    }
    %End

    PyObject* GetIconInfo();
    %Docstring
        GetIconInfo() -> PyObject
        
        Returns a tuple containing the Icon for this file type, the file where
        the
        icon is found, and the index of the image in that file, if applicable.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileType_GetIconInfo(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxFileType_GetIconInfo(wxFileType* self)
    {
        wxIconLocation loc;
        if (self->GetIcon(&loc)) {
            wxString iconFile = loc.GetFileName();
            int iconIndex     = -1;
        #ifdef __WXMSW__
            iconIndex = loc.GetIndex();
        #endif
            // Make a tuple and put the values in it
            wxPyThreadBlocker blocker;
            PyObject* tuple = PyTuple_New(3);
            PyTuple_SetItem(tuple, 0,
                wxPyConstructObject(new wxIcon(loc), wxT("wxIcon"), true));
            PyTuple_SetItem(tuple, 1, wx2PyString(iconFile));
            PyTuple_SetItem(tuple, 2, wxPyInt_FromLong(iconIndex));
            return tuple;
        }
        else
            RETURN_NONE();
    }
    %End

    public:


    %Property(name=Description, get=GetDescription)
    %Property(name=Extensions, get=GetExtensions)
    %Property(name=Icon, get=GetIcon)
    %Property(name=IconInfo, get=GetIconInfo)
    %Property(name=IconLocation, get=GetIconLocation)
    %Property(name=MimeType, get=GetMimeType)
    %Property(name=MimeTypes, get=GetMimeTypes)
    %Property(name=OpenCommand, get=GetOpenCommand)
    %Property(name=PrintCommand, get=GetPrintCommand)
};  // end of class wxFileType


class wxFileTypeInfo
{
    %Docstring
        FileTypeInfo()
        FileTypeInfo(mimeType)
        FileTypeInfo(mimeType, openCmd, printCmd, description, extension)
        FileTypeInfo(sArray)
        
        Container of information about wxFileType.
    %End
    %TypeHeaderCode
        #include <wx/mimetype.h>
    %End

public:
    wxFileTypeInfo();

    wxFileTypeInfo(
        const wxString & mimeType
    );

    wxFileTypeInfo(
        const wxString & mimeType,
        const wxString & openCmd,
        const wxString & printCmd,
        const wxString & description,
        const wxString & extension
    );
    %MethodCode
        PyErr_Clear();
        sipCpp = _wxFileTypeInfo_ctor(mimeType, openCmd, printCmd, description, extension);
    %End
    %TypeCode
    wxFileTypeInfo* _wxFileTypeInfo_ctor(const wxString *mimeType, const wxString *openCmd, const wxString *printCmd, const wxString *description, const wxString *extension)
    {
        wxFileTypeInfo* fti = new wxFileTypeInfo(*mimeType);
        fti->SetOpenCommand(*openCmd);
        fti->SetPrintCommand(*printCmd);
        fti->SetDescription(*description);
        fti->AddExtension(*extension);
        return fti;
    }
    %End

    wxFileTypeInfo(
        const wxArrayString & sArray
    );

    void AddExtension(
        const wxString & ext
    );
    %Docstring
        AddExtension(ext)
        
        Add another extension associated with this file type.
    %End

    void SetDescription(
        const wxString & description
    );
    %Docstring
        SetDescription(description)
        
        Set the file type description.
    %End

    void SetOpenCommand(
        const wxString & command
    );
    %Docstring
        SetOpenCommand(command)
        
        Set the command to be used for opening files of this type.
    %End

    void SetPrintCommand(
        const wxString & command
    );
    %Docstring
        SetPrintCommand(command)
        
        Set the command to be used for printing files of this type.
    %End

    void SetShortDesc(
        const wxString & shortDesc
    );
    %Docstring
        SetShortDesc(shortDesc)
        
        Set the short description for the files of this type.
    %End

    void SetIcon(
        const wxString & iconFile,
        int iconIndex = 0
    );
    %Docstring
        SetIcon(iconFile, iconIndex=0)
        
        Set the icon information.
    %End

    const wxString & GetMimeType() const;
    %Docstring
        GetMimeType() -> String
        
        Get the MIME type.
    %End

    const wxString & GetOpenCommand() const;
    %Docstring
        GetOpenCommand() -> String
        
        Get the open command.
    %End

    const wxString & GetPrintCommand() const;
    %Docstring
        GetPrintCommand() -> String
        
        Get the print command.
    %End

    const wxString & GetShortDesc() const;
    %Docstring
        GetShortDesc() -> String
        
        Get the short description (only used under Win32 so far)
    %End

    const wxString & GetDescription() const;
    %Docstring
        GetDescription() -> String
        
        Get the long, user visible description.
    %End

    const wxArrayString & GetExtensions() const;
    %Docstring
        GetExtensions() -> ArrayString
        
        Get the array of all extensions.
    %End

    size_t GetExtensionsCount() const;
    %Docstring
        GetExtensionsCount() -> size_t
        
        Get the number of extensions.
    %End

    const wxString & GetIconFile() const;
    %Docstring
        GetIconFile() -> String
        
        Get the icon filename.
    %End

    int GetIconIndex() const;
    %Docstring
        GetIconIndex() -> int
        
        Get the index of the icon within the icon file.
    %End

    public:


    %Property(name=Description, get=GetDescription, set=SetDescription)
    %Property(name=Extensions, get=GetExtensions)
    %Property(name=ExtensionsCount, get=GetExtensionsCount)
    %Property(name=IconFile, get=GetIconFile)
    %Property(name=IconIndex, get=GetIconIndex)
    %Property(name=MimeType, get=GetMimeType)
    %Property(name=OpenCommand, get=GetOpenCommand, set=SetOpenCommand)
    %Property(name=PrintCommand, get=GetPrintCommand, set=SetPrintCommand)
    %Property(name=ShortDesc, get=GetShortDesc, set=SetShortDesc)
};  // end of class wxFileTypeInfo


class wxMimeTypesManager
{
    %Docstring
        MimeTypesManager()
        
        This class allows the application to retrieve information about all
        known MIME types from a system-specific location and the filename
        extensions to the MIME types and vice versa.
    %End
    %TypeHeaderCode
        #include <wx/mimetype.h>
    %End

public:
    wxMimeTypesManager();

    ~wxMimeTypesManager();

    void AddFallbacks(
        const wxFileTypeInfo * fallbacks
    );
    %Docstring
        AddFallbacks(fallbacks)
        
        This function may be used to provide hard-wired fallbacks for the MIME
        types and extensions that might not be present in the system MIME
        database.
    %End

    wxFileType * GetFileTypeFromExtension(
        const wxString & extension
    );
    %Docstring
        GetFileTypeFromExtension(extension) -> FileType
        
        Gather information about the files with given extension and return the
        corresponding wxFileType object or NULL if the extension is unknown.
    %End

    wxFileType * GetFileTypeFromMimeType(
        const wxString & mimeType
    );
    %Docstring
        GetFileTypeFromMimeType(mimeType) -> FileType
        
        Gather information about the files with given MIME type and return the
        corresponding wxFileType object or NULL if the MIME type is unknown.
    %End

    wxFileType * Associate(
        const wxFileTypeInfo & ftInfo
    )   /Factory/;
    %Docstring
        Associate(ftInfo) -> FileType
        
        Create a new association using the fields of wxFileTypeInfo (at least
        the MIME type and the extension should be set).
    %End

    bool Unassociate(
        wxFileType * ft
    );
    %Docstring
        Unassociate(ft) -> bool
        
        Undo Associate().
    %End

    wxArrayString* EnumAllFileTypes()   /Factory/;
    %Docstring
        EnumAllFileTypes() -> ArrayString
        
        Returns a list of all known file types.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxMimeTypesManager_EnumAllFileTypes(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxArrayString* _wxMimeTypesManager_EnumAllFileTypes(wxMimeTypesManager* self)
    {
        wxArrayString* arr = new wxArrayString;
        self->EnumAllFileTypes(*arr);
        return arr;
    }
    %End

    static
    bool IsOfType(
        const wxString & mimeType,
        const wxString & wildcard
    );
    %Docstring
        IsOfType(mimeType, wildcard) -> bool
        
        This function returns true if either the given mimeType is exactly the
        same as wildcard or if it has the same category and the subtype of
        wildcard is '*'.
    %End

    private:
        wxMimeTypesManager(const wxMimeTypesManager&);


};  // end of class wxMimeTypesManager


wxMimeTypesManager * wxTheMimeTypesManager;


//---------------------------------------------------------------------------

