//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxLC_VRULES;
const int wxLC_HRULES;
const int wxLC_ICON;
const int wxLC_SMALL_ICON;
const int wxLC_LIST;
const int wxLC_REPORT;
const int wxLC_ALIGN_TOP;
const int wxLC_ALIGN_LEFT;
const int wxLC_AUTOARRANGE;
const int wxLC_VIRTUAL;
const int wxLC_EDIT_LABELS;
const int wxLC_NO_HEADER;
const int wxLC_NO_SORT_HEADER;
const int wxLC_SINGLE_SEL;
const int wxLC_SORT_ASCENDING;
const int wxLC_SORT_DESCENDING;
const int wxLC_MASK_TYPE;
const int wxLC_MASK_ALIGN;
const int wxLC_MASK_SORT;
const int wxLIST_MASK_STATE;
const int wxLIST_MASK_TEXT;
const int wxLIST_MASK_IMAGE;
const int wxLIST_MASK_DATA;
const int wxLIST_SET_ITEM;
const int wxLIST_MASK_WIDTH;
const int wxLIST_MASK_FORMAT;
const int wxLIST_STATE_DONTCARE;
const int wxLIST_STATE_DROPHILITED;
const int wxLIST_STATE_FOCUSED;
const int wxLIST_STATE_SELECTED;
const int wxLIST_STATE_CUT;
const int wxLIST_HITTEST_ABOVE;
const int wxLIST_HITTEST_BELOW;
const int wxLIST_HITTEST_NOWHERE;
const int wxLIST_HITTEST_ONITEMICON;
const int wxLIST_HITTEST_ONITEMLABEL;
const int wxLIST_HITTEST_ONITEMSTATEICON;
const int wxLIST_HITTEST_TOLEFT;
const int wxLIST_HITTEST_TORIGHT;
const int wxLIST_HITTEST_ONITEM;
const int wxLIST_GETSUBITEMRECT_WHOLEITEM;
enum 
{
    wxLIST_NEXT_ABOVE,
    wxLIST_NEXT_ALL,
    wxLIST_NEXT_BELOW,
    wxLIST_NEXT_LEFT,
    wxLIST_NEXT_RIGHT
};

enum 
{
    wxLIST_ALIGN_DEFAULT,
    wxLIST_ALIGN_LEFT,
    wxLIST_ALIGN_TOP,
    wxLIST_ALIGN_SNAP_TO_GRID
};

enum wxListColumnFormat
{
    wxLIST_FORMAT_LEFT,
    wxLIST_FORMAT_RIGHT,
    wxLIST_FORMAT_CENTRE,
    wxLIST_FORMAT_CENTER
};

enum 
{
    wxLIST_AUTOSIZE,
    wxLIST_AUTOSIZE_USEHEADER
};

enum 
{
    wxLIST_RECT_BOUNDS,
    wxLIST_RECT_ICON,
    wxLIST_RECT_LABEL
};

enum 
{
    wxLIST_FIND_UP,
    wxLIST_FIND_DOWN,
    wxLIST_FIND_LEFT,
    wxLIST_FIND_RIGHT
};

wxEventType wxEVT_LIST_BEGIN_DRAG   /PyName=wxEVT_LIST_BEGIN_DRAG/;

wxEventType wxEVT_LIST_BEGIN_RDRAG   /PyName=wxEVT_LIST_BEGIN_RDRAG/;

wxEventType wxEVT_LIST_BEGIN_LABEL_EDIT   /PyName=wxEVT_LIST_BEGIN_LABEL_EDIT/;

wxEventType wxEVT_LIST_END_LABEL_EDIT   /PyName=wxEVT_LIST_END_LABEL_EDIT/;

wxEventType wxEVT_LIST_DELETE_ITEM   /PyName=wxEVT_LIST_DELETE_ITEM/;

wxEventType wxEVT_LIST_DELETE_ALL_ITEMS   /PyName=wxEVT_LIST_DELETE_ALL_ITEMS/;

wxEventType wxEVT_LIST_ITEM_SELECTED   /PyName=wxEVT_LIST_ITEM_SELECTED/;

wxEventType wxEVT_LIST_ITEM_DESELECTED   /PyName=wxEVT_LIST_ITEM_DESELECTED/;

wxEventType wxEVT_LIST_KEY_DOWN   /PyName=wxEVT_LIST_KEY_DOWN/;

wxEventType wxEVT_LIST_INSERT_ITEM   /PyName=wxEVT_LIST_INSERT_ITEM/;

wxEventType wxEVT_LIST_COL_CLICK   /PyName=wxEVT_LIST_COL_CLICK/;

wxEventType wxEVT_LIST_ITEM_RIGHT_CLICK   /PyName=wxEVT_LIST_ITEM_RIGHT_CLICK/;

wxEventType wxEVT_LIST_ITEM_MIDDLE_CLICK   /PyName=wxEVT_LIST_ITEM_MIDDLE_CLICK/;

wxEventType wxEVT_LIST_ITEM_ACTIVATED   /PyName=wxEVT_LIST_ITEM_ACTIVATED/;

wxEventType wxEVT_LIST_CACHE_HINT   /PyName=wxEVT_LIST_CACHE_HINT/;

wxEventType wxEVT_LIST_COL_RIGHT_CLICK   /PyName=wxEVT_LIST_COL_RIGHT_CLICK/;

wxEventType wxEVT_LIST_COL_BEGIN_DRAG   /PyName=wxEVT_LIST_COL_BEGIN_DRAG/;

wxEventType wxEVT_LIST_COL_DRAGGING   /PyName=wxEVT_LIST_COL_DRAGGING/;

wxEventType wxEVT_LIST_COL_END_DRAG   /PyName=wxEVT_LIST_COL_END_DRAG/;

wxEventType wxEVT_LIST_ITEM_FOCUSED   /PyName=wxEVT_LIST_ITEM_FOCUSED/;

wxEventType wxEVT_LIST_ITEM_CHECKED   /PyName=wxEVT_LIST_ITEM_CHECKED/;

wxEventType wxEVT_LIST_ITEM_UNCHECKED   /PyName=wxEVT_LIST_ITEM_UNCHECKED/;

class wxItemAttr
{
    %Docstring
        ItemAttr()
        ItemAttr(colText, colBack, font)
        
        Represents the attributes (colour, font, ...) of an item of a control
        with multiple items such as e.g.
    %End
    %TypeHeaderCode
        #include <wx/itemattr.h>
    %End

public:
    wxItemAttr();

    wxItemAttr(
        const wxColour & colText,
        const wxColour & colBack,
        const wxFont & font
    );

    bool operator==(
        const wxItemAttr & other
    ) const;

    bool operator!=(
        const wxItemAttr & other
    ) const;

    const wxColour & GetBackgroundColour() const;
    %Docstring
        GetBackgroundColour() -> Colour
        
        Returns the currently set background colour.
    %End

    const wxFont & GetFont() const;
    %Docstring
        GetFont() -> Font
        
        Returns the currently set font.
    %End

    const wxColour & GetTextColour() const;
    %Docstring
        GetTextColour() -> Colour
        
        Returns the currently set text colour.
    %End

    bool HasBackgroundColour() const;
    %Docstring
        HasBackgroundColour() -> bool
        
        Returns true if the currently set background colour is valid.
    %End

    bool HasColours() const;
    %Docstring
        HasColours() -> bool
        
        Returns true if either text or background colour is set.
    %End

    bool HasFont() const;
    %Docstring
        HasFont() -> bool
        
        Returns true if the currently set font is valid.
    %End

    bool HasTextColour() const;
    %Docstring
        HasTextColour() -> bool
        
        Returns true if the currently set text colour is valid.
    %End

    bool IsDefault() const;
    %Docstring
        IsDefault() -> bool
        
        Returns true if this object has no custom attributes set.
    %End

    void SetBackgroundColour(
        const wxColour & colour
    );
    %Docstring
        SetBackgroundColour(colour)
        
        Sets a new background colour.
    %End

    void SetFont(
        const wxFont & font
    );
    %Docstring
        SetFont(font)
        
        Sets a new font.
    %End

    void SetTextColour(
        const wxColour & colour
    );
    %Docstring
        SetTextColour(colour)
        
        Sets a new text colour.
    %End

    public:


    %Property(name=BackgroundColour, get=GetBackgroundColour, set=SetBackgroundColour)
    %Property(name=Font, get=GetFont, set=SetFont)
    %Property(name=TextColour, get=GetTextColour, set=SetTextColour)
};  // end of class wxItemAttr


class wxListItem : wxObject
{
    %Docstring
        ListItem()
        
        This class stores information about a wxListCtrl item or column.
    %End
    %TypeHeaderCode
        #include <wx/listctrl.h>
    %End

public:
    wxListItem();

    void SetData(
        long data
    );
    %Docstring
        SetData(data)
        
        Sets client data for the item.
    %End

    void Clear();
    %Docstring
        Clear()
        
        Resets the item state to the default.
    %End

    wxListColumnFormat GetAlign() const;
    %Docstring
        GetAlign() -> ListColumnFormat
        
        Returns the alignment for this item.
    %End

    wxColour GetBackgroundColour() const;
    %Docstring
        GetBackgroundColour() -> Colour
        
        Returns the background colour for this item.
    %End

    int GetColumn() const;
    %Docstring
        GetColumn() -> int
        
        Returns the zero-based column; meaningful only in report mode.
    %End

    long GetData() const;
    %Docstring
        GetData() -> long
        
        Returns client data associated with the control.
    %End

    wxFont GetFont() const;
    %Docstring
        GetFont() -> Font
        
        Returns the font used to display the item.
    %End

    long GetId() const;
    %Docstring
        GetId() -> long
        
        Returns the zero-based item position.
    %End

    int GetImage() const;
    %Docstring
        GetImage() -> int
        
        Returns the zero-based index of the image associated with the item
        into the image list.
    %End

    long GetMask() const;
    %Docstring
        GetMask() -> long
        
        Returns a bit mask indicating which fields of the structure are valid.
    %End

    long GetState() const;
    %Docstring
        GetState() -> long
        
        Returns a bit field representing the state of the item.
    %End

    const wxString & GetText() const;
    %Docstring
        GetText() -> String
        
        Returns the label/header text.
    %End

    wxColour GetTextColour() const;
    %Docstring
        GetTextColour() -> Colour
        
        Returns the text colour.
    %End

    int GetWidth() const;
    %Docstring
        GetWidth() -> int
        
        Meaningful only for column headers in report mode.
    %End

    void SetAlign(
        wxListColumnFormat align
    );
    %Docstring
        SetAlign(align)
        
        Sets the alignment for the item.
    %End

    void SetBackgroundColour(
        const wxColour & colBack
    );
    %Docstring
        SetBackgroundColour(colBack)
        
        Sets the background colour for the item.
    %End

    void SetColumn(
        int col
    );
    %Docstring
        SetColumn(col)
        
        Sets the zero-based column.
    %End

    void SetFont(
        const wxFont & font
    );
    %Docstring
        SetFont(font)
        
        Sets the font for the item.
    %End

    void SetId(
        long id
    );
    %Docstring
        SetId(id)
        
        Sets the zero-based item position.
    %End

    void SetImage(
        int image
    );
    %Docstring
        SetImage(image)
        
        Sets the zero-based index of the image associated with the item into
        the image list.
    %End

    void SetMask(
        long mask
    );
    %Docstring
        SetMask(mask)
        
        Sets the mask of valid fields.
    %End

    void SetState(
        long state
    );
    %Docstring
        SetState(state)
        
        Sets the item state flags (note that the valid state flags are
        influenced by the value of the state mask, see
        wxListItem::SetStateMask).
    %End

    void SetStateMask(
        long stateMask
    );
    %Docstring
        SetStateMask(stateMask)
        
        Sets the bitmask that is used to determine which of the state flags
        are to be set.
    %End

    void SetText(
        const wxString & text
    );
    %Docstring
        SetText(text)
        
        Sets the text label for the item.
    %End

    void SetTextColour(
        const wxColour & colText
    );
    %Docstring
        SetTextColour(colText)
        
        Sets the text colour for the item.
    %End

    void SetWidth(
        int width
    );
    %Docstring
        SetWidth(width)
        
        Meaningful only for column headers in report mode.
    %End

    public:


    %Property(name=Align, get=GetAlign, set=SetAlign)
    %Property(name=BackgroundColour, get=GetBackgroundColour, set=SetBackgroundColour)
    %Property(name=Column, get=GetColumn, set=SetColumn)
    %Property(name=Data, get=GetData, set=SetData)
    %Property(name=Font, get=GetFont, set=SetFont)
    %Property(name=Id, get=GetId, set=SetId)
    %Property(name=Image, get=GetImage, set=SetImage)
    %Property(name=Mask, get=GetMask, set=SetMask)
    %Property(name=State, get=GetState, set=SetState)
    %Property(name=Text, get=GetText, set=SetText)
    %Property(name=TextColour, get=GetTextColour, set=SetTextColour)
    %Property(name=Width, get=GetWidth, set=SetWidth)
};  // end of class wxListItem


const char* wxListCtrlNameStr;

class wxListCtrl : wxControl
{
    %Docstring
        ListCtrl()
        ListCtrl(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=LC_ICON, validator=DefaultValidator, name=ListCtrlNameStr)
        
        A list control presents lists in a number of formats: list view,
        report view, icon view and small icon view.
    %End
    %TypeHeaderCode
        #include <wx/listctrl.h>
    %End

    %TypeCode
        static int wxCALLBACK wxPyListCtrl_SortItems(wxIntPtr item1, wxIntPtr item2, wxIntPtr funcPtr)
        {
            int retval = 0;
            PyObject* func = (PyObject*)funcPtr;
            wxPyThreadBlocker blocker;
        
        #if SIZEOF_LONG >= SIZEOF_VOID_P
            PyObject* args = Py_BuildValue("(ll)", item1, item2);
        #else
            PyObject* args = Py_BuildValue("(LL)", item1, item2);
        #endif
        
            PyObject* result = PyEval_CallObject(func, args);
            Py_DECREF(args);
            if (result) {
                retval = wxPyInt_AsLong(result);
                Py_DECREF(result);
            }
            return retval;
        }
    %End
public:
    wxListCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxListCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxLC_ICON,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxListCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxListCtrl();

    long AppendColumn(
        const wxString & heading,
        wxListColumnFormat format = wxLIST_FORMAT_LEFT,
        int width = -1
    );
    %Docstring
        AppendColumn(heading, format=LIST_FORMAT_LEFT, width=-1) -> long
        
        Adds a new column to the list control in report view mode.
    %End

    bool Arrange(
        int flag = wxLIST_ALIGN_DEFAULT
    );
    %Docstring
        Arrange(flag=LIST_ALIGN_DEFAULT) -> bool
        
        Arranges the items in icon or small icon view.
    %End

    void AssignImageList(
        wxImageList * imageList   /Transfer/,
        int which
    );
    %Docstring
        AssignImageList(imageList, which)
        
        Sets the image list associated with the control and takes ownership of
        it (i.e.
    %End

    void ClearAll();
    %Docstring
        ClearAll()
        
        Deletes all items and all columns.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxLC_ICON,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxListCtrlNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=LC_ICON, validator=DefaultValidator, name=ListCtrlNameStr) -> bool
        
        Creates the list control.
    %End

    bool DeleteAllColumns();
    %Docstring
        DeleteAllColumns() -> bool
        
        Delete all columns in the list control.
    %End

    bool DeleteAllItems();
    %Docstring
        DeleteAllItems() -> bool
        
        Deletes all items in the list control.
    %End

    bool DeleteColumn(
        int col
    );
    %Docstring
        DeleteColumn(col) -> bool
        
        Deletes a column.
    %End

    bool DeleteItem(
        long item
    );
    %Docstring
        DeleteItem(item) -> bool
        
        Deletes the specified item.
    %End

    wxTextCtrl * EditLabel(
        long item
    );
    %Docstring
        EditLabel(item) -> TextCtrl
        
        Starts editing the label of the given item.
    %End

    void EnableAlternateRowColours(
        bool enable = true
    );
    %Docstring
        EnableAlternateRowColours(enable=True)
        
        Enable alternating row background colours (also called zebra
        striping).
    %End

    void EnableBellOnNoMatch(
        bool on = true
    );
    %Docstring
        EnableBellOnNoMatch(on=True)
        
        Enable or disable a beep if there is no match for the currently
        entered text when searching for the item from keyboard.
    %End

    bool EnsureVisible(
        long item
    );
    %Docstring
        EnsureVisible(item) -> bool
        
        Ensures this item is visible.
    %End

    long FindItem(
        long start,
        const wxString & str,
        bool partial = false
    );
    %Docstring
        FindItem(start, str, partial=False) -> long
        FindItem(start, data) -> long
        FindItem(start, pt, direction) -> long
        
        Find an item whose label matches this string, starting from start or
        the beginning if start is -1.
    %End

    long FindItem(
        long start,
        wxUIntPtr data
    );

    long FindItem(
        long start,
        const wxPoint & pt,
        int direction
    );

    wxListItem* GetColumn(int col)   /Factory/;
    %Docstring
        GetColumn(col) -> ListItem
        
        Gets information about this column. See SetItem() for more
        information.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetColumn(sipCpp, col);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxListItem* _wxListCtrl_GetColumn(wxListCtrl* self, int col)
    {
        wxListItem item;
        item.SetMask( wxLIST_MASK_STATE |
                      wxLIST_MASK_TEXT  |
                      wxLIST_MASK_IMAGE |
                      wxLIST_MASK_DATA  |
                      wxLIST_SET_ITEM   |
                      wxLIST_MASK_WIDTH |
                      wxLIST_MASK_FORMAT
                      );
        if (self->GetColumn(col, item))
            return new wxListItem(item);
        else
            return NULL;
    }
    %End

    int GetColumnCount() const;
    %Docstring
        GetColumnCount() -> int
        
        Returns the number of columns.
    %End

    int GetColumnIndexFromOrder(
        int pos
    ) const;
    %Docstring
        GetColumnIndexFromOrder(pos) -> int
        
        Gets the column index from its position in visual order.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetColumnIndexFromOrder(sipCpp, pos);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxListCtrl_GetColumnIndexFromOrder(const wxListCtrl* self, int pos)
    {
        #ifdef wxHAS_LISTCTRL_COLUMN_ORDER
            return self->GetColumnIndexFromOrder(pos);
        #else
            wxPyRaiseNotImplemented();
            return 0;
        #endif
    }
    %End

    int GetColumnOrder(
        int col
    ) const;
    %Docstring
        GetColumnOrder(col) -> int
        
        Gets the column visual order position.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetColumnOrder(sipCpp, col);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxListCtrl_GetColumnOrder(const wxListCtrl* self, int col)
    {
        #ifdef wxHAS_LISTCTRL_COLUMN_ORDER
            return self->GetColumnOrder(col);
        #else
            wxPyRaiseNotImplemented();
            return 0;
        #endif
    }
    %End

    int GetColumnWidth(
        int col
    ) const;
    %Docstring
        GetColumnWidth(col) -> int
        
        Gets the column width (report view only).
    %End

    wxArrayInt* GetColumnsOrder() const   /Factory/;
    %Docstring
        GetColumnsOrder() -> ArrayInt
        
        Returns the array containing the orders of all columns.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetColumnsOrder(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxArrayInt* _wxListCtrl_GetColumnsOrder(const wxListCtrl* self)
    {
        #ifdef wxHAS_LISTCTRL_COLUMN_ORDER
            return new wxArrayInt(self->GetColumnsOrder());
        #else
            wxPyRaiseNotImplemented();
            return new wxArrayInt();
        #endif
    }
    %End

    int GetCountPerPage() const;
    %Docstring
        GetCountPerPage() -> int
        
        Gets the number of items that can fit vertically in the visible area
        of the list control (list or report view) or the total number of items
        in the list control (icon or small icon view).
    %End

    wxTextCtrl * GetEditControl() const;
    %Docstring
        GetEditControl() -> TextCtrl
        
        Returns the edit control being currently used to edit a label.
    %End

    wxImageList * GetImageList(
        int which
    ) const;
    %Docstring
        GetImageList(which) -> ImageList
        
        Returns the specified image list.
    %End

    wxListItem* GetItem(int itemIdx,  int col=0)   /Factory/;
    %Docstring
        GetItem(itemIdx, col=0) -> ListItem
        
        Gets information about the item. See SetItem() for more information.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetItem(sipCpp, itemIdx, col);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxListItem* _wxListCtrl_GetItem(wxListCtrl* self, int itemIdx, int col)
    {
        wxListItem* info = new wxListItem;
        info->m_itemId = itemIdx;
        info->m_col = col;
        info->m_mask = 0xFFFF;
        info->m_stateMask = 0xFFFF;
        self->GetItem(*info);
        return info;
    }
    %End

    wxColour GetItemBackgroundColour(
        long item
    ) const;
    %Docstring
        GetItemBackgroundColour(item) -> Colour
        
        Returns the colour for this item.
    %End

    int GetItemCount() const;
    %Docstring
        GetItemCount() -> int
        
        Returns the number of items in the list control.
    %End

    long GetItemData(
        long item
    ) const;
    %Docstring
        GetItemData(item) -> long
        
        Gets the application-defined data associated with this item.
    %End

    wxFont GetItemFont(
        long item
    ) const;
    %Docstring
        GetItemFont(item) -> Font
        
        Returns the item's font.
    %End

    wxPoint* GetItemPosition(long item)   /Factory/;
    %Docstring
        GetItemPosition(item) -> Point
        
        Returns the position of the item, in icon or small icon view.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetItemPosition(sipCpp, item);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxPoint* _wxListCtrl_GetItemPosition(wxListCtrl* self, long item)
    {
        wxPoint* pos = new wxPoint;
        self->GetItemPosition(item, *pos);
        return pos;
    }
    %End

    wxRect* GetItemRect(long item,  int code = wxLIST_RECT_BOUNDS)   /Factory/;
    %Docstring
        GetItemRect(item, code=LIST_RECT_BOUNDS) -> Rect
        
        Returns the rectangle representing the item's size and position, in
        physical coordinates.
        code is one of wx.LIST_RECT_BOUNDS, wx.LIST_RECT_ICON,
        wx.LIST_RECT_LABEL.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetItemRect(sipCpp, item, code);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxRect* _wxListCtrl_GetItemRect(wxListCtrl* self, long item, int code)
    {
        wxRect* rect = new wxRect;
        self->GetItemRect(item, *rect, code);
        return rect;
    }
    %End

    wxSize GetItemSpacing() const;
    %Docstring
        GetItemSpacing() -> Size
        
        Retrieves the spacing between icons in pixels: horizontal spacing is
        returned as x component of the wxSize object and the vertical spacing
        as its y component.
    %End

    int GetItemState(
        long item,
        long stateMask
    ) const;
    %Docstring
        GetItemState(item, stateMask) -> int
        
        Gets the item state.
    %End

    wxString GetItemText(
        long item,
        int col = 0
    ) const;
    %Docstring
        GetItemText(item, col=0) -> String
        
        Gets the item text for this item.
    %End

    wxColour GetItemTextColour(
        long item
    ) const;
    %Docstring
        GetItemTextColour(item) -> Colour
        
        Returns the colour for this item.
    %End

    long GetNextItem(
        long item,
        int geometry = wxLIST_NEXT_ALL,
        int state = wxLIST_STATE_DONTCARE
    ) const;
    %Docstring
        GetNextItem(item, geometry=LIST_NEXT_ALL, state=LIST_STATE_DONTCARE) -> long
        
        Searches for an item with the given geometry or state, starting from
        item but excluding the item itself.
    %End

    int GetSelectedItemCount() const;
    %Docstring
        GetSelectedItemCount() -> int
        
        Returns the number of selected items in the list control.
    %End

    bool GetSubItemRect(
        long item,
        long subItem,
        wxRect & rect,
        int code = wxLIST_RECT_BOUNDS
    ) const;
    %Docstring
        GetSubItemRect(item, subItem, rect, code=LIST_RECT_BOUNDS) -> bool
        
        Returns the rectangle representing the size and position, in physical
        coordinates, of the given subitem, i.e.
    %End

    wxColour GetTextColour() const;
    %Docstring
        GetTextColour() -> Colour
        
        Gets the text colour of the list control.
    %End

    long GetTopItem() const;
    %Docstring
        GetTopItem() -> long
        
        Gets the index of the topmost visible item when in list or report
        view.
    %End

    wxRect GetViewRect() const;
    %Docstring
        GetViewRect() -> Rect
        
        Returns the rectangle taken by all items in the control.
    %End

    void SetAlternateRowColour(
        const wxColour & colour
    );
    %Docstring
        SetAlternateRowColour(colour)
        
        Set the alternative row background colour to a specific colour.
    %End

    wxColour GetAlternateRowColour() const;
    %Docstring
        GetAlternateRowColour() -> Colour
        
        Get the alternative row background colour.
    %End

    long HitTest(
        const wxPoint & point,
        int & flags   /Out/
    ) const;
    %Docstring
        HitTest(point) -> (long, flags)
        
        Determines which item (if any) is at the specified point, giving
        details in flags.
    %End

    bool InReportView() const;
    %Docstring
        InReportView() -> bool
        
        Returns true if the control is currently using wxLC_REPORT style.
    %End

    long InsertColumn(
        long col,
        const wxListItem & info
    );
    %Docstring
        InsertColumn(col, info) -> long
        InsertColumn(col, heading, format=LIST_FORMAT_LEFT, width=LIST_AUTOSIZE) -> long
        
        For report view mode (only), inserts a column.
    %End

    long InsertColumn(
        long col,
        const wxString & heading,
        int format = wxLIST_FORMAT_LEFT,
        int width = wxLIST_AUTOSIZE
    );

    long InsertItem(
        wxListItem & info
    );
    %Docstring
        InsertItem(info) -> long
        InsertItem(index, label) -> long
        InsertItem(index, imageIndex) -> long
        InsertItem(index, label, imageIndex) -> long
        
        Inserts an item, returning the index of the new item if successful, -1
        otherwise.
    %End

    long InsertItem(
        long index,
        const wxString & label
    );

    long InsertItem(
        long index,
        int imageIndex
    );

    long InsertItem(
        long index,
        const wxString & label,
        int imageIndex
    );

    bool IsEmpty() const;
    %Docstring
        IsEmpty() -> bool
        
        Returns true if the control doesn't currently contain any items.
    %End

    bool IsVirtual() const;
    %Docstring
        IsVirtual() -> bool
        
        Returns true if the control is currently in virtual report view.
    %End

    void RefreshItem(
        long item
    );
    %Docstring
        RefreshItem(item)
        
        Redraws the given item.
    %End

    void RefreshItems(
        long itemFrom,
        long itemTo
    );
    %Docstring
        RefreshItems(itemFrom, itemTo)
        
        Redraws the items between itemFrom and itemTo.
    %End

    bool ScrollList(
        int dx,
        int dy
    );
    %Docstring
        ScrollList(dx, dy) -> bool
        
        Scrolls the list control.
    %End

    bool SetBackgroundColour(
        const wxColour & col
    );
    %Docstring
        SetBackgroundColour(col) -> bool
        
        Sets the background colour.
    %End

    bool SetColumn(
        int col,
        wxListItem & item
    );
    %Docstring
        SetColumn(col, item) -> bool
        
        Sets information about this column.
    %End

    bool SetColumnWidth(
        int col,
        int width
    );
    %Docstring
        SetColumnWidth(col, width) -> bool
        
        Sets the column width.
    %End

    bool SetColumnsOrder(
        const wxArrayInt & orders
    );
    %Docstring
        SetColumnsOrder(orders) -> bool
        
        Changes the order in which the columns are shown.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_SetColumnsOrder(sipCpp, orders);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxListCtrl_SetColumnsOrder(wxListCtrl* self, const wxArrayInt *orders)
    {
        #ifdef wxHAS_LISTCTRL_COLUMN_ORDER
            return self->SetColumnsOrder(*orders);
        #else
            wxPyRaiseNotImplemented();
            return false;
        #endif
    }
    %End

    bool SetHeaderAttr(
        const wxItemAttr & attr
    );
    %Docstring
        SetHeaderAttr(attr) -> bool
        
        Change the font and the colours used for the list control header.
    %End

    void SetImageList(
        wxImageList * imageList,
        int which
    );
    %Docstring
        SetImageList(imageList, which)
        
        Sets the image list associated with the control.
    %End

    bool IsVisible(
        long item
    ) const;
    %Docstring
        IsVisible(item) -> bool
        
        Check if the item is visible.
    %End

    bool SetItem(
        wxListItem & info
    );
    %Docstring
        SetItem(info) -> bool
        SetItem(index, column, label, imageId=-1) -> bool
        
        Sets the data of an item.
    %End

    bool SetItem(
        long index,
        int column,
        const wxString & label,
        int imageId = -1
    );

    void SetItemBackgroundColour(
        long item,
        const wxColour & col
    );
    %Docstring
        SetItemBackgroundColour(item, col)
        
        Sets the background colour for this item.
    %End

    bool SetItemColumnImage(
        long item,
        long column,
        int image
    );
    %Docstring
        SetItemColumnImage(item, column, image) -> bool
        
        Sets the image associated with the item.
    %End

    void SetItemCount(
        long count
    );
    %Docstring
        SetItemCount(count)
        
        This method can only be used with virtual list controls.
    %End

    bool SetItemData(
        long item,
        long data
    );
    %Docstring
        SetItemData(item, data) -> bool
        
        Associates application-defined data with this item.
    %End

    void SetItemFont(
        long item,
        const wxFont & font
    );
    %Docstring
        SetItemFont(item, font)
        
        Sets the item's font.
    %End

    bool SetItemImage(
        long item,
        int image,
        int selImage = -1
    );
    %Docstring
        SetItemImage(item, image, selImage=-1) -> bool
        
        Sets the unselected and selected images associated with the item.
    %End

    bool SetItemPosition(
        long item,
        const wxPoint & pos
    );
    %Docstring
        SetItemPosition(item, pos) -> bool
        
        Sets the position of the item, in icon or small icon view.
    %End

    bool SetItemState(
        long item,
        long state,
        long stateMask
    );
    %Docstring
        SetItemState(item, state, stateMask) -> bool
        
        Sets the item state.
    %End

    void SetItemText(
        long item,
        const wxString & text
    );
    %Docstring
        SetItemText(item, text)
        
        Sets the item text for this item.
    %End

    void SetItemTextColour(
        long item,
        const wxColour & col
    );
    %Docstring
        SetItemTextColour(item, col)
        
        Sets the colour for this item.
    %End

    void SetSingleStyle(
        long style,
        bool add = true
    );
    %Docstring
        SetSingleStyle(style, add=True)
        
        Adds or removes a single window style.
    %End

    void SetTextColour(
        const wxColour & col
    );
    %Docstring
        SetTextColour(col)
        
        Sets the text colour of the list control.
    %End

    void SetWindowStyleFlag(
        long style
    );
    %Docstring
        SetWindowStyleFlag(style)
        
        Sets the whole window style, deleting all items.
    %End

    bool SortItems(
        PyObject* fnSortCallBack
    );
    %Docstring
        SortItems(fnSortCallBack) -> bool
        
        Call this function to sort the items in the list control.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_SortItems(sipCpp, fnSortCallBack);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxListCtrl_SortItems(wxListCtrl* self, PyObject* fnSortCallBack)
    {
        if (!PyCallable_Check(fnSortCallBack))
            return false;
        return self->SortItems((wxListCtrlCompare)wxPyListCtrl_SortItems,
                               (wxIntPtr)fnSortCallBack);
    }
    %End

    bool HasCheckBoxes() const;
    %Docstring
        HasCheckBoxes() -> bool
        
        Returns true if checkboxes are enabled for list items.
    %End

    bool EnableCheckBoxes(
        bool enable = true
    );
    %Docstring
        EnableCheckBoxes(enable=True) -> bool
        
        Enable or disable checkboxes for list items.
    %End

    bool IsItemChecked(
        long item
    ) const;
    %Docstring
        IsItemChecked(item) -> bool
        
        Return true if the checkbox for the given wxListItem is checked.
    %End

    void CheckItem(
        long item,
        bool check = true
    );
    %Docstring
        CheckItem(item, check=True)
        
        Check or uncheck a wxListItem in a control using checkboxes.
    %End

    void ExtendRulesAndAlternateColour(
        bool extend = true
    );
    %Docstring
        ExtendRulesAndAlternateColour(extend=True)
        
        Extend rules and alternate rows background to the entire client area.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void EnableSystemTheme(
        bool enable = true
    );
    %Docstring
        EnableSystemTheme(enable=True)
        
        Can be used to disable the system theme of controls using it by
        default.
    %End

    PyObject* HitTestSubItem(const wxPoint& point);
    %Docstring
        HitTestSubItemHitTestSubItem(point) -> (item, flags, subitem)
        
        Determines which item (if any) is at the specified point, giving
        details in flags.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_HitTestSubItem(sipCpp, point);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxListCtrl_HitTestSubItem(wxListCtrl* self, const wxPoint* point)
    {
        long item, subitem;
        int flags;
        item = self->HitTest(*point, flags, &subitem);
        wxPyThreadBlocker blocker;
        PyObject* rv = PyTuple_New(3);
        PyTuple_SetItem(rv, 0, wxPyInt_FromLong(item));
        PyTuple_SetItem(rv, 1, wxPyInt_FromLong(flags));
        PyTuple_SetItem(rv, 2, wxPyInt_FromLong(subitem));
        return rv;
    }
    %End

    bool HasColumnOrderSupport();
    %Docstring
        HasColumnOrderSupport() -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_HasColumnOrderSupport(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxListCtrl_HasColumnOrderSupport(wxListCtrl* self)
    {
        #ifdef wxHAS_LISTCTRL_COLUMN_ORDER
            return true;
        #else
            return false;
        #endif
    }
    %End

    wxWindow* GetMainWindow();
    %Docstring
        GetMainWindow() -> Window
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetMainWindow(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxWindow* _wxListCtrl_GetMainWindow(wxListCtrl* self)
    {
        #if defined(__WXMSW__) || defined(__WXMAC__)
            return self;
        #else
            return (wxWindow*)self->m_mainWin;
        #endif
    }
    %End

    public:


    %Property(name=AlternateRowColour, get=GetAlternateRowColour, set=SetAlternateRowColour)
    %Property(name=Column, get=GetColumn, set=SetColumn)
    %Property(name=ColumnCount, get=GetColumnCount)
    %Property(name=ColumnsOrder, get=GetColumnsOrder, set=SetColumnsOrder)
    %Property(name=CountPerPage, get=GetCountPerPage)
    %Property(name=EditControl, get=GetEditControl)
    %Property(name=Item, get=GetItem, set=SetItem)
    %Property(name=ItemCount, get=GetItemCount, set=SetItemCount)
    %Property(name=ItemPosition, get=GetItemPosition, set=SetItemPosition)
    %Property(name=ItemRect, get=GetItemRect)
    %Property(name=ItemSpacing, get=GetItemSpacing)
    %Property(name=MainWindow, get=GetMainWindow)
    %Property(name=SelectedItemCount, get=GetSelectedItemCount)
    %Property(name=TextColour, get=GetTextColour, set=SetTextColour)
    %Property(name=TopItem, get=GetTopItem)
    %Property(name=ViewRect, get=GetViewRect)

protected:
    virtual
    wxItemAttr * OnGetItemAttr(
        long item
    ) const;
    %Docstring
        OnGetItemAttr(item) -> ItemAttr
        
        This function may be overridden in the derived class for a control
        with wxLC_VIRTUAL style.
    %End

    virtual
    int OnGetItemColumnImage(
        long item,
        long column
    ) const;
    %Docstring
        OnGetItemColumnImage(item, column) -> int
        
        Override this function in the derived class for a control with
        wxLC_VIRTUAL and wxLC_REPORT styles in order to specify the image
        index for the given line and column.
    %End

    virtual
    int OnGetItemImage(
        long item
    ) const;
    %Docstring
        OnGetItemImage(item) -> int
        
        This function must be overridden in the derived class for a control
        with wxLC_VIRTUAL style having an "image list" (see SetImageList(); if
        the control doesn't have an image list, it is not necessary to
        override it).
    %End

    virtual
    wxString OnGetItemText(
        long item,
        long column
    ) const;
    %Docstring
        OnGetItemText(item, column) -> String
        
        This function must be overridden in the derived class for a control
        with wxLC_VIRTUAL style.
    %End

    virtual
    bool OnGetItemIsChecked(
        long item
    ) const;
    %Docstring
        OnGetItemIsChecked(item) -> bool
        
        This function must be overridden in the derived class for a control
        with wxLC_VIRTUAL style that uses checkboxes.
    %End

};  // end of class wxListCtrl


%Extract(id=pycode_core)
ListCtrl.FindItemData = wx.deprecated(ListCtrl.FindItem, "Use FindItem instead.")

%End

%Extract(id=pycode_core)
ListCtrl.FindItemAtPos = wx.deprecated(ListCtrl.FindItem, "Use FindItem instead.")

%End

%Extract(id=pycode_core)
ListCtrl.InsertStringItem = wx.deprecated(ListCtrl.InsertItem, "Use InsertItem instead.")

%End

%Extract(id=pycode_core)
ListCtrl.InsertImageItem = wx.deprecated(ListCtrl.InsertItem, "Use InsertItem instead.")

%End

%Extract(id=pycode_core)
ListCtrl.InsertImageStringItem = wx.deprecated(ListCtrl.InsertItem, "Use InsertItem instead.")

%End

%Extract(id=pycode_core)
ListCtrl.SetStringItem = wx.deprecated(ListCtrl.SetItem, "Use SetItem instead.")

%End

%Extract(id=pycode_core)
def _ListCtrl_Select(self, idx, on=1):
    """
    Selects/deselects an item.
    """
    if on: state = wx.LIST_STATE_SELECTED
    else: state = 0
    self.SetItemState(idx, state, wx.LIST_STATE_SELECTED)
ListCtrl.Select = _ListCtrl_Select
del _ListCtrl_Select
%End

%Extract(id=pycode_core)
def _ListCtrl_Focus(self, idx):
    """
    Focus and show the given item.
    """
    self.SetItemState(idx, wx.LIST_STATE_FOCUSED, wx.LIST_STATE_FOCUSED)
    self.EnsureVisible(idx)
ListCtrl.Focus = _ListCtrl_Focus
del _ListCtrl_Focus
%End

%Extract(id=pycode_core)
def _ListCtrl_GetFocusedItem(self):
    """
    Gets the currently focused item or -1 if none is focused.
    """
    return self.GetNextItem(-1, wx.LIST_NEXT_ALL, wx.LIST_STATE_FOCUSED)
ListCtrl.GetFocusedItem = _ListCtrl_GetFocusedItem
del _ListCtrl_GetFocusedItem
%End

%Extract(id=pycode_core)
def _ListCtrl_GetFirstSelected(self, *args):
    """
    Returns the first selected item, or -1 when none is selected.
    """
    return self.GetNextSelected(-1)
ListCtrl.GetFirstSelected = _ListCtrl_GetFirstSelected
del _ListCtrl_GetFirstSelected
%End

%Extract(id=pycode_core)
def _ListCtrl_GetNextSelected(self, item):
    """
    Returns subsequent selected items, or -1 when no more are selected.
    """
    return self.GetNextItem(item, wx.LIST_NEXT_ALL, wx.LIST_STATE_SELECTED)
ListCtrl.GetNextSelected = _ListCtrl_GetNextSelected
del _ListCtrl_GetNextSelected
%End

%Extract(id=pycode_core)
def _ListCtrl_IsSelected(self, idx):
    """
    Returns ``True`` if the item is selected.
    """
    return (self.GetItemState(idx, wx.LIST_STATE_SELECTED) & wx.LIST_STATE_SELECTED) != 0
ListCtrl.IsSelected = _ListCtrl_IsSelected
del _ListCtrl_IsSelected
%End

%Extract(id=pycode_core)
def _ListCtrl_SetColumnImage(self, col, image):
    item = self.GetColumn(col)
    # preserve all other attributes too
    item.SetMask( wx.LIST_MASK_STATE |
                  wx.LIST_MASK_TEXT  |
                  wx.LIST_MASK_IMAGE |
                  wx.LIST_MASK_DATA  |
                  wx.LIST_SET_ITEM   |
                  wx.LIST_MASK_WIDTH |
                  wx.LIST_MASK_FORMAT )
    item.SetImage(image)
    self.SetColumn(col, item)
ListCtrl.SetColumnImage = _ListCtrl_SetColumnImage
del _ListCtrl_SetColumnImage
%End

%Extract(id=pycode_core)
def _ListCtrl_ClearColumnImage(self, col):
    self.SetColumnImage(col, -1)
ListCtrl.ClearColumnImage = _ListCtrl_ClearColumnImage
del _ListCtrl_ClearColumnImage
%End

%Extract(id=pycode_core)
def _ListCtrl_Append(self, entry):
    """
    Append an item to the list control.  The `entry` parameter should be a
    sequence with an item for each column
    """
    if len(entry):
        from six import text_type
        pos = self.InsertItem(self.GetItemCount(), text_type(entry[0]))
        for i in range(1, len(entry)):
            self.SetItem(pos, i, text_type(entry[i]))
        return pos
ListCtrl.Append = _ListCtrl_Append
del _ListCtrl_Append
%End

%Extract(id=pycode_core)
ListCtrl.FocusedItem = property(ListCtrl.GetFocusedItem)
%End

class wxListView : wxListCtrl
{
    %Docstring
        ListView()
        ListView(parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=LC_REPORT, validator=DefaultValidator, name=ListCtrlNameStr)
        
        This class currently simply presents a simpler to use interface for
        the wxListCtrl  it can be thought of as a façade for that complicated
        class.
    %End
    %TypeHeaderCode
        #include <wx/listctrl.h>
    %End

public:
    wxListView();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxListView(
        wxWindow * parent   /TransferThis/,
        wxWindowID winid = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxLC_REPORT,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxListCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxListView();

    void ClearColumnImage(
        int col
    );
    %Docstring
        ClearColumnImage(col)
        
        Resets the column image  after calling this function, no image will be
        shown.
    %End

    void Focus(
        long index
    );
    %Docstring
        Focus(index)
        
        Sets focus to the item with the given index.
    %End

    long GetFirstSelected() const;
    %Docstring
        GetFirstSelected() -> long
        
        Returns the first selected item in a (presumably) multiple selection
        control.
    %End

    long GetFocusedItem() const;
    %Docstring
        GetFocusedItem() -> long
        
        Returns the currently focused item or -1 if none.
    %End

    long GetNextSelected(
        long item
    ) const;
    %Docstring
        GetNextSelected(item) -> long
        
        Used together with GetFirstSelected() to iterate over all selected
        items in the control.
    %End

    bool IsSelected(
        long index
    ) const;
    %Docstring
        IsSelected(index) -> bool
        
        Returns true if the item with the given index is selected, false
        otherwise.
    %End

    void Select(
        long n,
        bool on = true
    );
    %Docstring
        Select(n, on=True)
        
        Selects or unselects the given item.
    %End

    void SetColumnImage(
        int col,
        int image
    );
    %Docstring
        SetColumnImage(col, image)
        
        Sets the column image for the specified column.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=FirstSelected, get=GetFirstSelected)
    %Property(name=FocusedItem, get=GetFocusedItem)
};  // end of class wxListView


class wxListEvent : wxNotifyEvent
{
    %Docstring
        ListEvent(commandType=wxEVT_NULL, id=0)
        
        A list event holds information about events associated with wxListCtrl
        objects.
    %End
    %TypeHeaderCode
        #include <wx/listctrl.h>
    %End

public:
    wxListEvent(
        wxEventType commandType = wxEVT_NULL,
        int id = 0
    );

    long GetCacheFrom() const;
    %Docstring
        GetCacheFrom() -> long
        
        For EVT_LIST_CACHE_HINT event only: return the first item which the
        list control advises us to cache.
    %End

    long GetCacheTo() const;
    %Docstring
        GetCacheTo() -> long
        
        For EVT_LIST_CACHE_HINT event only: return the last item (inclusive)
        which the list control advises us to cache.
    %End

    int GetColumn() const;
    %Docstring
        GetColumn() -> int
        
        The column position: it is only used with COL events.
    %End

    wxUIntPtr GetData() const;
    %Docstring
        GetData() -> UIntPtr
        
        The data.
    %End

    int GetImage() const;
    %Docstring
        GetImage() -> int
        
        The image.
    %End

    long GetIndex() const;
    %Docstring
        GetIndex() -> long
        
        The item index.
    %End

    const wxListItem & GetItem() const;
    %Docstring
        GetItem() -> ListItem
        
        An item object, used by some events.
    %End

    int GetKeyCode() const;
    %Docstring
        GetKeyCode() -> int
        
        Key code if the event is a keypress event.
    %End

    const wxString & GetLabel() const;
    %Docstring
        GetLabel() -> String
        
        The (new) item label for EVT_LIST_END_LABEL_EDIT event.
    %End

    long GetMask() const;
    %Docstring
        GetMask() -> long
        
        The mask.
    %End

    wxPoint GetPoint() const;
    %Docstring
        GetPoint() -> Point
        
        The position of the mouse pointer if the event is a drag event.
    %End

    const wxString & GetText() const;
    %Docstring
        GetText() -> String
        
        The text.
    %End

    bool IsEditCancelled() const;
    %Docstring
        IsEditCancelled() -> bool
        
        This method only makes sense for EVT_LIST_END_LABEL_EDIT message and
        returns true if it the label editing has been cancelled by the user
        (GetLabel() returns an empty string in this case but it doesn't allow
        the application to distinguish between really cancelling the edit and
        the admittedly rare case when the user wants to rename it to an empty
        string).
    %End

    void SetKeyCode(
        int code
    );
    %Docstring
        SetKeyCode(code)
    %End

    void SetIndex(
        long index
    );
    %Docstring
        SetIndex(index)
    %End

    void SetColumn(
        int col
    );
    %Docstring
        SetColumn(col)
    %End

    void SetPoint(
        const wxPoint & point
    );
    %Docstring
        SetPoint(point)
    %End

    void SetItem(
        const wxListItem & item
    );
    %Docstring
        SetItem(item)
    %End

    void SetCacheFrom(
        long cacheFrom
    );
    %Docstring
        SetCacheFrom(cacheFrom)
    %End

    void SetCacheTo(
        long cacheTo
    );
    %Docstring
        SetCacheTo(cacheTo)
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxListEvent& operator=(const wxListEvent&);


    public:


    %Property(name=CacheFrom, get=GetCacheFrom, set=SetCacheFrom)
    %Property(name=CacheTo, get=GetCacheTo, set=SetCacheTo)
    %Property(name=Column, get=GetColumn, set=SetColumn)
    %Property(name=Data, get=GetData)
    %Property(name=Image, get=GetImage)
    %Property(name=Index, get=GetIndex, set=SetIndex)
    %Property(name=Item, get=GetItem, set=SetItem)
    %Property(name=KeyCode, get=GetKeyCode, set=SetKeyCode)
    %Property(name=Label, get=GetLabel)
    %Property(name=Mask, get=GetMask)
    %Property(name=Point, get=GetPoint, set=SetPoint)
    %Property(name=Text, get=GetText)
};  // end of class wxListEvent


%Extract(id=pycode_core)
ListItemAttr = wx.deprecated(ItemAttr, 'Use ItemAttr instead')

%End

%Extract(id=pycode_core)
EVT_LIST_BEGIN_DRAG        = PyEventBinder(wxEVT_LIST_BEGIN_DRAG       , 1)
EVT_LIST_BEGIN_RDRAG       = PyEventBinder(wxEVT_LIST_BEGIN_RDRAG      , 1)
EVT_LIST_BEGIN_LABEL_EDIT  = PyEventBinder(wxEVT_LIST_BEGIN_LABEL_EDIT , 1)
EVT_LIST_END_LABEL_EDIT    = PyEventBinder(wxEVT_LIST_END_LABEL_EDIT   , 1)
EVT_LIST_DELETE_ITEM       = PyEventBinder(wxEVT_LIST_DELETE_ITEM      , 1)
EVT_LIST_DELETE_ALL_ITEMS  = PyEventBinder(wxEVT_LIST_DELETE_ALL_ITEMS , 1)
EVT_LIST_ITEM_SELECTED     = PyEventBinder(wxEVT_LIST_ITEM_SELECTED    , 1)
EVT_LIST_ITEM_DESELECTED   = PyEventBinder(wxEVT_LIST_ITEM_DESELECTED  , 1)
EVT_LIST_KEY_DOWN          = PyEventBinder(wxEVT_LIST_KEY_DOWN         , 1)
EVT_LIST_INSERT_ITEM       = PyEventBinder(wxEVT_LIST_INSERT_ITEM      , 1)
EVT_LIST_COL_CLICK         = PyEventBinder(wxEVT_LIST_COL_CLICK        , 1)
EVT_LIST_ITEM_RIGHT_CLICK  = PyEventBinder(wxEVT_LIST_ITEM_RIGHT_CLICK , 1)
EVT_LIST_ITEM_MIDDLE_CLICK = PyEventBinder(wxEVT_LIST_ITEM_MIDDLE_CLICK, 1)
EVT_LIST_ITEM_ACTIVATED    = PyEventBinder(wxEVT_LIST_ITEM_ACTIVATED   , 1)
EVT_LIST_CACHE_HINT        = PyEventBinder(wxEVT_LIST_CACHE_HINT       , 1)
EVT_LIST_COL_RIGHT_CLICK   = PyEventBinder(wxEVT_LIST_COL_RIGHT_CLICK  , 1)
EVT_LIST_COL_BEGIN_DRAG    = PyEventBinder(wxEVT_LIST_COL_BEGIN_DRAG   , 1)
EVT_LIST_COL_DRAGGING      = PyEventBinder(wxEVT_LIST_COL_DRAGGING     , 1)
EVT_LIST_COL_END_DRAG      = PyEventBinder(wxEVT_LIST_COL_END_DRAG     , 1)
EVT_LIST_ITEM_FOCUSED      = PyEventBinder(wxEVT_LIST_ITEM_FOCUSED     , 1)
EVT_LIST_ITEM_CHECKED      = PyEventBinder(wxEVT_LIST_ITEM_CHECKED     , 1)
EVT_LIST_ITEM_UNCHECKED    = PyEventBinder(wxEVT_LIST_ITEM_UNCHECKED   , 1)

# deprecated wxEVT aliases
wxEVT_COMMAND_LIST_BEGIN_DRAG         = wxEVT_LIST_BEGIN_DRAG
wxEVT_COMMAND_LIST_BEGIN_RDRAG        = wxEVT_LIST_BEGIN_RDRAG
wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT   = wxEVT_LIST_BEGIN_LABEL_EDIT
wxEVT_COMMAND_LIST_END_LABEL_EDIT     = wxEVT_LIST_END_LABEL_EDIT
wxEVT_COMMAND_LIST_DELETE_ITEM        = wxEVT_LIST_DELETE_ITEM
wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS   = wxEVT_LIST_DELETE_ALL_ITEMS
wxEVT_COMMAND_LIST_ITEM_SELECTED      = wxEVT_LIST_ITEM_SELECTED
wxEVT_COMMAND_LIST_ITEM_DESELECTED    = wxEVT_LIST_ITEM_DESELECTED
wxEVT_COMMAND_LIST_KEY_DOWN           = wxEVT_LIST_KEY_DOWN
wxEVT_COMMAND_LIST_INSERT_ITEM        = wxEVT_LIST_INSERT_ITEM
wxEVT_COMMAND_LIST_COL_CLICK          = wxEVT_LIST_COL_CLICK
wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK   = wxEVT_LIST_ITEM_RIGHT_CLICK
wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK  = wxEVT_LIST_ITEM_MIDDLE_CLICK
wxEVT_COMMAND_LIST_ITEM_ACTIVATED     = wxEVT_LIST_ITEM_ACTIVATED
wxEVT_COMMAND_LIST_CACHE_HINT         = wxEVT_LIST_CACHE_HINT
wxEVT_COMMAND_LIST_COL_RIGHT_CLICK    = wxEVT_LIST_COL_RIGHT_CLICK
wxEVT_COMMAND_LIST_COL_BEGIN_DRAG     = wxEVT_LIST_COL_BEGIN_DRAG
wxEVT_COMMAND_LIST_COL_DRAGGING       = wxEVT_LIST_COL_DRAGGING
wxEVT_COMMAND_LIST_COL_END_DRAG       = wxEVT_LIST_COL_END_DRAG
wxEVT_COMMAND_LIST_ITEM_FOCUSED       = wxEVT_LIST_ITEM_FOCUSED

%End


//---------------------------------------------------------------------------

