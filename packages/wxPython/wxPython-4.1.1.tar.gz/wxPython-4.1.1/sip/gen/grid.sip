//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _grid.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

typedef wxWindow wxGridWindow;

const char* wxGridNameStr;

const int wxGRID_AUTOSIZE;
enum wxGridCellFloatFormat
{
    wxGRID_FLOAT_FORMAT_FIXED,
    wxGRID_FLOAT_FORMAT_SCIENTIFIC,
    wxGRID_FLOAT_FORMAT_COMPACT,
    wxGRID_FLOAT_FORMAT_UPPER,
    wxGRID_FLOAT_FORMAT_DEFAULT
};

enum wxGridTableRequest
{
    wxGRIDTABLE_NOTIFY_ROWS_INSERTED,
    wxGRIDTABLE_NOTIFY_ROWS_APPENDED,
    wxGRIDTABLE_NOTIFY_ROWS_DELETED,
    wxGRIDTABLE_NOTIFY_COLS_INSERTED,
    wxGRIDTABLE_NOTIFY_COLS_APPENDED,
    wxGRIDTABLE_NOTIFY_COLS_DELETED
};

enum wxGridRenderStyle
{
    wxGRID_DRAW_ROWS_HEADER,
    wxGRID_DRAW_COLS_HEADER,
    wxGRID_DRAW_CELL_LINES,
    wxGRID_DRAW_BOX_RECT,
    wxGRID_DRAW_SELECTION,
    wxGRID_DRAW_DEFAULT
};

wxEventType wxEVT_GRID_CELL_LEFT_CLICK   /PyName=wxEVT_GRID_CELL_LEFT_CLICK/;

wxEventType wxEVT_GRID_CELL_RIGHT_CLICK   /PyName=wxEVT_GRID_CELL_RIGHT_CLICK/;

wxEventType wxEVT_GRID_CELL_LEFT_DCLICK   /PyName=wxEVT_GRID_CELL_LEFT_DCLICK/;

wxEventType wxEVT_GRID_CELL_RIGHT_DCLICK   /PyName=wxEVT_GRID_CELL_RIGHT_DCLICK/;

wxEventType wxEVT_GRID_LABEL_LEFT_CLICK   /PyName=wxEVT_GRID_LABEL_LEFT_CLICK/;

wxEventType wxEVT_GRID_LABEL_RIGHT_CLICK   /PyName=wxEVT_GRID_LABEL_RIGHT_CLICK/;

wxEventType wxEVT_GRID_LABEL_LEFT_DCLICK   /PyName=wxEVT_GRID_LABEL_LEFT_DCLICK/;

wxEventType wxEVT_GRID_LABEL_RIGHT_DCLICK   /PyName=wxEVT_GRID_LABEL_RIGHT_DCLICK/;

wxEventType wxEVT_GRID_ROW_SIZE   /PyName=wxEVT_GRID_ROW_SIZE/;

wxEventType wxEVT_GRID_COL_SIZE   /PyName=wxEVT_GRID_COL_SIZE/;

wxEventType wxEVT_GRID_COL_AUTO_SIZE   /PyName=wxEVT_GRID_COL_AUTO_SIZE/;

wxEventType wxEVT_GRID_RANGE_SELECTING   /PyName=wxEVT_GRID_RANGE_SELECTING/;

wxEventType wxEVT_GRID_RANGE_SELECTED   /PyName=wxEVT_GRID_RANGE_SELECTED/;

wxEventType wxEVT_GRID_CELL_CHANGING   /PyName=wxEVT_GRID_CELL_CHANGING/;

wxEventType wxEVT_GRID_CELL_CHANGED   /PyName=wxEVT_GRID_CELL_CHANGED/;

wxEventType wxEVT_GRID_SELECT_CELL   /PyName=wxEVT_GRID_SELECT_CELL/;

wxEventType wxEVT_GRID_EDITOR_SHOWN   /PyName=wxEVT_GRID_EDITOR_SHOWN/;

wxEventType wxEVT_GRID_EDITOR_HIDDEN   /PyName=wxEVT_GRID_EDITOR_HIDDEN/;

wxEventType wxEVT_GRID_EDITOR_CREATED   /PyName=wxEVT_GRID_EDITOR_CREATED/;

wxEventType wxEVT_GRID_CELL_BEGIN_DRAG   /PyName=wxEVT_GRID_CELL_BEGIN_DRAG/;

wxEventType wxEVT_GRID_COL_MOVE   /PyName=wxEVT_GRID_COL_MOVE/;

wxEventType wxEVT_GRID_COL_SORT   /PyName=wxEVT_GRID_COL_SORT/;

wxEventType wxEVT_GRID_TABBING   /PyName=wxEVT_GRID_TABBING/;

class wxGridCellCoords
{
    %Docstring
        GridCellCoords()
        GridCellCoords(row, col)
        
        Represents coordinates of a grid cell.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellCoords();

    wxGridCellCoords(
        int row,
        int col
    );

    int GetRow() const;
    %Docstring
        GetRow() -> int
        
        Return the row of the coordinate.
    %End

    void SetRow(
        int n
    );
    %Docstring
        SetRow(n)
        
        Set the row of the coordinate.
    %End

    int GetCol() const;
    %Docstring
        GetCol() -> int
        
        Return the column of the coordinate.
    %End

    void SetCol(
        int n
    );
    %Docstring
        SetCol(n)
        
        Set the column of the coordinate.
    %End

    void Set(
        int row,
        int col
    );
    %Docstring
        Set(row, col)
        
        Set the row and column of the coordinate.
    %End

    bool operator==(
        const wxGridCellCoords & other
    ) const;

    bool operator!=(
        const wxGridCellCoords & other
    ) const;

    public:


    %Property(name=Col, get=GetCol, set=SetCol)
    %Property(name=Row, get=GetRow, set=SetRow)
    PyObject* Get();
    %Docstring
        Get() -> (row,col)
        
        Return the row and col properties as a tuple.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridCellCoords_Get(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGridCellCoords_Get(wxGridCellCoords* self)
    {
        wxPyThreadBlocker blocker;
        return sipBuildResult(0, "(ii)", self->GetRow(), self->GetCol());
    }
    %End

    %ConvertToTypeCode
        // is it just a typecheck?
        if (!sipIsErr) {
            // is it already an instance of wxGridCellCoords?
            if (sipCanConvertToType(sipPy, sipType_wxGridCellCoords, SIP_NO_CONVERTORS))
                return 1;
        
            if (wxPyNumberSequenceCheck(sipPy, 2)) {
                return 1;
            }
            return 0;
        }
        
         // otherwise do the conversion
         if (sipCanConvertToType(sipPy, sipType_wxGridCellCoords, SIP_NO_CONVERTORS)) {
             // Just fetch the existing instance
             *sipCppPtr = reinterpret_cast<wxGridCellCoords*>(sipConvertToType(
                     sipPy, sipType_wxGridCellCoords, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
             return 0;  // not a new instance
         }
        
         // or create a new instance
         PyObject* o1 = PySequence_ITEM(sipPy, 0);
         PyObject* o2 = PySequence_ITEM(sipPy, 1);
         *sipCppPtr = new wxGridCellCoords(wxPyInt_AsLong(o1), wxPyInt_AsLong(o2));
         Py_DECREF(o1);
         Py_DECREF(o2);
         return SIP_TEMPORARY;
    %End
};  // end of class wxGridCellCoords


%Extract(id=pycode_grid)
def _GridCellCoords_GetIM(self):
    """
    Returns an immutable representation of the ``wx.GridCellCoords`` object, based on ``namedtuple``.
    
    This new object is hashable and can be used as a dictionary key,
    be added to sets, etc.  It can be converted back into a real ``wx.GridCellCoords``
    with a simple statement like this: ``obj = wx.GridCellCoords(imObj)``.
    """
    return _im_GridCellCoords(*self.Get())
GridCellCoords.GetIM = _GridCellCoords_GetIM
del _GridCellCoords_GetIM
%End

%Extract(id=pycode_grid)
def _GridCellCoords___str__(self):
    return str(self.Get())
GridCellCoords.__str__ = _GridCellCoords___str__
del _GridCellCoords___str__
%End

%Extract(id=pycode_grid)
def _GridCellCoords___repr__(self):
    return "GridCellCoords"+str(self.Get())
GridCellCoords.__repr__ = _GridCellCoords___repr__
del _GridCellCoords___repr__
%End

%Extract(id=pycode_grid)
def _GridCellCoords___len__(self):
    return len(self.Get())
GridCellCoords.__len__ = _GridCellCoords___len__
del _GridCellCoords___len__
%End

%Extract(id=pycode_grid)
def _GridCellCoords___nonzero__(self):
    return self.Get() != (0,0)
GridCellCoords.__nonzero__ = _GridCellCoords___nonzero__
del _GridCellCoords___nonzero__
%End

%Extract(id=pycode_grid)
def _GridCellCoords___bool__(self):
    return self.Get() != (0,0)
GridCellCoords.__bool__ = _GridCellCoords___bool__
del _GridCellCoords___bool__
%End

%Extract(id=pycode_grid)
def _GridCellCoords___reduce__(self):
    return (GridCellCoords, self.Get())
GridCellCoords.__reduce__ = _GridCellCoords___reduce__
del _GridCellCoords___reduce__
%End

%Extract(id=pycode_grid)
def _GridCellCoords___getitem__(self, idx):
    return self.Get()[idx]
GridCellCoords.__getitem__ = _GridCellCoords___getitem__
del _GridCellCoords___getitem__
%End

%Extract(id=pycode_grid)
def _GridCellCoords___setitem__(self, idx, val):
    if idx == 0: self.Row = val
    elif idx == 1: self.Col = val
    else: raise IndexError
GridCellCoords.__setitem__ = _GridCellCoords___setitem__
del _GridCellCoords___setitem__
%End

%Extract(id=pycode_grid)
GridCellCoords.__safe_for_unpickling__ = True

%End

class wxGridBlockCoords
{
    %Docstring
        GridBlockCoords()
        GridBlockCoords(topRow, leftCol, bottomRow, rightCol)
        
        Represents coordinates of a block of cells in the grid.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridBlockCoords();

    wxGridBlockCoords(
        int topRow,
        int leftCol,
        int bottomRow,
        int rightCol
    );

    int GetTopRow() const;
    %Docstring
        GetTopRow() -> int
        
        Return the row of the left top corner.
    %End

    void SetTopRow(
        int row
    );
    %Docstring
        SetTopRow(row)
        
        Set the row of the left top corner.
    %End

    int GetLeftCol() const;
    %Docstring
        GetLeftCol() -> int
        
        Return the column of the left top corner.
    %End

    void SetLeftCol(
        int col
    );
    %Docstring
        SetLeftCol(col)
        
        Set the column of the left top corner.
    %End

    int GetBottomRow() const;
    %Docstring
        GetBottomRow() -> int
        
        Return the row of the bottom right corner.
    %End

    void SetBottomRow(
        int row
    );
    %Docstring
        SetBottomRow(row)
        
        Set the row of the bottom right corner.
    %End

    int GetRightCol() const;
    %Docstring
        GetRightCol() -> int
        
        Return the column of the bottom right corner.
    %End

    void SetRightCol(
        int col
    );
    %Docstring
        SetRightCol(col)
        
        Set the column of the bottom right corner.
    %End

    wxGridCellCoords GetTopLeft() const;
    %Docstring
        GetTopLeft() -> GridCellCoords
        
        Return the coordinates of the top left corner.
    %End

    wxGridCellCoords GetBottomRight() const;
    %Docstring
        GetBottomRight() -> GridCellCoords
        
        Return the coordinates of the bottom right corner.
    %End

    wxGridBlockCoords Canonicalize() const;
    %Docstring
        Canonicalize() -> GridBlockCoords
        
        Return the canonicalized block where top left coordinates is less then
        bottom right coordinates.
    %End

    bool Intersects(
        const wxGridBlockCoords & other
    ) const;
    %Docstring
        Intersects(other) -> bool
        
        Whether the blocks intersect.
    %End

    bool Contains(
        const wxGridCellCoords & cell
    ) const;
    %Docstring
        Contains(cell) -> bool
        Contains(other) -> bool
        
        Check whether this block contains the given cell.
    %End

    bool Contains(
        const wxGridBlockCoords & other
    ) const;

    wxGridBlockDiffResult Difference(
        const wxGridBlockCoords & other,
        int splitOrientation
    ) const;
    %Docstring
        Difference(other, splitOrientation) -> GridBlockDiffResult
        
        Calculates the result blocks by subtracting the other block from this
        block.
    %End

    wxGridBlockDiffResult SymDifference(
        const wxGridBlockCoords & other
    ) const;
    %Docstring
        SymDifference(other) -> GridBlockDiffResult
        
        Calculates the symmetric difference of the blocks.
    %End

    bool operator==(
        const wxGridBlockCoords & other
    ) const;

    bool operator!=(
        const wxGridBlockCoords & other
    ) const;

    public:


    %Property(name=BottomRight, get=GetBottomRight)
    %Property(name=BottomRow, get=GetBottomRow, set=SetBottomRow)
    %Property(name=LeftCol, get=GetLeftCol, set=SetLeftCol)
    %Property(name=RightCol, get=GetRightCol, set=SetRightCol)
    %Property(name=TopLeft, get=GetTopLeft)
    %Property(name=TopRow, get=GetTopRow, set=SetTopRow)
    int __bool__();
    %Docstring
        __bool__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridBlockCoords___bool__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxGridBlockCoords___bool__(wxGridBlockCoords* self)
    {
        return self->operator!();
    }
    %End

    PyObject* Get();
    %Docstring
        Get() -> (topRow, leftCol, bottomRow, rightCol)
        
        Return the block coordinants as a tuple.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridBlockCoords_Get(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGridBlockCoords_Get(wxGridBlockCoords* self)
    {
        wxPyThreadBlocker blocker;
        return sipBuildResult(0, "(iiii)", self->GetTopRow(), self->GetLeftCol(), self->GetBottomRow(), self->GetRightCol());
    }
    %End

};  // end of class wxGridBlockCoords


%Extract(id=pycode_grid)
def _GridBlockCoords___str__(self):
    return str(self.Get())
GridBlockCoords.__str__ = _GridBlockCoords___str__
del _GridBlockCoords___str__
%End

%Extract(id=pycode_grid)
def _GridBlockCoords___repr__(self):
    return "GridBlockCoords"+str(self.Get())
GridBlockCoords.__repr__ = _GridBlockCoords___repr__
del _GridBlockCoords___repr__
%End

class wxGridBlockDiffResult
{
    %Docstring
        The helper struct uses as a result type for difference functions of
        wxGridBlockCoords class.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    PyObject* _getParts();
    %Docstring
        _getParts() -> PyObject
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridBlockDiffResult__getParts(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGridBlockDiffResult__getParts(wxGridBlockDiffResult* self)
    {
        wxPyThreadBlocker blocker;
        PyObject* ret = PyTuple_New(4);
        if (ret) {
            PyTuple_SET_ITEM(ret, 0, wxPyConstructObject(&self->m_parts[0], "wxGridBlockCoords", false));
            PyTuple_SET_ITEM(ret, 1, wxPyConstructObject(&self->m_parts[1], "wxGridBlockCoords", false));
            PyTuple_SET_ITEM(ret, 2, wxPyConstructObject(&self->m_parts[2], "wxGridBlockCoords", false));
            PyTuple_SET_ITEM(ret, 3, wxPyConstructObject(&self->m_parts[3], "wxGridBlockCoords", false));
        }
        return ret;
    }
    %End

    %Property(name=m_parts, get=_getParts)
};  // end of class wxGridBlockDiffResult


class wxGridBlocks
{
    %Docstring
        Represents a collection of grid blocks that can be iterated over.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
public:
    class iterator
    {
        %Docstring
            Read-only forward iterator type.
        %End
        %TypeHeaderCode
            #include <wx/grid.h>
        %End

    public:
                iterator& _next();
                %MethodCode
                    PyErr_Clear();
                    Py_BEGIN_ALLOW_THREADS
                    sipRes = &sipCpp->operator++();
                    Py_END_ALLOW_THREADS
                    if (PyErr_Occurred()) return 0;
                %End
        
                const wxGridBlockCoords& _get() const;
                %MethodCode
                    PyErr_Clear();
                    Py_BEGIN_ALLOW_THREADS
                    sipRes =  new ::wxGridBlockCoords(sipCpp->operator*());
                    Py_END_ALLOW_THREADS
                    if (PyErr_Occurred()) return 0;
                %End
        
                bool __eq__(const iterator& it) const;
                bool __ne__(const iterator& it) const;


    };  // end of class iterator


    iterator begin() const;
    %Docstring
        begin() -> iterator
        
        Return iterator corresponding to the beginning of the range.
    %End

    iterator end() const;
    %Docstring
        end() -> iterator
        
        Return iterator corresponding to the end of the range.
    %End

    private:
        wxGridBlocks();


    private:
        wxGridBlocks& operator=(const wxGridBlocks&);


};  // end of class wxGridBlocks


%Extract(id=pycode_grid)
def _GridBlocks___iter__(self):
    """
    Returns a Python iterator for accessing the collection of grid blocks.
    """
    return PyGridBlocksIterator(self)
GridBlocks.__iter__ = _GridBlocks___iter__
del _GridBlocks___iter__
%End

%Extract(id=pycode_grid)
class PyGridBlocksIterator(object):
    "A Python iterator for GridBlocks objects"
    def __init__(self, blocks):
        self._blocks = blocks
        self._iterator = self._blocks.begin()

    def __next__(self):
        if self._iterator == self._blocks.end():
            raise StopIteration
        obj = self._iterator._get()
        self._iterator = self._iterator._next()
        return obj

%End

class wxGridCellRenderer : wxClientDataContainer, wxRefCounter
{
    %Docstring
        GridCellRenderer()
        
        This class is responsible for actually drawing the cell in the grid.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellRenderer()   /Transfer/;

    virtual
    wxGridCellRenderer * Clone() const = 0   /Factory/;
    %Docstring
        Clone() -> GridCellRenderer
        
        This function must be implemented in derived classes to return a copy
        of itself.
    %End

    virtual
    void Draw(
        wxGrid & grid,
        wxGridCellAttr & attr,
        wxDC & dc,
        const wxRect & rect,
        int row,
        int col,
        bool isSelected
    ) = 0;
    %Docstring
        Draw(grid, attr, dc, rect, row, col, isSelected)
        
        Draw the given cell on the provided DC inside the given rectangle
        using the style specified by the attribute and the default or selected
        state corresponding to the isSelected value.
    %End

    virtual
    wxSize GetBestSize(
        wxGrid & grid,
        wxGridCellAttr & attr,
        wxDC & dc,
        int row,
        int col
    ) = 0;
    %Docstring
        GetBestSize(grid, attr, dc, row, col) -> wx.Size
        
        Get the preferred size of the cell for its contents.
    %End

    virtual
    int GetBestHeight(
        wxGrid & grid,
        wxGridCellAttr & attr,
        wxDC & dc,
        int row,
        int col,
        int width
    );
    %Docstring
        GetBestHeight(grid, attr, dc, row, col, width) -> int
        
        Get the preferred height of the cell at the given width.
    %End

    virtual
    int GetBestWidth(
        wxGrid & grid,
        wxGridCellAttr & attr,
        wxDC & dc,
        int row,
        int col,
        int height
    );
    %Docstring
        GetBestWidth(grid, attr, dc, row, col, height) -> int
        
        Get the preferred width of the cell at the given height.
    %End

    virtual
    wxSize GetMaxBestSize(
        wxGrid & grid,
        wxGridCellAttr & attr,
        wxDC & dc
    );
    %Docstring
        GetMaxBestSize(grid, attr, dc) -> wx.Size
        
        Get the maximum possible size for a cell using this renderer, if
        possible.
    %End

    private:
        wxGridCellRenderer(const wxGridCellRenderer&);



protected:
    virtual
    ~wxGridCellRenderer();

};  // end of class wxGridCellRenderer


class wxGridCellStringRenderer : wxGridCellRenderer
{
    %Docstring
        GridCellStringRenderer()
        
        This class may be used to format string data in a cell; it is the
        default for string cells.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellStringRenderer()   /Transfer/;

    virtual wxGridCellRenderer* Clone() const /Factory/;


    virtual void Draw(wxGrid& grid, wxGridCellAttr& attr, wxDC& dc,     const wxRect& rect, int row, int col, bool isSelected);


    virtual wxSize GetBestSize(wxGrid& grid, wxGridCellAttr& attr,     wxDC& dc, int row, int col);


};  // end of class wxGridCellStringRenderer


class wxGridCellAutoWrapStringRenderer : wxGridCellStringRenderer
{
    %Docstring
        GridCellAutoWrapStringRenderer()
        
        This class may be used to format string data in a cell.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellAutoWrapStringRenderer()   /Transfer/;

    virtual wxGridCellRenderer* Clone() const /Factory/;


    virtual void Draw(wxGrid& grid, wxGridCellAttr& attr, wxDC& dc,     const wxRect& rect, int row, int col, bool isSelected);


    virtual wxSize GetBestSize(wxGrid& grid, wxGridCellAttr& attr,     wxDC& dc, int row, int col);


};  // end of class wxGridCellAutoWrapStringRenderer


class wxGridCellBoolRenderer : wxGridCellRenderer
{
    %Docstring
        GridCellBoolRenderer()
        
        This class may be used to format boolean data in a cell.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellBoolRenderer()   /Transfer/;

    virtual wxGridCellRenderer* Clone() const /Factory/;


    virtual void Draw(wxGrid& grid, wxGridCellAttr& attr, wxDC& dc,     const wxRect& rect, int row, int col, bool isSelected);


    virtual wxSize GetBestSize(wxGrid& grid, wxGridCellAttr& attr,     wxDC& dc, int row, int col);


};  // end of class wxGridCellBoolRenderer


class wxGridCellDateRenderer : wxGridCellStringRenderer
{
    %Docstring
        GridCellDateRenderer(outformat="")
        
        This class may be used to show a date, without time, in a cell.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellDateRenderer(
        const wxString & outformat = wxString()
    )   /Transfer/;

    virtual
    void SetParameters(
        const wxString & params
    );
    %Docstring
        SetParameters(params)
        
        Sets the strftime()-like format string which will be used to render
        the date.
    %End

    public:


    virtual wxGridCellRenderer* Clone() const /Factory/;


    virtual void Draw(wxGrid& grid, wxGridCellAttr& attr, wxDC& dc,     const wxRect& rect, int row, int col, bool isSelected);


    virtual wxSize GetBestSize(wxGrid& grid, wxGridCellAttr& attr,     wxDC& dc, int row, int col);


    public:


};  // end of class wxGridCellDateRenderer


class wxGridCellDateTimeRenderer : wxGridCellDateRenderer
{
    %Docstring
        GridCellDateTimeRenderer(outformat=wx.DefaultDateTimeFormat, informat=wx.DefaultDateTimeFormat)
        
        This class may be used to format a date/time data in a cell.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellDateTimeRenderer(
        const wxString & outformat = wxDefaultDateTimeFormat,
        const wxString & informat = wxDefaultDateTimeFormat
    )   /Transfer/;

    virtual wxGridCellRenderer* Clone() const /Factory/;


    virtual void Draw(wxGrid& grid, wxGridCellAttr& attr, wxDC& dc,     const wxRect& rect, int row, int col, bool isSelected);


    virtual wxSize GetBestSize(wxGrid& grid, wxGridCellAttr& attr,     wxDC& dc, int row, int col);


};  // end of class wxGridCellDateTimeRenderer


class wxGridCellEnumRenderer : wxGridCellStringRenderer
{
    %Docstring
        GridCellEnumRenderer(choices=wx.EmptyString)
        
        This class may be used to render in a cell a number as a textual
        equivalent.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellEnumRenderer(
        const wxString & choices = wxEmptyString
    )   /Transfer/;

    virtual
    void SetParameters(
        const wxString & params
    );
    %Docstring
        SetParameters(params)
        
        Sets the comma separated string content of the enum.
    %End

    public:


    virtual wxGridCellRenderer* Clone() const /Factory/;


    virtual void Draw(wxGrid& grid, wxGridCellAttr& attr, wxDC& dc,     const wxRect& rect, int row, int col, bool isSelected);


    virtual wxSize GetBestSize(wxGrid& grid, wxGridCellAttr& attr,     wxDC& dc, int row, int col);


    public:


};  // end of class wxGridCellEnumRenderer


class wxGridCellFloatRenderer : wxGridCellStringRenderer
{
    %Docstring
        GridCellFloatRenderer(width=-1, precision=-1, format=GRID_FLOAT_FORMAT_DEFAULT)
        
        This class may be used to format floating point data in a cell.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellFloatRenderer(
        int width = -1,
        int precision = -1,
        int format = wxGRID_FLOAT_FORMAT_DEFAULT
    )   /Transfer/;

    int GetFormat() const;
    %Docstring
        GetFormat() -> int
        
        Returns the specifier used to format the data to string.
    %End

    int GetPrecision() const;
    %Docstring
        GetPrecision() -> int
        
        Returns the precision.
    %End

    int GetWidth() const;
    %Docstring
        GetWidth() -> int
        
        Returns the width.
    %End

    void SetFormat(
        int format
    );
    %Docstring
        SetFormat(format)
        
        Set the format to use for display the number.
    %End

    virtual
    void SetParameters(
        const wxString & params
    );
    %Docstring
        SetParameters(params)
        
        The parameters string format is "width[,precision[,format]]" where
        format should be chosen between f|e|g|E|G (f is used by default)
    %End

    void SetPrecision(
        int precision
    );
    %Docstring
        SetPrecision(precision)
        
        Sets the precision.
    %End

    void SetWidth(
        int width
    );
    %Docstring
        SetWidth(width)
        
        Sets the width.
    %End

    public:


    %Property(name=Format, get=GetFormat, set=SetFormat)
    %Property(name=Precision, get=GetPrecision, set=SetPrecision)
    %Property(name=Width, get=GetWidth, set=SetWidth)
    virtual wxGridCellRenderer* Clone() const /Factory/;


    virtual void Draw(wxGrid& grid, wxGridCellAttr& attr, wxDC& dc,     const wxRect& rect, int row, int col, bool isSelected);


    virtual wxSize GetBestSize(wxGrid& grid, wxGridCellAttr& attr,     wxDC& dc, int row, int col);


};  // end of class wxGridCellFloatRenderer


class wxGridCellNumberRenderer : wxGridCellStringRenderer
{
    %Docstring
        GridCellNumberRenderer()
        
        This class may be used to format integer data in a cell.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellNumberRenderer()   /Transfer/;

    virtual wxGridCellRenderer* Clone() const /Factory/;


    virtual void Draw(wxGrid& grid, wxGridCellAttr& attr, wxDC& dc,     const wxRect& rect, int row, int col, bool isSelected);


    virtual wxSize GetBestSize(wxGrid& grid, wxGridCellAttr& attr,     wxDC& dc, int row, int col);


};  // end of class wxGridCellNumberRenderer


class wxGridActivationResult
{
    %Docstring
        Represents the result of wxGridCellEditor::TryActivate().
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

    %InstanceCode
        wxGridActivationResult result = wxGridActivationResult::DoNothing();
        sipCpp = &result;
    %End
public:
    static
    wxGridActivationResult DoNothing();
    %Docstring
        DoNothing() -> GridActivationResult
        
        Indicate that nothing should be done and the cell shouldn't be edited
        at all.
    %End

    static
    wxGridActivationResult DoChange(
        const wxString & newval
    );
    %Docstring
        DoChange(newval) -> GridActivationResult
        
        Indicate that activating the cell is possible and would change its
        value to the given one.
    %End

    static
    wxGridActivationResult DoEdit();
    %Docstring
        DoEdit() -> GridActivationResult
        
        Indicate that the editor control should be shown and the cell should
        be edited normally.
    %End

    private:
        wxGridActivationResult& operator=(const wxGridActivationResult&);


    private:
        wxGridActivationResult();


};  // end of class wxGridActivationResult


class wxGridActivationSource   /NoDefaultCtors/
{
    %Docstring
        Represents a source of cell activation, which may be either a user
        event (mouse or keyboard) or the program itself.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    enum Origin
    {
        Program,
        Key,
        Mouse    
    };

    Origin GetOrigin() const;
    %Docstring
        GetOrigin() -> Origin
        
        Get the origin of the activation.
    %End

    const wxKeyEvent & GetKeyEvent() const;
    %Docstring
        GetKeyEvent() -> wx.KeyEvent
        
        Get the key event corresponding to the key press activating the cell.
    %End

    const wxMouseEvent & GetMouseEvent() const;
    %Docstring
        GetMouseEvent() -> wx.MouseEvent
        
        Get the mouse event corresponding to the click activating the cell.
    %End

    private:
        wxGridActivationSource& operator=(const wxGridActivationSource&);


    public:


    %Property(name=KeyEvent, get=GetKeyEvent)
    %Property(name=MouseEvent, get=GetMouseEvent)
};  // end of class wxGridActivationSource


class wxGridCellEditor : wxClientDataContainer, wxRefCounter
{
    %Docstring
        GridCellEditor()
        
        This class is responsible for providing and manipulating the in-place
        edit controls for the grid.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellEditor()   /Transfer/;

    virtual
    void BeginEdit(
        int row,
        int col,
        wxGrid * grid
    ) = 0;
    %Docstring
        BeginEdit(row, col, grid)
        
        Fetch the value from the table and prepare the edit control to begin
        editing.
    %End

    virtual
    wxGridCellEditor * Clone() const = 0   /Factory/;
    %Docstring
        Clone() -> GridCellEditor
        
        Create a new object which is the copy of this one.
    %End

    virtual
    void Create(
        wxWindow * parent,
        wxWindowID id,
        wxEvtHandler * evtHandler
    ) = 0;
    %Docstring
        Create(parent, id, evtHandler)
        
        Creates the actual edit control.
    %End

    virtual
    void Destroy();
    %Docstring
        Destroy()
        
        Final cleanup.
    %End

    virtual PyObject* EndEdit(int row,  int col,  const wxGrid* grid,  const wxString& oldval) = 0 [ bool (int row, int col, const wxGrid* grid, const wxString& oldval, wxString* newval) ];
    %Docstring
        EndEdit(row, col, grid, oldval)
        
        End editing the cell.
        
        This function must check if the current value of the editing cell
        is valid and different from the original value in its string
        form. If not then simply return None.  If it has changed then
        this method should save the new value so that ApplyEdit can
        apply it later and the string representation of the new value
        should be returned.
        
        Notice that this method shoiuld not modify the grid as the
        change could still be vetoed.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridCellEditor_EndEdit(sipCpp, row, col, grid, oldval);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        // VirtualCatcherCode for wx.grid.GridCellEditor.EndEdit
        PyObject *result;
        result = sipCallMethod(0, sipMethod, "iiDN", row, col,
                               const_cast<wxGrid *>(grid),sipType_wxGrid,NULL,
                               new wxString(oldval),sipType_wxString,NULL);
        if (result == NULL) {
            if (PyErr_Occurred())
                PyErr_Print();
            sipRes = false;
        }
        else if (result == Py_None) {
            sipRes = false;
        }
        else {
            sipRes = true;
            *newval = Py2wxString(result);
        }
        Py_XDECREF(result);
    %End
    %TypeCode
    PyObject* _wxGridCellEditor_EndEdit(wxGridCellEditor* self, int row, int col, const wxGrid* grid, const wxString* oldval)
    {
        bool rv;
        wxString newval;
        rv = self->EndEdit(row, col, grid, *oldval, &newval);
        if (rv) {
            return wx2PyString(newval);
        }
        else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    %End

    virtual
    void ApplyEdit(
        int row,
        int col,
        wxGrid * grid
    ) = 0;
    %Docstring
        ApplyEdit(row, col, grid)
        
        Effectively save the changes in the grid.
    %End

    virtual
    void HandleReturn(
        wxKeyEvent & event
    );
    %Docstring
        HandleReturn(event)
        
        Some types of controls on some platforms may need some help with the
        Return key.
    %End

    bool IsCreated();
    %Docstring
        IsCreated() -> bool
        
        Returns true if the edit control has been created.
    %End

    virtual
    void PaintBackground(
        wxDC & dc,
        const wxRect & rectCell,
        const wxGridCellAttr & attr
    );
    %Docstring
        PaintBackground(dc, rectCell, attr)
        
        Draws the part of the cell not occupied by the control: the base class
        version just fills it with background colour from the attribute.
    %End

    virtual
    void Reset() = 0;
    %Docstring
        Reset()
        
        Reset the value in the control back to its starting value.
    %End

    virtual
    void SetSize(
        const wxRect & rect
    );
    %Docstring
        SetSize(rect)
        
        Size and position the edit control.
    %End

    virtual
    void Show(
        bool show,
        wxGridCellAttr * attr = NULL
    );
    %Docstring
        Show(show, attr=None)
        
        Show or hide the edit control, use the specified attributes to set
        colours/fonts for it.
    %End

    virtual
    void StartingClick();
    %Docstring
        StartingClick()
        
        If the editor is enabled by clicking on the cell, this method will be
        called.
    %End

    virtual
    void StartingKey(
        wxKeyEvent & event
    );
    %Docstring
        StartingKey(event)
        
        If the editor is enabled by pressing keys on the grid, this will be
        called to let the editor do something about that first key if desired.
    %End

    virtual
    bool IsAcceptedKey(
        wxKeyEvent & event
    );
    %Docstring
        IsAcceptedKey(event) -> bool
        
        Return true to allow the given key to start editing: the base class
        version only checks that the event has no modifiers.
    %End

    virtual
    wxString GetValue() const = 0;
    %Docstring
        GetValue() -> String
        
        Returns the value currently in the editor control.
    %End

    wxWindow * GetWindow() const;
    %Docstring
        GetWindow() -> wx.Window
        
        Get the edit window used by this editor.
    %End

    void SetWindow(
        wxWindow * window
    );
    %Docstring
        SetWindow(window)
        
        Set the wxWindow that will be used by this cell editor for editing the
        value.
    %End

    wxControl * GetControl();
    %Docstring
        GetControl() -> wx.Control
        
        Get the wxControl used by this editor.
    %End

    void SetControl(
        wxControl * control
    );
    %Docstring
        SetControl(control)
        
        Set the wxControl that will be used by this cell editor for editing
        the value.
    %End

    virtual
    wxGridActivationResult TryActivate(
        int row,
        int col,
        wxGrid * grid,
        const wxGridActivationSource & actSource
    );
    %Docstring
        TryActivate(row, col, grid, actSource) -> GridActivationResult
        
        Function allowing to create an "activatable" editor.
    %End

    virtual
    void DoActivate(
        int row,
        int col,
        wxGrid * grid
    );
    %Docstring
        DoActivate(row, col, grid)
        
        Function which must be overridden for "activatable" editors.
    %End

    private:
        wxGridCellEditor(const wxGridCellEditor&);


    public:


    %Property(name=Control, get=GetControl, set=SetControl)
    %Property(name=Value, get=GetValue)
    %Property(name=Window, get=GetWindow, set=SetWindow)

protected:
    virtual
    ~wxGridCellEditor();

};  // end of class wxGridCellEditor


class wxGridCellActivatableEditor : wxGridCellEditor
{
    %Docstring
        Base class for activatable editors.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    virtual
    wxGridActivationResult TryActivate(
        int row,
        int col,
        wxGrid * grid,
        const wxGridActivationSource & actSource
    ) = 0;
    %Docstring
        TryActivate(row, col, grid, actSource) -> GridActivationResult
        
        Same method as in wxGridCellEditor, but pure virtual.
    %End

    virtual
    void DoActivate(
        int row,
        int col,
        wxGrid * grid
    ) = 0;
    %Docstring
        DoActivate(row, col, grid)
        
        Same method as in wxGridCellEditor, but pure virtual.
    %End

};  // end of class wxGridCellActivatableEditor


class wxGridCellTextEditor : wxGridCellEditor
{
    %Docstring
        GridCellTextEditor(maxChars=0)
        
        Grid cell editor for string/text data.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellTextEditor(
        size_t maxChars = 0
    )   /Transfer/;

    virtual
    void SetParameters(
        const wxString & params
    );
    %Docstring
        SetParameters(params)
        
        The parameters string format is "n" where n is a number representing
        the maximum width.
    %End

    virtual
    void SetValidator(
        const wxValidator & validator
    );
    %Docstring
        SetValidator(validator)
        
        Set validator to validate user input.
    %End

    public:


    virtual void BeginEdit(int row, int col, wxGrid* grid);


    virtual wxGridCellEditor* Clone() const /Factory/;


    virtual void Create(wxWindow* parent, wxWindowID id, wxEvtHandler* evtHandler);


    virtual void ApplyEdit(int row, int col, wxGrid* grid);


    virtual void Reset();


    virtual wxString GetValue() const;


    virtual PyObject* EndEdit(int row,  int col,  const wxGrid* grid,  const wxString& oldval) [ bool (int row, int col, const wxGrid* grid, const wxString& oldval, wxString* newval) ];
    %Docstring
        EndEdit(row, col, grid, oldval)
        
        End editing the cell.
        
        This function must check if the current value of the editing cell
        is valid and different from the original value in its string
        form. If not then simply return None.  If it has changed then
        this method should save the new value so that ApplyEdit can
        apply it later and the string representation of the new value
        should be returned.
        
        Notice that this method shoiuld not modify the grid as the
        change could still be vetoed.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridCellTextEditor_EndEdit(sipCpp, row, col, grid, oldval);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGridCellTextEditor_EndEdit(wxGridCellTextEditor* self, int row, int col, const wxGrid* grid, const wxString* oldval)
    {
        bool rv;
        wxString newval;
        rv = self->EndEdit(row, col, grid, *oldval, &newval);
        if (rv) {
            return wx2PyString(newval);
        }
        else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    %End

    public:


};  // end of class wxGridCellTextEditor


class wxGridCellDateEditor : wxGridCellEditor
{
    %Docstring
        GridCellDateEditor(format="")
        
        Grid cell editor for dates.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellDateEditor(
        const wxString & format = wxString()
    )   /Transfer/;

    virtual void BeginEdit(int row, int col, wxGrid* grid);


    virtual wxGridCellEditor* Clone() const /Factory/;


    virtual void Create(wxWindow* parent, wxWindowID id, wxEvtHandler* evtHandler);


    virtual void ApplyEdit(int row, int col, wxGrid* grid);


    virtual void Reset();


    virtual wxString GetValue() const;


    virtual PyObject* EndEdit(int row,  int col,  const wxGrid* grid,  const wxString& oldval) [ bool (int row, int col, const wxGrid* grid, const wxString& oldval, wxString* newval) ];
    %Docstring
        EndEdit(row, col, grid, oldval)
        
        End editing the cell.
        
        This function must check if the current value of the editing cell
        is valid and different from the original value in its string
        form. If not then simply return None.  If it has changed then
        this method should save the new value so that ApplyEdit can
        apply it later and the string representation of the new value
        should be returned.
        
        Notice that this method shoiuld not modify the grid as the
        change could still be vetoed.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridCellDateEditor_EndEdit(sipCpp, row, col, grid, oldval);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGridCellDateEditor_EndEdit(wxGridCellDateEditor* self, int row, int col, const wxGrid* grid, const wxString* oldval)
    {
        bool rv;
        wxString newval;
        rv = self->EndEdit(row, col, grid, *oldval, &newval);
        if (rv) {
            return wx2PyString(newval);
        }
        else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    %End

};  // end of class wxGridCellDateEditor


class wxGridCellAutoWrapStringEditor : wxGridCellTextEditor
{
    %Docstring
        GridCellAutoWrapStringEditor()
        
        Grid cell editor for wrappable string/text data.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellAutoWrapStringEditor()   /Transfer/;

    virtual void BeginEdit(int row, int col, wxGrid* grid);


    virtual wxGridCellEditor* Clone() const /Factory/;


    virtual void Create(wxWindow* parent, wxWindowID id, wxEvtHandler* evtHandler);


    virtual void ApplyEdit(int row, int col, wxGrid* grid);


    virtual void Reset();


    virtual wxString GetValue() const;


    virtual PyObject* EndEdit(int row,  int col,  const wxGrid* grid,  const wxString& oldval) [ bool (int row, int col, const wxGrid* grid, const wxString& oldval, wxString* newval) ];
    %Docstring
        EndEdit(row, col, grid, oldval)
        
        End editing the cell.
        
        This function must check if the current value of the editing cell
        is valid and different from the original value in its string
        form. If not then simply return None.  If it has changed then
        this method should save the new value so that ApplyEdit can
        apply it later and the string representation of the new value
        should be returned.
        
        Notice that this method shoiuld not modify the grid as the
        change could still be vetoed.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridCellAutoWrapStringEditor_EndEdit(sipCpp, row, col, grid, oldval);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGridCellAutoWrapStringEditor_EndEdit(wxGridCellAutoWrapStringEditor* self, int row, int col, const wxGrid* grid, const wxString* oldval)
    {
        bool rv;
        wxString newval;
        rv = self->EndEdit(row, col, grid, *oldval, &newval);
        if (rv) {
            return wx2PyString(newval);
        }
        else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    %End

};  // end of class wxGridCellAutoWrapStringEditor


class wxGridCellBoolEditor : wxGridCellEditor
{
    %Docstring
        GridCellBoolEditor()
        
        Grid cell editor for boolean data.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellBoolEditor()   /Transfer/;

    static
    bool IsTrueValue(
        const wxString & value
    );
    %Docstring
        IsTrueValue(value) -> bool
        
        Returns true if the given value is equal to the string representation
        of the truth value we currently use (see UseStringValues()).
    %End

    static
    void UseStringValues(
        const wxString & valueTrue = "1",
        const wxString & valueFalse = wxEmptyString
    );
    %Docstring
        UseStringValues(valueTrue="1", valueFalse=wx.EmptyString)
        
        This method allows you to customize the values returned by GetValue()
        for the cell using this editor.
    %End

    virtual void BeginEdit(int row, int col, wxGrid* grid);


    virtual wxGridCellEditor* Clone() const /Factory/;


    virtual void Create(wxWindow* parent, wxWindowID id, wxEvtHandler* evtHandler);


    virtual void ApplyEdit(int row, int col, wxGrid* grid);


    virtual void Reset();


    virtual wxString GetValue() const;


    virtual PyObject* EndEdit(int row,  int col,  const wxGrid* grid,  const wxString& oldval) [ bool (int row, int col, const wxGrid* grid, const wxString& oldval, wxString* newval) ];
    %Docstring
        EndEdit(row, col, grid, oldval)
        
        End editing the cell.
        
        This function must check if the current value of the editing cell
        is valid and different from the original value in its string
        form. If not then simply return None.  If it has changed then
        this method should save the new value so that ApplyEdit can
        apply it later and the string representation of the new value
        should be returned.
        
        Notice that this method shoiuld not modify the grid as the
        change could still be vetoed.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridCellBoolEditor_EndEdit(sipCpp, row, col, grid, oldval);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGridCellBoolEditor_EndEdit(wxGridCellBoolEditor* self, int row, int col, const wxGrid* grid, const wxString* oldval)
    {
        bool rv;
        wxString newval;
        rv = self->EndEdit(row, col, grid, *oldval, &newval);
        if (rv) {
            return wx2PyString(newval);
        }
        else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    %End

};  // end of class wxGridCellBoolEditor


class wxGridCellChoiceEditor : wxGridCellEditor
{
    %Docstring
        GridCellChoiceEditor(choices, allowOthers=False)
        
        Grid cell editor for string data providing the user a choice from a
        list of strings.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellChoiceEditor(
        const wxArrayString & choices,
        bool allowOthers = false
    )   /Transfer/;

    virtual
    void SetParameters(
        const wxString & params
    );
    %Docstring
        SetParameters(params)
        
        Parameters string format is "item1[,item2[...,itemN]]".
    %End

    public:


    virtual void BeginEdit(int row, int col, wxGrid* grid);


    virtual wxGridCellEditor* Clone() const /Factory/;


    virtual void Create(wxWindow* parent, wxWindowID id, wxEvtHandler* evtHandler);


    virtual void ApplyEdit(int row, int col, wxGrid* grid);


    virtual void Reset();


    virtual wxString GetValue() const;


    virtual PyObject* EndEdit(int row,  int col,  const wxGrid* grid,  const wxString& oldval) [ bool (int row, int col, const wxGrid* grid, const wxString& oldval, wxString* newval) ];
    %Docstring
        EndEdit(row, col, grid, oldval)
        
        End editing the cell.
        
        This function must check if the current value of the editing cell
        is valid and different from the original value in its string
        form. If not then simply return None.  If it has changed then
        this method should save the new value so that ApplyEdit can
        apply it later and the string representation of the new value
        should be returned.
        
        Notice that this method shoiuld not modify the grid as the
        change could still be vetoed.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridCellChoiceEditor_EndEdit(sipCpp, row, col, grid, oldval);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGridCellChoiceEditor_EndEdit(wxGridCellChoiceEditor* self, int row, int col, const wxGrid* grid, const wxString* oldval)
    {
        bool rv;
        wxString newval;
        rv = self->EndEdit(row, col, grid, *oldval, &newval);
        if (rv) {
            return wx2PyString(newval);
        }
        else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    %End

    public:


};  // end of class wxGridCellChoiceEditor


class wxGridCellEnumEditor : wxGridCellChoiceEditor
{
    %Docstring
        GridCellEnumEditor(choices=wx.EmptyString)
        
        Grid cell editor which displays an enum number as a textual equivalent
        (e.g.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellEnumEditor(
        const wxString & choices = wxEmptyString
    )   /Transfer/;

    virtual void BeginEdit(int row, int col, wxGrid* grid);


    virtual wxGridCellEditor* Clone() const /Factory/;


    virtual void Create(wxWindow* parent, wxWindowID id, wxEvtHandler* evtHandler);


    virtual void ApplyEdit(int row, int col, wxGrid* grid);


    virtual void Reset();


    virtual wxString GetValue() const;


    virtual PyObject* EndEdit(int row,  int col,  const wxGrid* grid,  const wxString& oldval) [ bool (int row, int col, const wxGrid* grid, const wxString& oldval, wxString* newval) ];
    %Docstring
        EndEdit(row, col, grid, oldval)
        
        End editing the cell.
        
        This function must check if the current value of the editing cell
        is valid and different from the original value in its string
        form. If not then simply return None.  If it has changed then
        this method should save the new value so that ApplyEdit can
        apply it later and the string representation of the new value
        should be returned.
        
        Notice that this method shoiuld not modify the grid as the
        change could still be vetoed.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridCellEnumEditor_EndEdit(sipCpp, row, col, grid, oldval);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGridCellEnumEditor_EndEdit(wxGridCellEnumEditor* self, int row, int col, const wxGrid* grid, const wxString* oldval)
    {
        bool rv;
        wxString newval;
        rv = self->EndEdit(row, col, grid, *oldval, &newval);
        if (rv) {
            return wx2PyString(newval);
        }
        else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    %End

};  // end of class wxGridCellEnumEditor


class wxGridCellFloatEditor : wxGridCellTextEditor
{
    %Docstring
        GridCellFloatEditor(width=-1, precision=-1, format=GRID_FLOAT_FORMAT_DEFAULT)
        
        The editor for floating point numbers data.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellFloatEditor(
        int width = -1,
        int precision = -1,
        int format = wxGRID_FLOAT_FORMAT_DEFAULT
    )   /Transfer/;

    virtual
    void SetParameters(
        const wxString & params
    );
    %Docstring
        SetParameters(params)
        
        The parameters string format is "width[,precision[,format]]" where
        format should be chosen between f|e|g|E|G (f is used by default)
    %End

    public:


    virtual void BeginEdit(int row, int col, wxGrid* grid);


    virtual wxGridCellEditor* Clone() const /Factory/;


    virtual void Create(wxWindow* parent, wxWindowID id, wxEvtHandler* evtHandler);


    virtual void ApplyEdit(int row, int col, wxGrid* grid);


    virtual void Reset();


    virtual wxString GetValue() const;


    virtual PyObject* EndEdit(int row,  int col,  const wxGrid* grid,  const wxString& oldval) [ bool (int row, int col, const wxGrid* grid, const wxString& oldval, wxString* newval) ];
    %Docstring
        EndEdit(row, col, grid, oldval)
        
        End editing the cell.
        
        This function must check if the current value of the editing cell
        is valid and different from the original value in its string
        form. If not then simply return None.  If it has changed then
        this method should save the new value so that ApplyEdit can
        apply it later and the string representation of the new value
        should be returned.
        
        Notice that this method shoiuld not modify the grid as the
        change could still be vetoed.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridCellFloatEditor_EndEdit(sipCpp, row, col, grid, oldval);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGridCellFloatEditor_EndEdit(wxGridCellFloatEditor* self, int row, int col, const wxGrid* grid, const wxString* oldval)
    {
        bool rv;
        wxString newval;
        rv = self->EndEdit(row, col, grid, *oldval, &newval);
        if (rv) {
            return wx2PyString(newval);
        }
        else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    %End

    public:


};  // end of class wxGridCellFloatEditor


class wxGridCellNumberEditor : wxGridCellTextEditor
{
    %Docstring
        GridCellNumberEditor(min=-1, max=-1)
        
        Grid cell editor for numeric integer data.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellNumberEditor(
        int min = -1,
        int max = -1
    )   /Transfer/;

    virtual
    void SetParameters(
        const wxString & params
    );
    %Docstring
        SetParameters(params)
        
        Parameters string format is "min,max".
    %End

    public:


    virtual void BeginEdit(int row, int col, wxGrid* grid);


    virtual wxGridCellEditor* Clone() const /Factory/;


    virtual void Create(wxWindow* parent, wxWindowID id, wxEvtHandler* evtHandler);


    virtual void ApplyEdit(int row, int col, wxGrid* grid);


    virtual void Reset();


    virtual wxString GetValue() const;


    virtual PyObject* EndEdit(int row,  int col,  const wxGrid* grid,  const wxString& oldval) [ bool (int row, int col, const wxGrid* grid, const wxString& oldval, wxString* newval) ];
    %Docstring
        EndEdit(row, col, grid, oldval)
        
        End editing the cell.
        
        This function must check if the current value of the editing cell
        is valid and different from the original value in its string
        form. If not then simply return None.  If it has changed then
        this method should save the new value so that ApplyEdit can
        apply it later and the string representation of the new value
        should be returned.
        
        Notice that this method shoiuld not modify the grid as the
        change could still be vetoed.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridCellNumberEditor_EndEdit(sipCpp, row, col, grid, oldval);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGridCellNumberEditor_EndEdit(wxGridCellNumberEditor* self, int row, int col, const wxGrid* grid, const wxString* oldval)
    {
        bool rv;
        wxString newval;
        rv = self->EndEdit(row, col, grid, *oldval, &newval);
        if (rv) {
            return wx2PyString(newval);
        }
        else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    %End

    public:


};  // end of class wxGridCellNumberEditor


class wxGridFitMode
{
    %Docstring
        GridFitMode()
        
        Allows to specify the behaviour when the cell contents doesn't fit
        into its allotted space.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridFitMode();

    bool IsSpecified() const;
    %Docstring
        IsSpecified() -> bool
        
        Return true if the object specifies some particular behaviour.
    %End

    bool IsClip() const;
    %Docstring
        IsClip() -> bool
        
        Return true if the object specifies clipping behaviour.
    %End

    bool IsOverflow() const;
    %Docstring
        IsOverflow() -> bool
        
        Return true if the object specifies overflow behaviour.
    %End

    wxEllipsizeMode GetEllipsizeMode() const;
    %Docstring
        GetEllipsizeMode() -> EllipsizeMode
        
        Return ellipsize mode, possibly wxELLIPSIZE_NONE.
    %End

    static
    wxGridFitMode Clip();
    %Docstring
        Clip() -> GridFitMode
        
        Pseudo-constructor for object specifying clipping behaviour.
    %End

    static
    wxGridFitMode Overflow();
    %Docstring
        Overflow() -> GridFitMode
        
        Pseudo-constructor for object specifying overflow behaviour.
    %End

    static
    wxGridFitMode Ellipsize(
        wxEllipsizeMode ellipsize = wxELLIPSIZE_END
    );
    %Docstring
        Ellipsize(ellipsize=wx.ELLIPSIZE_END) -> GridFitMode
        
        Pseudo-constructor for object specifying ellipsize behaviour.
    %End

    public:


    %Property(name=EllipsizeMode, get=GetEllipsizeMode)
};  // end of class wxGridFitMode


class wxGridCellAttr : wxClientDataContainer, wxRefCounter
{
    %Docstring
        GridCellAttr(attrDefault=None)
        GridCellAttr(colText, colBack, font, hAlign, vAlign)
        
        This class can be used to alter the cells' appearance in the grid by
        changing their attributes from the defaults.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    enum wxAttrKind
    {
        Any,
        Cell,
        Row,
        Col,
        Default,
        Merged    
    };

    wxGridCellAttr(
        wxGridCellAttr * attrDefault = NULL
    )   /Transfer/;

    wxGridCellAttr(
        const wxColour & colText,
        const wxColour & colBack,
        const wxFont & font,
        int hAlign,
        int vAlign
    )   /Transfer/;

    wxGridCellAttr * Clone() const   /Factory/;
    %Docstring
        Clone() -> GridCellAttr
        
        Creates a new copy of this object.
    %End

    void DecRef();
    %Docstring
        DecRef()
        
        This class is reference counted: it is created with ref count of 1, so
        calling DecRef() once will delete it.
    %End

    void GetAlignment(
        int * hAlign   /Out/,
        int * vAlign   /Out/
    ) const;
    %Docstring
        GetAlignment() -> (hAlign, vAlign)
        
        Get the alignment to use for the cell with the given attribute.
    %End

    const wxColour & GetBackgroundColour() const;
    %Docstring
        GetBackgroundColour() -> wx.Colour
        
        Returns the background colour.
    %End

    wxGridCellEditor * GetEditor(
        const wxGrid * grid,
        int row,
        int col
    ) const;
    %Docstring
        GetEditor(grid, row, col) -> GridCellEditor
        
        Returns the cell editor.
    %End

    wxGridCellEditorPtr GetEditorPtr(
        const wxGrid * grid,
        int row,
        int col
    ) const;
    %Docstring
        GetEditorPtr(grid, row, col) -> GridCellEditorPtr
        
        Returns the cell editor.
    %End

    const wxFont & GetFont() const;
    %Docstring
        GetFont() -> wx.Font
        
        Returns the font.
    %End

    void GetNonDefaultAlignment(
        int * hAlign   /Out/,
        int * vAlign   /Out/
    ) const;
    %Docstring
        GetNonDefaultAlignment() -> (hAlign, vAlign)
        
        Get the alignment defined by this attribute.
    %End

    wxGridCellRenderer * GetRenderer(
        const wxGrid * grid,
        int row,
        int col
    ) const;
    %Docstring
        GetRenderer(grid, row, col) -> GridCellRenderer
        
        Returns the cell renderer.
    %End

    wxGridCellRendererPtr GetRendererPtr(
        const wxGrid * grid,
        int row,
        int col
    ) const;
    %Docstring
        GetRendererPtr(grid, row, col) -> GridCellRendererPtr
        
        Returns the cell editor.
    %End

    const wxColour & GetTextColour() const;
    %Docstring
        GetTextColour() -> wx.Colour
        
        Returns the text colour.
    %End

    bool HasAlignment() const;
    %Docstring
        HasAlignment() -> bool
        
        Returns true if this attribute has a valid alignment set.
    %End

    bool HasBackgroundColour() const;
    %Docstring
        HasBackgroundColour() -> bool
        
        Returns true if this attribute has a valid background colour set.
    %End

    bool HasEditor() const;
    %Docstring
        HasEditor() -> bool
        
        Returns true if this attribute has a valid cell editor set.
    %End

    bool HasFont() const;
    %Docstring
        HasFont() -> bool
        
        Returns true if this attribute has a valid font set.
    %End

    bool HasRenderer() const;
    %Docstring
        HasRenderer() -> bool
        
        Returns true if this attribute has a valid cell renderer set.
    %End

    bool HasTextColour() const;
    %Docstring
        HasTextColour() -> bool
        
        Returns true if this attribute has a valid text colour set.
    %End

    void IncRef();
    %Docstring
        IncRef()
        
        This class is reference counted: it is created with ref count of 1, so
        calling DecRef() once will delete it.
    %End

    bool IsReadOnly() const;
    %Docstring
        IsReadOnly() -> bool
        
        Returns true if this cell is set as read-only.
    %End

    void SetAlignment(
        int hAlign,
        int vAlign
    );
    %Docstring
        SetAlignment(hAlign, vAlign)
        
        Sets the alignment.
    %End

    void SetBackgroundColour(
        const wxColour & colBack
    );
    %Docstring
        SetBackgroundColour(colBack)
        
        Sets the background colour.
    %End

    void SetDefAttr(
        wxGridCellAttr * defAttr
    );
    %Docstring
        SetDefAttr(defAttr)
    %End

    void SetEditor(
        wxGridCellEditor * editor   /Transfer/
    );
    %Docstring
        SetEditor(editor)
        
        Sets the editor to be used with the cells with this attribute.
    %End

    void SetFont(
        const wxFont & font
    );
    %Docstring
        SetFont(font)
        
        Sets the font.
    %End

    void SetReadOnly(
        bool isReadOnly = true
    );
    %Docstring
        SetReadOnly(isReadOnly=True)
        
        Sets the cell as read-only.
    %End

    void SetRenderer(
        wxGridCellRenderer * renderer   /Transfer/
    );
    %Docstring
        SetRenderer(renderer)
        
        Sets the renderer to be used for cells with this attribute.
    %End

    void SetTextColour(
        const wxColour & colText
    );
    %Docstring
        SetTextColour(colText)
        
        Sets the text colour.
    %End

    void MergeWith(
        wxGridCellAttr * mergefrom
    );
    %Docstring
        MergeWith(mergefrom)
    %End

    void SetSize(
        int num_rows,
        int num_cols
    );
    %Docstring
        SetSize(num_rows, num_cols)
    %End

    void SetFitMode(
        wxGridFitMode fitMode
    );
    %Docstring
        SetFitMode(fitMode)
        
        Specifies the behaviour of the cell contents if it doesn't fit into
        the available space.
    %End

    void SetOverflow(
        bool allow = true
    );
    %Docstring
        SetOverflow(allow=True)
        
        Specifies if cells using this attribute should overflow or clip their
        contents.
    %End

    void SetKind(
        wxAttrKind kind
    );
    %Docstring
        SetKind(kind)
    %End

    bool HasReadWriteMode() const;
    %Docstring
        HasReadWriteMode() -> bool
    %End

    bool HasOverflowMode() const;
    %Docstring
        HasOverflowMode() -> bool
    %End

    bool HasSize() const;
    %Docstring
        HasSize() -> bool
    %End

    void GetSize(
        int * num_rows   /Out/,
        int * num_cols   /Out/
    ) const;
    %Docstring
        GetSize() -> (num_rows, num_cols)
    %End

    wxGridFitMode GetFitMode() const;
    %Docstring
        GetFitMode() -> GridFitMode
        
        Returns the fitting mode for the cells using this attribute.
    %End

    bool GetOverflow() const;
    %Docstring
        GetOverflow() -> bool
        
        Returns true if the cells using this attribute overflow into the
        neighbouring cells.
    %End

    bool CanOverflow() const;
    %Docstring
        CanOverflow() -> bool
        
        Returns true if the cell will draw an overflowed text into the
        neighbouring cells.
    %End

    wxAttrKind GetKind();
    %Docstring
        GetKind() -> AttrKind
    %End

    private:
        wxGridCellAttr(const wxGridCellAttr&);


    public:


    %Property(name=BackgroundColour, get=GetBackgroundColour, set=SetBackgroundColour)
    %Property(name=FitMode, get=GetFitMode, set=SetFitMode)
    %Property(name=Font, get=GetFont, set=SetFont)
    %Property(name=Kind, get=GetKind, set=SetKind)
    %Property(name=Overflow, get=GetOverflow, set=SetOverflow)
    %Property(name=TextColour, get=GetTextColour, set=SetTextColour)

protected:
    virtual
    ~wxGridCellAttr();

};  // end of class wxGridCellAttr


class wxGridCornerHeaderRenderer : wxGridHeaderLabelsRenderer
{
    %Docstring
        Base class for corner header renderer.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

    %InstanceCode
        sipCpp = new wxGridCornerHeaderRendererDefault;
    %End
public:
};  // end of class wxGridCornerHeaderRenderer


class wxGridHeaderLabelsRenderer
{
    %Docstring
        Base class for header cells renderers.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    virtual
    void DrawBorder(
        const wxGrid & grid,
        wxDC & dc,
        wxRect & rect
    ) const = 0;
    %Docstring
        DrawBorder(grid, dc, rect)
        
        Called by the grid to draw the border around the cell header.
    %End

    virtual
    void DrawLabel(
        const wxGrid & grid,
        wxDC & dc,
        const wxString & value,
        const wxRect & rect,
        int horizAlign,
        int vertAlign,
        int textOrientation
    ) const;
    %Docstring
        DrawLabel(grid, dc, value, rect, horizAlign, vertAlign, textOrientation)
        
        Called by the grid to draw the specified label.
    %End

};  // end of class wxGridHeaderLabelsRenderer


class wxGridRowHeaderRenderer : wxGridHeaderLabelsRenderer
{
    %Docstring
        Base class for row headers renderer.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

    %InstanceCode
        sipCpp = new wxGridRowHeaderRendererDefault;
    %End
public:
};  // end of class wxGridRowHeaderRenderer


class wxGridColumnHeaderRenderer : wxGridHeaderLabelsRenderer
{
    %Docstring
        Base class for column headers renderer.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

    %InstanceCode
        sipCpp = new wxGridColumnHeaderRendererDefault;
    %End
public:
};  // end of class wxGridColumnHeaderRenderer


class wxGridRowHeaderRendererDefault : wxGridRowHeaderRenderer
{
    %Docstring
        Default row header renderer.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    virtual
    void DrawBorder(
        const wxGrid & grid,
        wxDC & dc,
        wxRect & rect
    ) const;
    %Docstring
        DrawBorder(grid, dc, rect)
        
        Implement border drawing for the row labels.
    %End

};  // end of class wxGridRowHeaderRendererDefault


class wxGridColumnHeaderRendererDefault : wxGridColumnHeaderRenderer
{
    %Docstring
        Default column header renderer.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    virtual
    void DrawBorder(
        const wxGrid & grid,
        wxDC & dc,
        wxRect & rect
    ) const;
    %Docstring
        DrawBorder(grid, dc, rect)
        
        Implement border drawing for the column labels.
    %End

};  // end of class wxGridColumnHeaderRendererDefault


class wxGridCornerHeaderRendererDefault : wxGridCornerHeaderRenderer
{
    %Docstring
        Default corner window renderer.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    virtual
    void DrawBorder(
        const wxGrid & grid,
        wxDC & dc,
        wxRect & rect
    ) const;
    %Docstring
        DrawBorder(grid, dc, rect)
        
        Implement border drawing for the corner window.
    %End

};  // end of class wxGridCornerHeaderRendererDefault


class wxGridCellAttrProvider : wxClientDataContainer
{
    %Docstring
        GridCellAttrProvider()
        
        Class providing attributes to be used for the grid cells.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridCellAttrProvider();

    virtual
    ~wxGridCellAttrProvider();

    virtual
    void SetAttr(
        wxGridCellAttr * attr   /Transfer/,
        int row,
        int col
    );
    %Docstring
        SetAttr(attr, row, col)
        
        Set attribute for the specified cell.
    %End

    virtual
    void SetRowAttr(
        wxGridCellAttr * attr   /Transfer/,
        int row
    );
    %Docstring
        SetRowAttr(attr, row)
        
        Set attribute for the specified row.
    %End

    virtual
    void SetColAttr(
        wxGridCellAttr * attr   /Transfer/,
        int col
    );
    %Docstring
        SetColAttr(attr, col)
        
        Set attribute for the specified column.
    %End

    virtual
    const wxGridColumnHeaderRenderer & GetColumnHeaderRenderer(
        int col
    );
    %Docstring
        GetColumnHeaderRenderer(col) -> GridColumnHeaderRenderer
        
        Return the renderer used for drawing column headers.
    %End

    virtual
    const wxGridRowHeaderRenderer & GetRowHeaderRenderer(
        int row
    );
    %Docstring
        GetRowHeaderRenderer(row) -> GridRowHeaderRenderer
        
        Return the renderer used for drawing row headers.
    %End

    virtual
    const wxGridCornerHeaderRenderer & GetCornerRenderer();
    %Docstring
        GetCornerRenderer() -> GridCornerHeaderRenderer
        
        Return the renderer used for drawing the corner window.
    %End

    virtual
    wxGridCellAttr * GetAttr(
        int row,
        int col,
        wxGridCellAttr::wxAttrKind kind
    ) const;
    %Docstring
        GetAttr(row, col, kind) -> GridCellAttr
        
        Get the attribute to use for the specified cell.
    %End

    wxGridCellAttrPtr GetAttrPtr(
        int row,
        int col,
        wxGridCellAttr::wxAttrKind kind
    ) const;
    %Docstring
        GetAttrPtr(row, col, kind) -> GridCellAttrPtr
        
        Get the attribute to use for the specified cell.
    %End

    private:
        wxGridCellAttrProvider(const wxGridCellAttrProvider&);


    public:


    %Property(name=CornerRenderer, get=GetCornerRenderer)
};  // end of class wxGridCellAttrProvider


class wxGridTableBase : wxObject
{
    %Docstring
        GridTableBase()
        
        The almost abstract base class for grid tables.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridTableBase();

    virtual
    ~wxGridTableBase();

    virtual
    bool IsEmptyCell(
        int row,
        int col
    );
    %Docstring
        IsEmptyCell(row, col) -> bool
        
        May be overridden to implement testing for empty cells.
    %End

    bool IsEmpty(
        const wxGridCellCoords & coords
    );
    %Docstring
        IsEmpty(coords) -> bool
        
        Same as IsEmptyCell() but taking wxGridCellCoords.
    %End

    virtual
    PyObject* GetValue(
        int row,
        int col
    ) = 0 [ wxString (int row, int col) ];
    %Docstring
        GetValue(row, col) -> PyObject
        
        Must be overridden to implement accessing the table values as text.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridTableBase_GetValue(sipCpp, row, col);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %VirtualCatcherCode
        // virtualCatcherCode for GridTableBase.GetValue
        PyObject *result = sipCallMethod(&sipIsErr, sipMethod, "ii", row, col);
        if (result == NULL) {
            if (PyErr_Occurred())
                PyErr_Print();
            sipRes = "";
        }
        else if (result == Py_None) {
            sipRes = "";
        }
        else {
            if (!PyBytes_Check(result) && !PyUnicode_Check(result)) {
                PyObject* old = result;
                result = PyObject_Str(result);
                Py_DECREF(old);
            }
            sipRes = Py2wxString(result);
        }
        Py_XDECREF(result);
    %End
    %TypeCode
    PyObject* _wxGridTableBase_GetValue(wxGridTableBase* self, int row, int col)
    {
        return wx2PyString(self->GetValue(row, col));
    }
    %End

    virtual
    void SetValue(
        int row,
        int col,
        const wxString & value
    ) = 0;
    %Docstring
        SetValue(row, col, value)
        
        Must be overridden to implement setting the table values as text.
    %End

    virtual
    wxString GetTypeName(
        int row,
        int col
    );
    %Docstring
        GetTypeName(row, col) -> String
        
        Returns the type of the value in the given cell.
    %End

    virtual
    bool CanGetValueAs(
        int row,
        int col,
        const wxString & typeName
    );
    %Docstring
        CanGetValueAs(row, col, typeName) -> bool
        
        Returns true if the value of the given cell can be accessed as if it
        were of the specified type.
    %End

    virtual
    bool CanSetValueAs(
        int row,
        int col,
        const wxString & typeName
    );
    %Docstring
        CanSetValueAs(row, col, typeName) -> bool
        
        Returns true if the value of the given cell can be set as if it were
        of the specified type.
    %End

    virtual
    long GetValueAsLong(
        int row,
        int col
    );
    %Docstring
        GetValueAsLong(row, col) -> long
        
        Returns the value of the given cell as a long.
    %End

    virtual
    double GetValueAsDouble(
        int row,
        int col
    );
    %Docstring
        GetValueAsDouble(row, col) -> double
        
        Returns the value of the given cell as a double.
    %End

    virtual
    bool GetValueAsBool(
        int row,
        int col
    );
    %Docstring
        GetValueAsBool(row, col) -> bool
        
        Returns the value of the given cell as a boolean.
    %End

    virtual
    void SetValueAsLong(
        int row,
        int col,
        long value
    );
    %Docstring
        SetValueAsLong(row, col, value)
        
        Sets the value of the given cell as a long.
    %End

    virtual
    void SetValueAsDouble(
        int row,
        int col,
        double value
    );
    %Docstring
        SetValueAsDouble(row, col, value)
        
        Sets the value of the given cell as a double.
    %End

    virtual
    void SetValueAsBool(
        int row,
        int col,
        bool value
    );
    %Docstring
        SetValueAsBool(row, col, value)
        
        Sets the value of the given cell as a boolean.
    %End

    virtual
    void Clear();
    %Docstring
        Clear()
        
        Clear the table contents.
    %End

    virtual
    bool InsertRows(
        size_t pos = 0,
        size_t numRows = 1
    );
    %Docstring
        InsertRows(pos=0, numRows=1) -> bool
        
        Insert additional rows into the table.
    %End

    virtual
    bool AppendRows(
        size_t numRows = 1
    );
    %Docstring
        AppendRows(numRows=1) -> bool
        
        Append additional rows at the end of the table.
    %End

    virtual
    bool DeleteRows(
        size_t pos = 0,
        size_t numRows = 1
    );
    %Docstring
        DeleteRows(pos=0, numRows=1) -> bool
        
        Delete rows from the table.
    %End

    virtual
    bool InsertCols(
        size_t pos = 0,
        size_t numCols = 1
    );
    %Docstring
        InsertCols(pos=0, numCols=1) -> bool
        
        Exactly the same as InsertRows() but for columns.
    %End

    virtual
    bool AppendCols(
        size_t numCols = 1
    );
    %Docstring
        AppendCols(numCols=1) -> bool
        
        Exactly the same as AppendRows() but for columns.
    %End

    virtual
    bool DeleteCols(
        size_t pos = 0,
        size_t numCols = 1
    );
    %Docstring
        DeleteCols(pos=0, numCols=1) -> bool
        
        Exactly the same as DeleteRows() but for columns.
    %End

    virtual
    wxString GetRowLabelValue(
        int row
    );
    %Docstring
        GetRowLabelValue(row) -> String
        
        Return the label of the specified row.
    %End

    virtual
    wxString GetColLabelValue(
        int col
    );
    %Docstring
        GetColLabelValue(col) -> String
        
        Return the label of the specified column.
    %End

    virtual
    wxString GetCornerLabelValue() const;
    %Docstring
        GetCornerLabelValue() -> String
        
        Return the label of the grid's corner.
    %End

    virtual
    void SetRowLabelValue(
        int row,
        const wxString & label
    );
    %Docstring
        SetRowLabelValue(row, label)
        
        Set the given label for the specified row.
    %End

    virtual
    void SetColLabelValue(
        int col,
        const wxString & label
    );
    %Docstring
        SetColLabelValue(col, label)
        
        Exactly the same as SetRowLabelValue() but for columns.
    %End

    virtual
    void SetCornerLabelValue(
        const wxString & 
    );
    %Docstring
        SetCornerLabelValue()
        
        Set the given label for the grid's corner.
    %End

    void SetAttrProvider(
        wxGridCellAttrProvider * attrProvider
    );
    %Docstring
        SetAttrProvider(attrProvider)
        
        Associate this attributes provider with the table.
    %End

    wxGridCellAttrProvider * GetAttrProvider() const;
    %Docstring
        GetAttrProvider() -> GridCellAttrProvider
        
        Returns the attribute provider currently being used.
    %End

    virtual
    wxGridCellAttr * GetAttr(
        int row,
        int col,
        wxGridCellAttr::wxAttrKind kind
    );
    %Docstring
        GetAttr(row, col, kind) -> GridCellAttr
        
        Return the attribute for the given cell.
    %End

    wxGridCellAttrPtr GetAttrPtr(
        int row,
        int col,
        wxGridCellAttr::wxAttrKind kind
    );
    %Docstring
        GetAttrPtr(row, col, kind) -> GridCellAttrPtr
        
        Return the attribute for the given cell.
    %End

    virtual
    void SetAttr(
        wxGridCellAttr * attr   /Transfer/,
        int row,
        int col
    );
    %Docstring
        SetAttr(attr, row, col)
        
        Set attribute of the specified cell.
    %End

    virtual
    void SetRowAttr(
        wxGridCellAttr * attr   /Transfer/,
        int row
    );
    %Docstring
        SetRowAttr(attr, row)
        
        Set attribute of the specified row.
    %End

    virtual
    void SetColAttr(
        wxGridCellAttr * attr   /Transfer/,
        int col
    );
    %Docstring
        SetColAttr(attr, col)
        
        Set attribute of the specified column.
    %End

    virtual
    int GetNumberRows() = 0;
    %Docstring
        GetNumberRows() -> int
        
        Must be overridden to return the number of rows in the table.
    %End

    virtual
    int GetNumberCols() = 0;
    %Docstring
        GetNumberCols() -> int
        
        Must be overridden to return the number of columns in the table.
    %End

    int GetRowsCount() const;
    %Docstring
        GetRowsCount() -> int
        
        Return the number of rows in the table.
    %End

    int GetColsCount() const;
    %Docstring
        GetColsCount() -> int
        
        Return the number of columns in the table.
    %End

    virtual
    void SetView(
        wxGrid * grid
    );
    %Docstring
        SetView(grid)
        
        Called by the grid when the table is associated with it.
    %End

    virtual
    wxGrid * GetView() const;
    %Docstring
        GetView() -> Grid
        
        Returns the last grid passed to SetView().
    %End

    virtual
    bool CanHaveAttributes();
    %Docstring
        CanHaveAttributes() -> bool
        
        Returns true if this table supports attributes or false otherwise.
    %End

    virtual
    bool CanMeasureColUsingSameAttr(
        int col
    ) const;
    %Docstring
        CanMeasureColUsingSameAttr(col) -> bool
        
        Override to return true if the same attribute can be used for
        measuring all cells in the given column.
    %End

    private:
        wxGridTableBase(const wxGridTableBase&);


    public:


    %Property(name=AttrProvider, get=GetAttrProvider, set=SetAttrProvider)
    %Property(name=ColsCount, get=GetColsCount)
    %Property(name=CornerLabelValue, get=GetCornerLabelValue, set=SetCornerLabelValue)
    %Property(name=NumberCols, get=GetNumberCols)
    %Property(name=NumberRows, get=GetNumberRows)
    %Property(name=RowsCount, get=GetRowsCount)
    %Property(name=View, get=GetView, set=SetView)
};  // end of class wxGridTableBase


%Extract(id=pycode_grid)
def _GridTableBase_GetValueAsLong(self, row, col):
    val = self.GetValue(row, col)
    try:
        return int(val)
    except ValueError:
        return 0
GridTableBase.GetValueAsLong = _GridTableBase_GetValueAsLong
del _GridTableBase_GetValueAsLong
%End

%Extract(id=pycode_grid)
def _GridTableBase_GetValueAsDouble(self, row, col):
    val = self.GetValue(row, col)
    try:
        return float(val)
    except ValueError:
        return 0.0
GridTableBase.GetValueAsDouble = _GridTableBase_GetValueAsDouble
del _GridTableBase_GetValueAsDouble
%End

%Extract(id=pycode_grid)
def _GridTableBase_GetValueAsBool(self, row, col):
    val = self.GetValue(row, col)
    try:
        return bool(val)
    except ValueError:
        return False
GridTableBase.GetValueAsBool = _GridTableBase_GetValueAsBool
del _GridTableBase_GetValueAsBool
%End

%Extract(id=pycode_grid)
def _GridTableBase_SetValueAsLong(self, row, col, value):
    self.SetValue(row, col, int(value))
GridTableBase.SetValueAsLong = _GridTableBase_SetValueAsLong
del _GridTableBase_SetValueAsLong
%End

%Extract(id=pycode_grid)
def _GridTableBase_SetValueAsDouble(self, row, col, value):
    self.SetValue(row, col, float(value))
GridTableBase.SetValueAsDouble = _GridTableBase_SetValueAsDouble
del _GridTableBase_SetValueAsDouble
%End

%Extract(id=pycode_grid)
def _GridTableBase_SetValueAsBool(self, row, col, value):
    self.SetValue(row, col, bool(value))
GridTableBase.SetValueAsBool = _GridTableBase_SetValueAsBool
del _GridTableBase_SetValueAsBool
%End

class wxGridTableMessage
{
    %Docstring
        GridTableMessage()
        GridTableMessage(table, id, comInt1=-1, comInt2=-1)
        
        Message class used by the grid table to send requests and
        notifications to the grid view.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridTableMessage();

    wxGridTableMessage(
        wxGridTableBase * table,
        int id,
        int comInt1 = -1,
        int comInt2 = -1
    );

    void SetTableObject(
        wxGridTableBase * table
    );
    %Docstring
        SetTableObject(table)
        
        Sets the table object.
    %End

    wxGridTableBase * GetTableObject() const;
    %Docstring
        GetTableObject() -> GridTableBase
        
        Gets the table object.
    %End

    void SetId(
        int id
    );
    %Docstring
        SetId(id)
        
        Sets an id.
    %End

    int GetId();
    %Docstring
        GetId() -> int
        
        Gets an id.
    %End

    void SetCommandInt(
        int comInt1
    );
    %Docstring
        SetCommandInt(comInt1)
        
        Set the position after which the insertion/deletion occur.
    %End

    int GetCommandInt();
    %Docstring
        GetCommandInt() -> int
        
        Get the position after which the insertion/deletion occur.
    %End

    void SetCommandInt2(
        int comInt2
    );
    %Docstring
        SetCommandInt2(comInt2)
        
        Set the number of rows to be inserted/deleted.
    %End

    int GetCommandInt2();
    %Docstring
        GetCommandInt2() -> int
        
        Get the number of rows to be inserted/deleted.
    %End

    private:
        wxGridTableMessage(const wxGridTableMessage&);


    public:


    %Property(name=CommandInt, get=GetCommandInt, set=SetCommandInt)
    %Property(name=CommandInt2, get=GetCommandInt2, set=SetCommandInt2)
    %Property(name=Id, get=GetId, set=SetId)
    %Property(name=TableObject, get=GetTableObject, set=SetTableObject)
};  // end of class wxGridTableMessage


class wxGridStringTable
{
    %Docstring
        GridStringTable()
        GridStringTable(numRows, numCols)
        
        Simplest type of data table for a grid for small tables of strings
        that are stored in memory.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridStringTable();

    wxGridStringTable(
        int numRows,
        int numCols
    );

    virtual
    int GetNumberRows();
    %Docstring
        GetNumberRows() -> int
    %End

    virtual
    int GetNumberCols();
    %Docstring
        GetNumberCols() -> int
    %End

    virtual
    wxString GetValue(
        int row,
        int col
    );
    %Docstring
        GetValue(row, col) -> String
    %End

    virtual
    void SetValue(
        int row,
        int col,
        const wxString & s
    );
    %Docstring
        SetValue(row, col, s)
    %End

    void Clear();
    %Docstring
        Clear()
    %End

    bool InsertRows(
        size_t pos = 0,
        size_t numRows = 1
    );
    %Docstring
        InsertRows(pos=0, numRows=1) -> bool
    %End

    bool AppendRows(
        size_t numRows = 1
    );
    %Docstring
        AppendRows(numRows=1) -> bool
    %End

    bool DeleteRows(
        size_t pos = 0,
        size_t numRows = 1
    );
    %Docstring
        DeleteRows(pos=0, numRows=1) -> bool
    %End

    bool InsertCols(
        size_t pos = 0,
        size_t numCols = 1
    );
    %Docstring
        InsertCols(pos=0, numCols=1) -> bool
    %End

    bool AppendCols(
        size_t numCols = 1
    );
    %Docstring
        AppendCols(numCols=1) -> bool
    %End

    bool DeleteCols(
        size_t pos = 0,
        size_t numCols = 1
    );
    %Docstring
        DeleteCols(pos=0, numCols=1) -> bool
    %End

    void SetRowLabelValue(
        int row,
        const wxString & 
    );
    %Docstring
        SetRowLabelValue(row, )
    %End

    void SetColLabelValue(
        int col,
        const wxString & 
    );
    %Docstring
        SetColLabelValue(col, )
    %End

    void SetCornerLabelValue(
        const wxString & 
    );
    %Docstring
        SetCornerLabelValue()
    %End

    wxString GetRowLabelValue(
        int row
    );
    %Docstring
        GetRowLabelValue(row) -> String
    %End

    wxString GetColLabelValue(
        int col
    );
    %Docstring
        GetColLabelValue(col) -> String
    %End

    wxString GetCornerLabelValue() const;
    %Docstring
        GetCornerLabelValue() -> String
    %End

    private:
        wxGridStringTable(const wxGridStringTable&);


    public:


    %Property(name=CornerLabelValue, get=GetCornerLabelValue, set=SetCornerLabelValue)
    %Property(name=NumberCols, get=GetNumberCols)
    %Property(name=NumberRows, get=GetNumberRows)
};  // end of class wxGridStringTable


class wxGridSizesInfo
{
    %Docstring
        GridSizesInfo()
        GridSizesInfo(defSize, allSizes)
        
        wxGridSizesInfo stores information about sizes of all wxGrid rows or
        columns.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridSizesInfo();

    wxGridSizesInfo(
        int defSize,
        const wxArrayInt & allSizes
    );

    int m_sizeDefault;

    int GetSize(
        unsigned pos
    ) const;
    %Docstring
        GetSize(pos) -> int
        
        Get the element size.
    %End

};  // end of class wxGridSizesInfo


class wxGrid : wxScrolledCanvas
{
    %Docstring
        Grid()
        Grid(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.WANTS_CHARS, name=GridNameStr)
        
        wxGrid and its related classes are used for displaying and editing
        tabular data.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    enum wxGridSelectionModes
    {
        wxGridSelectCells,
        wxGridSelectRows,
        wxGridSelectColumns,
        wxGridSelectRowsOrColumns,
        wxGridSelectNone    
    };

    enum CellSpan
    {
        CellSpan_Inside,
        CellSpan_None,
        CellSpan_Main    
    };

    enum TabBehaviour
    {
        Tab_Stop,
        Tab_Wrap,
        Tab_Leave    
    };

    wxGrid();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxGrid(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxWANTS_CHARS,
        const wxString & name = wxGridNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxGrid();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxWANTS_CHARS,
        const wxString & name = wxGridNameStr
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.WANTS_CHARS, name=GridNameStr) -> bool
        
        Creates the grid window for an object initialized using the default
        constructor.
    %End

    bool CreateGrid(
        int numRows,
        int numCols,
        wxGridSelectionModes selmode = wxGridSelectCells
    );
    %Docstring
        CreateGrid(numRows, numCols, selmode=GridSelectCells) -> bool
        
        Creates a grid with the specified initial number of rows and columns.
    %End

    bool SetTable(
        wxGridTableBase * table,
        bool takeOwnership = false,
        wxGridSelectionModes selmode = wxGridSelectCells
    )   /PyName=_SetTable/;
    %Docstring
        _SetTable(table, takeOwnership=False, selmode=GridSelectCells) -> bool
        
        Passes a pointer to a custom grid table to be used by the grid.
    %End

    void AssignTable(
        wxGridTableBase * table,
        wxGridSelectionModes selmode = wxGridSelectCells
    );
    %Docstring
        AssignTable(table, selmode=GridSelectCells)
        
        Assigns a pointer to a custom grid table to be used by the grid.
    %End

    bool ProcessTableMessage(
        wxGridTableMessage & msg
    );
    %Docstring
        ProcessTableMessage(msg) -> bool
        
        Receive and handle a message from the table.
    %End

    void EnableGridLines(
        bool enable = true
    );
    %Docstring
        EnableGridLines(enable=True)
        
        Turns the drawing of grid lines on or off.
    %End

    virtual
    wxPen GetColGridLinePen(
        int col
    );
    %Docstring
        GetColGridLinePen(col) -> wx.Pen
        
        Returns the pen used for vertical grid lines.
    %End

    virtual
    wxPen GetDefaultGridLinePen();
    %Docstring
        GetDefaultGridLinePen() -> wx.Pen
        
        Returns the pen used for grid lines.
    %End

    wxColour GetGridLineColour() const;
    %Docstring
        GetGridLineColour() -> wx.Colour
        
        Returns the colour used for grid lines.
    %End

    virtual
    wxPen GetRowGridLinePen(
        int row
    );
    %Docstring
        GetRowGridLinePen(row) -> wx.Pen
        
        Returns the pen used for horizontal grid lines.
    %End

    bool GridLinesEnabled() const;
    %Docstring
        GridLinesEnabled() -> bool
        
        Returns true if drawing of grid lines is turned on, false otherwise.
    %End

    void SetGridLineColour(
        const wxColour & colour
    );
    %Docstring
        SetGridLineColour(colour)
        
        Sets the colour used to draw grid lines.
    %End

    void GetColLabelAlignment(
        int * horiz   /Out/,
        int * vert   /Out/
    ) const;
    %Docstring
        GetColLabelAlignment() -> (horiz, vert)
        
        Sets the arguments to the current column label alignment values.
    %End

    int GetColLabelTextOrientation() const;
    %Docstring
        GetColLabelTextOrientation() -> int
        
        Returns the orientation of the column labels (either wxHORIZONTAL or
        wxVERTICAL).
    %End

    wxString GetColLabelValue(
        int col
    ) const;
    %Docstring
        GetColLabelValue(col) -> String
        
        Returns the specified column label.
    %End

    void GetCornerLabelAlignment(
        int * horiz,
        int * vert
    ) const;
    %Docstring
        GetCornerLabelAlignment(horiz, vert)
        
        Sets the arguments to the current corner label alignment values.
    %End

    int GetCornerLabelTextOrientation() const;
    %Docstring
        GetCornerLabelTextOrientation() -> int
        
        Returns the orientation of the corner label (either wxHORIZONTAL or
        wxVERTICAL).
    %End

    wxString GetCornerLabelValue() const;
    %Docstring
        GetCornerLabelValue() -> String
        
        Returns the (top-left) corner label.
    %End

    wxColour GetLabelBackgroundColour() const;
    %Docstring
        GetLabelBackgroundColour() -> wx.Colour
        
        Returns the colour used for the background of row and column labels.
    %End

    wxFont GetLabelFont() const;
    %Docstring
        GetLabelFont() -> wx.Font
        
        Returns the font used for row and column labels.
    %End

    wxColour GetLabelTextColour() const;
    %Docstring
        GetLabelTextColour() -> wx.Colour
        
        Returns the colour used for row and column label text.
    %End

    void GetRowLabelAlignment(
        int * horiz   /Out/,
        int * vert   /Out/
    ) const;
    %Docstring
        GetRowLabelAlignment() -> (horiz, vert)
        
        Returns the alignment used for row labels.
    %End

    wxString GetRowLabelValue(
        int row
    ) const;
    %Docstring
        GetRowLabelValue(row) -> String
        
        Returns the specified row label.
    %End

    void HideColLabels();
    %Docstring
        HideColLabels()
        
        Hides the column labels by calling SetColLabelSize() with a size of 0.
    %End

    void HideRowLabels();
    %Docstring
        HideRowLabels()
        
        Hides the row labels by calling SetRowLabelSize() with a size of 0.
    %End

    void SetColLabelAlignment(
        int horiz,
        int vert
    );
    %Docstring
        SetColLabelAlignment(horiz, vert)
        
        Sets the horizontal and vertical alignment of column label text.
    %End

    void SetColLabelTextOrientation(
        int textOrientation
    );
    %Docstring
        SetColLabelTextOrientation(textOrientation)
        
        Sets the orientation of the column labels (either wxHORIZONTAL or
        wxVERTICAL).
    %End

    void SetColLabelValue(
        int col,
        const wxString & value
    );
    %Docstring
        SetColLabelValue(col, value)
        
        Set the value for the given column label.
    %End

    void SetCornerLabelAlignment(
        int horiz,
        int vert
    );
    %Docstring
        SetCornerLabelAlignment(horiz, vert)
        
        Sets the horizontal and vertical alignment of the (top-left) corner
        label text.
    %End

    void SetCornerLabelTextOrientation(
        int textOrientation
    );
    %Docstring
        SetCornerLabelTextOrientation(textOrientation)
        
        Sets the orientation of the (top-left) corner label (either
        wxHORIZONTAL or wxVERTICAL).
    %End

    void SetCornerLabelValue(
        const wxString & 
    );
    %Docstring
        SetCornerLabelValue()
        
        Set the value for the (top-left) corner label.
    %End

    void SetLabelBackgroundColour(
        const wxColour & colour
    );
    %Docstring
        SetLabelBackgroundColour(colour)
        
        Sets the background colour for row and column labels.
    %End

    void SetLabelFont(
        const wxFont & font
    );
    %Docstring
        SetLabelFont(font)
        
        Sets the font for row and column labels.
    %End

    void SetLabelTextColour(
        const wxColour & colour
    );
    %Docstring
        SetLabelTextColour(colour)
        
        Sets the colour for row and column label text.
    %End

    void SetRowLabelAlignment(
        int horiz,
        int vert
    );
    %Docstring
        SetRowLabelAlignment(horiz, vert)
        
        Sets the horizontal and vertical alignment of row label text.
    %End

    void SetRowLabelValue(
        int row,
        const wxString & value
    );
    %Docstring
        SetRowLabelValue(row, value)
        
        Sets the value for the given row label.
    %End

    void SetUseNativeColLabels(
        bool native = true
    );
    %Docstring
        SetUseNativeColLabels(native=True)
        
        Call this in order to make the column labels use a native look by
        using wxRendererNative::DrawHeaderButton() internally.
    %End

    bool UseNativeColHeader(
        bool native = true
    );
    %Docstring
        UseNativeColHeader(native=True) -> bool
        
        Enable the use of native header window for column labels.
    %End

    void GetCellAlignment(
        int row,
        int col,
        int * horiz   /Out/,
        int * vert   /Out/
    ) const;
    %Docstring
        GetCellAlignment(row, col) -> (horiz, vert)
        
        Sets the arguments to the horizontal and vertical text alignment
        values for the grid cell at the specified location.
    %End

    wxColour GetCellBackgroundColour(
        int row,
        int col
    ) const;
    %Docstring
        GetCellBackgroundColour(row, col) -> wx.Colour
        
        Returns the background colour of the cell at the specified location.
    %End

    wxFont GetCellFont(
        int row,
        int col
    ) const;
    %Docstring
        GetCellFont(row, col) -> wx.Font
        
        Returns the font for text in the grid cell at the specified location.
    %End

    wxColour GetCellTextColour(
        int row,
        int col
    ) const;
    %Docstring
        GetCellTextColour(row, col) -> wx.Colour
        
        Returns the text colour for the grid cell at the specified location.
    %End

    void GetDefaultCellAlignment(
        int * horiz   /Out/,
        int * vert   /Out/
    ) const;
    %Docstring
        GetDefaultCellAlignment() -> (horiz, vert)
        
        Returns the default cell alignment.
    %End

    wxColour GetDefaultCellBackgroundColour() const;
    %Docstring
        GetDefaultCellBackgroundColour() -> wx.Colour
        
        Returns the current default background colour for grid cells.
    %End

    wxFont GetDefaultCellFont() const;
    %Docstring
        GetDefaultCellFont() -> wx.Font
        
        Returns the current default font for grid cell text.
    %End

    wxColour GetDefaultCellTextColour() const;
    %Docstring
        GetDefaultCellTextColour() -> wx.Colour
        
        Returns the current default colour for grid cell text.
    %End

    void SetCellAlignment(
        int row,
        int col,
        int horiz,
        int vert
    );
    %Docstring
        SetCellAlignment(row, col, horiz, vert)
        
        Sets the horizontal and vertical alignment for grid cell text at the
        specified location.
    %End

    void SetCellBackgroundColour(
        int row,
        int col,
        const wxColour & colour
    );
    %Docstring
        SetCellBackgroundColour(row, col, colour)
        
        Set the background colour for the given cell or all cells by default.
    %End

    void SetCellFont(
        int row,
        int col,
        const wxFont & font
    );
    %Docstring
        SetCellFont(row, col, font)
        
        Sets the font for text in the grid cell at the specified location.
    %End

    void SetCellTextColour(
        int row,
        int col,
        const wxColour & colour
    );
    %Docstring
        SetCellTextColour(row, col, colour)
        
        Sets the text colour for the given cell.
    %End

    void SetDefaultCellAlignment(
        int horiz,
        int vert
    );
    %Docstring
        SetDefaultCellAlignment(horiz, vert)
        
        Sets the default horizontal and vertical alignment for grid cell text.
    %End

    void SetDefaultCellBackgroundColour(
        const wxColour & colour
    );
    %Docstring
        SetDefaultCellBackgroundColour(colour)
        
        Sets the default background colour for grid cells.
    %End

    void SetDefaultCellFont(
        const wxFont & font
    );
    %Docstring
        SetDefaultCellFont(font)
        
        Sets the default font to be used for grid cell text.
    %End

    void SetDefaultCellTextColour(
        const wxColour & colour
    );
    %Docstring
        SetDefaultCellTextColour(colour)
        
        Sets the current default colour for grid cell text.
    %End

    bool CanEnableCellControl() const;
    %Docstring
        CanEnableCellControl() -> bool
        
        Returns true if the in-place edit control for the current grid cell
        can be used and false otherwise.
    %End

    void DisableCellEditControl();
    %Docstring
        DisableCellEditControl()
        
        Disables in-place editing of grid cells.
    %End

    void EnableCellEditControl(
        bool enable = true
    );
    %Docstring
        EnableCellEditControl(enable=True)
        
        Enables or disables in-place editing of grid cell data.
    %End

    void EnableEditing(
        bool edit
    );
    %Docstring
        EnableEditing(edit)
        
        Makes the grid globally editable or read-only.
    %End

    wxGridCellEditor * GetCellEditor(
        int row,
        int col
    ) const;
    %Docstring
        GetCellEditor(row, col) -> GridCellEditor
        
        Returns a pointer to the editor for the cell at the specified
        location.
    %End

    wxGridCellRenderer * GetCellRenderer(
        int row,
        int col
    ) const;
    %Docstring
        GetCellRenderer(row, col) -> GridCellRenderer
        
        Returns a pointer to the renderer for the grid cell at the specified
        location.
    %End

    wxString GetCellValue(
        int row,
        int col
    ) const;
    %Docstring
        GetCellValue(row, col) -> String
        GetCellValue(coords) -> String
        
        Returns the string contained in the cell at the specified location.
    %End

    wxString GetCellValue(
        const wxGridCellCoords & coords
    ) const;

    wxGridCellEditor * GetDefaultEditor() const;
    %Docstring
        GetDefaultEditor() -> GridCellEditor
        
        Returns a pointer to the current default grid cell editor.
    %End

    wxGridCellEditor * GetDefaultEditorForCell(
        int row,
        int col
    ) const;
    %Docstring
        GetDefaultEditorForCell(row, col) -> GridCellEditor
        GetDefaultEditorForCell(c) -> GridCellEditor
        
        Returns the default editor for the specified cell.
    %End

    wxGridCellEditor * GetDefaultEditorForCell(
        const wxGridCellCoords & c
    ) const;

    wxGridCellEditor * GetDefaultEditorForType(
        const wxString & typeName
    ) const;
    %Docstring
        GetDefaultEditorForType(typeName) -> GridCellEditor
        
        Returns the default editor for the cells containing values of the
        given type.
    %End

    wxGridCellRenderer * GetDefaultRenderer() const;
    %Docstring
        GetDefaultRenderer() -> GridCellRenderer
        
        Returns a pointer to the current default grid cell renderer.
    %End

    wxGridCellRenderer * GetDefaultRendererForCell(
        int row,
        int col
    ) const;
    %Docstring
        GetDefaultRendererForCell(row, col) -> GridCellRenderer
        
        Returns the default renderer for the given cell.
    %End

    wxGridCellRenderer * GetDefaultRendererForType(
        const wxString & typeName
    ) const;
    %Docstring
        GetDefaultRendererForType(typeName) -> GridCellRenderer
        
        Returns the default renderer for the cell containing values of the
        given type.
    %End

    void HideCellEditControl();
    %Docstring
        HideCellEditControl()
        
        Hides the in-place cell edit control.
    %End

    bool IsCellEditControlEnabled() const;
    %Docstring
        IsCellEditControlEnabled() -> bool
        
        Returns true if the in-place edit control is currently enabled.
    %End

    bool IsCellEditControlShown() const;
    %Docstring
        IsCellEditControlShown() -> bool
        
        Returns true if the in-place edit control is currently shown.
    %End

    bool IsCurrentCellReadOnly() const;
    %Docstring
        IsCurrentCellReadOnly() -> bool
        
        Returns true if the current cell is read-only.
    %End

    bool IsEditable() const;
    %Docstring
        IsEditable() -> bool
        
        Returns false if the whole grid has been set as read-only or true
        otherwise.
    %End

    bool IsReadOnly(
        int row,
        int col
    ) const;
    %Docstring
        IsReadOnly(row, col) -> bool
        
        Returns true if the cell at the specified location can't be edited.
    %End

    void RegisterDataType(
        const wxString & typeName,
        wxGridCellRenderer * renderer   /Transfer/,
        wxGridCellEditor * editor   /Transfer/
    );
    %Docstring
        RegisterDataType(typeName, renderer, editor)
        
        Register a new data type.
    %End

    void SaveEditControlValue();
    %Docstring
        SaveEditControlValue()
        
        Sets the value of the current grid cell to the current in-place edit
        control value.
    %End

    void SetCellEditor(
        int row,
        int col,
        wxGridCellEditor * editor   /Transfer/
    );
    %Docstring
        SetCellEditor(row, col, editor)
        
        Sets the editor for the grid cell at the specified location.
    %End

    void SetCellRenderer(
        int row,
        int col,
        wxGridCellRenderer * renderer   /Transfer/
    );
    %Docstring
        SetCellRenderer(row, col, renderer)
        
        Sets the renderer for the grid cell at the specified location.
    %End

    void SetCellValue(
        int row,
        int col,
        const wxString & s
    );
    %Docstring
        SetCellValue(row, col, s)
        SetCellValue(coords, s)
        
        Sets the string value for the cell at the specified location.
    %End

    void SetCellValue(
        const wxGridCellCoords & coords,
        const wxString & s
    );

    void SetColFormatBool(
        int col
    );
    %Docstring
        SetColFormatBool(col)
        
        Sets the specified column to display boolean values.
    %End

    void SetColFormatCustom(
        int col,
        const wxString & typeName
    );
    %Docstring
        SetColFormatCustom(col, typeName)
        
        Sets the specified column to display data in a custom format.
    %End

    void SetColFormatFloat(
        int col,
        int width = -1,
        int precision = -1
    );
    %Docstring
        SetColFormatFloat(col, width=-1, precision=-1)
        
        Sets the specified column to display floating point values with the
        given width and precision.
    %End

    void SetColFormatNumber(
        int col
    );
    %Docstring
        SetColFormatNumber(col)
        
        Sets the specified column to display integer values.
    %End

    void SetColFormatDate(
        int col,
        const wxString & format = wxString()
    );
    %Docstring
        SetColFormatDate(col, format="")
        
        Sets the specified column to display date values.
    %End

    void SetDefaultEditor(
        wxGridCellEditor * editor   /Transfer/
    );
    %Docstring
        SetDefaultEditor(editor)
        
        Sets the default editor for grid cells.
    %End

    void SetDefaultRenderer(
        wxGridCellRenderer * renderer   /Transfer/
    );
    %Docstring
        SetDefaultRenderer(renderer)
        
        Sets the default renderer for grid cells.
    %End

    void SetReadOnly(
        int row,
        int col,
        bool isReadOnly = true
    );
    %Docstring
        SetReadOnly(row, col, isReadOnly=True)
        
        Makes the cell at the specified location read-only or editable.
    %End

    void ShowCellEditControl();
    %Docstring
        ShowCellEditControl()
        
        Displays the active in-place cell edit control for the current cell
        after it was hidden.
    %End

    void AutoSize();
    %Docstring
        AutoSize()
        
        Automatically sets the height and width of all rows and columns to fit
        their contents.
    %End

    void AutoSizeColLabelSize(
        int col
    );
    %Docstring
        AutoSizeColLabelSize(col)
        
        Automatically adjusts width of the column to fit its label.
    %End

    void AutoSizeColumn(
        int col,
        bool setAsMin = true
    );
    %Docstring
        AutoSizeColumn(col, setAsMin=True)
        
        Automatically sizes the column to fit its contents.
    %End

    void AutoSizeColumns(
        bool setAsMin = true
    );
    %Docstring
        AutoSizeColumns(setAsMin=True)
        
        Automatically sizes all columns to fit their contents.
    %End

    void AutoSizeRow(
        int row,
        bool setAsMin = true
    );
    %Docstring
        AutoSizeRow(row, setAsMin=True)
        
        Automatically sizes the row to fit its contents.
    %End

    void AutoSizeRowLabelSize(
        int col
    );
    %Docstring
        AutoSizeRowLabelSize(col)
        
        Automatically adjusts height of the row to fit its label.
    %End

    void AutoSizeRows(
        bool setAsMin = true
    );
    %Docstring
        AutoSizeRows(setAsMin=True)
        
        Automatically sizes all rows to fit their contents.
    %End

    wxGridFitMode GetCellFitMode(
        int row,
        int col
    ) const;
    %Docstring
        GetCellFitMode(row, col) -> GridFitMode
        
        Returns the cell fitting mode.
    %End

    bool GetCellOverflow(
        int row,
        int col
    ) const;
    %Docstring
        GetCellOverflow(row, col) -> bool
        
        Returns true if the cell value can overflow.
    %End

    int GetColLabelSize() const;
    %Docstring
        GetColLabelSize() -> int
        
        Returns the current height of the column labels.
    %End

    int GetColMinimalAcceptableWidth() const;
    %Docstring
        GetColMinimalAcceptableWidth() -> int
        
        Returns the minimal width to which a column may be resized.
    %End

    int GetColSize(
        int col
    ) const;
    %Docstring
        GetColSize(col) -> int
        
        Returns the width of the specified column.
    %End

    bool IsColShown(
        int col
    ) const;
    %Docstring
        IsColShown(col) -> bool
        
        Returns true if the specified column is not currently hidden.
    %End

    wxGridFitMode GetDefaultCellFitMode() const;
    %Docstring
        GetDefaultCellFitMode() -> GridFitMode
        
        Returns the default cell fitting mode.
    %End

    bool GetDefaultCellOverflow() const;
    %Docstring
        GetDefaultCellOverflow() -> bool
        
        Returns true if the cells can overflow by default.
    %End

    int GetDefaultColLabelSize() const;
    %Docstring
        GetDefaultColLabelSize() -> int
        
        Returns the default height for column labels.
    %End

    int GetDefaultColSize() const;
    %Docstring
        GetDefaultColSize() -> int
        
        Returns the current default width for grid columns.
    %End

    int GetDefaultRowLabelSize() const;
    %Docstring
        GetDefaultRowLabelSize() -> int
        
        Returns the default width for the row labels.
    %End

    int GetDefaultRowSize() const;
    %Docstring
        GetDefaultRowSize() -> int
        
        Returns the current default height for grid rows.
    %End

    int GetRowMinimalAcceptableHeight() const;
    %Docstring
        GetRowMinimalAcceptableHeight() -> int
        
        Returns the minimal size to which rows can be resized.
    %End

    int GetRowLabelSize() const;
    %Docstring
        GetRowLabelSize() -> int
        
        Returns the current width of the row labels.
    %End

    int GetRowSize(
        int row
    ) const;
    %Docstring
        GetRowSize(row) -> int
        
        Returns the height of the specified row.
    %End

    bool IsRowShown(
        int row
    ) const;
    %Docstring
        IsRowShown(row) -> bool
        
        Returns true if the specified row is not currently hidden.
    %End

    void SetCellFitMode(
        int row,
        int col,
        wxGridFitMode fitMode
    );
    %Docstring
        SetCellFitMode(row, col, fitMode)
        
        Specifies the behaviour of the cell contents if it doesn't fit into
        the available space.
    %End

    void SetCellOverflow(
        int row,
        int col,
        bool allow
    );
    %Docstring
        SetCellOverflow(row, col, allow)
        
        Sets the overflow permission of the cell.
    %End

    void SetColLabelSize(
        int height
    );
    %Docstring
        SetColLabelSize(height)
        
        Sets the height of the column labels.
    %End

    void SetColMinimalAcceptableWidth(
        int width
    );
    %Docstring
        SetColMinimalAcceptableWidth(width)
        
        Sets the minimal width to which the user can resize columns.
    %End

    void SetColMinimalWidth(
        int col,
        int width
    );
    %Docstring
        SetColMinimalWidth(col, width)
        
        Sets the minimal width for the specified column col.
    %End

    void SetColSize(
        int col,
        int width
    );
    %Docstring
        SetColSize(col, width)
        
        Sets the width of the specified column.
    %End

    void HideCol(
        int col
    );
    %Docstring
        HideCol(col)
        
        Hides the specified column.
    %End

    void ShowCol(
        int col
    );
    %Docstring
        ShowCol(col)
        
        Shows the previously hidden column by resizing it to non-0 size.
    %End

    void SetDefaultCellFitMode(
        wxGridFitMode fitMode
    );
    %Docstring
        SetDefaultCellFitMode(fitMode)
        
        Specifies the default behaviour of the cell contents if it doesn't fit
        into the available space.
    %End

    void SetDefaultCellOverflow(
        bool allow
    );
    %Docstring
        SetDefaultCellOverflow(allow)
        
        Sets the default overflow permission of the cells.
    %End

    void SetDefaultColSize(
        int width,
        bool resizeExistingCols = false
    );
    %Docstring
        SetDefaultColSize(width, resizeExistingCols=False)
        
        Sets the default width for columns in the grid.
    %End

    void SetDefaultRowSize(
        int height,
        bool resizeExistingRows = false
    );
    %Docstring
        SetDefaultRowSize(height, resizeExistingRows=False)
        
        Sets the default height for rows in the grid.
    %End

    void SetRowLabelSize(
        int width
    );
    %Docstring
        SetRowLabelSize(width)
        
        Sets the width of the row labels.
    %End

    void SetRowMinimalAcceptableHeight(
        int height
    );
    %Docstring
        SetRowMinimalAcceptableHeight(height)
        
        Sets the minimal row height used by default.
    %End

    void SetRowMinimalHeight(
        int row,
        int height
    );
    %Docstring
        SetRowMinimalHeight(row, height)
        
        Sets the minimal height for the specified row.
    %End

    void SetRowSize(
        int row,
        int height
    );
    %Docstring
        SetRowSize(row, height)
        
        Sets the height of the specified row.
    %End

    void HideRow(
        int col
    );
    %Docstring
        HideRow(col)
        
        Hides the specified row.
    %End

    void ShowRow(
        int col
    );
    %Docstring
        ShowRow(col)
        
        Shows the previously hidden row.
    %End

    wxGridSizesInfo GetColSizes() const;
    %Docstring
        GetColSizes() -> GridSizesInfo
        
        Get size information for all columns at once.
    %End

    wxGridSizesInfo GetRowSizes() const;
    %Docstring
        GetRowSizes() -> GridSizesInfo
        
        Get size information for all row at once.
    %End

    void SetColSizes(
        const wxGridSizesInfo & sizeInfo
    );
    %Docstring
        SetColSizes(sizeInfo)
        
        Restore all columns sizes.
    %End

    void SetRowSizes(
        const wxGridSizesInfo & sizeInfo
    );
    %Docstring
        SetRowSizes(sizeInfo)
        
        Restore all rows sizes.
    %End

    void SetCellSize(
        int row,
        int col,
        int num_rows,
        int num_cols
    );
    %Docstring
        SetCellSize(row, col, num_rows, num_cols)
        
        Set the size of the cell.
    %End

    CellSpan GetCellSize(
        int row,
        int col,
        int * num_rows,
        int * num_cols
    ) const;
    %Docstring
        GetCellSize(row, col, num_rows, num_cols) -> CellSpan
        GetCellSize(coords) -> wx.Size
        
        Get the size of the cell in number of cells covered by it.
    %End

    wxSize GetCellSize(
        const wxGridCellCoords & coords
    );

    bool CanDragCell() const;
    %Docstring
        CanDragCell() -> bool
        
        Return true if the dragging of cells is enabled or false otherwise.
    %End

    bool CanDragColMove() const;
    %Docstring
        CanDragColMove() -> bool
        
        Returns true if columns can be moved by dragging with the mouse.
    %End

    bool CanDragColSize(
        int col
    ) const;
    %Docstring
        CanDragColSize(col) -> bool
        
        Returns true if the given column can be resized by dragging with the
        mouse.
    %End

    bool CanDragGridColEdges() const;
    %Docstring
        CanDragGridColEdges() -> bool
        
        Return true if column edges inside the grid can be dragged to resize
        the rows.
    %End

    bool CanDragGridRowEdges() const;
    %Docstring
        CanDragGridRowEdges() -> bool
        
        Return true if row edges inside the grid can be dragged to resize the
        rows.
    %End

    bool CanDragGridSize() const;
    %Docstring
        CanDragGridSize() -> bool
        
        Return true if the dragging of grid lines to resize rows and columns
        is enabled or false otherwise.
    %End

    bool CanDragRowSize(
        int row
    ) const;
    %Docstring
        CanDragRowSize(row) -> bool
        
        Returns true if the given row can be resized by dragging with the
        mouse.
    %End

    bool CanHideColumns() const;
    %Docstring
        CanHideColumns() -> bool
        
        Returns true if columns can be hidden from the popup menu of the
        native header.
    %End

    void DisableColResize(
        int col
    );
    %Docstring
        DisableColResize(col)
        
        Disable interactive resizing of the specified column.
    %End

    void DisableRowResize(
        int row
    );
    %Docstring
        DisableRowResize(row)
        
        Disable interactive resizing of the specified row.
    %End

    void DisableDragColMove();
    %Docstring
        DisableDragColMove()
        
        Disables column moving by dragging with the mouse.
    %End

    void DisableDragColSize();
    %Docstring
        DisableDragColSize()
        
        Disables column sizing by dragging with the mouse.
    %End

    void DisableDragGridSize();
    %Docstring
        DisableDragGridSize()
        
        Disable mouse dragging of grid lines to resize rows and columns.
    %End

    void DisableDragRowSize();
    %Docstring
        DisableDragRowSize()
        
        Disables row sizing by dragging with the mouse.
    %End

    void DisableHidingColumns();
    %Docstring
        DisableHidingColumns()
        
        Disables column hiding from the header popup menu.
    %End

    void EnableDragCell(
        bool enable = true
    );
    %Docstring
        EnableDragCell(enable=True)
        
        Enables or disables cell dragging with the mouse.
    %End

    bool EnableDragColMove(
        bool enable = true
    );
    %Docstring
        EnableDragColMove(enable=True) -> bool
        
        Enables or disables column moving by dragging with the mouse.
    %End

    void EnableDragColSize(
        bool enable = true
    );
    %Docstring
        EnableDragColSize(enable=True)
        
        Enables or disables column sizing by dragging with the mouse.
    %End

    void EnableDragGridSize(
        bool enable = true
    );
    %Docstring
        EnableDragGridSize(enable=True)
        
        Enables or disables row and column resizing by dragging gridlines with
        the mouse.
    %End

    void EnableDragRowSize(
        bool enable = true
    );
    %Docstring
        EnableDragRowSize(enable=True)
        
        Enables or disables row sizing by dragging with the mouse.
    %End

    bool EnableHidingColumns(
        bool enable = true
    );
    %Docstring
        EnableHidingColumns(enable=True) -> bool
        
        Enables or disables column hiding from the header popup menu.
    %End

    int GetColAt(
        int colPos
    ) const;
    %Docstring
        GetColAt(colPos) -> int
        
        Returns the column ID of the specified column position.
    %End

    int GetColPos(
        int colID
    ) const;
    %Docstring
        GetColPos(colID) -> int
        
        Returns the position of the specified column.
    %End

    void SetColPos(
        int colID,
        int newPos
    );
    %Docstring
        SetColPos(colID, newPos)
        
        Sets the position of the specified column.
    %End

    void SetColumnsOrder(
        const wxArrayInt & order
    );
    %Docstring
        SetColumnsOrder(order)
        
        Sets the positions of all columns at once.
    %End

    void ResetColPos();
    %Docstring
        ResetColPos()
        
        Resets the position of the columns to the default.
    %End

    const wxGridCellCoords & GetGridCursorCoords() const;
    %Docstring
        GetGridCursorCoords() -> GridCellCoords
        
        Returns the current grid cursor position.
    %End

    int GetGridCursorCol() const;
    %Docstring
        GetGridCursorCol() -> int
        
        Returns the current grid cell column position.
    %End

    int GetGridCursorRow() const;
    %Docstring
        GetGridCursorRow() -> int
        
        Returns the current grid cell row position.
    %End

    void GoToCell(
        int row,
        int col
    );
    %Docstring
        GoToCell(row, col)
        GoToCell(coords)
        
        Make the given cell current and ensure it is visible.
    %End

    void GoToCell(
        const wxGridCellCoords & coords
    );

    bool MoveCursorDown(
        bool expandSelection
    );
    %Docstring
        MoveCursorDown(expandSelection) -> bool
        
        Moves the grid cursor down by one row.
    %End

    bool MoveCursorDownBlock(
        bool expandSelection
    );
    %Docstring
        MoveCursorDownBlock(expandSelection) -> bool
        
        Moves the grid cursor down in the current column such that it skips to
        the beginning or end of a block of non-empty cells.
    %End

    bool MoveCursorLeft(
        bool expandSelection
    );
    %Docstring
        MoveCursorLeft(expandSelection) -> bool
        
        Moves the grid cursor left by one column.
    %End

    bool MoveCursorLeftBlock(
        bool expandSelection
    );
    %Docstring
        MoveCursorLeftBlock(expandSelection) -> bool
        
        Moves the grid cursor left in the current row such that it skips to
        the beginning or end of a block of non-empty cells.
    %End

    bool MoveCursorRight(
        bool expandSelection
    );
    %Docstring
        MoveCursorRight(expandSelection) -> bool
        
        Moves the grid cursor right by one column.
    %End

    bool MoveCursorRightBlock(
        bool expandSelection
    );
    %Docstring
        MoveCursorRightBlock(expandSelection) -> bool
        
        Moves the grid cursor right in the current row such that it skips to
        the beginning or end of a block of non-empty cells.
    %End

    bool MoveCursorUp(
        bool expandSelection
    );
    %Docstring
        MoveCursorUp(expandSelection) -> bool
        
        Moves the grid cursor up by one row.
    %End

    bool MoveCursorUpBlock(
        bool expandSelection
    );
    %Docstring
        MoveCursorUpBlock(expandSelection) -> bool
        
        Moves the grid cursor up in the current column such that it skips to
        the beginning or end of a block of non-empty cells.
    %End

    bool MovePageDown();
    %Docstring
        MovePageDown() -> bool
        
        Moves the grid cursor down by some number of rows so that the previous
        bottom visible row becomes the top visible row.
    %End

    bool MovePageUp();
    %Docstring
        MovePageUp() -> bool
        
        Moves the grid cursor up by some number of rows so that the previous
        top visible row becomes the bottom visible row.
    %End

    void SetGridCursor(
        int row,
        int col
    );
    %Docstring
        SetGridCursor(row, col)
        SetGridCursor(coords)
        
        Set the grid cursor to the specified cell.
    %End

    void SetGridCursor(
        const wxGridCellCoords & coords
    );

    void SetTabBehaviour(
        TabBehaviour behaviour
    );
    %Docstring
        SetTabBehaviour(behaviour)
        
        Set the grid's behaviour when the user presses the TAB key.
    %End

    void ClearSelection();
    %Docstring
        ClearSelection()
        
        Deselects all cells that are currently selected.
    %End

    void DeselectRow(
        int row
    );
    %Docstring
        DeselectRow(row)
        
        Deselects a row of cells.
    %End

    void DeselectCol(
        int col
    );
    %Docstring
        DeselectCol(col)
        
        Deselects a column of cells.
    %End

    void DeselectCell(
        int row,
        int col
    );
    %Docstring
        DeselectCell(row, col)
        
        Deselects a cell.
    %End

    wxGridBlocks GetSelectedBlocks() const;
    %Docstring
        GetSelectedBlocks() -> GridBlocks
        
        Returns a range of grid selection blocks.
    %End

    PyObject* GetSelectedRowBlocks() const;
    %Docstring
        GetSelectedRowBlocks() -> PyObject
        
        Returns an ordered range of non-overlapping selected rows.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGrid_GetSelectedRowBlocks(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGrid_GetSelectedRowBlocks(const wxGrid* self)
    {
        wxPyThreadBlocker blocker;
        PyObject* result = PyList_New(0);
        wxGridBlockCoordsVector vector = self->GetSelectedRowBlocks();
        for (size_t idx=0; idx < vector.size(); idx++) {
            PyObject* obj;
            wxGridBlockCoords* item = new wxGridBlockCoords(vector[idx]);
            obj = wxPyConstructObject((void*)item, "wxGridBlockCoords", true);
            PyList_Append(result, obj);
            Py_DECREF(obj);
        }
        return result;
    }
    %End

    PyObject* GetSelectedColBlocks() const;
    %Docstring
        GetSelectedColBlocks() -> PyObject
        
        Returns an ordered range of non-overlapping selected columns.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGrid_GetSelectedColBlocks(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGrid_GetSelectedColBlocks(const wxGrid* self)
    {
        wxPyThreadBlocker blocker;
        PyObject* result = PyList_New(0);
        wxGridBlockCoordsVector vector = self->GetSelectedColBlocks();
        for (size_t idx=0; idx < vector.size(); idx++) {
            PyObject* obj;
            wxGridBlockCoords* item = new wxGridBlockCoords(vector[idx]);
            obj = wxPyConstructObject((void*)item, "wxGridBlockCoords", true);
            PyList_Append(result, obj);
            Py_DECREF(obj);
        }
        return result;
    }
    %End

    wxGridCellCoordsArray GetSelectedCells() const;
    %Docstring
        GetSelectedCells() -> GridCellCoordsArray
        
        Returns an array of individually selected cells.
    %End

    wxArrayInt GetSelectedCols() const;
    %Docstring
        GetSelectedCols() -> ArrayInt
        
        Returns an array of selected columns.
    %End

    wxArrayInt GetSelectedRows() const;
    %Docstring
        GetSelectedRows() -> ArrayInt
        
        Returns an array of selected rows.
    %End

    wxColour GetSelectionBackground() const;
    %Docstring
        GetSelectionBackground() -> wx.Colour
        
        Returns the colour used for drawing the selection background.
    %End

    wxGridCellCoordsArray GetSelectionBlockBottomRight() const;
    %Docstring
        GetSelectionBlockBottomRight() -> GridCellCoordsArray
        
        Returns an array of the bottom right corners of blocks of selected
        cells.
    %End

    wxGridCellCoordsArray GetSelectionBlockTopLeft() const;
    %Docstring
        GetSelectionBlockTopLeft() -> GridCellCoordsArray
        
        Returns an array of the top left corners of blocks of selected cells.
    %End

    wxColour GetSelectionForeground() const;
    %Docstring
        GetSelectionForeground() -> wx.Colour
        
        Returns the colour used for drawing the selection foreground.
    %End

    wxGridSelectionModes GetSelectionMode() const;
    %Docstring
        GetSelectionMode() -> GridSelectionModes
        
        Returns the current selection mode.
    %End

    bool IsInSelection(
        int row,
        int col
    ) const;
    %Docstring
        IsInSelection(row, col) -> bool
        IsInSelection(coords) -> bool
        
        Returns true if the given cell is selected.
    %End

    bool IsInSelection(
        const wxGridCellCoords & coords
    ) const;

    bool IsSelection() const;
    %Docstring
        IsSelection() -> bool
        
        Returns true if there are currently any selected cells, rows, columns
        or blocks.
    %End

    void SelectAll();
    %Docstring
        SelectAll()
        
        Selects all cells in the grid.
    %End

    void SelectBlock(
        int topRow,
        int leftCol,
        int bottomRow,
        int rightCol,
        bool addToSelected = false
    );
    %Docstring
        SelectBlock(topRow, leftCol, bottomRow, rightCol, addToSelected=False)
        SelectBlock(topLeft, bottomRight, addToSelected=False)
        
        Selects a rectangular block of cells.
    %End

    void SelectBlock(
        const wxGridCellCoords & topLeft,
        const wxGridCellCoords & bottomRight,
        bool addToSelected = false
    );

    void SelectCol(
        int col,
        bool addToSelected = false
    );
    %Docstring
        SelectCol(col, addToSelected=False)
        
        Selects the specified column.
    %End

    void SelectRow(
        int row,
        bool addToSelected = false
    );
    %Docstring
        SelectRow(row, addToSelected=False)
        
        Selects the specified row.
    %End

    void SetSelectionBackground(
        const wxColour & c
    );
    %Docstring
        SetSelectionBackground(c)
        
        Set the colour to be used for drawing the selection background.
    %End

    void SetSelectionForeground(
        const wxColour & c
    );
    %Docstring
        SetSelectionForeground(c)
        
        Set the colour to be used for drawing the selection foreground.
    %End

    void SetSelectionMode(
        wxGridSelectionModes selmode
    );
    %Docstring
        SetSelectionMode(selmode)
        
        Set the selection behaviour of the grid.
    %End

    int GetScrollLineX() const;
    %Docstring
        GetScrollLineX() -> int
        
        Returns the number of pixels per horizontal scroll increment.
    %End

    int GetScrollLineY() const;
    %Docstring
        GetScrollLineY() -> int
        
        Returns the number of pixels per vertical scroll increment.
    %End

    bool IsVisible(
        int row,
        int col,
        bool wholeCellVisible = true
    ) const;
    %Docstring
        IsVisible(row, col, wholeCellVisible=True) -> bool
        IsVisible(coords, wholeCellVisible=True) -> bool
        
        Returns true if a cell is either entirely or at least partially
        visible in the grid window.
    %End

    bool IsVisible(
        const wxGridCellCoords & coords,
        bool wholeCellVisible = true
    ) const;

    void MakeCellVisible(
        int row,
        int col
    );
    %Docstring
        MakeCellVisible(row, col)
        MakeCellVisible(coords)
        
        Brings the specified cell into the visible grid cell area with minimal
        scrolling.
    %End

    void MakeCellVisible(
        const wxGridCellCoords & coords
    );

    int GetFirstFullyVisibleRow() const;
    %Docstring
        GetFirstFullyVisibleRow() -> int
        
        Returns the topmost row of the current visible area.
    %End

    int GetFirstFullyVisibleColumn() const;
    %Docstring
        GetFirstFullyVisibleColumn() -> int
        
        Returns the leftmost column of the current visible area.
    %End

    void SetScrollLineX(
        int x
    );
    %Docstring
        SetScrollLineX(x)
        
        Sets the number of pixels per horizontal scroll increment.
    %End

    void SetScrollLineY(
        int y
    );
    %Docstring
        SetScrollLineY(y)
        
        Sets the number of pixels per vertical scroll increment.
    %End

    wxRect BlockToDeviceRect(
        const wxGridCellCoords & topLeft,
        const wxGridCellCoords & bottomRight,
        const wxGridWindow * gridWindow = NULL
    ) const;
    %Docstring
        BlockToDeviceRect(topLeft, bottomRight, gridWindow=None) -> wx.Rect
        
        Convert grid cell coordinates to grid window pixel coordinates.
    %End

    wxRect CellToRect(
        int row,
        int col
    ) const;
    %Docstring
        CellToRect(row, col) -> wx.Rect
        CellToRect(coords) -> wx.Rect
        
        Return the rectangle corresponding to the grid cell's size and
        position in logical coordinates.
    %End

    wxRect CellToRect(
        const wxGridCellCoords & coords
    ) const;

    wxGridWindow * CellToGridWindow(
        int row,
        int col
    ) const;
    %Docstring
        CellToGridWindow(row, col) -> GridWindow
        CellToGridWindow(coords) -> GridWindow
        
        Returns the grid window that contains the cell.
    %End

    wxGridWindow * CellToGridWindow(
        const wxGridCellCoords & coords
    ) const;

    wxGridWindow * DevicePosToGridWindow(
        wxPoint pos
    ) const;
    %Docstring
        DevicePosToGridWindow(pos) -> GridWindow
        DevicePosToGridWindow(x, y) -> GridWindow
        
        Returns the grid window that includes the input coordinates.
    %End

    wxGridWindow * DevicePosToGridWindow(
        int x,
        int y
    ) const;

    wxPoint GetGridWindowOffset(
        const wxGridWindow * gridWindow
    ) const;
    %Docstring
        GetGridWindowOffset(gridWindow) -> wx.Point
    %End

    void CalcGridWindowUnscrolledPosition(
        int x,
        int y,
        int * xx,
        int * yy,
        const wxGridWindow * gridWindow
    ) const;
    %Docstring
        CalcGridWindowUnscrolledPosition(x, y, xx, yy, gridWindow)
        CalcGridWindowUnscrolledPosition(pt, gridWindow) -> wx.Point
        
        Translates the device coordinates to the logical ones, taking into
        account the grid window type.
    %End

    wxPoint CalcGridWindowUnscrolledPosition(
        const wxPoint & pt,
        const wxGridWindow * gridWindow
    ) const;

    void CalcGridWindowScrolledPosition(
        int x,
        int y,
        int * xx,
        int * yy,
        const wxGridWindow * gridWindow
    ) const;
    %Docstring
        CalcGridWindowScrolledPosition(x, y, xx, yy, gridWindow)
        CalcGridWindowScrolledPosition(pt, gridWindow) -> wx.Point
        
        Translates the logical coordinates to the device ones, taking into
        account the grid window type.
    %End

    wxPoint CalcGridWindowScrolledPosition(
        const wxPoint & pt,
        const wxGridWindow * gridWindow
    ) const;

    int XToCol(
        int x,
        bool clipToMinMax = false,
        wxGridWindow * gridWindow = NULL
    ) const;
    %Docstring
        XToCol(x, clipToMinMax=False, gridWindow=None) -> int
        
        Returns the column at the given pixel position depending on the
        window.
    %End

    int XToEdgeOfCol(
        int x
    ) const;
    %Docstring
        XToEdgeOfCol(x) -> int
        
        Returns the column whose right hand edge is close to the given logical
        x position.
    %End

    wxGridCellCoords XYToCell(
        int x,
        int y,
        wxGridWindow * gridWindow = NULL
    ) const;
    %Docstring
        XYToCell(x, y, gridWindow=None) -> GridCellCoords
        XYToCell(pos, gridWindow=None) -> GridCellCoords
        
        Translates logical pixel coordinates to the grid cell coordinates.
    %End

    wxGridCellCoords XYToCell(
        const wxPoint & pos,
        wxGridWindow * gridWindow = NULL
    ) const;

    int YToEdgeOfRow(
        int y
    ) const;
    %Docstring
        YToEdgeOfRow(y) -> int
        
        Returns the row whose bottom edge is close to the given logical y
        position.
    %End

    int YToRow(
        int y,
        bool clipToMinMax = false,
        wxGridWindow * gridWindow = NULL
    ) const;
    %Docstring
        YToRow(y, clipToMinMax=False, gridWindow=None) -> int
        
        Returns the grid row that corresponds to the logical y coordinate.
    %End

    bool AppendCols(
        int numCols = 1,
        bool updateLabels = true
    );
    %Docstring
        AppendCols(numCols=1, updateLabels=True) -> bool
        
        Appends one or more new columns to the right of the grid.
    %End

    bool AppendRows(
        int numRows = 1,
        bool updateLabels = true
    );
    %Docstring
        AppendRows(numRows=1, updateLabels=True) -> bool
        
        Appends one or more new rows to the bottom of the grid.
    %End

    bool AreHorzGridLinesClipped() const;
    %Docstring
        AreHorzGridLinesClipped() -> bool
        
        Return true if the horizontal grid lines stop at the last column
        boundary or false if they continue to the end of the window.
    %End

    bool AreVertGridLinesClipped() const;
    %Docstring
        AreVertGridLinesClipped() -> bool
        
        Return true if the vertical grid lines stop at the last row boundary
        or false if they continue to the end of the window.
    %End

    void BeginBatch();
    %Docstring
        BeginBatch()
        
        Increments the grid's batch count.
    %End

    void ClearGrid();
    %Docstring
        ClearGrid()
        
        Clears all data in the underlying grid table and repaints the grid.
    %End

    void ClipHorzGridLines(
        bool clip
    );
    %Docstring
        ClipHorzGridLines(clip)
        
        Change whether the horizontal grid lines are clipped by the end of the
        last column.
    %End

    void ClipVertGridLines(
        bool clip
    );
    %Docstring
        ClipVertGridLines(clip)
        
        Change whether the vertical grid lines are clipped by the end of the
        last row.
    %End

    bool DeleteCols(
        int pos = 0,
        int numCols = 1,
        bool updateLabels = true
    );
    %Docstring
        DeleteCols(pos=0, numCols=1, updateLabels=True) -> bool
        
        Deletes one or more columns from a grid starting at the specified
        position.
    %End

    bool DeleteRows(
        int pos = 0,
        int numRows = 1,
        bool updateLabels = true
    );
    %Docstring
        DeleteRows(pos=0, numRows=1, updateLabels=True) -> bool
        
        Deletes one or more rows from a grid starting at the specified
        position.
    %End

    bool FreezeTo(
        unsigned row,
        unsigned col
    );
    %Docstring
        FreezeTo(row, col) -> bool
        FreezeTo(coords) -> bool
        
        Sets or resets the frozen columns and rows.
    %End

    bool FreezeTo(
        const wxGridCellCoords & coords
    );

    void EndBatch();
    %Docstring
        EndBatch()
        
        Decrements the grid's batch count.
    %End

    void Fit();
    %Docstring
        Fit()
        
        Overridden wxWindow method.
    %End

    void ForceRefresh();
    %Docstring
        ForceRefresh()
        
        Causes immediate repainting of the grid.
    %End

    int GetBatchCount() const;
    %Docstring
        GetBatchCount() -> int
        
        Returns the number of times that BeginBatch() has been called without
        (yet) matching calls to EndBatch().
    %End

    int GetNumberCols() const;
    %Docstring
        GetNumberCols() -> int
        
        Returns the total number of grid columns.
    %End

    int GetNumberRows() const;
    %Docstring
        GetNumberRows() -> int
        
        Returns the total number of grid rows.
    %End

    int GetNumberFrozenCols() const;
    %Docstring
        GetNumberFrozenCols() -> int
        
        Returns the number of frozen grid columns.
    %End

    int GetNumberFrozenRows() const;
    %Docstring
        GetNumberFrozenRows() -> int
        
        Returns the number of frozen grid rows.
    %End

    wxGridCellAttr * GetOrCreateCellAttr(
        int row,
        int col
    ) const;
    %Docstring
        GetOrCreateCellAttr(row, col) -> GridCellAttr
        
        Returns the attribute for the given cell creating one if necessary.
    %End

    wxGridCellAttrPtr GetOrCreateCellAttrPtr(
        int row,
        int col
    ) const;
    %Docstring
        GetOrCreateCellAttrPtr(row, col) -> GridCellAttrPtr
        
        Returns the attribute for the given cell creating one if necessary.
    %End

    wxGridTableBase * GetTable() const;
    %Docstring
        GetTable() -> GridTableBase
        
        Returns a base pointer to the current table object.
    %End

    bool InsertCols(
        int pos = 0,
        int numCols = 1,
        bool updateLabels = true
    );
    %Docstring
        InsertCols(pos=0, numCols=1, updateLabels=True) -> bool
        
        Inserts one or more new columns into a grid with the first new column
        at the specified position.
    %End

    bool InsertRows(
        int pos = 0,
        int numRows = 1,
        bool updateLabels = true
    );
    %Docstring
        InsertRows(pos=0, numRows=1, updateLabels=True) -> bool
        
        Inserts one or more new rows into a grid with the first new row at the
        specified position.
    %End

    void RefreshAttr(
        int row,
        int col
    );
    %Docstring
        RefreshAttr(row, col)
        
        Invalidates the cached attribute for the given cell.
    %End

    void Render(
        wxDC & dc,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        const wxGridCellCoords & topLeft = wxGridCellCoords(-1,-1),
        const wxGridCellCoords & bottomRight = wxGridCellCoords(-1,-1),
        int style = wxGRID_DRAW_DEFAULT
    );
    %Docstring
        Render(dc, pos=wx.DefaultPosition, size=wx.DefaultSize, topLeft=GridCellCoords(-1,-1), bottomRight=GridCellCoords(-1,-1), style=GRID_DRAW_DEFAULT)
        
        Draws part or all of a wxGrid on a wxDC for printing or display.
    %End

    void SetAttr(
        int row,
        int col,
        wxGridCellAttr * attr
    );
    %Docstring
        SetAttr(row, col, attr)
        
        Sets the cell attributes for the specified cell.
    %End

    void SetColAttr(
        int col,
        wxGridCellAttr * attr   /Transfer/
    );
    %Docstring
        SetColAttr(col, attr)
        
        Sets the cell attributes for all cells in the specified column.
    %End

    void SetMargins(
        int extraWidth,
        int extraHeight
    );
    %Docstring
        SetMargins(extraWidth, extraHeight)
        
        Sets the extra margins used around the grid area.
    %End

    void SetRowAttr(
        int row,
        wxGridCellAttr * attr   /Transfer/
    );
    %Docstring
        SetRowAttr(row, attr)
        
        Sets the cell attributes for all cells in the specified row.
    %End

    wxArrayInt CalcRowLabelsExposed(
        const wxRegion & reg,
        wxGridWindow * gridWindow = NULL
    ) const;
    %Docstring
        CalcRowLabelsExposed(reg, gridWindow=None) -> ArrayInt
        
        Appends one or more new columns to the right of the grid.
    %End

    wxArrayInt CalcColLabelsExposed(
        const wxRegion & reg,
        wxGridWindow * gridWindow = NULL
    ) const;
    %Docstring
        CalcColLabelsExposed(reg, gridWindow=None) -> ArrayInt
        
        Appends one or more new columns to the right of the grid.
    %End

    wxGridCellCoordsArray CalcCellsExposed(
        const wxRegion & reg,
        wxGridWindow * gridWindow = NULL
    ) const;
    %Docstring
        CalcCellsExposed(reg, gridWindow=None) -> GridCellCoordsArray
        
        Appends one or more new columns to the right of the grid.
    %End

    int GetSortingColumn() const;
    %Docstring
        GetSortingColumn() -> int
        
        Return the column in which the sorting indicator is currently
        displayed.
    %End

    bool IsSortingBy(
        int col
    ) const;
    %Docstring
        IsSortingBy(col) -> bool
        
        Return true if this column is currently used for sorting.
    %End

    bool IsSortOrderAscending() const;
    %Docstring
        IsSortOrderAscending() -> bool
        
        Return true if the current sorting order is ascending or false if it
        is descending.
    %End

    void SetSortingColumn(
        int col,
        bool ascending = true
    );
    %Docstring
        SetSortingColumn(col, ascending=True)
        
        Set the column to display the sorting indicator in and its direction.
    %End

    void UnsetSortingColumn();
    %Docstring
        UnsetSortingColumn()
        
        Remove any currently shown sorting indicator.
    %End

    wxWindow * GetGridWindow() const;
    %Docstring
        GetGridWindow() -> wx.Window
        
        Return the main grid window containing the grid cells.
    %End

    wxWindow * GetFrozenCornerGridWindow() const;
    %Docstring
        GetFrozenCornerGridWindow() -> wx.Window
        
        Return the corner grid window containing frozen cells.
    %End

    wxWindow * GetFrozenRowGridWindow() const;
    %Docstring
        GetFrozenRowGridWindow() -> wx.Window
        
        Return the rows grid window containing row frozen cells.
    %End

    wxWindow * GetFrozenColGridWindow() const;
    %Docstring
        GetFrozenColGridWindow() -> wx.Window
        
        Return the columns grid window containing column frozen cells.
    %End

    wxWindow * GetGridRowLabelWindow() const;
    %Docstring
        GetGridRowLabelWindow() -> wx.Window
        
        Return the row labels window.
    %End

    wxWindow * GetGridColLabelWindow() const;
    %Docstring
        GetGridColLabelWindow() -> wx.Window
        
        Return the column labels window.
    %End

    wxWindow * GetGridCornerLabelWindow() const;
    %Docstring
        GetGridCornerLabelWindow() -> wx.Window
        
        Return the window in the top left grid corner.
    %End

    wxHeaderCtrl * GetGridColHeader() const;
    %Docstring
        GetGridColHeader() -> wx.HeaderCtrl
        
        Return the header control used for column labels display.
    %End

    bool IsUsingNativeHeader() const;
    %Docstring
        IsUsingNativeHeader() -> bool
        
        Return true if native header control is currently being used.
    %End

    void DrawCellHighlight(
        wxDC & dc,
        const wxGridCellAttr * attr
    );
    %Docstring
        DrawCellHighlight(dc, attr)
    %End

    void DrawRowLabels(
        wxDC & dc,
        const wxArrayInt & rows
    );
    %Docstring
        DrawRowLabels(dc, rows)
    %End

    void DrawRowLabel(
        wxDC & dc,
        int row
    );
    %Docstring
        DrawRowLabel(dc, row)
    %End

    void DrawColLabels(
        wxDC & dc,
        const wxArrayInt & cols
    );
    %Docstring
        DrawColLabels(dc, cols)
    %End

    void DrawColLabel(
        wxDC & dc,
        int col
    );
    %Docstring
        DrawColLabel(dc, col)
    %End

    void DrawCornerLabel(
        wxDC & dc
    );
    %Docstring
        DrawCornerLabel(dc)
    %End

    void DrawTextRectangle(
        wxDC & dc,
        const wxString & text,
        const wxRect & rect,
        int horizontalAlignment = wxALIGN_LEFT,
        int verticalAlignment = wxALIGN_TOP,
        int textOrientation = wxHORIZONTAL
    ) const;
    %Docstring
        DrawTextRectangle(dc, text, rect, horizontalAlignment=wx.ALIGN_LEFT, verticalAlignment=wx.ALIGN_TOP, textOrientation=wx.HORIZONTAL)
        DrawTextRectangle(dc, lines, rect, horizontalAlignment=wx.ALIGN_LEFT, verticalAlignment=wx.ALIGN_TOP, textOrientation=wx.HORIZONTAL)
    %End

    void DrawTextRectangle(
        wxDC & dc,
        const wxArrayString & lines,
        const wxRect & rect,
        int horizontalAlignment = wxALIGN_LEFT,
        int verticalAlignment = wxALIGN_TOP,
        int textOrientation = wxHORIZONTAL
    ) const;

    wxColour GetCellHighlightColour() const;
    %Docstring
        GetCellHighlightColour() -> wx.Colour
    %End

    int GetCellHighlightPenWidth() const;
    %Docstring
        GetCellHighlightPenWidth() -> int
    %End

    int GetCellHighlightROPenWidth() const;
    %Docstring
        GetCellHighlightROPenWidth() -> int
    %End

    void SetCellHighlightColour(
        const wxColour & 
    );
    %Docstring
        SetCellHighlightColour()
    %End

    void SetCellHighlightPenWidth(
        int width
    );
    %Docstring
        SetCellHighlightPenWidth(width)
    %End

    void SetCellHighlightROPenWidth(
        int width
    );
    %Docstring
        SetCellHighlightROPenWidth(width)
    %End

    void SetGridFrozenBorderColour(
        const wxColour & 
    );
    %Docstring
        SetGridFrozenBorderColour()
    %End

    void SetGridFrozenBorderPenWidth(
        int width
    );
    %Docstring
        SetGridFrozenBorderPenWidth(width)
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=BatchCount, get=GetBatchCount)
    %Property(name=CellHighlightColour, get=GetCellHighlightColour, set=SetCellHighlightColour)
    %Property(name=CellHighlightPenWidth, get=GetCellHighlightPenWidth, set=SetCellHighlightPenWidth)
    %Property(name=CellHighlightROPenWidth, get=GetCellHighlightROPenWidth, set=SetCellHighlightROPenWidth)
    %Property(name=ColLabelSize, get=GetColLabelSize, set=SetColLabelSize)
    %Property(name=ColLabelTextOrientation, get=GetColLabelTextOrientation, set=SetColLabelTextOrientation)
    %Property(name=ColMinimalAcceptableWidth, get=GetColMinimalAcceptableWidth, set=SetColMinimalAcceptableWidth)
    %Property(name=ColSizes, get=GetColSizes, set=SetColSizes)
    %Property(name=CornerLabelTextOrientation, get=GetCornerLabelTextOrientation, set=SetCornerLabelTextOrientation)
    %Property(name=CornerLabelValue, get=GetCornerLabelValue, set=SetCornerLabelValue)
    %Property(name=DefaultCellBackgroundColour, get=GetDefaultCellBackgroundColour, set=SetDefaultCellBackgroundColour)
    %Property(name=DefaultCellFitMode, get=GetDefaultCellFitMode, set=SetDefaultCellFitMode)
    %Property(name=DefaultCellFont, get=GetDefaultCellFont, set=SetDefaultCellFont)
    %Property(name=DefaultCellOverflow, get=GetDefaultCellOverflow, set=SetDefaultCellOverflow)
    %Property(name=DefaultCellTextColour, get=GetDefaultCellTextColour, set=SetDefaultCellTextColour)
    %Property(name=DefaultColLabelSize, get=GetDefaultColLabelSize)
    %Property(name=DefaultColSize, get=GetDefaultColSize, set=SetDefaultColSize)
    %Property(name=DefaultEditor, get=GetDefaultEditor, set=SetDefaultEditor)
    %Property(name=DefaultGridLinePen, get=GetDefaultGridLinePen)
    %Property(name=DefaultRenderer, get=GetDefaultRenderer, set=SetDefaultRenderer)
    %Property(name=DefaultRowLabelSize, get=GetDefaultRowLabelSize)
    %Property(name=DefaultRowSize, get=GetDefaultRowSize, set=SetDefaultRowSize)
    %Property(name=FirstFullyVisibleColumn, get=GetFirstFullyVisibleColumn)
    %Property(name=FirstFullyVisibleRow, get=GetFirstFullyVisibleRow)
    %Property(name=FrozenColGridWindow, get=GetFrozenColGridWindow)
    %Property(name=FrozenCornerGridWindow, get=GetFrozenCornerGridWindow)
    %Property(name=FrozenRowGridWindow, get=GetFrozenRowGridWindow)
    %Property(name=GridColHeader, get=GetGridColHeader)
    %Property(name=GridColLabelWindow, get=GetGridColLabelWindow)
    %Property(name=GridCornerLabelWindow, get=GetGridCornerLabelWindow)
    %Property(name=GridCursorCol, get=GetGridCursorCol)
    %Property(name=GridCursorCoords, get=GetGridCursorCoords)
    %Property(name=GridCursorRow, get=GetGridCursorRow)
    %Property(name=GridLineColour, get=GetGridLineColour, set=SetGridLineColour)
    %Property(name=GridRowLabelWindow, get=GetGridRowLabelWindow)
    %Property(name=GridWindow, get=GetGridWindow)
    %Property(name=LabelBackgroundColour, get=GetLabelBackgroundColour, set=SetLabelBackgroundColour)
    %Property(name=LabelFont, get=GetLabelFont, set=SetLabelFont)
    %Property(name=LabelTextColour, get=GetLabelTextColour, set=SetLabelTextColour)
    %Property(name=NumberCols, get=GetNumberCols)
    %Property(name=NumberFrozenCols, get=GetNumberFrozenCols)
    %Property(name=NumberFrozenRows, get=GetNumberFrozenRows)
    %Property(name=NumberRows, get=GetNumberRows)
    %Property(name=RowLabelSize, get=GetRowLabelSize, set=SetRowLabelSize)
    %Property(name=RowMinimalAcceptableHeight, get=GetRowMinimalAcceptableHeight, set=SetRowMinimalAcceptableHeight)
    %Property(name=RowSizes, get=GetRowSizes, set=SetRowSizes)
    %Property(name=ScrollLineX, get=GetScrollLineX, set=SetScrollLineX)
    %Property(name=ScrollLineY, get=GetScrollLineY, set=SetScrollLineY)
    %Property(name=SelectedBlocks, get=GetSelectedBlocks)
    %Property(name=SelectedCells, get=GetSelectedCells)
    %Property(name=SelectedColBlocks, get=GetSelectedColBlocks)
    %Property(name=SelectedCols, get=GetSelectedCols)
    %Property(name=SelectedRowBlocks, get=GetSelectedRowBlocks)
    %Property(name=SelectedRows, get=GetSelectedRows)
    %Property(name=SelectionBackground, get=GetSelectionBackground, set=SetSelectionBackground)
    %Property(name=SelectionBlockBottomRight, get=GetSelectionBlockBottomRight)
    %Property(name=SelectionBlockTopLeft, get=GetSelectionBlockTopLeft)
    %Property(name=SelectionForeground, get=GetSelectionForeground, set=SetSelectionForeground)
    %Property(name=SelectionMode, get=GetSelectionMode, set=SetSelectionMode)
    %Property(name=SortingColumn, get=GetSortingColumn, set=SetSortingColumn)

protected:
    bool CanHaveAttributes() const;
    %Docstring
        CanHaveAttributes() -> bool
        
        Returns true if this grid has support for cell attributes.
    %End

    int GetColMinimalWidth(
        int col
    ) const;
    %Docstring
        GetColMinimalWidth(col) -> int
        
        Get the minimal width of the given column/row.
    %End

    int GetColRight(
        int col
    ) const;
    %Docstring
        GetColRight(col) -> int
        
        Returns the coordinate of the right border specified column.
    %End

    int GetColLeft(
        int col
    ) const;
    %Docstring
        GetColLeft(col) -> int
        
        Returns the coordinate of the left border specified column.
    %End

    int GetRowMinimalHeight(
        int col
    ) const;
    %Docstring
        GetRowMinimalHeight(col) -> int
        
        Returns the minimal size for the given column.
    %End


private:
            wxSize GetSizeAvailableForScrollTarget(const wxSize& size);


};  // end of class wxGrid


%Extract(id=pycode_grid)
def _Grid_SetTable(self, table, takeOwnership=False, selmode=Grid.GridSelectCells):
    """
    Set the Grid Table to be used by this grid.
    """
    val = self._SetTable(table, takeOwnership, selmode)
    if takeOwnership:
        import wx.siplib
        wx.siplib.transferto(table, self)
    return val
Grid.SetTable = _Grid_SetTable
del _Grid_SetTable
%End

%Extract(id=pycode_grid)
Grid.SelectCells = Grid.GridSelectCells
Grid.SelectRows = Grid.GridSelectRows
Grid.SelectColumns = Grid.GridSelectColumns
Grid.SelectRowsOrColumns = Grid.GridSelectRowsOrColumns

%End

%Extract(id=pycode_grid)
Grid.Table = property(Grid.GetTable, Grid.SetTable)
%End

class wxGridUpdateLocker
{
    %Docstring
        GridUpdateLocker(grid=None)
        
        This small class can be used to prevent wxGrid from redrawing during
        its lifetime by calling wxGrid::BeginBatch() in its constructor and
        wxGrid::EndBatch() in its destructor.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridUpdateLocker(
        wxGrid * grid = NULL
    );

    ~wxGridUpdateLocker();

    void Create(
        wxGrid * grid
    );
    %Docstring
        Create(grid)
        
        This method can be called if the object had been constructed using the
        default constructor.
    %End

    private:
        wxGridUpdateLocker(const wxGridUpdateLocker&);


};  // end of class wxGridUpdateLocker


%Extract(id=pycode_grid)
def _GridUpdateLocker___enter__(self):
    return self
GridUpdateLocker.__enter__ = _GridUpdateLocker___enter__
del _GridUpdateLocker___enter__
%End

%Extract(id=pycode_grid)
def _GridUpdateLocker___exit__(self, exc_type, exc_val, exc_tb):
    return False
GridUpdateLocker.__exit__ = _GridUpdateLocker___exit__
del _GridUpdateLocker___exit__
%End

class wxGridEvent : wxNotifyEvent
{
    %Docstring
        GridEvent()
        GridEvent(id, type, obj, row=-1, col=-1, x=-1, y=-1, sel=True, kbd=wx.KeyboardState())
        
        This event class contains information about various grid events.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridEvent();

    wxGridEvent(
        int id,
        wxEventType type,
        wxObject * obj,
        int row = -1,
        int col = -1,
        int x = -1,
        int y = -1,
        bool sel = true,
        const wxKeyboardState & kbd = wxKeyboardState()
    );

    bool AltDown() const;
    %Docstring
        AltDown() -> bool
        
        Returns true if the Alt key was down at the time of the event.
    %End

    bool ControlDown() const;
    %Docstring
        ControlDown() -> bool
        
        Returns true if the Control key was down at the time of the event.
    %End

    virtual
    int GetCol();
    %Docstring
        GetCol() -> int
        
        Column at which the event occurred.
    %End

    wxPoint GetPosition();
    %Docstring
        GetPosition() -> wx.Point
        
        Position in pixels at which the event occurred.
    %End

    virtual
    int GetRow();
    %Docstring
        GetRow() -> int
        
        Row at which the event occurred.
    %End

    bool MetaDown() const;
    %Docstring
        MetaDown() -> bool
        
        Returns true if the Meta key was down at the time of the event.
    %End

    bool Selecting();
    %Docstring
        Selecting() -> bool
        
        Returns true if the user is selecting grid cells, or false if
        deselecting.
    %End

    bool ShiftDown() const;
    %Docstring
        ShiftDown() -> bool
        
        Returns true if the Shift key was down at the time of the event.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxGridEvent& operator=(const wxGridEvent&);


    public:


    %Property(name=Col, get=GetCol)
    %Property(name=Position, get=GetPosition)
    %Property(name=Row, get=GetRow)
};  // end of class wxGridEvent


class wxGridSizeEvent : wxNotifyEvent
{
    %Docstring
        GridSizeEvent()
        GridSizeEvent(id, type, obj, rowOrCol=-1, x=-1, y=-1, kbd=wx.KeyboardState())
        
        This event class contains information about a row/column resize event.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridSizeEvent();

    wxGridSizeEvent(
        int id,
        wxEventType type,
        wxObject * obj,
        int rowOrCol = -1,
        int x = -1,
        int y = -1,
        const wxKeyboardState & kbd = wxKeyboardState()
    );

    bool AltDown() const;
    %Docstring
        AltDown() -> bool
        
        Returns true if the Alt key was down at the time of the event.
    %End

    bool ControlDown() const;
    %Docstring
        ControlDown() -> bool
        
        Returns true if the Control key was down at the time of the event.
    %End

    wxPoint GetPosition();
    %Docstring
        GetPosition() -> wx.Point
        
        Position in pixels at which the event occurred.
    %End

    int GetRowOrCol();
    %Docstring
        GetRowOrCol() -> int
        
        Row or column at that was resized.
    %End

    bool MetaDown() const;
    %Docstring
        MetaDown() -> bool
        
        Returns true if the Meta key was down at the time of the event.
    %End

    bool ShiftDown() const;
    %Docstring
        ShiftDown() -> bool
        
        Returns true if the Shift key was down at the time of the event.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxGridSizeEvent& operator=(const wxGridSizeEvent&);


    public:


    %Property(name=Position, get=GetPosition)
    %Property(name=RowOrCol, get=GetRowOrCol)
};  // end of class wxGridSizeEvent


class wxGridRangeSelectEvent : wxNotifyEvent
{
    %Docstring
        GridRangeSelectEvent()
        GridRangeSelectEvent(id, type, obj, topLeft, bottomRight, sel=True, kbd=wx.KeyboardState())
        
        Events of this class notify about a range of cells being selected.
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridRangeSelectEvent();

    wxGridRangeSelectEvent(
        int id,
        wxEventType type,
        wxObject * obj,
        const wxGridCellCoords & topLeft,
        const wxGridCellCoords & bottomRight,
        bool sel = true,
        const wxKeyboardState & kbd = wxKeyboardState()
    );

    bool AltDown() const;
    %Docstring
        AltDown() -> bool
        
        Returns true if the Alt key was down at the time of the event.
    %End

    bool ControlDown() const;
    %Docstring
        ControlDown() -> bool
        
        Returns true if the Control key was down at the time of the event.
    %End

    wxGridCellCoords GetBottomRightCoords();
    %Docstring
        GetBottomRightCoords() -> GridCellCoords
        
        Top left corner of the rectangular area that was (de)selected.
    %End

    int GetBottomRow();
    %Docstring
        GetBottomRow() -> int
        
        Bottom row of the rectangular area that was (de)selected.
    %End

    int GetLeftCol();
    %Docstring
        GetLeftCol() -> int
        
        Left column of the rectangular area that was (de)selected.
    %End

    int GetRightCol();
    %Docstring
        GetRightCol() -> int
        
        Right column of the rectangular area that was (de)selected.
    %End

    wxGridCellCoords GetTopLeftCoords();
    %Docstring
        GetTopLeftCoords() -> GridCellCoords
        
        Top left corner of the rectangular area that was (de)selected.
    %End

    int GetTopRow();
    %Docstring
        GetTopRow() -> int
        
        Top row of the rectangular area that was (de)selected.
    %End

    bool MetaDown() const;
    %Docstring
        MetaDown() -> bool
        
        Returns true if the Meta key was down at the time of the event.
    %End

    bool Selecting();
    %Docstring
        Selecting() -> bool
        
        Returns true if the area was selected, false otherwise.
    %End

    bool ShiftDown() const;
    %Docstring
        ShiftDown() -> bool
        
        Returns true if the Shift key was down at the time of the event.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxGridRangeSelectEvent& operator=(const wxGridRangeSelectEvent&);


    public:


    %Property(name=BottomRightCoords, get=GetBottomRightCoords)
    %Property(name=BottomRow, get=GetBottomRow)
    %Property(name=LeftCol, get=GetLeftCol)
    %Property(name=RightCol, get=GetRightCol)
    %Property(name=TopLeftCoords, get=GetTopLeftCoords)
    %Property(name=TopRow, get=GetTopRow)
};  // end of class wxGridRangeSelectEvent


class wxGridEditorCreatedEvent : wxCommandEvent
{
    %Docstring
        GridEditorCreatedEvent()
        GridEditorCreatedEvent(id, type, obj, row, col, ctrl)
    %End
    %TypeHeaderCode
        #include <wx/grid.h>
    %End

public:
    wxGridEditorCreatedEvent();

    wxGridEditorCreatedEvent(
        int id,
        wxEventType type,
        wxObject * obj,
        int row,
        int col,
        wxControl * ctrl
    );

    int GetCol();
    %Docstring
        GetCol() -> int
        
        Returns the column at which the event occurred.
    %End

    wxControl * GetControl();
    %Docstring
        GetControl() -> wx.Control
        
        Returns the edit control.
    %End

    int GetRow();
    %Docstring
        GetRow() -> int
        
        Returns the row at which the event occurred.
    %End

    wxWindow * GetWindow();
    %Docstring
        GetWindow() -> wx.Window
        
        Returns the edit window.
    %End

    void SetCol(
        int col
    );
    %Docstring
        SetCol(col)
        
        Sets the column at which the event occurred.
    %End

    void SetControl(
        wxControl * ctrl
    );
    %Docstring
        SetControl(ctrl)
        
        Sets the edit control.
    %End

    void SetRow(
        int row
    );
    %Docstring
        SetRow(row)
        
        Sets the row at which the event occurred.
    %End

    void SetWindow(
        wxWindow * window
    );
    %Docstring
        SetWindow(window)
        
        Sets the edit window.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxGridEditorCreatedEvent& operator=(const wxGridEditorCreatedEvent&);


    public:


    %Property(name=Col, get=GetCol, set=SetCol)
    %Property(name=Control, get=GetControl, set=SetControl)
    %Property(name=Row, get=GetRow, set=SetRow)
    %Property(name=Window, get=GetWindow, set=SetWindow)
};  // end of class wxGridEditorCreatedEvent


typedef wxObjectDataPtr< wxGridCellRenderer > wxGridCellRendererPtr;

typedef wxObjectDataPtr< wxGridCellEditor > wxGridCellEditorPtr;

typedef wxObjectDataPtr< wxGridCellAttr > wxGridCellAttrPtr;

%Extract(id=pycode_grid)
GRID_VALUE_STRING =    "string"
GRID_VALUE_BOOL =      "bool"
GRID_VALUE_NUMBER =    "long"
GRID_VALUE_FLOAT =     "double"
GRID_VALUE_CHOICE =    "choice"
GRID_VALUE_DATE =      "date"
GRID_VALUE_TEXT =      "string"
GRID_VALUE_LONG =      "long"
GRID_VALUE_CHOICEINT = "choiceint"
GRID_VALUE_DATETIME =  "datetime"

%End

%Extract(id=pycode_grid)
GRIDTABLE_REQUEST_VIEW_GET_VALUES = 2000
GRIDTABLE_REQUEST_VIEW_SEND_VALUES = 2001

%End

%Extract(id=pycode_grid)
from collections import namedtuple
_im_GridCellCoords = namedtuple('_im_GridCellCoords', ['Row', 'Col'])
del namedtuple

%End

class wxGridCellCoordsArray
{
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->GetCount();
    %End

            wxGridCellCoords* __getitem__(long index) /Factory/;
        %MethodCode
            if (0 > index)
                index += sipCpp->GetCount();
            if ((index < sipCpp->GetCount()) && (0 <= index)) {
                sipRes = new wxGridCellCoords(sipCpp->Item(index));
            }
            else {
                wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
                sipError = sipErrorFail;
            }
        %End
        

    int __contains__(wxGridCellCoords& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        sipRes = idx != wxNOT_FOUND;
    %End

    void append(wxGridCellCoords& obj);
    %MethodCode
        sipCpp->Add(*obj);
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxGridCellCoords& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
            }
        sipRes = idx;
    %End
};

%Extract(id=pycode_grid)
def _GridCellCoordsArray___repr__(self):
    return "GridCellCoordsArray: " + repr(list(self))
GridCellCoordsArray.__repr__ = _GridCellCoordsArray___repr__
del _GridCellCoordsArray___repr__
%End


%Extract(id=pycode_grid)
PyGridCellRenderer = wx.deprecated(GridCellRenderer, 'Use GridCellRenderer instead.')

%End

%Extract(id=pycode_grid)
PyGridCellEditor = wx.deprecated(GridCellEditor, 'Use GridCellEditor instead.')

%End

%Extract(id=pycode_grid)
PyGridCellAttrProvider = wx.deprecated(GridCellAttrProvider, 'Use GridCellAttrProvider instead.')

%End

%Extract(id=pycode_grid)
PyGridTableBase = wx.deprecated(GridTableBase, 'Use GridTableBase instead.')

%End

%Extract(id=pycode_grid)
EVT_GRID_CELL_LEFT_CLICK = wx.PyEventBinder( wxEVT_GRID_CELL_LEFT_CLICK )
EVT_GRID_CELL_RIGHT_CLICK = wx.PyEventBinder( wxEVT_GRID_CELL_RIGHT_CLICK )
EVT_GRID_CELL_LEFT_DCLICK = wx.PyEventBinder( wxEVT_GRID_CELL_LEFT_DCLICK )
EVT_GRID_CELL_RIGHT_DCLICK = wx.PyEventBinder( wxEVT_GRID_CELL_RIGHT_DCLICK )
EVT_GRID_LABEL_LEFT_CLICK = wx.PyEventBinder( wxEVT_GRID_LABEL_LEFT_CLICK )
EVT_GRID_LABEL_RIGHT_CLICK = wx.PyEventBinder( wxEVT_GRID_LABEL_RIGHT_CLICK )
EVT_GRID_LABEL_LEFT_DCLICK = wx.PyEventBinder( wxEVT_GRID_LABEL_LEFT_DCLICK )
EVT_GRID_LABEL_RIGHT_DCLICK = wx.PyEventBinder( wxEVT_GRID_LABEL_RIGHT_DCLICK )
EVT_GRID_ROW_SIZE = wx.PyEventBinder( wxEVT_GRID_ROW_SIZE )
EVT_GRID_COL_SIZE = wx.PyEventBinder( wxEVT_GRID_COL_SIZE )
EVT_GRID_RANGE_SELECTING = wx.PyEventBinder( wxEVT_GRID_RANGE_SELECTING )
EVT_GRID_RANGE_SELECTED = wx.PyEventBinder( wxEVT_GRID_RANGE_SELECTED )
EVT_GRID_CELL_CHANGING = wx.PyEventBinder( wxEVT_GRID_CELL_CHANGING )
EVT_GRID_CELL_CHANGED = wx.PyEventBinder( wxEVT_GRID_CELL_CHANGED )
EVT_GRID_SELECT_CELL = wx.PyEventBinder( wxEVT_GRID_SELECT_CELL )
EVT_GRID_EDITOR_SHOWN = wx.PyEventBinder( wxEVT_GRID_EDITOR_SHOWN )
EVT_GRID_EDITOR_HIDDEN = wx.PyEventBinder( wxEVT_GRID_EDITOR_HIDDEN )
EVT_GRID_EDITOR_CREATED = wx.PyEventBinder( wxEVT_GRID_EDITOR_CREATED )
EVT_GRID_CELL_BEGIN_DRAG = wx.PyEventBinder( wxEVT_GRID_CELL_BEGIN_DRAG )
EVT_GRID_COL_MOVE = wx.PyEventBinder( wxEVT_GRID_COL_MOVE )
EVT_GRID_COL_SORT = wx.PyEventBinder( wxEVT_GRID_COL_SORT )
EVT_GRID_TABBING = wx.PyEventBinder( wxEVT_GRID_TABBING )

# The same as above but with the ability to specify an identifier
EVT_GRID_CMD_CELL_LEFT_CLICK =     wx.PyEventBinder( wxEVT_GRID_CELL_LEFT_CLICK,    1 )
EVT_GRID_CMD_CELL_RIGHT_CLICK =    wx.PyEventBinder( wxEVT_GRID_CELL_RIGHT_CLICK,   1 )
EVT_GRID_CMD_CELL_LEFT_DCLICK =    wx.PyEventBinder( wxEVT_GRID_CELL_LEFT_DCLICK,   1 )
EVT_GRID_CMD_CELL_RIGHT_DCLICK =   wx.PyEventBinder( wxEVT_GRID_CELL_RIGHT_DCLICK,  1 )
EVT_GRID_CMD_LABEL_LEFT_CLICK =    wx.PyEventBinder( wxEVT_GRID_LABEL_LEFT_CLICK,   1 )
EVT_GRID_CMD_LABEL_RIGHT_CLICK =   wx.PyEventBinder( wxEVT_GRID_LABEL_RIGHT_CLICK,  1 )
EVT_GRID_CMD_LABEL_LEFT_DCLICK =   wx.PyEventBinder( wxEVT_GRID_LABEL_LEFT_DCLICK,  1 )
EVT_GRID_CMD_LABEL_RIGHT_DCLICK =  wx.PyEventBinder( wxEVT_GRID_LABEL_RIGHT_DCLICK, 1 )
EVT_GRID_CMD_ROW_SIZE =            wx.PyEventBinder( wxEVT_GRID_ROW_SIZE,           1 )
EVT_GRID_CMD_COL_SIZE =            wx.PyEventBinder( wxEVT_GRID_COL_SIZE,           1 )
EVT_GRID_CMD_RANGE_SELECTING =     wx.PyEventBinder( wxEVT_GRID_RANGE_SELECTING,    1 )
EVT_GRID_CMD_RANGE_SELECTED =      wx.PyEventBinder( wxEVT_GRID_RANGE_SELECTED,     1 )
EVT_GRID_CMD_CELL_CHANGING =       wx.PyEventBinder( wxEVT_GRID_CELL_CHANGING,      1 )
EVT_GRID_CMD_CELL_CHANGED =        wx.PyEventBinder( wxEVT_GRID_CELL_CHANGED,       1 )
EVT_GRID_CMD_SELECT_CELL =         wx.PyEventBinder( wxEVT_GRID_SELECT_CELL,        1 )
EVT_GRID_CMD_EDITOR_SHOWN =        wx.PyEventBinder( wxEVT_GRID_EDITOR_SHOWN,       1 )
EVT_GRID_CMD_EDITOR_HIDDEN =       wx.PyEventBinder( wxEVT_GRID_EDITOR_HIDDEN,      1 )
EVT_GRID_CMD_EDITOR_CREATED =      wx.PyEventBinder( wxEVT_GRID_EDITOR_CREATED,     1 )
EVT_GRID_CMD_CELL_BEGIN_DRAG =     wx.PyEventBinder( wxEVT_GRID_CELL_BEGIN_DRAG,    1 )
EVT_GRID_CMD_COL_MOVE =            wx.PyEventBinder( wxEVT_GRID_COL_MOVE,           1 )
EVT_GRID_CMD_COL_SORT =            wx.PyEventBinder( wxEVT_GRID_COL_SORT,           1 )
EVT_GRID_CMD_TABBING =             wx.PyEventBinder( wxEVT_GRID_TABBING,            1 )

# Just for compatibility, remove them in a future release
EVT_GRID_RANGE_SELECT =            EVT_GRID_RANGE_SELECTED
EVT_GRID_CMD_RANGE_SELECT =        EVT_GRID_CMD_RANGE_SELECTED

%End


//---------------------------------------------------------------------------

