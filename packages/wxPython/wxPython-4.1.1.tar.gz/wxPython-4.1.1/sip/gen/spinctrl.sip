//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/spinctrl.h>
%End


//---------------------------------------------------------------------------

wxEventType wxEVT_SPINCTRL   /PyName=wxEVT_SPINCTRL/;

wxEventType wxEVT_SPINCTRLDOUBLE   /PyName=wxEVT_SPINCTRLDOUBLE/;

class wxSpinCtrl : wxControl
{
    %Docstring
        SpinCtrl()
        SpinCtrl(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=SP_ARROW_KEYS, min=0, max=100, initial=0, name="wxSpinCtrl")
        
        wxSpinCtrl combines wxTextCtrl and wxSpinButton in one control.
    %End
    %TypeHeaderCode
        #include <wx/spinctrl.h>
    %End

public:
    wxSpinCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxSpinCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxSP_ARROW_KEYS,
        int min = 0,
        int max = 100,
        int initial = 0,
        const wxString & name = "wxSpinCtrl"
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxSP_ARROW_KEYS,
        int min = 0,
        int max = 100,
        int initial = 0,
        const wxString & name = "wxSpinCtrl"
    );
    %Docstring
        Create(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=SP_ARROW_KEYS, min=0, max=100, initial=0, name="wxSpinCtrl") -> bool
        
        Creation function called by the spin control constructor.
    %End

    int GetBase() const;
    %Docstring
        GetBase() -> int
        
        Returns the numerical base being currently used, 10 by default.
    %End

    int GetMax() const;
    %Docstring
        GetMax() -> int
        
        Gets maximal allowable value.
    %End

    int GetMin() const;
    %Docstring
        GetMin() -> int
        
        Gets minimal allowable value.
    %End

    int GetValue() const;
    %Docstring
        GetValue() -> int
        
        Gets the value of the spin control.
    %End

    bool SetBase(
        int base
    );
    %Docstring
        SetBase(base) -> bool
        
        Sets the base to use for the numbers in this control.
    %End

    void SetRange(
        int minVal,
        int maxVal
    );
    %Docstring
        SetRange(minVal, maxVal)
        
        Sets range of allowable values.
    %End

    void SetSelection(
        long from_,
        long to_
    );
    %Docstring
        SetSelection(from_, to_)
        
        Select the text in the text part of the control between positions from
        (inclusive) and to (exclusive).
    %End

    void SetValue(
        const wxString & text
    );
    %Docstring
        SetValue(text)
        SetValue(value)
        
        Sets the value of the spin control.
    %End

    void SetValue(
        int value
    );

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Base, get=GetBase, set=SetBase)
    %Property(name=Value, get=GetValue, set=SetValue)
};  // end of class wxSpinCtrl


%Extract(id=pycode_core)
def _SpinCtrl_GetRange(self):
    return (self.GetMin(), self.GetMax())
SpinCtrl.GetRange = _SpinCtrl_GetRange
del _SpinCtrl_GetRange
%End

%Extract(id=pycode_core)
def _SpinCtrl_SetMin(self, minVal):
    self.SetRange(minVal, self.GetMax())
SpinCtrl.SetMin = _SpinCtrl_SetMin
del _SpinCtrl_SetMin
%End

%Extract(id=pycode_core)
def _SpinCtrl_SetMax(self, maxVal):
    self.SetRange(self.GetMin(), maxVal)
SpinCtrl.SetMax = _SpinCtrl_SetMax
del _SpinCtrl_SetMax
%End

%Extract(id=pycode_core)
SpinCtrl.Max = property(SpinCtrl.GetMax, SpinCtrl.SetMax)
%End

%Extract(id=pycode_core)
SpinCtrl.Min = property(SpinCtrl.GetMin, SpinCtrl.SetMin)
%End

%Extract(id=pycode_core)
SpinCtrl.Range = property(SpinCtrl.GetRange)
%End

class wxSpinCtrlDouble : wxControl
{
    %Docstring
        SpinCtrlDouble()
        SpinCtrlDouble(parent, id=-1, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=SP_ARROW_KEYS, min=0, max=100, initial=0, inc=1, name=T("wxSpinCtrlDouble"))
        
        wxSpinCtrlDouble combines wxTextCtrl and wxSpinButton in one control
        and displays a real number.
    %End
    %TypeHeaderCode
        #include <wx/spinctrl.h>
    %End

public:
    wxSpinCtrlDouble();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxSpinCtrlDouble(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = -1,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxSP_ARROW_KEYS,
        double min = 0,
        double max = 100,
        double initial = 0,
        double inc = 1,
        const wxString & name = wxT("wxSpinCtrlDouble")
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxSP_ARROW_KEYS,
        double min = 0,
        double max = 100,
        double initial = 0,
        double inc = 1,
        const wxString & name = "wxSpinCtrlDouble"
    );
    %Docstring
        Create(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=SP_ARROW_KEYS, min=0, max=100, initial=0, inc=1, name="wxSpinCtrlDouble") -> bool
        
        Creation function called by the spin control constructor.
    %End

    unsigned int GetDigits() const;
    %Docstring
        GetDigits() -> unsignedint
        
        Gets precision of the value of the spin control.
    %End

    double GetIncrement() const;
    %Docstring
        GetIncrement() -> double
        
        Gets the increment value.
    %End

    double GetMax() const;
    %Docstring
        GetMax() -> double
        
        Gets maximal allowable value.
    %End

    double GetMin() const;
    %Docstring
        GetMin() -> double
        
        Gets minimal allowable value.
    %End

    double GetValue() const;
    %Docstring
        GetValue() -> double
        
        Gets the value of the spin control.
    %End

    void SetDigits(
        unsigned int digits
    );
    %Docstring
        SetDigits(digits)
        
        Sets precision of the value of the spin control.
    %End

    void SetIncrement(
        double inc
    );
    %Docstring
        SetIncrement(inc)
        
        Sets the increment value.
    %End

    void SetRange(
        double minVal,
        double maxVal
    );
    %Docstring
        SetRange(minVal, maxVal)
        
        Sets range of allowable values.
    %End

    void SetValue(
        const wxString & text
    );
    %Docstring
        SetValue(text)
        SetValue(value)
        
        Sets the value of the spin control.
    %End

    void SetValue(
        double value
    );

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Digits, get=GetDigits, set=SetDigits)
    %Property(name=Increment, get=GetIncrement, set=SetIncrement)
    %Property(name=Value, get=GetValue, set=SetValue)
};  // end of class wxSpinCtrlDouble


%Extract(id=pycode_core)
def _SpinCtrlDouble_GetRange(self):
    return (self.GetMin(), self.GetMax())
SpinCtrlDouble.GetRange = _SpinCtrlDouble_GetRange
del _SpinCtrlDouble_GetRange
%End

%Extract(id=pycode_core)
def _SpinCtrlDouble_SetMin(self, minVal):
    self.SetRange(minVal, self.GetMax())
SpinCtrlDouble.SetMin = _SpinCtrlDouble_SetMin
del _SpinCtrlDouble_SetMin
%End

%Extract(id=pycode_core)
def _SpinCtrlDouble_SetMax(self, maxVal):
    self.SetRange(self.GetMin(), maxVal)
SpinCtrlDouble.SetMax = _SpinCtrlDouble_SetMax
del _SpinCtrlDouble_SetMax
%End

%Extract(id=pycode_core)
SpinCtrlDouble.Max = property(SpinCtrlDouble.GetMax, SpinCtrlDouble.SetMax)
%End

%Extract(id=pycode_core)
SpinCtrlDouble.Min = property(SpinCtrlDouble.GetMin, SpinCtrlDouble.SetMin)
%End

%Extract(id=pycode_core)
SpinCtrlDouble.Range = property(SpinCtrlDouble.GetRange)
%End

class wxSpinDoubleEvent : wxNotifyEvent
{
    %Docstring
        SpinDoubleEvent(commandType=wxEVT_NULL, winid=0, value=0)
        SpinDoubleEvent(event)
        
        This event class is used for the events generated by wxSpinCtrlDouble.
    %End
    %TypeHeaderCode
        #include <wx/spinctrl.h>
    %End

public:
    wxSpinDoubleEvent(
        wxEventType commandType = wxEVT_NULL,
        int winid = 0,
        double value = 0
    );

    wxSpinDoubleEvent(
        const wxSpinDoubleEvent & event
    );

    double GetValue() const;
    %Docstring
        GetValue() -> double
        
        Returns the value associated with this spin control event.
    %End

    void SetValue(
        double value
    );
    %Docstring
        SetValue(value)
        
        Set the value associated with the event.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxSpinDoubleEvent& operator=(const wxSpinDoubleEvent&);


    public:


    %Property(name=Value, get=GetValue, set=SetValue)
};  // end of class wxSpinDoubleEvent


%Extract(id=pycode_core)
EVT_SPINCTRL = wx.PyEventBinder( wxEVT_SPINCTRL, 1)
EVT_SPINCTRLDOUBLE = wx.PyEventBinder( wxEVT_SPINCTRLDOUBLE, 1)

# deprecated wxEVT aliases
wxEVT_COMMAND_SPINCTRL_UPDATED        = wxEVT_SPINCTRL
wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED  = wxEVT_SPINCTRLDOUBLE

%End


//---------------------------------------------------------------------------

