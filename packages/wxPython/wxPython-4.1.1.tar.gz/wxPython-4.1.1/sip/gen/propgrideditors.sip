//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _propgrid.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxPGWindowList
{
    %Docstring
        PGWindowList(primary, secondary=None)
        
        Contains a list of editor windows returned by CreateControls.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/editors.h>
    %End

public:
    wxPGWindowList(
        wxWindow * primary   /Transfer/,
        wxWindow * secondary   /Transfer/ = NULL
    );

    void SetSecondary(
        wxWindow * secondary   /Transfer/
    );
    %Docstring
        SetSecondary(secondary)
    %End

    wxWindow * GetPrimary() const;
    %Docstring
        GetPrimary() -> wx.Window
        
        Gets window of primary editor.
    %End

    wxWindow * GetSecondary() const;
    %Docstring
        GetSecondary() -> wx.Window
        
        Gets window of secondary editor.
    %End

    public:


    %Property(name=Primary, get=GetPrimary)
    %Property(name=Secondary, get=GetSecondary, set=SetSecondary)
};  // end of class wxPGWindowList


class wxPGEditor : wxObject
{
    %Docstring
        PGEditor()
        
        Base class for custom wxPropertyGrid editors.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/editors.h>
    %End

public:
    wxPGEditor();

    virtual
    ~wxPGEditor();

    void * m_clientData;

    virtual
    wxString GetName() const;
    %Docstring
        GetName() -> String
        
        Returns pointer to the name of the editor.
    %End

    virtual
    wxPGWindowList CreateControls(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        const wxPoint & pos,
        const wxSize & size
    ) const = 0;
    %Docstring
        CreateControls(propgrid, property, pos, size) -> PGWindowList
        
        Instantiates editor controls.
    %End

    virtual
    void UpdateControl(
        wxPGProperty * property,
        wxWindow * ctrl
    ) const = 0;
    %Docstring
        UpdateControl(property, ctrl)
        
        Loads value from property to the control.
    %End

    virtual
    void DrawValue(
        wxDC & dc,
        const wxRect & rect,
        wxPGProperty * property,
        const wxString & text
    ) const;
    %Docstring
        DrawValue(dc, rect, property, text)
        
        Draws value for given property.
    %End

    virtual
    bool OnEvent(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        wxWindow * wnd_primary,
        wxEvent & event
    ) const = 0;
    %Docstring
        OnEvent(propgrid, property, wnd_primary, event) -> bool
        
        Handles events.
    %End

    virtual
    bool GetValueFromControl(
        wxPGVariant & variant   /Out/,
        wxPGProperty * property,
        wxWindow * ctrl
    ) const [ bool (wxVariant& variant, wxPGProperty* property, wxWindow* ctrl) ];
    %Docstring
        GetValueFromControl(property, ctrl) -> (bool, variant)
        
        Returns value from control, via parameter variant.
    %End
    %VirtualCatcherCode
        PyObject *sipResObj = sipCallMethod(&sipIsErr, sipMethod, "DD",
                                            property, sipType_wxPGProperty, NULL,
                                            ctrl, sipType_wxWindow, NULL);
        if (sipResObj == NULL) {
            if (PyErr_Occurred())
                PyErr_Print();
            sipRes = false;
        }
        else if (sipResObj == Py_None) {
            sipRes = false;
        } else if (sipResObj && !sipIsErr) {
            sipParseResult(&sipIsErr, sipMethod, sipResObj, "(bH5)", &sipRes, sipType_wxPGVariant, &variant);
        }
    %End

    virtual
    void SetValueToUnspecified(
        wxPGProperty * property,
        wxWindow * ctrl
    ) const;
    %Docstring
        SetValueToUnspecified(property, ctrl)
        
        Sets value in control to unspecified.
    %End

    virtual
    void SetControlAppearance(
        wxPropertyGrid * pg,
        wxPGProperty * property,
        wxWindow * ctrl,
        const wxPGCell & appearance,
        const wxPGCell & oldAppearance,
        bool unspecified
    ) const;
    %Docstring
        SetControlAppearance(pg, property, ctrl, appearance, oldAppearance, unspecified)
        
        Called by property grid to set new appearance for the control.
    %End

    virtual
    void SetControlStringValue(
        wxPGProperty * property,
        wxWindow * ctrl,
        const wxString & txt
    ) const;
    %Docstring
        SetControlStringValue(property, ctrl, txt)
        
        Sets control's value specifically from string.
    %End

    virtual
    void SetControlIntValue(
        wxPGProperty * property,
        wxWindow * ctrl,
        int value
    ) const;
    %Docstring
        SetControlIntValue(property, ctrl, value)
        
        Sets control's value specifically from int (applies to choice etc.).
    %End

    virtual
    int InsertItem(
        wxWindow * ctrl,
        const wxString & label,
        int index
    ) const;
    %Docstring
        InsertItem(ctrl, label, index) -> int
        
        Inserts item to existing control.
    %End

    virtual
    void DeleteItem(
        wxWindow * ctrl,
        int index
    ) const;
    %Docstring
        DeleteItem(ctrl, index)
        
        Deletes item from existing control.
    %End

    virtual
    void OnFocus(
        wxPGProperty * property,
        wxWindow * wnd
    ) const;
    %Docstring
        OnFocus(property, wnd)
        
        Extra processing when control gains focus.
    %End

    virtual
    bool CanContainCustomImage() const;
    %Docstring
        CanContainCustomImage() -> bool
        
        Returns true if control itself can contain the custom image.
    %End

    public:


    %Property(name=Name, get=GetName)
};  // end of class wxPGEditor


class wxPGTextCtrlEditor : wxPGEditor
{
    %Docstring
        PGTextCtrlEditor()
    %End
    %TypeHeaderCode
        #include <wx/propgrid/editors.h>
    %End

public:
    wxPGTextCtrlEditor();

    virtual
    ~wxPGTextCtrlEditor();

    virtual
    wxPGWindowList CreateControls(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        const wxPoint & pos,
        const wxSize & size
    ) const;
    %Docstring
        CreateControls(propgrid, property, pos, size) -> PGWindowList
        
        Instantiates editor controls.
    %End

    virtual
    void UpdateControl(
        wxPGProperty * property,
        wxWindow * ctrl
    ) const;
    %Docstring
        UpdateControl(property, ctrl)
        
        Loads value from property to the control.
    %End

    virtual
    bool OnEvent(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        wxWindow * wnd_primary,
        wxEvent & event
    ) const;
    %Docstring
        OnEvent(propgrid, property, wnd_primary, event) -> bool
        
        Handles events.
    %End

    virtual
    bool GetValueFromControl(
        wxPGVariant & variant,
        wxPGProperty * property,
        wxWindow * ctrl
    ) const;
    %Docstring
        GetValueFromControl(variant, property, ctrl) -> bool
        
        Returns value from control, via parameter variant.
    %End

    virtual
    wxString GetName() const;
    %Docstring
        GetName() -> String
        
        Returns pointer to the name of the editor.
    %End

    virtual
    void SetControlStringValue(
        wxPGProperty * property,
        wxWindow * ctrl,
        const wxString & txt
    ) const;
    %Docstring
        SetControlStringValue(property, ctrl, txt)
        
        Sets control's value specifically from string.
    %End

    virtual
    void OnFocus(
        wxPGProperty * property,
        wxWindow * wnd
    ) const;
    %Docstring
        OnFocus(property, wnd)
        
        Extra processing when control gains focus.
    %End

    static
    bool OnTextCtrlEvent(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        wxWindow * ctrl,
        wxEvent & event
    );
    %Docstring
        OnTextCtrlEvent(propgrid, property, ctrl, event) -> bool
    %End

    static
    bool GetTextCtrlValueFromControl(
        wxPGVariant & variant,
        wxPGProperty * property,
        wxWindow * ctrl
    );
    %Docstring
        GetTextCtrlValueFromControl(variant, property, ctrl) -> bool
    %End

    public:


    %Property(name=Name, get=GetName)
};  // end of class wxPGTextCtrlEditor


class wxPGChoiceEditor : wxPGEditor
{
    %Docstring
        PGChoiceEditor()
    %End
    %TypeHeaderCode
        #include <wx/propgrid/editors.h>
    %End

public:
    wxPGChoiceEditor();

    virtual
    wxPGWindowList CreateControls(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        const wxPoint & pos,
        const wxSize & size
    ) const;
    %Docstring
        CreateControls(propgrid, property, pos, size) -> PGWindowList
        
        Instantiates editor controls.
    %End

    virtual
    void UpdateControl(
        wxPGProperty * property,
        wxWindow * ctrl
    ) const;
    %Docstring
        UpdateControl(property, ctrl)
        
        Loads value from property to the control.
    %End

    virtual
    bool OnEvent(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        wxWindow * wnd_primary,
        wxEvent & event
    ) const;
    %Docstring
        OnEvent(propgrid, property, wnd_primary, event) -> bool
        
        Handles events.
    %End

    virtual
    bool GetValueFromControl(
        wxPGVariant & variant,
        wxPGProperty * property,
        wxWindow * ctrl
    ) const;
    %Docstring
        GetValueFromControl(variant, property, ctrl) -> bool
        
        Returns value from control, via parameter variant.
    %End

    virtual
    void SetValueToUnspecified(
        wxPGProperty * property,
        wxWindow * ctrl
    ) const;
    %Docstring
        SetValueToUnspecified(property, ctrl)
        
        Sets value in control to unspecified.
    %End

    virtual
    wxString GetName() const;
    %Docstring
        GetName() -> String
        
        Returns pointer to the name of the editor.
    %End

    virtual
    void SetControlIntValue(
        wxPGProperty * property,
        wxWindow * ctrl,
        int value
    ) const;
    %Docstring
        SetControlIntValue(property, ctrl, value)
        
        Sets control's value specifically from int (applies to choice etc.).
    %End

    virtual
    void SetControlStringValue(
        wxPGProperty * property,
        wxWindow * ctrl,
        const wxString & txt
    ) const;
    %Docstring
        SetControlStringValue(property, ctrl, txt)
        
        Sets control's value specifically from string.
    %End

    virtual
    int InsertItem(
        wxWindow * ctrl,
        const wxString & label,
        int index
    ) const;
    %Docstring
        InsertItem(ctrl, label, index) -> int
        
        Inserts item to existing control.
    %End

    virtual
    void DeleteItem(
        wxWindow * ctrl,
        int index
    ) const;
    %Docstring
        DeleteItem(ctrl, index)
        
        Deletes item from existing control.
    %End

    virtual
    bool CanContainCustomImage() const;
    %Docstring
        CanContainCustomImage() -> bool
        
        Returns true if control itself can contain the custom image.
    %End

    wxWindow * CreateControlsBase(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        const wxPoint & pos,
        const wxSize & sz,
        long extraStyle
    ) const;
    %Docstring
        CreateControlsBase(propgrid, property, pos, sz, extraStyle) -> wx.Window
    %End

    public:


    %Property(name=Name, get=GetName)
};  // end of class wxPGChoiceEditor


class wxPGComboBoxEditor : wxPGChoiceEditor
{
    %Docstring
        PGComboBoxEditor()
    %End
    %TypeHeaderCode
        #include <wx/propgrid/editors.h>
    %End

public:
    wxPGComboBoxEditor();

    virtual
    ~wxPGComboBoxEditor();

    virtual
    wxPGWindowList CreateControls(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        const wxPoint & pos,
        const wxSize & size
    ) const;
    %Docstring
        CreateControls(propgrid, property, pos, size) -> PGWindowList
        
        Instantiates editor controls.
    %End

    virtual
    wxString GetName() const;
    %Docstring
        GetName() -> String
        
        Returns pointer to the name of the editor.
    %End

    virtual
    void UpdateControl(
        wxPGProperty * property,
        wxWindow * ctrl
    ) const;
    %Docstring
        UpdateControl(property, ctrl)
        
        Loads value from property to the control.
    %End

    virtual
    bool OnEvent(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        wxWindow * wnd_primary,
        wxEvent & event
    ) const;
    %Docstring
        OnEvent(propgrid, property, wnd_primary, event) -> bool
        
        Handles events.
    %End

    virtual
    bool GetValueFromControl(
        wxPGVariant & variant,
        wxPGProperty * property,
        wxWindow * ctrl
    ) const;
    %Docstring
        GetValueFromControl(variant, property, ctrl) -> bool
        
        Returns value from control, via parameter variant.
    %End

    virtual
    void OnFocus(
        wxPGProperty * property,
        wxWindow * wnd
    ) const;
    %Docstring
        OnFocus(property, wnd)
        
        Extra processing when control gains focus.
    %End

    public:


    %Property(name=Name, get=GetName)
};  // end of class wxPGComboBoxEditor


class wxPGChoiceAndButtonEditor : wxPGChoiceEditor
{
    %Docstring
        PGChoiceAndButtonEditor()
    %End
    %TypeHeaderCode
        #include <wx/propgrid/editors.h>
    %End

public:
    wxPGChoiceAndButtonEditor();

    virtual
    ~wxPGChoiceAndButtonEditor();

    virtual
    wxString GetName() const;
    %Docstring
        GetName() -> String
        
        Returns pointer to the name of the editor.
    %End

    virtual
    wxPGWindowList CreateControls(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        const wxPoint & pos,
        const wxSize & size
    ) const;
    %Docstring
        CreateControls(propgrid, property, pos, size) -> PGWindowList
        
        Instantiates editor controls.
    %End

    public:


    %Property(name=Name, get=GetName)
};  // end of class wxPGChoiceAndButtonEditor


class wxPGTextCtrlAndButtonEditor : wxPGTextCtrlEditor
{
    %Docstring
        PGTextCtrlAndButtonEditor()
    %End
    %TypeHeaderCode
        #include <wx/propgrid/editors.h>
    %End

public:
    wxPGTextCtrlAndButtonEditor();

    virtual
    ~wxPGTextCtrlAndButtonEditor();

    virtual
    wxString GetName() const;
    %Docstring
        GetName() -> String
        
        Returns pointer to the name of the editor.
    %End

    virtual
    wxPGWindowList CreateControls(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        const wxPoint & pos,
        const wxSize & size
    ) const;
    %Docstring
        CreateControls(propgrid, property, pos, size) -> PGWindowList
        
        Instantiates editor controls.
    %End

    public:


    %Property(name=Name, get=GetName)
};  // end of class wxPGTextCtrlAndButtonEditor


class wxPGCheckBoxEditor : wxPGEditor
{
    %Docstring
        PGCheckBoxEditor()
    %End
    %TypeHeaderCode
        #include <wx/propgrid/editors.h>
    %End

public:
    wxPGCheckBoxEditor();

    virtual
    ~wxPGCheckBoxEditor();

    virtual
    wxString GetName() const;
    %Docstring
        GetName() -> String
        
        Returns pointer to the name of the editor.
    %End

    virtual
    wxPGWindowList CreateControls(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        const wxPoint & pos,
        const wxSize & size
    ) const;
    %Docstring
        CreateControls(propgrid, property, pos, size) -> PGWindowList
        
        Instantiates editor controls.
    %End

    virtual
    void UpdateControl(
        wxPGProperty * property,
        wxWindow * ctrl
    ) const;
    %Docstring
        UpdateControl(property, ctrl)
        
        Loads value from property to the control.
    %End

    virtual
    bool OnEvent(
        wxPropertyGrid * propgrid,
        wxPGProperty * property,
        wxWindow * wnd_primary,
        wxEvent & event
    ) const;
    %Docstring
        OnEvent(propgrid, property, wnd_primary, event) -> bool
        
        Handles events.
    %End

    virtual
    bool GetValueFromControl(
        wxPGVariant & variant,
        wxPGProperty * property,
        wxWindow * ctrl
    ) const;
    %Docstring
        GetValueFromControl(variant, property, ctrl) -> bool
        
        Returns value from control, via parameter variant.
    %End

    virtual
    void SetValueToUnspecified(
        wxPGProperty * property,
        wxWindow * ctrl
    ) const;
    %Docstring
        SetValueToUnspecified(property, ctrl)
        
        Sets value in control to unspecified.
    %End

    virtual
    void DrawValue(
        wxDC & dc,
        const wxRect & rect,
        wxPGProperty * property,
        const wxString & text
    ) const;
    %Docstring
        DrawValue(dc, rect, property, text)
        
        Draws value for given property.
    %End

    virtual
    void SetControlIntValue(
        wxPGProperty * property,
        wxWindow * ctrl,
        int value
    ) const;
    %Docstring
        SetControlIntValue(property, ctrl, value)
        
        Sets control's value specifically from int (applies to choice etc.).
    %End

    public:


    %Property(name=Name, get=GetName)
};  // end of class wxPGCheckBoxEditor


class wxPGEditorDialogAdapter : wxObject
{
    %Docstring
        PGEditorDialogAdapter()
        
        Derive a class from this to adapt an existing editor dialog or
        function to be used when editor button of a property is pushed.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/editors.h>
    %End

public:
    wxPGEditorDialogAdapter();

    virtual
    ~wxPGEditorDialogAdapter();

    void * m_clientData;

    bool ShowDialog(
        wxPropertyGrid * propGrid,
        wxPGProperty * property
    );
    %Docstring
        ShowDialog(propGrid, property) -> bool
    %End

    virtual
    bool DoShowDialog(
        wxPropertyGrid * propGrid,
        wxPGProperty * property
    ) = 0;
    %Docstring
        DoShowDialog(propGrid, property) -> bool
    %End

    void SetValue(
        wxPGVariant value
    );
    %Docstring
        SetValue(value)
    %End

    wxPGVariant & GetValue();
    %Docstring
        GetValue() -> PGVariant
        
        This method is typically only used if deriving class from existing
        adapter with value conversion purposes.
    %End

    public:


    %Property(name=Value, get=GetValue, set=SetValue)
};  // end of class wxPGEditorDialogAdapter


class wxPGMultiButton : wxWindow
{
    %Docstring
        PGMultiButton(pg, sz)
        
        This class can be used to have multiple buttons in a property editor.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/editors.h>
    %End

public:
    wxPGMultiButton(
        wxPropertyGrid * pg,
        const wxSize & sz
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxPGMultiButton();

    void Add(
        const wxString & label,
        int id = -2
    );
    %Docstring
        Add(label, id=-2)
        Add(bitmap, id=-2)
        
        Adds new button, with given label.
    %End

    void Add(
        const wxBitmap & bitmap,
        int id = -2
    );

    void Finalize(
        wxPropertyGrid * propGrid,
        const wxPoint & pos
    );
    %Docstring
        Finalize(propGrid, pos)
        
        Call this in CreateControls() of your custom editor class after all
        buttons have been added.
    %End

    wxWindow * GetButton(
        unsigned int i
    );
    %Docstring
        GetButton(i) -> wx.Window
        
        Returns pointer to one of the buttons.
    %End

    int GetButtonId(
        unsigned int i
    ) const;
    %Docstring
        GetButtonId(i) -> int
        
        Returns Id of one of the buttons.
    %End

    unsigned int GetCount();
    %Docstring
        GetCount() -> unsignedint
        
        Returns number of buttons.
    %End

    wxSize GetPrimarySize() const;
    %Docstring
        GetPrimarySize() -> wx.Size
        
        Returns size of primary editor control, as appropriately reduced by
        number of buttons present.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Count, get=GetCount)
    %Property(name=PrimarySize, get=GetPrimarySize)
};  // end of class wxPGMultiButton


%Extract(id=pycode_propgrid)
def _PGMultiButton_AddButton(self, label, id=-2):
    """
    A simple wrapper around the PGMultiButton.Add method, for backwards compatibility.
    """
    self.Add(label, id)
PGMultiButton.AddButton = _PGMultiButton_AddButton
del _PGMultiButton_AddButton
%End

%Extract(id=pycode_propgrid)
def _PGMultiButton_AddBitmapButton(self, bitmap, id=-2):
    """
    A simple wrapper around the PGMultiButton.Add method, for backwards compatibility.
    """
    self.Add(bitmap, id)
PGMultiButton.AddBitmapButton = _PGMultiButton_AddBitmapButton
del _PGMultiButton_AddBitmapButton
%End

wxPGEditor * wxPGEditor_TextCtrl;

wxPGEditor * wxPGEditor_Choice;

wxPGEditor * wxPGEditor_ComboBox;

wxPGEditor * wxPGEditor_TextCtrlAndButton;

wxPGEditor * wxPGEditor_CheckBox;

wxPGEditor * wxPGEditor_ChoiceAndButton;


//---------------------------------------------------------------------------

