//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _adv.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxCommandLinkButton : wxButton
{
    %Docstring
        CommandLinkButton()
        CommandLinkButton(parent, id=wx.ID_ANY, mainLabel=wx.EmptyString, note=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, validator=wx.DefaultValidator, name=wx.ButtonNameStr)
        
        Objects of this class are similar in appearance to the normal
        wxButtons but are similar to the links in a web page in functionality.
    %End
    %TypeHeaderCode
        #include <wx/commandlinkbutton.h>
    %End

public:
    wxCommandLinkButton();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxCommandLinkButton(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & mainLabel = wxEmptyString,
        const wxString & note = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxButtonNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & mainLabel = wxEmptyString,
        const wxString & note = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxButtonNameStr
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, mainLabel=wx.EmptyString, note=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, validator=wx.DefaultValidator, name=wx.ButtonNameStr) -> bool
        
        Button creation function for two-step creation.
    %End

    void SetMainLabelAndNote(
        const wxString & mainLabel,
        const wxString & note
    );
    %Docstring
        SetMainLabelAndNote(mainLabel, note)
        
        Sets a new main label and note for the button.
    %End

    void SetLabel(
        const wxString & label
    );
    %Docstring
        SetLabel(label)
        
        Sets the string label and note for the button.
    %End

    wxString GetLabel() const;
    %Docstring
        GetLabel() -> String
        
        Returns the string label for the button.
    %End

    void SetMainLabel(
        const wxString & mainLabel
    );
    %Docstring
        SetMainLabel(mainLabel)
        
        Changes the main label.
    %End

    void SetNote(
        const wxString & note
    );
    %Docstring
        SetNote(note)
        
        Changes the note.
    %End

    wxString GetMainLabel() const;
    %Docstring
        GetMainLabel() -> String
        
        Returns the current main label.
    %End

    wxString GetNote() const;
    %Docstring
        GetNote() -> String
        
        Returns the currently used note.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Label, get=GetLabel, set=SetLabel)
    %Property(name=MainLabel, get=GetMainLabel, set=SetMainLabel)
    %Property(name=Note, get=GetNote, set=SetNote)
};  // end of class wxCommandLinkButton



//---------------------------------------------------------------------------

