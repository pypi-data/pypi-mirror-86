//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

typedef int wxWindowID;

class wxIdManager
{
    %Docstring
        wxIdManager is responsible for allocating and releasing window IDs.
    %End
    %TypeHeaderCode
        #include <wx/windowid.h>
    %End

public:
    static
    wxWindowID ReserveId(
        int count = 1
    );
    %Docstring
        ReserveId(count=1) -> WindowID
        
        Called directly by wxWindow::NewControlId(), this function will create
        a new ID or range of IDs.
    %End

    static
    void UnreserveId(
        wxWindowID id,
        int count = 1
    );
    %Docstring
        UnreserveId(id, count=1)
        
        Called directly by wxWindow::UnreserveControlId(), this function will
        unreserve an ID or range of IDs that is currently reserved.
    %End

};  // end of class wxIdManager


class wxWindowIDRef
{
    %Docstring
        WindowIDRef()
        WindowIDRef(id)
        WindowIDRef(idref)
        
        A wxWindowIDRef object wraps an ID value and marks it as being in-use
        until all references to that ID are gone.
    %End
public:
    wxWindowIDRef();

    wxWindowIDRef(
        int id
    );

    wxWindowIDRef(
        const wxWindowIDRef& idref
    );

    ~wxWindowIDRef();

    int GetValue();
    %Docstring
        GetValue() -> int
        
        Get the ID value
    %End

    int GetId();
    %Docstring
        GetId() -> int
        
        Alias for GetValue allowing the IDRef to be passed as the source
        parameter to :meth:`wx.EvtHandler.Bind`.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindowIDRef_GetId(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxWindowIDRef_GetId(wxWindowIDRef* self)
    {
        return self->GetValue();
    }
    %End

    int __int__();
    %Docstring
        __int__() -> int
        
        Alias for GetValue allowing the IDRef to be passed as the WindowID
        parameter when creating widgets or other places an integer type is
        needed.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindowIDRef___int__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxWindowIDRef___int__(wxWindowIDRef* self)
    {
        return self->GetValue();
    }
    %End

    int __index__();
    %Docstring
        __index__() -> int
        
        See :meth:`__int__`
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindowIDRef___index__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxWindowIDRef___index__(wxWindowIDRef* self)
    {
        return self->GetValue();
    }
    %End

    bool __eq__(wxWindowID id);
    %Docstring
        __eq__(id) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindowIDRef___eq__(sipCpp, id);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxWindowIDRef___eq__(wxWindowIDRef* self, wxWindowID id)
    {
        return self->GetValue() == id;
    }
    %End

    bool __ne__(wxWindowID id);
    %Docstring
        __ne__(id) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindowIDRef___ne__(sipCpp, id);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxWindowIDRef___ne__(wxWindowIDRef* self, wxWindowID id)
    {
        return self->GetValue() != id;
    }
    %End

    bool __lt__(wxWindowID id);
    %Docstring
        __lt__(id) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindowIDRef___lt__(sipCpp, id);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxWindowIDRef___lt__(wxWindowIDRef* self, wxWindowID id)
    {
        return self->GetValue() < id;
    }
    %End

    bool __gt__(wxWindowID id);
    %Docstring
        __gt__(id) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindowIDRef___gt__(sipCpp, id);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxWindowIDRef___gt__(wxWindowIDRef* self, wxWindowID id)
    {
        return self->GetValue() > id;
    }
    %End

    bool __le__(wxWindowID id);
    %Docstring
        __le__(id) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindowIDRef___le__(sipCpp, id);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxWindowIDRef___le__(wxWindowIDRef* self, wxWindowID id)
    {
        return self->GetValue() <= id;
    }
    %End

    bool __ge__(wxWindowID id);
    %Docstring
        __ge__(id) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindowIDRef___ge__(sipCpp, id);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxWindowIDRef___ge__(wxWindowIDRef* self, wxWindowID id)
    {
        return self->GetValue() >= id;
    }
    %End

    public:


    %Property(name=Id, get=GetId)
    %Property(name=Value, get=GetValue)
};  // end of class wxWindowIDRef


%Extract(id=pycode_core)
def _WindowIDRef___repr__(self):
    return "WindowIDRef: {}".format(self.GetId())
WindowIDRef.__repr__ = _WindowIDRef___repr__
del _WindowIDRef___repr__
%End

%Extract(id=pycode_core)
def _WindowIDRef___hash__(self):
    return hash(self.GetValue())
WindowIDRef.__hash__ = _WindowIDRef___hash__
del _WindowIDRef___hash__
%End

%Extract(id=pycode_core)
def NewIdRef(count=1):
    """
    Reserves a new Window ID (or range of WindowIDs) and returns a
    :class:`wx.WindowIDRef` object (or list of them) that will help
    manage the reservation of that ID.
    
    This function is intended to be a drop-in replacement of the old
    and deprecated :func:`wx.NewId` function, with the added benefit
    that the ID should never conflict with an in-use ID or other IDs
    generated by this function.
    """
    if count == 1:
        return WindowIDRef(IdManager.ReserveId())
    else:
        start = IdManager.ReserveId(count)
        IDRefs = []
        for id in range(start, start+count):
            IDRefs.append(WindowIDRef(id))
        return IDRefs

%End


//---------------------------------------------------------------------------

