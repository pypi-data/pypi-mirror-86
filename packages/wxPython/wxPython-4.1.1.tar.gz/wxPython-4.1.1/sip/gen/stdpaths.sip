//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxStandardPaths   /Abstract/
{
    %Docstring
        StandardPaths()
        
        wxStandardPaths returns the standard locations in the file system and
        should be used by applications to find their data files in a portable
        way.
    %End
    %TypeHeaderCode
        #include <wx/stdpaths.h>
    %End

    %InstanceCode
        sipCpp = & wxStandardPaths::Get();
    %End
public:
    enum ResourceCat
    {
        ResourceCat_None,
        ResourceCat_Messages    
    };

    enum Dir
    {
        Dir_Cache,
        Dir_Documents,
        Dir_Desktop,
        Dir_Downloads,
        Dir_Music,
        Dir_Pictures,
        Dir_Videos    
    };

    enum FileLayout
    {
        FileLayout_Classic,
        FileLayout_XDG    
    };

    enum ConfigFileConv
    {
        ConfigFileConv_Dot,
        ConfigFileConv_Ext    
    };

    virtual
    wxString GetAppDocumentsDir() const;
    %Docstring
        GetAppDocumentsDir() -> String
        
        Return the directory for the document files used by this application.
    %End

    virtual
    wxString GetConfigDir() const;
    %Docstring
        GetConfigDir() -> String
        
        Return the directory containing the system config files.
    %End

    virtual
    wxString GetDataDir() const;
    %Docstring
        GetDataDir() -> String
        
        Return the location of the applications global, i.e. not user-
        specific, data files.
    %End

    virtual
    wxString GetDocumentsDir() const;
    %Docstring
        GetDocumentsDir() -> String
        
        Same as calling GetUserDir() with Dir_Documents parameter.
    %End

    virtual
    wxString GetExecutablePath() const;
    %Docstring
        GetExecutablePath() -> String
        
        Return the directory and the filename for the current executable.
    %End

    wxString GetInstallPrefix() const;
    %Docstring
        GetInstallPrefix() -> String
        
        Return the program installation prefix, e.g. /usr, /opt or
        /home/zeitlin.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxStandardPaths_GetInstallPrefix(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxString* _wxStandardPaths_GetInstallPrefix(const wxStandardPaths* self)
    {
        #ifndef wxHAS_STDPATHS_INSTALL_PREFIX
            return new wxString;
        #else
            return new wxString(self->GetInstallPrefix());
        #endif
    }
    %End

    virtual
    wxString GetLocalDataDir() const;
    %Docstring
        GetLocalDataDir() -> String
        
        Return the location for application data files which are host-specific
        and can't, or shouldn't, be shared with the other machines.
    %End

    virtual
    wxString GetLocalizedResourcesDir(
        const wxString & lang,
        ResourceCat category = ResourceCat_None
    ) const;
    %Docstring
        GetLocalizedResourcesDir(lang, category=ResourceCat_None) -> String
        
        Return the localized resources directory containing the resource files
        of the specified category for the given language.
    %End

    virtual
    wxString GetPluginsDir() const;
    %Docstring
        GetPluginsDir() -> String
        
        Return the directory where the loadable modules (plugins) live.
    %End

    virtual
    wxString GetResourcesDir() const;
    %Docstring
        GetResourcesDir() -> String
        
        Return the directory where the application resource files are located.
    %End

    virtual
    wxString GetTempDir() const;
    %Docstring
        GetTempDir() -> String
        
        Return the directory for storing temporary files, for the current
        user.
    %End

    virtual
    wxString GetUserConfigDir() const;
    %Docstring
        GetUserConfigDir() -> String
        
        Return the directory for the user config files.
    %End

    virtual
    wxString GetUserDataDir() const;
    %Docstring
        GetUserDataDir() -> String
        
        Return the directory for the user-dependent application data files:
    %End

    virtual
    wxString GetUserDir(
        Dir userDir
    ) const;
    %Docstring
        GetUserDir(userDir) -> String
        
        Return the path of the specified user data directory.
    %End

    virtual
    wxString GetUserLocalDataDir() const;
    %Docstring
        GetUserLocalDataDir() -> String
        
        Return the directory for user data files which shouldn't be shared
        with the other machines.
    %End

    void SetInstallPrefix(
        const wxString & prefix
    );
    %Docstring
        SetInstallPrefix(prefix)
        
        Lets wxStandardPaths know about the real program installation prefix
        on a Unix system.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxStandardPaths_SetInstallPrefix(sipCpp, prefix);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxStandardPaths_SetInstallPrefix(wxStandardPaths* self, const wxString *prefix)
    {
        #ifndef wxHAS_STDPATHS_INSTALL_PREFIX
        #else
            self->SetInstallPrefix(*prefix);
        #endif
    }
    %End

    void UseAppInfo(
        int info
    );
    %Docstring
        UseAppInfo(info)
        
        Controls what application information is used when constructing paths
        that should be unique to this program, such as the application data
        directory, the plugins directory on Unix, etc.
    %End

    void SetFileLayout(
        FileLayout layout
    );
    %Docstring
        SetFileLayout(layout)
        
        Sets the current file layout.
    %End

    FileLayout GetFileLayout() const;
    %Docstring
        GetFileLayout() -> FileLayout
        
        Returns the current file layout.
    %End

    virtual
    wxString MakeConfigFileName(
        const wxString & basename,
        ConfigFileConv conv = ConfigFileConv_Ext
    ) const;
    %Docstring
        MakeConfigFileName(basename, conv=ConfigFileConv_Ext) -> String
        
        Return the file name which would be used by wxFileConfig if it were
        constructed with basename.
    %End

    static
    wxStandardPaths & Get();
    %Docstring
        Get() -> StandardPaths
        
        Returns reference to the unique global standard paths object.
    %End

    static
    wxString MSWGetShellDir(
        int csidl
    );
    %Docstring
        MSWGetShellDir(csidl) -> String
        
        Returns location of Windows shell special folder.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxStandardPaths_MSWGetShellDir(csidl);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxString* _wxStandardPaths_MSWGetShellDir(int csidl)
    {
        #ifdef __WXMSW__
            return new wxString(wxStandardPaths::MSWGetShellDir(csidl));
        #else
            return new wxString;
        #endif
    }
    %End

    public:


    %Property(name=AppDocumentsDir, get=GetAppDocumentsDir)
    %Property(name=ConfigDir, get=GetConfigDir)
    %Property(name=DataDir, get=GetDataDir)
    %Property(name=DocumentsDir, get=GetDocumentsDir)
    %Property(name=ExecutablePath, get=GetExecutablePath)
    %Property(name=InstallPrefix, get=GetInstallPrefix, set=SetInstallPrefix)
    %Property(name=LocalDataDir, get=GetLocalDataDir)
    %Property(name=PluginsDir, get=GetPluginsDir)
    %Property(name=ResourcesDir, get=GetResourcesDir)
    %Property(name=TempDir, get=GetTempDir)
    %Property(name=UserConfigDir, get=GetUserConfigDir)
    %Property(name=UserDataDir, get=GetUserDataDir)
    %Property(name=UserLocalDataDir, get=GetUserLocalDataDir)

protected:
    wxStandardPaths();

};  // end of class wxStandardPaths



//---------------------------------------------------------------------------

