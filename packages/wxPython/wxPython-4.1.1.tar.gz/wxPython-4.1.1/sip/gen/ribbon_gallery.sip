//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _ribbon.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/ribbon/gallery.h>
%End


//---------------------------------------------------------------------------

        // forward declarations
        class wxRibbonGalleryItem;


enum wxRibbonGalleryButtonState
{
    wxRIBBON_GALLERY_BUTTON_NORMAL,
    wxRIBBON_GALLERY_BUTTON_HOVERED,
    wxRIBBON_GALLERY_BUTTON_ACTIVE,
    wxRIBBON_GALLERY_BUTTON_DISABLED
};

wxEventType wxEVT_RIBBONGALLERY_HOVER_CHANGED   /PyName=wxEVT_RIBBONGALLERY_HOVER_CHANGED/;

wxEventType wxEVT_RIBBONGALLERY_SELECTED   /PyName=wxEVT_RIBBONGALLERY_SELECTED/;

wxEventType wxEVT_RIBBONGALLERY_CLICKED   /PyName=wxEVT_RIBBONGALLERY_CLICKED/;

class wxRibbonGallery : wxRibbonControl
{
    %Docstring
        RibbonGallery()
        RibbonGallery(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)
        
        A ribbon gallery is like a wxListBox, but for bitmaps rather than
        strings.
    %End
    %TypeHeaderCode
        #include <wx/ribbon/gallery.h>
    %End

public:
    wxRibbonGallery();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxRibbonGallery(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxRibbonGallery();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0) -> bool
        
        Create a gallery in two-step gallery construction.
    %End

    void Clear();
    %Docstring
        Clear()
        
        Remove all items from the gallery.
    %End

    bool IsEmpty() const;
    %Docstring
        IsEmpty() -> bool
        
        Query if the gallery has no items in it.
    %End

    unsigned int GetCount() const;
    %Docstring
        GetCount() -> unsignedint
        
        Get the number of items in the gallery.
    %End

    wxRibbonGalleryItem * GetItem(
        unsigned int n
    );
    %Docstring
        GetItem(n) -> RibbonGalleryItem
        
        Get an item by index.
    %End

    wxRibbonGalleryItem * Append(
        const wxBitmap & bitmap,
        int id
    );
    %Docstring
        Append(bitmap, id) -> RibbonGalleryItem
        Append(bitmap, id, clientData) -> RibbonGalleryItem
        
        Add an item to the gallery (with no client data).
    %End

    wxRibbonGalleryItem * Append(
        const wxBitmap & bitmap,
        int id,
        wxClientData * clientData   /Transfer/
    );

    void SetItemClientObject(
        wxRibbonGalleryItem * item,
        wxClientData * data   /Transfer/
    )   /PyName=SetItemClientData/;
    %Docstring
        SetItemClientData(item, data)
        
        Set the client object associated with a gallery item.
    %End

    wxClientData * GetItemClientObject(
        const wxRibbonGalleryItem * item
    ) const   /PyName=GetItemClientData/;
    %Docstring
        GetItemClientData(item) -> ClientData
        
        Get the client object associated with a gallery item.
    %End

    void SetSelection(
        wxRibbonGalleryItem * item
    );
    %Docstring
        SetSelection(item)
        
        Set the selection to the given item, or removes the selection if item
        == NULL.
    %End

    wxRibbonGalleryItem * GetSelection() const;
    %Docstring
        GetSelection() -> RibbonGalleryItem
        
        Get the currently selected item, or NULL if there is none.
    %End

    wxRibbonGalleryItem * GetHoveredItem() const;
    %Docstring
        GetHoveredItem() -> RibbonGalleryItem
        
        Get the currently hovered item, or NULL if there is none.
    %End

    wxRibbonGalleryItem * GetActiveItem() const;
    %Docstring
        GetActiveItem() -> RibbonGalleryItem
        
        Get the currently active item, or NULL if there is none.
    %End

    wxRibbonGalleryButtonState GetUpButtonState() const;
    %Docstring
        GetUpButtonState() -> RibbonGalleryButtonState
        
        Get the state of the scroll up button.
    %End

    wxRibbonGalleryButtonState GetDownButtonState() const;
    %Docstring
        GetDownButtonState() -> RibbonGalleryButtonState
        
        Get the state of the scroll down button.
    %End

    wxRibbonGalleryButtonState GetExtensionButtonState() const;
    %Docstring
        GetExtensionButtonState() -> RibbonGalleryButtonState
        
        Get the state of the "extension" button.
    %End

    bool IsHovered() const;
    %Docstring
        IsHovered() -> bool
        
        Query is the mouse is currently hovered over the gallery.
    %End

    bool ScrollLines(
        int lines
    );
    %Docstring
        ScrollLines(lines) -> bool
        
        Scroll the gallery contents by some amount.
    %End

    bool ScrollPixels(
        int pixels
    );
    %Docstring
        ScrollPixels(pixels) -> bool
        
        Scroll the gallery contents by some fine-grained amount.
    %End

    void EnsureVisible(
        const wxRibbonGalleryItem * item
    );
    %Docstring
        EnsureVisible(item)
        
        Scroll the gallery to ensure that the given item is visible.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ActiveItem, get=GetActiveItem)
    %Property(name=Count, get=GetCount)
    %Property(name=DownButtonState, get=GetDownButtonState)
    %Property(name=ExtensionButtonState, get=GetExtensionButtonState)
    %Property(name=HoveredItem, get=GetHoveredItem)
    %Property(name=Selection, get=GetSelection, set=SetSelection)
    %Property(name=UpButtonState, get=GetUpButtonState)
};  // end of class wxRibbonGallery


class wxRibbonGalleryEvent : wxCommandEvent
{
    %Docstring
        RibbonGalleryEvent(command_type=wx.wxEVT_NULL, win_id=0, gallery=None, item=None)
    %End
    %TypeHeaderCode
        #include <wx/ribbon/gallery.h>
    %End

public:
    wxRibbonGalleryEvent(
        wxEventType command_type = wxEVT_NULL,
        int win_id = 0,
        wxRibbonGallery * gallery = NULL,
        wxRibbonGalleryItem * item = NULL
    );

    wxRibbonGallery * GetGallery();
    %Docstring
        GetGallery() -> RibbonGallery
        
        Returns the gallery which the event relates to.
    %End

    wxRibbonGalleryItem * GetGalleryItem();
    %Docstring
        GetGalleryItem() -> RibbonGalleryItem
        
        Returns the gallery item which the event relates to, or NULL if it
        does not relate to an item.
    %End

    void SetGallery(
        wxRibbonGallery * gallery
    );
    %Docstring
        SetGallery(gallery)
        
        Sets the gallery relating to this event.
    %End

    void SetGalleryItem(
        wxRibbonGalleryItem * item
    );
    %Docstring
        SetGalleryItem(item)
        
        Sets the gallery item relating to this event.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxRibbonGalleryEvent& operator=(const wxRibbonGalleryEvent&);


    public:


    %Property(name=Gallery, get=GetGallery, set=SetGallery)
    %Property(name=GalleryItem, get=GetGalleryItem, set=SetGalleryItem)
};  // end of class wxRibbonGalleryEvent


%Extract(id=pycode_ribbon)
EVT_RIBBONGALLERY_HOVER_CHANGED = wx.PyEventBinder( wxEVT_RIBBONGALLERY_HOVER_CHANGED, 1 )
EVT_RIBBONGALLERY_SELECTED = wx.PyEventBinder( wxEVT_RIBBONGALLERY_SELECTED, 1 )
EVT_RIBBONGALLERY_CLICKED = wx.PyEventBinder( wxEVT_RIBBONGALLERY_CLICKED, 1 )

%End


//---------------------------------------------------------------------------

