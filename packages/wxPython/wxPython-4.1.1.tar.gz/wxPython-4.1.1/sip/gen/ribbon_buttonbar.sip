//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _ribbon.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/ribbon/buttonbar.h>
%End


//---------------------------------------------------------------------------

        // forward declarations
        class wxRibbonButtonBarButtonBase;


enum wxRibbonButtonBarButtonState
{
    wxRIBBON_BUTTONBAR_BUTTON_SMALL,
    wxRIBBON_BUTTONBAR_BUTTON_MEDIUM,
    wxRIBBON_BUTTONBAR_BUTTON_LARGE,
    wxRIBBON_BUTTONBAR_BUTTON_SIZE_MASK,
    wxRIBBON_BUTTONBAR_BUTTON_NORMAL_HOVERED,
    wxRIBBON_BUTTONBAR_BUTTON_DROPDOWN_HOVERED,
    wxRIBBON_BUTTONBAR_BUTTON_HOVER_MASK,
    wxRIBBON_BUTTONBAR_BUTTON_NORMAL_ACTIVE,
    wxRIBBON_BUTTONBAR_BUTTON_DROPDOWN_ACTIVE,
    wxRIBBON_BUTTONBAR_BUTTON_ACTIVE_MASK,
    wxRIBBON_BUTTONBAR_BUTTON_DISABLED,
    wxRIBBON_BUTTONBAR_BUTTON_TOGGLED,
    wxRIBBON_BUTTONBAR_BUTTON_STATE_MASK
};

wxEventType wxEVT_RIBBONBUTTONBAR_CLICKED   /PyName=wxEVT_RIBBONBUTTONBAR_CLICKED/;

wxEventType wxEVT_RIBBONBUTTONBAR_DROPDOWN_CLICKED   /PyName=wxEVT_RIBBONBUTTONBAR_DROPDOWN_CLICKED/;

class wxRibbonButtonBar : wxRibbonControl
{
    %Docstring
        RibbonButtonBar()
        RibbonButtonBar(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)
        
        A ribbon button bar is similar to a traditional toolbar.
    %End
    %TypeHeaderCode
        #include <wx/ribbon/buttonbar.h>
    %End

public:
    wxRibbonButtonBar();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxRibbonButtonBar(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxRibbonButtonBar();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0) -> bool
        
        Create a button bar in two-step button bar construction.
    %End

    wxRibbonButtonBarButtonBase * AddButton(
        int button_id,
        const wxString & label,
        const wxBitmap & bitmap,
        const wxString & help_string,
        wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL
    );
    %Docstring
        AddButton(button_id, label, bitmap, help_string, kind=RIBBON_BUTTON_NORMAL) -> RibbonButtonBarButtonBase
        AddButton(button_id, label, bitmap, bitmap_small=wx.NullBitmap, bitmap_disabled=wx.NullBitmap, bitmap_small_disabled=wx.NullBitmap, kind=RIBBON_BUTTON_NORMAL, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
        
        Add a button to the button bar (simple version).
    %End

    wxRibbonButtonBarButtonBase * AddButton(
        int button_id,
        const wxString & label,
        const wxBitmap & bitmap,
        const wxBitmap & bitmap_small = wxNullBitmap,
        const wxBitmap & bitmap_disabled = wxNullBitmap,
        const wxBitmap & bitmap_small_disabled = wxNullBitmap,
        wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL,
        const wxString & help_string = wxEmptyString
    );

    wxRibbonButtonBarButtonBase * AddDropdownButton(
        int button_id,
        const wxString & label,
        const wxBitmap & bitmap,
        const wxString & help_string = wxEmptyString
    );
    %Docstring
        AddDropdownButton(button_id, label, bitmap, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
        
        Add a dropdown button to the button bar (simple version).
    %End

    wxRibbonButtonBarButtonBase * AddHybridButton(
        int button_id,
        const wxString & label,
        const wxBitmap & bitmap,
        const wxString & help_string = wxEmptyString
    );
    %Docstring
        AddHybridButton(button_id, label, bitmap, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
        
        Add a hybrid button to the button bar (simple version).
    %End

    wxRibbonButtonBarButtonBase * AddToggleButton(
        int button_id,
        const wxString & label,
        const wxBitmap & bitmap,
        const wxString & help_string = wxEmptyString
    );
    %Docstring
        AddToggleButton(button_id, label, bitmap, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
        
        Add a toggle button to the button bar (simple version).
    %End

    wxRibbonButtonBarButtonBase * InsertButton(
        size_t pos,
        int button_id,
        const wxString & label,
        const wxBitmap & bitmap,
        const wxString & help_string,
        wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL
    );
    %Docstring
        InsertButton(pos, button_id, label, bitmap, help_string, kind=RIBBON_BUTTON_NORMAL) -> RibbonButtonBarButtonBase
        InsertButton(pos, button_id, label, bitmap, bitmap_small=wx.NullBitmap, bitmap_disabled=wx.NullBitmap, bitmap_small_disabled=wx.NullBitmap, kind=RIBBON_BUTTON_NORMAL, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
        
        Inserts a button to the button bar (simple version) at the given
        position.
    %End

    wxRibbonButtonBarButtonBase * InsertButton(
        size_t pos,
        int button_id,
        const wxString & label,
        const wxBitmap & bitmap,
        const wxBitmap & bitmap_small = wxNullBitmap,
        const wxBitmap & bitmap_disabled = wxNullBitmap,
        const wxBitmap & bitmap_small_disabled = wxNullBitmap,
        wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL,
        const wxString & help_string = wxEmptyString
    );

    wxRibbonButtonBarButtonBase * InsertDropdownButton(
        size_t pos,
        int button_id,
        const wxString & label,
        const wxBitmap & bitmap,
        const wxString & help_string = wxEmptyString
    );
    %Docstring
        InsertDropdownButton(pos, button_id, label, bitmap, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
        
        Inserts a dropdown button to the button bar (simple version) at the
        given position.
    %End

    wxRibbonButtonBarButtonBase * InsertHybridButton(
        size_t pos,
        int button_id,
        const wxString & label,
        const wxBitmap & bitmap,
        const wxString & help_string = wxEmptyString
    );
    %Docstring
        InsertHybridButton(pos, button_id, label, bitmap, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
        
        Inserts a hybrid button to the button bar (simple version) at the
        given position.
    %End

    wxRibbonButtonBarButtonBase * InsertToggleButton(
        size_t pos,
        int button_id,
        const wxString & label,
        const wxBitmap & bitmap,
        const wxString & help_string = wxEmptyString
    );
    %Docstring
        InsertToggleButton(pos, button_id, label, bitmap, help_string=wx.EmptyString) -> RibbonButtonBarButtonBase
        
        Inserts a toggle button to the button bar (simple version) at the
        given position.
    %End

    size_t GetButtonCount() const;
    %Docstring
        GetButtonCount() -> size_t
        
        Returns the number of buttons in this button bar.
    %End

    void SetItemClientObject(
        wxRibbonButtonBarButtonBase * item,
        wxClientData * data   /Transfer/
    )   /PyName=SetItemClientData/;
    %Docstring
        SetItemClientData(item, data)
        
        Set the client object associated with a button.
    %End

    wxClientData * GetItemClientObject(
        const wxRibbonButtonBarButtonBase * item
    ) const   /PyName=GetItemClientData/;
    %Docstring
        GetItemClientData(item) -> ClientData
        
        Get the client object associated with a button.
    %End

    wxRibbonButtonBarButtonBase * GetItem(
        size_t n
    ) const;
    %Docstring
        GetItem(n) -> RibbonButtonBarButtonBase
        
        Returns the N-th button of the bar.
    %End

    wxRibbonButtonBarButtonBase * GetItemById(
        int id
    ) const;
    %Docstring
        GetItemById(id) -> RibbonButtonBarButtonBase
        
        Returns the first button having a given id or NULL if none matches.
    %End

    int GetItemId(
        wxRibbonButtonBarButtonBase * item
    ) const;
    %Docstring
        GetItemId(item) -> int
        
        Returns the id of a button.
    %End

    bool Realize();
    %Docstring
        Realize() -> bool
        
        Calculate button layouts and positions.
    %End

    void ClearButtons();
    %Docstring
        ClearButtons()
        
        Delete all buttons from the button bar.
    %End

    bool DeleteButton(
        int button_id
    );
    %Docstring
        DeleteButton(button_id) -> bool
        
        Delete a single button from the button bar.
    %End

    void EnableButton(
        int button_id,
        bool enable = true
    );
    %Docstring
        EnableButton(button_id, enable=True)
        
        Enable or disable a single button on the bar.
    %End

    void ToggleButton(
        int button_id,
        bool checked
    );
    %Docstring
        ToggleButton(button_id, checked)
        
        Set a toggle button to the checked or unchecked state.
    %End

    void SetButtonIcon(
        int button_id,
        const wxBitmap & bitmap,
        const wxBitmap & bitmap_small = wxNullBitmap,
        const wxBitmap & bitmap_disabled = wxNullBitmap,
        const wxBitmap & bitmap_small_disabled = wxNullBitmap
    );
    %Docstring
        SetButtonIcon(button_id, bitmap, bitmap_small=wx.NullBitmap, bitmap_disabled=wx.NullBitmap, bitmap_small_disabled=wx.NullBitmap)
        
        Changes the bitmap of an existing button.
    %End

    void SetButtonText(
        int button_id,
        const wxString & label
    );
    %Docstring
        SetButtonText(button_id, label)
        
        Changes the label text of an existing button.
    %End

    void SetButtonTextMinWidth(
        int button_id,
        int min_width_medium,
        int min_width_large
    );
    %Docstring
        SetButtonTextMinWidth(button_id, min_width_medium, min_width_large)
        SetButtonTextMinWidth(button_id, label)
        
        Sets the minimum width of the button label, to indicate to the
        wxRibbonArtProvider layout mechanism that this is the minimum required
        size.
    %End

    void SetButtonTextMinWidth(
        int button_id,
        const wxString & label
    );

    void SetButtonMinSizeClass(
        int button_id,
        wxRibbonButtonBarButtonState min_size_class
    );
    %Docstring
        SetButtonMinSizeClass(button_id, min_size_class)
        
        Sets the minimum size class of a ribbon button.
    %End

    void SetButtonMaxSizeClass(
        int button_id,
        wxRibbonButtonBarButtonState max_size_class
    );
    %Docstring
        SetButtonMaxSizeClass(button_id, max_size_class)
        
        Sets the maximum size class of a ribbon button.
    %End

    wxRibbonButtonBarButtonBase * GetActiveItem() const;
    %Docstring
        GetActiveItem() -> RibbonButtonBarButtonBase
        
        Returns the active item of the button bar or NULL if there is none.
    %End

    wxRibbonButtonBarButtonBase * GetHoveredItem() const;
    %Docstring
        GetHoveredItem() -> RibbonButtonBarButtonBase
        
        Returns the hovered item of the button bar or NULL if there is none.
    %End

    void SetShowToolTipsForDisabled(
        bool show
    );
    %Docstring
        SetShowToolTipsForDisabled(show)
        
        Indicates whether tooltips are shown for disabled buttons.
    %End

    bool GetShowToolTipsForDisabled() const;
    %Docstring
        GetShowToolTipsForDisabled() -> bool
        
        Sets whether tooltips should be shown for disabled buttons or not.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ActiveItem, get=GetActiveItem)
    %Property(name=ButtonCount, get=GetButtonCount)
    %Property(name=HoveredItem, get=GetHoveredItem)
    %Property(name=ShowToolTipsForDisabled, get=GetShowToolTipsForDisabled, set=SetShowToolTipsForDisabled)
};  // end of class wxRibbonButtonBar


class wxRibbonButtonBarEvent : wxCommandEvent
{
    %Docstring
        RibbonButtonBarEvent(command_type=wx.wxEVT_NULL, win_id=0, bar=None, button=None)
        
        Event used to indicate various actions relating to a button on a
        wxRibbonButtonBar.
    %End
    %TypeHeaderCode
        #include <wx/ribbon/buttonbar.h>
    %End

public:
    wxRibbonButtonBarEvent(
        wxEventType command_type = wxEVT_NULL,
        int win_id = 0,
        wxRibbonButtonBar * bar = NULL,
        wxRibbonButtonBarButtonBase * button = NULL
    );

    wxRibbonButtonBar * GetBar();
    %Docstring
        GetBar() -> RibbonButtonBar
        
        Returns the bar which contains the button which the event relates to.
    %End

    void SetBar(
        wxRibbonButtonBar * bar
    );
    %Docstring
        SetBar(bar)
        
        Sets the button bar relating to this event.
    %End

    wxRibbonButtonBarButtonBase * GetButton();
    %Docstring
        GetButton() -> RibbonButtonBarButtonBase
        
        Returns the button which the event relates to.
    %End

    void SetButton(
        wxRibbonButtonBarButtonBase * bar
    );
    %Docstring
        SetButton(bar)
        
        Sets the button relating to this event.
    %End

    bool PopupMenu(
        wxMenu * menu
    );
    %Docstring
        PopupMenu(menu) -> bool
        
        Display a popup menu as a result of this (dropdown clicked) event.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxRibbonButtonBarEvent& operator=(const wxRibbonButtonBarEvent&);


    public:


    %Property(name=Bar, get=GetBar, set=SetBar)
    %Property(name=Button, get=GetButton, set=SetButton)
};  // end of class wxRibbonButtonBarEvent


%Extract(id=pycode_ribbon)
EVT_RIBBONBUTTONBAR_CLICKED = wx.PyEventBinder( wxEVT_RIBBONBUTTONBAR_CLICKED, 1 )
EVT_RIBBONBUTTONBAR_DROPDOWN_CLICKED = wx.PyEventBinder( wxEVT_RIBBONBUTTONBAR_DROPDOWN_CLICKED, 1 )

%End


//---------------------------------------------------------------------------

