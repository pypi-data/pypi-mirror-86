//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _html2.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
        #include <wx/webview.h>
        #if wxUSE_WEBVIEW_IE && defined(__WXMSW__)
            #include <wx/msw/webview_ie.h>
            #include <wx/msw/webview_edge.h>
        #endif
        
#include <wx/filesys.h>
        #if wxUSE_WEBVIEW && !defined(wxWebViewIE_H)
        enum wxWebViewIE_EmulationLevel
        {
            wxWEBVIEWIE_EMU_DEFAULT =    0,
            wxWEBVIEWIE_EMU_IE7 =        7000,
            wxWEBVIEWIE_EMU_IE8 =        8000,
            wxWEBVIEWIE_EMU_IE8_FORCE =  8888,
            wxWEBVIEWIE_EMU_IE9 =        9000,
            wxWEBVIEWIE_EMU_IE9_FORCE =  9999,
            wxWEBVIEWIE_EMU_IE10 =       10000,
            wxWEBVIEWIE_EMU_IE10_FORCE = 10001,
            wxWEBVIEWIE_EMU_IE11 =       11000,
            wxWEBVIEWIE_EMU_IE11_FORCE = 11001
        };
        #endif
        
#if !wxUSE_WEBVIEW
class wxWebViewHistoryItem;
class wxWebViewHandler;
class wxWebViewArchiveHandler;
class wxWebViewFSHandler;
class wxWebView;
class wxWebViewEvent;
class wxWebViewFactory;
extern const char* wxWebViewDefaultURLStr;
extern const char* wxWebViewNameStr;
extern const char* wxWebViewBackendWebKit;
extern const char* wxWebViewBackendEdge;
extern const char* wxWebViewBackendIE;
extern const char* wxWebViewBackendDefault;

enum wxWebViewZoom {
    wxWEBVIEW_ZOOM_TINY,
    wxWEBVIEW_ZOOM_SMALL,
    wxWEBVIEW_ZOOM_MEDIUM,
    wxWEBVIEW_ZOOM_LARGE,
    wxWEBVIEW_ZOOM_LARGEST,
};

enum wxWebViewZoomType {
    wxWEBVIEW_ZOOM_TYPE_LAYOUT,
    wxWEBVIEW_ZOOM_TYPE_TEXT,
};

enum wxWebViewNavigationError {
    wxWEBVIEW_NAV_ERR_CONNECTION,
    wxWEBVIEW_NAV_ERR_CERTIFICATE,
    wxWEBVIEW_NAV_ERR_AUTH,
    wxWEBVIEW_NAV_ERR_SECURITY,
    wxWEBVIEW_NAV_ERR_NOT_FOUND,
    wxWEBVIEW_NAV_ERR_REQUEST,
    wxWEBVIEW_NAV_ERR_USER_CANCELLED,
    wxWEBVIEW_NAV_ERR_OTHER,
};

enum wxWebViewReloadFlags {
    wxWEBVIEW_RELOAD_DEFAULT,
    wxWEBVIEW_RELOAD_NO_CACHE,
};

enum wxWebViewFindFlags {
    wxWEBVIEW_FIND_WRAP,
    wxWEBVIEW_FIND_ENTIRE_WORD,
    wxWEBVIEW_FIND_MATCH_CASE,
    wxWEBVIEW_FIND_HIGHLIGHT_RESULT,
    wxWEBVIEW_FIND_BACKWARDS,
    wxWEBVIEW_FIND_DEFAULT,
};

enum wxWebViewNavigationActionFlags {
    wxWEBVIEW_NAV_ACTION_NONE,
    wxWEBVIEW_NAV_ACTION_USER,
    wxWEBVIEW_NAV_ACTION_OTHER,
};

enum wxWebViewIE_EmulationLevel {
    wxWEBVIEWIE_EMU_DEFAULT,
    wxWEBVIEWIE_EMU_IE7,
    wxWEBVIEWIE_EMU_IE8,
    wxWEBVIEWIE_EMU_IE8_FORCE,
    wxWEBVIEWIE_EMU_IE9,
    wxWEBVIEWIE_EMU_IE9_FORCE,
    wxWEBVIEWIE_EMU_IE10,
    wxWEBVIEWIE_EMU_IE10_FORCE,
    wxWEBVIEWIE_EMU_IE11,
    wxWEBVIEWIE_EMU_IE11_FORCE,
};
extern wxEventType wxEVT_WEBVIEW_NAVIGATING;
extern wxEventType wxEVT_WEBVIEW_NAVIGATED;
extern wxEventType wxEVT_WEBVIEW_LOADED;
extern wxEventType wxEVT_WEBVIEW_ERROR;
extern wxEventType wxEVT_WEBVIEW_NEWWINDOW;
extern wxEventType wxEVT_WEBVIEW_TITLE_CHANGED;

class wxWebViewHistoryItem {
public:
    wxWebViewHistoryItem(const wxString &url, const wxString &title)
        { wxPyRaiseNotImplemented(); }

    wxString GetUrl()
        { return wxEmptyString; }

    wxString GetTitle()
        { return wxEmptyString; }

};

class wxWebViewHandler {
public:
    wxWebViewHandler(const wxString& scheme="")
        { wxPyRaiseNotImplemented(); }

    virtual wxFSFile * GetFile(const wxString &uri)=0;
    virtual wxString GetName() const 
        { return wxEmptyString; }

    virtual void SetSecurityURL(const wxString &url)
        { }

    virtual wxString GetSecurityURL() const 
        { return wxEmptyString; }

};

class wxWebViewArchiveHandler : public wxWebViewHandler {
public:
    wxWebViewArchiveHandler(const wxString &scheme)
        { wxPyRaiseNotImplemented(); }

    virtual wxFSFile * GetFile(const wxString &uri)
        { return NULL; }

};

class wxWebViewFSHandler : public wxWebViewHandler {
public:
    wxWebViewFSHandler(const wxString &scheme)
        { wxPyRaiseNotImplemented(); }

    virtual wxFSFile * GetFile(const wxString &uri)
        { return NULL; }

};

class wxWebView : public wxControl {
public:
    virtual bool CanCopy() const =0;
    virtual bool CanCut() const =0;
    virtual bool CanPaste() const =0;
    virtual void Copy()=0;
    virtual void Cut()=0;
    virtual void Paste()=0;
    virtual void EnableContextMenu(bool enable=true)
        { }

    virtual bool IsContextMenuEnabled() const 
        { return false; }

    virtual void EnableAccessToDevTools(bool enable=true)
        { }

    virtual bool IsAccessToDevToolsEnabled() const 
        { return false; }

    virtual bool CanGoBack() const =0;
    virtual bool CanGoForward() const =0;
    virtual void ClearHistory()=0;
    virtual void EnableHistory(bool enable=true)=0;
    virtual wxVector< wxSharedPtr< wxWebViewHistoryItem > > GetBackwardHistory()=0;
    virtual wxVector< wxSharedPtr< wxWebViewHistoryItem > > GetForwardHistory()=0;
    virtual void GoBack()=0;
    virtual void GoForward()=0;
    virtual void LoadHistoryItem(wxSharedPtr< wxWebViewHistoryItem > item)=0;
    virtual void ClearSelection()=0;
    virtual void DeleteSelection()=0;
    virtual wxString GetSelectedSource() const =0;
    virtual wxString GetSelectedText() const =0;
    virtual bool HasSelection() const =0;
    virtual void SelectAll()=0;
    virtual bool CanRedo() const =0;
    virtual bool CanUndo() const =0;
    virtual void Redo()=0;
    virtual void Undo()=0;
    virtual long Find(const wxString &text, wxWebViewFindFlags flags=wxWEBVIEW_FIND_DEFAULT)=0;
    virtual bool CanSetZoomType(wxWebViewZoomType type) const =0;
    virtual wxWebViewZoom GetZoom() const =0;
    virtual float GetZoomFactor() const =0;
    virtual wxWebViewZoomType GetZoomType() const =0;
    virtual void SetZoom(wxWebViewZoom zoom)=0;
    virtual void SetZoomFactor(float zoom)=0;
    virtual void SetZoomType(wxWebViewZoomType zoomType)=0;
    virtual bool Create(wxWindow *parent, wxWindowID id, const wxString &url=wxWebViewDefaultURLStr, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=0, const wxString &name=wxWebViewNameStr)=0;
    virtual wxString GetCurrentTitle() const =0;
    virtual wxString GetCurrentURL() const =0;
    virtual void * GetNativeBackend() const =0;
    virtual wxString GetPageSource() const =0;
    virtual wxString GetPageText() const =0;
    virtual bool IsBusy() const =0;
    virtual bool IsEditable() const =0;
    virtual void LoadURL(const wxString &url)=0;
    virtual void Print()=0;
    virtual void RegisterHandler(wxSharedPtr< wxWebViewHandler > handler)=0;
    virtual void Reload(wxWebViewReloadFlags flags=wxWEBVIEW_RELOAD_DEFAULT)=0;
    virtual bool RunScript(const wxString &javascript, wxString *output=NULL)=0;
    virtual void SetEditable(bool enable=true)=0;
    virtual void SetPage(const wxString &html, const wxString &baseUrl)=0;
    virtual void SetPage(wxInputStream &html, wxString baseUrl)
        { }

    virtual void Stop()=0;
    static wxWebView * New(const wxString &backend=wxWebViewBackendDefault)
        { wxPyRaiseNotImplemented(); return NULL; }

    static wxWebView * New(wxWindow *parent, wxWindowID id, const wxString &url=wxWebViewDefaultURLStr, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, const wxString &backend=wxWebViewBackendDefault, long style=0, const wxString &name=wxWebViewNameStr)
        { wxPyRaiseNotImplemented(); return NULL; }

    static void RegisterFactory(const wxString &backend, wxSharedPtr< wxWebViewFactory > factory)
        { wxPyRaiseNotImplemented(); }

    static bool IsBackendAvailable(const wxString &backend)
        { wxPyRaiseNotImplemented(); return false; }

};

class wxWebViewEvent : public wxNotifyEvent {
public:
    wxWebViewEvent()
        { wxPyRaiseNotImplemented(); }

    wxWebViewEvent(wxEventType type, int id, const wxString href, const wxString target, wxWebViewNavigationActionFlags flags=wxWEBVIEW_NAV_ACTION_NONE)
        { wxPyRaiseNotImplemented(); }

    const wxString & GetTarget() const 
        { return wxEmptyString; }

    const wxString & GetURL() const 
        { return wxEmptyString; }

    wxWebViewNavigationActionFlags GetNavigationAction() const 
        { return wxWEBVIEW_NAV_ACTION_NONE; }

};

class wxWebViewFactory : public wxObject {
public:
    virtual wxWebView * Create()=0;
    virtual wxWebView * Create(wxWindow *parent, wxWindowID id, const wxString &url=wxWebViewDefaultURLStr, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=0, const wxString &name=wxWebViewNameStr)=0;
    virtual bool IsAvailable()
        { return false; }

};
#endif //!wxUSE_WEBVIEW

%End

%ModuleCode
#if !wxUSE_WEBVIEW
const char* wxWebViewDefaultURLStr = "";
const char* wxWebViewNameStr = "";
const char* wxWebViewBackendWebKit = "";
const char* wxWebViewBackendEdge = "";
const char* wxWebViewBackendIE = "";
const char* wxWebViewBackendDefault = "";
wxEventType wxEVT_WEBVIEW_NAVIGATING;
wxEventType wxEVT_WEBVIEW_NAVIGATED;
wxEventType wxEVT_WEBVIEW_LOADED;
wxEventType wxEVT_WEBVIEW_ERROR;
wxEventType wxEVT_WEBVIEW_NEWWINDOW;
wxEventType wxEVT_WEBVIEW_TITLE_CHANGED;
#endif //!wxUSE_WEBVIEW

%End

//---------------------------------------------------------------------------

const char* wxWebViewDefaultURLStr;

const char* wxWebViewNameStr;

const char* wxWebViewBackendWebKit;

const char* wxWebViewBackendEdge;

const char* wxWebViewBackendIE;

const char* wxWebViewBackendDefault;

enum wxWebViewZoom
{
    wxWEBVIEW_ZOOM_TINY,
    wxWEBVIEW_ZOOM_SMALL,
    wxWEBVIEW_ZOOM_MEDIUM,
    wxWEBVIEW_ZOOM_LARGE,
    wxWEBVIEW_ZOOM_LARGEST
};

enum wxWebViewZoomType
{
    wxWEBVIEW_ZOOM_TYPE_LAYOUT,
    wxWEBVIEW_ZOOM_TYPE_TEXT
};

enum wxWebViewNavigationError
{
    wxWEBVIEW_NAV_ERR_CONNECTION,
    wxWEBVIEW_NAV_ERR_CERTIFICATE,
    wxWEBVIEW_NAV_ERR_AUTH,
    wxWEBVIEW_NAV_ERR_SECURITY,
    wxWEBVIEW_NAV_ERR_NOT_FOUND,
    wxWEBVIEW_NAV_ERR_REQUEST,
    wxWEBVIEW_NAV_ERR_USER_CANCELLED,
    wxWEBVIEW_NAV_ERR_OTHER
};

enum wxWebViewReloadFlags
{
    wxWEBVIEW_RELOAD_DEFAULT,
    wxWEBVIEW_RELOAD_NO_CACHE
};

enum wxWebViewFindFlags
{
    wxWEBVIEW_FIND_WRAP,
    wxWEBVIEW_FIND_ENTIRE_WORD,
    wxWEBVIEW_FIND_MATCH_CASE,
    wxWEBVIEW_FIND_HIGHLIGHT_RESULT,
    wxWEBVIEW_FIND_BACKWARDS,
    wxWEBVIEW_FIND_DEFAULT
};

enum wxWebViewNavigationActionFlags
{
    wxWEBVIEW_NAV_ACTION_NONE,
    wxWEBVIEW_NAV_ACTION_USER,
    wxWEBVIEW_NAV_ACTION_OTHER
};

enum wxWebViewIE_EmulationLevel
{
    wxWEBVIEWIE_EMU_DEFAULT,
    wxWEBVIEWIE_EMU_IE7,
    wxWEBVIEWIE_EMU_IE8,
    wxWEBVIEWIE_EMU_IE8_FORCE,
    wxWEBVIEWIE_EMU_IE9,
    wxWEBVIEWIE_EMU_IE9_FORCE,
    wxWEBVIEWIE_EMU_IE10,
    wxWEBVIEWIE_EMU_IE10_FORCE,
    wxWEBVIEWIE_EMU_IE11,
    wxWEBVIEWIE_EMU_IE11_FORCE
};

wxEventType wxEVT_WEBVIEW_NAVIGATING   /PyName=wxEVT_WEBVIEW_NAVIGATING/;

wxEventType wxEVT_WEBVIEW_NAVIGATED   /PyName=wxEVT_WEBVIEW_NAVIGATED/;

wxEventType wxEVT_WEBVIEW_LOADED   /PyName=wxEVT_WEBVIEW_LOADED/;

wxEventType wxEVT_WEBVIEW_ERROR   /PyName=wxEVT_WEBVIEW_ERROR/;

wxEventType wxEVT_WEBVIEW_NEWWINDOW   /PyName=wxEVT_WEBVIEW_NEWWINDOW/;

wxEventType wxEVT_WEBVIEW_TITLE_CHANGED   /PyName=wxEVT_WEBVIEW_TITLE_CHANGED/;

class wxWebViewHistoryItem
{
    %Docstring
        WebViewHistoryItem(url, title)
        
        A simple class that contains the URL and title of an element of the
        history of a wxWebView.
    %End
    %TypeHeaderCode
        #include <wx/webview.h>
    %End

public:
    wxWebViewHistoryItem(
        const wxString & url,
        const wxString & title
    );

    wxString GetUrl();
    %Docstring
        GetUrl() -> String
    %End

    wxString GetTitle();
    %Docstring
        GetTitle() -> String
    %End

    public:


    %Property(name=Title, get=GetTitle)
    %Property(name=Url, get=GetUrl)
};  // end of class wxWebViewHistoryItem


class wxWebViewHandler
{
    %Docstring
        WebViewHandler(scheme)
        
        The base class for handling custom schemes in wxWebView, for example
        to allow virtual file system support.
    %End
    %TypeHeaderCode
        #include <wx/webview.h>
    %End

public:
    wxWebViewHandler(
        const wxString & scheme
    );

    virtual
    wxFSFile * GetFile(
        const wxString & uri
    ) = 0   /Factory/;
    %Docstring
        GetFile(uri) -> wx.FSFile
    %End

    virtual
    wxString GetName() const;
    %Docstring
        GetName() -> String
    %End

    virtual
    void SetSecurityURL(
        const wxString & url
    );
    %Docstring
        SetSecurityURL(url)
        
        Sets a custom security URL.
    %End

    virtual
    wxString GetSecurityURL() const;
    %Docstring
        GetSecurityURL() -> String
    %End

    public:


    %Property(name=Name, get=GetName)
    %Property(name=SecurityURL, get=GetSecurityURL, set=SetSecurityURL)
};  // end of class wxWebViewHandler


class wxWebViewArchiveHandler : wxWebViewHandler
{
    %Docstring
        WebViewArchiveHandler(scheme)
        
        A custom handler for the file scheme which also supports loading from
        archives.
    %End
    %TypeHeaderCode
        #include <wx/webviewarchivehandler.h>
    %End

public:
    wxWebViewArchiveHandler(
        const wxString & scheme
    );

    virtual
    wxFSFile * GetFile(
        const wxString & uri
    )   /Factory/;
    %Docstring
        GetFile(uri) -> wx.FSFile
    %End

};  // end of class wxWebViewArchiveHandler


class wxWebViewFSHandler : wxWebViewHandler
{
    %Docstring
        WebViewFSHandler(scheme)
        
        A wxWebView file system handler to support standard wxFileSystem
        protocols of the form  example:page.htm  The handler allows wxWebView
        to use wxFileSystem in a similar fashion to its use with wxHtml.
    %End
    %TypeHeaderCode
        #include <wx/webviewfshandler.h>
    %End

public:
    wxWebViewFSHandler(
        const wxString & scheme
    );

    virtual
    wxFSFile * GetFile(
        const wxString & uri
    )   /Factory/;
    %Docstring
        GetFile(uri) -> wx.FSFile
    %End

};  // end of class wxWebViewFSHandler


class wxWebView : wxControl   /Abstract/
{
    %Docstring
        This control may be used to render web (HTML / CSS / javascript)
        documents.
    %End
    %TypeHeaderCode
        #include <wx/webview.h>
    %End

    %TypeCode
        
                #if wxUSE_WEBVIEW_IE && defined(__WXMSW__)
                #include <wx/msw/webview_ie.h>
                #include <wx/msw/registry.h>
        
                bool _do_MSWSetEmulationLevel(wxWebViewIE_EmulationLevel level)
                {
                    wxString programName;
                    wxPyBLOCK_THREADS(
                        programName = Py2wxString(PySys_GetObject("executable")));
                    programName = programName.AfterLast('\\');
        
                    // Registry key where emulation level for programs are set
                    static const wxChar* IE_EMULATION_KEY =
                        wxT("SOFTWARE\\Microsoft\\Internet Explorer\\Main")
                        wxT("\\FeatureControl\\FEATURE_BROWSER_EMULATION");
        
                    wxRegKey key(wxRegKey::HKCU, IE_EMULATION_KEY);
                    if ( !key.Exists() )
                    {
                        wxLogWarning(_("Failed to find web view emulation level in the registry"));
                        return false;
                    }
                    if ( level != wxWEBVIEWIE_EMU_DEFAULT )
                    {
                        if ( !key.SetValue(programName, level) )
                        {
                            wxLogWarning(_("Failed to set web view to modern emulation level"));
                            return false;
                        }
                    }
                    else
                    {
                        if ( !key.DeleteValue(programName) )
                        {
                            wxLogWarning(_("Failed to reset web view to standard emulation level"));
                            return false;
                        }
                    }
                    return true;
                }
                #endif
    %End
public:
    bool CanCopy() const;
    %Docstring
        CanCopy() -> bool
        
        Returns true if the current selection can be copied.
    %End

    bool CanCut() const;
    %Docstring
        CanCut() -> bool
        
        Returns true if the current selection can be cut.
    %End

    bool CanPaste() const;
    %Docstring
        CanPaste() -> bool
        
        Returns true if data can be pasted.
    %End

    void Copy();
    %Docstring
        Copy()
        
        Copies the current selection.
    %End

    void Cut();
    %Docstring
        Cut()
        
        Cuts the current selection.
    %End

    void Paste();
    %Docstring
        Paste()
        
        Pastes the current data.
    %End

    void EnableContextMenu(
        bool enable = true
    );
    %Docstring
        EnableContextMenu(enable=True)
        
        Enable or disable the right click context menu.
    %End

    bool IsContextMenuEnabled() const;
    %Docstring
        IsContextMenuEnabled() -> bool
        
        Returns true if a context menu will be shown on right click.
    %End

    void EnableAccessToDevTools(
        bool enable = true
    );
    %Docstring
        EnableAccessToDevTools(enable=True)
        
        Enable or disable access to dev tools for the user.
    %End

    bool IsAccessToDevToolsEnabled() const;
    %Docstring
        IsAccessToDevToolsEnabled() -> bool
        
        Returns true if dev tools are available to the user.
    %End

    bool CanGoBack() const;
    %Docstring
        CanGoBack() -> bool
        
        Returns true if it is possible to navigate backward in the history of
        visited pages.
    %End

    bool CanGoForward() const;
    %Docstring
        CanGoForward() -> bool
        
        Returns true if it is possible to navigate forward in the history of
        visited pages.
    %End

    void ClearHistory();
    %Docstring
        ClearHistory()
        
        Clear the history, this will also remove the visible page.
    %End

    void EnableHistory(
        bool enable = true
    );
    %Docstring
        EnableHistory(enable=True)
        
        Enable or disable the history.
    %End

    PyObject* GetBackwardHistory();
    %Docstring
        GetBackwardHistory() -> PyObject
        
        Returns a list of items in the back history.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWebView_GetBackwardHistory(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxWebView_GetBackwardHistory(wxWebView* self)
    {
        wxPyThreadBlocker blocker;
        PyObject* result = PyList_New(0);
        wxVector<wxSharedPtr<wxWebViewHistoryItem> >  vector = self->GetBackwardHistory();
        for (size_t idx=0; idx < vector.size(); idx++) {
            PyObject* obj;
            wxWebViewHistoryItem* item = new wxWebViewHistoryItem(*vector[idx].get());
            obj = wxPyConstructObject((void*)item, "wxWebViewHistoryItem", true);
            PyList_Append(result, obj);
            Py_DECREF(obj);
        }
        return result;
    }
    %End

    PyObject* GetForwardHistory();
    %Docstring
        GetForwardHistory() -> PyObject
        
        Returns a list of items in the forward history.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWebView_GetForwardHistory(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxWebView_GetForwardHistory(wxWebView* self)
    {
        wxPyThreadBlocker blocker;
        PyObject* result = PyList_New(0);
        wxVector<wxSharedPtr<wxWebViewHistoryItem> >  vector = self->GetForwardHistory();
        for (size_t idx=0; idx < vector.size(); idx++) {
            PyObject* obj;
            wxWebViewHistoryItem* item = new wxWebViewHistoryItem(*vector[idx].get());
            obj = wxPyConstructObject((void*)item, "wxWebViewHistoryItem", true);
            PyList_Append(result, obj);
            Py_DECREF(obj);
        }
        return result;
    }
    %End

    void GoBack();
    %Docstring
        GoBack()
        
        Navigate back in the history of visited pages.
    %End

    void GoForward();
    %Docstring
        GoForward()
        
        Navigate forward in the history of visited pages.
    %End

    void ClearSelection();
    %Docstring
        ClearSelection()
        
        Clears the current selection.
    %End

    void DeleteSelection();
    %Docstring
        DeleteSelection()
        
        Deletes the current selection.
    %End

    wxString GetSelectedSource() const;
    %Docstring
        GetSelectedSource() -> String
        
        Returns the currently selected source, if any.
    %End

    wxString GetSelectedText() const;
    %Docstring
        GetSelectedText() -> String
        
        Returns the currently selected text, if any.
    %End

    bool HasSelection() const;
    %Docstring
        HasSelection() -> bool
        
        Returns true if there is a current selection.
    %End

    void SelectAll();
    %Docstring
        SelectAll()
        
        Selects the entire page.
    %End

    bool CanRedo() const;
    %Docstring
        CanRedo() -> bool
        
        Returns true if there is an action to redo.
    %End

    bool CanUndo() const;
    %Docstring
        CanUndo() -> bool
        
        Returns true if there is an action to undo.
    %End

    void Redo();
    %Docstring
        Redo()
        
        Redos the last action.
    %End

    void Undo();
    %Docstring
        Undo()
        
        Undos the last action.
    %End

    long Find(
        const wxString & text,
        wxWebViewFindFlags flags = wxWEBVIEW_FIND_DEFAULT
    );
    %Docstring
        Find(text, flags=WEBVIEW_FIND_DEFAULT) -> long
        
        Finds a phrase on the current page and if found, the control will
        scroll the phrase into view and select it.
    %End

    bool CanSetZoomType(
        wxWebViewZoomType type
    ) const;
    %Docstring
        CanSetZoomType(type) -> bool
        
        Retrieve whether the current HTML engine supports a zoom type.
    %End

    wxWebViewZoom GetZoom() const;
    %Docstring
        GetZoom() -> WebViewZoom
        
        Get the zoom level of the page.
    %End

    float GetZoomFactor() const;
    %Docstring
        GetZoomFactor() -> float
        
        Get the zoom factor of the page.
    %End

    wxWebViewZoomType GetZoomType() const;
    %Docstring
        GetZoomType() -> WebViewZoomType
        
        Get how the zoom factor is currently interpreted.
    %End

    void SetZoom(
        wxWebViewZoom zoom
    );
    %Docstring
        SetZoom(zoom)
        
        Set the zoom level of the page.
    %End

    void SetZoomFactor(
        float zoom
    );
    %Docstring
        SetZoomFactor(zoom)
        
        Set the zoom factor of the page.
    %End

    void SetZoomType(
        wxWebViewZoomType zoomType
    );
    %Docstring
        SetZoomType(zoomType)
        
        Set how to interpret the zoom factor.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & url = wxWebViewDefaultURLStr,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxWebViewNameStr
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, url=WebViewDefaultURLStr, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, name=WebViewNameStr) -> bool
        
        Creation function for two-step creation.
    %End

    wxString GetCurrentTitle() const;
    %Docstring
        GetCurrentTitle() -> String
        
        Get the title of the current web page, or its URL/path if title is not
        available.
    %End

    wxString GetCurrentURL() const;
    %Docstring
        GetCurrentURL() -> String
        
        Get the URL of the currently displayed document.
    %End

    void * GetNativeBackend() const;
    %Docstring
        GetNativeBackend() -> void
        
        Return the pointer to the native backend used by this control.
    %End

    wxString GetPageSource() const;
    %Docstring
        GetPageSource() -> String
        
        Get the HTML source code of the currently displayed document.
    %End

    wxString GetPageText() const;
    %Docstring
        GetPageText() -> String
        
        Get the text of the current page.
    %End

    bool IsBusy() const;
    %Docstring
        IsBusy() -> bool
        
        Returns whether the web control is currently busy (e.g. loading a
        page).
    %End

    bool IsEditable() const;
    %Docstring
        IsEditable() -> bool
        
        Returns whether the web control is currently editable.
    %End

    void LoadURL(
        const wxString & url
    );
    %Docstring
        LoadURL(url)
        
        Load a web page from a URL.
    %End

    void Print();
    %Docstring
        Print()
        
        Opens a print dialog so that the user may print the currently
        displayed page.
    %End

    void RegisterHandler(
        wxWebViewHandler* handler   /Transfer/
    );
    %Docstring
        RegisterHandler(handler)
        
        Registers a custom scheme handler.
    %End
    %MethodCode
        sipCpp->RegisterHandler(wxSharedPtr<wxWebViewHandler>(handler));
    %End

    void Reload(
        wxWebViewReloadFlags flags = wxWEBVIEW_RELOAD_DEFAULT
    );
    %Docstring
        Reload(flags=WEBVIEW_RELOAD_DEFAULT)
        
        Reload the currently displayed URL.
    %End

    bool RunScript(
        const wxString & javascript,
        wxString * output   /Out/ = NULL
    );
    %Docstring
        RunScript(javascript) -> (bool, output)
        
        Runs the given JavaScript code.
    %End

    void SetEditable(
        bool enable = true
    );
    %Docstring
        SetEditable(enable=True)
        
        Set the editable property of the web control.
    %End

    void SetPage(
        const wxString & html,
        const wxString & baseUrl
    );
    %Docstring
        SetPage(html, baseUrl)
        SetPage(html, baseUrl)
        
        Set the displayed page source to the contents of the given string.
    %End

    void SetPage(
        wxInputStream & html,
        wxString baseUrl
    );

    void Stop();
    %Docstring
        Stop()
        
        Stop the current page loading process, if any.
    %End

    static
    wxWebView * New(
        const wxString & backend = wxWebViewBackendDefault
    )   /Factory/;
    %Docstring
        New(backend=WebViewBackendDefault) -> WebView
        New(parent, id=wx.ID_ANY, url=WebViewDefaultURLStr, pos=wx.DefaultPosition, size=wx.DefaultSize, backend=WebViewBackendDefault, style=0, name=WebViewNameStr) -> WebView
        
        Factory function to create a new wxWebView with two-step creation,
        wxWebView::Create should be called on the returned object.
    %End

    static
    wxWebView * New(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & url = wxWebViewDefaultURLStr,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        const wxString & backend = wxWebViewBackendDefault,
        long style = 0,
        const wxString & name = wxWebViewNameStr
    )   /Factory/;

    static
    void RegisterFactory(
        const wxString & backend,
        wxWebViewFactory* factory   /Transfer/
    );
    %Docstring
        RegisterFactory(backend, factory)
        
        Allows the registering of new backend for wxWebView.
    %End
    %MethodCode
        wxWebView::RegisterFactory(*backend, wxSharedPtr<wxWebViewFactory>(factory));
    %End

    static
    bool IsBackendAvailable(
        const wxString & backend
    );
    %Docstring
        IsBackendAvailable(backend) -> bool
        
        Allows to check if a specific backend is currently available.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    bool MSWSetEmulationLevel(
        wxWebViewIE_EmulationLevel level = wxWEBVIEWIE_EMU_IE11
    );
    %Docstring
        MSWSetEmulationLevel(level=WEBVIEWIE_EMU_IE11) -> bool
        
        Sets emulation level.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWebView_MSWSetEmulationLevel(level);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxWebView_MSWSetEmulationLevel(wxWebViewIE_EmulationLevel level)
    {
        #if wxUSE_WEBVIEW_IE && defined(__WXMSW__)
            return _do_MSWSetEmulationLevel(level);
        #else
            return false;
        #endif
    }
    %End

    static
    bool MSWSetModernEmulationLevel(
        bool modernLevel = true
    )   /Deprecated/;
    %Docstring
        MSWSetModernEmulationLevel(modernLevel=True) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWebView_MSWSetModernEmulationLevel(modernLevel);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxWebView_MSWSetModernEmulationLevel(bool modernLevel)
    {
        #if wxUSE_WEBVIEW_IE && defined(__WXMSW__)
            return _do_MSWSetEmulationLevel(modernLevel ? wxWEBVIEWIE_EMU_IE8
                                                        : wxWEBVIEWIE_EMU_DEFAULT);
        #else
            return false;
        #endif
    }
    %End

    public:


    %Property(name=BackwardHistory, get=GetBackwardHistory)
    %Property(name=CurrentTitle, get=GetCurrentTitle)
    %Property(name=CurrentURL, get=GetCurrentURL)
    %Property(name=ForwardHistory, get=GetForwardHistory)
    %Property(name=NativeBackend, get=GetNativeBackend)
    %Property(name=PageSource, get=GetPageSource)
    %Property(name=PageText, get=GetPageText)
    %Property(name=SelectedSource, get=GetSelectedSource)
    %Property(name=SelectedText, get=GetSelectedText)
    %Property(name=Zoom, get=GetZoom, set=SetZoom)
    %Property(name=ZoomFactor, get=GetZoomFactor, set=SetZoomFactor)
    %Property(name=ZoomType, get=GetZoomType, set=SetZoomType)
};  // end of class wxWebView


class wxWebViewEvent : wxNotifyEvent
{
    %Docstring
        WebViewEvent()
        WebViewEvent(type, id, href, target, flags=WEBVIEW_NAV_ACTION_NONE)
        
        A navigation event holds information about events associated with
        wxWebView objects.
    %End
    %TypeHeaderCode
        #include <wx/webview.h>
    %End

public:
    wxWebViewEvent();

    wxWebViewEvent(
        wxEventType type,
        int id,
        const wxString href,
        const wxString target,
        wxWebViewNavigationActionFlags flags = wxWEBVIEW_NAV_ACTION_NONE
    );

    const wxString & GetTarget() const;
    %Docstring
        GetTarget() -> String
        
        Get the name of the target frame which the url of this event has been
        or will be loaded into.
    %End

    const wxString & GetURL() const;
    %Docstring
        GetURL() -> String
        
        Get the URL being visited.
    %End

    wxWebViewNavigationActionFlags GetNavigationAction() const;
    %Docstring
        GetNavigationAction() -> WebViewNavigationActionFlags
        
        Get the type of navigation action.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxWebViewEvent& operator=(const wxWebViewEvent&);


    public:


    %Property(name=NavigationAction, get=GetNavigationAction)
    %Property(name=Target, get=GetTarget)
    %Property(name=URL, get=GetURL)
};  // end of class wxWebViewEvent


class wxWebViewFactory : wxObject
{
    %Docstring
        An abstract factory class for creating wxWebView backends.
    %End
    %TypeHeaderCode
        #include <wx/webview.h>
    %End

public:
    virtual
    wxWebView * Create() = 0;
    %Docstring
        Create() -> WebView
        Create(parent, id, url=WebViewDefaultURLStr, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, name=WebViewNameStr) -> WebView
        
        Function to create a new wxWebView with two-step creation,
        wxWebView::Create should be called on the returned object.
    %End

    virtual
    wxWebView * Create(
        wxWindow * parent,
        wxWindowID id,
        const wxString & url = wxWebViewDefaultURLStr,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxWebViewNameStr
    ) = 0;

    virtual
    bool IsAvailable();
    %Docstring
        IsAvailable() -> bool
        
        Function to check if the backend is available at runtime.
    %End

};  // end of class wxWebViewFactory


%Extract(id=pycode_html2, order=15)
# On Windows we need to ensure that the wx pacakge folder is on on the
# PATH, so the MS Edge Loader DLLs can be found when they are dynamically
# loaded.
import os
if os.name == 'nt':
    _path = os.environ.get('PATH')
    _pkg_path = os.path.abspath(os.path.dirname(wx.__file__))
    if _pkg_path.lower() not in _path.lower():
        os.environ['PATH'] = _path + os.pathsep + _pkg_path

%End

const int wxUSE_WEBVIEW;
%Extract(id=pycode_html2)
EVT_WEBVIEW_NAVIGATING = wx.PyEventBinder( wxEVT_WEBVIEW_NAVIGATING, 1 )
EVT_WEBVIEW_NAVIGATED = wx.PyEventBinder( wxEVT_WEBVIEW_NAVIGATED, 1 )
EVT_WEBVIEW_LOADED = wx.PyEventBinder( wxEVT_WEBVIEW_LOADED, 1 )
EVT_WEBVIEW_ERROR = wx.PyEventBinder( wxEVT_WEBVIEW_ERROR, 1 )
EVT_WEBVIEW_NEWWINDOW = wx.PyEventBinder( wxEVT_WEBVIEW_NEWWINDOW, 1 )
EVT_WEBVIEW_TITLE_CHANGED = wx.PyEventBinder( wxEVT_WEBVIEW_TITLE_CHANGED, 1 )

# deprecated wxEVT aliases
wxEVT_COMMAND_WEBVIEW_NAVIGATING     = wxEVT_WEBVIEW_NAVIGATING
wxEVT_COMMAND_WEBVIEW_NAVIGATED      = wxEVT_WEBVIEW_NAVIGATED
wxEVT_COMMAND_WEBVIEW_LOADED         = wxEVT_WEBVIEW_LOADED
wxEVT_COMMAND_WEBVIEW_ERROR          = wxEVT_WEBVIEW_ERROR
wxEVT_COMMAND_WEBVIEW_NEWWINDOW      = wxEVT_WEBVIEW_NEWWINDOW
wxEVT_COMMAND_WEBVIEW_TITLE_CHANGED  = wxEVT_WEBVIEW_TITLE_CHANGED

%End


//---------------------------------------------------------------------------

