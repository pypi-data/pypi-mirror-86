//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxICON_SCREEN_DEPTH;
class wxIcon : wxGDIObject
{
    %Docstring
        Icon()
        Icon(icon)
        Icon(name, type=BITMAP_TYPE_ANY, desiredWidth=-1, desiredHeight=-1)
        Icon(loc)
        Icon(bmp)
        
        An icon is a small rectangular bitmap usually used for denoting a
        minimized application.
    %End
    %TypeHeaderCode
        #include <wx/icon.h>
    %End

public:
    wxIcon();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxIcon(
        const wxIcon & icon
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxIcon(
        const wxString & name,
        wxBitmapType type = wxBITMAP_TYPE_ANY,
        int desiredWidth = -1,
        int desiredHeight = -1
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxIcon(
        const wxIconLocation & loc
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxIcon(const wxBitmap& bmp)   /NoDerived/;
    %MethodCode
        PyErr_Clear();
        sipCpp = _wxIcon_ctor(bmp);
    %End
    %TypeCode
    wxIcon* _wxIcon_ctor(const wxBitmap* bmp)
    {
        wxIcon* icon = new wxIcon();
        icon->CopyFromBitmap(*bmp);
        return icon;
    }
    %End

    ~wxIcon();

    bool CreateFromHICON(long hicon);
    %Docstring
        CreateFromHICON(hicon) -> bool
        
        MSW-only method to create a wx.Icon from a native icon handle.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxIcon_CreateFromHICON(sipCpp, hicon);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxIcon_CreateFromHICON(wxIcon* self, long hicon)
    {
        #ifdef __WXMSW__
            return self->CreateFromHICON((WXHICON)hicon);
        #else
            return false;
        #endif
    }
    %End

    void CopyFromBitmap(
        const wxBitmap & bmp
    );
    %Docstring
        CopyFromBitmap(bmp)
        
        Copies bmp bitmap to this icon.
    %End

    int GetDepth() const;
    %Docstring
        GetDepth() -> int
        
        Gets the colour depth of the icon.
    %End

    int GetHeight() const;
    %Docstring
        GetHeight() -> int
        
        Gets the height of the icon in pixels.
    %End

    int GetWidth() const;
    %Docstring
        GetWidth() -> int
        
        Gets the width of the icon in pixels.
    %End

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if icon data is present.
    %End

    bool LoadFile(
        const wxString & name,
        wxBitmapType type = wxBITMAP_TYPE_ANY,
        int desiredWidth = -1,
        int desiredHeight = -1
    );
    %Docstring
        LoadFile(name, type=BITMAP_TYPE_ANY, desiredWidth=-1, desiredHeight=-1) -> bool
        
        Loads an icon from a file or resource.
    %End

    void SetDepth(
        int depth
    );
    %Docstring
        SetDepth(depth)
        
        Sets the depth member (does not affect the icon data).
    %End

    void SetHeight(
        int height
    );
    %Docstring
        SetHeight(height)
        
        Sets the height member (does not affect the icon data).
    %End

    void SetWidth(
        int width
    );
    %Docstring
        SetWidth(width)
        
        Sets the width member (does not affect the icon data).
    %End

    int __nonzero__();
    %Docstring
        __nonzero__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxIcon___nonzero__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxIcon___nonzero__(wxIcon* self)
    {
        return self->IsOk();
    }
    %End

    int __bool__();
    %Docstring
        __bool__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxIcon___bool__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxIcon___bool__(wxIcon* self)
    {
        return self->IsOk();
    }
    %End

    long GetHandle();
    %Docstring
        GetHandle() -> long
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxIcon_GetHandle(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    long _wxIcon_GetHandle(wxIcon* self)
    {
        #ifdef __WXMSW__
            return (long)self->GetHandle();
        #else
            return 0;
        #endif
    }
    %End

    void SetHandle(long handle);
    %Docstring
        SetHandle(handle)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxIcon_SetHandle(sipCpp, handle);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxIcon_SetHandle(wxIcon* self, long handle)
    {
        #ifdef __WXMSW__
            self->SetHandle((WXHANDLE)handle);
        #endif
    }
    %End

    public:


    %Property(name=Depth, get=GetDepth, set=SetDepth)
    %Property(name=Handle, get=GetHandle, set=SetHandle)
    %Property(name=Height, get=GetHeight, set=SetHeight)
    %Property(name=Width, get=GetWidth, set=SetWidth)
};  // end of class wxIcon


wxIcon wxNullIcon;

%Extract(id=pycode_core)
@wx.deprecatedMsg("Use :class:`Icon` instead")
def EmptyIcon():
    """
    A compatibility wrapper for the :class:`Icon` constructor
    """
    return Icon()

%End


//---------------------------------------------------------------------------

