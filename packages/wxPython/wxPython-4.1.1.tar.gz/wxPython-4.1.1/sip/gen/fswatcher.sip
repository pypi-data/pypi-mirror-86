//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#if !wxUSE_FSWATCHER
class wxFileSystemWatcher;
class wxFileSystemWatcherEvent;
static wxFileName _NullFileName;


enum wxFSWFlags {
    wxFSW_EVENT_CREATE,
    wxFSW_EVENT_DELETE,
    wxFSW_EVENT_RENAME,
    wxFSW_EVENT_MODIFY,
    wxFSW_EVENT_ACCESS,
    wxFSW_EVENT_ATTRIB,
    wxFSW_EVENT_UNMOUNT,
    wxFSW_EVENT_WARNING,
    wxFSW_EVENT_ERROR,
    wxFSW_EVENT_ALL,
};

enum wxFSWWarningType {
    wxFSW_WARNING_NONE,
    wxFSW_WARNING_GENERAL,
    wxFSW_WARNING_OVERFLOW,
};
extern wxEventType wxEVT_FSWATCHER;

class wxFileSystemWatcher : public wxEvtHandler {
public:
    wxFileSystemWatcher()
        { wxPyRaiseNotImplemented(); }

    virtual ~wxFileSystemWatcher()
        { }

    virtual bool Add(const wxFileName &path, int events=wxFSW_EVENT_ALL)
        { return false; }

    virtual bool AddTree(const wxFileName &path, int events=wxFSW_EVENT_ALL, const wxString &filter=wxEmptyString)
        { return false; }

    virtual bool Remove(const wxFileName &path)
        { return false; }

    virtual bool RemoveTree(const wxFileName &path)
        { return false; }

    virtual bool RemoveAll()
        { return false; }

    int GetWatchedPathsCount() const 
        { return 0; }

    int GetWatchedPaths(wxArrayString *paths) const 
        { return 0; }

    void SetOwner(wxEvtHandler *handler)
        { }

};

class wxFileSystemWatcherEvent : public wxEvent {
public:
    wxFileSystemWatcherEvent(int changeType=0, int watchid=wxID_ANY)
        { wxPyRaiseNotImplemented(); }

    wxFileSystemWatcherEvent(int changeType, wxFSWWarningType warningType, const wxString &errorMsg, int watchid=wxID_ANY)
        { wxPyRaiseNotImplemented(); }

    wxFileSystemWatcherEvent(int changeType, const wxFileName &path, const wxFileName &newPath, int watchid=wxID_ANY)
        { wxPyRaiseNotImplemented(); }

    const wxFileName & GetPath() const 
        { return _NullFileName; }

    const wxFileName & GetNewPath() const 
        { return _NullFileName; }

    int GetChangeType() const 
        { return 0; }

    bool IsError() const 
        { return false; }

    wxString GetErrorDescription() const 
        { return wxEmptyString; }

    wxFSWWarningType GetWarningType() const 
        { return wxFSW_WARNING_NONE; }

    wxString ToString() const 
        { return wxEmptyString; }

    virtual wxEvent* Clone() const
        { return NULL; }

};
#endif //!wxUSE_FSWATCHER


        #include <wx/fswatcher.h>
        #if wxUSE_FSWATCHER && !defined(wxHAS_INOTIFY) && !defined(wxHAVE_FSEVENTS_FILE_NOTIFICATIONS)
            const int wxFSW_EVENT_UNMOUNT = 0x2000;
        #endif
        
%End

%ModuleCode
#if !wxUSE_FSWATCHER
wxEventType wxEVT_FSWATCHER;
#endif //!wxUSE_FSWATCHER

%End

//---------------------------------------------------------------------------

enum wxFSWFlags
{
    wxFSW_EVENT_CREATE,
    wxFSW_EVENT_DELETE,
    wxFSW_EVENT_RENAME,
    wxFSW_EVENT_MODIFY,
    wxFSW_EVENT_ACCESS,
    wxFSW_EVENT_ATTRIB,
    wxFSW_EVENT_UNMOUNT,
    wxFSW_EVENT_WARNING,
    wxFSW_EVENT_ERROR,
    wxFSW_EVENT_ALL
};

enum wxFSWWarningType
{
    wxFSW_WARNING_NONE,
    wxFSW_WARNING_GENERAL,
    wxFSW_WARNING_OVERFLOW
};

wxEventType wxEVT_FSWATCHER   /PyName=wxEVT_FSWATCHER/;

class wxFileSystemWatcher : wxEvtHandler
{
    %Docstring
        FileSystemWatcher()
        
        The wxFileSystemWatcher class allows receiving notifications of file
        system changes.
    %End
    %TypeHeaderCode
        #include <wx/fswatcher.h>
    %End

public:
    wxFileSystemWatcher();

    virtual
    ~wxFileSystemWatcher();

    virtual
    bool Add(
        const wxFileName & path,
        int events = wxFSW_EVENT_ALL
    );
    %Docstring
        Add(path, events=FSW_EVENT_ALL) -> bool
        
        Adds path to currently watched files.
    %End

    virtual
    bool AddTree(
        const wxFileName & path,
        int events = wxFSW_EVENT_ALL,
        const wxString & filter = wxEmptyString
    );
    %Docstring
        AddTree(path, events=FSW_EVENT_ALL, filter=EmptyString) -> bool
        
        This is the same as Add(), but also recursively adds every
        file/directory in the tree rooted at path.
    %End

    virtual
    bool Remove(
        const wxFileName & path
    );
    %Docstring
        Remove(path) -> bool
        
        Removes path from the list of watched paths.
    %End

    virtual
    bool RemoveTree(
        const wxFileName & path
    );
    %Docstring
        RemoveTree(path) -> bool
        
        This is the same as Remove(), but also removes every file/directory
        belonging to the tree rooted at path.
    %End

    virtual
    bool RemoveAll();
    %Docstring
        RemoveAll() -> bool
        
        Clears the list of currently watched paths.
    %End

    int GetWatchedPathsCount() const;
    %Docstring
        GetWatchedPathsCount() -> int
        
        Returns the number of currently watched paths.
    %End

    int GetWatchedPaths(
        wxArrayString * paths
    ) const;
    %Docstring
        GetWatchedPaths(paths) -> int
        
        Retrieves all watched paths and places them in paths.
    %End

    void SetOwner(
        wxEvtHandler * handler
    );
    %Docstring
        SetOwner(handler)
        
        Associates the file system watcher with the given handler object.
    %End

    public:


    %Property(name=WatchedPathsCount, get=GetWatchedPathsCount)
};  // end of class wxFileSystemWatcher


class wxFileSystemWatcherEvent : wxEvent
{
    %Docstring
        FileSystemWatcherEvent(changeType=0, watchid=ID_ANY)
        FileSystemWatcherEvent(changeType, warningType, errorMsg, watchid=ID_ANY)
        FileSystemWatcherEvent(changeType, path, newPath, watchid=ID_ANY)
        
        A class of events sent when a file system event occurs.
    %End
    %TypeHeaderCode
        #include <wx/fswatcher.h>
    %End

public:
    wxFileSystemWatcherEvent(
        int changeType = 0,
        int watchid = wxID_ANY
    );

    wxFileSystemWatcherEvent(
        int changeType,
        wxFSWWarningType warningType,
        const wxString & errorMsg,
        int watchid = wxID_ANY
    );

    wxFileSystemWatcherEvent(
        int changeType,
        const wxFileName & path,
        const wxFileName & newPath,
        int watchid = wxID_ANY
    );

    const wxFileName & GetPath() const;
    %Docstring
        GetPath() -> FileName
        
        Returns the path at which the event occurred.
    %End

    const wxFileName & GetNewPath() const;
    %Docstring
        GetNewPath() -> FileName
        
        Returns the new path of the renamed file/directory if this is a rename
        event.
    %End

    int GetChangeType() const;
    %Docstring
        GetChangeType() -> int
        
        Returns the type of file system change that occurred.
    %End

    bool IsError() const;
    %Docstring
        IsError() -> bool
        
        Returns true if this error is an error event.
    %End

    wxString GetErrorDescription() const;
    %Docstring
        GetErrorDescription() -> String
        
        Return a description of the warning or error if this is an error
        event.
    %End

    wxFSWWarningType GetWarningType() const;
    %Docstring
        GetWarningType() -> FSWWarningType
        
        Return the type of the warning if this event is a warning one.
    %End

    wxString ToString() const;
    %Docstring
        ToString() -> String
        
        Returns a wxString describing an event, useful for logging, debugging
        or testing.
    %End

    virtual
    wxEvent* Clone() const   /Factory/;
    %Docstring
        Clone() -> Event
    %End

    private:
        wxFileSystemWatcherEvent& operator=(const wxFileSystemWatcherEvent&);


    public:


    %Property(name=ChangeType, get=GetChangeType)
    %Property(name=ErrorDescription, get=GetErrorDescription)
    %Property(name=NewPath, get=GetNewPath)
    %Property(name=Path, get=GetPath)
    %Property(name=WarningType, get=GetWarningType)
};  // end of class wxFileSystemWatcherEvent


const int wxUSE_FSWATCHER;
%Extract(id=pycode_core)
EVT_FSWATCHER = wx.PyEventBinder(wxEVT_FSWATCHER)

%End


//---------------------------------------------------------------------------

