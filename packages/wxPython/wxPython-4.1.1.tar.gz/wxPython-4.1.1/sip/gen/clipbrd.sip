//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxClipboard : wxObject
{
    %Docstring
        Clipboard()
        
        A class for manipulating the clipboard.
    %End
    %TypeHeaderCode
        #include <wx/clipbrd.h>
    %End

public:
    wxClipboard();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxClipboard();

    virtual
    bool AddData(
        wxDataObject * data   /Transfer/
    );
    %Docstring
        AddData(data) -> bool
        
        Call this function to add the data object to the clipboard.
    %End

    virtual
    void Clear();
    %Docstring
        Clear()
        
        Clears the global clipboard object and the system's clipboard if
        possible.
    %End

    virtual
    void Close();
    %Docstring
        Close()
        
        Call this function to close the clipboard, having opened it with
        Open().
    %End

    virtual
    bool Flush();
    %Docstring
        Flush() -> bool
        
        Flushes the clipboard: this means that the data which is currently on
        clipboard will stay available even after the application exits
        (possibly eating memory), otherwise the clipboard will be emptied on
        exit.
    %End

    virtual
    bool GetData(
        wxDataObject & data
    );
    %Docstring
        GetData(data) -> bool
        
        Call this function to fill data with data on the clipboard, if
        available in the required format.
    %End

    virtual
    bool IsOpened() const;
    %Docstring
        IsOpened() -> bool
        
        Returns true if the clipboard has been opened.
    %End

    virtual
    bool IsSupported(
        const wxDataFormat & format
    );
    %Docstring
        IsSupported(format) -> bool
        
        Returns true if there is data which matches the data format of the
        given data object currently available on the clipboard.
    %End

    bool IsUsingPrimarySelection() const;
    %Docstring
        IsUsingPrimarySelection() -> bool
        
        Returns true if we are using the primary selection, false if clipboard
        one.
    %End

    virtual
    bool Open();
    %Docstring
        Open() -> bool
        
        Call this function to open the clipboard before calling SetData() and
        GetData().
    %End

    virtual
    bool SetData(
        wxDataObject * data   /Transfer/
    );
    %Docstring
        SetData(data) -> bool
        
        Call this function to set the data object to the clipboard.
    %End

    virtual
    void UsePrimarySelection(
        bool primary = false
    );
    %Docstring
        UsePrimarySelection(primary=False)
        
        On platforms supporting it (all X11-based ports), wxClipboard uses the
        CLIPBOARD X11 selection by default.
    %End

    static
    wxClipboard * Get();
    %Docstring
        Get() -> Clipboard
        
        Returns the global instance (wxTheClipboard) of the clipboard object.
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


};  // end of class wxClipboard


%Extract(id=pycode_core)
# Since wxTheClipboard is not really a global variable (it is a macro
# that calls the Get static method) we can't declare it as a global
# variable for the wrapper generator, otherwise it will try to run the
# function at module import and the wxApp object won't exist yet.  So
# we'll use a class that will allow us to delay calling the Get until
# wx.TheClipboard is actually being used for the first time.
class _wxPyDelayedInitWrapper(object):
    def __init__(self, initfunc, *args, **kwargs):
        self._initfunc = initfunc
        self._args = args
        self._kwargs = kwargs
        self._instance = None
    def _checkInstance(self):
        if self._instance is None:
            if wx.GetApp():
                self._instance = self._initfunc(*self._args, **self._kwargs)
    def __getattr__(self, name):
        self._checkInstance()
        return getattr(self._instance, name)
    def __repr__(self):
        self._checkInstance()
        return repr(self._instance)

    # context manager methods
    def __enter__(self):
        self._checkInstance()
        if not self.Open():
            raise RuntimeError('Unable to open clipboard.')
        return self
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.Close()

TheClipboard = _wxPyDelayedInitWrapper(Clipboard.Get)

%End

wxEventType wxEVT_CLIPBOARD_CHANGED /PyName=wxEVT_CLIPBOARD_CHANGED/;



//---------------------------------------------------------------------------

