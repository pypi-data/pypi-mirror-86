//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _aui.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

enum wxAuiNotebookOption
{
    wxAUI_NB_TOP,
    wxAUI_NB_LEFT,
    wxAUI_NB_RIGHT,
    wxAUI_NB_BOTTOM,
    wxAUI_NB_TAB_SPLIT,
    wxAUI_NB_TAB_MOVE,
    wxAUI_NB_TAB_EXTERNAL_MOVE,
    wxAUI_NB_TAB_FIXED_WIDTH,
    wxAUI_NB_SCROLL_BUTTONS,
    wxAUI_NB_WINDOWLIST_BUTTON,
    wxAUI_NB_CLOSE_BUTTON,
    wxAUI_NB_CLOSE_ON_ACTIVE_TAB,
    wxAUI_NB_CLOSE_ON_ALL_TABS,
    wxAUI_NB_MIDDLE_CLICK_CLOSE,
    wxAUI_NB_DEFAULT_STYLE
};

wxEventType wxEVT_AUINOTEBOOK_PAGE_CLOSE   /PyName=wxEVT_AUINOTEBOOK_PAGE_CLOSE/;

wxEventType wxEVT_AUINOTEBOOK_PAGE_CHANGED   /PyName=wxEVT_AUINOTEBOOK_PAGE_CHANGED/;

wxEventType wxEVT_AUINOTEBOOK_PAGE_CHANGING   /PyName=wxEVT_AUINOTEBOOK_PAGE_CHANGING/;

wxEventType wxEVT_AUINOTEBOOK_PAGE_CLOSED   /PyName=wxEVT_AUINOTEBOOK_PAGE_CLOSED/;

wxEventType wxEVT_AUINOTEBOOK_BUTTON   /PyName=wxEVT_AUINOTEBOOK_BUTTON/;

wxEventType wxEVT_AUINOTEBOOK_BEGIN_DRAG   /PyName=wxEVT_AUINOTEBOOK_BEGIN_DRAG/;

wxEventType wxEVT_AUINOTEBOOK_END_DRAG   /PyName=wxEVT_AUINOTEBOOK_END_DRAG/;

wxEventType wxEVT_AUINOTEBOOK_DRAG_MOTION   /PyName=wxEVT_AUINOTEBOOK_DRAG_MOTION/;

wxEventType wxEVT_AUINOTEBOOK_ALLOW_DND   /PyName=wxEVT_AUINOTEBOOK_ALLOW_DND/;

wxEventType wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN   /PyName=wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN/;

wxEventType wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP   /PyName=wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP/;

wxEventType wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN   /PyName=wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN/;

wxEventType wxEVT_AUINOTEBOOK_TAB_RIGHT_UP   /PyName=wxEVT_AUINOTEBOOK_TAB_RIGHT_UP/;

wxEventType wxEVT_AUINOTEBOOK_DRAG_DONE   /PyName=wxEVT_AUINOTEBOOK_DRAG_DONE/;

wxEventType wxEVT_AUINOTEBOOK_BG_DCLICK   /PyName=wxEVT_AUINOTEBOOK_BG_DCLICK/;

class wxAuiNotebook : wxBookCtrlBase
{
    %Docstring
        AuiNotebook()
        AuiNotebook(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=AUI_NB_DEFAULT_STYLE)
        
        wxAuiNotebook is part of the wxAUI class framework, which represents a
        notebook control, managing multiple windows with associated tabs.
    %End
    %TypeHeaderCode
        #include <wx/aui/auibook.h>
    %End

public:
    wxAuiNotebook();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxAuiNotebook(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxAUI_NB_DEFAULT_STYLE
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool AddPage(
        wxWindow * page,
        const wxString & caption,
        bool select = false,
        const wxBitmap & bitmap = wxNullBitmap
    );
    %Docstring
        AddPage(page, caption, select=False, bitmap=wx.NullBitmap) -> bool
        AddPage(page, text, select, imageId) -> bool
        
        Adds a page.
    %End

    bool AddPage(
        wxWindow * page,
        const wxString & text,
        bool select,
        int imageId
    );

    void AdvanceSelection(
        bool forward = true
    );
    %Docstring
        AdvanceSelection(forward=True)
        
        Sets the selection to the next or previous page.
    %End

    int ChangeSelection(
        size_t n
    );
    %Docstring
        ChangeSelection(n) -> int
        
        Changes the selection for the given page, returning the previous
        selection.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0) -> bool
        
        Creates the notebook window.
    %End

    bool DeleteAllPages();
    %Docstring
        DeleteAllPages() -> bool
        
        Deletes all pages.
    %End

    bool DeletePage(
        size_t page
    );
    %Docstring
        DeletePage(page) -> bool
        
        Deletes a page at the given index.
    %End

    wxAuiTabArt * GetArtProvider() const;
    %Docstring
        GetArtProvider() -> AuiTabArt
        
        Returns the associated art provider.
    %End

    wxWindow * GetCurrentPage() const;
    %Docstring
        GetCurrentPage() -> wx.Window
        
        Returns the currently selected page or NULL.
    %End

    int GetHeightForPageHeight(
        int pageHeight
    );
    %Docstring
        GetHeightForPageHeight(pageHeight) -> int
        
        Returns the desired height of the notebook for the given page height.
    %End

    wxWindow * GetPage(
        size_t page_idx
    ) const;
    %Docstring
        GetPage(page_idx) -> wx.Window
        
        Returns the page specified by the given index.
    %End

    wxBitmap GetPageBitmap(
        size_t page
    ) const;
    %Docstring
        GetPageBitmap(page) -> wx.Bitmap
        
        Returns the tab bitmap for the page.
    %End

    size_t GetPageCount() const;
    %Docstring
        GetPageCount() -> size_t
        
        Returns the number of pages in the notebook.
    %End

    int GetPageIndex(
        wxWindow * page_wnd
    ) const;
    %Docstring
        GetPageIndex(page_wnd) -> int
        
        Returns the page index for the specified window.
    %End

    wxString GetPageText(
        size_t page
    ) const;
    %Docstring
        GetPageText(page) -> String
        
        Returns the tab label for the page.
    %End

    wxString GetPageToolTip(
        size_t pageIdx
    ) const;
    %Docstring
        GetPageToolTip(pageIdx) -> String
        
        Returns the tooltip for the tab label of the page.
    %End

    int GetSelection() const;
    %Docstring
        GetSelection() -> int
        
        Returns the currently selected page.
    %End

    int GetTabCtrlHeight() const;
    %Docstring
        GetTabCtrlHeight() -> int
        
        Returns the height of the tab control.
    %End

    bool InsertPage(
        size_t page_idx,
        wxWindow * page,
        const wxString & caption,
        bool select = false,
        const wxBitmap & bitmap = wxNullBitmap
    );
    %Docstring
        InsertPage(page_idx, page, caption, select=False, bitmap=wx.NullBitmap) -> bool
        InsertPage(index, page, text, select, imageId) -> bool
        
        InsertPage() is similar to AddPage, but allows the ability to specify
        the insert location.
    %End

    bool InsertPage(
        size_t index,
        wxWindow * page,
        const wxString & text,
        bool select,
        int imageId
    );

    bool RemovePage(
        size_t page
    );
    %Docstring
        RemovePage(page) -> bool
        
        Removes a page, without deleting the window pointer.
    %End

    void SetArtProvider(
        wxAuiTabArt * art   /Transfer/
    );
    %Docstring
        SetArtProvider(art)
        
        Sets the art provider to be used by the notebook.
    %End

    bool SetFont(
        const wxFont & font
    );
    %Docstring
        SetFont(font) -> bool
        
        Sets the font for drawing the tab labels, using a bold version of the
        font for selected tab labels.
    %End

    void SetMeasuringFont(
        const wxFont & font
    );
    %Docstring
        SetMeasuringFont(font)
        
        Sets the font for measuring tab labels.
    %End

    void SetNormalFont(
        const wxFont & font
    );
    %Docstring
        SetNormalFont(font)
        
        Sets the font for drawing unselected tab labels.
    %End

    bool SetPageBitmap(
        size_t page,
        const wxBitmap & bitmap
    );
    %Docstring
        SetPageBitmap(page, bitmap) -> bool
        
        Sets the bitmap for the page.
    %End

    bool SetPageImage(
        size_t n,
        int imageId
    );
    %Docstring
        SetPageImage(n, imageId) -> bool
        
        Sets the image index for the given page.
    %End

    bool SetPageText(
        size_t page,
        const wxString & text
    );
    %Docstring
        SetPageText(page, text) -> bool
        
        Sets the tab label for the page.
    %End

    bool SetPageToolTip(
        size_t page,
        const wxString & text
    );
    %Docstring
        SetPageToolTip(page, text) -> bool
        
        Sets the tooltip displayed when hovering over the tab label of the
        page.
    %End

    void SetSelectedFont(
        const wxFont & font
    );
    %Docstring
        SetSelectedFont(font)
        
        Sets the font for drawing selected tab labels.
    %End

    int SetSelection(
        size_t new_page
    );
    %Docstring
        SetSelection(new_page) -> int
        
        Sets the page selection.
    %End

    void SetTabCtrlHeight(
        int height
    );
    %Docstring
        SetTabCtrlHeight(height)
        
        Sets the tab height.
    %End

    void SetUniformBitmapSize(
        const wxSize & size
    );
    %Docstring
        SetUniformBitmapSize(size)
        
        Ensure that all tabs have the same height, even if some of them don't
        have bitmaps.
    %End

    void Split(
        size_t page,
        int direction
    );
    %Docstring
        Split(page, direction)
        
        Split performs a split operation programmatically.
    %End

    bool ShowWindowMenu();
    %Docstring
        ShowWindowMenu() -> bool
        
        Shows the window menu for the active tab control associated with this
        notebook, and returns true if a selection was made.
    %End

    int GetPageImage(
        size_t nPage
    ) const;
    %Docstring
        GetPageImage(nPage) -> int
        
        Returns the image index for the given page.
    %End

    wxAuiTabCtrl * GetTabCtrlFromPoint(
        const wxPoint & pt
    );
    %Docstring
        GetTabCtrlFromPoint(pt) -> AuiTabCtrl
        
        Returns tab control based on point coordinates inside the tab frame.
    %End

    wxAuiTabCtrl * GetActiveTabCtrl();
    %Docstring
        GetActiveTabCtrl() -> AuiTabCtrl
        
        Returns active tab control for this notebook.
    %End

    bool FindTab(
        wxWindow * page,
        wxAuiTabCtrl ** ctrl,
        int * idx
    );
    %Docstring
        FindTab(page, ctrl, idx) -> bool
        
        Finds tab control associated with a given window and its tab index.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual int HitTest(const wxPoint& pt, long* flags /Out/ = NULL) const;


    public:


    %Property(name=ActiveTabCtrl, get=GetActiveTabCtrl)
    %Property(name=ArtProvider, get=GetArtProvider, set=SetArtProvider)
    %Property(name=CurrentPage, get=GetCurrentPage)
    %Property(name=PageCount, get=GetPageCount)
    %Property(name=Selection, get=GetSelection, set=SetSelection)
    %Property(name=TabCtrlHeight, get=GetTabCtrlHeight, set=SetTabCtrlHeight)
};  // end of class wxAuiNotebook


class wxAuiNotebookPage
{
    %Docstring
        A simple class which holds information about the notebook's pages and
        their state.
    %End
    %TypeHeaderCode
        #include <wx/aui/auibook.h>
    %End

public:
    wxWindow * window;

    wxString caption;

    wxString tooltip;

    wxBitmap bitmap;

    wxRect rect;

    bool active;

};  // end of class wxAuiNotebookPage


class wxAuiTabContainerButton
{
    %Docstring
        A simple class which holds information about wxAuiNotebook tab buttons
        and their state.
    %End
    %TypeHeaderCode
        #include <wx/aui/auibook.h>
    %End

public:
    int id;

    int curState;

    int location;

    wxBitmap bitmap;

    wxBitmap disBitmap;

    wxRect rect;

};  // end of class wxAuiTabContainerButton


class wxAuiTabContainer
{
    %Docstring
        AuiTabContainer()
        
        wxAuiTabContainer is a class which contains information about each
        tab.
    %End
    %TypeHeaderCode
        #include <wx/aui/auibook.h>
    %End

public:
    wxAuiTabContainer();

    virtual
    ~wxAuiTabContainer();

    void SetArtProvider(
        wxAuiTabArt * art
    );
    %Docstring
        SetArtProvider(art)
    %End

    wxAuiTabArt * GetArtProvider() const;
    %Docstring
        GetArtProvider() -> AuiTabArt
    %End

    void SetFlags(
        unsigned int flags
    );
    %Docstring
        SetFlags(flags)
    %End

    unsigned int GetFlags() const;
    %Docstring
        GetFlags() -> unsignedint
    %End

    bool AddPage(
        wxWindow * page,
        const wxAuiNotebookPage & info
    );
    %Docstring
        AddPage(page, info) -> bool
    %End

    bool InsertPage(
        wxWindow * page,
        const wxAuiNotebookPage & info,
        size_t idx
    );
    %Docstring
        InsertPage(page, info, idx) -> bool
    %End

    bool MovePage(
        wxWindow * page,
        size_t newIdx
    );
    %Docstring
        MovePage(page, newIdx) -> bool
    %End

    bool RemovePage(
        wxWindow * page
    );
    %Docstring
        RemovePage(page) -> bool
    %End

    bool SetActivePage(
        wxWindow * page
    );
    %Docstring
        SetActivePage(page) -> bool
        SetActivePage(page) -> bool
    %End

    bool SetActivePage(
        size_t page
    );

    void SetNoneActive();
    %Docstring
        SetNoneActive()
    %End

    int GetActivePage() const;
    %Docstring
        GetActivePage() -> int
    %End

    bool TabHitTest(
        int x,
        int y,
        wxWindow ** hit
    ) const;
    %Docstring
        TabHitTest(x, y, hit) -> bool
    %End

    bool ButtonHitTest(
        int x,
        int y,
        wxAuiTabContainerButton ** hit
    ) const;
    %Docstring
        ButtonHitTest(x, y, hit) -> bool
    %End

    wxWindow * GetWindowFromIdx(
        size_t idx
    ) const;
    %Docstring
        GetWindowFromIdx(idx) -> wx.Window
    %End

    int GetIdxFromWindow(
        wxWindow * page
    ) const;
    %Docstring
        GetIdxFromWindow(page) -> int
    %End

    size_t GetPageCount() const;
    %Docstring
        GetPageCount() -> size_t
    %End

    wxAuiNotebookPage & GetPage(
        size_t idx
    );
    %Docstring
        GetPage(idx) -> AuiNotebookPage
    %End

    wxAuiNotebookPageArray & GetPages();
    %Docstring
        GetPages() -> AuiNotebookPageArray
    %End

    void SetNormalFont(
        const wxFont & normalFont
    );
    %Docstring
        SetNormalFont(normalFont)
    %End

    void SetSelectedFont(
        const wxFont & selectedFont
    );
    %Docstring
        SetSelectedFont(selectedFont)
    %End

    void SetMeasuringFont(
        const wxFont & measuringFont
    );
    %Docstring
        SetMeasuringFont(measuringFont)
    %End

    void SetColour(
        const wxColour & colour
    );
    %Docstring
        SetColour(colour)
    %End

    void SetActiveColour(
        const wxColour & colour
    );
    %Docstring
        SetActiveColour(colour)
    %End

    void DoShowHide();
    %Docstring
        DoShowHide()
    %End

    void SetRect(
        const wxRect & rect
    );
    %Docstring
        SetRect(rect)
    %End

    void RemoveButton(
        int id
    );
    %Docstring
        RemoveButton(id)
    %End

    void AddButton(
        int id,
        int location,
        const wxBitmap & normalBitmap = wxNullBitmap,
        const wxBitmap & disabledBitmap = wxNullBitmap
    );
    %Docstring
        AddButton(id, location, normalBitmap=wx.NullBitmap, disabledBitmap=wx.NullBitmap)
    %End

    size_t GetTabOffset() const;
    %Docstring
        GetTabOffset() -> size_t
    %End

    void SetTabOffset(
        size_t offset
    );
    %Docstring
        SetTabOffset(offset)
    %End

    bool IsTabVisible(
        int tabPage,
        int tabOffset,
        wxDC * dc,
        wxWindow * wnd
    );
    %Docstring
        IsTabVisible(tabPage, tabOffset, dc, wnd) -> bool
    %End

    void MakeTabVisible(
        int tabPage,
        wxWindow * win
    );
    %Docstring
        MakeTabVisible(tabPage, win)
    %End

    public:


    %Property(name=ActivePage, get=GetActivePage, set=SetActivePage)
    %Property(name=ArtProvider, get=GetArtProvider, set=SetArtProvider)
    %Property(name=Flags, get=GetFlags, set=SetFlags)
    %Property(name=PageCount, get=GetPageCount)
    %Property(name=Pages, get=GetPages)
    %Property(name=TabOffset, get=GetTabOffset, set=SetTabOffset)
};  // end of class wxAuiTabContainer


class wxAuiTabArt   /Abstract/
{
    %Docstring
        AuiTabArt()
        
        Tab art provider defines all the drawing functions used by
        wxAuiNotebook.
    %End
    %TypeHeaderCode
        #include <wx/aui/auibook.h>
    %End

public:
    wxAuiTabArt();

    virtual
    wxAuiTabArt * Clone() = 0;
    %Docstring
        Clone() -> AuiTabArt
        
        Clones the art object.
    %End

    virtual
    void DrawBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    ) = 0;
    %Docstring
        DrawBackground(dc, wnd, rect)
        
        Draws a background on the given area.
    %End

    virtual
    void DrawButton(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & in_rect,
        int bitmap_id,
        int button_state,
        int orientation,
        wxRect * out_rect
    ) = 0;
    %Docstring
        DrawButton(dc, wnd, in_rect, bitmap_id, button_state, orientation, out_rect)
        
        Draws a button.
    %End

    virtual
    void DrawTab(
        wxDC & dc,
        wxWindow * wnd,
        const wxAuiNotebookPage & page,
        const wxRect & rect,
        int close_button_state,
        wxRect * out_tab_rect,
        wxRect * out_button_rect,
        int * x_extent
    ) = 0;
    %Docstring
        DrawTab(dc, wnd, page, rect, close_button_state, out_tab_rect, out_button_rect, x_extent)
        
        Draws a tab.
    %End

    virtual
    int GetBestTabCtrlSize(
        wxWindow * ,
        const wxAuiNotebookPageArray & ,
        const wxSize & 
    ) = 0;
    %Docstring
        GetBestTabCtrlSize(, , ) -> int
        
        Returns the tab control size.
    %End

    virtual
    int GetIndentSize() = 0;
    %Docstring
        GetIndentSize() -> int
        
        Returns the indent size.
    %End

    virtual
    wxSize GetTabSize(
        wxDC & dc,
        wxWindow * wnd,
        const wxString & caption,
        const wxBitmap & bitmap,
        bool active,
        int close_button_state,
        int * x_extent
    ) = 0;
    %Docstring
        GetTabSize(dc, wnd, caption, bitmap, active, close_button_state, x_extent) -> wx.Size
        
        Returns the tab size for the given caption, bitmap and state.
    %End

    virtual
    void SetFlags(
        unsigned int flags
    ) = 0;
    %Docstring
        SetFlags(flags)
        
        Sets flags.
    %End

    virtual
    void SetMeasuringFont(
        const wxFont & font
    ) = 0;
    %Docstring
        SetMeasuringFont(font)
        
        Sets the font used for calculating measurements.
    %End

    virtual
    void SetNormalFont(
        const wxFont & font
    ) = 0;
    %Docstring
        SetNormalFont(font)
        
        Sets the normal font for drawing labels.
    %End

    virtual
    void SetSelectedFont(
        const wxFont & font
    ) = 0;
    %Docstring
        SetSelectedFont(font)
        
        Sets the font for drawing text for selected UI elements.
    %End

    virtual
    void SetColour(
        const wxColour & colour
    ) = 0;
    %Docstring
        SetColour(colour)
        
        Sets the colour of the inactive tabs.
    %End

    virtual
    void SetActiveColour(
        const wxColour & colour
    ) = 0;
    %Docstring
        SetActiveColour(colour)
        
        Sets the colour of the selected tab.
    %End

    virtual
    void SetSizingInfo(
        const wxSize & tab_ctrl_size,
        size_t tab_count
    ) = 0;
    %Docstring
        SetSizingInfo(tab_ctrl_size, tab_count)
        
        Sets sizing information.
    %End

    public:


    %Property(name=IndentSize, get=GetIndentSize)
};  // end of class wxAuiTabArt


class wxAuiDefaultTabArt : wxAuiTabArt
{
    %Docstring
        AuiDefaultTabArt()
        
        Default art provider for wxAuiNotebook.
    %End
    %TypeHeaderCode
        #include <wx/aui/auibook.h>
    %End

public:
    wxAuiDefaultTabArt();

    virtual
    ~wxAuiDefaultTabArt();

    virtual
    wxAuiTabArt * Clone();
    %Docstring
        Clone() -> AuiTabArt
        
        Clones the art object.
    %End

    virtual
    void SetFlags(
        unsigned int flags
    );
    %Docstring
        SetFlags(flags)
        
        Sets flags.
    %End

    virtual
    void SetSizingInfo(
        const wxSize & tab_ctrl_size,
        size_t tab_count
    );
    %Docstring
        SetSizingInfo(tab_ctrl_size, tab_count)
        
        Sets sizing information.
    %End

    virtual
    void SetNormalFont(
        const wxFont & font
    );
    %Docstring
        SetNormalFont(font)
        
        Sets the normal font for drawing labels.
    %End

    virtual
    void SetSelectedFont(
        const wxFont & font
    );
    %Docstring
        SetSelectedFont(font)
        
        Sets the font for drawing text for selected UI elements.
    %End

    virtual
    void SetMeasuringFont(
        const wxFont & font
    );
    %Docstring
        SetMeasuringFont(font)
        
        Sets the font used for calculating measurements.
    %End

    virtual
    void SetColour(
        const wxColour & colour
    );
    %Docstring
        SetColour(colour)
        
        Sets the colour of the inactive tabs.
    %End

    virtual
    void SetActiveColour(
        const wxColour & colour
    );
    %Docstring
        SetActiveColour(colour)
        
        Sets the colour of the selected tab.
    %End

    virtual
    void DrawBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawBackground(dc, wnd, rect)
        
        Draws a background on the given area.
    %End

    virtual
    void DrawTab(
        wxDC & dc,
        wxWindow * wnd,
        const wxAuiNotebookPage & page,
        const wxRect & rect,
        int close_button_state,
        wxRect * out_tab_rect,
        wxRect * out_button_rect,
        int * x_extent
    );
    %Docstring
        DrawTab(dc, wnd, page, rect, close_button_state, out_tab_rect, out_button_rect, x_extent)
        
        Draws a tab.
    %End

    virtual
    void DrawButton(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & in_rect,
        int bitmap_id,
        int button_state,
        int orientation,
        wxRect * out_rect
    );
    %Docstring
        DrawButton(dc, wnd, in_rect, bitmap_id, button_state, orientation, out_rect)
        
        Draws a button.
    %End

    virtual
    int GetIndentSize();
    %Docstring
        GetIndentSize() -> int
        
        Returns the indent size.
    %End

    virtual
    wxSize GetTabSize(
        wxDC & dc,
        wxWindow * wnd,
        const wxString & caption,
        const wxBitmap & bitmap,
        bool active,
        int close_button_state,
        int * x_extent
    );
    %Docstring
        GetTabSize(dc, wnd, caption, bitmap, active, close_button_state, x_extent) -> wx.Size
        
        Returns the tab size for the given caption, bitmap and state.
    %End

    int ShowDropDown(
        wxWindow * wnd,
        const wxAuiNotebookPageArray & items,
        int activeIdx
    );
    %Docstring
        ShowDropDown(wnd, items, activeIdx) -> int
    %End

    virtual
    int GetBestTabCtrlSize(
        wxWindow * ,
        const wxAuiNotebookPageArray & ,
        const wxSize & 
    );
    %Docstring
        GetBestTabCtrlSize(, , ) -> int
        
        Returns the tab control size.
    %End

    public:


    %Property(name=IndentSize, get=GetIndentSize)
};  // end of class wxAuiDefaultTabArt


class wxAuiSimpleTabArt : wxAuiTabArt
{
    %Docstring
        AuiSimpleTabArt()
        
        Another standard tab art provider for wxAuiNotebook.
    %End
    %TypeHeaderCode
        #include <wx/aui/auibook.h>
    %End

public:
    wxAuiSimpleTabArt();

    virtual
    ~wxAuiSimpleTabArt();

    virtual
    wxAuiTabArt * Clone();
    %Docstring
        Clone() -> AuiTabArt
        
        Clones the art object.
    %End

    virtual
    void SetFlags(
        unsigned int flags
    );
    %Docstring
        SetFlags(flags)
        
        Sets flags.
    %End

    virtual
    void SetSizingInfo(
        const wxSize & tab_ctrl_size,
        size_t tab_count
    );
    %Docstring
        SetSizingInfo(tab_ctrl_size, tab_count)
        
        Sets sizing information.
    %End

    virtual
    void SetNormalFont(
        const wxFont & font
    );
    %Docstring
        SetNormalFont(font)
        
        Sets the normal font for drawing labels.
    %End

    virtual
    void SetSelectedFont(
        const wxFont & font
    );
    %Docstring
        SetSelectedFont(font)
        
        Sets the font for drawing text for selected UI elements.
    %End

    virtual
    void SetMeasuringFont(
        const wxFont & font
    );
    %Docstring
        SetMeasuringFont(font)
        
        Sets the font used for calculating measurements.
    %End

    virtual
    void SetColour(
        const wxColour & colour
    );
    %Docstring
        SetColour(colour)
        
        Sets the colour of the inactive tabs.
    %End

    virtual
    void SetActiveColour(
        const wxColour & colour
    );
    %Docstring
        SetActiveColour(colour)
        
        Sets the colour of the selected tab.
    %End

    virtual
    void DrawBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawBackground(dc, wnd, rect)
        
        Draws a background on the given area.
    %End

    virtual
    void DrawTab(
        wxDC & dc,
        wxWindow * wnd,
        const wxAuiNotebookPage & page,
        const wxRect & rect,
        int close_button_state,
        wxRect * out_tab_rect,
        wxRect * out_button_rect,
        int * x_extent
    );
    %Docstring
        DrawTab(dc, wnd, page, rect, close_button_state, out_tab_rect, out_button_rect, x_extent)
        
        Draws a tab.
    %End

    virtual
    void DrawButton(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & in_rect,
        int bitmap_id,
        int button_state,
        int orientation,
        wxRect * out_rect
    );
    %Docstring
        DrawButton(dc, wnd, in_rect, bitmap_id, button_state, orientation, out_rect)
        
        Draws a button.
    %End

    virtual
    int GetIndentSize();
    %Docstring
        GetIndentSize() -> int
        
        Returns the indent size.
    %End

    virtual
    wxSize GetTabSize(
        wxDC & dc,
        wxWindow * wnd,
        const wxString & caption,
        const wxBitmap & bitmap,
        bool active,
        int close_button_state,
        int * x_extent
    );
    %Docstring
        GetTabSize(dc, wnd, caption, bitmap, active, close_button_state, x_extent) -> wx.Size
        
        Returns the tab size for the given caption, bitmap and state.
    %End

    int ShowDropDown(
        wxWindow * wnd,
        const wxAuiNotebookPageArray & items,
        int activeIdx
    );
    %Docstring
        ShowDropDown(wnd, items, activeIdx) -> int
    %End

    virtual
    int GetBestTabCtrlSize(
        wxWindow * ,
        const wxAuiNotebookPageArray & ,
        const wxSize & 
    );
    %Docstring
        GetBestTabCtrlSize(, , ) -> int
        
        Returns the tab control size.
    %End

    public:


    %Property(name=IndentSize, get=GetIndentSize)
};  // end of class wxAuiSimpleTabArt


class wxAuiNotebookEvent : wxBookCtrlEvent
{
    %Docstring
        AuiNotebookEvent(command_type=wx.wxEVT_NULL, win_id=0)
        
        This class is used by the events generated by wxAuiNotebook.
    %End
    %TypeHeaderCode
        #include <wx/aui/auibook.h>
    %End

public:
    wxAuiNotebookEvent(
        wxEventType command_type = wxEVT_NULL,
        int win_id = 0
    );

    wxEvent * Clone()   /Factory/;
    %Docstring
        Clone() -> wx.Event
    %End

    private:
        wxAuiNotebookEvent& operator=(const wxAuiNotebookEvent&);


};  // end of class wxAuiNotebookEvent


class wxAuiNotebookPageArray
{
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->GetCount();
    %End

            wxAuiNotebookPage& __getitem__(long index);
        %MethodCode
            if (0 > index)
                index += sipCpp->GetCount();

            if ((index < sipCpp->GetCount()) && (0 <= index)) {
                sipRes = &sipCpp->Item(index);
            }
            else {
                wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
                sipError = sipErrorFail;
            }
        %End
        

    int __contains__(wxAuiNotebookPage& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        sipRes = idx != wxNOT_FOUND;
    %End

    void append(wxAuiNotebookPage& obj);
    %MethodCode
        sipCpp->Add(*obj);
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxAuiNotebookPage& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
            }
        sipRes = idx;
    %End
};

%Extract(id=pycode_aui)
def _AuiNotebookPageArray___repr__(self):
    return "AuiNotebookPageArray: " + repr(list(self))
AuiNotebookPageArray.__repr__ = _AuiNotebookPageArray___repr__
del _AuiNotebookPageArray___repr__
%End


class wxAuiTabContainerButtonArray
{
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->GetCount();
    %End

            wxAuiTabContainerButton& __getitem__(long index);
        %MethodCode
            if (0 > index)
                index += sipCpp->GetCount();

            if ((index < sipCpp->GetCount()) && (0 <= index)) {
                sipRes = &sipCpp->Item(index);
            }
            else {
                wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
                sipError = sipErrorFail;
            }
        %End
        

    int __contains__(wxAuiTabContainerButton& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        sipRes = idx != wxNOT_FOUND;
    %End

    void append(wxAuiTabContainerButton& obj);
    %MethodCode
        sipCpp->Add(*obj);
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxAuiTabContainerButton& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
            }
        sipRes = idx;
    %End
};

%Extract(id=pycode_aui)
def _AuiTabContainerButtonArray___repr__(self):
    return "AuiTabContainerButtonArray: " + repr(list(self))
AuiTabContainerButtonArray.__repr__ = _AuiTabContainerButtonArray___repr__
del _AuiTabContainerButtonArray___repr__
%End


%Extract(id=pycode_aui)
EVT_AUINOTEBOOK_PAGE_CLOSE = wx.PyEventBinder( wxEVT_AUINOTEBOOK_PAGE_CLOSE, 1 )
EVT_AUINOTEBOOK_PAGE_CLOSED = wx.PyEventBinder( wxEVT_AUINOTEBOOK_PAGE_CLOSED, 1 )
EVT_AUINOTEBOOK_PAGE_CHANGED = wx.PyEventBinder( wxEVT_AUINOTEBOOK_PAGE_CHANGED, 1 )
EVT_AUINOTEBOOK_PAGE_CHANGING = wx.PyEventBinder( wxEVT_AUINOTEBOOK_PAGE_CHANGING, 1 )
EVT_AUINOTEBOOK_BUTTON = wx.PyEventBinder( wxEVT_AUINOTEBOOK_BUTTON, 1 )
EVT_AUINOTEBOOK_BEGIN_DRAG = wx.PyEventBinder( wxEVT_AUINOTEBOOK_BEGIN_DRAG, 1 )
EVT_AUINOTEBOOK_END_DRAG = wx.PyEventBinder( wxEVT_AUINOTEBOOK_END_DRAG, 1 )
EVT_AUINOTEBOOK_DRAG_MOTION = wx.PyEventBinder( wxEVT_AUINOTEBOOK_DRAG_MOTION, 1 )
EVT_AUINOTEBOOK_ALLOW_DND = wx.PyEventBinder( wxEVT_AUINOTEBOOK_ALLOW_DND, 1 )
EVT_AUINOTEBOOK_DRAG_DONE = wx.PyEventBinder( wxEVT_AUINOTEBOOK_DRAG_DONE, 1 )
EVT_AUINOTEBOOK_TAB_MIDDLE_DOWN = wx.PyEventBinder( wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN, 1 )
EVT_AUINOTEBOOK_TAB_MIDDLE_UP = wx.PyEventBinder( wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP, 1 )
EVT_AUINOTEBOOK_TAB_RIGHT_DOWN = wx.PyEventBinder( wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN, 1 )
EVT_AUINOTEBOOK_TAB_RIGHT_UP = wx.PyEventBinder( wxEVT_AUINOTEBOOK_TAB_RIGHT_UP, 1 )
EVT_AUINOTEBOOK_BG_DCLICK = wx.PyEventBinder( wxEVT_AUINOTEBOOK_BG_DCLICK, 1 )

%End

class wxAuiTabCtrl : wxControl, wxAuiTabContainer
{
    %Docstring
        AuiTabCtrl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)
    %End
public:
    wxAuiTabCtrl(
        wxWindow* parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint& pos = wxDefaultPosition,
        const wxSize& size = wxDefaultSize,
        long style = 0
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool IsDragging() const;
    %Docstring
        IsDragging() -> bool
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

};  // end of class wxAuiTabCtrl



//---------------------------------------------------------------------------

