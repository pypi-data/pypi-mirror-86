//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License

%Module( name=wx._xrc,
         keyword_arguments="All",
         use_argument_names=True,
         all_raise_py_exception=True,
         language="C++")
{
    %AutoPyName(remove_leading="wx")
};

%Copying
    Copyright: (c) 2020 by Total Control Software
    License:   wxWindows License
%End

%DefaultDocstringFormat(name="deindented")

%Extract(id=pycode_xrc, order=5)
# This file is generated by wxPython's SIP generator.  Do not edit by hand.
#
# Copyright: (c) 2020 by Total Control Software
# License:   wxWindows License

"""
The classes in this module enable loading widgets and layout from XML.
"""

from ._xrc import *

%End

//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wxPython/wxpy_api.h>
#include <wx/animate.h>
#include <wx/xrc/xmlres.h>
#include <wx/fs_mem.h>
#include "wxpybuffer.h"
%End

%Import _core.sip
%Import _xml.sip


//---------------------------------------------------------------------------

        // forward declarations
        class wxAnimation;
        class wxAnimationCtrl;


enum wxXmlResourceFlags
{
    wxXRC_USE_LOCALE,
    wxXRC_NO_SUBCLASSING,
    wxXRC_NO_RELOADING,
    wxXRC_USE_ENVVARS
};

class wxXmlResource : wxObject
{
    %Docstring
        XmlResource(filemask, flags=XRC_USE_LOCALE, domain=wx.EmptyString)
        XmlResource(flags=XRC_USE_LOCALE, domain=wx.EmptyString)
        
        This is the main class for interacting with the XML-based resource
        system.
    %End
    %TypeHeaderCode
        #include <wx/xrc/xmlres.h>
    %End

public:
    wxXmlResource(
        const wxString & filemask,
        int flags = wxXRC_USE_LOCALE,
        const wxString & domain = wxEmptyString
    );
    %MethodCode
        Py_BEGIN_ALLOW_THREADS
        sipCpp = new sipwxXmlResource(*filemask,flags,*domain);
        sipCpp->InitAllHandlers();
        Py_END_ALLOW_THREADS
    %End

    wxXmlResource(
        int flags = wxXRC_USE_LOCALE,
        const wxString & domain = wxEmptyString
    );
    %MethodCode
        Py_BEGIN_ALLOW_THREADS
        sipCpp = new sipwxXmlResource(flags,*domain);
        sipCpp->InitAllHandlers();
        Py_END_ALLOW_THREADS
    %End

    virtual
    ~wxXmlResource();

    wxMenuBar * LoadMenuBar(
        wxWindow * parent,
        const wxString & name
    );
    %Docstring
        LoadMenuBar(parent, name) -> MenuBar
        LoadMenuBar(name) -> MenuBar
        
        Loads a menubar from resource.
    %End

    wxMenuBar * LoadMenuBar(
        const wxString & name
    );

    wxObject * LoadObject(
        wxWindow * parent,
        const wxString & name,
        const wxString & classname
    );
    %Docstring
        LoadObject(parent, name, classname) -> Object
        LoadObject(instance, parent, name, classname) -> bool
        
        Load an object from the resource specifying both the resource name and
        the class name.
    %End

    bool LoadObject(
        wxObject * instance,
        wxWindow * parent,
        const wxString & name,
        const wxString & classname
    );

    wxObject * LoadObjectRecursively(
        wxWindow * parent,
        const wxString & name,
        const wxString & classname
    );
    %Docstring
        LoadObjectRecursively(parent, name, classname) -> Object
        LoadObjectRecursively(instance, parent, name, classname) -> bool
        
        Load an object from anywhere in the resource tree.
    %End

    bool LoadObjectRecursively(
        wxObject * instance,
        wxWindow * parent,
        const wxString & name,
        const wxString & classname
    );

    void AddHandler(
        wxXmlResourceHandler * handler   /Transfer/
    );
    %Docstring
        AddHandler(handler)
        
        Initializes only a specific handler (or custom handler).
    %End

    void InsertHandler(
        wxXmlResourceHandler * handler   /Transfer/
    );
    %Docstring
        InsertHandler(handler)
        
        Add a new handler at the beginning of the handler list.
    %End

    bool AttachUnknownControl(
        const wxString & name,
        wxWindow * control,
        wxWindow * parent = NULL
    );
    %Docstring
        AttachUnknownControl(name, control, parent=None) -> bool
        
        Attaches an unknown control to the given panel/window/dialog.
    %End

    void ClearHandlers();
    %Docstring
        ClearHandlers()
        
        Removes all handlers and deletes them (this means that any handlers
        added using AddHandler() must be allocated on the heap).
    %End

    int CompareVersion(
        int major,
        int minor,
        int release,
        int revision
    ) const;
    %Docstring
        CompareVersion(major, minor, release, revision) -> int
        
        Compares the XRC version to the argument.
    %End

    const wxString & GetDomain() const;
    %Docstring
        GetDomain() -> String
        
        Returns the domain (message catalog) that will be used to load
        translatable strings in the XRC.
    %End

    int GetFlags() const;
    %Docstring
        GetFlags() -> int
        
        Returns flags, which may be a bitlist of wxXmlResourceFlags
        enumeration values.
    %End

    const wxXmlNode * GetResourceNode(
        const wxString & name
    ) const;
    %Docstring
        GetResourceNode(name) -> XmlNode
        
        Returns the wxXmlNode containing the definition of the object with the
        given name or NULL.
    %End

    long GetVersion() const;
    %Docstring
        GetVersion() -> long
        
        Returns version information (a.b.c.d = d + 256*c + 2562*b + 2563*a).
    %End

    void InitAllHandlers();
    %Docstring
        InitAllHandlers()
        
        Initializes handlers for all supported controls/windows.
    %End

    bool Load(
        const wxString & filemask
    );
    %Docstring
        Load(filemask) -> bool
        
        Loads resources from XML files that match given filemask.
    %End

    bool LoadFile(
        const wxFileName & file
    );
    %Docstring
        LoadFile(file) -> bool
        
        Simpler form of Load() for loading a single XRC file.
    %End

    bool LoadAllFiles(
        const wxString & dirname
    );
    %Docstring
        LoadAllFiles(dirname) -> bool
        
        Loads all .xrc files from directory dirname.
    %End

    wxBitmap LoadBitmap(
        const wxString & name
    );
    %Docstring
        LoadBitmap(name) -> Bitmap
        
        Loads a bitmap resource from a file.
    %End

    wxDialog * LoadDialog(
        wxWindow * parent,
        const wxString & name
    );
    %Docstring
        LoadDialog(parent, name) -> Dialog
        LoadDialog(dlg, parent, name) -> bool
        
        Loads a dialog.
    %End

    bool LoadDialog(
        wxDialog * dlg,
        wxWindow * parent,
        const wxString & name
    );

    wxFrame * LoadFrame(
        wxWindow * parent,
        const wxString & name
    );
    %Docstring
        LoadFrame(parent, name) -> Frame
        LoadFrame(frame, parent, name) -> bool
        
        Loads a frame from the resource.
    %End

    bool LoadFrame(
        wxFrame * frame,
        wxWindow * parent,
        const wxString & name
    );

    wxIcon LoadIcon(
        const wxString & name
    );
    %Docstring
        LoadIcon(name) -> Icon
        
        Loads an icon resource from a file.
    %End

    wxMenu * LoadMenu(
        const wxString & name
    );
    %Docstring
        LoadMenu(name) -> Menu
        
        Loads menu from resource.
    %End

    wxPanel * LoadPanel(
        wxWindow * parent,
        const wxString & name
    );
    %Docstring
        LoadPanel(parent, name) -> Panel
        LoadPanel(panel, parent, name) -> bool
        
        Loads a panel.
    %End

    bool LoadPanel(
        wxPanel * panel,
        wxWindow * parent,
        const wxString & name
    );

    wxToolBar * LoadToolBar(
        wxWindow * parent,
        const wxString & name
    );
    %Docstring
        LoadToolBar(parent, name) -> ToolBar
        
        Loads a toolbar.
    %End

    void SetDomain(
        const wxString & domain
    );
    %Docstring
        SetDomain(domain)
        
        Sets the domain (message catalog) that will be used to load
        translatable strings in the XRC.
    %End

    void SetFlags(
        int flags
    );
    %Docstring
        SetFlags(flags)
        
        Sets flags (bitlist of wxXmlResourceFlags enumeration values).
    %End

    bool Unload(
        const wxString & filename
    );
    %Docstring
        Unload(filename) -> bool
        
        This function unloads a resource previously loaded by Load().
    %End

    static
    void AddSubclassFactory(
        wxXmlSubclassFactory * factory   /Transfer/
    );
    %Docstring
        AddSubclassFactory(factory)
        
        Registers subclasses factory for use in XRC.
    %End

    static
    wxString FindXRCIDById(
        int numId
    );
    %Docstring
        FindXRCIDById(numId) -> String
        
        Returns a string ID corresponding to the given numeric ID.
    %End

    static
    wxXmlResource * Get();
    %Docstring
        Get() -> XmlResource
        
        Gets the global resources object or creates one if none exists.
    %End

    static
    int GetXRCID(
        const wxString & str_id,
        int value_if_not_found = wxID_NONE
    );
    %Docstring
        GetXRCID(str_id, value_if_not_found=ID_NONE) -> int
        
        Returns a numeric ID that is equivalent to the string ID used in an
        XML resource.
    %End

    static
    wxXmlResource * Set(
        wxXmlResource * res   /Transfer/
    )   /TransferBack/;
    %Docstring
        Set(res) -> XmlResource
        
        Sets the global resources object and returns a pointer to the previous
        one (may be NULL).
    %End

    private:
        wxXmlResource(const wxXmlResource&);


    public:


    bool LoadFromBuffer(wxPyBuffer* data);
    %Docstring
        LoadFromBuffer(data) -> bool
        
        Load the resource from a bytes string or other data buffer compatible
        object.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxXmlResource_LoadFromBuffer(sipCpp, data);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxXmlResource_LoadFromBuffer(wxXmlResource* self, wxPyBuffer* data)
    {
        static int s_memFileIdx = 0;
        
        // Check for memory FS. If not present, load the handler:
        wxMemoryFSHandler::AddFile(wxT("XRC_resource/dummy_file"),
                                   wxT("dummy data"));
        wxFileSystem fsys;
        wxFSFile *f = fsys.OpenFile(wxT("memory:XRC_resource/dummy_file"));
        wxMemoryFSHandler::RemoveFile(wxT("XRC_resource/dummy_file"));
        if (f)
            delete f;
        else
            wxFileSystem::AddHandler(new wxMemoryFSHandler);
        
        // Now put the resource data into the memory FS
        wxString filename(wxT("XRC_resource/data_string_"));
        filename << s_memFileIdx;
        s_memFileIdx += 1;
        wxMemoryFSHandler::AddFile(filename, data->m_ptr, data->m_len);
        
        // Load the "file" into the resource object
        bool retval = self->Load(wxT("memory:") + filename );
        return retval;
    }
    %End

    public:


    %Property(name=Domain, get=GetDomain, set=SetDomain)
    %Property(name=Flags, get=GetFlags, set=SetFlags)
    %Property(name=Version, get=GetVersion)
};  // end of class wxXmlResource


%Extract(id=pycode_xrc)
XmlResource.LoadFromString = wx.deprecated(XmlResource.LoadFromBuffer, 'Use LoadFromBuffer instead')

%End

class wxXmlResourceHandler : wxObject
{
    %Docstring
        XmlResourceHandler()
        
        wxSizerXmlHandler is a class for resource handlers capable of creating
        a wxSizer object from an XML node.
    %End
    %TypeHeaderCode
        #include <wx/xrc/xmlres.h>
    %End

public:
    wxXmlResourceHandler();

    virtual
    ~wxXmlResourceHandler();

    wxObject * CreateResource(
        wxXmlNode * node,
        wxObject * parent,
        wxObject * instance
    );
    %Docstring
        CreateResource(node, parent, instance) -> Object
        
        Creates an object (menu, dialog, control, ...) from an XML node.
    %End

    virtual
    wxObject * DoCreateResource() = 0   /Factory/;
    %Docstring
        DoCreateResource() -> Object
        
        Called from CreateResource after variables were filled.
    %End

    virtual
    bool CanHandle(
        wxXmlNode * node
    ) = 0;
    %Docstring
        CanHandle(node) -> bool
        
        Returns true if it understands this node and can create a resource
        from it, false otherwise.
    %End

    void SetParentResource(
        wxXmlResource * res
    );
    %Docstring
        SetParentResource(res)
        
        Sets the parent resource.
    %End

    public:


    %Property(name=Animation, get=GetAnimation)
    %Property(name=Bitmap, get=GetBitmap)
    %Property(name=Class, get=GetClass)
    %Property(name=CurFileSystem, get=GetCurFileSystem)
    %Property(name=Font, get=GetFont)
    %Property(name=ID, get=GetID)
    %Property(name=Icon, get=GetIcon)
    %Property(name=ImageList, get=GetImageList)
    %Property(name=Instance, get=GetInstance)
    %Property(name=Name, get=GetName)
    %Property(name=Node, get=GetNode)
    %Property(name=Parent, get=GetParent)
    %Property(name=ParentAsWindow, get=GetParentAsWindow)
    %Property(name=Position, get=GetPosition)
    %Property(name=Resource, get=GetResource)
    %Property(name=Size, get=GetSize)
    %Property(name=Style, get=GetStyle)

protected:
    void AddStyle(
        const wxString & name,
        int value
    );
    %Docstring
        AddStyle(name, value)
        
        Add a style flag (e.g.
    %End

    void AddWindowStyles();
    %Docstring
        AddWindowStyles()
        
        Add styles common to all wxWindow-derived classes.
    %End

    void CreateChildren(
        wxObject * parent,
        bool this_hnd_only = false
    );
    %Docstring
        CreateChildren(parent, this_hnd_only=False)
        
        Creates children.
    %End

    void CreateChildrenPrivately(
        wxObject * parent,
        wxXmlNode * rootnode = NULL
    );
    %Docstring
        CreateChildrenPrivately(parent, rootnode=None)
        
        Helper function.
    %End

    wxObject * CreateResFromNode(
        wxXmlNode * node,
        wxObject * parent,
        wxObject * instance = NULL
    );
    %Docstring
        CreateResFromNode(node, parent, instance=None) -> Object
        
        Creates a resource from a node.
    %End

    wxAnimation * GetAnimation(
        const wxString & param = "animation",
        wxAnimationCtrl * ctrl = NULL
    );
    %Docstring
        GetAnimation(param="animation", ctrl=None) -> Animation
        
        Creates an animation (see wxAnimation) from the filename specified in
        param.
    %End

    wxBitmap GetBitmap(
        const wxString & param = "bitmap",
        const wxArtClient & defaultArtClient = wxART_OTHER,
        wxSize size = wxDefaultSize
    );
    %Docstring
        GetBitmap(param="bitmap", defaultArtClient=ART_OTHER, size=DefaultSize) -> Bitmap
        GetBitmap(node, defaultArtClient=ART_OTHER, size=DefaultSize) -> Bitmap
        
        Gets a bitmap.
    %End

    wxBitmap GetBitmap(
        const wxXmlNode * node,
        const wxArtClient & defaultArtClient = wxART_OTHER,
        wxSize size = wxDefaultSize
    );

    bool GetBool(
        const wxString & param,
        bool defaultv = false
    );
    %Docstring
        GetBool(param, defaultv=False) -> bool
        
        Gets a bool flag (1, t, yes, on, true are true, everything else is
        false).
    %End

    wxColour GetColour(
        const wxString & param,
        const wxColour & defaultColour = wxNullColour
    );
    %Docstring
        GetColour(param, defaultColour=NullColour) -> Colour
        
        Gets colour in HTML syntax (#RRGGBB).
    %End

    wxFileSystem & GetCurFileSystem();
    %Docstring
        GetCurFileSystem() -> FileSystem
        
        Returns the current file system.
    %End

    wxCoord GetDimension(
        const wxString & param,
        wxCoord defaultv = 0,
        wxWindow * windowToUse = 0
    );
    %Docstring
        GetDimension(param, defaultv=0, windowToUse=0) -> Coord
        
        Gets a dimension (may be in dialog units).
    %End

    wxDirection GetDirection(
        const wxString & param,
        wxDirection dirDefault = wxLEFT
    );
    %Docstring
        GetDirection(param, dirDefault=LEFT) -> Direction
        
        Gets a direction.
    %End

    wxFont GetFont(
        const wxString & param = "font"
    );
    %Docstring
        GetFont(param="font") -> Font
        
        Gets a font.
    %End

    int GetID();
    %Docstring
        GetID() -> int
        
        Returns the XRCID.
    %End

    wxIcon GetIcon(
        const wxString & param = "icon",
        const wxArtClient & defaultArtClient = wxART_OTHER,
        wxSize size = wxDefaultSize
    );
    %Docstring
        GetIcon(param="icon", defaultArtClient=ART_OTHER, size=DefaultSize) -> Icon
        GetIcon(node, defaultArtClient=ART_OTHER, size=DefaultSize) -> Icon
        
        Returns an icon.
    %End

    wxIcon GetIcon(
        const wxXmlNode * node,
        const wxArtClient & defaultArtClient = wxART_OTHER,
        wxSize size = wxDefaultSize
    );

    wxIconBundle GetIconBundle(
        const wxString & param,
        const wxArtClient & defaultArtClient = wxART_OTHER
    );
    %Docstring
        GetIconBundle(param, defaultArtClient=ART_OTHER) -> IconBundle
        
        Returns an icon bundle.
    %End

    wxImageList * GetImageList(
        const wxString & param = "imagelist"
    );
    %Docstring
        GetImageList(param="imagelist") -> ImageList
        
        Creates an image list from the param markup data.
    %End

    long GetLong(
        const wxString & param,
        long defaultv = 0
    );
    %Docstring
        GetLong(param, defaultv=0) -> long
        
        Gets the integer value from the parameter.
    %End

    float GetFloat(
        const wxString & param,
        float defaultv = 0
    );
    %Docstring
        GetFloat(param, defaultv=0) -> float
        
        Gets a float value from the parameter.
    %End

    wxString GetName();
    %Docstring
        GetName() -> String
        
        Returns the resource name.
    %End

    bool IsObjectNode(
        const wxXmlNode * node
    ) const;
    %Docstring
        IsObjectNode(node) -> bool
        
        Checks if the given node is an object node.
    %End

    wxString GetNodeContent(
        wxXmlNode * node
    );
    %Docstring
        GetNodeContent(node) -> String
        
        Gets node content from wxXML_ENTITY_NODE.
    %End

    wxXmlNode * GetNodeParent(
        const wxXmlNode * node
    ) const;
    %Docstring
        GetNodeParent(node) -> XmlNode
        
        Gets the parent of the node given.
    %End

    wxXmlNode * GetNodeNext(
        const wxXmlNode * node
    ) const;
    %Docstring
        GetNodeNext(node) -> XmlNode
        
        Gets the next sibling node related to the given node, possibly NULL.
    %End

    wxXmlNode * GetNodeChildren(
        const wxXmlNode * node
    ) const;
    %Docstring
        GetNodeChildren(node) -> XmlNode
        
        Gets the first child of the given node or NULL.
    %End

    wxXmlNode * GetParamNode(
        const wxString & param
    );
    %Docstring
        GetParamNode(param) -> XmlNode
        
        Finds the node or returns NULL.
    %End

    wxString GetParamValue(
        const wxString & param
    );
    %Docstring
        GetParamValue(param) -> String
        GetParamValue(node) -> String
        
        Finds the parameter value or returns the empty string.
    %End

    wxString GetParamValue(
        const wxXmlNode * node
    );

    wxPoint GetPosition(
        const wxString & param = "pos"
    );
    %Docstring
        GetPosition(param="pos") -> Point
        
        Gets the position (may be in dialog units).
    %End

    wxSize GetSize(
        const wxString & param = "size",
        wxWindow * windowToUse = 0
    );
    %Docstring
        GetSize(param="size", windowToUse=0) -> Size
        
        Gets the size (may be in dialog units).
    %End

    int GetStyle(
        const wxString & param = "style",
        int defaults = 0
    );
    %Docstring
        GetStyle(param="style", defaults=0) -> int
        
        Gets style flags from text in form "flag | flag2| flag3 |..." Only
        understands flags added with AddStyle().
    %End

    wxString GetText(
        const wxString & param,
        bool translate = true
    );
    %Docstring
        GetText(param, translate=True) -> String
        
        Gets text from param and does some conversions:
    %End

    bool HasParam(
        const wxString & param
    );
    %Docstring
        HasParam(param) -> bool
        
        Check to see if a parameter exists.
    %End

    bool IsOfClass(
        wxXmlNode * node,
        const wxString & classname
    );
    %Docstring
        IsOfClass(node, classname) -> bool
        
        Convenience function.
    %End

    void SetupWindow(
        wxWindow * wnd
    );
    %Docstring
        SetupWindow(wnd)
        
        Sets common window options.
    %End

    void ReportError(
        wxXmlNode * context,
        const wxString & message
    );
    %Docstring
        ReportError(context, message)
        ReportError(message)
        
        Reports error in XRC resources to the user.
    %End

    void ReportError(
        const wxString & message
    );

    void ReportParamError(
        const wxString & param,
        const wxString & message
    );
    %Docstring
        ReportParamError(param, message)
        
        Like ReportError(wxXmlNode*, const wxString&), but uses the node of
        parameter param of the currently processed object as the context.
    %End

    wxXmlResource * GetResource() const;
    %Docstring
        GetResource() -> XmlResource
        
        After CreateResource has been called this will return the current
        wxXmlResource object.
    %End

    wxXmlNode * GetNode() const;
    %Docstring
        GetNode() -> XmlNode
        
        After CreateResource has been called this will return the XML node
        being processed.
    %End

    wxString GetClass() const;
    %Docstring
        GetClass() -> String
        
        After CreateResource has been called this will return the class name
        of the XML resource node being processed.
    %End

    wxObject * GetParent() const;
    %Docstring
        GetParent() -> Object
        
        After CreateResource has been called this will return the current
        item's parent, if any.
    %End

    wxObject * GetInstance() const;
    %Docstring
        GetInstance() -> Object
        
        After CreateResource has been called this will return the instance
        that the XML resource content should be created upon, if it has
        already been created.
    %End

    wxWindow * GetParentAsWindow() const;
    %Docstring
        GetParentAsWindow() -> Window
        
        After CreateResource has been called this will return the item's
        parent as a wxWindow.
    %End

};  // end of class wxXmlResourceHandler


%Extract(id=pycode_xrc, order=10)
import wx
ID_NONE = wx.ID_NONE  # Needed for some parameter defaults in this module

%End

%Extract(id=pycode_xrc)
@wx.deprecatedMsg("Use :class:`xrc.XmlResource` instead")
def EmptyXmlResource(flags=XRC_USE_LOCALE, domain=""):
    """
    A compatibility wrapper for the XmlResource(flags, domain) constructor
    """
    return XmlResource(flags, domain)

%End

%Extract(id=pycode_xrc)
def XRCID(str_id, value_if_not_found=wx.ID_NONE):
    """
    Returns a numeric ID that is equivalent to the string ID used in an XML resource.
    """
    return XmlResource.GetXRCID(str_id, value_if_not_found)

%End

%Extract(id=pycode_xrc)
def XRCCTRL(window, str_id, *ignoreargs):
    """
    Returns the child window associated with the string ID in an XML resource.
    """
    return window.FindWindow(XRCID(str_id))

%End

class wxXmlSubclassFactory
{
    %Docstring
        XmlSubclassFactory()
    %End
public:
    wxXmlSubclassFactory();

    ~wxXmlSubclassFactory();

    virtual
    wxObject* Create(
        const wxString& className
    ) = 0   /Factory/;
    %Docstring
        Create(className) -> Object
    %End

};  // end of class wxXmlSubclassFactory


%Extract(id=pycode_xrc)
# Create a factory for handling the subclass property of XRC's
# object tag.  This factory will search for the specified
# package.module.class and will try to instantiate it for XRC's
# use.  The class must support instantiation with no parameters and
# delayed creation of the UI widget (aka 2-phase create).

def _my_import(name):
    try:
        mod = __import__(name)
    except ImportError:
        import traceback
        print(traceback.format_exc())
        raise
    components = name.split('.')
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod

class XmlSubclassFactory_Python(XmlSubclassFactory):
    def __init__(self):
        XmlSubclassFactory.__init__(self)

    def Create(self, className):
        assert className.find('.') != -1, "Module name must be specified!"
        mname = className[:className.rfind('.')]
        cname = className[className.rfind('.')+1:]
        module = _my_import(mname)
        klass = getattr(module, cname)
        inst = klass()
        return inst

XmlResource.AddSubclassFactory(XmlSubclassFactory_Python())

%End


//---------------------------------------------------------------------------


%InitialisationCode
        wxXmlInitResourceModule();
        wxXmlResource::Get()->InitAllHandlers();
        
%End

//---------------------------------------------------------------------------

