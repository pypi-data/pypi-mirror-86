//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxTE_NO_VSCROLL;
const int wxTE_READONLY;
const int wxTE_MULTILINE;
const int wxTE_PROCESS_TAB;
const int wxTE_LEFT;
const int wxTE_CENTER;
const int wxTE_RIGHT;
const int wxTE_CENTRE;
const int wxTE_RICH;
const int wxTE_PROCESS_ENTER;
const int wxTE_PASSWORD;
const int wxTE_AUTO_URL;
const int wxTE_NOHIDESEL;
const int wxTE_DONTWRAP;
const int wxTE_CHARWRAP;
const int wxTE_WORDWRAP;
const int wxTE_BESTWRAP;
const int wxTE_RICH2;
const int wxTEXT_TYPE_ANY;
enum wxTextAttrAlignment
{
    wxTEXT_ALIGNMENT_DEFAULT,
    wxTEXT_ALIGNMENT_LEFT,
    wxTEXT_ALIGNMENT_CENTRE,
    wxTEXT_ALIGNMENT_CENTER,
    wxTEXT_ALIGNMENT_RIGHT,
    wxTEXT_ALIGNMENT_JUSTIFIED
};

enum wxTextAttrFlags
{
    wxTEXT_ATTR_TEXT_COLOUR,
    wxTEXT_ATTR_BACKGROUND_COLOUR,
    wxTEXT_ATTR_FONT_FACE,
    wxTEXT_ATTR_FONT_POINT_SIZE,
    wxTEXT_ATTR_FONT_PIXEL_SIZE,
    wxTEXT_ATTR_FONT_WEIGHT,
    wxTEXT_ATTR_FONT_ITALIC,
    wxTEXT_ATTR_FONT_UNDERLINE,
    wxTEXT_ATTR_FONT_STRIKETHROUGH,
    wxTEXT_ATTR_FONT_ENCODING,
    wxTEXT_ATTR_FONT_FAMILY,
    wxTEXT_ATTR_FONT_SIZE,
    wxTEXT_ATTR_FONT,
    wxTEXT_ATTR_ALIGNMENT,
    wxTEXT_ATTR_LEFT_INDENT,
    wxTEXT_ATTR_RIGHT_INDENT,
    wxTEXT_ATTR_TABS,
    wxTEXT_ATTR_PARA_SPACING_AFTER,
    wxTEXT_ATTR_PARA_SPACING_BEFORE,
    wxTEXT_ATTR_LINE_SPACING,
    wxTEXT_ATTR_CHARACTER_STYLE_NAME,
    wxTEXT_ATTR_PARAGRAPH_STYLE_NAME,
    wxTEXT_ATTR_LIST_STYLE_NAME,
    wxTEXT_ATTR_BULLET_STYLE,
    wxTEXT_ATTR_BULLET_NUMBER,
    wxTEXT_ATTR_BULLET_TEXT,
    wxTEXT_ATTR_BULLET_NAME,
    wxTEXT_ATTR_BULLET,
    wxTEXT_ATTR_URL,
    wxTEXT_ATTR_PAGE_BREAK,
    wxTEXT_ATTR_EFFECTS,
    wxTEXT_ATTR_OUTLINE_LEVEL,
    wxTEXT_ATTR_AVOID_PAGE_BREAK_BEFORE,
    wxTEXT_ATTR_AVOID_PAGE_BREAK_AFTER,
    wxTEXT_ATTR_CHARACTER,
    wxTEXT_ATTR_PARAGRAPH,
    wxTEXT_ATTR_ALL
};

enum wxTextAttrBulletStyle
{
    wxTEXT_ATTR_BULLET_STYLE_NONE,
    wxTEXT_ATTR_BULLET_STYLE_ARABIC,
    wxTEXT_ATTR_BULLET_STYLE_LETTERS_UPPER,
    wxTEXT_ATTR_BULLET_STYLE_LETTERS_LOWER,
    wxTEXT_ATTR_BULLET_STYLE_ROMAN_UPPER,
    wxTEXT_ATTR_BULLET_STYLE_ROMAN_LOWER,
    wxTEXT_ATTR_BULLET_STYLE_SYMBOL,
    wxTEXT_ATTR_BULLET_STYLE_BITMAP,
    wxTEXT_ATTR_BULLET_STYLE_PARENTHESES,
    wxTEXT_ATTR_BULLET_STYLE_PERIOD,
    wxTEXT_ATTR_BULLET_STYLE_STANDARD,
    wxTEXT_ATTR_BULLET_STYLE_RIGHT_PARENTHESIS,
    wxTEXT_ATTR_BULLET_STYLE_OUTLINE,
    wxTEXT_ATTR_BULLET_STYLE_ALIGN_LEFT,
    wxTEXT_ATTR_BULLET_STYLE_ALIGN_RIGHT,
    wxTEXT_ATTR_BULLET_STYLE_ALIGN_CENTRE,
    wxTEXT_ATTR_BULLET_STYLE_CONTINUATION
};

enum wxTextAttrEffects
{
    wxTEXT_ATTR_EFFECT_NONE,
    wxTEXT_ATTR_EFFECT_CAPITALS,
    wxTEXT_ATTR_EFFECT_SMALL_CAPITALS,
    wxTEXT_ATTR_EFFECT_STRIKETHROUGH,
    wxTEXT_ATTR_EFFECT_DOUBLE_STRIKETHROUGH,
    wxTEXT_ATTR_EFFECT_SHADOW,
    wxTEXT_ATTR_EFFECT_EMBOSS,
    wxTEXT_ATTR_EFFECT_OUTLINE,
    wxTEXT_ATTR_EFFECT_ENGRAVE,
    wxTEXT_ATTR_EFFECT_SUPERSCRIPT,
    wxTEXT_ATTR_EFFECT_SUBSCRIPT,
    wxTEXT_ATTR_EFFECT_RTL,
    wxTEXT_ATTR_EFFECT_SUPPRESS_HYPHENATION
};

enum wxTextAttrLineSpacing
{
    wxTEXT_ATTR_LINE_SPACING_NORMAL,
    wxTEXT_ATTR_LINE_SPACING_HALF,
    wxTEXT_ATTR_LINE_SPACING_TWICE
};

enum wxTextAttrUnderlineType
{
    wxTEXT_ATTR_UNDERLINE_NONE,
    wxTEXT_ATTR_UNDERLINE_SOLID,
    wxTEXT_ATTR_UNDERLINE_DOUBLE,
    wxTEXT_ATTR_UNDERLINE_SPECIAL
};

enum wxTextCtrlHitTestResult
{
    wxTE_HT_UNKNOWN,
    wxTE_HT_BEFORE,
    wxTE_HT_ON_TEXT,
    wxTE_HT_BELOW,
    wxTE_HT_BEYOND
};

typedef long wxTextCoord;

wxEventType wxEVT_TEXT   /PyName=wxEVT_TEXT/;

wxEventType wxEVT_TEXT_ENTER   /PyName=wxEVT_TEXT_ENTER/;

wxEventType wxEVT_TEXT_URL   /PyName=wxEVT_TEXT_URL/;

wxEventType wxEVT_TEXT_MAXLEN   /PyName=wxEVT_TEXT_MAXLEN/;

class wxTextAttr
{
    %Docstring
        TextAttr()
        TextAttr(colText, colBack=NullColour, font=NullFont, alignment=TEXT_ALIGNMENT_DEFAULT)
        TextAttr(attr)
        
        wxTextAttr represents the character and paragraph attributes, or
        style, for a range of text in a wxTextCtrl or wxRichTextCtrl.
    %End
    %TypeHeaderCode
        #include <wx/textctrl.h>
    %End

public:
    wxTextAttr();

    wxTextAttr(
        const wxColour & colText,
        const wxColour & colBack = wxNullColour,
        const wxFont & font = wxNullFont,
        wxTextAttrAlignment alignment = wxTEXT_ALIGNMENT_DEFAULT
    );

    wxTextAttr(
        const wxTextAttr & attr
    );

    wxTextAttrAlignment GetAlignment() const;
    %Docstring
        GetAlignment() -> TextAttrAlignment
        
        Returns the alignment flags.
    %End

    const wxColour & GetBackgroundColour() const;
    %Docstring
        GetBackgroundColour() -> Colour
        
        Returns the background colour.
    %End

    const wxString & GetBulletFont() const;
    %Docstring
        GetBulletFont() -> String
        
        Returns a string containing the name of the font associated with the
        bullet symbol.
    %End

    const wxString & GetBulletName() const;
    %Docstring
        GetBulletName() -> String
        
        Returns the standard bullet name, applicable if the bullet style is
        wxTEXT_ATTR_BULLET_STYLE_STANDARD.
    %End

    int GetBulletNumber() const;
    %Docstring
        GetBulletNumber() -> int
        
        Returns the bullet number.
    %End

    int GetBulletStyle() const;
    %Docstring
        GetBulletStyle() -> int
        
        Returns the bullet style.
    %End

    const wxString & GetBulletText() const;
    %Docstring
        GetBulletText() -> String
        
        Returns the bullet text, which could be a symbol, or (for example)
        cached outline text.
    %End

    const wxString & GetCharacterStyleName() const;
    %Docstring
        GetCharacterStyleName() -> String
        
        Returns the name of the character style.
    %End

    long GetFlags() const;
    %Docstring
        GetFlags() -> long
        
        Returns flags indicating which attributes are applicable.
    %End

    wxFont GetFont() const;
    %Docstring
        GetFont() -> Font
        
        Creates and returns a font specified by the font attributes in the
        wxTextAttr object.
    %End

    bool GetFontAttributes(
        const wxFont & font,
        int flags = wxTEXT_ATTR_FONT
    );
    %Docstring
        GetFontAttributes(font, flags=TEXT_ATTR_FONT) -> bool
        
        Gets the font attributes from the given font, using only the
        attributes specified by flags.
    %End

    wxFontEncoding GetFontEncoding() const;
    %Docstring
        GetFontEncoding() -> FontEncoding
        
        Returns the font encoding.
    %End

    const wxString & GetFontFaceName() const;
    %Docstring
        GetFontFaceName() -> String
        
        Returns the font face name.
    %End

    wxFontFamily GetFontFamily() const;
    %Docstring
        GetFontFamily() -> FontFamily
        
        Returns the font family.
    %End

    int GetFontSize() const;
    %Docstring
        GetFontSize() -> int
        
        Returns the font size in points.
    %End

    wxFontStyle GetFontStyle() const;
    %Docstring
        GetFontStyle() -> FontStyle
        
        Returns the font style.
    %End

    bool GetFontUnderlined() const;
    %Docstring
        GetFontUnderlined() -> bool
        
        Returns true if the font is underlined.
    %End

    wxTextAttrUnderlineType GetUnderlineType() const;
    %Docstring
        GetUnderlineType() -> TextAttrUnderlineType
        
        Returns the underline type, which is one of the
        wxTextAttrUnderlineType values.
    %End

    const wxColour & GetUnderlineColour() const;
    %Docstring
        GetUnderlineColour() -> Colour
        
        Returns the underline color used.
    %End

    wxFontWeight GetFontWeight() const;
    %Docstring
        GetFontWeight() -> FontWeight
        
        Returns the font weight.
    %End

    long GetLeftIndent() const;
    %Docstring
        GetLeftIndent() -> long
        
        Returns the left indent in tenths of a millimetre.
    %End

    long GetLeftSubIndent() const;
    %Docstring
        GetLeftSubIndent() -> long
        
        Returns the left sub-indent in tenths of a millimetre.
    %End

    int GetLineSpacing() const;
    %Docstring
        GetLineSpacing() -> int
        
        Returns the line spacing value, one of wxTextAttrLineSpacing values.
    %End

    const wxString & GetListStyleName() const;
    %Docstring
        GetListStyleName() -> String
        
        Returns the name of the list style.
    %End

    int GetOutlineLevel() const;
    %Docstring
        GetOutlineLevel() -> int
        
        Returns the outline level.
    %End

    int GetParagraphSpacingAfter() const;
    %Docstring
        GetParagraphSpacingAfter() -> int
        
        Returns the space in tenths of a millimeter after the paragraph.
    %End

    int GetParagraphSpacingBefore() const;
    %Docstring
        GetParagraphSpacingBefore() -> int
        
        Returns the space in tenths of a millimeter before the paragraph.
    %End

    const wxString & GetParagraphStyleName() const;
    %Docstring
        GetParagraphStyleName() -> String
        
        Returns the name of the paragraph style.
    %End

    long GetRightIndent() const;
    %Docstring
        GetRightIndent() -> long
        
        Returns the right indent in tenths of a millimeter.
    %End

    const wxArrayInt & GetTabs() const;
    %Docstring
        GetTabs() -> ArrayInt
        
        Returns an array of tab stops, each expressed in tenths of a
        millimeter.
    %End

    const wxColour & GetTextColour() const;
    %Docstring
        GetTextColour() -> Colour
        
        Returns the text foreground colour.
    %End

    int GetTextEffectFlags() const;
    %Docstring
        GetTextEffectFlags() -> int
        
        Returns the text effect bits of interest.
    %End

    int GetTextEffects() const;
    %Docstring
        GetTextEffects() -> int
        
        Returns the text effects, a bit list of styles.
    %End

    const wxString & GetURL() const;
    %Docstring
        GetURL() -> String
        
        Returns the URL for the content.
    %End

    bool HasAlignment() const;
    %Docstring
        HasAlignment() -> bool
        
        Returns true if the attribute object specifies alignment.
    %End

    bool HasBackgroundColour() const;
    %Docstring
        HasBackgroundColour() -> bool
        
        Returns true if the attribute object specifies a background colour.
    %End

    bool HasBulletName() const;
    %Docstring
        HasBulletName() -> bool
        
        Returns true if the attribute object specifies a standard bullet name.
    %End

    bool HasBulletNumber() const;
    %Docstring
        HasBulletNumber() -> bool
        
        Returns true if the attribute object specifies a bullet number.
    %End

    bool HasBulletStyle() const;
    %Docstring
        HasBulletStyle() -> bool
        
        Returns true if the attribute object specifies a bullet style.
    %End

    bool HasBulletText() const;
    %Docstring
        HasBulletText() -> bool
        
        Returns true if the attribute object specifies bullet text (usually
        specifying a symbol).
    %End

    bool HasCharacterStyleName() const;
    %Docstring
        HasCharacterStyleName() -> bool
        
        Returns true if the attribute object specifies a character style name.
    %End

    bool HasFlag(
        long flag
    ) const;
    %Docstring
        HasFlag(flag) -> bool
        
        Returns true if the flag is present in the attribute object's flag
        bitlist.
    %End

    bool HasFont() const;
    %Docstring
        HasFont() -> bool
        
        Returns true if the attribute object specifies any font attributes.
    %End

    bool HasFontEncoding() const;
    %Docstring
        HasFontEncoding() -> bool
        
        Returns true if the attribute object specifies an encoding.
    %End

    bool HasFontFaceName() const;
    %Docstring
        HasFontFaceName() -> bool
        
        Returns true if the attribute object specifies a font face name.
    %End

    bool HasFontFamily() const;
    %Docstring
        HasFontFamily() -> bool
        
        Returns true if the attribute object specifies a font family.
    %End

    bool HasFontItalic() const;
    %Docstring
        HasFontItalic() -> bool
        
        Returns true if the attribute object specifies italic style.
    %End

    bool HasFontSize() const;
    %Docstring
        HasFontSize() -> bool
        
        Returns true if the attribute object specifies a font point or pixel
        size.
    %End

    bool HasFontPointSize() const;
    %Docstring
        HasFontPointSize() -> bool
        
        Returns true if the attribute object specifies a font point size.
    %End

    bool HasFontPixelSize() const;
    %Docstring
        HasFontPixelSize() -> bool
        
        Returns true if the attribute object specifies a font pixel size.
    %End

    bool HasFontUnderlined() const;
    %Docstring
        HasFontUnderlined() -> bool
        
        Returns true if the attribute object specifies either underlining or
        no underlining.
    %End

    bool HasFontWeight() const;
    %Docstring
        HasFontWeight() -> bool
        
        Returns true if the attribute object specifies font weight (bold,
        light or normal).
    %End

    bool HasLeftIndent() const;
    %Docstring
        HasLeftIndent() -> bool
        
        Returns true if the attribute object specifies a left indent.
    %End

    bool HasLineSpacing() const;
    %Docstring
        HasLineSpacing() -> bool
        
        Returns true if the attribute object specifies line spacing.
    %End

    bool HasListStyleName() const;
    %Docstring
        HasListStyleName() -> bool
        
        Returns true if the attribute object specifies a list style name.
    %End

    bool HasOutlineLevel() const;
    %Docstring
        HasOutlineLevel() -> bool
        
        Returns true if the attribute object specifies an outline level.
    %End

    bool HasPageBreak() const;
    %Docstring
        HasPageBreak() -> bool
        
        Returns true if the attribute object specifies a page break before
        this paragraph.
    %End

    bool HasParagraphSpacingAfter() const;
    %Docstring
        HasParagraphSpacingAfter() -> bool
        
        Returns true if the attribute object specifies spacing after a
        paragraph.
    %End

    bool HasParagraphSpacingBefore() const;
    %Docstring
        HasParagraphSpacingBefore() -> bool
        
        Returns true if the attribute object specifies spacing before a
        paragraph.
    %End

    bool HasParagraphStyleName() const;
    %Docstring
        HasParagraphStyleName() -> bool
        
        Returns true if the attribute object specifies a paragraph style name.
    %End

    bool HasRightIndent() const;
    %Docstring
        HasRightIndent() -> bool
        
        Returns true if the attribute object specifies a right indent.
    %End

    bool HasTabs() const;
    %Docstring
        HasTabs() -> bool
        
        Returns true if the attribute object specifies tab stops.
    %End

    bool HasTextColour() const;
    %Docstring
        HasTextColour() -> bool
        
        Returns true if the attribute object specifies a text foreground
        colour.
    %End

    bool HasTextEffects() const;
    %Docstring
        HasTextEffects() -> bool
        
        Returns true if the attribute object specifies text effects.
    %End

    bool HasURL() const;
    %Docstring
        HasURL() -> bool
        
        Returns true if the attribute object specifies a URL.
    %End

    bool IsCharacterStyle() const;
    %Docstring
        IsCharacterStyle() -> bool
        
        Returns true if the object represents a character style, that is, the
        flags specify a font or a text background or foreground colour.
    %End

    bool IsDefault() const;
    %Docstring
        IsDefault() -> bool
        
        Returns false if we have any attributes set, true otherwise.
    %End

    bool IsParagraphStyle() const;
    %Docstring
        IsParagraphStyle() -> bool
        
        Returns true if the object represents a paragraph style, that is, the
        flags specify alignment, indentation, tabs, paragraph spacing, or
        bullet style.
    %End

    void SetAlignment(
        wxTextAttrAlignment alignment
    );
    %Docstring
        SetAlignment(alignment)
        
        Sets the paragraph alignment.
    %End

    void SetBackgroundColour(
        const wxColour & colBack
    );
    %Docstring
        SetBackgroundColour(colBack)
        
        Sets the background colour.
    %End

    void SetBulletFont(
        const wxString & font
    );
    %Docstring
        SetBulletFont(font)
        
        Sets the name of the font associated with the bullet symbol.
    %End

    void SetBulletName(
        const wxString & name
    );
    %Docstring
        SetBulletName(name)
        
        Sets the standard bullet name, applicable if the bullet style is
        wxTEXT_ATTR_BULLET_STYLE_STANDARD.
    %End

    void SetBulletNumber(
        int n
    );
    %Docstring
        SetBulletNumber(n)
        
        Sets the bullet number.
    %End

    void SetBulletStyle(
        int style
    );
    %Docstring
        SetBulletStyle(style)
        
        Sets the bullet style.
    %End

    void SetBulletText(
        const wxString & text
    );
    %Docstring
        SetBulletText(text)
        
        Sets the bullet text, which could be a symbol, or (for example) cached
        outline text.
    %End

    void SetCharacterStyleName(
        const wxString & name
    );
    %Docstring
        SetCharacterStyleName(name)
        
        Sets the character style name.
    %End

    void SetFlags(
        long flags
    );
    %Docstring
        SetFlags(flags)
        
        Sets the flags determining which styles are being specified.
    %End

    void SetFont(
        const wxFont & font,
        int flags = wxTEXT_ATTR_FONT &~wxTEXT_ATTR_FONT_PIXEL_SIZE
    );
    %Docstring
        SetFont(font, flags=TEXT_ATTR_FONT & ~TEXT_ATTR_FONT_PIXEL_SIZE)
        
        Sets the attributes for the given font.
    %End

    void SetFontEncoding(
        wxFontEncoding encoding
    );
    %Docstring
        SetFontEncoding(encoding)
        
        Sets the font encoding.
    %End

    void SetFontFaceName(
        const wxString & faceName
    );
    %Docstring
        SetFontFaceName(faceName)
        
        Sets the font face name.
    %End

    void SetFontFamily(
        wxFontFamily family
    );
    %Docstring
        SetFontFamily(family)
        
        Sets the font family.
    %End

    void SetFontSize(
        int pointSize
    );
    %Docstring
        SetFontSize(pointSize)
        
        Sets the font size in points.
    %End

    void SetFontPointSize(
        int pointSize
    );
    %Docstring
        SetFontPointSize(pointSize)
        
        Sets the font size in points.
    %End

    void SetFontPixelSize(
        int pixelSize
    );
    %Docstring
        SetFontPixelSize(pixelSize)
        
        Sets the font size in pixels.
    %End

    void SetFontStyle(
        wxFontStyle fontStyle
    );
    %Docstring
        SetFontStyle(fontStyle)
        
        Sets the font style (normal, italic or slanted).
    %End

    void SetFontUnderlined(
        bool underlined
    );
    %Docstring
        SetFontUnderlined(underlined)
        
        Sets the font underlining (solid line, text colour).
    %End

    void SetFontUnderlined(
        wxTextAttrUnderlineType type,
        const wxColour & colour = wxNullColour
    )   /PyName=SetFontUnderlineType/;
    %Docstring
        SetFontUnderlineType(type, colour=NullColour)
        
        Sets the font underlining.
    %End

    void SetFontWeight(
        wxFontWeight fontWeight
    );
    %Docstring
        SetFontWeight(fontWeight)
        
        Sets the font weight.
    %End

    void SetLeftIndent(
        int indent,
        int subIndent = 0
    );
    %Docstring
        SetLeftIndent(indent, subIndent=0)
        
        Sets the left indent and left subindent in tenths of a millimetre.
    %End

    void SetLineSpacing(
        int spacing
    );
    %Docstring
        SetLineSpacing(spacing)
        
        Sets the line spacing.
    %End

    void SetListStyleName(
        const wxString & name
    );
    %Docstring
        SetListStyleName(name)
        
        Sets the list style name.
    %End

    void SetOutlineLevel(
        int level
    );
    %Docstring
        SetOutlineLevel(level)
        
        Specifies the outline level.
    %End

    void SetPageBreak(
        bool pageBreak = true
    );
    %Docstring
        SetPageBreak(pageBreak=True)
        
        Specifies a page break before this paragraph.
    %End

    void SetParagraphSpacingAfter(
        int spacing
    );
    %Docstring
        SetParagraphSpacingAfter(spacing)
        
        Sets the spacing after a paragraph, in tenths of a millimetre.
    %End

    void SetParagraphSpacingBefore(
        int spacing
    );
    %Docstring
        SetParagraphSpacingBefore(spacing)
        
        Sets the spacing before a paragraph, in tenths of a millimetre.
    %End

    void SetParagraphStyleName(
        const wxString & name
    );
    %Docstring
        SetParagraphStyleName(name)
        
        Sets the name of the paragraph style.
    %End

    void SetRightIndent(
        int indent
    );
    %Docstring
        SetRightIndent(indent)
        
        Sets the right indent in tenths of a millimetre.
    %End

    void SetTabs(
        const wxArrayInt & tabs
    );
    %Docstring
        SetTabs(tabs)
        
        Sets the tab stops, expressed in tenths of a millimetre.
    %End

    void SetTextColour(
        const wxColour & colText
    );
    %Docstring
        SetTextColour(colText)
        
        Sets the text foreground colour.
    %End

    void SetTextEffectFlags(
        int flags
    );
    %Docstring
        SetTextEffectFlags(flags)
        
        Sets the text effect bits of interest.
    %End

    void SetTextEffects(
        int effects
    );
    %Docstring
        SetTextEffects(effects)
        
        Sets the text effects, a bit list of styles.
    %End

    void SetURL(
        const wxString & url
    );
    %Docstring
        SetURL(url)
        
        Sets the URL for the content.
    %End

    bool Apply(
        const wxTextAttr & style,
        const wxTextAttr * compareWith = NULL
    );
    %Docstring
        Apply(style, compareWith=None) -> bool
        
        Applies the attributes in style to the original object, but not those
        attributes from style that are the same as those in compareWith (if
        passed).
    %End

    void Merge(
        const wxTextAttr & overlay
    );
    %Docstring
        Merge(overlay)
        Merge(base, overlay) -> TextAttr
        
        Copies all defined/valid properties from overlay to current object.
    %End

    static
    wxTextAttr Merge(
        const wxTextAttr & base,
        const wxTextAttr & overlay
    );

    bool EqPartial(
        const wxTextAttr & attr,
        bool weakTest = true
    ) const;
    %Docstring
        EqPartial(attr, weakTest=True) -> bool
        
        Partial equality test.
    %End

    public:


    %Property(name=Alignment, get=GetAlignment, set=SetAlignment)
    %Property(name=BackgroundColour, get=GetBackgroundColour, set=SetBackgroundColour)
    %Property(name=BulletFont, get=GetBulletFont, set=SetBulletFont)
    %Property(name=BulletName, get=GetBulletName, set=SetBulletName)
    %Property(name=BulletNumber, get=GetBulletNumber, set=SetBulletNumber)
    %Property(name=BulletStyle, get=GetBulletStyle, set=SetBulletStyle)
    %Property(name=BulletText, get=GetBulletText, set=SetBulletText)
    %Property(name=CharacterStyleName, get=GetCharacterStyleName, set=SetCharacterStyleName)
    %Property(name=Flags, get=GetFlags, set=SetFlags)
    %Property(name=Font, get=GetFont, set=SetFont)
    %Property(name=FontEncoding, get=GetFontEncoding, set=SetFontEncoding)
    %Property(name=FontFaceName, get=GetFontFaceName, set=SetFontFaceName)
    %Property(name=FontFamily, get=GetFontFamily, set=SetFontFamily)
    %Property(name=FontSize, get=GetFontSize, set=SetFontSize)
    %Property(name=FontStyle, get=GetFontStyle, set=SetFontStyle)
    %Property(name=FontUnderlined, get=GetFontUnderlined, set=SetFontUnderlined)
    %Property(name=FontWeight, get=GetFontWeight, set=SetFontWeight)
    %Property(name=LeftIndent, get=GetLeftIndent, set=SetLeftIndent)
    %Property(name=LeftSubIndent, get=GetLeftSubIndent)
    %Property(name=LineSpacing, get=GetLineSpacing, set=SetLineSpacing)
    %Property(name=ListStyleName, get=GetListStyleName, set=SetListStyleName)
    %Property(name=OutlineLevel, get=GetOutlineLevel, set=SetOutlineLevel)
    %Property(name=ParagraphSpacingAfter, get=GetParagraphSpacingAfter, set=SetParagraphSpacingAfter)
    %Property(name=ParagraphSpacingBefore, get=GetParagraphSpacingBefore, set=SetParagraphSpacingBefore)
    %Property(name=ParagraphStyleName, get=GetParagraphStyleName, set=SetParagraphStyleName)
    %Property(name=RightIndent, get=GetRightIndent, set=SetRightIndent)
    %Property(name=Tabs, get=GetTabs, set=SetTabs)
    %Property(name=TextColour, get=GetTextColour, set=SetTextColour)
    %Property(name=TextEffectFlags, get=GetTextEffectFlags, set=SetTextEffectFlags)
    %Property(name=TextEffects, get=GetTextEffects, set=SetTextEffects)
    %Property(name=URL, get=GetURL, set=SetURL)
    %Property(name=UnderlineColour, get=GetUnderlineColour)
    %Property(name=UnderlineType, get=GetUnderlineType)
};  // end of class wxTextAttr


const char* wxTextCtrlNameStr;

class wxTextCtrl : wxControl, wxTextEntry
{
    %Docstring
        TextCtrl()
        TextCtrl(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=TextCtrlNameStr)
        
        A text control allows text to be displayed and edited.
    %End
    %TypeHeaderCode
        #include <wx/textctrl.h>
    %End

public:
    wxTextCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxTextCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxTextCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxTextCtrl();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxTextCtrlNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=TextCtrlNameStr) -> bool
        
        Creates the text control for two-step construction.
    %End

    void DiscardEdits();
    %Docstring
        DiscardEdits()
        
        Resets the internal modified flag as if the current changes had been
        saved.
    %End

    bool EmulateKeyPress(
        const wxKeyEvent & event
    );
    %Docstring
        EmulateKeyPress(event) -> bool
        
        This function inserts into the control the character which would have
        been inserted if the given key event had occurred in the text control.
    %End

    const wxTextAttr & GetDefaultStyle() const;
    %Docstring
        GetDefaultStyle() -> TextAttr
        
        Returns the style currently used for the new text.
    %End

    int GetLineLength(
        long lineNo
    ) const;
    %Docstring
        GetLineLength(lineNo) -> int
        
        Gets the length of the specified line, not including any trailing
        newline character(s).
    %End

    wxString GetLineText(
        long lineNo
    ) const;
    %Docstring
        GetLineText(lineNo) -> String
        
        Returns the contents of a given line in the text control, not
        including any trailing newline character(s).
    %End

    int GetNumberOfLines() const;
    %Docstring
        GetNumberOfLines() -> int
        
        Returns the number of lines in the text control buffer.
    %End

    bool GetStyle(
        long position,
        wxTextAttr & style
    );
    %Docstring
        GetStyle(position, style) -> bool
        
        Returns the style at this position in the text control.
    %End

    wxTextCtrlHitTestResult HitTest(
        const wxPoint & pt,
        long * pos   /Out/
    ) const   /PyName=HitTestPos/;
    %Docstring
        HitTestPos(pt) -> (TextCtrlHitTestResult, pos)
        
        Finds the position of the character at the specified point.
    %End

    wxTextCtrlHitTestResult HitTest(
        const wxPoint & pt,
        wxTextCoord * col   /Out/,
        wxTextCoord * row   /Out/
    ) const;
    %Docstring
        HitTest(pt) -> (TextCtrlHitTestResult, col, row)
        
        Finds the row and column of the character at the specified point.
    %End

    bool IsModified() const;
    %Docstring
        IsModified() -> bool
        
        Returns true if the text has been modified by user.
    %End

    bool IsMultiLine() const;
    %Docstring
        IsMultiLine() -> bool
        
        Returns true if this is a multi line edit control and false otherwise.
    %End

    bool IsSingleLine() const;
    %Docstring
        IsSingleLine() -> bool
        
        Returns true if this is a single line edit control and false
        otherwise.
    %End

    bool LoadFile(
        const wxString & filename,
        int fileType = wxTEXT_TYPE_ANY
    );
    %Docstring
        LoadFile(filename, fileType=TEXT_TYPE_ANY) -> bool
        
        Loads and displays the named file, if it exists.
    %End

    void MarkDirty();
    %Docstring
        MarkDirty()
        
        Mark text as modified (dirty).
    %End

    bool PositionToXY(
        long pos,
        long * x   /Out/,
        long * y   /Out/
    ) const;
    %Docstring
        PositionToXY(pos) -> (bool, x, y)
        
        Converts given position to a zero-based column, line number pair.
    %End

    wxPoint PositionToCoords(
        long pos
    ) const;
    %Docstring
        PositionToCoords(pos) -> Point
        
        Converts given text position to client coordinates in pixels.
    %End

    bool SaveFile(
        const wxString & filename = wxEmptyString,
        int fileType = wxTEXT_TYPE_ANY
    );
    %Docstring
        SaveFile(filename=EmptyString, fileType=TEXT_TYPE_ANY) -> bool
        
        Saves the contents of the control in a text file.
    %End

    bool SetDefaultStyle(
        const wxTextAttr & style
    );
    %Docstring
        SetDefaultStyle(style) -> bool
        
        Changes the default style to use for the new text which is going to be
        added to the control.
    %End

    void SetModified(
        bool modified
    );
    %Docstring
        SetModified(modified)
        
        Marks the control as being modified by the user or not.
    %End

    bool SetStyle(
        long start,
        long end,
        const wxTextAttr & style
    );
    %Docstring
        SetStyle(start, end, style) -> bool
        
        Changes the style of the given range.
    %End

    void ShowPosition(
        long pos
    );
    %Docstring
        ShowPosition(pos)
        
        Makes the line containing the given position visible.
    %End

    long XYToPosition(
        long x,
        long y
    ) const;
    %Docstring
        XYToPosition(x, y) -> long
        
        Converts the given zero based column and line number to a position.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void MacCheckSpelling(bool check);
    %Docstring
        MacCheckSpelling(check)
        
        Turn on the native spell checking for the text widget on
        OSX.  Ignored on other platforms.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxTextCtrl_MacCheckSpelling(sipCpp, check);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxTextCtrl_MacCheckSpelling(wxTextCtrl* self, bool check)
    {
        #ifdef __WXMAC__
            self->MacCheckSpelling(check);
        #endif
    }
    %End

    bool ShowNativeCaret(bool show = true);
    %Docstring
        ShowNativeCaret(show=True) -> bool
        
        Turn on the widget's native caret on Windows.
        Ignored on other platforms.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTextCtrl_ShowNativeCaret(sipCpp, show);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxTextCtrl_ShowNativeCaret(wxTextCtrl* self, bool show)
    {
        #ifdef __WXMSW__
            return self->ShowNativeCaret(show);
        #endif
    }
    %End

    bool HideNativeCaret();
    %Docstring
        HideNativeCaret() -> bool
        
        Turn off the widget's native caret on Windows.
        Ignored on other platforms.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTextCtrl_HideNativeCaret(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxTextCtrl_HideNativeCaret(wxTextCtrl* self)
    {
        #ifdef __WXMSW__
            return self->HideNativeCaret();
        #endif
    }
    %End

    void write(const wxString* text);
    %Docstring
        write(text)
        
        Append text to the textctrl, for file-like compatibility.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxTextCtrl_write(sipCpp, text);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxTextCtrl_write(wxTextCtrl* self, const wxString* text)
    {
        self->AppendText(*text);
    }
    %End

    void flush();
    %Docstring
        flush()
        
        NOP, for file-like compatibility.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxTextCtrl_flush(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxTextCtrl_flush(wxTextCtrl* self)
    {
        
    }
    %End

    void OSXEnableAutomaticQuoteSubstitution(bool enable);
    %Docstring
        OSXEnableAutomaticQuoteSubstitution(enable)
        
        Mac-only method for turning on/off automatic quote substitutions.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxTextCtrl_OSXEnableAutomaticQuoteSubstitution(sipCpp, enable);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxTextCtrl_OSXEnableAutomaticQuoteSubstitution(wxTextCtrl* self, bool enable)
    {
        #ifdef __WXMAC__
            self->OSXEnableAutomaticQuoteSubstitution(enable);
        #else
            wxPyRaiseNotImplemented();
        #endif
    }
    %End

    void OSXEnableAutomaticDashSubstitution(bool enable);
    %Docstring
        OSXEnableAutomaticDashSubstitution(enable)
        
        Mac-only method for turning on/off automatic dash substitutions.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxTextCtrl_OSXEnableAutomaticDashSubstitution(sipCpp, enable);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxTextCtrl_OSXEnableAutomaticDashSubstitution(wxTextCtrl* self, bool enable)
    {
        #ifdef __WXMAC__
            self->OSXEnableAutomaticDashSubstitution(enable);
        #else
            wxPyRaiseNotImplemented();
        #endif
    }
    %End

    void OSXDisableAllSmartSubstitutions();
    %Docstring
        OSXDisableAllSmartSubstitutions()
        
        Mac-only method to disable all automatic text substitutions.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxTextCtrl_OSXDisableAllSmartSubstitutions(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxTextCtrl_OSXDisableAllSmartSubstitutions(wxTextCtrl* self)
    {
        #ifdef __WXMAC__
            self->OSXDisableAllSmartSubstitutions();
        #else
            wxPyRaiseNotImplemented();
        #endif
    }
    %End

    public:


    %Property(name=DefaultStyle, get=GetDefaultStyle, set=SetDefaultStyle)
    %Property(name=NumberOfLines, get=GetNumberOfLines)
};  // end of class wxTextCtrl


class wxTextUrlEvent : wxCommandEvent
{
    %Docstring
        TextUrlEvent(winid, evtMouse, start, end)
        TextUrlEvent(event)
    %End
    %TypeHeaderCode
        #include <wx/textctrl.h>
    %End

public:
    wxTextUrlEvent(
        int winid,
        const wxMouseEvent & evtMouse,
        long start,
        long end
    );

    wxTextUrlEvent(
        const wxTextUrlEvent & event
    );

    const wxMouseEvent & GetMouseEvent() const;
    %Docstring
        GetMouseEvent() -> MouseEvent
    %End

    long GetURLStart() const;
    %Docstring
        GetURLStart() -> long
    %End

    long GetURLEnd() const;
    %Docstring
        GetURLEnd() -> long
    %End

    virtual
    wxEvent * Clone() const   /Factory/;
    %Docstring
        Clone() -> Event
        
        Returns a copy of the event.
    %End

    private:
        wxTextUrlEvent& operator=(const wxTextUrlEvent&);


    public:


    %Property(name=MouseEvent, get=GetMouseEvent)
    %Property(name=URLEnd, get=GetURLEnd)
    %Property(name=URLStart, get=GetURLStart)
};  // end of class wxTextUrlEvent


%Extract(id=pycode_core)
EVT_TEXT        = wx.PyEventBinder( wxEVT_TEXT, 1)
EVT_TEXT_ENTER  = wx.PyEventBinder( wxEVT_TEXT_ENTER, 1)
EVT_TEXT_URL    = wx.PyEventBinder( wxEVT_TEXT_URL, 1)
EVT_TEXT_MAXLEN = wx.PyEventBinder( wxEVT_TEXT_MAXLEN, 1)
EVT_TEXT_CUT    = wx.PyEventBinder( wxEVT_TEXT_CUT )
EVT_TEXT_COPY   = wx.PyEventBinder( wxEVT_TEXT_COPY )
EVT_TEXT_PASTE  = wx.PyEventBinder( wxEVT_TEXT_PASTE )

# deprecated wxEVT aliases
wxEVT_COMMAND_TEXT_UPDATED   = wxEVT_TEXT
wxEVT_COMMAND_TEXT_ENTER     = wxEVT_TEXT_ENTER
wxEVT_COMMAND_TEXT_URL       = wxEVT_TEXT_URL
wxEVT_COMMAND_TEXT_MAXLEN    = wxEVT_TEXT_MAXLEN
wxEVT_COMMAND_TEXT_CUT       = wxEVT_TEXT_CUT
wxEVT_COMMAND_TEXT_COPY      = wxEVT_TEXT_COPY
wxEVT_COMMAND_TEXT_PASTE     = wxEVT_TEXT_PASTE

%End


//---------------------------------------------------------------------------

