//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const char* wxRadioBoxNameStr;

class wxRadioBox : wxControl, wxItemContainerImmutable
{
    %Docstring
        RadioBox()
        RadioBox(parent, id=ID_ANY, label=EmptyString, pos=DefaultPosition, size=DefaultSize, choices=[], majorDimension=0, style=RA_SPECIFY_COLS, validator=DefaultValidator, name=RadioBoxNameStr)
        
        A radio box item is used to select one of number of mutually exclusive
        choices.
    %End
    %TypeHeaderCode
        #include <wx/radiobox.h>
    %End

public:
    wxRadioBox();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxRadioBox(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & label = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        const wxArrayString & choices = wxArrayString(),
        int majorDimension = 0,
        long style = wxRA_SPECIFY_COLS,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxRadioBoxNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxRadioBox();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & label = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        const wxArrayString & choices = wxArrayString(),
        int majorDimension = 0,
        long style = wxRA_SPECIFY_COLS,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxRadioBoxNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, label=EmptyString, pos=DefaultPosition, size=DefaultSize, choices=[], majorDimension=0, style=RA_SPECIFY_COLS, validator=DefaultValidator, name=RadioBoxNameStr) -> bool
        
        Creates the radiobox for two-step construction.
    %End

    bool Enable(
        unsigned int n,
        bool enable = true
    )   /PyName=EnableItem/;
    %Docstring
        EnableItem(n, enable=True) -> bool
        
        Enables or disables an individual button in the radiobox.
    %End

    int FindString(
        const wxString & string,
        bool bCase = false
    ) const;
    %Docstring
        FindString(string, bCase=False) -> int
        
        Finds a button matching the given string, returning the position if
        found, or wxNOT_FOUND if not found.
    %End

    unsigned int GetColumnCount() const;
    %Docstring
        GetColumnCount() -> unsignedint
        
        Returns the number of columns in the radiobox.
    %End

    int GetItemFromPoint(
        const wxPoint & pt
    ) const;
    %Docstring
        GetItemFromPoint(pt) -> int
        
        Returns a radio box item under the point, a zero-based item index, or
        wxNOT_FOUND if no item is under the point.
    %End

    wxString GetItemHelpText(
        unsigned int item
    ) const;
    %Docstring
        GetItemHelpText(item) -> String
        
        Returns the helptext associated with the specified item if any or
        wxEmptyString.
    %End

    wxToolTip * GetItemToolTip(
        unsigned int item
    ) const;
    %Docstring
        GetItemToolTip(item) -> ToolTip
        
        Returns the tooltip associated with the specified item if any or NULL.
    %End

    unsigned int GetRowCount() const;
    %Docstring
        GetRowCount() -> unsignedint
        
        Returns the number of rows in the radiobox.
    %End

    bool IsItemEnabled(
        unsigned int n
    ) const;
    %Docstring
        IsItemEnabled(n) -> bool
        
        Returns true if the item is enabled or false if it was disabled using
        Enable(n, false).
    %End

    bool IsItemShown(
        unsigned int n
    ) const;
    %Docstring
        IsItemShown(n) -> bool
        
        Returns true if the item is currently shown or false if it was hidden
        using Show(n, false).
    %End

    void SetItemHelpText(
        unsigned int item,
        const wxString & helptext
    );
    %Docstring
        SetItemHelpText(item, helptext)
        
        Sets the helptext for an item.
    %End

    void SetItemToolTip(
        unsigned int item,
        const wxString & text
    );
    %Docstring
        SetItemToolTip(item, text)
        
        Sets the tooltip text for the specified item in the radio group.
    %End

    void SetSelection(
        int n
    );
    %Docstring
        SetSelection(n)
        
        Sets the selection to the given item.
    %End

    bool Show(
        unsigned int item,
        bool show = true
    )   /PyName=ShowItem/;
    %Docstring
        ShowItem(item, show=True) -> bool
        
        Shows or hides individual buttons.
    %End

    unsigned int GetCount() const;
    %Docstring
        GetCount() -> unsignedint
        
        Returns the number of items in the control.
    %End

    wxString GetString(
        unsigned int n
    ) const;
    %Docstring
        GetString(n) -> String
        
        Returns the label of the item with the given index.
    %End

    void SetString(
        unsigned int n,
        const wxString & string
    );
    %Docstring
        SetString(n, string)
        
        Sets the label for the given item.
    %End

    int GetSelection() const;
    %Docstring
        GetSelection() -> int
        
        Returns the index of the selected item.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ColumnCount, get=GetColumnCount)
    %Property(name=Count, get=GetCount)
    %Property(name=RowCount, get=GetRowCount)
    %Property(name=Selection, get=GetSelection, set=SetSelection)
};  // end of class wxRadioBox


%Extract(id=pycode_core)
def _RadioBox_GetItemLabel(self, n):
    """
    GetItemLabel(self, n) -> string
    
    Return the text of the n'th item in the radio box.
    """
    return self.GetString(n)
RadioBox.GetItemLabel = _RadioBox_GetItemLabel
del _RadioBox_GetItemLabel
%End

%Extract(id=pycode_core)
def _RadioBox_SetItemLabel(self, n, text):
    """
    SetItemLabel(self, n, text)
    
    Set the text of the n'th item in the radio box.
    """
    self.SetString(n, text)
RadioBox.SetItemLabel = _RadioBox_SetItemLabel
del _RadioBox_SetItemLabel
%End


//---------------------------------------------------------------------------

