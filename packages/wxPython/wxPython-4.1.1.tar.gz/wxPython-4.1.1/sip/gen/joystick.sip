//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _adv.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#if !wxUSE_JOYSTICK
class wxJoystick;

class wxJoystick : public wxObject {
public:
    wxJoystick(int joystick=wxJOYSTICK1)
        { wxPyRaiseNotImplemented(); }

    virtual ~wxJoystick()
        { }

    int GetButtonState() const 
        { return 0; }

    bool GetButtonState(unsigned int id) const 
        { return false; }

    int GetManufacturerId() const 
        { return 0; }

    int GetMovementThreshold() const 
        { return 0; }

    int GetNumberAxes() const 
        { return 0; }

    int GetNumberButtons() const 
        { return 0; }

    int GetPOVCTSPosition() const 
        { return 0; }

    int GetPOVPosition() const 
        { return 0; }

    int GetPollingMax() const 
        { return 0; }

    int GetPollingMin() const 
        { return 0; }

    wxPoint GetPosition() const 
        { return wxDefaultPosition; }

    int GetPosition(unsigned int axis) const 
        { return 0; }

    int GetProductId() const 
        { return 0; }

    wxString GetProductName() const 
        { return wxEmptyString; }

    int GetRudderMax() const 
        { return 0; }

    int GetRudderMin() const 
        { return 0; }

    int GetRudderPosition() const 
        { return 0; }

    int GetUMax() const 
        { return 0; }

    int GetUMin() const 
        { return 0; }

    int GetUPosition() const 
        { return 0; }

    int GetVMax() const 
        { return 0; }

    int GetVMin() const 
        { return 0; }

    int GetVPosition() const 
        { return 0; }

    int GetXMax() const 
        { return 0; }

    int GetXMin() const 
        { return 0; }

    int GetYMax() const 
        { return 0; }

    int GetYMin() const 
        { return 0; }

    int GetZMax() const 
        { return 0; }

    int GetZMin() const 
        { return 0; }

    int GetZPosition() const 
        { return 0; }

    bool HasPOV() const 
        { return false; }

    bool HasPOV4Dir() const 
        { return false; }

    bool HasPOVCTS() const 
        { return false; }

    bool HasRudder() const 
        { return false; }

    bool HasU() const 
        { return false; }

    bool HasV() const 
        { return false; }

    bool HasZ() const 
        { return false; }

    bool IsOk() const 
        { return false; }

    bool ReleaseCapture()
        { return false; }

    bool SetCapture(wxWindow *win, int pollingFreq=0)
        { return false; }

    void SetMovementThreshold(int threshold)
        { }

    static int GetNumberJoysticks()
        { wxPyRaiseNotImplemented(); return 0; }

    int GetMaxButtons() const
        { return 0; }

    int GetMaxAxes() const
        { return 0; }

};
#endif //!wxUSE_JOYSTICK

%End


//---------------------------------------------------------------------------

class wxJoystick : wxObject
{
    %Docstring
        Joystick(joystick=wx.JOYSTICK1)
        
        wxJoystick allows an application to control one or more joysticks.
    %End
    %TypeHeaderCode
        #include <wx/joystick.h>
    %End

public:
    wxJoystick(
        int joystick = wxJOYSTICK1
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxJoystick();

    int GetButtonState() const;
    %Docstring
        GetButtonState() -> int
        GetButtonState(id) -> bool
        
        Returns the state of the joystick buttons.
    %End

    bool GetButtonState(
        unsigned int id
    ) const;

    int GetManufacturerId() const;
    %Docstring
        GetManufacturerId() -> int
        
        Returns the manufacturer id.
    %End

    int GetMovementThreshold() const;
    %Docstring
        GetMovementThreshold() -> int
        
        Returns the movement threshold, the number of steps outside which the
        joystick is deemed to have moved.
    %End

    int GetNumberAxes() const;
    %Docstring
        GetNumberAxes() -> int
        
        Returns the number of axes for this joystick.
    %End

    int GetNumberButtons() const;
    %Docstring
        GetNumberButtons() -> int
        
        Returns the number of buttons for this joystick.
    %End

    int GetPOVCTSPosition() const;
    %Docstring
        GetPOVCTSPosition() -> int
        
        Returns the point-of-view position, expressed in continuous, one-
        hundredth of a degree units.
    %End

    int GetPOVPosition() const;
    %Docstring
        GetPOVPosition() -> int
        
        Returns the point-of-view position, expressed in continuous, one-
        hundredth of a degree units, but limited to return 0, 9000, 18000 or
        27000.
    %End

    int GetPollingMax() const;
    %Docstring
        GetPollingMax() -> int
        
        Returns the maximum polling frequency.
    %End

    int GetPollingMin() const;
    %Docstring
        GetPollingMin() -> int
        
        Returns the minimum polling frequency.
    %End

    wxPoint GetPosition() const;
    %Docstring
        GetPosition() -> wx.Point
        GetPosition(axis) -> int
        
        Returns the x, y position of the joystick.
    %End

    int GetPosition(
        unsigned int axis
    ) const;

    int GetProductId() const;
    %Docstring
        GetProductId() -> int
        
        Returns the product id for the joystick.
    %End

    wxString GetProductName() const;
    %Docstring
        GetProductName() -> String
        
        Returns the product name for the joystick.
    %End

    int GetRudderMax() const;
    %Docstring
        GetRudderMax() -> int
        
        Returns the maximum rudder position.
    %End

    int GetRudderMin() const;
    %Docstring
        GetRudderMin() -> int
        
        Returns the minimum rudder position.
    %End

    int GetRudderPosition() const;
    %Docstring
        GetRudderPosition() -> int
        
        Returns the rudder position.
    %End

    int GetUMax() const;
    %Docstring
        GetUMax() -> int
        
        Returns the maximum U position.
    %End

    int GetUMin() const;
    %Docstring
        GetUMin() -> int
        
        Returns the minimum U position.
    %End

    int GetUPosition() const;
    %Docstring
        GetUPosition() -> int
        
        Gets the position of the fifth axis of the joystick, if it exists.
    %End

    int GetVMax() const;
    %Docstring
        GetVMax() -> int
        
        Returns the maximum V position.
    %End

    int GetVMin() const;
    %Docstring
        GetVMin() -> int
        
        Returns the minimum V position.
    %End

    int GetVPosition() const;
    %Docstring
        GetVPosition() -> int
        
        Gets the position of the sixth axis of the joystick, if it exists.
    %End

    int GetXMax() const;
    %Docstring
        GetXMax() -> int
        
        Returns the maximum x position.
    %End

    int GetXMin() const;
    %Docstring
        GetXMin() -> int
        
        Returns the minimum x position.
    %End

    int GetYMax() const;
    %Docstring
        GetYMax() -> int
        
        Returns the maximum y position.
    %End

    int GetYMin() const;
    %Docstring
        GetYMin() -> int
        
        Returns the minimum y position.
    %End

    int GetZMax() const;
    %Docstring
        GetZMax() -> int
        
        Returns the maximum z position.
    %End

    int GetZMin() const;
    %Docstring
        GetZMin() -> int
        
        Returns the minimum z position.
    %End

    int GetZPosition() const;
    %Docstring
        GetZPosition() -> int
        
        Returns the z position of the joystick.
    %End

    bool HasPOV() const;
    %Docstring
        HasPOV() -> bool
        
        Returns true if the joystick has a point of view control.
    %End

    bool HasPOV4Dir() const;
    %Docstring
        HasPOV4Dir() -> bool
        
        Returns true if the joystick point-of-view supports discrete values
        (centered, forward, backward, left, and right).
    %End

    bool HasPOVCTS() const;
    %Docstring
        HasPOVCTS() -> bool
        
        Returns true if the joystick point-of-view supports continuous degree
        bearings.
    %End

    bool HasRudder() const;
    %Docstring
        HasRudder() -> bool
        
        Returns true if there is a rudder attached to the computer.
    %End

    bool HasU() const;
    %Docstring
        HasU() -> bool
        
        Returns true if the joystick has a U axis.
    %End

    bool HasV() const;
    %Docstring
        HasV() -> bool
        
        Returns true if the joystick has a V axis.
    %End

    bool HasZ() const;
    %Docstring
        HasZ() -> bool
        
        Returns true if the joystick has a Z axis.
    %End

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if the joystick is functioning.
    %End

    bool ReleaseCapture();
    %Docstring
        ReleaseCapture() -> bool
        
        Releases the capture set by SetCapture.
    %End

    bool SetCapture(
        wxWindow * win,
        int pollingFreq = 0
    );
    %Docstring
        SetCapture(win, pollingFreq=0) -> bool
        
        Sets the capture to direct joystick events to win.
    %End

    void SetMovementThreshold(
        int threshold
    );
    %Docstring
        SetMovementThreshold(threshold)
        
        Sets the movement threshold, the number of steps outside which the
        joystick is deemed to have moved.
    %End

    static
    int GetNumberJoysticks();
    %Docstring
        GetNumberJoysticks() -> int
        
        Returns the number of joysticks currently attached to the computer.
    %End

    int GetMaxButtons() const;
    %Docstring
        GetMaxButtons() -> int
    %End

    int GetMaxAxes() const;
    %Docstring
        GetMaxAxes() -> int
    %End

    public:


    %Property(name=ButtonState, get=GetButtonState)
    %Property(name=ManufacturerId, get=GetManufacturerId)
    %Property(name=MaxAxes, get=GetMaxAxes)
    %Property(name=MaxButtons, get=GetMaxButtons)
    %Property(name=MovementThreshold, get=GetMovementThreshold, set=SetMovementThreshold)
    %Property(name=NumberAxes, get=GetNumberAxes)
    %Property(name=NumberButtons, get=GetNumberButtons)
    %Property(name=POVCTSPosition, get=GetPOVCTSPosition)
    %Property(name=POVPosition, get=GetPOVPosition)
    %Property(name=PollingMax, get=GetPollingMax)
    %Property(name=PollingMin, get=GetPollingMin)
    %Property(name=Position, get=GetPosition)
    %Property(name=ProductId, get=GetProductId)
    %Property(name=ProductName, get=GetProductName)
    %Property(name=RudderMax, get=GetRudderMax)
    %Property(name=RudderMin, get=GetRudderMin)
    %Property(name=RudderPosition, get=GetRudderPosition)
    %Property(name=UMax, get=GetUMax)
    %Property(name=UMin, get=GetUMin)
    %Property(name=UPosition, get=GetUPosition)
    %Property(name=VMax, get=GetVMax)
    %Property(name=VMin, get=GetVMin)
    %Property(name=VPosition, get=GetVPosition)
    %Property(name=XMax, get=GetXMax)
    %Property(name=XMin, get=GetXMin)
    %Property(name=YMax, get=GetYMax)
    %Property(name=YMin, get=GetYMin)
    %Property(name=ZMax, get=GetZMax)
    %Property(name=ZMin, get=GetZMin)
    %Property(name=ZPosition, get=GetZPosition)
};  // end of class wxJoystick


const int wxUSE_JOYSTICK;

//---------------------------------------------------------------------------

