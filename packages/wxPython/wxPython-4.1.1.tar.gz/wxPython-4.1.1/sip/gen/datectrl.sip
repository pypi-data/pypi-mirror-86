//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _adv.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/datectrl.h>
%End


//---------------------------------------------------------------------------

enum 
{
    wxDP_DEFAULT,
    wxDP_SPIN,
    wxDP_DROPDOWN,
    wxDP_SHOWCENTURY,
    wxDP_ALLOWNONE
};

class wxDatePickerCtrl : wxControl
{
    %Docstring
        DatePickerCtrl()
        DatePickerCtrl(parent, id=wx.ID_ANY, dt=wx.DefaultDateTime, pos=wx.DefaultPosition, size=wx.DefaultSize, style=DP_DEFAULT|DP_SHOWCENTURY, validator=wx.DefaultValidator, name="datectrl")
        
        This control allows the user to select a date.
    %End
    %TypeHeaderCode
        #include <wx/datectrl.h>
    %End

public:
    wxDatePickerCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxDatePickerCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxDateTime & dt = wxDefaultDateTime,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDP_DEFAULT|wxDP_SHOWCENTURY,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = "datectrl"
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxDateTime & dt = wxDefaultDateTime,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDP_DEFAULT|wxDP_SHOWCENTURY,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = "datectrl"
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, dt=wx.DefaultDateTime, pos=wx.DefaultPosition, size=wx.DefaultSize, style=DP_DEFAULT|DP_SHOWCENTURY, validator=wx.DefaultValidator, name="datectrl") -> bool
        
        Create the control window.
    %End

    bool GetRange(
        wxDateTime * dt1   /Out/,
        wxDateTime * dt2   /Out/
    ) const;
    %Docstring
        GetRange() -> (bool, dt1, dt2)
        
        If the control had been previously limited to a range of dates using
        SetRange(), returns the lower and upper bounds of this range.
    %End

    wxDateTime GetValue() const;
    %Docstring
        GetValue() -> wx.DateTime
        
        Returns the currently entered date.
    %End

    void SetNullText(
        const wxString & text
    );
    %Docstring
        SetNullText(text)
        
        Set the text to show when there is no valid value.
    %End

    void SetRange(
        const wxDateTime & dt1,
        const wxDateTime & dt2
    );
    %Docstring
        SetRange(dt1, dt2)
        
        Sets the valid range for the date selection.
    %End

    void SetValue(
        const wxDateTime & dt
    );
    %Docstring
        SetValue(dt)
        
        Changes the current value of the control.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Value, get=GetValue, set=SetValue)
};  // end of class wxDatePickerCtrl


class wxDatePickerCtrlGeneric : wxControl
{
    %Docstring
        DatePickerCtrlGeneric()
        DatePickerCtrlGeneric(parent, id=wx.ID_ANY, dt=wx.DefaultDateTime, pos=wx.DefaultPosition, size=wx.DefaultSize, style=DP_DEFAULT|DP_SHOWCENTURY, validator=wx.DefaultValidator, name="datectrl")
        
        This control allows the user to select a date.
    %End
    %TypeHeaderCode
        #include <wx/datectrl.h>
    %End

    %TypeHeaderCode
        #include <wx/generic/datectrl.h>
    %End
public:
    wxDatePickerCtrlGeneric();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxDatePickerCtrlGeneric(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxDateTime & dt = wxDefaultDateTime,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDP_DEFAULT|wxDP_SHOWCENTURY,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = "datectrl"
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxDateTime & dt = wxDefaultDateTime,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDP_DEFAULT|wxDP_SHOWCENTURY,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = "datectrl"
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, dt=wx.DefaultDateTime, pos=wx.DefaultPosition, size=wx.DefaultSize, style=DP_DEFAULT|DP_SHOWCENTURY, validator=wx.DefaultValidator, name="datectrl") -> bool
        
        Create the control window.
    %End

    bool GetRange(
        wxDateTime * dt1   /Out/,
        wxDateTime * dt2   /Out/
    ) const;
    %Docstring
        GetRange() -> (bool, dt1, dt2)
        
        If the control had been previously limited to a range of dates using
        SetRange(), returns the lower and upper bounds of this range.
    %End

    wxDateTime GetValue() const;
    %Docstring
        GetValue() -> wx.DateTime
        
        Returns the currently entered date.
    %End

    void SetNullText(
        const wxString & text
    );
    %Docstring
        SetNullText(text)
        
        Set the text to show when there is no valid value.
    %End

    void SetRange(
        const wxDateTime & dt1,
        const wxDateTime & dt2
    );
    %Docstring
        SetRange(dt1, dt2)
        
        Sets the valid range for the date selection.
    %End

    void SetValue(
        const wxDateTime & dt
    );
    %Docstring
        SetValue(dt)
        
        Changes the current value of the control.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Value, get=GetValue, set=SetValue)
};  // end of class wxDatePickerCtrlGeneric


%Extract(id=pycode_adv)
GenericDatePickerCtrl = DatePickerCtrlGeneric

%End


//---------------------------------------------------------------------------

