//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/dnd.h>
%End


//---------------------------------------------------------------------------

enum 
{
    wxDrag_CopyOnly,
    wxDrag_AllowMove,
    wxDrag_DefaultMove
};

enum wxDragResult
{
    wxDragError,
    wxDragNone,
    wxDragCopy,
    wxDragMove,
    wxDragLink,
    wxDragCancel
};

bool wxIsDragResultOk(
    wxDragResult res
);
%Docstring
    IsDragResultOk(res) -> bool
    
    Returns true if res indicates that something was done during a DnD
    operation, i.e.
%End

class wxDropSource
{
    %Docstring
        DropSource(win=None)
        DropSource(data, win=None)
        
        This class represents a source for a drag and drop operation.
    %End
    %TypeHeaderCode
        #include <wx/dnd.h>
    %End

public:
    wxDropSource(
        wxWindow * win = NULL
    );

    wxDropSource(
        wxDataObject & data,
        wxWindow * win = NULL
    );

    virtual
    wxDragResult DoDragDrop(
        int flags = wxDrag_CopyOnly
    );
    %Docstring
        DoDragDrop(flags=Drag_CopyOnly) -> DragResult
        
        Starts the drag-and-drop operation which will terminate when the user
        releases the mouse.
    %End

    wxDataObject * GetDataObject();
    %Docstring
        GetDataObject() -> DataObject
        
        Returns the wxDataObject object that has been assigned previously.
    %End

    virtual
    bool GiveFeedback(
        wxDragResult effect
    );
    %Docstring
        GiveFeedback(effect) -> bool
        
        You may give some custom UI feedback during the drag and drop
        operation by overriding this function.
    %End

    void SetCursor(
        wxDragResult res,
        const wxCursor & cursor
    );
    %Docstring
        SetCursor(res, cursor)
        
        Set the icon to use for a certain drag result.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxDropSource_SetCursor(sipCpp, res, cursor);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxDropSource_SetCursor(wxDropSource* self, wxDragResult res, const wxCursor *cursor)
    {
        #ifdef __WXGTK__
            wxPyRaiseNotImplementedMsg("Cursors not supported, use SetIcon on wxGTK instead.");
        #else
            self->SetCursor(res, *cursor);
        #endif
    }
    %End

    void SetIcon(
        wxDragResult res,
        const wxIcon & icon
    );
    %Docstring
        SetIcon(res, icon)
        
        Set the icon to use for a certain drag result.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxDropSource_SetIcon(sipCpp, res, icon);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxDropSource_SetIcon(wxDropSource* self, wxDragResult res, const wxIcon *icon)
    {
        #ifdef __WXGTK__
            self->SetIcon(res, *icon);
        #else
            wxPyRaiseNotImplementedMsg("Icons not supported, use SetCursor on non-wxGTK ports.");
        #endif
    }
    %End

    void SetData(
        wxDataObject & data
    );
    %Docstring
        SetData(data)
        
        Sets the data wxDataObject associated with the drop source.
    %End

    private:
        wxDropSource(const wxDropSource&);


    public:


    %Property(name=DataObject, get=GetDataObject)
};  // end of class wxDropSource


class wxDropTarget
{
    %Docstring
        DropTarget(data=None)
        
        This class represents a target for a drag and drop operation.
    %End
    %TypeHeaderCode
        #include <wx/dnd.h>
    %End

public:
    wxDropTarget(
        wxDataObject * data   /Transfer/ = NULL
    );

    virtual
    ~wxDropTarget();

    virtual
    bool GetData();
    %Docstring
        GetData() -> bool
        
        This method may only be called from within OnData().
    %End

    virtual
    wxDragResult OnData(
        wxCoord x,
        wxCoord y,
        wxDragResult defResult
    ) = 0;
    %Docstring
        OnData(x, y, defResult) -> DragResult
        
        Called after OnDrop() returns true.
    %End

    virtual
    wxDragResult OnDragOver(
        wxCoord x,
        wxCoord y,
        wxDragResult defResult
    );
    %Docstring
        OnDragOver(x, y, defResult) -> DragResult
        
        Called when the mouse is being dragged over the drop target.
    %End

    virtual
    bool OnDrop(
        wxCoord x,
        wxCoord y
    );
    %Docstring
        OnDrop(x, y) -> bool
        
        Called when the user drops a data object on the target.
    %End

    virtual
    wxDragResult OnEnter(
        wxCoord x,
        wxCoord y,
        wxDragResult defResult
    );
    %Docstring
        OnEnter(x, y, defResult) -> DragResult
        
        Called when the mouse enters the drop target.
    %End

    virtual
    void OnLeave();
    %Docstring
        OnLeave()
        
        Called when the mouse leaves the drop target.
    %End

    wxDataObject * GetDataObject() const;
    %Docstring
        GetDataObject() -> DataObject
        
        Returns the data wxDataObject associated with the drop target.
    %End

    void SetDataObject(
        wxDataObject * data   /Transfer/
    );
    %Docstring
        SetDataObject(data)
        
        Sets the data wxDataObject associated with the drop target and deletes
        any previously associated data object.
    %End

    void SetDefaultAction(
        wxDragResult action
    );
    %Docstring
        SetDefaultAction(action)
        
        Sets the default action for drag and drop.
    %End

    wxDragResult GetDefaultAction();
    %Docstring
        GetDefaultAction() -> DragResult
        
        Returns default action for drag and drop or wxDragNone if this not
        specified.
    %End

    private:
        wxDropTarget(const wxDropTarget&);


    public:


    %Property(name=Data, get=GetData)
    %Property(name=DataObject, get=GetDataObject, set=SetDataObject)
    %Property(name=DefaultAction, get=GetDefaultAction, set=SetDefaultAction)
};  // end of class wxDropTarget


class wxTextDropTarget : wxDropTarget
{
    %Docstring
        TextDropTarget()
        
        A predefined drop target for dealing with text data.
    %End
    %TypeHeaderCode
        #include <wx/dnd.h>
    %End

public:
    wxTextDropTarget();

    virtual
    bool OnDrop(
        wxCoord x,
        wxCoord y
    );
    %Docstring
        OnDrop(x, y) -> bool
        
        See wxDropTarget::OnDrop().
    %End

    virtual
    bool OnDropText(
        wxCoord x,
        wxCoord y,
        const wxString & data
    ) = 0;
    %Docstring
        OnDropText(x, y, data) -> bool
        
        Override this function to receive dropped text.
    %End

    virtual wxDragResult OnData(wxCoord x, wxCoord y, wxDragResult def);


};  // end of class wxTextDropTarget


class wxFileDropTarget : wxDropTarget
{
    %Docstring
        FileDropTarget()
        
        This is a drop target which accepts files (dragged from File Manager
        or Explorer).
    %End
    %TypeHeaderCode
        #include <wx/dnd.h>
    %End

public:
    wxFileDropTarget();

    virtual
    bool OnDrop(
        wxCoord x,
        wxCoord y
    );
    %Docstring
        OnDrop(x, y) -> bool
        
        See wxDropTarget::OnDrop().
    %End

    virtual
    bool OnDropFiles(
        wxCoord x,
        wxCoord y,
        const wxArrayString & filenames
    ) = 0;
    %Docstring
        OnDropFiles(x, y, filenames) -> bool
        
        Override this function to receive dropped files.
    %End

    virtual wxDragResult OnData(wxCoord x, wxCoord y, wxDragResult def);


};  // end of class wxFileDropTarget


%Extract(id=pycode_core)
PyDropTarget = wx.deprecated(DropTarget, 'Use DropTarget instead.')

%End


//---------------------------------------------------------------------------

