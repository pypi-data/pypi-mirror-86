//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _ribbon.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

enum wxRibbonArtSetting
{
    wxRIBBON_ART_TAB_SEPARATION_SIZE,
    wxRIBBON_ART_PAGE_BORDER_LEFT_SIZE,
    wxRIBBON_ART_PAGE_BORDER_TOP_SIZE,
    wxRIBBON_ART_PAGE_BORDER_RIGHT_SIZE,
    wxRIBBON_ART_PAGE_BORDER_BOTTOM_SIZE,
    wxRIBBON_ART_PANEL_X_SEPARATION_SIZE,
    wxRIBBON_ART_PANEL_Y_SEPARATION_SIZE,
    wxRIBBON_ART_TOOL_GROUP_SEPARATION_SIZE,
    wxRIBBON_ART_GALLERY_BITMAP_PADDING_LEFT_SIZE,
    wxRIBBON_ART_GALLERY_BITMAP_PADDING_RIGHT_SIZE,
    wxRIBBON_ART_GALLERY_BITMAP_PADDING_TOP_SIZE,
    wxRIBBON_ART_GALLERY_BITMAP_PADDING_BOTTOM_SIZE,
    wxRIBBON_ART_PANEL_LABEL_FONT,
    wxRIBBON_ART_BUTTON_BAR_LABEL_FONT,
    wxRIBBON_ART_TAB_LABEL_FONT,
    wxRIBBON_ART_BUTTON_BAR_LABEL_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_LABEL_DISABLED_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_HOVER_BORDER_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_ACTIVE_BORDER_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_GALLERY_BORDER_COLOUR,
    wxRIBBON_ART_GALLERY_HOVER_BACKGROUND_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_BACKGROUND_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_FACE_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_HOVER_FACE_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_FACE_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_GALLERY_BUTTON_DISABLED_FACE_COLOUR,
    wxRIBBON_ART_GALLERY_ITEM_BORDER_COLOUR,
    wxRIBBON_ART_TAB_LABEL_COLOUR,
    wxRIBBON_ART_TAB_ACTIVE_LABEL_COLOUR,
    wxRIBBON_ART_TAB_HOVER_LABEL_COLOUR,
    wxRIBBON_ART_TAB_SEPARATOR_COLOUR,
    wxRIBBON_ART_TAB_SEPARATOR_GRADIENT_COLOUR,
    wxRIBBON_ART_TAB_CTRL_BACKGROUND_COLOUR,
    wxRIBBON_ART_TAB_CTRL_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_TAB_HOVER_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_TAB_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR,
    wxRIBBON_ART_TAB_HOVER_BACKGROUND_COLOUR,
    wxRIBBON_ART_TAB_HOVER_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR,
    wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_COLOUR,
    wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_TAB_BORDER_COLOUR,
    wxRIBBON_ART_PANEL_BORDER_COLOUR,
    wxRIBBON_ART_PANEL_BORDER_GRADIENT_COLOUR,
    wxRIBBON_ART_PANEL_MINIMISED_BORDER_COLOUR,
    wxRIBBON_ART_PANEL_MINIMISED_BORDER_GRADIENT_COLOUR,
    wxRIBBON_ART_PANEL_LABEL_BACKGROUND_COLOUR,
    wxRIBBON_ART_PANEL_LABEL_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_PANEL_LABEL_COLOUR,
    wxRIBBON_ART_PANEL_HOVER_LABEL_BACKGROUND_COLOUR,
    wxRIBBON_ART_PANEL_HOVER_LABEL_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_PANEL_HOVER_LABEL_COLOUR,
    wxRIBBON_ART_PANEL_MINIMISED_LABEL_COLOUR,
    wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR,
    wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_COLOUR,
    wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_PAGE_BORDER_COLOUR,
    wxRIBBON_ART_PAGE_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_PAGE_BACKGROUND_TOP_GRADIENT_COLOUR,
    wxRIBBON_ART_PAGE_BACKGROUND_COLOUR,
    wxRIBBON_ART_PAGE_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_PAGE_HOVER_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_PAGE_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR,
    wxRIBBON_ART_PAGE_HOVER_BACKGROUND_COLOUR,
    wxRIBBON_ART_PAGE_HOVER_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_TOOLBAR_BORDER_COLOUR,
    wxRIBBON_ART_TOOLBAR_HOVER_BORDER_COLOUR,
    wxRIBBON_ART_TOOLBAR_FACE_COLOUR,
    wxRIBBON_ART_TOOL_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_TOOL_BACKGROUND_TOP_GRADIENT_COLOUR,
    wxRIBBON_ART_TOOL_BACKGROUND_COLOUR,
    wxRIBBON_ART_TOOL_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_TOOL_HOVER_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_TOOL_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR,
    wxRIBBON_ART_TOOL_HOVER_BACKGROUND_COLOUR,
    wxRIBBON_ART_TOOL_HOVER_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_TOP_COLOUR,
    wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR,
    wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_COLOUR,
    wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_GRADIENT_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_LABEL_HIGHLIGHT_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_LABEL_HIGHLIGHT_GRADIENT_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_LABEL_HIGHLIGHT_TOP_COLOUR,
    wxRIBBON_ART_BUTTON_BAR_LABEL_HIGHLIGHT_GRADIENT_TOP_COLOUR
};

enum wxRibbonScrollButtonStyle
{
    wxRIBBON_SCROLL_BTN_LEFT,
    wxRIBBON_SCROLL_BTN_RIGHT,
    wxRIBBON_SCROLL_BTN_UP,
    wxRIBBON_SCROLL_BTN_DOWN,
    wxRIBBON_SCROLL_BTN_DIRECTION_MASK,
    wxRIBBON_SCROLL_BTN_NORMAL,
    wxRIBBON_SCROLL_BTN_HOVERED,
    wxRIBBON_SCROLL_BTN_ACTIVE,
    wxRIBBON_SCROLL_BTN_STATE_MASK,
    wxRIBBON_SCROLL_BTN_FOR_OTHER,
    wxRIBBON_SCROLL_BTN_FOR_TABS,
    wxRIBBON_SCROLL_BTN_FOR_PAGE,
    wxRIBBON_SCROLL_BTN_FOR_MASK
};

enum wxRibbonButtonKind
{
    wxRIBBON_BUTTON_NORMAL,
    wxRIBBON_BUTTON_DROPDOWN,
    wxRIBBON_BUTTON_HYBRID,
    wxRIBBON_BUTTON_TOGGLE
};

class wxRibbonArtProvider
{
    %Docstring
        RibbonArtProvider()
        
        wxRibbonArtProvider is responsible for drawing all the components of
        the ribbon interface.
    %End
    %TypeHeaderCode
        #include <wx/ribbon/art.h>
    %End

public:
    wxRibbonArtProvider();

    virtual
    ~wxRibbonArtProvider();

    virtual
    wxRibbonArtProvider * Clone() const = 0   /Factory/;
    %Docstring
        Clone() -> RibbonArtProvider
        
        Create a new art provider which is a clone of this one.
    %End

    virtual
    void SetFlags(
        long flags
    ) = 0;
    %Docstring
        SetFlags(flags)
        
        Set the style flags.
    %End

    virtual
    long GetFlags() const = 0;
    %Docstring
        GetFlags() -> long
        
        Get the previously set style flags.
    %End

    virtual
    int GetMetric(
        int id
    ) const = 0;
    %Docstring
        GetMetric(id) -> int
        
        Get the value of a certain integer setting.
    %End

    virtual
    void SetMetric(
        int id,
        int new_val
    ) = 0;
    %Docstring
        SetMetric(id, new_val)
        
        Set the value of a certain integer setting to the value new_val.
    %End

    virtual
    void SetFont(
        int id,
        const wxFont & font
    ) = 0;
    %Docstring
        SetFont(id, font)
        
        Set the value of a certain font setting to the value font.
    %End

    virtual
    wxFont GetFont(
        int id
    ) const = 0;
    %Docstring
        GetFont(id) -> wx.Font
        
        Get the value of a certain font setting.
    %End

    virtual
    wxColour GetColour(
        int id
    ) const = 0;
    %Docstring
        GetColour(id) -> wx.Colour
        
        Get the value of a certain colour setting.
    %End

    virtual
    void SetColour(
        int id,
        const wxColour & colour
    ) = 0;
    %Docstring
        SetColour(id, colour)
        
        Set the value of a certain colour setting to the value colour.
    %End

    wxColour GetColor(
        int id
    ) const;
    %Docstring
        GetColor(id) -> wx.Colour
    %End

    void SetColor(
        int id,
        const wxColour & color
    );
    %Docstring
        SetColor(id, color)
    %End

    virtual
    void GetColourScheme(
        wxColour * primary   /Out/,
        wxColour * secondary   /Out/,
        wxColour * tertiary   /Out/
    ) const = 0;
    %Docstring
        GetColourScheme() -> (primary, secondary, tertiary)
        
        Get the current colour scheme.
    %End

    virtual
    void SetColourScheme(
        const wxColour & primary,
        const wxColour & secondary,
        const wxColour & tertiary
    ) = 0;
    %Docstring
        SetColourScheme(primary, secondary, tertiary)
        
        Set all applicable colour settings from a few base colours.
    %End

    virtual
    void DrawTabCtrlBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    ) = 0;
    %Docstring
        DrawTabCtrlBackground(dc, wnd, rect)
        
        Draw the background of the tab region of a ribbon bar.
    %End

    virtual
    void DrawTab(
        wxDC & dc,
        wxWindow * wnd,
        const wxRibbonPageTabInfo & tab
    ) = 0;
    %Docstring
        DrawTab(dc, wnd, tab)
        
        Draw a single tab in the tab region of a ribbon bar.
    %End

    virtual
    void DrawTabSeparator(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect,
        double visibility
    ) = 0;
    %Docstring
        DrawTabSeparator(dc, wnd, rect, visibility)
        
        Draw a separator between two tabs in a ribbon bar.
    %End

    virtual
    void DrawPageBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    ) = 0;
    %Docstring
        DrawPageBackground(dc, wnd, rect)
        
        Draw the background of a ribbon page.
    %End

    virtual
    void DrawScrollButton(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect,
        long style
    ) = 0;
    %Docstring
        DrawScrollButton(dc, wnd, rect, style)
        
        Draw a ribbon-style scroll button.
    %End

    virtual
    void DrawPanelBackground(
        wxDC & dc,
        wxRibbonPanel * wnd,
        const wxRect & rect
    ) = 0;
    %Docstring
        DrawPanelBackground(dc, wnd, rect)
        
        Draw the background and chrome for a ribbon panel.
    %End

    virtual
    void DrawGalleryBackground(
        wxDC & dc,
        wxRibbonGallery * wnd,
        const wxRect & rect
    ) = 0;
    %Docstring
        DrawGalleryBackground(dc, wnd, rect)
        
        Draw the background and chrome for a wxRibbonGallery control.
    %End

    virtual
    void DrawGalleryItemBackground(
        wxDC & dc,
        wxRibbonGallery * wnd,
        const wxRect & rect,
        wxRibbonGalleryItem * item
    ) = 0;
    %Docstring
        DrawGalleryItemBackground(dc, wnd, rect, item)
        
        Draw the background of a single item in a wxRibbonGallery control.
    %End

    virtual
    void DrawMinimisedPanel(
        wxDC & dc,
        wxRibbonPanel * wnd,
        const wxRect & rect,
        wxBitmap & bitmap
    ) = 0;
    %Docstring
        DrawMinimisedPanel(dc, wnd, rect, bitmap)
        
        Draw a minimised ribbon panel.
    %End

    virtual
    void DrawButtonBarBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    ) = 0;
    %Docstring
        DrawButtonBarBackground(dc, wnd, rect)
        
        Draw the background for a wxRibbonButtonBar control.
    %End

    virtual
    void DrawButtonBarButton(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect,
        wxRibbonButtonKind kind,
        long state,
        const wxString & label,
        const wxBitmap & bitmap_large,
        const wxBitmap & bitmap_small
    ) = 0;
    %Docstring
        DrawButtonBarButton(dc, wnd, rect, kind, state, label, bitmap_large, bitmap_small)
        
        Draw a single button for a wxRibbonButtonBar control.
    %End

    virtual
    void DrawToolBarBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    ) = 0;
    %Docstring
        DrawToolBarBackground(dc, wnd, rect)
        
        Draw the background for a wxRibbonToolBar control.
    %End

    virtual
    void DrawToolGroupBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    ) = 0;
    %Docstring
        DrawToolGroupBackground(dc, wnd, rect)
        
        Draw the background for a group of tools on a wxRibbonToolBar control.
    %End

    virtual
    void DrawTool(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect,
        const wxBitmap & bitmap,
        wxRibbonButtonKind kind,
        long state
    ) = 0;
    %Docstring
        DrawTool(dc, wnd, rect, bitmap, kind, state)
        
        Draw a single tool (for a wxRibbonToolBar control).
    %End

    virtual
    void DrawToggleButton(
        wxDC & dc,
        wxRibbonBar * wnd,
        const wxRect & rect,
        wxRibbonDisplayMode mode
    ) = 0;
    %Docstring
        DrawToggleButton(dc, wnd, rect, mode)
        
        Draw toggle button on wxRibbonBar.
    %End

    virtual
    void DrawHelpButton(
        wxDC & dc,
        wxRibbonBar * wnd,
        const wxRect & rect
    ) = 0;
    %Docstring
        DrawHelpButton(dc, wnd, rect)
        
        Draw help button on wxRibbonBar.
    %End

    virtual
    void GetBarTabWidth(
        wxDC & dc,
        wxWindow * wnd,
        const wxString & label,
        const wxBitmap & bitmap,
        int * ideal,
        int * small_begin_need_separator,
        int * small_must_have_separator,
        int * minimum
    ) = 0;
    %Docstring
        GetBarTabWidth(dc, wnd, label, bitmap, ideal, small_begin_need_separator, small_must_have_separator, minimum)
        
        Calculate the ideal and minimum width (in pixels) of a tab in a ribbon
        bar.
    %End

    virtual
    int GetTabCtrlHeight(
        wxDC & dc,
        wxWindow * wnd,
        const wxRibbonPageTabInfoArray & pages
    ) = 0;
    %Docstring
        GetTabCtrlHeight(dc, wnd, pages) -> int
        
        Calculate the height (in pixels) of the tab region of a ribbon bar.
    %End

    virtual
    wxSize GetScrollButtonMinimumSize(
        wxDC & dc,
        wxWindow * wnd,
        long style
    ) = 0;
    %Docstring
        GetScrollButtonMinimumSize(dc, wnd, style) -> wx.Size
        
        Calculate the minimum size (in pixels) of a scroll button.
    %End

    virtual
    wxSize GetPanelSize(
        wxDC & dc,
        const wxRibbonPanel * wnd,
        wxSize client_size,
        wxPoint * client_offset
    ) = 0;
    %Docstring
        GetPanelSize(dc, wnd, client_size, client_offset) -> wx.Size
        
        Calculate the size of a panel for a given client size.
    %End

    virtual
    wxSize GetPanelClientSize(
        wxDC & dc,
        const wxRibbonPanel * wnd,
        wxSize size,
        wxPoint * client_offset
    ) = 0;
    %Docstring
        GetPanelClientSize(dc, wnd, size, client_offset) -> wx.Size
        
        Calculate the client size of a panel for a given overall size.
    %End

    virtual
    wxRect GetPanelExtButtonArea(
        wxDC & dc,
        const wxRibbonPanel * wnd,
        wxRect rect
    ) = 0;
    %Docstring
        GetPanelExtButtonArea(dc, wnd, rect) -> wx.Rect
        
        Calculate the position and size of the panel extension button.
    %End

    virtual
    wxSize GetGallerySize(
        wxDC & dc,
        const wxRibbonGallery * wnd,
        wxSize client_size
    ) = 0;
    %Docstring
        GetGallerySize(dc, wnd, client_size) -> wx.Size
        
        Calculate the size of a wxRibbonGallery control for a given client
        size.
    %End

    virtual
    wxSize GetGalleryClientSize(
        wxDC & dc,
        const wxRibbonGallery * wnd,
        wxSize size,
        wxPoint * client_offset,
        wxRect * scroll_up_button,
        wxRect * scroll_down_button,
        wxRect * extension_button
    ) = 0;
    %Docstring
        GetGalleryClientSize(dc, wnd, size, client_offset, scroll_up_button, scroll_down_button, extension_button) -> wx.Size
        
        Calculate the client size of a wxRibbonGallery control for a given
        size.
    %End

    virtual
    wxRect GetPageBackgroundRedrawArea(
        wxDC & dc,
        const wxRibbonPage * wnd,
        wxSize page_old_size,
        wxSize page_new_size
    ) = 0;
    %Docstring
        GetPageBackgroundRedrawArea(dc, wnd, page_old_size, page_new_size) -> wx.Rect
        
        Calculate the portion of a page background which needs to be redrawn
        when a page is resized.
    %End

    virtual
    bool GetButtonBarButtonSize(
        wxDC & dc,
        wxWindow * wnd,
        wxRibbonButtonKind kind,
        wxRibbonButtonBarButtonState size,
        const wxString & label,
        wxCoord text_min_width,
        wxSize bitmap_size_large,
        wxSize bitmap_size_small,
        wxSize * button_size,
        wxRect * normal_region,
        wxRect * dropdown_region
    ) = 0;
    %Docstring
        GetButtonBarButtonSize(dc, wnd, kind, size, label, text_min_width, bitmap_size_large, bitmap_size_small, button_size, normal_region, dropdown_region) -> bool
        
        Calculate the size of a button within a wxRibbonButtonBar.
    %End

    virtual
    wxCoord GetButtonBarButtonTextWidth(
        wxDC & dc,
        const wxString & label,
        wxRibbonButtonKind kind,
        wxRibbonButtonBarButtonState size
    ) = 0;
    %Docstring
        GetButtonBarButtonTextWidth(dc, label, kind, size) -> Coord
        
        Gets the width of the string if it is used as a wxRibbonButtonBar
        button label.
    %End

    virtual
    wxSize GetMinimisedPanelMinimumSize(
        wxDC & dc,
        const wxRibbonPanel * wnd,
        wxSize * desired_bitmap_size,
        wxDirection * expanded_panel_direction
    ) = 0;
    %Docstring
        GetMinimisedPanelMinimumSize(dc, wnd, desired_bitmap_size, expanded_panel_direction) -> wx.Size
        
        Calculate the size of a minimised ribbon panel.
    %End

    virtual
    wxSize GetToolSize(
        wxDC & dc,
        wxWindow * wnd,
        wxSize bitmap_size,
        wxRibbonButtonKind kind,
        bool is_first,
        bool is_last,
        wxRect * dropdown_region
    ) = 0;
    %Docstring
        GetToolSize(dc, wnd, bitmap_size, kind, is_first, is_last, dropdown_region) -> wx.Size
        
        Calculate the size of a tool within a wxRibbonToolBar.
    %End

    virtual
    wxRect GetBarToggleButtonArea(
        const wxRect & rect
    ) = 0;
    %Docstring
        GetBarToggleButtonArea(rect) -> wx.Rect
        
        Calculate the position and size of the ribbon's toggle button.
    %End

    virtual
    wxRect GetRibbonHelpButtonArea(
        const wxRect & rect
    ) = 0;
    %Docstring
        GetRibbonHelpButtonArea(rect) -> wx.Rect
        
        Calculate the position and size of the ribbon's help button.
    %End

    public:


    %Property(name=Flags, get=GetFlags, set=SetFlags)
};  // end of class wxRibbonArtProvider


class wxRibbonMSWArtProvider : wxRibbonArtProvider
{
    %Docstring
        RibbonMSWArtProvider(set_colour_scheme=True)
    %End
    %TypeHeaderCode
        #include <wx/ribbon/art.h>
    %End

public:
    wxRibbonMSWArtProvider(
        bool set_colour_scheme = true
    );

    virtual
    ~wxRibbonMSWArtProvider();

    virtual
    wxRibbonArtProvider * Clone() const   /Factory/;
    %Docstring
        Clone() -> RibbonArtProvider
        
        Create a new art provider which is a clone of this one.
    %End

    virtual
    void SetFlags(
        long flags
    );
    %Docstring
        SetFlags(flags)
        
        Set the style flags.
    %End

    virtual
    long GetFlags() const;
    %Docstring
        GetFlags() -> long
        
        Get the previously set style flags.
    %End

    virtual
    int GetMetric(
        int id
    ) const;
    %Docstring
        GetMetric(id) -> int
        
        Get the value of a certain integer setting.
    %End

    virtual
    void SetMetric(
        int id,
        int new_val
    );
    %Docstring
        SetMetric(id, new_val)
        
        Set the value of a certain integer setting to the value new_val.
    %End

    virtual
    void SetFont(
        int id,
        const wxFont & font
    );
    %Docstring
        SetFont(id, font)
        
        Set the value of a certain font setting to the value font.
    %End

    virtual
    wxFont GetFont(
        int id
    ) const;
    %Docstring
        GetFont(id) -> wx.Font
        
        Get the value of a certain font setting.
    %End

    virtual
    wxColour GetColour(
        int id
    ) const;
    %Docstring
        GetColour(id) -> wx.Colour
        
        Get the value of a certain colour setting.
    %End

    virtual
    void SetColour(
        int id,
        const wxColour & colour
    );
    %Docstring
        SetColour(id, colour)
        
        Set the value of a certain colour setting to the value colour.
    %End

    virtual
    void GetColourScheme(
        wxColour * primary   /Out/,
        wxColour * secondary   /Out/,
        wxColour * tertiary   /Out/
    ) const;
    %Docstring
        GetColourScheme() -> (primary, secondary, tertiary)
        
        Get the current colour scheme.
    %End

    virtual
    void SetColourScheme(
        const wxColour & primary,
        const wxColour & secondary,
        const wxColour & tertiary
    );
    %Docstring
        SetColourScheme(primary, secondary, tertiary)
        
        Set all applicable colour settings from a few base colours.
    %End

    virtual
    int GetTabCtrlHeight(
        wxDC & dc,
        wxWindow * wnd,
        const wxRibbonPageTabInfoArray & pages
    );
    %Docstring
        GetTabCtrlHeight(dc, wnd, pages) -> int
        
        Calculate the height (in pixels) of the tab region of a ribbon bar.
    %End

    virtual
    void DrawTabCtrlBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawTabCtrlBackground(dc, wnd, rect)
        
        Draw the background of the tab region of a ribbon bar.
    %End

    virtual
    void DrawTab(
        wxDC & dc,
        wxWindow * wnd,
        const wxRibbonPageTabInfo & tab
    );
    %Docstring
        DrawTab(dc, wnd, tab)
        
        Draw a single tab in the tab region of a ribbon bar.
    %End

    virtual
    void DrawTabSeparator(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect,
        double visibility
    );
    %Docstring
        DrawTabSeparator(dc, wnd, rect, visibility)
        
        Draw a separator between two tabs in a ribbon bar.
    %End

    virtual
    void DrawPageBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawPageBackground(dc, wnd, rect)
        
        Draw the background of a ribbon page.
    %End

    virtual
    void DrawScrollButton(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect,
        long style
    );
    %Docstring
        DrawScrollButton(dc, wnd, rect, style)
        
        Draw a ribbon-style scroll button.
    %End

    virtual
    void DrawPanelBackground(
        wxDC & dc,
        wxRibbonPanel * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawPanelBackground(dc, wnd, rect)
        
        Draw the background and chrome for a ribbon panel.
    %End

    virtual
    void DrawGalleryBackground(
        wxDC & dc,
        wxRibbonGallery * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawGalleryBackground(dc, wnd, rect)
        
        Draw the background and chrome for a wxRibbonGallery control.
    %End

    virtual
    void DrawGalleryItemBackground(
        wxDC & dc,
        wxRibbonGallery * wnd,
        const wxRect & rect,
        wxRibbonGalleryItem * item
    );
    %Docstring
        DrawGalleryItemBackground(dc, wnd, rect, item)
        
        Draw the background of a single item in a wxRibbonGallery control.
    %End

    virtual
    void DrawMinimisedPanel(
        wxDC & dc,
        wxRibbonPanel * wnd,
        const wxRect & rect,
        wxBitmap & bitmap
    );
    %Docstring
        DrawMinimisedPanel(dc, wnd, rect, bitmap)
        
        Draw a minimised ribbon panel.
    %End

    virtual
    void DrawButtonBarBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawButtonBarBackground(dc, wnd, rect)
        
        Draw the background for a wxRibbonButtonBar control.
    %End

    virtual
    void DrawButtonBarButton(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect,
        wxRibbonButtonKind kind,
        long state,
        const wxString & label,
        const wxBitmap & bitmap_large,
        const wxBitmap & bitmap_small
    );
    %Docstring
        DrawButtonBarButton(dc, wnd, rect, kind, state, label, bitmap_large, bitmap_small)
        
        Draw a single button for a wxRibbonButtonBar control.
    %End

    virtual
    void DrawToolBarBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawToolBarBackground(dc, wnd, rect)
        
        Draw the background for a wxRibbonToolBar control.
    %End

    virtual
    void DrawToolGroupBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawToolGroupBackground(dc, wnd, rect)
        
        Draw the background for a group of tools on a wxRibbonToolBar control.
    %End

    virtual
    void DrawTool(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect,
        const wxBitmap & bitmap,
        wxRibbonButtonKind kind,
        long state
    );
    %Docstring
        DrawTool(dc, wnd, rect, bitmap, kind, state)
        
        Draw a single tool (for a wxRibbonToolBar control).
    %End

    virtual
    void DrawToggleButton(
        wxDC & dc,
        wxRibbonBar * wnd,
        const wxRect & rect,
        wxRibbonDisplayMode mode
    );
    %Docstring
        DrawToggleButton(dc, wnd, rect, mode)
        
        Draw toggle button on wxRibbonBar.
    %End

    virtual
    void DrawHelpButton(
        wxDC & dc,
        wxRibbonBar * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawHelpButton(dc, wnd, rect)
        
        Draw help button on wxRibbonBar.
    %End

    virtual
    void GetBarTabWidth(
        wxDC & dc,
        wxWindow * wnd,
        const wxString & label,
        const wxBitmap & bitmap,
        int * ideal,
        int * small_begin_need_separator,
        int * small_must_have_separator,
        int * minimum
    );
    %Docstring
        GetBarTabWidth(dc, wnd, label, bitmap, ideal, small_begin_need_separator, small_must_have_separator, minimum)
        
        Calculate the ideal and minimum width (in pixels) of a tab in a ribbon
        bar.
    %End

    virtual
    wxSize GetScrollButtonMinimumSize(
        wxDC & dc,
        wxWindow * wnd,
        long style
    );
    %Docstring
        GetScrollButtonMinimumSize(dc, wnd, style) -> wx.Size
        
        Calculate the minimum size (in pixels) of a scroll button.
    %End

    virtual
    wxSize GetPanelSize(
        wxDC & dc,
        const wxRibbonPanel * wnd,
        wxSize client_size,
        wxPoint * client_offset
    );
    %Docstring
        GetPanelSize(dc, wnd, client_size, client_offset) -> wx.Size
        
        Calculate the size of a panel for a given client size.
    %End

    virtual
    wxSize GetPanelClientSize(
        wxDC & dc,
        const wxRibbonPanel * wnd,
        wxSize size,
        wxPoint * client_offset
    );
    %Docstring
        GetPanelClientSize(dc, wnd, size, client_offset) -> wx.Size
        
        Calculate the client size of a panel for a given overall size.
    %End

    virtual
    wxRect GetPanelExtButtonArea(
        wxDC & dc,
        const wxRibbonPanel * wnd,
        wxRect rect
    );
    %Docstring
        GetPanelExtButtonArea(dc, wnd, rect) -> wx.Rect
        
        Calculate the position and size of the panel extension button.
    %End

    virtual
    wxSize GetGallerySize(
        wxDC & dc,
        const wxRibbonGallery * wnd,
        wxSize client_size
    );
    %Docstring
        GetGallerySize(dc, wnd, client_size) -> wx.Size
        
        Calculate the size of a wxRibbonGallery control for a given client
        size.
    %End

    virtual
    wxSize GetGalleryClientSize(
        wxDC & dc,
        const wxRibbonGallery * wnd,
        wxSize size,
        wxPoint * client_offset,
        wxRect * scroll_up_button,
        wxRect * scroll_down_button,
        wxRect * extension_button
    );
    %Docstring
        GetGalleryClientSize(dc, wnd, size, client_offset, scroll_up_button, scroll_down_button, extension_button) -> wx.Size
        
        Calculate the client size of a wxRibbonGallery control for a given
        size.
    %End

    virtual
    wxRect GetPageBackgroundRedrawArea(
        wxDC & dc,
        const wxRibbonPage * wnd,
        wxSize page_old_size,
        wxSize page_new_size
    );
    %Docstring
        GetPageBackgroundRedrawArea(dc, wnd, page_old_size, page_new_size) -> wx.Rect
        
        Calculate the portion of a page background which needs to be redrawn
        when a page is resized.
    %End

    virtual
    bool GetButtonBarButtonSize(
        wxDC & dc,
        wxWindow * wnd,
        wxRibbonButtonKind kind,
        wxRibbonButtonBarButtonState size,
        const wxString & label,
        wxCoord text_min_width,
        wxSize bitmap_size_large,
        wxSize bitmap_size_small,
        wxSize * button_size,
        wxRect * normal_region,
        wxRect * dropdown_region
    );
    %Docstring
        GetButtonBarButtonSize(dc, wnd, kind, size, label, text_min_width, bitmap_size_large, bitmap_size_small, button_size, normal_region, dropdown_region) -> bool
        
        Calculate the size of a button within a wxRibbonButtonBar.
    %End

    virtual
    wxCoord GetButtonBarButtonTextWidth(
        wxDC & dc,
        const wxString & label,
        wxRibbonButtonKind kind,
        wxRibbonButtonBarButtonState size
    );
    %Docstring
        GetButtonBarButtonTextWidth(dc, label, kind, size) -> Coord
        
        Gets the width of the string if it is used as a wxRibbonButtonBar
        button label.
    %End

    virtual
    wxSize GetMinimisedPanelMinimumSize(
        wxDC & dc,
        const wxRibbonPanel * wnd,
        wxSize * desired_bitmap_size,
        wxDirection * expanded_panel_direction
    );
    %Docstring
        GetMinimisedPanelMinimumSize(dc, wnd, desired_bitmap_size, expanded_panel_direction) -> wx.Size
        
        Calculate the size of a minimised ribbon panel.
    %End

    virtual
    wxSize GetToolSize(
        wxDC & dc,
        wxWindow * wnd,
        wxSize bitmap_size,
        wxRibbonButtonKind kind,
        bool is_first,
        bool is_last,
        wxRect * dropdown_region
    );
    %Docstring
        GetToolSize(dc, wnd, bitmap_size, kind, is_first, is_last, dropdown_region) -> wx.Size
        
        Calculate the size of a tool within a wxRibbonToolBar.
    %End

    virtual
    wxRect GetBarToggleButtonArea(
        const wxRect & rect
    );
    %Docstring
        GetBarToggleButtonArea(rect) -> wx.Rect
        
        Calculate the position and size of the ribbon's toggle button.
    %End

    virtual
    wxRect GetRibbonHelpButtonArea(
        const wxRect & rect
    );
    %Docstring
        GetRibbonHelpButtonArea(rect) -> wx.Rect
        
        Calculate the position and size of the ribbon's help button.
    %End

    public:


    %Property(name=Flags, get=GetFlags, set=SetFlags)
};  // end of class wxRibbonMSWArtProvider


class wxRibbonAUIArtProvider : wxRibbonMSWArtProvider
{
    %Docstring
        RibbonAUIArtProvider()
    %End
    %TypeHeaderCode
        #include <wx/ribbon/art.h>
    %End

public:
    wxRibbonAUIArtProvider();

    virtual
    ~wxRibbonAUIArtProvider();

    virtual
    wxRibbonArtProvider * Clone() const   /Factory/;
    %Docstring
        Clone() -> RibbonArtProvider
        
        Create a new art provider which is a clone of this one.
    %End

    virtual
    wxColour GetColour(
        int id
    ) const;
    %Docstring
        GetColour(id) -> wx.Colour
        
        Get the value of a certain colour setting.
    %End

    virtual
    void SetColour(
        int id,
        const wxColour & colour
    );
    %Docstring
        SetColour(id, colour)
        
        Set the value of a certain colour setting to the value colour.
    %End

    virtual
    void SetColourScheme(
        const wxColour & primary,
        const wxColour & secondary,
        const wxColour & tertiary
    );
    %Docstring
        SetColourScheme(primary, secondary, tertiary)
        
        Set all applicable colour settings from a few base colours.
    %End

    virtual
    void SetFont(
        int id,
        const wxFont & font
    );
    %Docstring
        SetFont(id, font)
        
        Set the value of a certain font setting to the value font.
    %End

    virtual
    wxSize GetScrollButtonMinimumSize(
        wxDC & dc,
        wxWindow * wnd,
        long style
    );
    %Docstring
        GetScrollButtonMinimumSize(dc, wnd, style) -> wx.Size
        
        Calculate the minimum size (in pixels) of a scroll button.
    %End

    virtual
    void DrawScrollButton(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect,
        long style
    );
    %Docstring
        DrawScrollButton(dc, wnd, rect, style)
        
        Draw a ribbon-style scroll button.
    %End

    virtual
    wxSize GetPanelSize(
        wxDC & dc,
        const wxRibbonPanel * wnd,
        wxSize client_size,
        wxPoint * client_offset
    );
    %Docstring
        GetPanelSize(dc, wnd, client_size, client_offset) -> wx.Size
        
        Calculate the size of a panel for a given client size.
    %End

    virtual
    wxSize GetPanelClientSize(
        wxDC & dc,
        const wxRibbonPanel * wnd,
        wxSize size,
        wxPoint * client_offset
    );
    %Docstring
        GetPanelClientSize(dc, wnd, size, client_offset) -> wx.Size
        
        Calculate the client size of a panel for a given overall size.
    %End

    virtual
    wxRect GetPanelExtButtonArea(
        wxDC & dc,
        const wxRibbonPanel * wnd,
        wxRect rect
    );
    %Docstring
        GetPanelExtButtonArea(dc, wnd, rect) -> wx.Rect
        
        Calculate the position and size of the panel extension button.
    %End

    virtual
    void DrawTabCtrlBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawTabCtrlBackground(dc, wnd, rect)
        
        Draw the background of the tab region of a ribbon bar.
    %End

    virtual
    int GetTabCtrlHeight(
        wxDC & dc,
        wxWindow * wnd,
        const wxRibbonPageTabInfoArray & pages
    );
    %Docstring
        GetTabCtrlHeight(dc, wnd, pages) -> int
        
        Calculate the height (in pixels) of the tab region of a ribbon bar.
    %End

    virtual
    void GetBarTabWidth(
        wxDC & dc,
        wxWindow * wnd,
        const wxString & label,
        const wxBitmap & bitmap,
        int * ideal,
        int * small_begin_need_separator,
        int * small_must_have_separator,
        int * minimum
    );
    %Docstring
        GetBarTabWidth(dc, wnd, label, bitmap, ideal, small_begin_need_separator, small_must_have_separator, minimum)
        
        Calculate the ideal and minimum width (in pixels) of a tab in a ribbon
        bar.
    %End

    virtual
    void DrawTab(
        wxDC & dc,
        wxWindow * wnd,
        const wxRibbonPageTabInfo & tab
    );
    %Docstring
        DrawTab(dc, wnd, tab)
        
        Draw a single tab in the tab region of a ribbon bar.
    %End

    virtual
    void DrawTabSeparator(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect,
        double visibility
    );
    %Docstring
        DrawTabSeparator(dc, wnd, rect, visibility)
        
        Draw a separator between two tabs in a ribbon bar.
    %End

    virtual
    void DrawPageBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawPageBackground(dc, wnd, rect)
        
        Draw the background of a ribbon page.
    %End

    virtual
    void DrawPanelBackground(
        wxDC & dc,
        wxRibbonPanel * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawPanelBackground(dc, wnd, rect)
        
        Draw the background and chrome for a ribbon panel.
    %End

    virtual
    void DrawMinimisedPanel(
        wxDC & dc,
        wxRibbonPanel * wnd,
        const wxRect & rect,
        wxBitmap & bitmap
    );
    %Docstring
        DrawMinimisedPanel(dc, wnd, rect, bitmap)
        
        Draw a minimised ribbon panel.
    %End

    virtual
    void DrawGalleryBackground(
        wxDC & dc,
        wxRibbonGallery * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawGalleryBackground(dc, wnd, rect)
        
        Draw the background and chrome for a wxRibbonGallery control.
    %End

    virtual
    void DrawGalleryItemBackground(
        wxDC & dc,
        wxRibbonGallery * wnd,
        const wxRect & rect,
        wxRibbonGalleryItem * item
    );
    %Docstring
        DrawGalleryItemBackground(dc, wnd, rect, item)
        
        Draw the background of a single item in a wxRibbonGallery control.
    %End

    virtual
    void DrawButtonBarBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawButtonBarBackground(dc, wnd, rect)
        
        Draw the background for a wxRibbonButtonBar control.
    %End

    virtual
    void DrawButtonBarButton(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect,
        wxRibbonButtonKind kind,
        long state,
        const wxString & label,
        const wxBitmap & bitmap_large,
        const wxBitmap & bitmap_small
    );
    %Docstring
        DrawButtonBarButton(dc, wnd, rect, kind, state, label, bitmap_large, bitmap_small)
        
        Draw a single button for a wxRibbonButtonBar control.
    %End

    virtual
    void DrawToolBarBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawToolBarBackground(dc, wnd, rect)
        
        Draw the background for a wxRibbonToolBar control.
    %End

    virtual
    void DrawToolGroupBackground(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect
    );
    %Docstring
        DrawToolGroupBackground(dc, wnd, rect)
        
        Draw the background for a group of tools on a wxRibbonToolBar control.
    %End

    virtual
    void DrawTool(
        wxDC & dc,
        wxWindow * wnd,
        const wxRect & rect,
        const wxBitmap & bitmap,
        wxRibbonButtonKind kind,
        long state
    );
    %Docstring
        DrawTool(dc, wnd, rect, bitmap, kind, state)
        
        Draw a single tool (for a wxRibbonToolBar control).
    %End

};  // end of class wxRibbonAUIArtProvider


%Extract(id=pycode_ribbon)
if 'wxMSW' in wx.PlatformInfo:
    RibbonDefaultArtProvider = RibbonMSWArtProvider
else:
    RibbonDefaultArtProvider = RibbonAUIArtProvider

%End


//---------------------------------------------------------------------------

