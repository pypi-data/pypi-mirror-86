//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxHelpProvider   /Abstract/
{
    %Docstring
        wxHelpProvider is an abstract class used by a program implementing
        context-sensitive help to show the help text for the given window.
    %End
    %TypeHeaderCode
        #include <wx/cshelp.h>
    %End

public:
    virtual
    ~wxHelpProvider();

    virtual
    void AddHelp(
        wxWindowBase * window,
        const wxString & text
    );
    %Docstring
        AddHelp(window, text)
        AddHelp(id, text)
        
        Associates the text with the given window.
    %End

    virtual
    void AddHelp(
        wxWindowID id,
        const wxString & text
    );

    virtual
    wxString GetHelp(
        const wxWindow * window
    ) = 0;
    %Docstring
        GetHelp(window) -> String
        
        This version associates the given text with all windows with this id.
    %End

    virtual
    void RemoveHelp(
        wxWindowBase * window
    );
    %Docstring
        RemoveHelp(window)
        
        Removes the association between the window pointer and the help text.
    %End

    virtual
    bool ShowHelp(
        wxWindowBase * window
    );
    %Docstring
        ShowHelp(window) -> bool
        
        Shows help for the given window.
    %End

    virtual
    bool ShowHelpAtPoint(
        wxWindowBase * window,
        const wxPoint & point,
        wxHelpEvent::Origin origin
    );
    %Docstring
        ShowHelpAtPoint(window, point, origin) -> bool
        
        This function may be overridden to show help for the window when it
        should depend on the position inside the window, By default this
        method forwards to ShowHelp(), so it is enough to only implement the
        latter if the help doesn't depend on the position.
    %End

    static
    wxHelpProvider * Get();
    %Docstring
        Get() -> HelpProvider
        
        Returns pointer to help provider instance.
    %End

    static
    wxHelpProvider * Set(
        wxHelpProvider * helpProvider   /Transfer/
    )   /TransferBack/;
    %Docstring
        Set(helpProvider) -> HelpProvider
        
        Set the current, application-wide help provider.
    %End

};  // end of class wxHelpProvider


class wxSimpleHelpProvider : wxHelpProvider
{
    %Docstring
        wxSimpleHelpProvider is an implementation of wxHelpProvider which
        supports only plain text help strings, and shows the string associated
        with the control (if any) in a tooltip.
    %End
    %TypeHeaderCode
        #include <wx/cshelp.h>
    %End

public:
    virtual wxString GetHelp(const wxWindowBase* window);


};  // end of class wxSimpleHelpProvider


class wxHelpControllerHelpProvider : wxSimpleHelpProvider
{
    %Docstring
        HelpControllerHelpProvider(hc=None)
        
        wxHelpControllerHelpProvider is an implementation of wxHelpProvider
        which supports both context identifiers and plain text help strings.
    %End
    %TypeHeaderCode
        #include <wx/cshelp.h>
    %End

public:
    wxHelpControllerHelpProvider(
        wxHelpControllerBase * hc = NULL
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxHelpControllerBase * GetHelpController() const;
    %Docstring
        GetHelpController() -> HelpControllerBase
        
        Returns the help controller associated with this help provider.
    %End

    void SetHelpController(
        wxHelpControllerBase * hc
    );
    %Docstring
        SetHelpController(hc)
        
        Sets the help controller associated with this help provider.
    %End

    private:
        wxHelpControllerHelpProvider(const wxHelpControllerHelpProvider&);


    public:


    %Property(name=HelpController, get=GetHelpController, set=SetHelpController)
};  // end of class wxHelpControllerHelpProvider


class wxContextHelp : wxObject
{
    %Docstring
        ContextHelp(window=None, doNow=True)
        
        This class changes the cursor to a query and puts the application into
        a 'context-sensitive help mode'.
    %End
    %TypeHeaderCode
        #include <wx/cshelp.h>
    %End

public:
    wxContextHelp(
        wxWindow * window = NULL,
        bool doNow = true
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxContextHelp();

    bool BeginContextHelp(
        wxWindow * window
    );
    %Docstring
        BeginContextHelp(window) -> bool
        
        Puts the application into context-sensitive help mode.
    %End

    bool EndContextHelp();
    %Docstring
        EndContextHelp() -> bool
        
        Ends context-sensitive help mode.
    %End

};  // end of class wxContextHelp


class wxContextHelpButton : wxBitmapButton
{
    %Docstring
        ContextHelpButton(parent, id=ID_CONTEXT_HELP, pos=DefaultPosition, size=DefaultSize, style=0)
        
        Instances of this class may be used to add a question mark button that
        when pressed, puts the application into context-help mode.
    %End
    %TypeHeaderCode
        #include <wx/cshelp.h>
    %End

public:
    wxContextHelpButton(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_CONTEXT_HELP,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

};  // end of class wxContextHelpButton



//---------------------------------------------------------------------------

