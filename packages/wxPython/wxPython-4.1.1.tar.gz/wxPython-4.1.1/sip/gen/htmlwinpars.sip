//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _html.sip
//
//---------------------------------------------------------------------------
%ModuleCode
        class wxPyHtmlTagsModule : public wxHtmlTagsModule {
        public:
            wxPyHtmlTagsModule() : wxHtmlTagsModule() {
            }

            bool OnInit() {
                wxHtmlWinParser::AddModule(this);
                return true;
            }

            void OnExit() {
                wxPyThreadBlocker blocker;
                for (size_t x=0; x < m_tagHandlersArray.GetCount(); x++) {
                    PyObject* obj = (PyObject*)m_tagHandlersArray.Item(x);
                    Py_DECREF(obj);
                }
                m_tagHandlersArray.Clear();
                wxHtmlWinParser::RemoveModule(this);
            }

            void FillHandlersTable(wxHtmlWinParser *parser) {
                wxPyThreadBlocker blocker;

                // make a new instance of each handler class and register it with the parser
                for (size_t cls=0; cls < s_tagHandlerClasses.GetCount(); cls++) {
                    PyObject* pyClass = (PyObject*)s_tagHandlerClasses.Item(cls);

                    wxHtmlWinTagHandler* thPtr = NULL;

                    PyObject* arg = PyTuple_New(0);
                    PyObject* obj = PyObject_CallObject(pyClass, arg);
                    Py_DECREF(arg);

                    // Make sure it succeeded
                    if (!obj) {
                        PyErr_Print();
                        return;
                    }

                    // now figure out where it's C++ object is...
                    if (! wxPyConvertWrappedPtr(obj, (void **)&thPtr, wxT("wxHtmlWinTagHandler"))) {
                        return;
                    }

                    // add it,
                    parser->AddTagHandler(thPtr);

                    // and track it
                    m_tagHandlersArray.Add(obj);
                }
            }

            static void AddPyTagHandler(PyObject* tagHandlerClass) {
                wxPyThreadBlocker blocker;
                Py_INCREF(tagHandlerClass);
                s_tagHandlerClasses.Add(tagHandlerClass);
            }

        private:
            wxDECLARE_DYNAMIC_CLASS(wxPyHtmlTagsModule);

            static wxArrayPtrVoid       s_tagHandlerClasses;
            wxArrayPtrVoid              m_tagHandlersArray;
        };

        wxIMPLEMENT_DYNAMIC_CLASS(wxPyHtmlTagsModule, wxHtmlTagsModule)
        wxArrayPtrVoid wxPyHtmlTagsModule::s_tagHandlerClasses;
        
%End

//---------------------------------------------------------------------------

class wxHtmlWinTagHandler : wxHtmlTagHandler
{
    %Docstring
        HtmlWinTagHandler()
        
        This is basically wxHtmlTagHandler except that it is extended with
        protected member m_WParser pointing to the wxHtmlWinParser object
        (value of this member is identical to wxHtmlParser's m_Parser).
    %End
    %TypeHeaderCode
        #include <wx/html/winpars.h>
    %End

public:
    wxHtmlWinTagHandler();

    virtual
    void SetParser(
        wxHtmlParser * parser
    );
    %Docstring
        SetParser(parser)
        
        Assigns parser to this handler.
    %End

    wxHtmlWinParser* GetParser();
    %Docstring
        GetParser() -> HtmlWinParser
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxHtmlWinTagHandler_GetParser(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxHtmlWinParser* _wxHtmlWinTagHandler_GetParser(wxHtmlWinTagHandler* self)
    {
        return (wxHtmlWinParser*)self->GetParser();
    }
    %End

    private:
        wxHtmlWinTagHandler(const wxHtmlWinTagHandler&);


    public:


    %Property(name=Parser, get=GetParser, set=SetParser)
};  // end of class wxHtmlWinTagHandler


class wxHtmlWinParser : wxHtmlParser
{
    %Docstring
        HtmlWinParser(wndIface=None)
        
        This class is derived from wxHtmlParser and its main goal is to parse
        HTML input so that it can be displayed in wxHtmlWindow.
    %End
    %TypeHeaderCode
        #include <wx/html/winpars.h>
    %End

public:
    wxHtmlWinParser(
        wxHtmlWindowInterface * wndIface = NULL
    );

    wxHtmlContainerCell * CloseContainer();
    %Docstring
        CloseContainer() -> HtmlContainerCell
        
        Closes the container, sets actual container to the parent one and
        returns pointer to it (see Cells and Containers).
    %End

    virtual
    wxFont * CreateCurrentFont();
    %Docstring
        CreateCurrentFont() -> wx.Font
        
        Creates font based on current setting (see SetFontSize(),
        SetFontBold(), SetFontItalic(), SetFontFixed(),
        wxHtmlWinParser::SetFontUnderlined) and returns pointer to it.
    %End

    const wxColour & GetActualColor() const;
    %Docstring
        GetActualColor() -> wx.Colour
        
        Returns actual text colour.
    %End

    int GetAlign() const;
    %Docstring
        GetAlign() -> int
        
        Returns default horizontal alignment.
    %End

    int GetCharHeight() const;
    %Docstring
        GetCharHeight() -> int
        
        Returns (average) char height in standard font.
    %End

    int GetCharWidth() const;
    %Docstring
        GetCharWidth() -> int
        
        Returns average char width in standard font.
    %End

    wxHtmlContainerCell * GetContainer() const;
    %Docstring
        GetContainer() -> HtmlContainerCell
        
        Returns pointer to the currently opened container (see Cells and
        Containers).
    %End

    wxDC * GetDC();
    %Docstring
        GetDC() -> wx.DC
        
        Returns pointer to the DC used during parsing.
    %End

    int GetFontBold() const;
    %Docstring
        GetFontBold() -> int
        
        Returns true if actual font is bold, false otherwise.
    %End

    wxString GetFontFace() const;
    %Docstring
        GetFontFace() -> String
        
        Returns actual font face name.
    %End

    int GetFontFixed() const;
    %Docstring
        GetFontFixed() -> int
        
        Returns true if actual font is fixed face, false otherwise.
    %End

    int GetFontItalic() const;
    %Docstring
        GetFontItalic() -> int
        
        Returns true if actual font is italic, false otherwise.
    %End

    int GetFontSize() const;
    %Docstring
        GetFontSize() -> int
        
        Returns actual font size (HTML size varies from -2 to +4)
    %End

    int GetFontUnderlined() const;
    %Docstring
        GetFontUnderlined() -> int
        
        Returns true if actual font is underlined, false otherwise.
    %End

    const wxHtmlLinkInfo & GetLink() const;
    %Docstring
        GetLink() -> HtmlLinkInfo
        
        Returns actual hypertext link.
    %End

    const wxColour & GetLinkColor() const;
    %Docstring
        GetLinkColor() -> wx.Colour
        
        Returns the colour of hypertext link text.
    %End

    wxHtmlWindowInterface * GetWindowInterface();
    %Docstring
        GetWindowInterface() -> HtmlWindowInterface
        
        Returns associated window (wxHtmlWindow).
    %End

    wxHtmlContainerCell * OpenContainer();
    %Docstring
        OpenContainer() -> HtmlContainerCell
        
        Opens new container and returns pointer to it (see Cells and
        Containers).
    %End

    void SetActualColor(
        const wxColour & clr
    );
    %Docstring
        SetActualColor(clr)
        
        Sets actual text colour.
    %End

    void SetAlign(
        int a
    );
    %Docstring
        SetAlign(a)
        
        Sets default horizontal alignment (see
        wxHtmlContainerCell::SetAlignHor).
    %End

    wxHtmlContainerCell * SetContainer(
        wxHtmlContainerCell * c
    );
    %Docstring
        SetContainer(c) -> HtmlContainerCell
        
        Allows you to directly set opened container.
    %End

    virtual
    void SetDC(
        wxDC * dc,
        double pixel_scale = 1.0e+0
    );
    %Docstring
        SetDC(dc, pixel_scale=1.0e+0)
        
        Sets the DC.
    %End

    void SetFontBold(
        int x
    );
    %Docstring
        SetFontBold(x)
        
        Sets bold flag of actualfont.
    %End

    void SetFontFace(
        const wxString & face
    );
    %Docstring
        SetFontFace(face)
        
        Sets current font face to face.
    %End

    void SetFontFixed(
        int x
    );
    %Docstring
        SetFontFixed(x)
        
        Sets fixed face flag of actualfont.
    %End

    void SetFontItalic(
        int x
    );
    %Docstring
        SetFontItalic(x)
        
        Sets italic flag of actualfont.
    %End

    void SetFontSize(
        int s
    );
    %Docstring
        SetFontSize(s)
        
        Sets actual font size (HTML size varies from 1 to 7).
    %End

    void SetFontUnderlined(
        int x
    );
    %Docstring
        SetFontUnderlined(x)
        
        Sets underlined flag of actualfont.
    %End

    void SetFonts(
        const wxString & normal_face,
        const wxString & fixed_face,
        const wxArrayInt& sizes
    );
    %Docstring
        SetFonts(normal_face, fixed_face, sizes)
        
        Sets fonts.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxHtmlWinParser_SetFonts(sipCpp, normal_face, fixed_face, sizes);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxHtmlWinParser_SetFonts(wxHtmlWinParser* self, const wxString * normal_face, const wxString * fixed_face, const wxArrayInt* sizes)
    {
        if (sizes->GetCount() != 7) {
            wxPyErr_SetString(PyExc_ValueError, "Sequence of 7 integers expected.");
            return;
        }
        self->SetFonts(*normal_face, *fixed_face, &sizes->Item(0));
    }
    %End

    void SetLink(
        const wxHtmlLinkInfo & link
    );
    %Docstring
        SetLink(link)
        
        Sets actual hypertext link.
    %End

    void SetLinkColor(
        const wxColour & clr
    );
    %Docstring
        SetLinkColor(clr)
        
        Sets colour of hypertext link.
    %End

            virtual wxObject* GetProduct();


    public:


    %Property(name=ActualColor, get=GetActualColor, set=SetActualColor)
    %Property(name=Align, get=GetAlign, set=SetAlign)
    %Property(name=CharHeight, get=GetCharHeight)
    %Property(name=CharWidth, get=GetCharWidth)
    %Property(name=Container, get=GetContainer, set=SetContainer)
    %Property(name=DC, get=GetDC, set=SetDC)
    %Property(name=FontBold, get=GetFontBold, set=SetFontBold)
    %Property(name=FontFace, get=GetFontFace, set=SetFontFace)
    %Property(name=FontFixed, get=GetFontFixed, set=SetFontFixed)
    %Property(name=FontItalic, get=GetFontItalic, set=SetFontItalic)
    %Property(name=FontSize, get=GetFontSize, set=SetFontSize)
    %Property(name=FontUnderlined, get=GetFontUnderlined, set=SetFontUnderlined)
    %Property(name=Link, get=GetLink, set=SetLink)
    %Property(name=LinkColor, get=GetLinkColor, set=SetLinkColor)
    %Property(name=WindowInterface, get=GetWindowInterface)
};  // end of class wxHtmlWinParser


void HtmlWinParser_AddTagHandler(PyObject* tagHandlerClass);
%Docstring
    HtmlWinParser_AddTagHandler(tagHandlerClass)
%End
%MethodCode
    PyErr_Clear();
    Py_BEGIN_ALLOW_THREADS
    _HtmlWinParser_AddTagHandler_function(tagHandlerClass);
    Py_END_ALLOW_THREADS
    if (PyErr_Occurred()) sipIsErr = 1;
%End
%ModuleCode
void _HtmlWinParser_AddTagHandler_function(PyObject* tagHandlerClass)
{
    wxPyHtmlTagsModule::AddPyTagHandler(tagHandlerClass);
    wxPyReinitializeModules();
}
%End


//---------------------------------------------------------------------------

