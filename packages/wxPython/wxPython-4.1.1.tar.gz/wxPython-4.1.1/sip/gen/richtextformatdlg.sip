//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _richtext.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxRICHTEXT_FORMAT_STYLE_EDITOR;
const int wxRICHTEXT_FORMAT_FONT;
const int wxRICHTEXT_FORMAT_TABS;
const int wxRICHTEXT_FORMAT_BULLETS;
const int wxRICHTEXT_FORMAT_INDENTS_SPACING;
class wxRichTextFormattingDialogFactory : wxObject
{
    %Docstring
        RichTextFormattingDialogFactory()
        
        This class provides pages for wxRichTextFormattingDialog, and allows
        other customization of the dialog.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextformatdlg.h>
    %End

public:
    wxRichTextFormattingDialogFactory();

    virtual
    ~wxRichTextFormattingDialogFactory();

    virtual
    bool CreateButtons(
        wxRichTextFormattingDialog * dialog
    );
    %Docstring
        CreateButtons(dialog) -> bool
        
        Creates the main dialog buttons.
    %End

    virtual
    wxPanel * CreatePage(
        int page,
        wxString & title,
        wxRichTextFormattingDialog * dialog
    );
    %Docstring
        CreatePage(page, title, dialog) -> wx.Panel
        
        Creates a page, given a page identifier.
    %End

    virtual
    bool CreatePages(
        long pages,
        wxRichTextFormattingDialog * dialog
    );
    %Docstring
        CreatePages(pages, dialog) -> bool
        
        Creates all pages under the dialog's book control, also calling
        AddPage().
    %End

    virtual
    int GetPageId(
        int i
    ) const;
    %Docstring
        GetPageId(i) -> int
        
        Enumerate all available page identifiers.
    %End

    virtual
    int GetPageIdCount() const;
    %Docstring
        GetPageIdCount() -> int
        
        Gets the number of available page identifiers.
    %End

    virtual
    int GetPageImage(
        int id
    ) const;
    %Docstring
        GetPageImage(id) -> int
        
        Gets the image index for the given page identifier.
    %End

    virtual
    bool SetSheetStyle(
        wxRichTextFormattingDialog * dialog
    );
    %Docstring
        SetSheetStyle(dialog) -> bool
        
        Set the property sheet style, called at the start of
        wxRichTextFormattingDialog::Create.
    %End

    virtual
    bool ShowHelp(
        int page,
        wxRichTextFormattingDialog * dialog
    );
    %Docstring
        ShowHelp(page, dialog) -> bool
        
        Invokes help for the dialog.
    %End

    public:


    %Property(name=PageIdCount, get=GetPageIdCount)
};  // end of class wxRichTextFormattingDialogFactory


class wxRichTextFormattingDialog : wxPropertySheetDialog
{
    %Docstring
        RichTextFormattingDialog()
        RichTextFormattingDialog(flags, parent, title="Formatting", id=wx.ID_ANY, pos=wx.DefaultPosition, sz=wx.DefaultSize, style=wx.DEFAULT_DIALOG_STYLE)
        
        This dialog allows the user to edit a character and/or paragraph
        style.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextformatdlg.h>
    %End

public:
    enum 
    {
        Option_AllowPixelFontSize    
    };

    wxRichTextFormattingDialog();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxRichTextFormattingDialog(
        long flags,
        wxWindow * parent,
        const wxString & title = "Formatting",
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & sz = wxDefaultSize,
        long style = wxDEFAULT_DIALOG_STYLE
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxRichTextFormattingDialog();

    wxTextAttr & GetAttributes();
    %Docstring
        GetAttributes() -> wx.TextAttr
        
        Gets the attributes being edited.
    %End

    bool ApplyStyle(
        wxRichTextCtrl * ctrl,
        const wxRichTextRange & range,
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO|wxRICHTEXT_SETSTYLE_OPTIMIZE
    );
    %Docstring
        ApplyStyle(ctrl, range, flags=RICHTEXT_SETSTYLE_WITH_UNDO|RICHTEXT_SETSTYLE_OPTIMIZE) -> bool
        
        Apply attributes to the given range, only changing attributes that
        need to be changed.
    %End

    bool Create(
        long flags,
        wxWindow * parent,
        const wxString & title = wxGetTranslation("Formatting"),
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & sz = wxDefaultSize,
        long style = wxDEFAULT_DIALOG_STYLE
    )   /TransferThis/;
    %Docstring
        Create(flags, parent, title=wx.GetTranslation("Formatting"), id=wx.ID_ANY, pos=wx.DefaultPosition, sz=wx.DefaultSize, style=wx.DEFAULT_DIALOG_STYLE) -> bool
        
        Creation: see wxRichTextFormattingDialog() "the constructor" for
        details about the parameters.
    %End

    wxImageList * GetImageList() const;
    %Docstring
        GetImageList() -> wx.ImageList
        
        Returns the image list associated with the dialog, used for example if
        showing the dialog as a toolbook.
    %End

    bool GetStyle(
        wxRichTextCtrl * ctrl,
        const wxRichTextRange & range
    );
    %Docstring
        GetStyle(ctrl, range) -> bool
        
        Gets common attributes from the given range and calls SetAttributes().
    %End

    wxRichTextStyleDefinition * GetStyleDefinition() const;
    %Docstring
        GetStyleDefinition() -> RichTextStyleDefinition
        
        Gets the associated style definition, if any.
    %End

    wxRichTextStyleSheet * GetStyleSheet() const;
    %Docstring
        GetStyleSheet() -> RichTextStyleSheet
        
        Gets the associated style sheet, if any.
    %End

    void SetAttributes(
        const wxTextAttr & attr
    );
    %Docstring
        SetAttributes(attr)
        
        Sets the attributes to be edited.
    %End

    void SetOptions(
        int options
    );
    %Docstring
        SetOptions(options)
        
        Sets the dialog options, determining what the interface presents to
        the user.
    %End

    int GetOptions() const;
    %Docstring
        GetOptions() -> int
        
        Gets the dialog options, determining what the interface presents to
        the user.
    %End

    bool HasOption(
        int option
    ) const;
    %Docstring
        HasOption(option) -> bool
        
        Returns true if the given option is present.
    %End

    void SetImageList(
        wxImageList * imageList
    );
    %Docstring
        SetImageList(imageList)
        
        Sets the image list associated with the dialog's property sheet.
    %End

    bool SetStyle(
        const wxTextAttr & style,
        bool update = true
    );
    %Docstring
        SetStyle(style, update=True) -> bool
        
        Sets the attributes and optionally updates the display, if update is
        true.
    %End

    bool SetStyleDefinition(
        const wxRichTextStyleDefinition & styleDef,
        wxRichTextStyleSheet * sheet,
        bool update = true
    );
    %Docstring
        SetStyleDefinition(styleDef, sheet, update=True) -> bool
        
        Sets the style definition and optionally update the display, if update
        is true.
    %End

    bool UpdateDisplay();
    %Docstring
        UpdateDisplay() -> bool
        
        Updates the display.
    %End

    static
    wxRichTextFormattingDialog * GetDialog(
        wxWindow * win
    );
    %Docstring
        GetDialog(win) -> RichTextFormattingDialog
        
        Helper for pages to get the top-level dialog.
    %End

    static
    wxTextAttr * GetDialogAttributes(
        wxWindow * win
    );
    %Docstring
        GetDialogAttributes(win) -> wx.TextAttr
        
        Helper for pages to get the attributes.
    %End

    static
    wxRichTextStyleDefinition * GetDialogStyleDefinition(
        wxWindow * win
    );
    %Docstring
        GetDialogStyleDefinition(win) -> RichTextStyleDefinition
        
        Helper for pages to get the style.
    %End

    static
    wxRichTextFormattingDialogFactory * GetFormattingDialogFactory();
    %Docstring
        GetFormattingDialogFactory() -> RichTextFormattingDialogFactory
        
        Returns the object to be used to customize the dialog and provide
        pages.
    %End

    static
    void SetFormattingDialogFactory(
        wxRichTextFormattingDialogFactory * factory
    );
    %Docstring
        SetFormattingDialogFactory(factory)
        
        Sets the formatting factory object to be used for customization and
        page creation.
    %End

    static
    bool GetRestoreLastPage();
    %Docstring
        GetRestoreLastPage() -> bool
        
        Returns true if the dialog will restore the last-selected page.
    %End

    static
    void SetRestoreLastPage(
        bool b
    );
    %Docstring
        SetRestoreLastPage(b)
        
        Pass true if the dialog should restore the last-selected page.
    %End

    static
    int GetLastPage();
    %Docstring
        GetLastPage() -> int
        
        Returns the page identifier of the last page selected (not the control
        id).
    %End

    static
    void SetLastPage(
        int lastPage
    );
    %Docstring
        SetLastPage(lastPage)
        
        Sets the page identifier of the last page selected (not the control
        id).
    %End

    static
    void SetColourData(
        const wxColourData & colourData
    );
    %Docstring
        SetColourData(colourData)
        
        Sets the custom colour data for use by the colour dialog.
    %End

    static
    wxColourData GetColourData();
    %Docstring
        GetColourData() -> wx.ColourData
        
        Returns the custom colour data for use by the colour dialog.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Attributes, get=GetAttributes, set=SetAttributes)
    %Property(name=ImageList, get=GetImageList, set=SetImageList)
    %Property(name=Options, get=GetOptions, set=SetOptions)
    %Property(name=StyleDefinition, get=GetStyleDefinition, set=SetStyleDefinition)
    %Property(name=StyleSheet, get=GetStyleSheet)
};  // end of class wxRichTextFormattingDialog



//---------------------------------------------------------------------------

