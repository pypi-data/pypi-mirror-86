//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const char* wxChoiceNameStr;

class wxChoice : wxControl, wxItemContainer
{
    %Docstring
        Choice()
        Choice(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, choices=[], style=0, validator=DefaultValidator, name=ChoiceNameStr)
        
        A choice item is used to select one of a list of strings.
    %End
    %TypeHeaderCode
        #include <wx/choice.h>
    %End

public:
    wxChoice();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxChoice(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        const wxArrayString & choices = wxArrayString(),
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxChoiceNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxChoice();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        const wxArrayString & choices = wxArrayString(),
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxChoiceNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, choices=[], style=0, validator=DefaultValidator, name=ChoiceNameStr) -> bool
        
        Creates the choice for two-step construction.
    %End

    int GetColumns() const;
    %Docstring
        GetColumns() -> int
        
        Gets the number of columns in this choice item.
    %End

    int GetCurrentSelection() const;
    %Docstring
        GetCurrentSelection() -> int
        
        Unlike wxControlWithItems::GetSelection() which only returns the
        accepted selection value (the selection in the control once the user
        closes the dropdown list), this function returns the current
        selection.
    %End

    void SetColumns(
        int n = 1
    );
    %Docstring
        SetColumns(n=1)
        
        Sets the number of columns in this choice item.
    %End

    bool IsSorted() const;
    %Docstring
        IsSorted() -> bool
    %End

    unsigned int GetCount() const;
    %Docstring
        GetCount() -> unsignedint
        
        Returns the number of items in the control.
    %End

    int GetSelection() const;
    %Docstring
        GetSelection() -> int
        
        Returns the index of the selected item or wxNOT_FOUND if no item is
        selected.
    %End

    void SetSelection(
        int n
    );
    %Docstring
        SetSelection(n)
        
        Sets the selection to the given item n or removes the selection
        entirely if n == wxNOT_FOUND.
    %End

    int FindString(
        const wxString & string,
        bool caseSensitive = false
    ) const;
    %Docstring
        FindString(string, caseSensitive=False) -> int
        
        Finds an item whose label matches the given string.
    %End

    wxString GetString(
        unsigned int n
    ) const;
    %Docstring
        GetString(n) -> String
        
        Returns the label of the item with the given index.
    %End

    void SetString(
        unsigned int n,
        const wxString & string
    );
    %Docstring
        SetString(n, string)
        
        Sets the label for the given item.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Columns, get=GetColumns, set=SetColumns)
    %Property(name=Count, get=GetCount)
    %Property(name=CurrentSelection, get=GetCurrentSelection)
    %Property(name=Selection, get=GetSelection, set=SetSelection)
};  // end of class wxChoice



//---------------------------------------------------------------------------

