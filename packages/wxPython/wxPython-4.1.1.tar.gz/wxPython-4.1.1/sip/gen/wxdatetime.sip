//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const char* wxDefaultTimeSpanFormat;

const char* wxDefaultDateTimeFormat;

class wxDateTime
{
    %Docstring
        DateTime()
        DateTime(date)
        DateTime(day, month, year=Inv_Year, hour=0, minute=0, second=0, millisec=0)
        
        wxDateTime class represents an absolute moment in time.
    %End
    %TypeHeaderCode
        #include <wx/datetime.h>
    %End

public:
    enum TZ
    {
        Local,
        GMT_12,
        GMT_11,
        GMT_10,
        GMT_9,
        GMT_8,
        GMT_7,
        GMT_6,
        GMT_5,
        GMT_4,
        GMT_3,
        GMT_2,
        GMT_1,
        GMT0,
        GMT1,
        GMT2,
        GMT3,
        GMT4,
        GMT5,
        GMT6,
        GMT7,
        GMT8,
        GMT9,
        GMT10,
        GMT11,
        GMT12,
        GMT13,
        WET,
        WEST,
        CET,
        CEST,
        EET,
        EEST,
        MSK,
        MSD,
        AST,
        ADT,
        EST,
        EDT,
        CST,
        CDT,
        MST,
        MDT,
        PST,
        PDT,
        HST,
        AKST,
        AKDT,
        A_WST,
        A_CST,
        A_EST,
        A_ESST,
        NZST,
        NZDT,
        UTC    
    };

    enum Calendar
    {
        Gregorian,
        Julian    
    };

    enum Country
    {
        Country_Unknown,
        Country_Default,
        Country_WesternEurope_Start,
        Country_EEC,
        France,
        Germany,
        UK,
        Country_WesternEurope_End,
        Russia,
        USA    
    };

    enum Month
    {
        Jan,
        Feb,
        Mar,
        Apr,
        May,
        Jun,
        Jul,
        Aug,
        Sep,
        Oct,
        Nov,
        Dec,
        Inv_Month    
    };

    enum WeekDay
    {
        Sun,
        Mon,
        Tue,
        Wed,
        Thu,
        Fri,
        Sat,
        Inv_WeekDay    
    };

    enum Year
    {
        Inv_Year    
    };

    enum NameFlags
    {
        Name_Full,
        Name_Abbr    
    };

    enum WeekFlags
    {
        Default_First,
        Monday_First,
        Sunday_First    
    };

public:
    class TimeZone
    {
        %Docstring
            TimeZone(tz)
            TimeZone(offset=0)
            
            Class representing a time zone.
        %End
        %TypeHeaderCode
            #include <wx/datetime.h>
        %End

    public:
        TimeZone(
            wxDateTime::TZ tz
        );

        TimeZone(
            long offset = 0
        );

        bool IsLocal() const;
        %Docstring
            IsLocal() -> bool
            
            Return true if this is the local time zone.
        %End

        long GetOffset() const;
        %Docstring
            GetOffset() -> long
            
            Return the offset of this time zone from UTC, in seconds.
        %End

        static
        wxDateTime::TimeZone Make(
            long offset
        );
        %Docstring
            Make(offset) -> DateTime.TimeZone
            
            Create a time zone with the given offset in seconds.
        %End

        public:


        %Property(name=Offset, get=GetOffset)
    };  // end of class TimeZone


public:
    struct Tm
    {
        %Docstring
            Contains broken down date-time representation.
        %End
        %TypeHeaderCode
            #include <wx/datetime.h>
        %End

        unsigned short msec;

        unsigned short sec;

        unsigned short min;

        unsigned short hour;

        unsigned short mday;

        unsigned short yday;

        wxDateTime::Month mon;

        int year;

        bool IsValid() const;
        %Docstring
            IsValid() -> bool
            
            Check if the given date/time is valid (in Gregorian calendar).
        %End

        wxDateTime::WeekDay GetWeekDay();
        %Docstring
            GetWeekDay() -> DateTime.WeekDay
            
            Return the week day corresponding to this date.
        %End

        public:


        %Property(name=WeekDay, get=GetWeekDay)
    };  // end of class Tm


    wxDateTime();

    wxDateTime(
        const wxDateTime & date
    );

    wxDateTime(
        unsigned short day,
        wxDateTime::Month month,
        int year = Inv_Year,
        unsigned short hour = 0,
        unsigned short minute = 0,
        unsigned short second = 0,
        unsigned short millisec = 0
    );

    wxDateTime & ResetTime();
    %Docstring
        ResetTime() -> DateTime
        
        Reset time to midnight (00:00:00) without changing the date.
    %End

    wxDateTime & Set(
        unsigned short day,
        wxDateTime::Month month,
        int year = Inv_Year,
        unsigned short hour = 0,
        unsigned short minute = 0,
        unsigned short second = 0,
        unsigned short millisec = 0
    );
    %Docstring
        Set(day, month, year=Inv_Year, hour=0, minute=0, second=0, millisec=0) -> DateTime
        
        Sets the date and time from the parameters.
    %End

    wxDateTime & Set(
        unsigned short hour,
        unsigned short minute = 0,
        unsigned short second = 0,
        unsigned short millisec = 0
    )   /PyName=SetHMS/;
    %Docstring
        SetHMS(hour, minute=0, second=0, millisec=0) -> DateTime
        
        Sets the date to be equal to Today() and the time from supplied
        parameters.
    %End

    wxDateTime & Set(
        double jdn
    )   /PyName=SetJDN/;
    %Docstring
        SetJDN(jdn) -> DateTime
        
        Sets the date from the so-called Julian Day Number.
    %End

    wxDateTime & Set(
        time_t timet
    )   /PyName=SetTimeT/;
    %Docstring
        SetTimeT(timet) -> DateTime
        
        Constructs the object from timet value holding the number of seconds
        since Jan 1, 1970 UTC.
    %End

    wxDateTime & Set(
        const Tm & tm
    )   /PyName=SetTm/;
    %Docstring
        SetTm(tm) -> DateTime
        
        Sets the date and time from the broken down representation in the
        wxDateTime::Tm structure.
    %End

    wxDateTime & SetDay(
        unsigned short day
    );
    %Docstring
        SetDay(day) -> DateTime
        
        Sets the day without changing other date components.
    %End

    wxDateTime & SetFromDOS(
        unsigned long ddt
    );
    %Docstring
        SetFromDOS(ddt) -> DateTime
        
        Sets the date from the date and time in DOS format.
    %End

    wxDateTime & SetHour(
        unsigned short hour
    );
    %Docstring
        SetHour(hour) -> DateTime
        
        Sets the hour without changing other date components.
    %End

    wxDateTime & SetMillisecond(
        unsigned short millisecond
    );
    %Docstring
        SetMillisecond(millisecond) -> DateTime
        
        Sets the millisecond without changing other date components.
    %End

    wxDateTime & SetMinute(
        unsigned short minute
    );
    %Docstring
        SetMinute(minute) -> DateTime
        
        Sets the minute without changing other date components.
    %End

    wxDateTime & SetMonth(
        wxDateTime::Month month
    );
    %Docstring
        SetMonth(month) -> DateTime
        
        Sets the month without changing other date components.
    %End

    wxDateTime & SetSecond(
        unsigned short second
    );
    %Docstring
        SetSecond(second) -> DateTime
        
        Sets the second without changing other date components.
    %End

    wxDateTime & SetToCurrent();
    %Docstring
        SetToCurrent() -> DateTime
        
        Sets the date and time of to the current values.
    %End

    wxDateTime & SetYear(
        int year
    );
    %Docstring
        SetYear(year) -> DateTime
        
        Sets the year without changing other date components.
    %End

    unsigned long GetAsDOS() const;
    %Docstring
        GetAsDOS() -> unsignedlong
        
        Returns the date and time in DOS format.
    %End

    int GetCentury(
        const TimeZone & tz = Local
    ) const;
    %Docstring
        GetCentury(tz=Local) -> int
        
        Returns the century of this date.
    %End

    wxDateTime GetDateOnly() const;
    %Docstring
        GetDateOnly() -> DateTime
        
        Returns the object having the same date component as this one but time
        of 00:00:00.
    %End

    unsigned short GetDay(
        const TimeZone & tz = Local
    ) const;
    %Docstring
        GetDay(tz=Local) -> unsignedshort
        
        Returns the day in the given timezone (local one by default).
    %End

    unsigned short GetDayOfYear(
        const TimeZone & tz = Local
    ) const;
    %Docstring
        GetDayOfYear(tz=Local) -> unsignedshort
        
        Returns the day of the year (in 1-366 range) in the given timezone
        (local one by default).
    %End

    unsigned short GetHour(
        const TimeZone & tz = Local
    ) const;
    %Docstring
        GetHour(tz=Local) -> unsignedshort
        
        Returns the hour in the given timezone (local one by default).
    %End

    unsigned short GetMillisecond(
        const TimeZone & tz = Local
    ) const;
    %Docstring
        GetMillisecond(tz=Local) -> unsignedshort
        
        Returns the milliseconds in the given timezone (local one by default).
    %End

    unsigned short GetMinute(
        const TimeZone & tz = Local
    ) const;
    %Docstring
        GetMinute(tz=Local) -> unsignedshort
        
        Returns the minute in the given timezone (local one by default).
    %End

    wxDateTime::Month GetMonth(
        const TimeZone & tz = Local
    ) const;
    %Docstring
        GetMonth(tz=Local) -> DateTime.Month
        
        Returns the month in the given timezone (local one by default).
    %End

    unsigned short GetSecond(
        const TimeZone & tz = Local
    ) const;
    %Docstring
        GetSecond(tz=Local) -> unsignedshort
        
        Returns the seconds in the given timezone (local one by default).
    %End

    time_t GetTicks() const;
    %Docstring
        GetTicks() -> time_t
        
        Returns the number of seconds since Jan 1, 1970 UTC.
    %End

    wxLongLong GetValue() const;
    %Docstring
        GetValue() -> LongLong
        
        Returns the number of milliseconds since Jan 1, 1970 UTC.
    %End

    wxDateTime::Tm GetTm(
        const TimeZone & tz = Local
    ) const;
    %Docstring
        GetTm(tz=Local) -> DateTime.Tm
        
        Returns broken down representation of the date and time.
    %End

    wxDateTime::WeekDay GetWeekDay(
        const TimeZone & tz = Local
    ) const;
    %Docstring
        GetWeekDay(tz=Local) -> DateTime.WeekDay
        GetWeekDay(weekday, n=1, month=Inv_Month, year=Inv_Year) -> DateTime
        
        Returns the week day in the given timezone (local one by default).
    %End

    wxDateTime GetWeekDay(
        wxDateTime::WeekDay weekday,
        int n = 1,
        wxDateTime::Month month = Inv_Month,
        int year = Inv_Year
    ) const;

    int GetWeekBasedYear(
        const TimeZone & tz
    ) const;
    %Docstring
        GetWeekBasedYear(tz) -> int
        
        Returns the year to which the week containing this date belongs.
    %End

    unsigned short GetWeekOfMonth(
        WeekFlags flags = Monday_First,
        const TimeZone & tz = Local
    ) const;
    %Docstring
        GetWeekOfMonth(flags=Monday_First, tz=Local) -> unsignedshort
        
        Returns the ordinal number of the week in the month (in 1-5 range).
    %End

    unsigned short GetWeekOfYear(
        WeekFlags flags = Monday_First,
        const TimeZone & tz = Local
    ) const;
    %Docstring
        GetWeekOfYear(flags=Monday_First, tz=Local) -> unsignedshort
        
        Returns the number of the week of the year this date is in.
    %End

    int GetYear(
        const TimeZone & tz = Local
    ) const;
    %Docstring
        GetYear(tz=Local) -> int
        
        Returns the year in the given timezone (local one by default).
    %End

    bool IsValid() const;
    %Docstring
        IsValid() -> bool
        
        Returns true if the object represents a valid time moment.
    %End

    bool IsWorkDay(
        Country country = Country_Default
    ) const;
    %Docstring
        IsWorkDay(country=Country_Default) -> bool
        
        Returns true is this day is not a holiday in the given country.
    %End

    bool IsEarlierThan(
        const wxDateTime & datetime
    ) const;
    %Docstring
        IsEarlierThan(datetime) -> bool
        
        Returns true if this date precedes the given one.
    %End

    bool IsEqualTo(
        const wxDateTime & datetime
    ) const;
    %Docstring
        IsEqualTo(datetime) -> bool
        
        Returns true if the two dates are strictly identical.
    %End

    bool IsEqualUpTo(
        const wxDateTime & dt,
        const wxTimeSpan & ts
    ) const;
    %Docstring
        IsEqualUpTo(dt, ts) -> bool
        
        Returns true if the date is equal to another one up to the given time
        interval, i.e. if the absolute difference between the two dates is
        less than this interval.
    %End

    bool IsLaterThan(
        const wxDateTime & datetime
    ) const;
    %Docstring
        IsLaterThan(datetime) -> bool
        
        Returns true if this date is later than the given one.
    %End

    bool IsSameDate(
        const wxDateTime & dt
    ) const;
    %Docstring
        IsSameDate(dt) -> bool
        
        Returns true if the date is the same without comparing the time parts.
    %End

    bool IsSameTime(
        const wxDateTime & dt
    ) const;
    %Docstring
        IsSameTime(dt) -> bool
        
        Returns true if the time is the same (although dates may differ).
    %End

    bool IsStrictlyBetween(
        const wxDateTime & t1,
        const wxDateTime & t2
    ) const;
    %Docstring
        IsStrictlyBetween(t1, t2) -> bool
        
        Returns true if this date lies strictly between the two given dates.
    %End

    bool IsBetween(
        const wxDateTime & t1,
        const wxDateTime & t2
    ) const;
    %Docstring
        IsBetween(t1, t2) -> bool
        
        Returns true if IsStrictlyBetween() is true or if the date is equal to
        one of the limit values.
    %End

    wxDateTime & Add(
        const wxDateSpan & diff
    );
    %Docstring
        Add(diff) -> DateTime
        Add(diff) -> DateTime
        
        Adds the given date span to this object.
    %End

    wxDateTime & Add(
        const wxTimeSpan & diff
    );

    wxDateTime & Subtract(
        const wxTimeSpan & diff
    );
    %Docstring
        Subtract(diff) -> DateTime
        Subtract(diff) -> DateTime
        Subtract(dt) -> TimeSpan
        
        Subtracts the given time span from this object.
    %End

    wxDateTime & Subtract(
        const wxDateSpan & diff
    );

    wxTimeSpan Subtract(
        const wxDateTime & dt
    ) const;

    wxDateSpan DiffAsDateSpan(
        const wxDateTime & dt
    ) const;
    %Docstring
        DiffAsDateSpan(dt) -> DateSpan
        
        Returns the difference between this object and dt as a wxDateSpan.
    %End

    wxString Format(
        const wxString & format = wxDefaultDateTimeFormat,
        const TimeZone & tz = Local
    ) const;
    %Docstring
        Format(format=DefaultDateTimeFormat, tz=Local) -> String
        
        This function does the same as the standard ANSI C strftime(3)
        function
        (http://www.cplusplus.com/reference/clibrary/ctime/strftime.html).
    %End

    wxString FormatDate() const;
    %Docstring
        FormatDate() -> String
        
        Identical to calling Format() with "%x" argument (which means
        "preferred date representation for the current locale").
    %End

    wxString FormatISOCombined(
        char sep = 'T'
    ) const;
    %Docstring
        FormatISOCombined(sep='T') -> String
        
        Returns the combined date-time representation in the ISO 8601 format
        "YYYY-MM-DDTHH:MM:SS".
    %End

    wxString FormatISODate() const;
    %Docstring
        FormatISODate() -> String
        
        This function returns the date representation in the ISO 8601 format
        "YYYY-MM-DD".
    %End

    wxString FormatISOTime() const;
    %Docstring
        FormatISOTime() -> String
        
        This function returns the time representation in the ISO 8601 format
        "HH:MM:SS".
    %End

    wxString FormatTime() const;
    %Docstring
        FormatTime() -> String
        
        Identical to calling Format() with "%X" argument (which means
        "preferred time representation for the current locale").
    %End

    int ParseDate(
        const wxString & date
    );
    %Docstring
        ParseDate(date) -> int
        
        This function is like ParseDateTime(), but it only allows the date to
        be specified.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDateTime_ParseDate(sipCpp, date);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxDateTime_ParseDate(wxDateTime* self, const wxString *date)
    {
        wxString::const_iterator begin = date->begin();
        wxString::const_iterator end;
        if (! self->ParseDate(*date, &end))
            return -1;
        return end - begin;
    }
    %End

    int ParseDateTime(
        const wxString & datetime
    );
    %Docstring
        ParseDateTime(datetime) -> int
        
        Parses the string datetime containing the date and time in free
        format.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDateTime_ParseDateTime(sipCpp, datetime);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxDateTime_ParseDateTime(wxDateTime* self, const wxString *datetime)
    {
        wxString::const_iterator begin = datetime->begin();
        wxString::const_iterator end;
        if (! self->ParseDateTime(*datetime, &end))
            return -1;
        return end - begin;
    }
    %End

    int ParseFormat(
        const wxString & date,
        const wxString & format,
        const wxDateTime & dateDef
    );
    %Docstring
        ParseFormat(date, format, dateDef) -> int
        ParseFormat(date, format) -> int
        ParseFormat(date) -> int
        
        This function parses the string date according to the given format.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDateTime_ParseFormat(sipCpp, date, format, dateDef);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxDateTime_ParseFormat(wxDateTime* self, const wxString *date, const wxString *format, const wxDateTime *dateDef)
    {
        wxString::const_iterator begin = date->begin();
        wxString::const_iterator end;
        if (! self->ParseFormat(*date, *format, *dateDef, &end))
            return -1;
        return end - begin;
    }
    %End

    int ParseFormat(
        const wxString & date,
        const wxString & format
    );
    %Docstring
        ParseFormat(date, format) -> int
        
        This version of the :meth:`ParseFormat` method works the same, but
        with missing values filled in from :meth:`Today`.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDateTime_ParseFormat(sipCpp, date, format);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxDateTime_ParseFormat(wxDateTime* self, const wxString *date, const wxString *format)
    {
        wxString::const_iterator begin = date->begin();
        wxString::const_iterator end;
        if (! self->ParseFormat(*date, *format, &end))
            return -1;
        return end - begin;
    }
    %End

    int ParseFormat(
        const wxString & date
    );
    %Docstring
        ParseFormat(date) -> int
        
        This version uses "%c" as the format code, which is the same default
        used by :meth:`Format`.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDateTime_ParseFormat(sipCpp, date);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxDateTime_ParseFormat(wxDateTime* self, const wxString *date)
    {
        wxString::const_iterator begin = date->begin();
        wxString::const_iterator end;
        if (! self->ParseFormat(*date, &end))
            return -1;
        return end - begin;
    }
    %End

    bool ParseISOCombined(
        const wxString & date,
        char sep = 'T'
    );
    %Docstring
        ParseISOCombined(date, sep='T') -> bool
        
        This function parses the string containing the date and time in ISO
        8601 combined format "YYYY-MM-DDTHH:MM:SS".
    %End

    bool ParseISODate(
        const wxString & date
    );
    %Docstring
        ParseISODate(date) -> bool
        
        This function parses the date in ISO 8601 format "YYYY-MM-DD".
    %End

    bool ParseISOTime(
        const wxString & date
    );
    %Docstring
        ParseISOTime(date) -> bool
        
        This function parses the time in ISO 8601 format "HH:MM:SS".
    %End

    int ParseRfc822Date(
        const wxString & date
    );
    %Docstring
        ParseRfc822Date(date) -> int
        
        Parses the string date looking for a date formatted according to the
        RFC 822 in it.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDateTime_ParseRfc822Date(sipCpp, date);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxDateTime_ParseRfc822Date(wxDateTime* self, const wxString *date)
    {
        wxString::const_iterator begin = date->begin();
        wxString::const_iterator end;
        if (! self->ParseRfc822Date(*date, &end))
            return -1;
        return end - begin;
    }
    %End

    int ParseTime(
        const wxString & time
    );
    %Docstring
        ParseTime(time) -> int
        
        This functions is like ParseDateTime(), but only allows the time to be
        specified in the input string.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDateTime_ParseTime(sipCpp, time);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxDateTime_ParseTime(wxDateTime* self, const wxString *time)
    {
        wxString::const_iterator begin = time->begin();
        wxString::const_iterator end;
        if (! self->ParseTime(*time, &end))
            return -1;
        return end - begin;
    }
    %End

    wxDateTime GetLastMonthDay(
        wxDateTime::Month month = Inv_Month,
        int year = Inv_Year
    ) const;
    %Docstring
        GetLastMonthDay(month=Inv_Month, year=Inv_Year) -> DateTime
        
        Returns the copy of this object to which SetToLastMonthDay() was
        applied.
    %End

    wxDateTime GetLastWeekDay(
        wxDateTime::WeekDay weekday,
        wxDateTime::Month month = Inv_Month,
        int year = Inv_Year
    );
    %Docstring
        GetLastWeekDay(weekday, month=Inv_Month, year=Inv_Year) -> DateTime
        
        Returns the copy of this object to which SetToLastWeekDay() was
        applied.
    %End

    wxDateTime GetNextWeekDay(
        wxDateTime::WeekDay weekday
    ) const;
    %Docstring
        GetNextWeekDay(weekday) -> DateTime
        
        Returns the copy of this object to which SetToNextWeekDay() was
        applied.
    %End

    wxDateTime GetPrevWeekDay(
        wxDateTime::WeekDay weekday
    ) const;
    %Docstring
        GetPrevWeekDay(weekday) -> DateTime
        
        Returns the copy of this object to which SetToPrevWeekDay() was
        applied.
    %End

    wxDateTime GetWeekDayInSameWeek(
        wxDateTime::WeekDay weekday,
        WeekFlags flags = Monday_First
    ) const;
    %Docstring
        GetWeekDayInSameWeek(weekday, flags=Monday_First) -> DateTime
        
        Returns the copy of this object to which SetToWeekDayInSameWeek() was
        applied.
    %End

    wxDateTime GetYearDay(
        unsigned short yday
    ) const;
    %Docstring
        GetYearDay(yday) -> DateTime
        
        Returns the copy of this object to which SetToYearDay() was applied.
    %End

    wxDateTime & SetToLastMonthDay(
        wxDateTime::Month month = Inv_Month,
        int year = Inv_Year
    );
    %Docstring
        SetToLastMonthDay(month=Inv_Month, year=Inv_Year) -> DateTime
        
        Sets the date to the last day in the specified month (the current one
        by default).
    %End

    bool SetToLastWeekDay(
        wxDateTime::WeekDay weekday,
        wxDateTime::Month month = Inv_Month,
        int year = Inv_Year
    );
    %Docstring
        SetToLastWeekDay(weekday, month=Inv_Month, year=Inv_Year) -> bool
        
        The effect of calling this function is the same as of calling
        SetToWeekDay(-1, weekday, month, year).
    %End

    wxDateTime & SetToNextWeekDay(
        wxDateTime::WeekDay weekday
    );
    %Docstring
        SetToNextWeekDay(weekday) -> DateTime
        
        Sets the date so that it will be the first weekday following the
        current date.
    %End

    wxDateTime & SetToPrevWeekDay(
        wxDateTime::WeekDay weekday
    );
    %Docstring
        SetToPrevWeekDay(weekday) -> DateTime
        
        Sets the date so that it will be the last weekday before the current
        date.
    %End

    bool SetToWeekDay(
        wxDateTime::WeekDay weekday,
        int n = 1,
        wxDateTime::Month month = Inv_Month,
        int year = Inv_Year
    );
    %Docstring
        SetToWeekDay(weekday, n=1, month=Inv_Month, year=Inv_Year) -> bool
        
        Sets the date to the n-th weekday in the given month of the given year
        (the current month and year are used by default).
    %End

    wxDateTime & SetToWeekDayInSameWeek(
        wxDateTime::WeekDay weekday,
        WeekFlags flags = Monday_First
    );
    %Docstring
        SetToWeekDayInSameWeek(weekday, flags=Monday_First) -> DateTime
        
        Adjusts the date so that it will still lie in the same week as before,
        but its week day will be the given one.
    %End

    wxDateTime & SetToYearDay(
        unsigned short yday
    );
    %Docstring
        SetToYearDay(yday) -> DateTime
        
        Sets the date to the day number yday in the same year (i.e. unlike the
        other functions, this one does not use the current year).
    %End

    double GetJDN() const;
    %Docstring
        GetJDN() -> double
        
        Synonym for GetJulianDayNumber().
    %End

    double GetJulianDayNumber() const;
    %Docstring
        GetJulianDayNumber() -> double
        
        Returns the JDN corresponding to this date.
    %End

    double GetMJD() const;
    %Docstring
        GetMJD() -> double
        
        Synonym for GetModifiedJulianDayNumber().
    %End

    double GetModifiedJulianDayNumber() const;
    %Docstring
        GetModifiedJulianDayNumber() -> double
        
        Returns the "Modified Julian Day Number" (MJD) which is, by
        definition, is equal to JDN - 2400000.5.
    %End

    double GetRataDie() const;
    %Docstring
        GetRataDie() -> double
        
        Return the Rata Die number of this date.
    %End

    wxDateTime FromTimezone(
        const TimeZone & tz,
        bool noDST = false
    ) const;
    %Docstring
        FromTimezone(tz, noDST=False) -> DateTime
        
        Transform the date from the given time zone to the local one.
    %End

    int IsDST(
        Country country = Country_Default
    ) const;
    %Docstring
        IsDST(country=Country_Default) -> int
        
        Returns true if the DST is applied for this date in the given country.
    %End

    wxDateTime & MakeFromTimezone(
        const TimeZone & tz,
        bool noDST = false
    );
    %Docstring
        MakeFromTimezone(tz, noDST=False) -> DateTime
        
        Same as FromTimezone() but modifies the object in place.
    %End

    wxDateTime & MakeTimezone(
        const TimeZone & tz,
        bool noDST = false
    );
    %Docstring
        MakeTimezone(tz, noDST=False) -> DateTime
        
        Modifies the object in place to represent the date in another time
        zone.
    %End

    wxDateTime & MakeUTC(
        bool noDST = false
    );
    %Docstring
        MakeUTC(noDST=False) -> DateTime
        
        This is the same as calling MakeTimezone() with the argument GMT0.
    %End

    wxDateTime ToTimezone(
        const TimeZone & tz,
        bool noDST = false
    ) const;
    %Docstring
        ToTimezone(tz, noDST=False) -> DateTime
        
        Transform the date to the given time zone.
    %End

    wxDateTime ToUTC(
        bool noDST = false
    ) const;
    %Docstring
        ToUTC(noDST=False) -> DateTime
        
        This is the same as calling ToTimezone() with the argument GMT0.
    %End

    typedef unsigned short wxDateTime_t;

    static
    int ConvertYearToBC(
        int year
    );
    %Docstring
        ConvertYearToBC(year) -> int
        
        Converts the year in absolute notation (i.e. a number which can be
        negative, positive or zero) to the year in BC/AD notation.
    %End

    static
    void GetAmPmStrings(
        wxString * am   /Out/,
        wxString * pm   /Out/
    );
    %Docstring
        GetAmPmStrings() -> (am, pm)
        
        Returns the translations of the strings AM and PM used for time
        formatting for the current locale.
    %End

    static
    wxDateTime GetBeginDST(
        int year = Inv_Year,
        Country country = Country_Default
    );
    %Docstring
        GetBeginDST(year=Inv_Year, country=Country_Default) -> DateTime
        
        Get the beginning of DST for the given country in the given year
        (current one by default).
    %End

    static
    wxDateTime GetEndDST(
        int year = Inv_Year,
        Country country = Country_Default
    );
    %Docstring
        GetEndDST(year=Inv_Year, country=Country_Default) -> DateTime
        
        Returns the end of DST for the given country in the given year
        (current one by default).
    %End

    static
    Country GetCountry();
    %Docstring
        GetCountry() -> Country
        
        Returns the current default country.
    %End

    static
    wxDateTime::Month GetCurrentMonth(
        Calendar cal = Gregorian
    );
    %Docstring
        GetCurrentMonth(cal=Gregorian) -> DateTime.Month
        
        Get the current month in given calendar (only Gregorian is currently
        supported).
    %End

    static
    int GetCurrentYear(
        Calendar cal = Gregorian
    );
    %Docstring
        GetCurrentYear(cal=Gregorian) -> int
        
        Get the current year in given calendar (only Gregorian is currently
        supported).
    %End

    static
    wxString GetEnglishMonthName(
        wxDateTime::Month month,
        NameFlags flags = Name_Full
    );
    %Docstring
        GetEnglishMonthName(month, flags=Name_Full) -> String
        
        Return the standard English name of the given month.
    %End

    static
    wxString GetEnglishWeekDayName(
        wxDateTime::WeekDay weekday,
        NameFlags flags = Name_Full
    );
    %Docstring
        GetEnglishWeekDayName(weekday, flags=Name_Full) -> String
        
        Return the standard English name of the given week day.
    %End

    static
    wxString GetMonthName(
        wxDateTime::Month month,
        NameFlags flags = Name_Full
    );
    %Docstring
        GetMonthName(month, flags=Name_Full) -> String
        
        Gets the full (default) or abbreviated name of the given month.
    %End

    static
    unsigned short GetNumberOfDays(
        wxDateTime::Month month,
        int year = Inv_Year,
        Calendar cal = Gregorian
    );
    %Docstring
        GetNumberOfDays(month, year=Inv_Year, cal=Gregorian) -> unsignedshort
        
        Returns the number of days in the given month of the given year.
    %End

    static
    time_t GetTimeNow();
    %Docstring
        GetTimeNow() -> time_t
        
        Returns the current time.
    %End

    static
    wxString GetWeekDayName(
        wxDateTime::WeekDay weekday,
        NameFlags flags = Name_Full
    );
    %Docstring
        GetWeekDayName(weekday, flags=Name_Full) -> String
        
        Gets the full (default) or abbreviated name of the given week day.
    %End

    static
    bool IsDSTApplicable(
        int year = Inv_Year,
        Country country = Country_Default
    );
    %Docstring
        IsDSTApplicable(year=Inv_Year, country=Country_Default) -> bool
        
        Returns true if DST was used in the given year (the current one by
        default) in the given country.
    %End

    static
    bool GetFirstWeekDay(
        WeekDay * firstDay
    );
    %Docstring
        GetFirstWeekDay(firstDay) -> bool
        
        Acquires the first weekday of a week based on locale and/or OS
        settings.
    %End

    static
    bool IsLeapYear(
        int year = Inv_Year,
        Calendar cal = Gregorian
    );
    %Docstring
        IsLeapYear(year=Inv_Year, cal=Gregorian) -> bool
        
        Returns true if the year is a leap one in the specified calendar.
    %End

    static
    bool IsWestEuropeanCountry(
        Country country = Country_Default
    );
    %Docstring
        IsWestEuropeanCountry(country=Country_Default) -> bool
        
        This function returns true if the specified (or default) country is
        one of Western European ones.
    %End

    static
    wxDateTime Now();
    %Docstring
        Now() -> DateTime
        
        Returns the object corresponding to the current time in local time
        zone.
    %End

    static
    void SetCountry(
        Country country
    );
    %Docstring
        SetCountry(country)
        
        Sets the country to use by default.
    %End

    static
    wxDateTime SetToWeekOfYear(
        int year,
        unsigned short numWeek,
        wxDateTime::WeekDay weekday = Mon
    );
    %Docstring
        SetToWeekOfYear(year, numWeek, weekday=Mon) -> DateTime
        
        Set the date to the given weekday in the week number numWeek of the
        given year .
    %End

    static
    wxDateTime Today();
    %Docstring
        Today() -> DateTime
        
        Returns the object corresponding to the midnight of the current day
        (i.e. the same as Now(), but the time part is set to 0).
    %End

    static
    wxDateTime UNow();
    %Docstring
        UNow() -> DateTime
        
        Returns the object corresponding to the current time including the
        milliseconds.
    %End

    static wxDateTime* FromTimeT(time_t timet)   /Factory/;
    %Docstring
        FromTimeT(timet) -> DateTime
        
        Construct a :class:`DateTime` from a C ``time_t`` value, the number of
        seconds since the epoch.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDateTime_FromTimeT(timet);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxDateTime* _wxDateTime_FromTimeT(time_t timet)
    {
        return new wxDateTime(timet);
    }
    %End

    static wxDateTime* FromJDN(double jdn)   /Factory/;
    %Docstring
        FromJDN(jdn) -> DateTime
        
        Construct a :class:`DateTime` from a Julian Day Number.
        
        By definition, the Julian Day Number, usually abbreviated as JDN, of a
        particular instant is the fractional number of days since 12 hours
        Universal Coordinated Time (Greenwich mean noon) on January 1 of the
        year -4712 in the Julian proleptic calendar.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDateTime_FromJDN(jdn);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxDateTime* _wxDateTime_FromJDN(double jdn)
    {
        return new wxDateTime(jdn);
    }
    %End

    static wxDateTime* FromHMS(unsigned short hour, 
            unsigned short minute=0, 
            unsigned short second=0, 
            unsigned short millisecond=0)   /Factory/;
    %Docstring
        FromHMS(hour, minute=0, second=0, millisecond=0) -> DateTime
        
        Construct a :class:`DateTime` equal to :meth:`Today` () with the time
        set to the supplied parameters.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDateTime_FromHMS(hour, minute, second, millisecond);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxDateTime* _wxDateTime_FromHMS(unsigned short hour, unsigned short minute, unsigned short second, unsigned short millisecond)
    {
        return new wxDateTime(hour, minute, second, millisecond);
    }
    %End

    static wxDateTime* FromDMY(unsigned short day, 
            wxDateTime::Month month, 
            int year = Inv_Year, 
            unsigned short hour=0, 
            unsigned short minute=0, 
            unsigned short second=0, 
            unsigned short millisecond=0)   /Factory/;
    %Docstring
        FromDMY(day, month, year=Inv_Year, hour=0, minute=0, second=0, millisecond=0) -> DateTime
        
        Construct a :class:`DateTime` using the supplied parameters.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDateTime_FromDMY(day, month, year, hour, minute, second, millisecond);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxDateTime* _wxDateTime_FromDMY(unsigned short day, wxDateTime::Month month, int year, unsigned short hour, unsigned short minute, unsigned short second, unsigned short millisecond)
    {
        return new wxDateTime(day, month, year, hour, minute, second, millisecond);
    }
    %End

    %Property(name=day, get=GetDay, set=SetDay)
    %Property(name=month, get=GetMonth, set=SetMonth)
    %Property(name=year, get=GetYear, set=SetYear)
    %Property(name=hour, get=GetHour, set=SetHour)
    %Property(name=minute, get=GetMinute, set=SetMinute)
    %Property(name=second, get=GetSecond, set=SetSecond)
    %Property(name=millisecond, get=GetMillisecond, set=SetMillisecond)
    %Property(name=JDN, get=GetJDN, set=SetJDN)
    %Property(name=DayOfYear, get=GetDayOfYear)
    %Property(name=JulianDayNumber, get=GetJulianDayNumber)
    %Property(name=LastMonthDay, get=GetLastMonthDay)
    %Property(name=MJD, get=GetMJD)
    %Property(name=ModifiedJulianDayNumber, get=GetModifiedJulianDayNumber)
    %Property(name=RataDie, get=GetRataDie)
    %Property(name=Ticks, get=GetTicks)
    %Property(name=WeekOfMonth, get=GetWeekOfMonth)
    %Property(name=WeekOfYear, get=GetWeekOfYear)
            bool operator<(const wxDateTime& dt) const;
            bool operator<=(const wxDateTime& dt) const;
            bool operator>(const wxDateTime& dt) const;
            bool operator>=(const wxDateTime& dt) const;
            bool operator==(const wxDateTime& dt) const;
            bool operator!=(const wxDateTime& dt) const;
            wxDateTime& operator+=(const wxTimeSpan& diff);
            wxDateTime operator+(const wxTimeSpan& ts) const;
            wxDateTime& operator-=(const wxTimeSpan& diff);
            wxDateTime operator-(const wxTimeSpan& ts) const;
            wxDateTime& operator+=(const wxDateSpan& diff);
            wxDateTime operator+(const wxDateSpan& ds) const;
            wxDateTime& operator-=(const wxDateSpan& diff);
            wxDateTime operator-(const wxDateSpan& ds) const;
            wxTimeSpan operator-(const wxDateTime& dt2) const;


    %ConvertToTypeCode
        // Code to test a PyObject for compatibility with wxDateTime
        if (!sipIsErr) {
            if (sipCanConvertToType(sipPy, sipType_wxDateTime, SIP_NO_CONVERTORS))
                    return TRUE;
            if (wxPyDateTime_Check(sipPy) || wxPyDate_Check(sipPy))
                return TRUE;
            return FALSE;
        }
        
        // Code to convert a compatible PyObject to a wxDateTime
        if (wxPyDateTime_Check(sipPy)) {
            *sipCppPtr = wxPyDateTime_ToWxDateTime(sipPy);
            return sipGetState(sipTransferObj);
        }
        if (wxPyDate_Check(sipPy)) {
            *sipCppPtr = wxPyDate_ToWxDateTime(sipPy);
            return sipGetState(sipTransferObj);
        }
        // if we get this far then it must already be a wxDateTime instance
        *sipCppPtr = reinterpret_cast<wxDateTime*>(sipConvertToType(
                sipPy, sipType_wxDateTime, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
        
        return 0;  // Not a new instance
    %End
};  // end of class wxDateTime


%Extract(id=pycode_core)
def _DateTime___repr__(self):
    from six import PY2
    if self.IsValid():
        f = self.Format()
        if PY2: f = f.encode('utf-8')
        return '<wx.DateTime: "%s">' % f
    else:
        return '<wx.DateTime: "INVALID">'
DateTime.__repr__ = _DateTime___repr__
del _DateTime___repr__
%End

%Extract(id=pycode_core)
def _DateTime___str__(self):
    from six import PY2
    if self.IsValid():
        f = self.Format()
        if PY2: f = f.encode('utf-8')
        return f
    else:
        return "INVALID DateTime"
DateTime.__str__ = _DateTime___str__
del _DateTime___str__
%End

class wxDateSpan
{
    %Docstring
        DateSpan(years=0, months=0, weeks=0, days=0)
        
        This class is a "logical time span" and is useful for implementing
        program logic for such things as "add one month to the date" which, in
        general, doesn't mean to add 60*60*24*31 seconds to it, but to take
        the same date the next month (to understand that this is indeed
        different consider adding one month to Feb, 15  we want to get Mar,
        15, of course).
    %End
    %TypeHeaderCode
        #include <wx/datetime.h>
    %End

public:
    wxDateSpan(
        int years = 0,
        int months = 0,
        int weeks = 0,
        int days = 0
    );

    wxDateSpan & Add(
        const wxDateSpan & other
    );
    %Docstring
        Add(other) -> DateSpan
        
        Adds the given wxDateSpan to this wxDateSpan and returns a reference
        to itself.
    %End

    int GetDays() const;
    %Docstring
        GetDays() -> int
        
        Returns the number of days (not counting the weeks component) in this
        date span.
    %End

    int GetMonths() const;
    %Docstring
        GetMonths() -> int
        
        Returns the number of the months (not counting the years) in this date
        span.
    %End

    int GetTotalMonths() const;
    %Docstring
        GetTotalMonths() -> int
        
        Returns the combined number of months in this date span, counting both
        years and months.
    %End

    int GetTotalDays() const;
    %Docstring
        GetTotalDays() -> int
        
        Returns the combined number of days in this date span, counting both
        weeks and days.
    %End

    int GetWeeks() const;
    %Docstring
        GetWeeks() -> int
        
        Returns the number of weeks in this date span.
    %End

    int GetYears() const;
    %Docstring
        GetYears() -> int
        
        Returns the number of years in this date span.
    %End

    wxDateSpan & Multiply(
        int factor
    );
    %Docstring
        Multiply(factor) -> DateSpan
        
        Multiplies this date span by the specified factor.
    %End

    wxDateSpan & Neg();
    %Docstring
        Neg() -> DateSpan
        
        Changes the sign of this date span.
    %End

    wxDateSpan Negate() const;
    %Docstring
        Negate() -> DateSpan
        
        Returns a date span with the opposite sign.
    %End

    wxDateSpan & SetDays(
        int n
    );
    %Docstring
        SetDays(n) -> DateSpan
        
        Sets the number of days (without modifying any other components) in
        this date span.
    %End

    wxDateSpan & SetMonths(
        int n
    );
    %Docstring
        SetMonths(n) -> DateSpan
        
        Sets the number of months (without modifying any other components) in
        this date span.
    %End

    wxDateSpan & SetWeeks(
        int n
    );
    %Docstring
        SetWeeks(n) -> DateSpan
        
        Sets the number of weeks (without modifying any other components) in
        this date span.
    %End

    wxDateSpan & SetYears(
        int n
    );
    %Docstring
        SetYears(n) -> DateSpan
        
        Sets the number of years (without modifying any other components) in
        this date span.
    %End

    wxDateSpan & Subtract(
        const wxDateSpan & other
    );
    %Docstring
        Subtract(other) -> DateSpan
        
        Subtracts the given wxDateSpan to this wxDateSpan and returns a
        reference to itself.
    %End

    static
    wxDateSpan Day();
    %Docstring
        Day() -> DateSpan
        
        Returns a date span object corresponding to one day.
    %End

    static
    wxDateSpan Days(
        int days
    );
    %Docstring
        Days(days) -> DateSpan
        
        Returns a date span object corresponding to the given number of days.
    %End

    static
    wxDateSpan Month();
    %Docstring
        Month() -> DateSpan
        
        Returns a date span object corresponding to one month.
    %End

    static
    wxDateSpan Months(
        int mon
    );
    %Docstring
        Months(mon) -> DateSpan
        
        Returns a date span object corresponding to the given number of
        months.
    %End

    static
    wxDateSpan Week();
    %Docstring
        Week() -> DateSpan
        
        Returns a date span object corresponding to one week.
    %End

    static
    wxDateSpan Weeks(
        int weeks
    );
    %Docstring
        Weeks(weeks) -> DateSpan
        
        Returns a date span object corresponding to the given number of weeks.
    %End

    static
    wxDateSpan Year();
    %Docstring
        Year() -> DateSpan
        
        Returns a date span object corresponding to one year.
    %End

    static
    wxDateSpan Years(
        int years
    );
    %Docstring
        Years(years) -> DateSpan
        
        Returns a date span object corresponding to the given number of years.
    %End

            wxDateSpan& operator+=(const wxDateSpan& other);
            wxDateSpan operator+(const wxDateSpan& ds) const;
            wxDateSpan& operator-=(const wxDateSpan& other);
            wxDateSpan operator-(const wxDateSpan& ds) const;
            wxDateSpan& operator-();
            wxDateSpan& operator*=(int factor);
            wxDateSpan operator*(int n) const;
            bool operator==(const wxDateSpan& ds) const;
            bool operator!=(const wxDateSpan& ds) const;


};  // end of class wxDateSpan


class wxTimeSpan
{
    %Docstring
        TimeSpan()
        TimeSpan(hours, min=0, sec=0, msec=0)
        
        wxTimeSpan class represents a time interval.
    %End
    %TypeHeaderCode
        #include <wx/datetime.h>
    %End

public:
    wxTimeSpan();

    wxTimeSpan(
        long hours,
        long min = 0,
        wxLongLong sec = 0,
        wxLongLong msec = 0
    );

    wxTimeSpan Abs() const;
    %Docstring
        Abs() -> TimeSpan
        
        Returns the absolute value of the timespan: does not modify the
        object.
    %End

    wxTimeSpan & Add(
        const wxTimeSpan & diff
    );
    %Docstring
        Add(diff) -> TimeSpan
        
        Adds the given wxTimeSpan to this wxTimeSpan and returns a reference
        to itself.
    %End

    wxString Format(
        const wxString & format = wxDefaultTimeSpanFormat
    ) const;
    %Docstring
        Format(format=DefaultTimeSpanFormat) -> String
        
        Returns the string containing the formatted representation of the time
        span.
    %End

    int GetDays() const;
    %Docstring
        GetDays() -> int
        
        Returns the difference in number of days.
    %End

    int GetHours() const;
    %Docstring
        GetHours() -> int
        
        Returns the difference in number of hours.
    %End

    wxLongLong GetMilliseconds() const;
    %Docstring
        GetMilliseconds() -> LongLong
        
        Returns the difference in number of milliseconds.
    %End

    int GetMinutes() const;
    %Docstring
        GetMinutes() -> int
        
        Returns the difference in number of minutes.
    %End

    wxLongLong GetSeconds() const;
    %Docstring
        GetSeconds() -> LongLong
        
        Returns the difference in number of seconds.
    %End

    wxLongLong GetValue() const;
    %Docstring
        GetValue() -> LongLong
        
        Returns the internal representation of timespan.
    %End

    int GetWeeks() const;
    %Docstring
        GetWeeks() -> int
        
        Returns the difference in number of weeks.
    %End

    bool IsEqualTo(
        const wxTimeSpan & ts
    ) const;
    %Docstring
        IsEqualTo(ts) -> bool
        
        Returns true if two timespans are equal.
    %End

    bool IsLongerThan(
        const wxTimeSpan & ts
    ) const;
    %Docstring
        IsLongerThan(ts) -> bool
        
        Compares two timespans: works with the absolute values, i.e. -2 hours
        is longer than 1 hour.
    %End

    bool IsNegative() const;
    %Docstring
        IsNegative() -> bool
        
        Returns true if the timespan is negative.
    %End

    bool IsNull() const;
    %Docstring
        IsNull() -> bool
        
        Returns true if the timespan is empty.
    %End

    bool IsPositive() const;
    %Docstring
        IsPositive() -> bool
        
        Returns true if the timespan is positive.
    %End

    bool IsShorterThan(
        const wxTimeSpan & ts
    ) const;
    %Docstring
        IsShorterThan(ts) -> bool
        
        Compares two timespans: works with the absolute values, i.e. 1 hour is
        shorter than -2 hours.
    %End

    wxTimeSpan & Multiply(
        int n
    );
    %Docstring
        Multiply(n) -> TimeSpan
        
        Multiplies this time span by n.
    %End

    wxTimeSpan & Neg();
    %Docstring
        Neg() -> TimeSpan
        
        Negate the value of the timespan.
    %End

    wxTimeSpan Negate() const;
    %Docstring
        Negate() -> TimeSpan
        
        Returns timespan with inverted sign.
    %End

    wxTimeSpan & Subtract(
        const wxTimeSpan & diff
    );
    %Docstring
        Subtract(diff) -> TimeSpan
        
        Subtracts the given wxTimeSpan to this wxTimeSpan and returns a
        reference to itself.
    %End

    static
    wxTimeSpan Day();
    %Docstring
        Day() -> TimeSpan
        
        Returns the timespan for one day.
    %End

    static
    wxTimeSpan Days(
        long days
    );
    %Docstring
        Days(days) -> TimeSpan
        
        Returns the timespan for the given number of days.
    %End

    static
    wxTimeSpan Hour();
    %Docstring
        Hour() -> TimeSpan
        
        Returns the timespan for one hour.
    %End

    static
    wxTimeSpan Hours(
        long hours
    );
    %Docstring
        Hours(hours) -> TimeSpan
        
        Returns the timespan for the given number of hours.
    %End

    static
    wxTimeSpan Millisecond();
    %Docstring
        Millisecond() -> TimeSpan
        
        Returns the timespan for one millisecond.
    %End

    static
    wxTimeSpan Milliseconds(
        wxLongLong ms
    );
    %Docstring
        Milliseconds(ms) -> TimeSpan
        
        Returns the timespan for the given number of milliseconds.
    %End

    static
    wxTimeSpan Minute();
    %Docstring
        Minute() -> TimeSpan
        
        Returns the timespan for one minute.
    %End

    static
    wxTimeSpan Minutes(
        long min
    );
    %Docstring
        Minutes(min) -> TimeSpan
        
        Returns the timespan for the given number of minutes.
    %End

    static
    wxTimeSpan Second();
    %Docstring
        Second() -> TimeSpan
        
        Returns the timespan for one second.
    %End

    static
    wxTimeSpan Seconds(
        wxLongLong sec
    );
    %Docstring
        Seconds(sec) -> TimeSpan
        
        Returns the timespan for the given number of seconds.
    %End

    static
    wxTimeSpan Week();
    %Docstring
        Week() -> TimeSpan
        
        Returns the timespan for one week.
    %End

    static
    wxTimeSpan Weeks(
        long weeks
    );
    %Docstring
        Weeks(weeks) -> TimeSpan
        
        Returns the timespan for the given number of weeks.
    %End

            wxTimeSpan& operator+=(const wxTimeSpan& diff);
            wxTimeSpan operator+(const wxTimeSpan& ts) const;
            wxTimeSpan& operator-=(const wxTimeSpan& diff);
            wxTimeSpan operator-(const wxTimeSpan& ts);
            wxTimeSpan& operator*=(int n);
            wxTimeSpan operator*(int n) const;
            wxTimeSpan& operator-();
            bool operator<(const wxTimeSpan &ts) const;
            bool operator<=(const wxTimeSpan &ts) const;
            bool operator>(const wxTimeSpan &ts) const;
            bool operator>=(const wxTimeSpan &ts) const;
            bool operator==(const wxTimeSpan &ts) const;
            bool operator!=(const wxTimeSpan &ts) const;


};  // end of class wxTimeSpan


const wxDateTime wxDefaultDateTime;

%Extract(id=pycode_core)
InvalidDateTime = DefaultDateTime

%End

%Extract(id=pycode_core)
@wx.deprecatedMsg("Use :meth:`DateTime.FromTimeT` instead.")
def DateTimeFromTimeT(timet):
    """
    Compatibility wrapper for :meth:`DateTime.FromTimeT`
    """
    return DateTime.FromTimeT(timet)

%End

%Extract(id=pycode_core)
@wx.deprecatedMsg("Use :meth:`DateTime.FromJDN` instead.")
def DateTimeFromJDN(jdn):
    """
    Compatibility wrapper for :meth:`DateTime.FromJDN`
    """
    return DateTime.FromJDN(jdn)

%End

%Extract(id=pycode_core)
@wx.deprecatedMsg("Use :meth:`DateTime.FromHMS` instead.")
def DateTimeFromHMS(hour, minute=0, second=0, millisecond=0):
    """
    Compatibility wrapper for :meth:`DateTime.FromHMS`
    """
    return DateTime.FromHMS(hour, minute, second, millisecond)

%End

%Extract(id=pycode_core)
@wx.deprecatedMsg("Use :meth:`DateTime.FromDMY` instead.")
def DateTimeFromDMY(day, month, year=DateTime.Inv_Year, hour=0, minute=0, second=0, millisecond=0):
    """
    Compatibility wrapper for :meth:`DateTime.FromDMY`
    """
    return DateTime.FromDMY(day, month, year, hour, minute, second, millisecond)

%End

%Extract(id=pycode_core)
def pydate2wxdate(date):
    """
    Convert a Python date or datetime to a :class:`DateTime` object
    """
    import datetime
    assert isinstance(date, (datetime.datetime, datetime.date))
    return DateTime(date)  # the built-in typemap will convert it for us

%End

%Extract(id=pycode_core)
def wxdate2pydate(date):
    """
    Convert a :class:`DateTime` object to a Python datetime.
    """
    import datetime
    assert isinstance(date, DateTime)
    if date.IsValid():
        return datetime.datetime(date.year, date.month+1, date.day,
                                 date.hour, date.minute, date.second, date.millisecond*1000)
    else:
        return None

%End


//---------------------------------------------------------------------------

