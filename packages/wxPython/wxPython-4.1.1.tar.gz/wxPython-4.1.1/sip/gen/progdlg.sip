//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/progdlg.h>
%End


//---------------------------------------------------------------------------

const int wxPD_CAN_ABORT;
const int wxPD_APP_MODAL;
const int wxPD_AUTO_HIDE;
const int wxPD_ELAPSED_TIME;
const int wxPD_ESTIMATED_TIME;
const int wxPD_SMOOTH;
const int wxPD_REMAINING_TIME;
const int wxPD_CAN_SKIP;
class wxGenericProgressDialog : wxDialog
{
    %Docstring
        GenericProgressDialog(title, message, maximum=100, parent=None, style=PD_AUTO_HIDE|PD_APP_MODAL)
        
        This class represents a dialog that shows a short message and a
        progress bar.
    %End
    %TypeHeaderCode
        #include <wx/progdlg.h>
    %End

public:
    wxGenericProgressDialog(
        const wxString & title,
        const wxString & message,
        int maximum = 100,
        wxWindow * parent   /TransferThis/ = NULL,
        int style = wxPD_AUTO_HIDE|wxPD_APP_MODAL
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxGenericProgressDialog();

    int GetValue() const;
    %Docstring
        GetValue() -> int
        
        Returns the last value passed to the Update() function or wxNOT_FOUND
        if the dialog has no progress bar.
    %End

    int GetRange() const;
    %Docstring
        GetRange() -> int
        
        Returns the maximum value of the progress meter, as passed to the
        constructor or wxNOT_FOUND if the dialog has no progress bar.
    %End

    wxString GetMessage() const;
    %Docstring
        GetMessage() -> String
        
        Returns the last message passed to the Update() function; if you
        always passed wxEmptyString to Update() then the message set through
        the constructor is returned.
    %End

    bool Pulse(
        const wxString & newmsg = wxEmptyString,
        bool * skip   /Out/ = NULL
    );
    %Docstring
        Pulse(newmsg=EmptyString) -> (bool, skip)
        
        Like Update() but makes the gauge control run in indeterminate mode.
    %End

    void Resume();
    %Docstring
        Resume()
        
        Can be used to continue with the dialog, after the user had clicked
        the "Abort" button.
    %End

    void SetRange(
        int maximum
    );
    %Docstring
        SetRange(maximum)
        
        Changes the maximum value of the progress meter given in the
        constructor.
    %End

    bool WasCancelled() const;
    %Docstring
        WasCancelled() -> bool
        
        Returns true if the "Cancel" button was pressed.
    %End

    bool WasSkipped() const;
    %Docstring
        WasSkipped() -> bool
        
        Returns true if the "Skip" button was pressed.
    %End

    bool Update(
        int value,
        const wxString & newmsg = wxEmptyString,
        bool * skip   /Out/ = NULL
    );
    %Docstring
        Update(value, newmsg=EmptyString) -> (bool, skip)
        
        Updates the dialog, setting the progress bar to the new value and
        updating the message if new one is specified.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Message, get=GetMessage)
    %Property(name=Range, get=GetRange, set=SetRange)
    %Property(name=Value, get=GetValue)
};  // end of class wxGenericProgressDialog


class wxProgressDialog : wxGenericProgressDialog
{
    %Docstring
        ProgressDialog(title, message, maximum=100, parent=None, style=PD_APP_MODAL|PD_AUTO_HIDE)
        
        If supported by the platform this class will provide the platform's
        native progress dialog, else it will simply be the
        wxGenericProgressDialog.
    %End
    %TypeHeaderCode
        #include <wx/progdlg.h>
    %End

public:
    wxProgressDialog(
        const wxString & title,
        const wxString & message,
        int maximum = 100,
        wxWindow * parent   /TransferThis/ = NULL,
        int style = wxPD_APP_MODAL|wxPD_AUTO_HIDE
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    int GetValue() const;
    %Docstring
        GetValue() -> int
        
        Returns the last value passed to the Update() function or wxNOT_FOUND
        if the dialog has no progress bar.
    %End

    int GetRange() const;
    %Docstring
        GetRange() -> int
        
        Returns the maximum value of the progress meter, as passed to the
        constructor or wxNOT_FOUND if the dialog has no progress bar.
    %End

    wxString GetMessage() const;
    %Docstring
        GetMessage() -> String
        
        Returns the last message passed to the Update() function; if you
        always passed wxEmptyString to Update() then the message set through
        the constructor is returned.
    %End

    bool Pulse(
        const wxString & newmsg = wxEmptyString,
        bool * skip   /Out/ = NULL
    );
    %Docstring
        Pulse(newmsg=EmptyString) -> (bool, skip)
        
        Like Update() but makes the gauge control run in indeterminate mode.
    %End

    void Resume();
    %Docstring
        Resume()
        
        Can be used to continue with the dialog, after the user had clicked
        the "Abort" button.
    %End

    void SetRange(
        int maximum
    );
    %Docstring
        SetRange(maximum)
        
        Changes the maximum value of the progress meter given in the
        constructor.
    %End

    bool WasCancelled() const;
    %Docstring
        WasCancelled() -> bool
        
        Returns true if the "Cancel" button was pressed.
    %End

    bool WasSkipped() const;
    %Docstring
        WasSkipped() -> bool
        
        Returns true if the "Skip" button was pressed.
    %End

    bool Update(
        int value,
        const wxString & newmsg = wxEmptyString,
        bool * skip   /Out/ = NULL
    );
    %Docstring
        Update(value, newmsg=EmptyString) -> (bool, skip)
        
        Updates the dialog, setting the progress bar to the new value and
        updating the message if new one is specified.
    %End

    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    public:


    %Property(name=Message, get=GetMessage)
    %Property(name=Range, get=GetRange, set=SetRange)
    %Property(name=Value, get=GetValue)
};  // end of class wxProgressDialog



//---------------------------------------------------------------------------

