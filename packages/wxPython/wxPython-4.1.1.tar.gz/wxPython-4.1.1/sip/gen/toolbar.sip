//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

enum wxToolBarToolStyle
{
    wxTOOL_STYLE_BUTTON,
    wxTOOL_STYLE_SEPARATOR,
    wxTOOL_STYLE_CONTROL
};

enum 
{
    wxTB_HORIZONTAL,
    wxTB_TOP,
    wxTB_VERTICAL,
    wxTB_LEFT,
    wxTB_FLAT,
    wxTB_DOCKABLE,
    wxTB_NOICONS,
    wxTB_TEXT,
    wxTB_NODIVIDER,
    wxTB_NOALIGN,
    wxTB_HORZ_LAYOUT,
    wxTB_HORZ_TEXT,
    wxTB_NO_TOOLTIPS,
    wxTB_BOTTOM,
    wxTB_RIGHT,
    wxTB_DEFAULT_STYLE
};

class wxToolBarToolBase : wxObject   /Abstract/
{
    %Docstring
        ToolBarToolBase(tbar=None, toolid=ID_SEPARATOR, label=EmptyString, bmpNormal=NullBitmap, bmpDisabled=NullBitmap, kind=ITEM_NORMAL, clientData=None, shortHelpString=EmptyString, longHelpString=EmptyString)
        ToolBarToolBase(tbar, control, label)
        
        A toolbar tool represents one item on the toolbar.
    %End
    %TypeHeaderCode
        #include <wx/toolbar.h>
    %End

public:
    wxToolBarToolBase(
        wxToolBar* tbar = NULL,
        int toolid = wxID_SEPARATOR,
        const wxString & label = wxEmptyString,
        const wxBitmap & bmpNormal = wxNullBitmap,
        const wxBitmap & bmpDisabled = wxNullBitmap,
        wxItemKind kind = wxITEM_NORMAL,
        wxPyUserData* clientData   /Transfer/ = NULL,
        const wxString & shortHelpString = wxEmptyString,
        const wxString & longHelpString = wxEmptyString
    );

    wxToolBarToolBase(
        wxToolBar* tbar,
        wxControl * control,
        const wxString & label
    );

    int GetId() const;
    %Docstring
        GetId() -> int
    %End

    wxControl * GetControl() const;
    %Docstring
        GetControl() -> Control
    %End

    wxToolBar* GetToolBar();
    %Docstring
        GetToolBar() -> ToolBar
        
        Return the toolbar this tool is a member of.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxToolBarToolBase_GetToolBar(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxToolBar* _wxToolBarToolBase_GetToolBar(wxToolBarToolBase* self)
    {
        return (wxToolBar*)self->GetToolBar();
    }
    %End

    bool IsStretchable() const;
    %Docstring
        IsStretchable() -> bool
    %End

    bool IsButton() const;
    %Docstring
        IsButton() -> bool
    %End

    bool IsControl() const;
    %Docstring
        IsControl() -> bool
    %End

    bool IsSeparator() const;
    %Docstring
        IsSeparator() -> bool
    %End

    bool IsStretchableSpace() const;
    %Docstring
        IsStretchableSpace() -> bool
    %End

    int GetStyle() const;
    %Docstring
        GetStyle() -> int
    %End

    wxItemKind GetKind() const;
    %Docstring
        GetKind() -> ItemKind
    %End

    void MakeStretchable();
    %Docstring
        MakeStretchable()
    %End

    bool IsEnabled() const;
    %Docstring
        IsEnabled() -> bool
    %End

    bool IsToggled() const;
    %Docstring
        IsToggled() -> bool
    %End

    bool CanBeToggled() const;
    %Docstring
        CanBeToggled() -> bool
    %End

    const wxBitmap & GetNormalBitmap() const;
    %Docstring
        GetNormalBitmap() -> Bitmap
    %End

    const wxBitmap & GetDisabledBitmap() const;
    %Docstring
        GetDisabledBitmap() -> Bitmap
    %End

    const wxBitmap & GetBitmap() const;
    %Docstring
        GetBitmap() -> Bitmap
    %End

    const wxString & GetLabel() const;
    %Docstring
        GetLabel() -> String
    %End

    const wxString & GetShortHelp() const;
    %Docstring
        GetShortHelp() -> String
    %End

    const wxString & GetLongHelp() const;
    %Docstring
        GetLongHelp() -> String
    %End

    wxPyUserData* GetClientData() const;
    %Docstring
        GetClientData() -> PyUserData
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxToolBarToolBase_GetClientData(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxPyUserData* _wxToolBarToolBase_GetClientData(const wxToolBarToolBase* self)
    {
        return dynamic_cast<wxPyUserData*>(self->GetClientData());
    }
    %End

    bool Enable(
        bool enable
    );
    %Docstring
        Enable(enable) -> bool
    %End

    bool Toggle(
        bool toggle
    );
    %Docstring
        Toggle(toggle) -> bool
        Toggle()
    %End

    void Toggle();

    bool SetToggle(
        bool toggle
    );
    %Docstring
        SetToggle(toggle) -> bool
    %End

    bool SetShortHelp(
        const wxString & help
    );
    %Docstring
        SetShortHelp(help) -> bool
    %End

    bool SetLongHelp(
        const wxString & help
    );
    %Docstring
        SetLongHelp(help) -> bool
    %End

    void SetNormalBitmap(
        const wxBitmap & bmp
    );
    %Docstring
        SetNormalBitmap(bmp)
    %End

    void SetDisabledBitmap(
        const wxBitmap & bmp
    );
    %Docstring
        SetDisabledBitmap(bmp)
    %End

    void SetLabel(
        const wxString & label
    );
    %Docstring
        SetLabel(label)
    %End

    void SetClientData(
        wxPyUserData* clientData   /Transfer/
    );
    %Docstring
        SetClientData(clientData)
    %End

    void Detach();
    %Docstring
        Detach()
    %End

    void Attach(
        wxToolBar* tbar
    );
    %Docstring
        Attach(tbar)
    %End

    void SetDropdownMenu(
        wxMenu * menu   /Transfer/
    );
    %Docstring
        SetDropdownMenu(menu)
    %End

    wxMenu * GetDropdownMenu() const;
    %Docstring
        GetDropdownMenu() -> Menu
    %End

    public:


    %Property(name=Bitmap, get=GetBitmap)
    %Property(name=ClientData, get=GetClientData, set=SetClientData)
    %Property(name=Control, get=GetControl)
    %Property(name=DisabledBitmap, get=GetDisabledBitmap, set=SetDisabledBitmap)
    %Property(name=DropdownMenu, get=GetDropdownMenu, set=SetDropdownMenu)
    %Property(name=Id, get=GetId)
    %Property(name=Kind, get=GetKind)
    %Property(name=Label, get=GetLabel, set=SetLabel)
    %Property(name=LongHelp, get=GetLongHelp, set=SetLongHelp)
    %Property(name=NormalBitmap, get=GetNormalBitmap, set=SetNormalBitmap)
    %Property(name=ShortHelp, get=GetShortHelp, set=SetShortHelp)
    %Property(name=Style, get=GetStyle)
    %Property(name=ToolBar, get=GetToolBar)
};  // end of class wxToolBarToolBase


const char* wxToolBarNameStr;

class wxToolBar : wxControl
{
    %Docstring
        ToolBar()
        ToolBar(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=TB_HORIZONTAL, name=ToolBarNameStr)
        
        A toolbar is a bar of buttons and/or other controls usually placed
        below the menu bar in a wxFrame.
    %End
    %TypeHeaderCode
        #include <wx/toolbar.h>
    %End

public:
    wxToolBar();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxToolBar(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxTB_HORIZONTAL,
        const wxString & name = wxToolBarNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxToolBar();

    wxToolBarToolBase * AddTool(
        wxToolBarToolBase * tool   /Transfer/
    );
    %Docstring
        AddTool(tool) -> ToolBarToolBase
        AddTool(toolId, label, bitmap, shortHelp=EmptyString, kind=ITEM_NORMAL) -> ToolBarToolBase
        AddTool(toolId, label, bitmap, bmpDisabled, kind=ITEM_NORMAL, shortHelp=EmptyString, longHelp=EmptyString, clientData=None) -> ToolBarToolBase
        
        Adds a tool to the toolbar.
    %End

    wxToolBarToolBase * AddTool(
        int toolId,
        const wxString & label,
        const wxBitmap & bitmap,
        const wxString & shortHelp = wxEmptyString,
        wxItemKind kind = wxITEM_NORMAL
    );

    wxToolBarToolBase * AddTool(
        int toolId,
        const wxString & label,
        const wxBitmap & bitmap,
        const wxBitmap & bmpDisabled,
        wxItemKind kind = wxITEM_NORMAL,
        const wxString & shortHelp = wxEmptyString,
        const wxString & longHelp = wxEmptyString,
        wxPyUserData* clientData   /Transfer/ = NULL
    );

    wxToolBarToolBase * InsertTool(
        size_t pos,
        int toolId,
        const wxString & label,
        const wxBitmap & bitmap,
        const wxBitmap & bmpDisabled = wxNullBitmap,
        wxItemKind kind = wxITEM_NORMAL,
        const wxString & shortHelp = wxEmptyString,
        const wxString & longHelp = wxEmptyString,
        wxPyUserData* clientData   /Transfer/ = NULL
    );
    %Docstring
        InsertTool(pos, toolId, label, bitmap, bmpDisabled=NullBitmap, kind=ITEM_NORMAL, shortHelp=EmptyString, longHelp=EmptyString, clientData=None) -> ToolBarToolBase
        InsertTool(pos, tool) -> ToolBarToolBase
        
        Inserts the tool with the specified attributes into the toolbar at the
        given position.
    %End

    wxToolBarToolBase * InsertTool(
        size_t pos,
        wxToolBarToolBase * tool   /Transfer/
    );

    void SetMargins(
        int x,
        int y
    );
    %Docstring
        SetMargins(x, y)
        SetMargins(size)
        
        Set the values to be used as margins for the toolbar.
    %End

    void SetMargins(
        const wxSize & size
    );

    wxToolBarToolBase * AddCheckTool(
        int toolId,
        const wxString & label,
        const wxBitmap & bitmap1,
        const wxBitmap & bmpDisabled = wxNullBitmap,
        const wxString & shortHelp = wxEmptyString,
        const wxString & longHelp = wxEmptyString,
        wxPyUserData* clientData   /Transfer/ = NULL
    );
    %Docstring
        AddCheckTool(toolId, label, bitmap1, bmpDisabled=NullBitmap, shortHelp=EmptyString, longHelp=EmptyString, clientData=None) -> ToolBarToolBase
        
        Adds a new check (or toggle) tool to the toolbar.
    %End

    wxToolBarToolBase * AddControl(
        wxControl * control,
        const wxString & label = wxEmptyString
    );
    %Docstring
        AddControl(control, label=EmptyString) -> ToolBarToolBase
        
        Adds any control to the toolbar, typically e.g. a wxComboBox.
    %End

    wxToolBarToolBase * AddRadioTool(
        int toolId,
        const wxString & label,
        const wxBitmap & bitmap1,
        const wxBitmap & bmpDisabled = wxNullBitmap,
        const wxString & shortHelp = wxEmptyString,
        const wxString & longHelp = wxEmptyString,
        wxPyUserData* clientData   /Transfer/ = NULL
    );
    %Docstring
        AddRadioTool(toolId, label, bitmap1, bmpDisabled=NullBitmap, shortHelp=EmptyString, longHelp=EmptyString, clientData=None) -> ToolBarToolBase
        
        Adds a new radio tool to the toolbar.
    %End

    wxToolBarToolBase * AddSeparator();
    %Docstring
        AddSeparator() -> ToolBarToolBase
        
        Adds a separator for spacing groups of tools.
    %End

    wxToolBarToolBase * AddStretchableSpace();
    %Docstring
        AddStretchableSpace() -> ToolBarToolBase
        
        Adds a stretchable space to the toolbar.
    %End

    void ClearTools();
    %Docstring
        ClearTools()
        
        Deletes all the tools in the toolbar.
    %End

    bool DeleteTool(
        int toolId
    );
    %Docstring
        DeleteTool(toolId) -> bool
        
        Removes the specified tool from the toolbar and deletes it.
    %End

    bool DeleteToolByPos(
        size_t pos
    );
    %Docstring
        DeleteToolByPos(pos) -> bool
        
        This function behaves like DeleteTool() but it deletes the tool at the
        specified position and not the one with the given id.
    %End

    void EnableTool(
        int toolId,
        bool enable
    );
    %Docstring
        EnableTool(toolId, enable)
        
        Enables or disables the tool.
    %End

    wxToolBarToolBase * FindById(
        int id
    ) const;
    %Docstring
        FindById(id) -> ToolBarToolBase
        
        Returns a pointer to the tool identified by id or NULL if no
        corresponding tool is found.
    %End

    wxControl * FindControl(
        int id
    );
    %Docstring
        FindControl(id) -> Control
        
        Returns a pointer to the control identified by id or NULL if no
        corresponding control is found.
    %End

    wxToolBarToolBase * FindToolForPosition(
        wxCoord x,
        wxCoord y
    ) const;
    %Docstring
        FindToolForPosition(x, y) -> ToolBarToolBase
        
        Finds a tool for the given mouse position.
    %End

    wxSize GetMargins() const;
    %Docstring
        GetMargins() -> Size
        
        Returns the left/right and top/bottom margins, which are also used for
        inter-toolspacing.
    %End

    wxSize GetToolBitmapSize() const;
    %Docstring
        GetToolBitmapSize() -> Size
        
        Returns the size of bitmap that the toolbar expects to have.
    %End

    wxToolBarToolBase * GetToolByPos(
        int pos
    );
    %Docstring
        GetToolByPos(pos) -> ToolBarToolBase
        
        Returns a pointer to the tool at ordinal position pos.
    %End

    wxPyUserData* GetToolClientData(
        int toolId
    ) const;
    %Docstring
        GetToolClientData(toolId) -> PyUserData
        
        Get any client data associated with the tool.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxToolBar_GetToolClientData(sipCpp, toolId);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxPyUserData* _wxToolBar_GetToolClientData(const wxToolBar* self, int toolId)
    {
        return dynamic_cast<wxPyUserData*>(self->GetToolClientData(toolId));
    }
    %End

    bool GetToolEnabled(
        int toolId
    ) const;
    %Docstring
        GetToolEnabled(toolId) -> bool
        
        Called to determine whether a tool is enabled (responds to user
        input).
    %End

    wxString GetToolLongHelp(
        int toolId
    ) const;
    %Docstring
        GetToolLongHelp(toolId) -> String
        
        Returns the long help for the given tool.
    %End

    int GetToolPacking() const;
    %Docstring
        GetToolPacking() -> int
        
        Returns the value used for packing tools.
    %End

    int GetToolPos(
        int toolId
    ) const;
    %Docstring
        GetToolPos(toolId) -> int
        
        Returns the tool position in the toolbar, or wxNOT_FOUND if the tool
        is not found.
    %End

    int GetToolSeparation() const;
    %Docstring
        GetToolSeparation() -> int
        
        Returns the default separator size.
    %End

    wxString GetToolShortHelp(
        int toolId
    ) const;
    %Docstring
        GetToolShortHelp(toolId) -> String
        
        Returns the short help for the given tool.
    %End

    wxSize GetToolSize() const;
    %Docstring
        GetToolSize() -> Size
        
        Returns the size of a whole button, which is usually larger than a
        tool bitmap because of added 3D effects.
    %End

    bool GetToolState(
        int toolId
    ) const;
    %Docstring
        GetToolState(toolId) -> bool
        
        Gets the on/off state of a toggle tool.
    %End

    size_t GetToolsCount() const;
    %Docstring
        GetToolsCount() -> size_t
        
        Returns the number of tools in the toolbar.
    %End

    wxToolBarToolBase * InsertControl(
        size_t pos,
        wxControl * control,
        const wxString & label = wxEmptyString
    );
    %Docstring
        InsertControl(pos, control, label=EmptyString) -> ToolBarToolBase
        
        Inserts the control into the toolbar at the given position.
    %End

    wxToolBarToolBase * InsertSeparator(
        size_t pos
    );
    %Docstring
        InsertSeparator(pos) -> ToolBarToolBase
        
        Inserts the separator into the toolbar at the given position.
    %End

    wxToolBarToolBase * InsertStretchableSpace(
        size_t pos
    );
    %Docstring
        InsertStretchableSpace(pos) -> ToolBarToolBase
        
        Inserts a stretchable space at the given position.
    %End

    bool Realize();
    %Docstring
        Realize() -> bool
        
        This function should be called after you have added tools.
    %End

    wxToolBarToolBase * RemoveTool(
        int id
    );
    %Docstring
        RemoveTool(id) -> ToolBarToolBase
        
        Removes the given tool from the toolbar but doesn't delete it.
    %End

    bool SetDropdownMenu(
        int id,
        wxMenu * menu   /Transfer/
    );
    %Docstring
        SetDropdownMenu(id, menu) -> bool
        
        Sets the dropdown menu for the tool given by its id.
    %End

    void SetToolBitmapSize(
        const wxSize & size
    );
    %Docstring
        SetToolBitmapSize(size)
        
        Sets the default size of each tool bitmap.
    %End

    void SetToolClientData(
        int id,
        wxPyUserData* clientData   /Transfer/
    );
    %Docstring
        SetToolClientData(id, clientData)
        
        Sets the client data associated with the tool.
    %End

    void SetToolDisabledBitmap(
        int id,
        const wxBitmap & bitmap
    );
    %Docstring
        SetToolDisabledBitmap(id, bitmap)
        
        Sets the bitmap to be used by the tool with the given ID when the tool
        is in a disabled state.
    %End

    void SetToolLongHelp(
        int toolId,
        const wxString & helpString
    );
    %Docstring
        SetToolLongHelp(toolId, helpString)
        
        Sets the long help for the given tool.
    %End

    void SetToolNormalBitmap(
        int id,
        const wxBitmap & bitmap
    );
    %Docstring
        SetToolNormalBitmap(id, bitmap)
        
        Sets the bitmap to be used by the tool with the given ID.
    %End

    void SetToolPacking(
        int packing
    );
    %Docstring
        SetToolPacking(packing)
        
        Sets the value used for spacing tools.
    %End

    void SetToolSeparation(
        int separation
    );
    %Docstring
        SetToolSeparation(separation)
        
        Sets the default separator size.
    %End

    void SetToolShortHelp(
        int toolId,
        const wxString & helpString
    );
    %Docstring
        SetToolShortHelp(toolId, helpString)
        
        Sets the short help for the given tool.
    %End

    void ToggleTool(
        int toolId,
        bool toggle
    );
    %Docstring
        ToggleTool(toolId, toggle)
        
        Toggles a tool on or off.
    %End

    wxToolBarToolBase * CreateTool(
        int toolId,
        const wxString & label,
        const wxBitmap & bmpNormal,
        const wxBitmap & bmpDisabled = wxNullBitmap,
        wxItemKind kind = wxITEM_NORMAL,
        wxPyUserData* clientData   /Transfer/ = NULL,
        const wxString & shortHelp = wxEmptyString,
        const wxString & longHelp = wxEmptyString
    );
    %Docstring
        CreateTool(toolId, label, bmpNormal, bmpDisabled=NullBitmap, kind=ITEM_NORMAL, clientData=None, shortHelp=EmptyString, longHelp=EmptyString) -> ToolBarToolBase
        CreateTool(control, label) -> ToolBarToolBase
        
        Factory function to create a new toolbar tool.
    %End

    wxToolBarToolBase * CreateTool(
        wxControl * control,
        const wxString & label
    );

    wxToolBarToolBase * CreateSeparator();
    %Docstring
        CreateSeparator() -> ToolBarToolBase
        
        Factory function to create a new separator toolbar tool.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Margins, get=GetMargins, set=SetMargins)
    %Property(name=ToolBitmapSize, get=GetToolBitmapSize, set=SetToolBitmapSize)
    %Property(name=ToolPacking, get=GetToolPacking, set=SetToolPacking)
    %Property(name=ToolSeparation, get=GetToolSeparation, set=SetToolSeparation)
    %Property(name=ToolSize, get=GetToolSize)
    %Property(name=ToolsCount, get=GetToolsCount)
};  // end of class wxToolBar


%Extract(id=pycode_core)
def _ToolBar_AddSimpleTool(self, toolId, bitmap, shortHelpString="", longHelpString="", isToggle=0):
    """
    Old style method to add a tool to the toolbar.
    """
    kind = wx.ITEM_NORMAL
    if isToggle: kind = wx.ITEM_CHECK
    return self.AddTool(toolId, '', bitmap, wx.NullBitmap, kind,
                        shortHelpString, longHelpString)
ToolBar.AddSimpleTool = wx.deprecated(_ToolBar_AddSimpleTool, "Use :meth:`AddTool` instead.")
del _ToolBar_AddSimpleTool
%End

%Extract(id=pycode_core)
def _ToolBar_AddLabelTool(self, id, label, bitmap, bmpDisabled=wx.NullBitmap, kind=wx.ITEM_NORMAL, shortHelp="", longHelp="", clientData=None):
    """
    Old style method to add a tool in the toolbar.
    """
    return self.AddTool(id, label, bitmap, bmpDisabled, kind,
                        shortHelp, longHelp, clientData)
ToolBar.AddLabelTool = wx.deprecated(_ToolBar_AddLabelTool, "Use :meth:`AddTool` instead.")
del _ToolBar_AddLabelTool
%End

%Extract(id=pycode_core)
def _ToolBar_InsertSimpleTool(self, pos, toolId, bitmap, shortHelpString="", longHelpString="", isToggle=0):
    """
    Old style method to insert a tool in the toolbar.
    """
    kind = wx.ITEM_NORMAL
    if isToggle: kind = wx.ITEM_CHECK
    return self.InsertTool(pos, toolId, '', bitmap, wx.NullBitmap, kind,
                           shortHelpString, longHelpString)
ToolBar.InsertSimpleTool = wx.deprecated(_ToolBar_InsertSimpleTool, "Use :meth:`InsertTool` instead.")
del _ToolBar_InsertSimpleTool
%End

%Extract(id=pycode_core)
def _ToolBar_InsertLabelTool(self, pos, id, label, bitmap, bmpDisabled=wx.NullBitmap, kind=wx.ITEM_NORMAL, shortHelp="", longHelp="", clientData=None):
    """
    Old style method to insert a tool in the toolbar.
    """
    return self.InsertTool(pos, id, label, bitmap, bmpDisabled, kind,
                           shortHelp, longHelp, clientData)
ToolBar.InsertLabelTool = wx.deprecated(_ToolBar_InsertLabelTool, "Use :meth:`InsertTool` instead.")
del _ToolBar_InsertLabelTool
%End


//---------------------------------------------------------------------------

