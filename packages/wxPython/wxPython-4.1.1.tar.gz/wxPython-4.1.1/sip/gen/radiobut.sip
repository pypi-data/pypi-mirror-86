//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const char* wxRadioButtonNameStr;

class wxRadioButton : wxControl
{
    %Docstring
        RadioButton()
        RadioButton(parent, id=ID_ANY, label=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=RadioButtonNameStr)
        
        A radio button item is a button which usually denotes one of several
        mutually exclusive options.
    %End
    %TypeHeaderCode
        #include <wx/radiobut.h>
    %End

public:
    wxRadioButton();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxRadioButton(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & label = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxRadioButtonNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxRadioButton();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & label = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxRadioButtonNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, label=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=RadioButtonNameStr) -> bool
        
        Creates the choice for two-step construction.
    %End

    bool GetValue() const;
    %Docstring
        GetValue() -> bool
        
        Returns true if the radio button is checked, false otherwise.
    %End

    void SetValue(
        bool value
    );
    %Docstring
        SetValue(value)
        
        Sets the radio button to checked or unchecked status.
    %End

    wxRadioButton * GetFirstInGroup() const;
    %Docstring
        GetFirstInGroup() -> RadioButton
        
        Returns the first button of the radio button group this button belongs
        to.
    %End

    wxRadioButton * GetLastInGroup() const;
    %Docstring
        GetLastInGroup() -> RadioButton
        
        Returns the last button of the radio button group this button belongs
        to.
    %End

    wxRadioButton * GetPreviousInGroup() const;
    %Docstring
        GetPreviousInGroup() -> RadioButton
        
        Returns the previous radio button in the same group.
    %End

    wxRadioButton * GetNextInGroup() const;
    %Docstring
        GetNextInGroup() -> RadioButton
        
        Returns the next radio button in the same group.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=FirstInGroup, get=GetFirstInGroup)
    %Property(name=LastInGroup, get=GetLastInGroup)
    %Property(name=NextInGroup, get=GetNextInGroup)
    %Property(name=PreviousInGroup, get=GetPreviousInGroup)
    %Property(name=Value, get=GetValue, set=SetValue)
};  // end of class wxRadioButton



//---------------------------------------------------------------------------

