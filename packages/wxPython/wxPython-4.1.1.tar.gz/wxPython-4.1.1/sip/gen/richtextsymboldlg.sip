//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _richtext.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxSymbolPickerDialog : wxDialog
{
    %Docstring
        SymbolPickerDialog()
        SymbolPickerDialog(symbol, initialFont, normalTextFont, parent, id=wx.ID_ANY, title=_("Symbols"), pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.CLOSE_BOX)
        
        wxSymbolPickerDialog presents the user with a choice of fonts and a
        grid of available characters.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextsymboldlg.h>
    %End

public:
    wxSymbolPickerDialog();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxSymbolPickerDialog(
        const wxString & symbol,
        const wxString & initialFont,
        const wxString & normalTextFont,
        wxWindow * parent,
        wxWindowID id = wxID_ANY,
        const wxString & title = _("Symbols"),
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxCLOSE_BOX
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        const wxString & symbol,
        const wxString & initialFont,
        const wxString & normalTextFont,
        wxWindow * parent,
        wxWindowID id = wxID_ANY,
        const wxString & caption = wxGetTranslation("Symbols"),
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxSize(400, 300),
        long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxCLOSE_BOX
    )   /TransferThis/;
    %Docstring
        Create(symbol, initialFont, normalTextFont, parent, id=wx.ID_ANY, caption=wx.GetTranslation("Symbols"), pos=wx.DefaultPosition, size=wx.Size(400,300), style=wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.CLOSE_BOX) -> bool
        
        Creation: see the constructor for details about the parameters.
    %End

    wxString GetFontName() const;
    %Docstring
        GetFontName() -> String
        
        Returns the font name (the font reflected in the font list).
    %End

    bool GetFromUnicode() const;
    %Docstring
        GetFromUnicode() -> bool
        
        Returns true if the dialog is showing the full range of Unicode
        characters.
    %End

    wxString GetNormalTextFontName() const;
    %Docstring
        GetNormalTextFontName() -> String
        
        Gets the font name used for displaying symbols in the absence of a
        selected font.
    %End

    wxString GetSymbol() const;
    %Docstring
        GetSymbol() -> String
        
        Gets the current or initial symbol as a string.
    %End

    int GetSymbolChar() const;
    %Docstring
        GetSymbolChar() -> int
        
        Gets the selected symbol character as an integer.
    %End

    bool HasSelection() const;
    %Docstring
        HasSelection() -> bool
        
        Returns true if a symbol is selected.
    %End

    void SetFontName(
        wxString value
    );
    %Docstring
        SetFontName(value)
        
        Sets the initial/selected font name.
    %End

    void SetFromUnicode(
        bool value
    );
    %Docstring
        SetFromUnicode(value)
        
        Sets the internal flag indicating that the full Unicode range should
        be displayed.
    %End

    void SetNormalTextFontName(
        wxString value
    );
    %Docstring
        SetNormalTextFontName(value)
        
        Sets the name of the font to be used in the absence of a selected
        font.
    %End

    void SetSymbol(
        wxString value
    );
    %Docstring
        SetSymbol(value)
        
        Sets the symbol as a one or zero character string.
    %End

    void SetUnicodeMode(
        bool unicodeMode
    );
    %Docstring
        SetUnicodeMode(unicodeMode)
        
        Sets Unicode display mode.
    %End

    bool UseNormalFont() const;
    %Docstring
        UseNormalFont() -> bool
        
        Returns true if the has specified normal text - that is, there is no
        selected font.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=FontName, get=GetFontName, set=SetFontName)
    %Property(name=FromUnicode, get=GetFromUnicode, set=SetFromUnicode)
    %Property(name=NormalTextFontName, get=GetNormalTextFontName, set=SetNormalTextFontName)
    %Property(name=Symbol, get=GetSymbol, set=SetSymbol)
    %Property(name=SymbolChar, get=GetSymbolChar)
};  // end of class wxSymbolPickerDialog



//---------------------------------------------------------------------------

