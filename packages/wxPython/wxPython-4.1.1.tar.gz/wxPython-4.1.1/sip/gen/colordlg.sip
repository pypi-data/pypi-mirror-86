//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/colordlg.h>
%End


//---------------------------------------------------------------------------

wxEventType wxEVT_COLOUR_CHANGED   /PyName=wxEVT_COLOUR_CHANGED/;

class wxColourData : wxObject
{
    %Docstring
        ColourData()
        
        This class holds a variety of information related to colour dialogs.
    %End
    %TypeHeaderCode
        #include <wx/colourdata.h>
    %End

public:
    enum 
    {
        NUM_CUSTOM    
    };

    wxColourData();

    virtual
    ~wxColourData();

    bool GetChooseFull() const;
    %Docstring
        GetChooseFull() -> bool
        
        Under Windows, determines whether the Windows colour dialog will
        display the full dialog with custom colour selection controls.
    %End

    bool GetChooseAlpha() const;
    %Docstring
        GetChooseAlpha() -> bool
        
        Indicates whether the colour dialog will display alpha values and an
        opacity selector.
    %End

    wxColour & GetColour();
    %Docstring
        GetColour() -> Colour
        
        Gets the current colour associated with the colour dialog.
    %End

    wxColour GetCustomColour(
        int i
    ) const;
    %Docstring
        GetCustomColour(i) -> Colour
        
        Returns custom colours associated with the colour dialog.
    %End

    void SetChooseFull(
        bool flag
    );
    %Docstring
        SetChooseFull(flag)
        
        Under Windows, tells the Windows colour dialog to display the full
        dialog with custom colour selection controls.
    %End

    void SetChooseAlpha(
        bool flag
    );
    %Docstring
        SetChooseAlpha(flag)
        
        Tells the colour dialog to show alpha values and an opacity selector
        (slider).
    %End

    void SetColour(
        const wxColour & colour
    );
    %Docstring
        SetColour(colour)
        
        Sets the default colour for the colour dialog.
    %End

    void SetCustomColour(
        int i,
        const wxColour & colour
    );
    %Docstring
        SetCustomColour(i, colour)
        
        Sets custom colours for the colour dialog.
    %End

    wxString ToString() const;
    %Docstring
        ToString() -> String
        
        Converts the colours saved in this class in a string form, separating
        the various colours with a comma.
    %End

    bool FromString(
        const wxString & str
    );
    %Docstring
        FromString(str) -> bool
        
        Decodes the given string, which should be in the same format returned
        by ToString(), and sets the internal colours.
    %End

    public:


    %Property(name=ChooseAlpha, get=GetChooseAlpha, set=SetChooseAlpha)
    %Property(name=ChooseFull, get=GetChooseFull, set=SetChooseFull)
    %Property(name=Colour, get=GetColour, set=SetColour)
};  // end of class wxColourData


class wxColourDialog : wxDialog
{
    %Docstring
        ColourDialog(parent, data=None)
        
        This class represents the colour chooser dialog.
    %End
    %TypeHeaderCode
        #include <wx/colordlg.h>
    %End

public:
    wxColourDialog(
        wxWindow * parent,
        const wxColourData * data = NULL
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxColourDialog();

    bool Create(
        wxWindow * parent,
        const wxColourData * data = NULL
    )   /TransferThis/;
    %Docstring
        Create(parent, data=None) -> bool
        
        Same as wxColourDialog().
    %End

    wxColourData & GetColourData();
    %Docstring
        GetColourData() -> ColourData
        
        Returns the colour data associated with the colour dialog.
    %End

    int ShowModal();
    %Docstring
        ShowModal() -> int
        
        Shows the dialog, returning wxID_OK if the user pressed OK, and
        wxID_CANCEL otherwise.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ColourData, get=GetColourData)
};  // end of class wxColourDialog


class wxColourDialogEvent : wxCommandEvent
{
    %Docstring
        ColourDialogEvent()
        ColourDialogEvent(evtType, dialog, colour)
        
        This event class is used for the events generated by wxColourDialog.
    %End
    %TypeHeaderCode
        #include <wx/colordlg.h>
    %End

public:
    wxColourDialogEvent();

    wxColourDialogEvent(
        wxEventType evtType,
        wxColourDialog * dialog,
        const wxColour & colour
    );

    wxColour GetColour() const;
    %Docstring
        GetColour() -> Colour
        
        Retrieve the colour the user has just selected.
    %End

    void SetColour(
        const wxColour & colour
    );
    %Docstring
        SetColour(colour)
        
        Set the colour to be sent with the event.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxColourDialogEvent& operator=(const wxColourDialogEvent&);


    public:


    %Property(name=Colour, get=GetColour, set=SetColour)
};  // end of class wxColourDialogEvent


wxColour wxGetColourFromUser(
    wxWindow * parent,
    const wxColour & colInit,
    const wxString & caption = wxEmptyString,
    wxColourData * data = NULL
);
%Docstring
    GetColourFromUser(parent, colInit, caption=EmptyString, data=None) -> Colour
    
    Shows the colour selection dialog and returns the colour selected by
    user or invalid colour (use wxColour::IsOk() to test whether a colour
    is valid) if the dialog was cancelled.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

%Extract(id=pycode_core)
EVT_COLOUR_CHANGED = PyEventBinder(wxEVT_COLOUR_CHANGED, 1)

%End


//---------------------------------------------------------------------------

