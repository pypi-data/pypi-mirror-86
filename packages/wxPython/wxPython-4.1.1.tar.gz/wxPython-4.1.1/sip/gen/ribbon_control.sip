//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _ribbon.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/ribbon/control.h>
%End


//---------------------------------------------------------------------------

class wxRibbonControl : wxControl
{
    %Docstring
        RibbonControl()
        RibbonControl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, validator=wx.DefaultValidator, name=wx.ControlNameStr)
        
        wxRibbonControl serves as a base class for all controls which share
        the ribbon characteristics of having a ribbon art provider, and
        (optionally) non-continuous resizing.
    %End
    %TypeHeaderCode
        #include <wx/ribbon/control.h>
    %End

public:
    wxRibbonControl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxRibbonControl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxControlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void SetArtProvider(
        wxRibbonArtProvider * art
    );
    %Docstring
        SetArtProvider(art)
        
        Set the art provider to be used.
    %End

    wxRibbonArtProvider * GetArtProvider() const;
    %Docstring
        GetArtProvider() -> RibbonArtProvider
        
        Get the art provider to be used.
    %End

    bool IsSizingContinuous() const;
    %Docstring
        IsSizingContinuous() -> bool
    %End

    wxSize GetNextSmallerSize(
        wxOrientation direction
    ) const;
    %Docstring
        GetNextSmallerSize(direction) -> wx.Size
        GetNextSmallerSize(direction, relative_to) -> wx.Size
        
        If sizing is not continuous, then return a suitable size for the
        control which is smaller than the current size.
    %End

    wxSize GetNextSmallerSize(
        wxOrientation direction,
        wxSize relative_to
    ) const;

    wxSize GetNextLargerSize(
        wxOrientation direction
    ) const;
    %Docstring
        GetNextLargerSize(direction) -> wx.Size
        GetNextLargerSize(direction, relative_to) -> wx.Size
        
        If sizing is not continuous, then return a suitable size for the
        control which is larger than the current size.
    %End

    wxSize GetNextLargerSize(
        wxOrientation direction,
        wxSize relative_to
    ) const;

    bool Realize();
    %Docstring
        Realize() -> bool
        
        Perform initial size and layout calculations after children have been
        added, and/or realize children.
    %End

    bool Realise();
    %Docstring
        Realise() -> bool
        
        Alias for Realize().
    %End

    wxRibbonBar * GetAncestorRibbonBar() const;
    %Docstring
        GetAncestorRibbonBar() -> RibbonBar
        
        Get the first ancestor which is a wxRibbonBar (or derived) or NULL if
        not having such parent.
    %End

    wxSize GetBestSizeForParentSize(
        const wxSize & parentSize
    ) const;
    %Docstring
        GetBestSizeForParentSize(parentSize) -> wx.Size
        
        Finds the best width and height given the parent's width and height.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=AncestorRibbonBar, get=GetAncestorRibbonBar)
    %Property(name=ArtProvider, get=GetArtProvider, set=SetArtProvider)

protected:
    wxSize DoGetNextSmallerSize(
        wxOrientation direction,
        wxSize relative_to
    ) const;
    %Docstring
        DoGetNextSmallerSize(direction, relative_to) -> wx.Size
        
        Implementation of GetNextSmallerSize().
    %End

    wxSize DoGetNextLargerSize(
        wxOrientation direction,
        wxSize relative_to
    ) const;
    %Docstring
        DoGetNextLargerSize(direction, relative_to) -> wx.Size
        
        Implementation of GetNextLargerSize().
    %End

};  // end of class wxRibbonControl



//---------------------------------------------------------------------------

