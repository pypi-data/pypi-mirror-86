//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _richtext.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxRichTextStyleListCtrl : wxControl
{
    %Docstring
        RichTextStyleListCtrl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)
        RichTextStyleListCtrl()
        
        This class incorporates a wxRichTextStyleListBox and a choice control
        that allows the user to select the category of style to view.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextstyles.h>
    %End

public:
    wxRichTextStyleListCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxRichTextStyleListCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0) -> bool
        
        Creates the windows.
    %End

    wxRichTextCtrl * GetRichTextCtrl() const;
    %Docstring
        GetRichTextCtrl() -> RichTextCtrl
        
        Returns the associated rich text control, if any.
    %End

    wxChoice * GetStyleChoice() const;
    %Docstring
        GetStyleChoice() -> wx.Choice
        
        Returns the wxChoice control used for selecting the style category.
    %End

    wxRichTextStyleListBox * GetStyleListBox() const;
    %Docstring
        GetStyleListBox() -> RichTextStyleListBox
        
        Returns the wxListBox control used to view the style list.
    %End

    wxRichTextStyleSheet * GetStyleSheet() const;
    %Docstring
        GetStyleSheet() -> RichTextStyleSheet
        
        Returns the associated style sheet, if any.
    %End

    wxRichTextStyleListBox::wxRichTextStyleType GetStyleType() const;
    %Docstring
        GetStyleType() -> RichTextStyleListBox.wxRichTextStyleType
        
        Returns the type of style to show in the list box.
    %End

    void SetRichTextCtrl(
        wxRichTextCtrl * ctrl
    );
    %Docstring
        SetRichTextCtrl(ctrl)
        
        Associates the control with a wxRichTextCtrl.
    %End

    void SetStyleSheet(
        wxRichTextStyleSheet * styleSheet
    );
    %Docstring
        SetStyleSheet(styleSheet)
        
        Associates the control with a style sheet.
    %End

    void SetStyleType(
        wxRichTextStyleListBox::wxRichTextStyleType styleType
    );
    %Docstring
        SetStyleType(styleType)
        
        Sets the style type to display.
    %End

    void UpdateStyles();
    %Docstring
        UpdateStyles()
        
        Updates the style list box.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=RichTextCtrl, get=GetRichTextCtrl, set=SetRichTextCtrl)
    %Property(name=StyleChoice, get=GetStyleChoice)
    %Property(name=StyleListBox, get=GetStyleListBox)
    %Property(name=StyleSheet, get=GetStyleSheet, set=SetStyleSheet)
    %Property(name=StyleType, get=GetStyleType, set=SetStyleType)
};  // end of class wxRichTextStyleListCtrl


class wxRichTextStyleListBox : wxHtmlListBox
{
    %Docstring
        RichTextStyleListBox(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)
        RichTextStyleListBox()
        
        This is a listbox that can display the styles in a
        wxRichTextStyleSheet, and apply the selection to an associated
        wxRichTextCtrl.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextstyles.h>
    %End

public:
    enum wxRichTextStyleType
    {
        wxRICHTEXT_STYLE_ALL,
        wxRICHTEXT_STYLE_PARAGRAPH,
        wxRICHTEXT_STYLE_CHARACTER,
        wxRICHTEXT_STYLE_LIST,
        wxRICHTEXT_STYLE_BOX    
    };

    wxRichTextStyleListBox(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxRichTextStyleListBox();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxRichTextStyleListBox();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0) -> bool
        
        Creates the window.
    %End

    void ApplyStyle(
        int i
    );
    %Docstring
        ApplyStyle(i)
        
        Applies the ith style to the associated rich text control.
    %End

    int ConvertTenthsMMToPixels(
        wxDC & dc,
        int units
    ) const;
    %Docstring
        ConvertTenthsMMToPixels(dc, units) -> int
        
        Converts units in tenths of a millimetre to device units.
    %End

    wxString CreateHTML(
        wxRichTextStyleDefinition * styleDef
    ) const;
    %Docstring
        CreateHTML(styleDef) -> String
        
        Creates a suitable HTML fragment for a definition.
    %End

    bool GetApplyOnSelection() const;
    %Docstring
        GetApplyOnSelection() -> bool
        
        If the return value is true, clicking on a style name in the list will
        immediately apply the style to the associated rich text control.
    %End

    wxRichTextCtrl * GetRichTextCtrl() const;
    %Docstring
        GetRichTextCtrl() -> RichTextCtrl
        
        Returns the wxRichTextCtrl associated with this listbox.
    %End

    wxRichTextStyleDefinition * GetStyle(
        size_t i
    ) const;
    %Docstring
        GetStyle(i) -> RichTextStyleDefinition
        
        Gets a style for a listbox index.
    %End

    wxRichTextStyleSheet * GetStyleSheet() const;
    %Docstring
        GetStyleSheet() -> RichTextStyleSheet
        
        Returns the style sheet associated with this listbox.
    %End

    wxRichTextStyleListBox::wxRichTextStyleType GetStyleType() const;
    %Docstring
        GetStyleType() -> RichTextStyleListBox.wxRichTextStyleType
        
        Returns the type of style to show in the list box.
    %End

    void OnLeftDown(
        wxMouseEvent & event
    );
    %Docstring
        OnLeftDown(event)
        
        Implements left click behaviour, applying the clicked style to the
        wxRichTextCtrl.
    %End

    void SetApplyOnSelection(
        bool applyOnSelection
    );
    %Docstring
        SetApplyOnSelection(applyOnSelection)
        
        If applyOnSelection is true, clicking on a style name in the list will
        immediately apply the style to the associated rich text control.
    %End

    void SetRichTextCtrl(
        wxRichTextCtrl * ctrl
    );
    %Docstring
        SetRichTextCtrl(ctrl)
        
        Associates the listbox with a wxRichTextCtrl.
    %End

    void SetStyleSheet(
        wxRichTextStyleSheet * styleSheet
    );
    %Docstring
        SetStyleSheet(styleSheet)
        
        Associates the control with a style sheet.
    %End

    void SetStyleType(
        wxRichTextStyleListBox::wxRichTextStyleType styleType
    );
    %Docstring
        SetStyleType(styleType)
        
        Sets the style type to display.
    %End

    void UpdateStyles();
    %Docstring
        UpdateStyles()
        
        Updates the list from the associated style sheet.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ApplyOnSelection, get=GetApplyOnSelection, set=SetApplyOnSelection)
    %Property(name=RichTextCtrl, get=GetRichTextCtrl, set=SetRichTextCtrl)
    %Property(name=StyleSheet, get=GetStyleSheet, set=SetStyleSheet)
    %Property(name=StyleType, get=GetStyleType, set=SetStyleType)

protected:
    wxString OnGetItem(
        size_t n
    ) const;
    %Docstring
        OnGetItem(n) -> String
        
        Returns the HTML for this item.
    %End

};  // end of class wxRichTextStyleListBox


class wxRichTextStyleComboCtrl : wxComboCtrl
{
    %Docstring
        RichTextStyleComboCtrl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)
        RichTextStyleComboCtrl()
        
        This is a combo control that can display the styles in a
        wxRichTextStyleSheet, and apply the selection to an associated
        wxRichTextCtrl.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextstyles.h>
    %End

public:
    wxRichTextStyleComboCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxRichTextStyleComboCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxRichTextStyleComboCtrl();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0) -> bool
        
        Creates the windows.
    %End

    wxRichTextCtrl * GetRichTextCtrl() const;
    %Docstring
        GetRichTextCtrl() -> RichTextCtrl
        
        Returns the wxRichTextCtrl associated with this control.
    %End

    wxRichTextStyleSheet * GetStyleSheet() const;
    %Docstring
        GetStyleSheet() -> RichTextStyleSheet
        
        Returns the style sheet associated with this control.
    %End

    void SetRichTextCtrl(
        wxRichTextCtrl * ctrl
    );
    %Docstring
        SetRichTextCtrl(ctrl)
        
        Associates the control with a wxRichTextCtrl.
    %End

    void SetStyleSheet(
        wxRichTextStyleSheet * styleSheet
    );
    %Docstring
        SetStyleSheet(styleSheet)
        
        Associates the control with a style sheet.
    %End

    void UpdateStyles();
    %Docstring
        UpdateStyles()
        
        Updates the combo control from the associated style sheet.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=RichTextCtrl, get=GetRichTextCtrl, set=SetRichTextCtrl)
    %Property(name=StyleSheet, get=GetStyleSheet, set=SetStyleSheet)
};  // end of class wxRichTextStyleComboCtrl


class wxRichTextStyleDefinition : wxObject   /Abstract/
{
    %Docstring
        RichTextStyleDefinition(name=wx.EmptyString)
        
        This is a base class for paragraph and character styles.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextstyles.h>
    %End

public:
    wxRichTextStyleDefinition(
        const wxString & name = wxEmptyString
    );

    virtual
    ~wxRichTextStyleDefinition();

    const wxRichTextAttr GetStyle() const;
    %Docstring
        GetStyle() -> RichTextAttr
        
        Returns the attributes associated with this style.
    %End

    const wxString & GetBaseStyle() const;
    %Docstring
        GetBaseStyle() -> String
        
        Returns the style on which this style is based.
    %End

    const wxString & GetDescription() const;
    %Docstring
        GetDescription() -> String
        
        Returns the style's description.
    %End

    const wxString & GetName() const;
    %Docstring
        GetName() -> String
        
        Returns the style name.
    %End

    virtual
    wxRichTextAttr GetStyleMergedWithBase(
        const wxRichTextStyleSheet * sheet
    ) const;
    %Docstring
        GetStyleMergedWithBase(sheet) -> RichTextAttr
        
        Returns the style attributes combined with the attributes of the
        specified base style, if any.
    %End

    void SetBaseStyle(
        const wxString & name
    );
    %Docstring
        SetBaseStyle(name)
        
        Sets the name of the style that this style is based on.
    %End

    void SetDescription(
        const wxString & descr
    );
    %Docstring
        SetDescription(descr)
        
        Sets the style description.
    %End

    void SetName(
        const wxString & name
    );
    %Docstring
        SetName(name)
        
        Sets the name of the style.
    %End

    void SetStyle(
        const wxRichTextAttr & style
    );
    %Docstring
        SetStyle(style)
        
        Sets the attributes for this style.
    %End

    wxRichTextProperties & GetProperties();
    %Docstring
        GetProperties() -> RichTextProperties
        
        Returns the definition's properties.
    %End

    void SetProperties(
        const wxRichTextProperties & props
    );
    %Docstring
        SetProperties(props)
        
        Sets the definition's properties.
    %End

    public:


    %Property(name=BaseStyle, get=GetBaseStyle, set=SetBaseStyle)
    %Property(name=Description, get=GetDescription, set=SetDescription)
    %Property(name=Name, get=GetName, set=SetName)
    %Property(name=Properties, get=GetProperties, set=SetProperties)
    %Property(name=Style, get=GetStyle, set=SetStyle)
};  // end of class wxRichTextStyleDefinition


class wxRichTextParagraphStyleDefinition : wxRichTextStyleDefinition
{
    %Docstring
        RichTextParagraphStyleDefinition(name=wx.EmptyString)
        
        This class represents a paragraph style definition, usually added to a
        wxRichTextStyleSheet.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextstyles.h>
    %End

public:
    wxRichTextParagraphStyleDefinition(
        const wxString & name = wxEmptyString
    );

    virtual
    ~wxRichTextParagraphStyleDefinition();

    const wxString & GetNextStyle() const;
    %Docstring
        GetNextStyle() -> String
        
        Returns the style that should normally follow this style.
    %End

    void SetNextStyle(
        const wxString & name
    );
    %Docstring
        SetNextStyle(name)
        
        Sets the style that should normally follow this style.
    %End

    public:


    %Property(name=NextStyle, get=GetNextStyle, set=SetNextStyle)
};  // end of class wxRichTextParagraphStyleDefinition


class wxRichTextCharacterStyleDefinition : wxRichTextStyleDefinition
{
    %Docstring
        RichTextCharacterStyleDefinition(name=wx.EmptyString)
        
        This class represents a character style definition, usually added to a
        wxRichTextStyleSheet.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextstyles.h>
    %End

public:
    wxRichTextCharacterStyleDefinition(
        const wxString & name = wxEmptyString
    );

    virtual
    ~wxRichTextCharacterStyleDefinition();

};  // end of class wxRichTextCharacterStyleDefinition


class wxRichTextListStyleDefinition : wxRichTextParagraphStyleDefinition
{
    %Docstring
        RichTextListStyleDefinition(name=wx.EmptyString)
        
        This class represents a list style definition, usually added to a
        wxRichTextStyleSheet.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextstyles.h>
    %End

public:
    wxRichTextListStyleDefinition(
        const wxString & name = wxEmptyString
    );

    virtual
    ~wxRichTextListStyleDefinition();

    wxRichTextAttr CombineWithParagraphStyle(
        int indent,
        const wxRichTextAttr & paraStyle,
        wxRichTextStyleSheet * styleSheet = NULL
    );
    %Docstring
        CombineWithParagraphStyle(indent, paraStyle, styleSheet=None) -> RichTextAttr
        
        This function combines the given paragraph style with the list style's
        base attributes and level style matching the given indent, returning
        the combined attributes.
    %End

    int FindLevelForIndent(
        int indent
    ) const;
    %Docstring
        FindLevelForIndent(indent) -> int
        
        This function finds the level (from 0 to 9) whose indentation
        attribute mostly closely matches indent (expressed in tenths of a
        millimetre).
    %End

    wxRichTextAttr GetCombinedStyle(
        int indent,
        wxRichTextStyleSheet * styleSheet = NULL
    );
    %Docstring
        GetCombinedStyle(indent, styleSheet=None) -> RichTextAttr
        
        This function combines the list style's base attributes and the level
        style matching the given indent, returning the combined attributes.
    %End

    wxRichTextAttr GetCombinedStyleForLevel(
        int level,
        wxRichTextStyleSheet * styleSheet = NULL
    );
    %Docstring
        GetCombinedStyleForLevel(level, styleSheet=None) -> RichTextAttr
        
        This function combines the list style's base attributes and the style
        for the specified level, returning the combined attributes.
    %End

    const wxRichTextAttr * GetLevelAttributes(
        int level
    ) const;
    %Docstring
        GetLevelAttributes(level) -> RichTextAttr
        
        Returns the style for the given level.
    %End

    int GetLevelCount() const;
    %Docstring
        GetLevelCount() -> int
        
        Returns the number of levels.
    %End

    bool IsNumbered(
        int level
    ) const;
    %Docstring
        IsNumbered(level) -> bool
        
        Returns true if the given level has numbered list attributes.
    %End

    void SetLevelAttributes(
        int level,
        const wxRichTextAttr & attr
    );
    %Docstring
        SetLevelAttributes(level, attr)
        
        Sets the style for the given level.
    %End

    public:


    %Property(name=LevelCount, get=GetLevelCount)
};  // end of class wxRichTextListStyleDefinition


class wxRichTextStyleSheet : wxObject
{
    %Docstring
        RichTextStyleSheet()
        
        A style sheet contains named paragraph and character styles that make
        it easy for a user to apply combinations of attributes to a
        wxRichTextCtrl.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextstyles.h>
    %End

public:
    wxRichTextStyleSheet();

    virtual
    ~wxRichTextStyleSheet();

    bool AddCharacterStyle(
        wxRichTextCharacterStyleDefinition * styleDef   /Transfer/
    );
    %Docstring
        AddCharacterStyle(styleDef) -> bool
        
        Adds a definition to the character style list.
    %End

    bool AddListStyle(
        wxRichTextListStyleDefinition * styleDef   /Transfer/
    );
    %Docstring
        AddListStyle(styleDef) -> bool
        
        Adds a definition to the list style list.
    %End

    bool AddParagraphStyle(
        wxRichTextParagraphStyleDefinition * styleDef   /Transfer/
    );
    %Docstring
        AddParagraphStyle(styleDef) -> bool
        
        Adds a definition to the paragraph style list.
    %End

    bool AddStyle(
        wxRichTextStyleDefinition * styleDef   /Transfer/
    );
    %Docstring
        AddStyle(styleDef) -> bool
        
        Adds a definition to the appropriate style list.
    %End

    void DeleteStyles();
    %Docstring
        DeleteStyles()
        
        Deletes all styles.
    %End

    wxRichTextCharacterStyleDefinition * FindCharacterStyle(
        const wxString & name,
        bool recurse = true
    ) const;
    %Docstring
        FindCharacterStyle(name, recurse=True) -> RichTextCharacterStyleDefinition
        
        Finds a character definition by name.
    %End

    wxRichTextListStyleDefinition * FindListStyle(
        const wxString & name,
        bool recurse = true
    ) const;
    %Docstring
        FindListStyle(name, recurse=True) -> RichTextListStyleDefinition
        
        Finds a list definition by name.
    %End

    wxRichTextParagraphStyleDefinition * FindParagraphStyle(
        const wxString & name,
        bool recurse = true
    ) const;
    %Docstring
        FindParagraphStyle(name, recurse=True) -> RichTextParagraphStyleDefinition
        
        Finds a paragraph definition by name.
    %End

    wxRichTextStyleDefinition * FindStyle(
        const wxString & name
    ) const;
    %Docstring
        FindStyle(name) -> RichTextStyleDefinition
        
        Finds a style definition by name.
    %End

    wxRichTextCharacterStyleDefinition * GetCharacterStyle(
        size_t n
    ) const;
    %Docstring
        GetCharacterStyle(n) -> RichTextCharacterStyleDefinition
        
        Returns the nth character style.
    %End

    size_t GetCharacterStyleCount() const;
    %Docstring
        GetCharacterStyleCount() -> size_t
        
        Returns the number of character styles.
    %End

    const wxString & GetDescription() const;
    %Docstring
        GetDescription() -> String
        
        Returns the style sheet's description.
    %End

    wxRichTextListStyleDefinition * GetListStyle(
        size_t n
    ) const;
    %Docstring
        GetListStyle(n) -> RichTextListStyleDefinition
        
        Returns the nth list style.
    %End

    size_t GetListStyleCount() const;
    %Docstring
        GetListStyleCount() -> size_t
        
        Returns the number of list styles.
    %End

    const wxString & GetName() const;
    %Docstring
        GetName() -> String
        
        Returns the style sheet's name.
    %End

    wxRichTextParagraphStyleDefinition * GetParagraphStyle(
        size_t n
    ) const;
    %Docstring
        GetParagraphStyle(n) -> RichTextParagraphStyleDefinition
        
        Returns the nth paragraph style.
    %End

    size_t GetParagraphStyleCount() const;
    %Docstring
        GetParagraphStyleCount() -> size_t
        
        Returns the number of paragraph styles.
    %End

    bool RemoveCharacterStyle(
        wxRichTextStyleDefinition * styleDef,
        bool deleteStyle = false
    );
    %Docstring
        RemoveCharacterStyle(styleDef, deleteStyle=False) -> bool
        
        Removes a character style.
    %End

    bool RemoveListStyle(
        wxRichTextStyleDefinition * styleDef,
        bool deleteStyle = false
    );
    %Docstring
        RemoveListStyle(styleDef, deleteStyle=False) -> bool
        
        Removes a list style.
    %End

    bool RemoveParagraphStyle(
        wxRichTextStyleDefinition * styleDef,
        bool deleteStyle = false
    );
    %Docstring
        RemoveParagraphStyle(styleDef, deleteStyle=False) -> bool
        
        Removes a paragraph style.
    %End

    bool RemoveStyle(
        wxRichTextStyleDefinition * styleDef,
        bool deleteStyle = false
    );
    %Docstring
        RemoveStyle(styleDef, deleteStyle=False) -> bool
        
        Removes a style.
    %End

    void SetDescription(
        const wxString & descr
    );
    %Docstring
        SetDescription(descr)
        
        Sets the style sheet's description.
    %End

    void SetName(
        const wxString & name
    );
    %Docstring
        SetName(name)
        
        Sets the style sheet's name.
    %End

    wxRichTextProperties & GetProperties();
    %Docstring
        GetProperties() -> RichTextProperties
        
        Returns the sheet's properties.
    %End

    void SetProperties(
        const wxRichTextProperties & props
    );
    %Docstring
        SetProperties(props)
        
        Sets the sheet's properties.
    %End

    public:


    %Property(name=CharacterStyleCount, get=GetCharacterStyleCount)
    %Property(name=Description, get=GetDescription, set=SetDescription)
    %Property(name=ListStyleCount, get=GetListStyleCount)
    %Property(name=Name, get=GetName, set=SetName)
    %Property(name=ParagraphStyleCount, get=GetParagraphStyleCount)
    %Property(name=Properties, get=GetProperties, set=SetProperties)
};  // end of class wxRichTextStyleSheet



//---------------------------------------------------------------------------

