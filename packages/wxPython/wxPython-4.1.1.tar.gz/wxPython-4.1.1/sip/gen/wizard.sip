//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _adv.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxWIZARD_EX_HELPBUTTON;
const int wxWIZARD_VALIGN_TOP;
const int wxWIZARD_VALIGN_CENTRE;
const int wxWIZARD_VALIGN_BOTTOM;
const int wxWIZARD_HALIGN_LEFT;
const int wxWIZARD_HALIGN_CENTRE;
const int wxWIZARD_HALIGN_RIGHT;
const int wxWIZARD_TILE;
wxEventType wxEVT_WIZARD_PAGE_CHANGED   /PyName=wxEVT_WIZARD_PAGE_CHANGED/;

wxEventType wxEVT_WIZARD_PAGE_CHANGING   /PyName=wxEVT_WIZARD_PAGE_CHANGING/;

wxEventType wxEVT_WIZARD_CANCEL   /PyName=wxEVT_WIZARD_CANCEL/;

wxEventType wxEVT_WIZARD_HELP   /PyName=wxEVT_WIZARD_HELP/;

wxEventType wxEVT_WIZARD_FINISHED   /PyName=wxEVT_WIZARD_FINISHED/;

wxEventType wxEVT_WIZARD_PAGE_SHOWN   /PyName=wxEVT_WIZARD_PAGE_SHOWN/;

wxEventType wxEVT_WIZARD_BEFORE_PAGE_CHANGED   /PyName=wxEVT_WIZARD_BEFORE_PAGE_CHANGED/;

class wxWizardPage : wxPanel
{
    %Docstring
        WizardPage()
        WizardPage(parent, bitmap=wx.NullBitmap)
        
        wxWizardPage is one of the screens in wxWizard: it must know what are
        the following and preceding pages (which may be NULL for the
        first/last page).
    %End
    %TypeHeaderCode
        #include <wx/wizard.h>
    %End

public:
    wxWizardPage();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxWizardPage(
        wxWizard * parent   /TransferThis/,
        const wxBitmap & bitmap = wxNullBitmap
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWizard * parent   /TransferThis/,
        const wxBitmap & bitmap = wxNullBitmap
    );
    %Docstring
        Create(parent, bitmap=wx.NullBitmap) -> bool
        
        Creates the wizard page.
    %End

    virtual
    wxBitmap GetBitmap() const;
    %Docstring
        GetBitmap() -> wx.Bitmap
        
        This method is called by wxWizard to get the bitmap to display
        alongside the page.
    %End

    virtual
    wxWizardPage * GetNext() const = 0;
    %Docstring
        GetNext() -> WizardPage
        
        Get the page which should be shown when the user chooses the "Next"
        button: if NULL is returned, this button will be disabled.
    %End

    virtual
    wxWizardPage * GetPrev() const = 0;
    %Docstring
        GetPrev() -> WizardPage
        
        Get the page which should be shown when the user chooses the "Back"
        button: if NULL is returned, this button will be disabled.
    %End

    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Bitmap, get=GetBitmap)
    %Property(name=Next, get=GetNext)
    %Property(name=Prev, get=GetPrev)
};  // end of class wxWizardPage


class wxWizardPageSimple : wxWizardPage
{
    %Docstring
        WizardPageSimple()
        WizardPageSimple(parent, prev=None, next=None, bitmap=wx.NullBitmap)
        
        wxWizardPageSimple is the simplest possible wxWizardPage
        implementation: it just returns the pointers given to its constructor
        from wxWizardPage::GetNext() and wxWizardPage::GetPrev() functions.
    %End
    %TypeHeaderCode
        #include <wx/wizard.h>
    %End

public:
    wxWizardPageSimple();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxWizardPageSimple(
        wxWizard * parent   /TransferThis/,
        wxWizardPage * prev = NULL,
        wxWizardPage * next = NULL,
        const wxBitmap & bitmap = wxNullBitmap
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWizard * parent   /TransferThis/ = NULL,
        wxWizardPage * prev = NULL,
        wxWizardPage * next = NULL,
        const wxBitmap & bitmap = wxNullBitmap
    );
    %Docstring
        Create(parent=None, prev=None, next=None, bitmap=wx.NullBitmap) -> bool
        
        Creates the wizard page.
    %End

    wxWizardPageSimple & Chain(
        wxWizardPageSimple * next
    );
    %Docstring
        Chain(next) -> WizardPageSimple
        Chain(first, second)
        
        A helper chaining this page with the next one.
    %End

    static
    void Chain(
        wxWizardPageSimple * first,
        wxWizardPageSimple * second
    );

    void SetNext(
        wxWizardPage * next
    );
    %Docstring
        SetNext(next)
        
        Sets the next page.
    %End

    void SetPrev(
        wxWizardPage * prev
    );
    %Docstring
        SetPrev(prev)
        
        Sets the previous page.
    %End

    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

            virtual wxWizardPage* GetNext() const;
            virtual wxWizardPage* GetPrev() const;


    public:


};  // end of class wxWizardPageSimple


class wxWizard : wxDialog
{
    %Docstring
        Wizard()
        Wizard(parent, id=wx.ID_ANY, title=wx.EmptyString, bitmap=wx.NullBitmap, pos=wx.DefaultPosition, style=wx.DEFAULT_DIALOG_STYLE)
        
        wxWizard is the central class for implementing 'wizard-like' dialogs.
    %End
    %TypeHeaderCode
        #include <wx/wizard.h>
    %End

public:
    wxWizard();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxWizard(
        wxWindow * parent   /TransferThis/,
        int id = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxBitmap & bitmap = wxNullBitmap,
        const wxPoint & pos = wxDefaultPosition,
        long style = wxDEFAULT_DIALOG_STYLE
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        int id = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxBitmap & bitmap = wxNullBitmap,
        const wxPoint & pos = wxDefaultPosition,
        long style = wxDEFAULT_DIALOG_STYLE
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, title=wx.EmptyString, bitmap=wx.NullBitmap, pos=wx.DefaultPosition, style=wx.DEFAULT_DIALOG_STYLE) -> bool
        
        Creates the wizard dialog.
    %End

    virtual
    void FitToPage(
        const wxWizardPage * firstPage
    );
    %Docstring
        FitToPage(firstPage)
        
        This method is obsolete, use GetPageAreaSizer() instead.
    %End

    const wxBitmap & GetBitmap() const;
    %Docstring
        GetBitmap() -> wx.Bitmap
        
        Returns the bitmap used for the wizard.
    %End

    const wxColour & GetBitmapBackgroundColour() const;
    %Docstring
        GetBitmapBackgroundColour() -> wx.Colour
        
        Returns the colour that should be used to fill the area not taken up
        by the wizard or page bitmap, if a non-zero bitmap placement flag has
        been set.
    %End

    int GetBitmapPlacement() const;
    %Docstring
        GetBitmapPlacement() -> int
        
        Returns the flags indicating how the wizard or page bitmap should be
        expanded and positioned to fit the page height.
    %End

    virtual
    wxWizardPage * GetCurrentPage() const;
    %Docstring
        GetCurrentPage() -> WizardPage
        
        Get the current page while the wizard is running.
    %End

    int GetMinimumBitmapWidth() const;
    %Docstring
        GetMinimumBitmapWidth() -> int
        
        Returns the minimum width for the bitmap that will be constructed to
        contain the actual wizard or page bitmap if a non-zero bitmap
        placement flag has been set.
    %End

    virtual
    wxSizer * GetPageAreaSizer() const;
    %Docstring
        GetPageAreaSizer() -> wx.Sizer
        
        Returns pointer to page area sizer.
    %End

    virtual
    wxSize GetPageSize() const;
    %Docstring
        GetPageSize() -> wx.Size
        
        Returns the size available for the pages.
    %End

    virtual
    bool HasNextPage(
        wxWizardPage * page
    );
    %Docstring
        HasNextPage(page) -> bool
        
        Return true if this page is not the last one in the wizard.
    %End

    virtual
    bool HasPrevPage(
        wxWizardPage * page
    );
    %Docstring
        HasPrevPage(page) -> bool
        
        Returns true if this page is not the first one in the wizard.
    %End

    virtual
    bool RunWizard(
        wxWizardPage * firstPage
    );
    %Docstring
        RunWizard(firstPage) -> bool
        
        Executes the wizard starting from the given page, returning true if it
        was successfully finished or false if user cancelled it.
    %End

    void SetBitmap(
        const wxBitmap & bitmap
    );
    %Docstring
        SetBitmap(bitmap)
        
        Sets the bitmap used for the wizard.
    %End

    void SetBitmapBackgroundColour(
        const wxColour & colour
    );
    %Docstring
        SetBitmapBackgroundColour(colour)
        
        Sets the colour that should be used to fill the area not taken up by
        the wizard or page bitmap, if a non-zero bitmap placement flag has
        been set.
    %End

    void SetBitmapPlacement(
        int placement
    );
    %Docstring
        SetBitmapPlacement(placement)
        
        Sets the flags indicating how the wizard or page bitmap should be
        expanded and positioned to fit the page height.
    %End

    virtual
    void SetBorder(
        int border
    );
    %Docstring
        SetBorder(border)
        
        Sets width of border around page area.
    %End

    void SetMinimumBitmapWidth(
        int width
    );
    %Docstring
        SetMinimumBitmapWidth(width)
        
        Sets the minimum width for the bitmap that will be constructed to
        contain the actual wizard or page bitmap if a non-zero bitmap
        placement flag has been set.
    %End

    virtual
    void SetPageSize(
        const wxSize & sizePage
    );
    %Docstring
        SetPageSize(sizePage)
        
        Sets the minimal size to be made available for the wizard pages.
    %End

    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    bool ShowPage(
        wxWizardPage* page,
        bool goingForward = true
    );
    %Docstring
        ShowPage(page, goingForward=True) -> bool
        
        Show the given wizard page.
    %End

    bool IsRunning() const;
    %Docstring
        IsRunning() -> bool
    %End

    public:


    %Property(name=Bitmap, get=GetBitmap, set=SetBitmap)
    %Property(name=BitmapBackgroundColour, get=GetBitmapBackgroundColour, set=SetBitmapBackgroundColour)
    %Property(name=BitmapPlacement, get=GetBitmapPlacement, set=SetBitmapPlacement)
    %Property(name=CurrentPage, get=GetCurrentPage)
    %Property(name=MinimumBitmapWidth, get=GetMinimumBitmapWidth, set=SetMinimumBitmapWidth)
    %Property(name=PageAreaSizer, get=GetPageAreaSizer)
    %Property(name=PageSize, get=GetPageSize, set=SetPageSize)
};  // end of class wxWizard


class wxWizardEvent : wxNotifyEvent
{
    %Docstring
        WizardEvent(type=wx.wxEVT_NULL, id=wx.ID_ANY, direction=True, page=0)
        
        wxWizardEvent class represents an event generated by the wxWizard:
        this event is first sent to the page itself and, if not processed
        there, goes up the window hierarchy as usual.
    %End
    %TypeHeaderCode
        #include <wx/wizard.h>
    %End

public:
    wxWizardEvent(
        wxEventType type = wxEVT_NULL,
        int id = wxID_ANY,
        bool direction = true,
        wxWizardPage * page = 0
    );

    bool GetDirection() const;
    %Docstring
        GetDirection() -> bool
        
        Return the direction in which the page is changing: for
        EVT_WIZARD_PAGE_CHANGING, return true if we're going forward or false
        otherwise and for EVT_WIZARD_PAGE_CHANGED return true if we came from
        the previous page and false if we returned from the next one.
    %End

    wxWizardPage * GetPage() const;
    %Docstring
        GetPage() -> WizardPage
        
        Returns the wxWizardPage which was active when this event was
        generated.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxWizardEvent& operator=(const wxWizardEvent&);


    public:


    %Property(name=Direction, get=GetDirection)
    %Property(name=Page, get=GetPage)
};  // end of class wxWizardEvent


%Extract(id=pycode_adv)
PyWizardPage = wx.deprecated(WizardPage, 'Use WizardPage instead.')

%End

%Extract(id=pycode_adv)
EVT_WIZARD_BEFORE_PAGE_CHANGED  = wx.PyEventBinder( wxEVT_WIZARD_BEFORE_PAGE_CHANGED, 1)
EVT_WIZARD_PAGE_CHANGED  = wx.PyEventBinder( wxEVT_WIZARD_PAGE_CHANGED, 1)
EVT_WIZARD_PAGE_CHANGING = wx.PyEventBinder( wxEVT_WIZARD_PAGE_CHANGING, 1)
EVT_WIZARD_CANCEL        = wx.PyEventBinder( wxEVT_WIZARD_CANCEL, 1)
EVT_WIZARD_HELP          = wx.PyEventBinder( wxEVT_WIZARD_HELP, 1)
EVT_WIZARD_FINISHED      = wx.PyEventBinder( wxEVT_WIZARD_FINISHED, 1)
EVT_WIZARD_PAGE_SHOWN    = wx.PyEventBinder( wxEVT_WIZARD_PAGE_SHOWN, 1)

%End


//---------------------------------------------------------------------------

