//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

typedef wxWindow::ChildrenRepositioningGuard ChildrenRepositioningGuard;

enum wxShowEffect
{
    wxSHOW_EFFECT_NONE,
    wxSHOW_EFFECT_ROLL_TO_LEFT,
    wxSHOW_EFFECT_ROLL_TO_RIGHT,
    wxSHOW_EFFECT_ROLL_TO_TOP,
    wxSHOW_EFFECT_ROLL_TO_BOTTOM,
    wxSHOW_EFFECT_SLIDE_TO_LEFT,
    wxSHOW_EFFECT_SLIDE_TO_RIGHT,
    wxSHOW_EFFECT_SLIDE_TO_TOP,
    wxSHOW_EFFECT_SLIDE_TO_BOTTOM,
    wxSHOW_EFFECT_BLEND,
    wxSHOW_EFFECT_EXPAND,
    wxSHOW_EFFECT_MAX
};

enum 
{
    wxTOUCH_NONE,
    wxTOUCH_VERTICAL_PAN_GESTURE,
    wxTOUCH_HORIZONTAL_PAN_GESTURE,
    wxTOUCH_PAN_GESTURES,
    wxTOUCH_ZOOM_GESTURE,
    wxTOUCH_ROTATE_GESTURE,
    wxTOUCH_PRESS_GESTURES,
    wxTOUCH_ALL_GESTURES
};

enum 
{
    wxSEND_EVENT_POST
};

enum wxWindowVariant
{
    wxWINDOW_VARIANT_NORMAL,
    wxWINDOW_VARIANT_SMALL,
    wxWINDOW_VARIANT_MINI,
    wxWINDOW_VARIANT_LARGE,
    wxWINDOW_VARIANT_MAX
};

struct wxVisualAttributes
{
    %Docstring
        Struct containing all the visual attributes of a control.
    %End
    %TypeHeaderCode
        #include <wx/window.h>
    %End

    wxFont font   /NoSetter/
    {
    %GetCode
        wxFont* font = new wxFont(sipCpp->font);
        sipPy = wxPyConstructObject((void*)font, "wxFont", true);
    %End
    };

    wxColour colFg   /NoSetter/
    {
    %GetCode
        wxColour* clr = new wxColour(sipCpp->colFg);
        sipPy = wxPyConstructObject((void*)clr, "wxColour", true);
    %End
    };

    wxColour colBg   /NoSetter/
    {
    %GetCode
        wxColour* clr = new wxColour(sipCpp->colBg);
        sipPy = wxPyConstructObject((void*)clr, "wxColour", true);
    %End
    };

};  // end of class wxVisualAttributes


const char* wxPanelNameStr;

class wxWindowBase : wxEvtHandler   /Abstract/
{
    %Docstring
        
    %End
public:
    virtual
    void AddChild(
        wxWindowBase* child
    );
    %Docstring
        AddChild(child)
    %End

    virtual
    void RemoveChild(
        wxWindowBase* child
    );
    %Docstring
        RemoveChild(child)
    %End

};  // end of class wxWindowBase


class wxWindow : wxWindowBase
{
    %Docstring
        Window()
        Window(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr)
        
        wxWindow is the base class for all windows and represents any visible
        object on screen.
    %End
    %TypeHeaderCode
        #include <wx/window.h>
    %End

    %TypeCode
        
        #ifdef __WXMSW__
        #include <wx/msw/private.h>
        #endif
        
        #ifdef __WXGTK__
        #include <gdk/gdkx.h>
        #include <gtk/gtk.h>
        #ifdef __WXGTK3__
        // Unlike GDK_WINDOW_XWINDOW, GDK_WINDOW_XID can't handle a NULL, so check 1st
        static XID GetXWindow(const wxWindow* wxwin) {
            if ((wxwin)->m_wxwindow) {
                if (gtk_widget_get_window((wxwin)->m_wxwindow))
                    return GDK_WINDOW_XID(gtk_widget_get_window((wxwin)->m_wxwindow));
                return 0;
            }
            else {
                if (gtk_widget_get_window((wxwin)->m_widget))
                    return GDK_WINDOW_XID(gtk_widget_get_window((wxwin)->m_widget));
                return 0;
            }
        }
        #else
        #define GetXWindow(wxwin) (wxwin)->m_wxwindow ? \
                                  GDK_WINDOW_XWINDOW((wxwin)->m_wxwindow->window) : \
                                  GDK_WINDOW_XWINDOW((wxwin)->m_widget->window)
        #endif
        #endif
        
        
        
        
        
        wxUIntPtr wxPyGetWinHandle(const wxWindow* win)
        {
        #ifdef __WXMSW__
            return (wxUIntPtr)win->GetHandle();
        #endif
        #if defined(__WXGTK__) || defined(__WXX11__)
            return (wxUIntPtr)GetXWindow(win);
        #endif
        #ifdef __WXMAC__
            return (wxUIntPtr)win->GetHandle();
        #endif
            return 0;
        }
    %End
public:
public:
    class ChildrenRepositioningGuard
    {
        %Docstring
            ChildrenRepositioningGuard(win)
            
            Helper for ensuring EndRepositioningChildren() is called correctly.
        %End
        %TypeHeaderCode
            #include <wx/window.h>
        %End

    public:
        ChildrenRepositioningGuard(
            wxWindow * win
        );

        ~ChildrenRepositioningGuard();

        private:
            ChildrenRepositioningGuard(const ChildrenRepositioningGuard&);


    };  // end of class ChildrenRepositioningGuard


    wxWindow();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxWindow(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxPanelNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxWindow();

    virtual
    bool AcceptsFocus() const;
    %Docstring
        AcceptsFocus() -> bool
        
        This method may be overridden in the derived classes to return false
        to indicate that this control doesn't accept input at all (i.e.
        behaves like e.g. wxStaticText) and so doesn't need focus.
    %End

    virtual
    bool AcceptsFocusFromKeyboard() const;
    %Docstring
        AcceptsFocusFromKeyboard() -> bool
        
        This method may be overridden in the derived classes to return false
        to indicate that while this control can, in principle, have focus if
        the user clicks it with the mouse, it shouldn't be included in the TAB
        traversal chain when using the keyboard.
    %End

    virtual
    bool AcceptsFocusRecursively() const;
    %Docstring
        AcceptsFocusRecursively() -> bool
        
        Overridden to indicate whether this window or one of its children
        accepts focus.
    %End

    void DisableFocusFromKeyboard();
    %Docstring
        DisableFocusFromKeyboard()
        
        Disable giving focus to this window using the keyboard navigation
        keys.
    %End

    bool IsFocusable() const;
    %Docstring
        IsFocusable() -> bool
        
        Can this window itself have focus?
    %End

    bool CanAcceptFocus() const;
    %Docstring
        CanAcceptFocus() -> bool
        
        Can this window have focus right now?
    %End

    bool CanAcceptFocusFromKeyboard() const;
    %Docstring
        CanAcceptFocusFromKeyboard() -> bool
        
        Can this window be assigned focus from keyboard right now?
    %End

    bool HasFocus() const;
    %Docstring
        HasFocus() -> bool
        
        Returns true if the window (or in case of composite controls, its main
        child window) has focus.
    %End

    virtual
    void SetCanFocus(
        bool canFocus
    );
    %Docstring
        SetCanFocus(canFocus)
        
        This method is only implemented by ports which have support for native
        TAB traversal (such as GTK+ 2.0).
    %End

    virtual
    void EnableVisibleFocus(
        bool enable
    );
    %Docstring
        EnableVisibleFocus(enable)
        
        Enables or disables visible indication of keyboard focus.
    %End

    void SetFocus();
    %Docstring
        SetFocus()
        
        This sets the window to receive keyboard input.
    %End

    void SetFocusFromKbd();
    %Docstring
        SetFocusFromKbd()
        
        This function is called by wxWidgets keyboard navigation code when the
        user gives the focus to this window from keyboard (e.g. using TAB
        key).
    %End

    virtual
    void AddChild(
        wxWindowBase* child
    );
    %Docstring
        AddChild(child)
        
        Adds a child window.
    %End

    bool DestroyChildren();
    %Docstring
        DestroyChildren() -> bool
        
        Destroys all children of a window.
    %End

    wxWindow * FindWindow(
        long id
    ) const;
    %Docstring
        FindWindow(id) -> Window
        FindWindow(name) -> Window
        
        Find a child of this window, by id.
    %End

    wxWindow * FindWindow(
        const wxString & name
    ) const;

    wxWindowList & GetChildren()   /NoCopy/;
    %Docstring
        GetChildren() -> WindowList
        
        Returns a reference to the list of the window's children.
    %End

    virtual
    void RemoveChild(
        wxWindowBase* child
    );
    %Docstring
        RemoveChild(child)
        
        Removes a child window.
    %End

    wxWindow * GetGrandParent() const;
    %Docstring
        GetGrandParent() -> Window
        
        Returns the grandparent of a window, or NULL if there isn't one.
    %End

    wxWindow * GetNextSibling() const;
    %Docstring
        GetNextSibling() -> Window
        
        Returns the next window after this one among the parent's children or
        NULL if this window is the last child.
    %End

    wxWindow * GetParent() const;
    %Docstring
        GetParent() -> Window
        
        Returns the parent of the window, or NULL if there is no parent.
    %End

    wxWindow * GetPrevSibling() const;
    %Docstring
        GetPrevSibling() -> Window
        
        Returns the previous window before this one among the parent's
        children or  NULL if this window is the first child.
    %End

    bool IsDescendant(
        wxWindow * win
    ) const;
    %Docstring
        IsDescendant(win) -> bool
        
        Check if the specified window is a descendant of this one.
    %End

    bool Reparent(
        wxWindow * newParent
    );
    %Docstring
        Reparent(newParent) -> bool
        
        Reparents the window, i.e. the window will be removed from its current
        parent window (e.g.
    %End

    void AlwaysShowScrollbars(
        bool hflag = true,
        bool vflag = true
    );
    %Docstring
        AlwaysShowScrollbars(hflag=True, vflag=True)
        
        Call this function to force one or both scrollbars to be always shown,
        even if the window is big enough to show its entire contents without
        scrolling.
    %End

    int GetScrollPos(
        int orientation
    ) const;
    %Docstring
        GetScrollPos(orientation) -> int
        
        Returns the built-in scrollbar position.
    %End

    int GetScrollRange(
        int orientation
    ) const;
    %Docstring
        GetScrollRange(orientation) -> int
        
        Returns the built-in scrollbar range.
    %End

    int GetScrollThumb(
        int orientation
    ) const;
    %Docstring
        GetScrollThumb(orientation) -> int
        
        Returns the built-in scrollbar thumb size.
    %End

    bool CanScroll(
        int orient
    ) const;
    %Docstring
        CanScroll(orient) -> bool
        
        Returns true if this window can have a scroll bar in this orientation.
    %End

    bool HasScrollbar(
        int orient
    ) const;
    %Docstring
        HasScrollbar(orient) -> bool
        
        Returns true if this window currently has a scroll bar for this
        orientation.
    %End

    bool IsScrollbarAlwaysShown(
        int orient
    ) const;
    %Docstring
        IsScrollbarAlwaysShown(orient) -> bool
        
        Return whether a scrollbar is always shown.
    %End

    bool ScrollLines(
        int lines
    );
    %Docstring
        ScrollLines(lines) -> bool
        
        Scrolls the window by the given number of lines down (if lines is
        positive) or up.
    %End

    bool ScrollPages(
        int pages
    );
    %Docstring
        ScrollPages(pages) -> bool
        
        Scrolls the window by the given number of pages down (if pages is
        positive) or up.
    %End

    void ScrollWindow(
        int dx,
        int dy,
        const wxRect * rect = NULL
    );
    %Docstring
        ScrollWindow(dx, dy, rect=None)
        
        Physically scrolls the pixels in the window and move child windows
        accordingly.
    %End

    bool LineUp();
    %Docstring
        LineUp() -> bool
        
        Same as ScrollLines (-1).
    %End

    bool LineDown();
    %Docstring
        LineDown() -> bool
        
        Same as ScrollLines (1).
    %End

    bool PageUp();
    %Docstring
        PageUp() -> bool
        
        Same as ScrollPages (-1).
    %End

    bool PageDown();
    %Docstring
        PageDown() -> bool
        
        Same as ScrollPages (1).
    %End

    void SetScrollPos(
        int orientation,
        int pos,
        bool refresh = true
    );
    %Docstring
        SetScrollPos(orientation, pos, refresh=True)
        
        Sets the position of one of the built-in scrollbars.
    %End

    void SetScrollbar(
        int orientation,
        int position,
        int thumbSize,
        int range,
        bool refresh = true
    );
    %Docstring
        SetScrollbar(orientation, position, thumbSize, range, refresh=True)
        
        Sets the scrollbar properties of a built-in scrollbar.
    %End

    bool BeginRepositioningChildren();
    %Docstring
        BeginRepositioningChildren() -> bool
        
        Prepare for changing positions of multiple child windows.
    %End

    void EndRepositioningChildren();
    %Docstring
        EndRepositioningChildren()
        
        Fix child window positions after setting all of them at once.
    %End

    void CacheBestSize(
        const wxSize & size
    ) const;
    %Docstring
        CacheBestSize(size)
        
        Sets the cached best size value.
    %End

    wxSize ClientToWindowSize(
        const wxSize & size
    ) const;
    %Docstring
        ClientToWindowSize(size) -> Size
        
        Converts client area size size to corresponding window size.
    %End

    wxSize WindowToClientSize(
        const wxSize & size
    ) const;
    %Docstring
        WindowToClientSize(size) -> Size
        
        Converts window size size to corresponding client area size In other
        words, the returned value is what would GetClientSize() return if this
        window had given window size.
    %End

    void Fit();
    %Docstring
        Fit()
        
        Sizes the window to fit its best size.
    %End

    void FitInside();
    %Docstring
        FitInside()
        
        Similar to Fit(), but sizes the interior (virtual) size of a window.
    %End

    wxSize FromDIP(
        const wxSize & sz
    ) const;
    %Docstring
        FromDIP(sz) -> Size
        FromDIP(pt) -> Point
        FromDIP(d) -> int
        FromDIP(sz, w) -> Size
        FromDIP(pt, w) -> Point
        FromDIP(d, w) -> int
        
        Convert DPI-independent pixel values to the value in pixels
        appropriate for the current toolkit.
    %End

    wxPoint FromDIP(
        const wxPoint & pt
    ) const;

    int FromDIP(
        int d
    ) const;

    static
    wxSize FromDIP(
        const wxSize & sz,
        const wxWindow * w
    );

    static
    wxPoint FromDIP(
        const wxPoint & pt,
        const wxWindow * w
    );

    static
    int FromDIP(
        int d,
        const wxWindow * w
    );

    wxSize ToDIP(
        const wxSize & sz
    ) const;
    %Docstring
        ToDIP(sz) -> Size
        ToDIP(pt) -> Point
        ToDIP(d) -> int
        ToDIP(sz, w) -> Size
        ToDIP(pt, w) -> Point
        ToDIP(d, w) -> int
        
        Convert pixel values of the current toolkit to DPI-independent pixel
        values.
    %End

    wxPoint ToDIP(
        const wxPoint & pt
    ) const;

    int ToDIP(
        int d
    ) const;

    static
    wxSize ToDIP(
        const wxSize & sz,
        const wxWindow * w
    );

    static
    wxPoint ToDIP(
        const wxPoint & pt,
        const wxWindow * w
    );

    static
    int ToDIP(
        int d,
        const wxWindow * w
    );

    wxSize GetBestSize() const;
    %Docstring
        GetBestSize() -> Size
        
        This functions returns the best acceptable minimal size for the
        window.
    %End

    int GetBestHeight(
        int width
    ) const;
    %Docstring
        GetBestHeight(width) -> int
        
        Returns the best height needed by this window if it had the given
        width.
    %End

    int GetBestWidth(
        int height
    ) const;
    %Docstring
        GetBestWidth(height) -> int
        
        Returns the best width needed by this window if it had the given
        height.
    %End

    wxSize GetClientSize() const;
    %Docstring
        GetClientSize() -> Size
        
        Returns the size of the window 'client area' in pixels.
    %End

    wxSize GetEffectiveMinSize() const;
    %Docstring
        GetEffectiveMinSize() -> Size
        
        Merges the window's best size into the min size and returns the
        result.
    %End

    wxSize GetMaxClientSize() const;
    %Docstring
        GetMaxClientSize() -> Size
        
        Returns the maximum size of window's client area.
    %End

    wxSize GetMaxSize() const;
    %Docstring
        GetMaxSize() -> Size
        
        Returns the maximum size of the window.
    %End

    wxSize GetMinClientSize() const;
    %Docstring
        GetMinClientSize() -> Size
        
        Returns the minimum size of window's client area, an indication to the
        sizer layout mechanism that this is the minimum required size of its
        client area.
    %End

    wxSize GetMinSize() const;
    %Docstring
        GetMinSize() -> Size
        
        Returns the minimum size of the window, an indication to the sizer
        layout mechanism that this is the minimum required size.
    %End

    int GetMinWidth() const;
    %Docstring
        GetMinWidth() -> int
        
        Returns the horizontal component of window minimal size.
    %End

    int GetMinHeight() const;
    %Docstring
        GetMinHeight() -> int
        
        Returns the vertical component of window minimal size.
    %End

    int GetMaxWidth() const;
    %Docstring
        GetMaxWidth() -> int
        
        Returns the horizontal component of window maximal size.
    %End

    int GetMaxHeight() const;
    %Docstring
        GetMaxHeight() -> int
        
        Returns the vertical component of window maximal size.
    %End

    wxSize GetSize() const;
    %Docstring
        GetSize() -> Size
        
        Returns the size of the entire window in pixels, including title bar,
        border, scrollbars, etc.
    %End

    wxSize GetVirtualSize() const;
    %Docstring
        GetVirtualSize() -> Size
        
        This gets the virtual size of the window in pixels.
    %End

    wxSize GetBestVirtualSize() const;
    %Docstring
        GetBestVirtualSize() -> Size
        
        Return the largest of ClientSize and BestSize (as determined by a
        sizer, interior children, or other means)
    %End

    double GetContentScaleFactor() const;
    %Docstring
        GetContentScaleFactor() -> double
        
        Returns the factor mapping logical pixels of this window to physical
        pixels.
    %End

    double GetDPIScaleFactor() const;
    %Docstring
        GetDPIScaleFactor() -> double
        
        Returns the ratio of the DPI used by this window to the standard DPI.
    %End

    wxSize GetWindowBorderSize() const;
    %Docstring
        GetWindowBorderSize() -> Size
        
        Returns the size of the left/right and top/bottom borders of this
        window in x and y components of the result respectively.
    %End

    virtual
    bool InformFirstDirection(
        int direction,
        int size,
        int availableOtherDir
    );
    %Docstring
        InformFirstDirection(direction, size, availableOtherDir) -> bool
        
        wxSizer and friends use this to give a chance to a component to recalc
        its min size once one of the final size components is known.
    %End

    void InvalidateBestSize();
    %Docstring
        InvalidateBestSize()
        
        Resets the cached best size value so it will be recalculated the next
        time it is needed.
    %End

    void PostSizeEvent();
    %Docstring
        PostSizeEvent()
        
        Posts a size event to the window.
    %End

    void PostSizeEventToParent();
    %Docstring
        PostSizeEventToParent()
        
        Posts a size event to the parent of this window.
    %End

    void SendSizeEvent(
        int flags = 0
    );
    %Docstring
        SendSizeEvent(flags=0)
        
        This function sends a dummy size event to the window allowing it to
        re-layout its children positions.
    %End

    void SendSizeEventToParent(
        int flags = 0
    );
    %Docstring
        SendSizeEventToParent(flags=0)
        
        Safe wrapper for GetParent()->SendSizeEvent().
    %End

    void SetClientSize(
        int width,
        int height
    );
    %Docstring
        SetClientSize(width, height)
        SetClientSize(size)
        SetClientSize(rect)
        
        This sets the size of the window client area in pixels.
    %End

    void SetClientSize(
        const wxSize & size
    );

    void SetClientSize(
        const wxRect & rect
    );

    void SetContainingSizer(
        wxSizer * sizer
    );
    %Docstring
        SetContainingSizer(sizer)
        
        Used by wxSizer internally to notify the window about being managed by
        the given sizer.
    %End

    void SetInitialSize(
        const wxSize & size = wxDefaultSize
    );
    %Docstring
        SetInitialSize(size=DefaultSize)
        
        A smart SetSize that will fill in default size components with the
        window's best size values.
    %End

    void SetMaxClientSize(
        const wxSize & size
    );
    %Docstring
        SetMaxClientSize(size)
        
        Sets the maximum client size of the window, to indicate to the sizer
        layout mechanism that this is the maximum possible size of its client
        area.
    %End

    void SetMaxSize(
        const wxSize & size
    );
    %Docstring
        SetMaxSize(size)
        
        Sets the maximum size of the window, to indicate to the sizer layout
        mechanism that this is the maximum possible size.
    %End

    void SetMinClientSize(
        const wxSize & size
    );
    %Docstring
        SetMinClientSize(size)
        
        Sets the minimum client size of the window, to indicate to the sizer
        layout mechanism that this is the minimum required size of window's
        client area.
    %End

    void SetMinSize(
        const wxSize & size
    );
    %Docstring
        SetMinSize(size)
        
        Sets the minimum size of the window, to indicate to the sizer layout
        mechanism that this is the minimum required size.
    %End

    void SetSize(
        int x,
        int y,
        int width,
        int height,
        int sizeFlags = wxSIZE_AUTO
    );
    %Docstring
        SetSize(x, y, width, height, sizeFlags=SIZE_AUTO)
        SetSize(rect)
        SetSize(size)
        SetSize(width, height)
        
        Sets the size of the window in pixels.
    %End

    void SetSize(
        const wxRect & rect
    );

    void SetSize(
        const wxSize & size
    );

    void SetSize(
        int width,
        int height
    );

    void SetSizeHints(
        const wxSize & minSize,
        const wxSize & maxSize = wxDefaultSize,
        const wxSize & incSize = wxDefaultSize
    );
    %Docstring
        SetSizeHints(minSize, maxSize=DefaultSize, incSize=DefaultSize)
        SetSizeHints(minW, minH, maxW=-1, maxH=-1, incW=-1, incH=-1)
        
        Use of this function for windows which are not toplevel windows (such
        as wxDialog or wxFrame) is discouraged.
    %End

    void SetSizeHints(
        int minW,
        int minH,
        int maxW = -1,
        int maxH = -1,
        int incW = -1,
        int incH = -1
    );

    void SetVirtualSize(
        int width,
        int height
    );
    %Docstring
        SetVirtualSize(width, height)
        SetVirtualSize(size)
        
        Sets the virtual size of the window in pixels.
    %End

    void SetVirtualSize(
        const wxSize & size
    );

    void Center(
        int dir = wxBOTH
    );
    %Docstring
        Center(dir=BOTH)
        
        A synonym for Centre().
    %End

    void CenterOnParent(
        int dir = wxBOTH
    );
    %Docstring
        CenterOnParent(dir=BOTH)
        
        A synonym for CentreOnParent().
    %End

    void Centre(
        int direction = wxBOTH
    );
    %Docstring
        Centre(direction=BOTH)
        
        Centres the window.
    %End

    void CentreOnParent(
        int direction = wxBOTH
    );
    %Docstring
        CentreOnParent(direction=BOTH)
        
        Centres the window on its parent.
    %End

    wxPoint GetPosition() const;
    %Docstring
        GetPosition() -> Point
        
        This gets the position of the window in pixels, relative to the parent
        window for the child windows or relative to the display origin for the
        top level windows.
    %End

    wxRect GetRect() const;
    %Docstring
        GetRect() -> Rect
        
        Returns the position and size of the window as a wxRect object.
    %End

    wxPoint GetScreenPosition() const;
    %Docstring
        GetScreenPosition() -> Point
        
        Returns the window position in screen coordinates, whether the window
        is a child window or a top level one.
    %End

    wxRect GetScreenRect() const;
    %Docstring
        GetScreenRect() -> Rect
        
        Returns the position and size of the window on the screen as a wxRect
        object.
    %End

    virtual
    wxPoint GetClientAreaOrigin() const;
    %Docstring
        GetClientAreaOrigin() -> Point
        
        Get the origin of the client area of the window relative to the window
        top left corner (the client area may be shifted because of the
        borders, scrollbars, other decorations...)
    %End

    wxRect GetClientRect() const;
    %Docstring
        GetClientRect() -> Rect
        
        Get the client rectangle in window (i.e. client) coordinates.
    %End

    void Move(
        int x,
        int y,
        int flags = wxSIZE_USE_EXISTING
    );
    %Docstring
        Move(x, y, flags=SIZE_USE_EXISTING)
        Move(pt, flags=SIZE_USE_EXISTING)
        
        Moves the window to the given position.
    %End

    void Move(
        const wxPoint & pt,
        int flags = wxSIZE_USE_EXISTING
    );

    void SetPosition(
        const wxPoint & pt
    );
    %Docstring
        SetPosition(pt)
        
        Moves the window to the specified position.
    %End

    void ClientToScreen(
        int * x   /In, Out/,
        int * y   /In, Out/
    ) const;
    %Docstring
        ClientToScreen(x, y) -> (x, y)
        ClientToScreen(pt) -> Point
        
        Converts to screen coordinates from coordinates relative to this
        window.
    %End

    wxPoint ClientToScreen(
        const wxPoint & pt
    ) const;

    wxPoint ConvertDialogToPixels(
        const wxPoint & pt
    ) const;
    %Docstring
        ConvertDialogToPixels(pt) -> Point
        ConvertDialogToPixels(sz) -> Size
        
        Converts a point or size from dialog units to pixels.
    %End

    wxSize ConvertDialogToPixels(
        const wxSize & sz
    ) const;

    wxPoint ConvertPixelsToDialog(
        const wxPoint & pt
    ) const;
    %Docstring
        ConvertPixelsToDialog(pt) -> Point
        ConvertPixelsToDialog(sz) -> Size
        
        Converts a point or size from pixels to dialog units.
    %End

    wxSize ConvertPixelsToDialog(
        const wxSize & sz
    ) const;

    void ScreenToClient(
        int * x   /In, Out/,
        int * y   /In, Out/
    ) const;
    %Docstring
        ScreenToClient(x, y) -> (x, y)
        ScreenToClient(pt) -> Point
        
        Converts from screen to client window coordinates.
    %End

    wxPoint ScreenToClient(
        const wxPoint & pt
    ) const;

    void ClearBackground();
    %Docstring
        ClearBackground()
        
        Clears the window by filling it with the current background colour.
    %End

    void Freeze();
    %Docstring
        Freeze()
        
        Freezes the window or, in other words, prevents any updates from
        taking place on screen, the window is not redrawn at all.
    %End

    void Thaw();
    %Docstring
        Thaw()
        
        Re-enables window updating after a previous call to Freeze().
    %End

    bool IsFrozen() const;
    %Docstring
        IsFrozen() -> bool
        
        Returns true if the window is currently frozen by a call to Freeze().
    %End

    wxColour GetBackgroundColour() const;
    %Docstring
        GetBackgroundColour() -> Colour
        
        Returns the background colour of the window.
    %End

    wxBackgroundStyle GetBackgroundStyle() const;
    %Docstring
        GetBackgroundStyle() -> BackgroundStyle
        
        Returns the background style of the window.
    %End

    int GetCharHeight() const;
    %Docstring
        GetCharHeight() -> int
        
        Returns the character height for this window.
    %End

    int GetCharWidth() const;
    %Docstring
        GetCharWidth() -> int
        
        Returns the average character width for this window.
    %End

    wxVisualAttributes GetDefaultAttributes() const;
    %Docstring
        GetDefaultAttributes() -> VisualAttributes
        
        Currently this is the same as calling
        wxWindow::GetClassDefaultAttributes(wxWindow::GetWindowVariant()).
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxSize GetDPI() const;
    %Docstring
        GetDPI() -> Size
        
        Return the DPI of the display used by this window.
    %End

    wxFont GetFont() const;
    %Docstring
        GetFont() -> Font
        
        Returns the font for this window.
    %End

    wxColour GetForegroundColour() const;
    %Docstring
        GetForegroundColour() -> Colour
        
        Returns the foreground colour of the window.
    %End

    void GetTextExtent(
        const wxString & string,
        int * w   /Out/,
        int * h   /Out/,
        int * descent   /Out/ = NULL,
        int * externalLeading   /Out/ = NULL,
        const wxFont * font = NULL
    ) const   /PyName=GetFullTextExtent/;
    %Docstring
        GetFullTextExtent(string, font=None) -> (w, h, descent, externalLeading)
        
        Gets the dimensions of the string as it would be drawn on the window
        with the currently selected font.
    %End

    wxSize GetTextExtent(
        const wxString & string
    ) const;
    %Docstring
        GetTextExtent(string) -> Size
        
        Gets the dimensions of the string as it would be drawn on the window
        with the currently selected font.
    %End

    const wxRegion & GetUpdateRegion() const;
    %Docstring
        GetUpdateRegion() -> Region
        
        Returns the region specifying which parts of the window have been
        damaged.
    %End

    wxRect GetUpdateClientRect() const;
    %Docstring
        GetUpdateClientRect() -> Rect
        
        Get the update rectangle bounding box in client coords.
    %End

    virtual
    bool HasTransparentBackground();
    %Docstring
        HasTransparentBackground() -> bool
        
        Returns true if this window background is transparent (as, for
        example, for wxStaticText) and should show the parent window
        background.
    %End

    void Refresh(
        bool eraseBackground = true,
        const wxRect * rect = NULL
    );
    %Docstring
        Refresh(eraseBackground=True, rect=None)
        
        Causes this window, and all of its children recursively (except under
        wxGTK1 where this is not implemented), to be repainted.
    %End

    void RefreshRect(
        const wxRect & rect,
        bool eraseBackground = true
    );
    %Docstring
        RefreshRect(rect, eraseBackground=True)
        
        Redraws the contents of the given rectangle: only the area inside it
        will be repainted.
    %End

    void Update();
    %Docstring
        Update()
        
        Calling this method immediately repaints the invalidated area of the
        window and all of its children recursively (this normally only happens
        when the flow of control returns to the event loop).
    %End

    bool SetBackgroundColour(
        const wxColour & colour
    );
    %Docstring
        SetBackgroundColour(colour) -> bool
        
        Sets the background colour of the window.
    %End

    bool SetBackgroundStyle(
        wxBackgroundStyle style
    );
    %Docstring
        SetBackgroundStyle(style) -> bool
        
        Sets the background style of the window.
    %End

    bool IsTransparentBackgroundSupported(
        wxString * reason = NULL
    ) const;
    %Docstring
        IsTransparentBackgroundSupported(reason=None) -> bool
        
        Checks whether using transparent background might work.
    %End

    bool SetFont(
        const wxFont & font
    );
    %Docstring
        SetFont(font) -> bool
        
        Sets the font for this window.
    %End

    bool SetForegroundColour(
        const wxColour & colour
    );
    %Docstring
        SetForegroundColour(colour) -> bool
        
        Sets the foreground colour of the window.
    %End

    void SetOwnBackgroundColour(
        const wxColour & colour
    );
    %Docstring
        SetOwnBackgroundColour(colour)
        
        Sets the background colour of the window but prevents it from being
        inherited by the children of this window.
    %End

    bool InheritsBackgroundColour() const;
    %Docstring
        InheritsBackgroundColour() -> bool
        
        Return true if this window inherits the background colour from its
        parent.
    %End

    bool UseBgCol() const;
    %Docstring
        UseBgCol() -> bool
        
        Return true if a background colour has been set for this window.
    %End

    bool UseBackgroundColour() const;
    %Docstring
        UseBackgroundColour() -> bool
        
        Return true if a background colour has been set for this window.
    %End

    void SetOwnFont(
        const wxFont & font
    );
    %Docstring
        SetOwnFont(font)
        
        Sets the font of the window but prevents it from being inherited by
        the children of this window.
    %End

    void SetOwnForegroundColour(
        const wxColour & colour
    );
    %Docstring
        SetOwnForegroundColour(colour)
        
        Sets the foreground colour of the window but prevents it from being
        inherited by the children of this window.
    %End

    bool UseForegroundColour() const;
    %Docstring
        UseForegroundColour() -> bool
        
        Return true if a foreground colour has been set for this window.
    %End

    bool InheritsForegroundColour() const;
    %Docstring
        InheritsForegroundColour() -> bool
        
        Return true if this window inherits the foreground colour from its
        parent.
    %End

    void SetPalette(
        const wxPalette & pal
    )   /Deprecated/;
    %Docstring
        SetPalette(pal)
    %End

    virtual
    bool ShouldInheritColours() const;
    %Docstring
        ShouldInheritColours() -> bool
        
        Return true from here to allow the colours of this window to be
        changed by InheritAttributes().
    %End

    void SetThemeEnabled(
        bool enable
    );
    %Docstring
        SetThemeEnabled(enable)
        
        This function tells a window if it should use the system's "theme"
        code to draw the windows' background instead of its own background
        drawing code.
    %End

    bool GetThemeEnabled() const;
    %Docstring
        GetThemeEnabled() -> bool
        
        Returns true if the window uses the system theme for drawing its
        background.
    %End

    bool CanSetTransparent();
    %Docstring
        CanSetTransparent() -> bool
        
        Returns true if the system supports transparent windows and calling
        SetTransparent() may succeed.
    %End

    bool SetTransparent(
        wxByte alpha
    );
    %Docstring
        SetTransparent(alpha) -> bool
        
        Set the transparency of the window.
    %End

    wxEvtHandler * GetEventHandler() const;
    %Docstring
        GetEventHandler() -> EvtHandler
        
        Returns the event handler for this window.
    %End

    bool HandleAsNavigationKey(
        const wxKeyEvent & event
    );
    %Docstring
        HandleAsNavigationKey(event) -> bool
        
        This function will generate the appropriate call to Navigate() if the
        key event is one normally used for keyboard navigation and return true
        in this case.
    %End

    bool HandleWindowEvent(
        wxEvent & event
    ) const;
    %Docstring
        HandleWindowEvent(event) -> bool
        
        Shorthand for:
    %End

    bool ProcessWindowEvent(
        wxEvent & event
    )   /ReleaseGIL/;
    %Docstring
        ProcessWindowEvent(event) -> bool
        
        Convenient wrapper for ProcessEvent().
    %End

    bool ProcessWindowEventLocally(
        wxEvent & event
    )   /ReleaseGIL/;
    %Docstring
        ProcessWindowEventLocally(event) -> bool
        
        Wrapper for wxEvtHandler::ProcessEventLocally().
    %End

    wxEvtHandler * PopEventHandler(
        bool deleteHandler = false
    )   /TransferBack/;
    %Docstring
        PopEventHandler(deleteHandler=False) -> EvtHandler
        
        Removes and returns the top-most event handler on the event handler
        stack.
    %End

    void PushEventHandler(
        wxEvtHandler * handler   /Transfer/
    );
    %Docstring
        PushEventHandler(handler)
        
        Pushes this event handler onto the event stack for the window.
    %End

    bool RemoveEventHandler(
        wxEvtHandler * handler   /TransferBack/
    );
    %Docstring
        RemoveEventHandler(handler) -> bool
        
        Find the given handler in the windows event handler stack and removes
        (but does not delete) it from the stack.
    %End

    void SetEventHandler(
        wxEvtHandler * handler   /Transfer/
    );
    %Docstring
        SetEventHandler(handler)
        
        Sets the event handler for this window.
    %End

    void SetNextHandler(
        wxEvtHandler * handler
    );
    %Docstring
        SetNextHandler(handler)
        
        wxWindows cannot be used to form event handler chains; this function
        thus will assert when called.
    %End

    void SetPreviousHandler(
        wxEvtHandler * handler
    );
    %Docstring
        SetPreviousHandler(handler)
        
        wxWindows cannot be used to form event handler chains; this function
        thus will assert when called.
    %End

    long GetExtraStyle() const;
    %Docstring
        GetExtraStyle() -> long
        
        Returns the extra style bits for the window.
    %End

    long GetWindowStyleFlag() const;
    %Docstring
        GetWindowStyleFlag() -> long
        
        Gets the window style that was passed to the constructor or Create()
        method.
    %End

    long GetWindowStyle() const;
    %Docstring
        GetWindowStyle() -> long
        
        See GetWindowStyleFlag() for more info.
    %End

    bool HasExtraStyle(
        int exFlag
    ) const;
    %Docstring
        HasExtraStyle(exFlag) -> bool
        
        Returns true if the window has the given exFlag bit set in its extra
        styles.
    %End

    bool HasFlag(
        int flag
    ) const;
    %Docstring
        HasFlag(flag) -> bool
        
        Returns true if the window has the given flag bit set.
    %End

    void SetExtraStyle(
        long exStyle
    );
    %Docstring
        SetExtraStyle(exStyle)
        
        Sets the extra style bits for the window.
    %End

    void SetWindowStyleFlag(
        long style
    );
    %Docstring
        SetWindowStyleFlag(style)
        
        Sets the style of the window.
    %End

    void SetWindowStyle(
        long style
    );
    %Docstring
        SetWindowStyle(style)
        
        See SetWindowStyleFlag() for more info.
    %End

    bool ToggleWindowStyle(
        int flag
    );
    %Docstring
        ToggleWindowStyle(flag) -> bool
        
        Turns the given flag on if it's currently turned off and vice versa.
    %End

    void MoveAfterInTabOrder(
        wxWindow * win
    );
    %Docstring
        MoveAfterInTabOrder(win)
        
        Moves this window in the tab navigation order after the specified win.
    %End

    void MoveBeforeInTabOrder(
        wxWindow * win
    );
    %Docstring
        MoveBeforeInTabOrder(win)
        
        Same as MoveAfterInTabOrder() except that it inserts this window just
        before win instead of putting it right after it.
    %End

    bool Navigate(
        int flags = wxNavigationKeyEvent::IsForward
    );
    %Docstring
        Navigate(flags=NavigationKeyEvent.IsForward) -> bool
        
        Performs a keyboard navigation action starting from this window.
    %End

    bool NavigateIn(
        int flags = wxNavigationKeyEvent::IsForward
    );
    %Docstring
        NavigateIn(flags=NavigationKeyEvent.IsForward) -> bool
        
        Performs a keyboard navigation action inside this window.
    %End

    void Lower();
    %Docstring
        Lower()
        
        Lowers the window to the bottom of the window hierarchy (Z-order).
    %End

    void Raise();
    %Docstring
        Raise()
        
        Raises the window to the top of the window hierarchy (Z-order).
    %End

    bool Hide();
    %Docstring
        Hide() -> bool
        
        Equivalent to calling wxWindow::Show(false).
    %End

    bool HideWithEffect(
        wxShowEffect effect,
        unsigned int timeout = 0
    );
    %Docstring
        HideWithEffect(effect, timeout=0) -> bool
        
        This function hides a window, like Hide(), but using a special visual
        effect if possible.
    %End

    bool IsEnabled() const;
    %Docstring
        IsEnabled() -> bool
        
        Returns true if the window is enabled, i.e. if it accepts user input,
        false otherwise.
    %End

    bool IsExposed(
        int x,
        int y
    ) const;
    %Docstring
        IsExposed(x, y) -> bool
        IsExposed(pt) -> bool
        IsExposed(x, y, w, h) -> bool
        IsExposed(rect) -> bool
        
        Returns true if the given point or rectangle area has been exposed
        since the last repaint.
    %End

    bool IsExposed(
        wxPoint & pt
    ) const;

    bool IsExposed(
        int x,
        int y,
        int w,
        int h
    ) const;

    bool IsExposed(
        wxRect & rect
    ) const;

    bool IsShown() const;
    %Docstring
        IsShown() -> bool
        
        Returns true if the window is shown, false if it has been hidden.
    %End

    bool IsShownOnScreen() const;
    %Docstring
        IsShownOnScreen() -> bool
        
        Returns true if the window is physically visible on the screen, i.e.
        it is shown and all its parents up to the toplevel window are shown as
        well.
    %End

    bool Disable();
    %Docstring
        Disable() -> bool
        
        Disables the window.
    %End

    bool Enable(
        bool enable = true
    );
    %Docstring
        Enable(enable=True) -> bool
        
        Enable or disable the window for user input.
    %End

    bool Show(
        bool show = true
    );
    %Docstring
        Show(show=True) -> bool
        
        Shows or hides the window.
    %End

    bool ShowWithEffect(
        wxShowEffect effect,
        unsigned int timeout = 0
    );
    %Docstring
        ShowWithEffect(effect, timeout=0) -> bool
        
        This function shows a window, like Show(), but using a special visual
        effect if possible.
    %End

    wxString GetHelpText() const;
    %Docstring
        GetHelpText() -> String
        
        Gets the help text to be used as context-sensitive help for this
        window.
    %End

    void SetHelpText(
        const wxString & helpText
    );
    %Docstring
        SetHelpText(helpText)
        
        Sets the help text to be used as context-sensitive help for this
        window.
    %End

    wxString GetHelpTextAtPoint(
        const wxPoint & point,
        wxHelpEvent::Origin origin
    ) const;
    %Docstring
        GetHelpTextAtPoint(point, origin) -> String
        
        Gets the help text to be used as context-sensitive help for this
        window.
    %End

    wxToolTip * GetToolTip() const;
    %Docstring
        GetToolTip() -> ToolTip
        
        Get the associated tooltip or NULL if none.
    %End

    wxString GetToolTipText() const;
    %Docstring
        GetToolTipText() -> String
        
        Get the text of the associated tooltip or empty string if none.
    %End

    void SetToolTip(
        const wxString & tipString
    );
    %Docstring
        SetToolTip(tipString)
        SetToolTip(tip)
        
        Attach a tooltip to the window.
    %End

    void SetToolTip(
        wxToolTip * tip   /Transfer/
    );

    void UnsetToolTip();
    %Docstring
        UnsetToolTip()
        
        Unset any existing tooltip.
    %End

    int GetPopupMenuSelectionFromUser(
        wxMenu & menu,
        const wxPoint & pos = wxDefaultPosition
    );
    %Docstring
        GetPopupMenuSelectionFromUser(menu, pos=DefaultPosition) -> int
        GetPopupMenuSelectionFromUser(menu, x, y) -> int
        
        This function shows a popup menu at the given position in this window
        and returns the selected id.
    %End

    int GetPopupMenuSelectionFromUser(
        wxMenu & menu,
        int x,
        int y
    );

    bool PopupMenu(
        wxMenu * menu,
        const wxPoint & pos = wxDefaultPosition
    )   /ReleaseGIL/;
    %Docstring
        PopupMenu(menu, pos=DefaultPosition) -> bool
        PopupMenu(menu, x, y) -> bool
        
        Pops up the given menu at the specified coordinates, relative to this
        window, and returns control when the user has dismissed the menu.
    %End

    bool PopupMenu(
        wxMenu * menu,
        int x,
        int y
    );

    virtual
    wxValidator * GetValidator();
    %Docstring
        GetValidator() -> Validator
        
        Validator functions.
    %End

    virtual
    void SetValidator(
        const wxValidator & validator
    );
    %Docstring
        SetValidator(validator)
        
        Deletes the current validator (if any) and sets the window validator,
        having called wxValidator::Clone to create a new validator of this
        type.
    %End

    virtual
    bool TransferDataFromWindow();
    %Docstring
        TransferDataFromWindow() -> bool
        
        Transfers values from child controls to data areas specified by their
        validators.
    %End

    virtual
    bool TransferDataToWindow();
    %Docstring
        TransferDataToWindow() -> bool
        
        Transfers values to child controls from data areas specified by their
        validators.
    %End

    virtual
    bool Validate();
    %Docstring
        Validate() -> bool
        
        Validates the current values of the child controls using their
        validators.
    %End

    wxWindowID GetId() const;
    %Docstring
        GetId() -> WindowID
        
        Returns the identifier of the window.
    %End

    wxString GetLabel() const;
    %Docstring
        GetLabel() -> String
        
        Generic way of getting a label from any window, for identification
        purposes.
    %End

    wxLayoutDirection GetLayoutDirection() const;
    %Docstring
        GetLayoutDirection() -> LayoutDirection
        
        Returns the layout direction for this window, Note that
        wxLayout_Default is returned if layout direction is not supported.
    %End

    wxCoord AdjustForLayoutDirection(
        wxCoord x,
        wxCoord width,
        wxCoord widthTotal
    ) const;
    %Docstring
        AdjustForLayoutDirection(x, width, widthTotal) -> Coord
        
        Mirror coordinates for RTL layout if this window uses it and if the
        mirroring is not done automatically like Win32.
    %End

    wxString GetName() const;
    %Docstring
        GetName() -> String
        
        Returns the window's name.
    %End

    wxWindowVariant GetWindowVariant() const;
    %Docstring
        GetWindowVariant() -> WindowVariant
        
        Returns the value previously passed to SetWindowVariant().
    %End

    void SetId(
        wxWindowID winid
    );
    %Docstring
        SetId(winid)
        
        Sets the identifier of the window.
    %End

    void SetLabel(
        const wxString & label
    );
    %Docstring
        SetLabel(label)
        
        Sets the window's label.
    %End

    void SetLayoutDirection(
        wxLayoutDirection dir
    );
    %Docstring
        SetLayoutDirection(dir)
        
        Sets the layout direction for this window.
    %End

    void SetName(
        const wxString & name
    );
    %Docstring
        SetName(name)
        
        Sets the window's name.
    %End

    void SetWindowVariant(
        wxWindowVariant variant
    );
    %Docstring
        SetWindowVariant(variant)
        
        Chooses a different variant of the window display to use.
    %End

    wxAcceleratorTable * GetAcceleratorTable();
    %Docstring
        GetAcceleratorTable() -> AcceleratorTable
        
        Gets the accelerator table for this window.
    %End

    wxAccessible * GetAccessible();
    %Docstring
        GetAccessible() -> Accessible
        
        Returns the accessible object for this window, if any.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindow_GetAccessible(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxAccessible * _wxWindow_GetAccessible(wxWindow* self)
    {
        #if wxUSE_ACCESSIBILITY
            return self->GetAccessible();
        #else
            wxPyRaiseNotImplemented();
            return NULL;
        #endif
    }
    %End

    void SetAcceleratorTable(
        const wxAcceleratorTable & accel
    );
    %Docstring
        SetAcceleratorTable(accel)
        
        Sets the accelerator table for this window.
    %End

    void SetAccessible(
        wxAccessible * accessible   /Transfer/
    );
    %Docstring
        SetAccessible(accessible)
        
        Sets the accessible for this window.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxWindow_SetAccessible(sipCpp, accessible);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxWindow_SetAccessible(wxWindow* self, wxAccessible *accessible)
    {
        #if wxUSE_ACCESSIBILITY
            self->SetAccessible(accessible);
        #else
            wxPyRaiseNotImplemented();
        #endif
    }
    %End

    bool Close(
        bool force = false
    );
    %Docstring
        Close(force=False) -> bool
        
        This function simply generates a wxCloseEvent whose handler usually
        tries to close the window.
    %End

    virtual
    bool Destroy()   /TransferThis/;
    %Docstring
        Destroy() -> bool
        
        Destroys the window safely.
    %End

    bool IsBeingDeleted() const;
    %Docstring
        IsBeingDeleted() -> bool
        
        Returns true if this window is in process of being destroyed.
    %End

    wxDropTarget * GetDropTarget() const;
    %Docstring
        GetDropTarget() -> DropTarget
        
        Returns the associated drop target, which may be NULL.
    %End

    void SetDropTarget(
        wxDropTarget * target   /Transfer/
    );
    %Docstring
        SetDropTarget(target)
        
        Associates a drop target with this window.
    %End

    void DragAcceptFiles(
        bool accept
    );
    %Docstring
        DragAcceptFiles(accept)
        
        Enables or disables eligibility for drop file events (OnDropFiles).
    %End

    wxSizer * GetContainingSizer() const;
    %Docstring
        GetContainingSizer() -> Sizer
        
        Returns the sizer of which this window is a member, if any, otherwise
        NULL.
    %End

    wxSizer * GetSizer() const;
    %Docstring
        GetSizer() -> Sizer
        
        Returns the sizer associated with the window by a previous call to
        SetSizer(), or NULL.
    %End

    void SetSizer(
        wxSizer * sizer   /Transfer/,
        bool deleteOld = true
    );
    %Docstring
        SetSizer(sizer, deleteOld=True)
        
        Sets the window to have the given layout sizer.
    %End

    void SetSizerAndFit(
        wxSizer * sizer   /Transfer/,
        bool deleteOld = true
    );
    %Docstring
        SetSizerAndFit(sizer, deleteOld=True)
        
        Associate the sizer with the window and set the window size and
        minimal size accordingly.
    %End

    wxLayoutConstraints * GetConstraints() const;
    %Docstring
        GetConstraints() -> LayoutConstraints
        
        Returns a pointer to the window's layout constraints, or NULL if there
        are none.
    %End

    void SetConstraints(
        wxLayoutConstraints * constraints   /Transfer/
    );
    %Docstring
        SetConstraints(constraints)
        
        Sets the window to have the given layout constraints.
    %End

    bool Layout();
    %Docstring
        Layout() -> bool
        
        Lays out the children of this window using the associated sizer.
    %End

    void SetAutoLayout(
        bool autoLayout
    );
    %Docstring
        SetAutoLayout(autoLayout)
        
        Determines whether the Layout() function will be called automatically
        when the window is resized.
    %End

    bool GetAutoLayout() const;
    %Docstring
        GetAutoLayout() -> bool
        
        Returns the sizer of which this window is a member, if any, otherwise
        NULL.
    %End

    void CaptureMouse();
    %Docstring
        CaptureMouse()
        
        Directs all mouse input to this window.
    %End

    wxCaret * GetCaret() const;
    %Docstring
        GetCaret() -> Caret
        
        Returns the caret() associated with the window.
    %End

    const wxCursor & GetCursor() const;
    %Docstring
        GetCursor() -> Cursor
        
        Return the cursor associated with this window.
    %End

    bool HasCapture() const;
    %Docstring
        HasCapture() -> bool
        
        Returns true if this window has the current mouse capture.
    %End

    void ReleaseMouse();
    %Docstring
        ReleaseMouse()
        
        Releases mouse input captured with CaptureMouse().
    %End

    void SetCaret(
        wxCaret * caret   /Transfer/
    );
    %Docstring
        SetCaret(caret)
        
        Sets the caret() associated with the window.
    %End

    bool SetCursor(
        const wxCursor & cursor
    );
    %Docstring
        SetCursor(cursor) -> bool
        
        Sets the window's cursor.
    %End

    void WarpPointer(
        int x,
        int y
    );
    %Docstring
        WarpPointer(x, y)
        
        Moves the pointer to the given position on the window.
    %End

    bool EnableTouchEvents(
        int eventsMask
    );
    %Docstring
        EnableTouchEvents(eventsMask) -> bool
        
        Request generation of touch events for this window.
    %End

    wxHitTest HitTest(
        wxCoord x,
        wxCoord y
    ) const;
    %Docstring
        HitTest(x, y) -> HitTest
        HitTest(pt) -> HitTest
        
        Return where the given point lies, exactly.
    %End

    wxHitTest HitTest(
        const wxPoint & pt
    ) const;

    wxBorder GetBorder(
        long flags
    ) const;
    %Docstring
        GetBorder(flags) -> Border
        GetBorder() -> Border
        
        Get the window border style from the given flags: this is different
        from simply doing flags & wxBORDER_MASK because it uses
        GetDefaultBorder() to translate wxBORDER_DEFAULT to something
        reasonable.
    %End

    wxBorder GetBorder() const;

    void DoUpdateWindowUI(
        wxUpdateUIEvent & event
    );
    %Docstring
        DoUpdateWindowUI(event)
        
        Does the window-specific updating after processing the update event.
    %End

    wxUIntPtr* GetHandle() const;
    %Docstring
        GetHandle() -> UIntPtr
        
        Returns the platform-specific handle of the physical window.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindow_GetHandle(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxUIntPtr* _wxWindow_GetHandle(const wxWindow* self)
    {
        return new wxUIntPtr(wxPyGetWinHandle(self));
    }
    %End

    bool HasMultiplePages() const;
    %Docstring
        HasMultiplePages() -> bool
        
        This method should be overridden to return true if this window has
        multiple pages.
    %End

    virtual
    void InheritAttributes();
    %Docstring
        InheritAttributes()
        
        This function is (or should be, in case of custom controls) called
        during window creation to intelligently set up the window visual
        attributes, that is the font and the foreground and background
        colours.
    %End

    virtual
    void InitDialog();
    %Docstring
        InitDialog()
        
        Sends an wxEVT_INIT_DIALOG event, whose handler usually transfers data
        to the dialog via validators.
    %End

    bool IsDoubleBuffered() const;
    %Docstring
        IsDoubleBuffered() -> bool
        
        Returns true if the window contents is double-buffered by the system,
        i.e. if any drawing done on the window is really done on a temporary
        backing surface and transferred to the screen all at once later.
    %End

    void SetDoubleBuffered(
        bool on
    );
    %Docstring
        SetDoubleBuffered(on)
        
        Turn on or off double buffering of the window if the system supports
        it.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxWindow_SetDoubleBuffered(sipCpp, on);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxWindow_SetDoubleBuffered(wxWindow* self, bool on)
    {
        #if defined(__WXGTK20__) || defined(__WXGTK3__) || defined(__WXMSW__)
            self->SetDoubleBuffered(on);
        #endif
    }
    %End

    bool IsRetained() const;
    %Docstring
        IsRetained() -> bool
        
        Returns true if the window is retained, false otherwise.
    %End

    bool IsThisEnabled() const;
    %Docstring
        IsThisEnabled() -> bool
        
        Returns true if this window is intrinsically enabled, false otherwise,
        i.e. if Enable() Enable(false) had been called.
    %End

    bool IsTopLevel() const;
    %Docstring
        IsTopLevel() -> bool
        
        Returns true if the given window is a top-level one.
    %End

    virtual
    void OnInternalIdle();
    %Docstring
        OnInternalIdle()
        
        This virtual function is normally only used internally, but sometimes
        an application may need it to implement functionality that should not
        be disabled by an application defining an OnIdle handler in a derived
        class.
    %End

    bool SendIdleEvents(
        wxIdleEvent & event
    );
    %Docstring
        SendIdleEvents(event) -> bool
        
        Send idle event to window and all subwindows.
    %End

    bool RegisterHotKey(
        int hotkeyId,
        int modifiers,
        int virtualKeyCode
    );
    %Docstring
        RegisterHotKey(hotkeyId, modifiers, virtualKeyCode) -> bool
        
        Registers a system wide hotkey.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindow_RegisterHotKey(sipCpp, hotkeyId, modifiers, virtualKeyCode);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxWindow_RegisterHotKey(wxWindow* self, int hotkeyId, int modifiers, int virtualKeyCode)
    {
        #if wxUSE_HOTKEY
            return self->RegisterHotKey(hotkeyId, modifiers, virtualKeyCode);
        #else
            return false;
        #endif
    }
    %End

    bool UnregisterHotKey(
        int hotkeyId
    );
    %Docstring
        UnregisterHotKey(hotkeyId) -> bool
        
        Unregisters a system wide hotkey.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindow_UnregisterHotKey(sipCpp, hotkeyId);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxWindow_UnregisterHotKey(wxWindow* self, int hotkeyId)
    {
        #if wxUSE_HOTKEY
            return self->UnregisterHotKey(hotkeyId);
        #else
            return false;
        #endif
    }
    %End

    void UpdateWindowUI(
        long flags = wxUPDATE_UI_NONE
    );
    %Docstring
        UpdateWindowUI(flags=UPDATE_UI_NONE)
        
        This function sends one or more wxUpdateUIEvent to the window.
    %End

    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
        
        Returns the default font and colours which are used by the control.
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    wxWindow * FindFocus();
    %Docstring
        FindFocus() -> Window
        
        Finds the window or control which currently has the keyboard focus.
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    wxWindow * FindWindowById(
        long id,
        const wxWindow * parent = NULL
    );
    %Docstring
        FindWindowById(id, parent=None) -> Window
        
        Find the first window with the given id.
    %End

    static
    wxWindow * FindWindowByLabel(
        const wxString & label,
        const wxWindow * parent = NULL
    );
    %Docstring
        FindWindowByLabel(label, parent=None) -> Window
        
        Find a window by its label.
    %End

    static
    wxWindow * FindWindowByName(
        const wxString & name,
        const wxWindow * parent = NULL
    );
    %Docstring
        FindWindowByName(name, parent=None) -> Window
        
        Find a window by its name (as given in a window constructor or
        Create() function call).
    %End

    static
    wxWindow * GetCapture();
    %Docstring
        GetCapture() -> Window
        
        Returns the currently captured window.
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    wxWindowID NewControlId(
        int count = 1
    );
    %Docstring
        NewControlId(count=1) -> WindowID
        
        Create a new ID or range of IDs that are not currently in use.
    %End

    static
    void UnreserveControlId(
        wxWindowID id,
        int count = 1
    );
    %Docstring
        UnreserveControlId(id, count=1)
        
        Unreserve an ID or range of IDs that was reserved by NewControlId().
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxPanelNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr) -> bool
        
        Construct the actual window object after creating the C++ object.
    %End

    void* GetGtkWidget();
    %Docstring
        GetGtkWidget() -> void
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindow_GetGtkWidget(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void* _wxWindow_GetGtkWidget(wxWindow* self)
    {
        #ifdef __WXGTK__
            return (void*)self->GetHandle();
        #else
            return NULL;
        #endif
    }
    %End

    void AssociateHandle(long handle);
    %Docstring
        AssociateHandle(handle)
        
        Associate the window with a new native handle
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxWindow_AssociateHandle(sipCpp, handle);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxWindow_AssociateHandle(wxWindow* self, long handle)
    {
        self->AssociateHandle((WXWidget)handle);
    }
    %End

    void DissociateHandle();
    %Docstring
        DissociateHandle()
        
        Dissociate the current native handle from the window
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxWindow_DissociateHandle(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxWindow_DissociateHandle(wxWindow* self)
    {
        self->DissociateHandle();
    }
    %End

    wxWindow* GetTopLevelParent();
    %Docstring
        GetTopLevelParent() -> Window
        
        Returns the first ancestor of this window which is a top-level window.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindow_GetTopLevelParent(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxWindow* _wxWindow_GetTopLevelParent(wxWindow* self)
    {
        return wxGetTopLevelParent(self);
    }
    %End

    bool MacIsWindowScrollbar(const wxWindow* sb);
    %Docstring
        MacIsWindowScrollbar(sb)
        
        Is the given widget one of this window's built-in scrollbars?  Only
        applicable on Mac.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxWindow_MacIsWindowScrollbar(sipCpp, sb);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxWindow_MacIsWindowScrollbar(wxWindow* self, const wxWindow* sb)
    {
        #ifdef __WXMAC__
            return self->MacIsWindowScrollbar(sb);
        #else
            return false;
        #endif
    }
    %End

    void SetDimensions(int x,  int y,  int width,  int height,  int sizeFlags=wxSIZE_AUTO);
    %Docstring
        SetDimensions(x, y, width, height, sizeFlags=SIZE_AUTO)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxWindow_SetDimensions(sipCpp, x, y, width, height, sizeFlags);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxWindow_SetDimensions(wxWindow* self, int x, int y, int width, int height, int sizeFlags)
    {
        self->SetSize(x, y, width, height, sizeFlags);
    }
    %End

    %Property(name=AcceleratorTable, get=GetAcceleratorTable, set=SetAcceleratorTable)
    %Property(name=AutoLayout, get=GetAutoLayout, set=SetAutoLayout)
    %Property(name=BackgroundColour, get=GetBackgroundColour, set=SetBackgroundColour)
    %Property(name=BackgroundStyle, get=GetBackgroundStyle, set=SetBackgroundStyle)
    %Property(name=EffectiveMinSize, get=GetEffectiveMinSize)
    %Property(name=BestSize, get=GetBestSize)
    %Property(name=BestVirtualSize, get=GetBestVirtualSize)
    %Property(name=Border, get=GetBorder)
    %Property(name=Caret, get=GetCaret, set=SetCaret)
    %Property(name=CharHeight, get=GetCharHeight)
    %Property(name=CharWidth, get=GetCharWidth)
    %Property(name=Children, get=GetChildren)
    %Property(name=ClientAreaOrigin, get=GetClientAreaOrigin)
    %Property(name=ClientSize, get=GetClientSize, set=SetClientSize)
    %Property(name=Constraints, get=GetConstraints, set=SetConstraints)
    %Property(name=ContainingSizer, get=GetContainingSizer, set=SetContainingSizer)
    %Property(name=Cursor, get=GetCursor, set=SetCursor)
    %Property(name=DefaultAttributes, get=GetDefaultAttributes)
    %Property(name=DropTarget, get=GetDropTarget, set=SetDropTarget)
    %Property(name=EventHandler, get=GetEventHandler, set=SetEventHandler)
    %Property(name=ExtraStyle, get=GetExtraStyle, set=SetExtraStyle)
    %Property(name=Font, get=GetFont, set=SetFont)
    %Property(name=ForegroundColour, get=GetForegroundColour, set=SetForegroundColour)
    %Property(name=GrandParent, get=GetGrandParent)
    %Property(name=TopLevelParent, get=GetTopLevelParent)
    %Property(name=Handle, get=GetHandle)
    %Property(name=HelpText, get=GetHelpText, set=SetHelpText)
    %Property(name=Id, get=GetId, set=SetId)
    %Property(name=Label, get=GetLabel, set=SetLabel)
    %Property(name=LayoutDirection, get=GetLayoutDirection, set=SetLayoutDirection)
    %Property(name=MaxHeight, get=GetMaxHeight)
    %Property(name=MaxSize, get=GetMaxSize, set=SetMaxSize)
    %Property(name=MaxWidth, get=GetMaxWidth)
    %Property(name=MinHeight, get=GetMinHeight)
    %Property(name=MinSize, get=GetMinSize, set=SetMinSize)
    %Property(name=MinWidth, get=GetMinWidth)
    %Property(name=Name, get=GetName, set=SetName)
    %Property(name=Parent, get=GetParent)
    %Property(name=Position, get=GetPosition, set=SetPosition)
    %Property(name=ScreenPosition, get=GetScreenPosition)
    %Property(name=ScreenRect, get=GetScreenRect)
    %Property(name=Size, get=GetSize, set=SetSize)
    %Property(name=Sizer, get=GetSizer, set=SetSizer)
    %Property(name=ThemeEnabled, get=GetThemeEnabled, set=SetThemeEnabled)
    %Property(name=ToolTip, get=GetToolTip, set=SetToolTip)
    %Property(name=UpdateClientRect, get=GetUpdateClientRect)
    %Property(name=UpdateRegion, get=GetUpdateRegion)
    %Property(name=Validator, get=GetValidator, set=SetValidator)
    %Property(name=VirtualSize, get=GetVirtualSize, set=SetVirtualSize)
    %Property(name=WindowStyle, get=GetWindowStyle, set=SetWindowStyle)
    %Property(name=WindowStyleFlag, get=GetWindowStyleFlag, set=SetWindowStyleFlag)
    %Property(name=WindowVariant, get=GetWindowVariant, set=SetWindowVariant)
    %Property(name=Shown, get=IsShown, set=Show)
    %Property(name=Enabled, get=IsEnabled, set=Enable)
    %Property(name=TopLevel, get=IsTopLevel)
    %Property(name=MinClientSize, get=GetMinClientSize, set=SetMinClientSize)
    %Property(name=MaxClientSize, get=GetMaxClientSize, set=SetMaxClientSize)
    public:
    virtual wxWindow *GetMainWindowOfCompositeControl();


    protected:
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


        %ConvertToSubClassCode
            const wxClassInfo* info   = sipCpp->GetClassInfo();
            wxString           name   = info->GetClassName();
            bool               exists = sipFindType(name.c_str()) != NULL;
            while (info && !exists) {
                info = info->GetBaseClass1();
                name = info->GetClassName();
                exists = sipFindType(name.c_str()) != NULL;
            }
            if (info)
                sipType = sipFindType(name.c_str());
            else
                sipType = NULL;
        %End



protected:
    virtual
    wxSize DoGetBestSize() const;
    %Docstring
        DoGetBestSize() -> Size
        
        Implementation of GetBestSize() that can be overridden.
    %End

    virtual
    wxSize DoGetBestClientSize() const;
    %Docstring
        DoGetBestClientSize() -> Size
        
        Override this method to return the best size for a custom control.
    %End

    void SendDestroyEvent();
    %Docstring
        SendDestroyEvent()
        
        Generate wxWindowDestroyEvent for this window.
    %End

    virtual
    bool ProcessEvent(
        wxEvent & event
    )   /ReleaseGIL/;
    %Docstring
        ProcessEvent(event) -> bool
        
        This function is public in wxEvtHandler but protected in wxWindow
        because for wxWindows you should always call ProcessEvent() on the
        pointer returned by GetEventHandler() and not on the wxWindow object
        itself.
    %End

};  // end of class wxWindow


%Extract(id=pycode_core)
def _Window_SetRect(self, rect):
    return self.SetSize(rect)
Window.SetRect = _Window_SetRect
del _Window_SetRect
%End

%Extract(id=pycode_core)
Window.Rect = property(Window.GetRect, Window.SetRect)
%End

%Extract(id=pycode_core)
def _Window_SetClientRect(self, rect):
    return self.SetClientSize(rect)
Window.SetClientRect = _Window_SetClientRect
del _Window_SetClientRect
%End

%Extract(id=pycode_core)
Window.ClientRect = property(Window.GetClientRect, Window.SetClientRect)
%End

%Extract(id=pycode_core)
Window.SetDimensions = wx.deprecated(Window.SetDimensions, 'Use SetSize instead.')

%End

%Extract(id=pycode_core)
def _Window___nonzero__(self):
    """
    Can be used to test if the C++ part of the window still exists, with 
    code like this::
    
        if theWindow:
            doSomething()
    """
    import wx.siplib
    return not wx.siplib.isdeleted(self)
Window.__nonzero__ = _Window___nonzero__
del _Window___nonzero__
%End

%Extract(id=pycode_core)
Window.__bool__ = Window.__nonzero__

%End

%Extract(id=pycode_core)
def _Window_DestroyLater(self):
    """
    Schedules the window to be destroyed in the near future.
    
    This should be used whenever Destroy could happen too soon, such
    as when there may still be events for this window or its children
    waiting in the event queue.
    """
    self.Hide()
    wx.GetApp().ScheduleForDestruction(self)
Window.DestroyLater = _Window_DestroyLater
del _Window_DestroyLater
%End

%Extract(id=pycode_core)
def _Window_DLG_UNIT(self, dlg_unit):
    """
    A convenience wrapper for :meth:`ConvertDialogToPixels`.
    """
    is_wxType = isinstance(dlg_unit, (wx.Size, wx.Point))
    pix = self.ConvertDialogToPixels(dlg_unit)
    if not is_wxType:
        pix = tuple(pix)
    return pix
Window.DLG_UNIT = _Window_DLG_UNIT
del _Window_DLG_UNIT
%End

%Extract(id=pycode_core)
def _Window_PostCreate(self, pre):
    pass
Window.PostCreate = wx.deprecated(_Window_PostCreate, "PostCreate is no longer necessary.")
del _Window_PostCreate
%End

%Extract(id=pycode_core)
def _Window_GetPositionTuple(self):
    return self.GetPosition()
Window.GetPositionTuple = wx.deprecated(_Window_GetPositionTuple, "Use GetPosition instead")
del _Window_GetPositionTuple
%End

%Extract(id=pycode_core)
def _Window_GetSizeTuple(self):
    return self.GetSize()
Window.GetSizeTuple = wx.deprecated(_Window_GetSizeTuple, "Use GetSize instead")
del _Window_GetSizeTuple
%End

%Extract(id=pycode_core)
def _Window_MoveXY(self, x, y):
    return self.Move(x, y)
Window.MoveXY = wx.deprecated(_Window_MoveXY, "Use Move instead.")
del _Window_MoveXY
%End

%Extract(id=pycode_core)
def _Window_SetSizeWH(self, w, h):
    return self.SetSize(w,h)
Window.SetSizeWH = wx.deprecated(_Window_SetSizeWH, "Use SetSize instead.")
del _Window_SetSizeWH
%End

%Extract(id=pycode_core)
def _Window_SetVirtualSizeWH(self, w, h):
    return self.SetVirtualSize(w,h)
Window.SetVirtualSizeWH = wx.deprecated(_Window_SetVirtualSizeWH, "Use SetVirtualSize instead.")
del _Window_SetVirtualSizeWH
%End

%Extract(id=pycode_core)
def _Window_GetVirtualSizeTuple(self):
    return self.GetVirtualSize()
Window.GetVirtualSizeTuple = wx.deprecated(_Window_GetVirtualSizeTuple, "Use GetVirtualSize instead.")
del _Window_GetVirtualSizeTuple
%End

%Extract(id=pycode_core)
def _Window_SetToolTipString(self, string):
    return self.SetToolTip(string)
Window.SetToolTipString = wx.deprecated(_Window_SetToolTipString, "Use SetToolTip instead.")
del _Window_SetToolTipString
%End

%Extract(id=pycode_core)
def _Window_ConvertDialogPointToPixels(self, point):
    return self.ConvertDialogToPixels(point)
Window.ConvertDialogPointToPixels = wx.deprecated(_Window_ConvertDialogPointToPixels, "Use ConvertDialogToPixels instead.")
del _Window_ConvertDialogPointToPixels
%End

%Extract(id=pycode_core)
def _Window_ConvertDialogSizeToPixels(self, size):
    return self.ConvertDialogToPixels(point)
Window.ConvertDialogSizeToPixels = wx.deprecated(_Window_ConvertDialogSizeToPixels, "Use ConvertDialogToPixels instead.")
del _Window_ConvertDialogSizeToPixels
%End

%Extract(id=pycode_core)
def _Window_SetSizeHintsSz(self, minSize, maxSize=wx.DefaultSize, incSize=wx.DefaultSize):
    return self.SetSizeHints(minSize, maxSize, incSize)
Window.SetSizeHintsSz = wx.deprecated(_Window_SetSizeHintsSz, "Use SetSizeHints instead.")
del _Window_SetSizeHintsSz
%End

wxWindow * wxFindWindowAtPointer(
    wxPoint & pt   /Out/
);
%Docstring
    FindWindowAtPointer() -> (Window, pt)
    
    Find the deepest window at the mouse pointer position, returning the
    window and current pointer position in screen coordinates.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

wxWindow * wxGetActiveWindow();
%Docstring
    GetActiveWindow() -> Window
    
    Gets the currently active window (implemented for MSW and GTK only
    currently, always returns NULL in the other ports).
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

wxWindow * wxGetTopLevelParent(
    wxWindow * window
);
%Docstring
    GetTopLevelParent(window) -> Window
    
    Returns the first top level parent of the given window, or in other
    words, the frame or dialog containing it, or NULL.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

%Extract(id=pycode_core)
class FrozenWindow(object):
    """
    A context manager to be used with Python 'with' statements
    that will freeze the given window for the duration of the
    with block.
    """
    def __init__(self, window):
        self._win = window
    def __enter__(self):
        self._win.Freeze()
        return self
    def __exit__(self, exc_type, exc_val, exc_tb):
        self._win.Thaw()

%End

%Extract(id=pycode_core)
def DLG_UNIT(win, dlg_unit, val2=None):
    """
    Convenience function for converting a wx.Point, wx.Size or
    (x,y) in dialog units to pixels, using the given window as a
    reference.
    """
    if val2 is not None:
        dlg_unit = (dlg_unit, val2)
    is_wxType = isinstance(dlg_unit, (wx.Size, wx.Point))
    pix = win.ConvertDialogToPixels(dlg_unit)
    if not is_wxType:
        pix = tuple(pix)
    return pix

DLG_PNT = wx.deprecated(DLG_UNIT, "Use DLG_UNIT instead.")
DLG_SZE = wx.deprecated(DLG_UNIT, "Use DLG_UNIT instead.")

%End

class wxWindowList_iterator /Abstract/
{
    // the C++ implementation of this class
    %TypeHeaderCode
        
        
        class wxWindowList_iterator {
        public:
            wxWindowList_iterator(wxWindowList::compatibility_iterator start)
                : m_node(start) {}

            wxWindow* __next__() {
                wxWindow* obj = NULL;
                if (m_node) {
                    obj = (wxWindow*) m_node->GetData();
                    m_node = m_node->GetNext();
                }
                else {
                    PyErr_SetString(PyExc_StopIteration, "");
                }
                return (wxWindow*)obj;
            }
        private:
            wxWindowList::compatibility_iterator m_node;
        };
    %End
public:
    wxWindow* __next__();
    %MethodCode
        sipRes = sipCpp->__next__();
        if (PyErr_Occurred())
            return NULL;
    %End
};

class wxWindowList
{
    %TypeHeaderCode
        
        
    %End
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->size();
    %End

    wxWindow* __getitem__(long index);
    %MethodCode
        if (0 > index)
            index += sipCpp->size();

        if (index < sipCpp->size() && (0 <= index)) {
            wxWindowList::compatibility_iterator node = sipCpp->Item(index);
            if (node)
                sipRes = (wxWindow*)node->GetData();
        }
        else {
            wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
            sipError = sipErrorFail;
        }
    %End

    int __contains__(const wxWindow* obj);
    %MethodCode
        wxWindowList::compatibility_iterator node;
        node = sipCpp->Find((wxWindow*)obj);
        sipRes = node != NULL;
    %End

    wxWindowList_iterator* __iter__() /Factory/;
    %MethodCode
        sipRes =  new wxWindowList_iterator(sipCpp->GetFirst());
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxWindow* obj);
    %MethodCode
        int idx = sipCpp->IndexOf((wxWindow*)obj);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
        }
        sipRes = idx;
    %End

    
};

%Extract(id=pycode_core)
def _WindowList___repr__(self):
    return "WindowList: " + repr(list(self))
WindowList.__repr__ = _WindowList___repr__
del _WindowList___repr__
%End


wxWindowList* GetTopLevelWindows()   /NoCopy/;
%Docstring
    GetTopLevelWindows() -> WindowList
    
    Returns a list-like object of the the application's top-level windows,
    (frames,dialogs, etc.)
%End
%MethodCode
    PyErr_Clear();
    Py_BEGIN_ALLOW_THREADS
    sipRes = _GetTopLevelWindows_function();
    Py_END_ALLOW_THREADS
    if (PyErr_Occurred()) sipIsErr = 1;
%End
%ModuleCode
wxWindowList* _GetTopLevelWindows_function()
{
    return &wxTopLevelWindows;
}
%End

%Extract(id=pycode_core)
PyWindow = wx.deprecated(Window, 'Use Window instead.')

%End

wxWindow* FindWindowById(long id,  const wxWindow* parent=NULL);
%Docstring
    FindWindowById(id, parent=None) -> Window
    
    FindWindowById(id, parent=None) -> Window
    
    Find the first window in the application with the given id. If parent
    is None, the search will start from all top-level frames and dialog
    boxes; if non-None, the search will be limited to the given window
    hierarchy. The search is recursive in both cases.
%End
%MethodCode
    PyErr_Clear();
    Py_BEGIN_ALLOW_THREADS
    sipRes = _FindWindowById_function(id, parent);
    Py_END_ALLOW_THREADS
    if (PyErr_Occurred()) sipIsErr = 1;
%End
%ModuleCode
wxWindow* _FindWindowById_function(long id, const wxWindow* parent)
{
    return wxWindow::FindWindowById(id, parent);
}
%End

wxWindow* FindWindowByName(const wxString& name,  const wxWindow* parent=NULL);
%Docstring
    FindWindowByName(name, parent=None) -> Window
    
    FindWindowByName(name, parent=None) -> Window
    
    Find a window by its name (as given in a window constructor or Create
    function call). If parent is None, the search will start from all
    top-level frames and dialog boxes; if non-None, the search will be
    limited to the given window hierarchy. The search is recursive in both
    cases.
    
    If no window with the name is found, wx.FindWindowByLabel is called.
%End
%MethodCode
    PyErr_Clear();
    Py_BEGIN_ALLOW_THREADS
    sipRes = _FindWindowByName_function(name, parent);
    Py_END_ALLOW_THREADS
    if (PyErr_Occurred()) sipIsErr = 1;
%End
%ModuleCode
wxWindow* _FindWindowByName_function(const wxString* name, const wxWindow* parent)
{
    return wxWindow::FindWindowByName(*name, parent);
}
%End

wxWindow* FindWindowByLabel(const wxString& label,  const wxWindow* parent=NULL);
%Docstring
    FindWindowByLabel(label, parent=None) -> Window
    
    FindWindowByLabel(label, parent=None) -> Window
    
    Find a window by its label. Depending on the type of window, the label
    may be a window title or panel item label. If parent is None, the
    search will start from all top-level frames and dialog boxes; if
    non-None, the search will be limited to the given window
    hierarchy. The search is recursive in both cases.
%End
%MethodCode
    PyErr_Clear();
    Py_BEGIN_ALLOW_THREADS
    sipRes = _FindWindowByLabel_function(label, parent);
    Py_END_ALLOW_THREADS
    if (PyErr_Occurred()) sipIsErr = 1;
%End
%ModuleCode
wxWindow* _FindWindowByLabel_function(const wxString* label, const wxWindow* parent)
{
    return wxWindow::FindWindowByLabel(*label, parent);
}
%End


//---------------------------------------------------------------------------

