//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _media.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/mediactrl.h>
#include <wx/uri.h>
#if !wxUSE_MEDIACTRL
class wxMediaCtrl;
class wxMediaEvent;

enum wxMediaState {
    wxMEDIASTATE_STOPPED,
    wxMEDIASTATE_PAUSED,
    wxMEDIASTATE_PLAYING,
};

enum wxMediaCtrlPlayerControls {
    wxMEDIACTRLPLAYERCONTROLS_NONE,
    wxMEDIACTRLPLAYERCONTROLS_STEP,
    wxMEDIACTRLPLAYERCONTROLS_VOLUME,
    wxMEDIACTRLPLAYERCONTROLS_DEFAULT,
};
extern wxEventType wxEVT_MEDIA_LOADED;
extern wxEventType wxEVT_MEDIA_STOP;
extern wxEventType wxEVT_MEDIA_FINISHED;
extern wxEventType wxEVT_MEDIA_STATECHANGED;
extern wxEventType wxEVT_MEDIA_PLAY;
extern wxEventType wxEVT_MEDIA_PAUSE;

class wxMediaCtrl : public wxControl {
public:
    wxMediaCtrl()
        { wxPyRaiseNotImplemented(); }

    wxMediaCtrl(wxWindow *parent, wxWindowID id, const wxString &fileName=wxEmptyString, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=0, const wxString &szBackend=wxEmptyString, const wxValidator &validator=wxDefaultValidator, const wxString &name="mediaCtrl")
        { wxPyRaiseNotImplemented(); }

    bool Create(wxWindow *parent, wxWindowID id, const wxString &fileName=wxEmptyString, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=0, const wxString &szBackend=wxEmptyString, const wxValidator &validator=wxDefaultValidator, const wxString &name="mediaCtrl")
        { return false; }

    wxSize GetBestSize() const 
        { return wxDefaultSize; }

    double GetPlaybackRate()
        { return 0.0; }

    wxMediaState GetState()
        { return wxMEDIASTATE_STOPPED; }

    double GetVolume()
        { return 0.0; }

    wxFileOffset Length()
        { return 0; }

    bool Load(const wxString &fileName)
        { return false; }

    bool Load(const wxURI &uri)
        { return false; }

    bool Load(const wxURI &uri, const wxURI &proxy)
        { return false; }

    bool LoadURI(const wxString &uri)
        { return false; }

    bool LoadURIWithProxy(const wxString &uri, const wxString &proxy)
        { return false; }

    bool Pause()
        { return false; }

    bool Play()
        { return false; }

    wxFileOffset Seek(wxFileOffset where, wxSeekMode mode=wxFromStart)
        { return 0; }

    bool SetPlaybackRate(double dRate)
        { return false; }

    bool SetVolume(double dVolume)
        { return false; }

    bool ShowPlayerControls(wxMediaCtrlPlayerControls flags=wxMEDIACTRLPLAYERCONTROLS_DEFAULT)
        { return false; }

    bool Stop()
        { return false; }

    wxFileOffset Tell()
        { return 0; }

};

class wxMediaEvent : public wxNotifyEvent {
public:
    wxMediaEvent(wxEventType commandType=wxEVT_NULL, int winid=0)
        { wxPyRaiseNotImplemented(); }

};
#endif //!wxUSE_MEDIACTRL

%End

%ModuleCode
#if !wxUSE_MEDIACTRL
wxEventType wxEVT_MEDIA_LOADED;
wxEventType wxEVT_MEDIA_STOP;
wxEventType wxEVT_MEDIA_FINISHED;
wxEventType wxEVT_MEDIA_STATECHANGED;
wxEventType wxEVT_MEDIA_PLAY;
wxEventType wxEVT_MEDIA_PAUSE;
#endif //!wxUSE_MEDIACTRL

%End

//---------------------------------------------------------------------------

enum wxMediaState
{
    wxMEDIASTATE_STOPPED,
    wxMEDIASTATE_PAUSED,
    wxMEDIASTATE_PLAYING
};

enum wxMediaCtrlPlayerControls
{
    wxMEDIACTRLPLAYERCONTROLS_NONE,
    wxMEDIACTRLPLAYERCONTROLS_STEP,
    wxMEDIACTRLPLAYERCONTROLS_VOLUME,
    wxMEDIACTRLPLAYERCONTROLS_DEFAULT
};

wxEventType wxEVT_MEDIA_LOADED   /PyName=wxEVT_MEDIA_LOADED/;

wxEventType wxEVT_MEDIA_STOP   /PyName=wxEVT_MEDIA_STOP/;

wxEventType wxEVT_MEDIA_FINISHED   /PyName=wxEVT_MEDIA_FINISHED/;

wxEventType wxEVT_MEDIA_STATECHANGED   /PyName=wxEVT_MEDIA_STATECHANGED/;

wxEventType wxEVT_MEDIA_PLAY   /PyName=wxEVT_MEDIA_PLAY/;

wxEventType wxEVT_MEDIA_PAUSE   /PyName=wxEVT_MEDIA_PAUSE/;

class wxMediaCtrl : wxControl
{
    %Docstring
        MediaCtrl()
        MediaCtrl(parent, id=-1, fileName=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, szBackend=wx.EmptyString, validator=wx.DefaultValidator, name="mediaCtrl")
        
        wxMediaCtrl is a class for displaying various types of media, such as
        videos, audio files, natively through native codecs.
    %End
    %TypeHeaderCode
        #include <wx/mediactrl.h>
    %End

public:
    wxMediaCtrl();

    wxMediaCtrl(
        wxWindow * parent,
        wxWindowID id = -1,
        const wxString & fileName = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & szBackend = wxEmptyString,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = "mediaCtrl"
    );

    bool Create(
        wxWindow * parent,
        wxWindowID id = -1,
        const wxString & fileName = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & szBackend = wxEmptyString,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = "mediaCtrl"
    );
    %Docstring
        Create(parent, id=-1, fileName=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, szBackend=wx.EmptyString, validator=wx.DefaultValidator, name="mediaCtrl") -> bool
        
        Creates this control.
    %End

    wxSize GetBestSize() const;
    %Docstring
        GetBestSize() -> wx.Size
        
        Obtains the best size relative to the original/natural size of the
        video, if there is any.
    %End

    double GetPlaybackRate();
    %Docstring
        GetPlaybackRate() -> double
        
        Obtains the playback rate, or speed of the media.
    %End

    wxMediaState GetState();
    %Docstring
        GetState() -> MediaState
        
        Obtains the state the playback of the media is in.
    %End

    double GetVolume();
    %Docstring
        GetVolume() -> double
        
        Gets the volume of the media from a 0.0 to 1.0 range.
    %End

    wxFileOffset Length();
    %Docstring
        Length() -> FileOffset
        
        Obtains the length - the total amount of time the media has in
        milliseconds.
    %End

    bool Load(
        const wxString & fileName
    );
    %Docstring
        Load(fileName) -> bool
        
        Loads the file that fileName refers to.
    %End

    bool LoadURI(
        const wxString & uri
    );
    %Docstring
        LoadURI(uri) -> bool
        
        Loads the location that uri refers to.
    %End

    bool LoadURIWithProxy(
        const wxString & uri,
        const wxString & proxy
    );
    %Docstring
        LoadURIWithProxy(uri, proxy) -> bool
        
        Loads the location that uri refers to with the proxy proxy.
    %End

    bool Pause();
    %Docstring
        Pause() -> bool
        
        Pauses playback of the media.
    %End

    bool Play();
    %Docstring
        Play() -> bool
        
        Resumes playback of the media.
    %End

    wxFileOffset Seek(
        wxFileOffset where,
        wxSeekMode mode = wxFromStart
    );
    %Docstring
        Seek(where, mode=wx.FromStart) -> FileOffset
        
        Seeks to a position within the media.
    %End

    bool SetPlaybackRate(
        double dRate
    );
    %Docstring
        SetPlaybackRate(dRate) -> bool
        
        Sets the playback rate, or speed of the media, to that referred by
        dRate.
    %End

    bool SetVolume(
        double dVolume
    );
    %Docstring
        SetVolume(dVolume) -> bool
        
        Sets the volume of the media from a 0.0 to 1.0 range to that referred
        by dVolume.
    %End

    bool ShowPlayerControls(
        wxMediaCtrlPlayerControls flags = wxMEDIACTRLPLAYERCONTROLS_DEFAULT
    );
    %Docstring
        ShowPlayerControls(flags=MEDIACTRLPLAYERCONTROLS_DEFAULT) -> bool
        
        A special feature to wxMediaCtrl.
    %End

    bool Stop();
    %Docstring
        Stop() -> bool
        
        Stops the media.
    %End

    wxFileOffset Tell();
    %Docstring
        Tell() -> FileOffset
        
        Obtains the current position in time within the media in milliseconds.
    %End

    private:
        wxMediaCtrl(const wxMediaCtrl&);


    public:


    %Property(name=BestSize, get=GetBestSize)
    %Property(name=PlaybackRate, get=GetPlaybackRate, set=SetPlaybackRate)
    %Property(name=State, get=GetState)
    %Property(name=Volume, get=GetVolume, set=SetVolume)
};  // end of class wxMediaCtrl


class wxMediaEvent : wxNotifyEvent
{
    %Docstring
        MediaEvent(commandType=wx.wxEVT_NULL, winid=0)
        
        Event wxMediaCtrl uses.
    %End
    %TypeHeaderCode
        #include <wx/mediactrl.h>
    %End

public:
    wxMediaEvent(
        wxEventType commandType = wxEVT_NULL,
        int winid = 0
    );

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxMediaEvent& operator=(const wxMediaEvent&);


};  // end of class wxMediaEvent


const int wxUSE_MEDIACTRL;
%Extract(id=pycode_media)
EVT_MEDIA_LOADED = wx.PyEventBinder( wxEVT_MEDIA_LOADED )
EVT_MEDIA_STOP = wx.PyEventBinder( wxEVT_MEDIA_STOP )
EVT_MEDIA_FINISHED = wx.PyEventBinder( wxEVT_MEDIA_FINISHED )
EVT_MEDIA_STATECHANGED = wx.PyEventBinder( wxEVT_MEDIA_STATECHANGED )
EVT_MEDIA_PLAY = wx.PyEventBinder( wxEVT_MEDIA_PLAY )
EVT_MEDIA_PAUSE = wx.PyEventBinder( wxEVT_MEDIA_PAUSE )

%End

%Extract(id=pycode_media)
MEDIABACKEND_DIRECTSHOW = "wxAMMediaBackend"
MEDIABACKEND_MCI        = "wxMCIMediaBackend"
MEDIABACKEND_QUICKTIME  = "wxQTMediaBackend"
MEDIABACKEND_GSTREAMER  = "wxGStreamerMediaBackend"
MEDIABACKEND_REALPLAYER = "wxRealPlayerMediaBackend"
MEDIABACKEND_WMP10      = "wxWMP10MediaBackend"

%End


//---------------------------------------------------------------------------

