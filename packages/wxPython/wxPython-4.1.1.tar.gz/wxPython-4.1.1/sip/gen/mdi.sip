//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxMDIChildFrameBase : wxFrame
{
public:
    wxMDIChildFrameBase();
    virtual void Activate() = 0;
    wxMDIParentFrame *GetMDIParent() const;
    virtual bool IsTopLevel() const;
};

class wxTDIChildFrame : wxMDIChildFrameBase /Abstract/
{
public:
};


class wxMDIClientWindow : wxWindow
{
    %Docstring
        MDIClientWindow()
        
        An MDI client window is a child of wxMDIParentFrame, and manages zero
        or more wxMDIChildFrame objects.
    %End
    %TypeHeaderCode
        #include <wx/mdi.h>
    %End

public:
    wxMDIClientWindow();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    bool CreateClient(
        wxMDIParentFrame * parent,
        long style = 0
    );
    %Docstring
        CreateClient(parent, style=0) -> bool
        
        Called by wxMDIParentFrame immediately after creating the client
        window.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

};  // end of class wxMDIClientWindow


class wxMDIParentFrame : wxFrame
{
    %Docstring
        MDIParentFrame()
        MDIParentFrame(parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE|VSCROLL|HSCROLL, name=FrameNameStr)
        
        An MDI (Multiple Document Interface) parent frame is a window which
        can contain MDI child frames in its client area which emulates the
        full desktop.
    %End
    %TypeHeaderCode
        #include <wx/mdi.h>
    %End

public:
    wxMDIParentFrame();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxMDIParentFrame(
        wxWindow * parent,
        wxWindowID id = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL,
        const wxString & name = wxFrameNameStr
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxMDIParentFrame();

    void ActivateNext();
    %Docstring
        ActivateNext()
        
        Activates the MDI child following the currently active one.
    %End

    void ActivatePrevious();
    %Docstring
        ActivatePrevious()
        
        Activates the MDI child preceding the currently active one.
    %End

    void ArrangeIcons();
    %Docstring
        ArrangeIcons()
        
        Arranges any iconized (minimized) MDI child windows.
    %End

    void Cascade();
    %Docstring
        Cascade()
        
        Arranges the MDI child windows in a cascade.
    %End

    bool Create(
        wxWindow * parent,
        wxWindowID id = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL,
        const wxString & name = wxFrameNameStr
    )   /TransferThis/;
    %Docstring
        Create(parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE|VSCROLL|HSCROLL, name=FrameNameStr) -> bool
        
        Used in two-step frame construction.
    %End

    wxMDIChildFrame * GetActiveChild() const;
    %Docstring
        GetActiveChild() -> MDIChildFrame
        
        Returns a pointer to the active MDI child, if there is one.
    %End

    wxMDIClientWindow * GetClientWindow() const;
    %Docstring
        GetClientWindow() -> MDIClientWindow
        
        Returns a pointer to the client window.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxMDIParentFrame_GetClientWindow(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxMDIClientWindow * _wxMDIParentFrame_GetClientWindow(const wxMDIParentFrame* self)
    {
        return static_cast<wxMDIClientWindow*>(self->GetClientWindow());
    }
    %End

    wxMenu * GetWindowMenu() const;
    %Docstring
        GetWindowMenu() -> Menu
        
        Returns the current MDI Window menu.
    %End

    virtual
    wxMDIClientWindow * OnCreateClient();
    %Docstring
        OnCreateClient() -> MDIClientWindow
        
        Override this to return a different kind of client window.
    %End

    void SetWindowMenu(
        wxMenu * menu
    );
    %Docstring
        SetWindowMenu(menu)
        
        Replace the current MDI Window menu.
    %End

    void Tile(
        wxOrientation orient = wxHORIZONTAL
    );
    %Docstring
        Tile(orient=HORIZONTAL)
        
        Tiles the MDI child windows either horizontally or vertically
        depending on whether orient is wxHORIZONTAL or wxVERTICAL.
    %End

    static
    bool IsTDI();
    %Docstring
        IsTDI() -> bool
        
        Returns whether the MDI implementation is tab-based.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ActiveChild, get=GetActiveChild)
    %Property(name=ClientWindow, get=GetClientWindow)
    %Property(name=WindowMenu, get=GetWindowMenu, set=SetWindowMenu)
};  // end of class wxMDIParentFrame


class wxMDIChildFrame : wxMDIChildFrameBase
{
    %Docstring
        MDIChildFrame()
        MDIChildFrame(parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr)
        
        An MDI child frame is a frame that can only exist inside a
        wxMDIClientWindow, which is itself a child of wxMDIParentFrame.
    %End
    %TypeHeaderCode
        #include <wx/mdi.h>
    %End

public:
    wxMDIChildFrame();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxMDIChildFrame(
        wxMDIParentFrame * parent,
        wxWindowID id = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_FRAME_STYLE,
        const wxString & name = wxFrameNameStr
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxMDIChildFrame();

    void Activate();
    %Docstring
        Activate()
        
        Activates this MDI child frame.
    %End

    bool Create(
        wxMDIParentFrame * parent,
        wxWindowID id = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_FRAME_STYLE,
        const wxString & name = wxFrameNameStr
    )   /TransferThis/;
    %Docstring
        Create(parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr) -> bool
        
        Used in two-step frame construction.
    %End

    wxMDIParentFrame * GetMDIParent() const;
    %Docstring
        GetMDIParent() -> MDIParentFrame
        
        Returns the MDI parent frame containing this child.
    %End

    bool IsAlwaysMaximized() const;
    %Docstring
        IsAlwaysMaximized() -> bool
        
        Returns true for MDI children in TDI implementations.
    %End

    void Maximize(
        bool maximize = true
    );
    %Docstring
        Maximize(maximize=True)
        
        Maximizes this MDI child frame.
    %End

    void Restore();
    %Docstring
        Restore()
        
        Restores this MDI child frame (unmaximizes).
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=MDIParent, get=GetMDIParent)
};  // end of class wxMDIChildFrame



//---------------------------------------------------------------------------

