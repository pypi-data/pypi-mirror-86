//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

enum 
{
    wxCC_SPECIAL_DCLICK,
    wxCC_STD_BUTTON
};

class wxComboPopup
{
    %Docstring
        ComboPopup()
        
        In order to use a custom popup with wxComboCtrl, an interface class
        must be derived from wxComboPopup.
    %End
    %TypeHeaderCode
        #include <wx/combo.h>
    %End

public:
    wxComboPopup();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    bool Create(
        wxWindow * parent
    ) = 0;
    %Docstring
        Create(parent) -> bool
        
        The derived class must implement this to create the popup control.
    %End

    virtual
    void DestroyPopup();
    %Docstring
        DestroyPopup()
        
        You only need to implement this member function if you create your
        popup class in non-standard way.
    %End

    void Dismiss();
    %Docstring
        Dismiss()
        
        Utility function that hides the popup.
    %End

    virtual
    bool FindItem(
        const wxString & item,
        wxString * trueItem = NULL
    );
    %Docstring
        FindItem(item, trueItem=None) -> bool
        
        Implement to customize matching of value string to an item container
        entry.
    %End

    virtual
    wxSize GetAdjustedSize(
        int minWidth,
        int prefHeight,
        int maxHeight
    );
    %Docstring
        GetAdjustedSize(minWidth, prefHeight, maxHeight) -> Size
        
        The derived class may implement this to return adjusted size for the
        popup control, according to the variables given.
    %End

    wxComboCtrl * GetComboCtrl() const;
    %Docstring
        GetComboCtrl() -> ComboCtrl
        
        Returns pointer to the associated parent wxComboCtrl.
    %End

    virtual
    wxWindow * GetControl() = 0;
    %Docstring
        GetControl() -> Window
        
        The derived class must implement this to return pointer to the
        associated control created in Create().
    %End

    virtual
    wxString GetStringValue() const = 0;
    %Docstring
        GetStringValue() -> String
        
        The derived class must implement this to return string representation
        of the value.
    %End

    virtual
    void Init();
    %Docstring
        Init()
        
        The derived class must implement this to initialize its internal
        variables.
    %End

    bool IsCreated() const;
    %Docstring
        IsCreated() -> bool
        
        Utility method that returns true if Create has been called.
    %End

    virtual
    bool LazyCreate();
    %Docstring
        LazyCreate() -> bool
        
        The derived class may implement this to return true if it wants to
        delay call to Create() until the popup is shown for the first time.
    %End

    virtual
    void OnComboDoubleClick();
    %Docstring
        OnComboDoubleClick()
        
        The derived class may implement this to do something when the parent
        wxComboCtrl gets double-clicked.
    %End

    virtual
    void OnComboKeyEvent(
        wxKeyEvent & event
    );
    %Docstring
        OnComboKeyEvent(event)
        
        The derived class may implement this to receive key events from the
        parent wxComboCtrl.
    %End

    virtual
    void OnDismiss();
    %Docstring
        OnDismiss()
        
        The derived class may implement this to do special processing when
        popup is hidden.
    %End

    virtual
    void OnPopup();
    %Docstring
        OnPopup()
        
        The derived class may implement this to do special processing when
        popup is shown.
    %End

    virtual
    void PaintComboControl(
        wxDC & dc,
        const wxRect & rect
    );
    %Docstring
        PaintComboControl(dc, rect)
        
        The derived class may implement this to paint the parent wxComboCtrl.
    %End

    virtual
    void SetStringValue(
        const wxString & value
    );
    %Docstring
        SetStringValue(value)
        
        The derived class must implement this to receive string value changes
        from wxComboCtrl.
    %End

    public:


    %Property(name=ComboCtrl, get=GetComboCtrl)
    %Property(name=Control, get=GetControl)
    %Property(name=StringValue, get=GetStringValue, set=SetStringValue)
};  // end of class wxComboPopup


struct wxComboCtrlFeatures
{
    %Docstring
        Features enabled for wxComboCtrl.
    %End
    %TypeHeaderCode
        #include <wx/combo.h>
    %End

    enum 
    {
        MovableButton,
        BitmapButton,
        ButtonSpacing,
        TextIndent,
        PaintControl,
        PaintWritable,
        Borderless,
        All    
    };

};  // end of class wxComboCtrlFeatures


class wxComboCtrl : wxControl, wxTextEntry
{
    %Docstring
        ComboCtrl()
        ComboCtrl(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ComboBoxNameStr)
        
        A combo control is a generic combobox that allows totally custom
        popup.
    %End
    %TypeHeaderCode
        #include <wx/combo.h>
    %End

public:
    wxComboCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxComboCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxComboBoxNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxComboCtrl();

    bool SetMargins(
        const wxPoint & pt
    );
    %Docstring
        SetMargins(pt) -> bool
        SetMargins(left, top=-1) -> bool
        
        Attempts to set the control margins.
    %End

    bool SetMargins(
        wxCoord left,
        wxCoord top = -1
    );

    void Copy();
    %Docstring
        Copy()
        
        Copies the selected text to the clipboard.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxComboBoxNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ComboBoxNameStr) -> bool
        
        Creates the combo control for two-step construction.
    %End

    void Cut();
    %Docstring
        Cut()
        
        Copies the selected text to the clipboard and removes the selection.
    %End

    virtual
    void Dismiss();
    %Docstring
        Dismiss()
        
        Dismisses the popup window.
    %End

    void EnablePopupAnimation(
        bool enable = true
    );
    %Docstring
        EnablePopupAnimation(enable=True)
        
        Enables or disables popup animation, if any, depending on the value of
        the argument.
    %End

    virtual
    bool IsKeyPopupToggle(
        const wxKeyEvent & event
    ) const;
    %Docstring
        IsKeyPopupToggle(event) -> bool
        
        Returns true if given key combination should toggle the popup.
    %End

    void PrepareBackground(
        wxDC & dc,
        const wxRect & rect,
        int flags
    ) const;
    %Docstring
        PrepareBackground(dc, rect, flags)
        
        Prepare background of combo control or an item in a dropdown list in a
        way typical on platform.
    %End

    bool ShouldDrawFocus() const;
    %Docstring
        ShouldDrawFocus() -> bool
        
        Returns true if focus indicator should be drawn in the control.
    %End

    const wxBitmap & GetBitmapDisabled() const;
    %Docstring
        GetBitmapDisabled() -> Bitmap
        
        Returns disabled button bitmap that has been set with
        SetButtonBitmaps().
    %End

    const wxBitmap & GetBitmapHover() const;
    %Docstring
        GetBitmapHover() -> Bitmap
        
        Returns button mouse hover bitmap that has been set with
        SetButtonBitmaps().
    %End

    const wxBitmap & GetBitmapNormal() const;
    %Docstring
        GetBitmapNormal() -> Bitmap
        
        Returns default button bitmap that has been set with
        SetButtonBitmaps().
    %End

    const wxBitmap & GetBitmapPressed() const;
    %Docstring
        GetBitmapPressed() -> Bitmap
        
        Returns depressed button bitmap that has been set with
        SetButtonBitmaps().
    %End

    wxSize GetButtonSize();
    %Docstring
        GetButtonSize() -> Size
        
        Returns current size of the dropdown button.
    %End

    int GetCustomPaintWidth() const;
    %Docstring
        GetCustomPaintWidth() -> int
        
        Returns custom painted area in control.
    %End

    wxString GetHint() const;
    %Docstring
        GetHint() -> String
        
        Returns the current hint string.
    %End

    long GetInsertionPoint() const;
    %Docstring
        GetInsertionPoint() -> long
        
        Returns the insertion point for the combo control's text field.
    %End

    long GetLastPosition() const;
    %Docstring
        GetLastPosition() -> long
        
        Returns the last position in the combo control text field.
    %End

    wxPoint GetMargins() const;
    %Docstring
        GetMargins() -> Point
        
        Returns the margins used by the control.
    %End

    wxComboPopup * GetPopupControl();
    %Docstring
        GetPopupControl() -> ComboPopup
        
        Returns current popup interface that has been set with
        SetPopupControl().
    %End

    wxWindow * GetPopupWindow() const;
    %Docstring
        GetPopupWindow() -> Window
        
        Returns popup window containing the popup control.
    %End

    wxTextCtrl * GetTextCtrl() const;
    %Docstring
        GetTextCtrl() -> TextCtrl
        
        Get the text control which is part of the combo control.
    %End

    const wxRect & GetTextRect() const;
    %Docstring
        GetTextRect() -> Rect
        
        Returns area covered by the text field (includes everything except
        borders and the dropdown button).
    %End

    wxString GetValue() const;
    %Docstring
        GetValue() -> String
        
        Returns text representation of the current value.
    %End

    virtual
    void HidePopup(
        bool generateEvent = false
    )   /Deprecated/;
    %Docstring
        HidePopup(generateEvent=False)
        
        Dismisses the popup window.
    %End

    bool IsPopupShown() const;
    %Docstring
        IsPopupShown() -> bool
        
        Returns true if the popup is currently shown.
    %End

    bool IsPopupWindowState(
        int state
    ) const;
    %Docstring
        IsPopupWindowState(state) -> bool
        
        Returns true if the popup window is in the given state.
    %End

    virtual
    void OnButtonClick();
    %Docstring
        OnButtonClick()
        
        Implement in a derived class to define what happens on dropdown button
        click.
    %End

    void Paste();
    %Docstring
        Paste()
        
        Pastes text from the clipboard to the text field.
    %End

    void Popup();
    %Docstring
        Popup()
        
        Shows the popup portion of the combo control.
    %End

    void Remove(
        long frm,
        long to
    );
    %Docstring
        Remove(frm, to)
        
        Removes the text between the two positions in the combo control text
        field.
    %End

    void Replace(
        long frm,
        long to,
        const wxString & text
    );
    %Docstring
        Replace(frm, to, text)
        
        Replaces the text between two positions with the given text, in the
        combo control text field.
    %End

    void SetButtonBitmaps(
        const wxBitmap & bmpNormal,
        bool pushButtonBg = false,
        const wxBitmap & bmpPressed = wxNullBitmap,
        const wxBitmap & bmpHover = wxNullBitmap,
        const wxBitmap & bmpDisabled = wxNullBitmap
    );
    %Docstring
        SetButtonBitmaps(bmpNormal, pushButtonBg=False, bmpPressed=NullBitmap, bmpHover=NullBitmap, bmpDisabled=NullBitmap)
        
        Sets custom dropdown button graphics.
    %End

    void SetButtonPosition(
        int width = -1,
        int height = -1,
        int side = wxRIGHT,
        int spacingX = 0
    );
    %Docstring
        SetButtonPosition(width=-1, height=-1, side=RIGHT, spacingX=0)
        
        Sets size and position of dropdown button.
    %End

    void SetCustomPaintWidth(
        int width
    );
    %Docstring
        SetCustomPaintWidth(width)
        
        Set width, in pixels, of custom painted area in control without
        wxCB_READONLY style.
    %End

    bool SetHint(
        const wxString & hint
    );
    %Docstring
        SetHint(hint) -> bool
        
        Sets a hint shown in an empty unfocused combo control.
    %End

    void SetInsertionPoint(
        long pos
    );
    %Docstring
        SetInsertionPoint(pos)
        
        Sets the insertion point in the text field.
    %End

    void SetInsertionPointEnd();
    %Docstring
        SetInsertionPointEnd()
        
        Sets the insertion point at the end of the combo control text field.
    %End

    void SetPopupAnchor(
        int anchorSide
    );
    %Docstring
        SetPopupAnchor(anchorSide)
        
        Set side of the control to which the popup will align itself.
    %End

    void SetPopupControl(
        wxComboPopup * popup   /Transfer/
    );
    %Docstring
        SetPopupControl(popup)
        
        Set popup interface class derived from wxComboPopup.
    %End

    void SetPopupExtents(
        int extLeft,
        int extRight
    );
    %Docstring
        SetPopupExtents(extLeft, extRight)
        
        Extends popup size horizontally, relative to the edges of the combo
        control.
    %End

    void SetPopupMaxHeight(
        int height
    );
    %Docstring
        SetPopupMaxHeight(height)
        
        Sets preferred maximum height of the popup.
    %End

    void SetPopupMinWidth(
        int width
    );
    %Docstring
        SetPopupMinWidth(width)
        
        Sets minimum width of the popup.
    %End

    void SetSelection(
        long frm,
        long to
    );
    %Docstring
        SetSelection(frm, to)
        
        Selects the text between the two positions, in the combo control text
        field.
    %End

    void SetText(
        const wxString & value
    );
    %Docstring
        SetText(value)
        
        Sets the text for the text field without affecting the popup.
    %End

    void SetTextCtrlStyle(
        int style
    );
    %Docstring
        SetTextCtrlStyle(style)
        
        Set a custom window style for the embedded wxTextCtrl.
    %End

    void SetValue(
        const wxString & value
    );
    %Docstring
        SetValue(value)
        
        Sets the text for the combo control text field.
    %End

    void SetValueByUser(
        const wxString & value
    );
    %Docstring
        SetValueByUser(value)
        
        Changes value of the control as if user had done it by selecting an
        item from a combo box drop-down list.
    %End

    virtual
    void ShowPopup()   /Deprecated/;
    %Docstring
        ShowPopup()
        
        Show the popup.
    %End

    void Undo();
    %Docstring
        Undo()
        
        Undoes the last edit in the text field.
    %End

    void UseAltPopupWindow(
        bool enable = true
    );
    %Docstring
        UseAltPopupWindow(enable=True)
        
        Enable or disable usage of an alternative popup window, which
        guarantees ability to focus the popup control, and allows common
        native controls to function normally.
    %End

    static
    int GetFeatures();
    %Docstring
        GetFeatures() -> int
        
        Returns features supported by wxComboCtrl.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=BitmapDisabled, get=GetBitmapDisabled)
    %Property(name=BitmapHover, get=GetBitmapHover)
    %Property(name=BitmapNormal, get=GetBitmapNormal)
    %Property(name=BitmapPressed, get=GetBitmapPressed)
    %Property(name=ButtonSize, get=GetButtonSize)
    %Property(name=CustomPaintWidth, get=GetCustomPaintWidth, set=SetCustomPaintWidth)
    %Property(name=Hint, get=GetHint, set=SetHint)
    %Property(name=InsertionPoint, get=GetInsertionPoint, set=SetInsertionPoint)
    %Property(name=LastPosition, get=GetLastPosition)
    %Property(name=Margins, get=GetMargins, set=SetMargins)
    %Property(name=PopupControl, get=GetPopupControl, set=SetPopupControl)
    %Property(name=PopupWindow, get=GetPopupWindow)
    %Property(name=TextCtrl, get=GetTextCtrl)
    %Property(name=TextRect, get=GetTextRect)
    %Property(name=Value, get=GetValue, set=SetValue)

protected:
    virtual
    bool AnimateShow(
        const wxRect & rect,
        int flags
    );
    %Docstring
        AnimateShow(rect, flags) -> bool
        
        This member function is not normally called in application code.
    %End

    virtual
    void DoSetPopupControl(
        wxComboPopup * popup
    );
    %Docstring
        DoSetPopupControl(popup)
        
        This member function is not normally called in application code.
    %End

    virtual
    void DoShowPopup(
        const wxRect & rect,
        int flags
    );
    %Docstring
        DoShowPopup(rect, flags)
        
        This member function is not normally called in application code.
    %End

};  // end of class wxComboCtrl



//---------------------------------------------------------------------------

