//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _adv.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/taskbar.h>
%End


//---------------------------------------------------------------------------

enum wxTaskBarIconType
{
    wxTBI_DOCK,
    wxTBI_CUSTOM_STATUSITEM,
    wxTBI_DEFAULT_TYPE
};

wxEventType wxEVT_TASKBAR_MOVE   /PyName=wxEVT_TASKBAR_MOVE/;

wxEventType wxEVT_TASKBAR_LEFT_DOWN   /PyName=wxEVT_TASKBAR_LEFT_DOWN/;

wxEventType wxEVT_TASKBAR_LEFT_UP   /PyName=wxEVT_TASKBAR_LEFT_UP/;

wxEventType wxEVT_TASKBAR_RIGHT_DOWN   /PyName=wxEVT_TASKBAR_RIGHT_DOWN/;

wxEventType wxEVT_TASKBAR_RIGHT_UP   /PyName=wxEVT_TASKBAR_RIGHT_UP/;

wxEventType wxEVT_TASKBAR_LEFT_DCLICK   /PyName=wxEVT_TASKBAR_LEFT_DCLICK/;

wxEventType wxEVT_TASKBAR_RIGHT_DCLICK   /PyName=wxEVT_TASKBAR_RIGHT_DCLICK/;

wxEventType wxEVT_TASKBAR_CLICK   /PyName=wxEVT_TASKBAR_CLICK/;

wxEventType wxEVT_TASKBAR_BALLOON_TIMEOUT   /PyName=wxEVT_TASKBAR_BALLOON_TIMEOUT/;

wxEventType wxEVT_TASKBAR_BALLOON_CLICK   /PyName=wxEVT_TASKBAR_BALLOON_CLICK/;

class wxTaskBarIconEvent : wxEvent
{
    %Docstring
        TaskBarIconEvent(evtType, tbIcon)
        
        The event class used by wxTaskBarIcon.
    %End
    %TypeHeaderCode
        #include <wx/taskbar.h>
    %End

public:
    wxTaskBarIconEvent(
        wxEventType evtType,
        wxTaskBarIcon * tbIcon
    );

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxTaskBarIconEvent& operator=(const wxTaskBarIconEvent&);


};  // end of class wxTaskBarIconEvent


class wxTaskBarIcon : wxEvtHandler
{
    %Docstring
        TaskBarIcon(iconType=TBI_DEFAULT_TYPE)
        
        This class represents a taskbar icon.
    %End
    %TypeHeaderCode
        #include <wx/taskbar.h>
    %End

public:
    wxTaskBarIcon(
        wxTaskBarIconType iconType = wxTBI_DEFAULT_TYPE
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxTaskBarIcon();

    void Destroy()   /TransferThis/;
    %Docstring
        Destroy()
        
        This method is similar to wxWindow::Destroy and can be used to
        schedule the task bar icon object for the delayed destruction: it will
        be deleted during the next event loop iteration, which allows the task
        bar icon to process any pending events for it before being destroyed.
    %End

    bool IsIconInstalled() const;
    %Docstring
        IsIconInstalled() -> bool
        
        Returns true if SetIcon() was called with no subsequent RemoveIcon().
    %End

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if the object initialized successfully.
    %End

    virtual
    bool PopupMenu(
        wxMenu * menu
    );
    %Docstring
        PopupMenu(menu) -> bool
        
        Pops up a menu at the current mouse position.
    %End

    virtual
    bool RemoveIcon();
    %Docstring
        RemoveIcon() -> bool
        
        Removes the icon previously set with SetIcon().
    %End

    virtual
    bool SetIcon(
        const wxIcon & icon,
        const wxString & tooltip = wxEmptyString
    );
    %Docstring
        SetIcon(icon, tooltip=wx.EmptyString) -> bool
        
        Sets the icon, and optional tooltip text.
    %End

    static
    bool IsAvailable();
    %Docstring
        IsAvailable() -> bool
        
        Returns true if system tray is available in the desktop environment
        the app runs under.
    %End

    bool ShowBalloon(const wxString& title,  const wxString& text, unsigned msec = 0,  int flags = 0);
    %Docstring
        ShowBalloon(title, text, msec=0, flags=0) -> bool
        
        Show a balloon notification (the icon must have been already
        initialized using SetIcon).  Only implemented for Windows.
        
        The ``title`` and ``text`` parameters are limited to 63 and 255
        characters respectively, ``msec`` is the timeout, in milliseconds,
        before the balloon disappears (will be clamped down to the allowed
        10-30s range by Windows if it's outside it) and ``flags`` can
        include wxICON_ERROR/INFO/WARNING to show a corresponding icon.
        
        Returns ``True`` if balloon was shown, ``False`` on error (incorrect
        parameters or function unsupported by OS).
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTaskBarIcon_ShowBalloon(sipCpp, title, text, msec, flags);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxTaskBarIcon_ShowBalloon(wxTaskBarIcon* self, const wxString* title, const wxString* text, unsigned msec, int flags)
    {
        #ifdef __WXMSW__
            return self->ShowBalloon(*title, *text, msec, flags);
        #else
            return false;
        #endif
    }
    %End

    public:



protected:
    virtual
    wxMenu * CreatePopupMenu()   /Transfer/;
    %Docstring
        CreatePopupMenu() -> wx.Menu
        
        Called by the library when the user requests popup menu if
        GetPopupMenu() is not overridden.
    %End
    %VirtualCatcherCode
        // VirtualCatcherCode for wxTaskBarIcon.CreatePopupMenu
        PyObject *sipResObj = sipCallMethod(0, sipMethod, "");
        if (!sipResObj || sipParseResult(0, sipMethod, sipResObj, "H0", sipType_wxMenu, &sipRes) < 0)
            PyErr_Print();
        if (sipRes) {
            sipTransferTo(sipResObj, Py_None);
        }
    %End

};  // end of class wxTaskBarIcon


%Extract(id=pycode_adv)
EVT_TASKBAR_MOVE = wx.PyEventBinder (         wxEVT_TASKBAR_MOVE )
EVT_TASKBAR_LEFT_DOWN = wx.PyEventBinder (    wxEVT_TASKBAR_LEFT_DOWN )
EVT_TASKBAR_LEFT_UP = wx.PyEventBinder (      wxEVT_TASKBAR_LEFT_UP )
EVT_TASKBAR_RIGHT_DOWN = wx.PyEventBinder (   wxEVT_TASKBAR_RIGHT_DOWN )
EVT_TASKBAR_RIGHT_UP = wx.PyEventBinder (     wxEVT_TASKBAR_RIGHT_UP )
EVT_TASKBAR_LEFT_DCLICK = wx.PyEventBinder (  wxEVT_TASKBAR_LEFT_DCLICK )
EVT_TASKBAR_RIGHT_DCLICK = wx.PyEventBinder ( wxEVT_TASKBAR_RIGHT_DCLICK )
EVT_TASKBAR_CLICK =  wx.PyEventBinder (       wxEVT_TASKBAR_CLICK )
EVT_TASKBAR_BALLOON_TIMEOUT = wx.PyEventBinder ( wxEVT_TASKBAR_BALLOON_TIMEOUT )
EVT_TASKBAR_BALLOON_CLICK = wx.PyEventBinder ( wxEVT_TASKBAR_BALLOON_CLICK )

%End


//---------------------------------------------------------------------------

