//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxSTB_SIZEGRIP;
const int wxSTB_SHOW_TIPS;
const int wxSTB_ELLIPSIZE_START;
const int wxSTB_ELLIPSIZE_MIDDLE;
const int wxSTB_ELLIPSIZE_END;
const int wxSTB_DEFAULT_STYLE;
const int wxSB_NORMAL;
const int wxSB_FLAT;
const int wxSB_RAISED;
const int wxSB_SUNKEN;
const char* wxStatusBarNameStr;

class wxStatusBar : wxControl
{
    %Docstring
        StatusBar()
        StatusBar(parent, id=ID_ANY, style=STB_DEFAULT_STYLE, name=StatusBarNameStr)
        
        A status bar is a narrow window that can be placed along the bottom of
        a frame to give small amounts of status information.
    %End
    %TypeHeaderCode
        #include <wx/statusbr.h>
    %End

public:
    wxStatusBar();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxStatusBar(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        long style = wxSTB_DEFAULT_STYLE,
        const wxString & name = wxStatusBarNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxStatusBar();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        long style = wxSTB_DEFAULT_STYLE,
        const wxString & name = wxStatusBarNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, style=STB_DEFAULT_STYLE, name=StatusBarNameStr) -> bool
        
        Creates the window, for two-step construction.
    %End

    wxRect* GetFieldRect(int i);
    %Docstring
        GetFieldRect(i) -> Rect
        
        Returns the size and position of a field's internal bounding
        rectangle.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxStatusBar_GetFieldRect(sipCpp, i);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxRect* _wxStatusBar_GetFieldRect(wxStatusBar* self, int i)
    {
        wxRect* r = new wxRect;
        self->GetFieldRect(i, *r);
        return r;
    }
    %End

    int GetFieldsCount() const;
    %Docstring
        GetFieldsCount() -> int
        
        Returns the number of fields in the status bar.
    %End

    const wxStatusBarPane & GetField(
        int n
    ) const;
    %Docstring
        GetField(n) -> StatusBarPane
        
        Returns the wxStatusBarPane representing the n-th field.
    %End

    wxSize GetBorders() const;
    %Docstring
        GetBorders() -> Size
        
        Returns the horizontal and vertical borders used when rendering the
        field text inside the field area.
    %End

    wxString GetStatusText(
        int i = 0
    ) const;
    %Docstring
        GetStatusText(i=0) -> String
        
        Returns the string associated with a status bar field.
    %End

    int GetStatusWidth(
        int n
    ) const;
    %Docstring
        GetStatusWidth(n) -> int
        
        Returns the width of the n-th field.
    %End

    int GetStatusStyle(
        int n
    ) const;
    %Docstring
        GetStatusStyle(n) -> int
        
        Returns the style of the n-th field.
    %End

    void PopStatusText(
        int field = 0
    );
    %Docstring
        PopStatusText(field=0)
        
        Restores the text to the value it had before the last call to
        PushStatusText().
    %End

    void PushStatusText(
        const wxString & string,
        int field = 0
    );
    %Docstring
        PushStatusText(string, field=0)
        
        Saves the current field text in a per-field stack, and sets the field
        text to the string passed as argument.
    %End

    void SetFieldsCount(
        int number = 1,
        const wxArrayInt* widths = NULL
    );
    %Docstring
        SetFieldsCount(number=1, widths=None)
        
        Sets the number of fields, and optionally the field widths.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxStatusBar_SetFieldsCount(sipCpp, number, widths);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxStatusBar_SetFieldsCount(wxStatusBar* self, int number, const wxArrayInt* widths)
    {
        if (widths) {
            const int* ptr = &widths->front();
            self->SetFieldsCount(number, ptr);
            }
        else {
            self->SetFieldsCount(number);
            }
    }
    %End

    void SetMinHeight(
        int height
    );
    %Docstring
        SetMinHeight(height)
        
        Sets the minimal possible height for the status bar.
    %End

    void SetStatusStyles(
        const wxArrayInt& styles
    );
    %Docstring
        SetStatusStyles(styles)
        
        Sets the styles of the fields in the status line which can make fields
        appear flat or raised instead of the standard sunken 3D border.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxStatusBar_SetStatusStyles(sipCpp, styles);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxStatusBar_SetStatusStyles(wxStatusBar* self, const wxArrayInt* styles)
    {
        const int* ptr = &styles->front();
        self->SetStatusStyles(styles->size(), ptr);
    }
    %End

    void SetStatusText(
        const wxString & text,
        int i = 0
    );
    %Docstring
        SetStatusText(text, i=0)
        
        Sets the status text for the i-th field.
    %End

    void SetStatusWidths(
        const wxArrayInt& widths
    );
    %Docstring
        SetStatusWidths(widths)
        
        Sets the widths of the fields in the status line.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxStatusBar_SetStatusWidths(sipCpp, widths);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxStatusBar_SetStatusWidths(wxStatusBar* self, const wxArrayInt* widths)
    {
        const int* ptr = &widths->front();
        self->SetStatusWidths(widths->size(), ptr);
    }
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Borders, get=GetBorders)
    %Property(name=FieldRect, get=GetFieldRect)
    %Property(name=FieldsCount, get=GetFieldsCount, set=SetFieldsCount)
    %Property(name=StatusText, get=GetStatusText, set=SetStatusText)
};  // end of class wxStatusBar


class wxStatusBarPane
{
    %Docstring
        StatusBarPane(style=SB_NORMAL, width=0)
        
        A status bar pane data container used by wxStatusBar.
    %End
    %TypeHeaderCode
        #include <wx/statusbr.h>
    %End

public:
    wxStatusBarPane(
        int style = wxSB_NORMAL,
        int width = 0
    );

    int GetWidth() const;
    %Docstring
        GetWidth() -> int
        
        Returns the pane width; it maybe negative, indicating a variable-width
        field.
    %End

    int GetStyle() const;
    %Docstring
        GetStyle() -> int
        
        Returns the pane style.
    %End

    wxString GetText() const;
    %Docstring
        GetText() -> String
        
        Returns the text currently shown in this pane.
    %End

    public:


    %Property(name=Style, get=GetStyle)
    %Property(name=Text, get=GetText)
    %Property(name=Width, get=GetWidth)
};  // end of class wxStatusBarPane



//---------------------------------------------------------------------------

