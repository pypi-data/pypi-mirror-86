//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _propgrid.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const char* wxPropertyGridManagerNameStr;

class wxPropertyGridPage : wxEvtHandler, wxPropertyGridInterface, wxPropertyGridPageState
{
    %Docstring
        PropertyGridPage()
        
        Holder of property grid page information.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/manager.h>
    %End

public:
    wxPropertyGridPage();

    virtual
    ~wxPropertyGridPage();

    virtual
    void Clear();
    %Docstring
        Clear()
        
        Deletes all properties on page.
    %End

    wxSize FitColumns();
    %Docstring
        FitColumns() -> wx.Size
        
        Reduces column sizes to minimum possible that contents are still
        visibly (naturally some margin space will be applied as well).
    %End

    int GetIndex() const;
    %Docstring
        GetIndex() -> int
        
        Returns page index in manager;.
    %End

    wxPGProperty * GetRoot() const;
    %Docstring
        GetRoot() -> PGProperty
        
        Returns "root property".
    %End

    int GetSplitterPosition(
        int col = 0
    ) const;
    %Docstring
        GetSplitterPosition(col=0) -> int
        
        Returns x-coordinate position of splitter on a page.
    %End

    wxPropertyGridPageState * GetStatePtr();
    %Docstring
        GetStatePtr() -> PropertyGridPageState
        
        Returns pointer to contained property grid state.
    %End

    int GetToolId() const;
    %Docstring
        GetToolId() -> int
        
        Returns id of the tool bar item that represents this page on
        wxPropertyGridManager's wxToolBar.
    %End

    virtual
    void Init();
    %Docstring
        Init()
        
        Do any member initialization in this method.
    %End

    virtual
    bool IsHandlingAllEvents() const;
    %Docstring
        IsHandlingAllEvents() -> bool
        
        Return false here to indicate unhandled events should be propagated to
        manager's parent, as normal.
    %End

    virtual
    void OnShow();
    %Docstring
        OnShow()
        
        Called every time page is about to be shown.
    %End

    virtual
    void RefreshProperty(
        wxPGProperty * p
    );
    %Docstring
        RefreshProperty(p)
        
        Refreshes given property on page.
    %End

    void SetSplitterPosition(
        int splitterPos,
        int col = 0
    );
    %Docstring
        SetSplitterPosition(splitterPos, col=0)
        
        Sets splitter position on page.
    %End

    public:


    %Property(name=Index, get=GetIndex)
    %Property(name=Root, get=GetRoot)
    %Property(name=SplitterPosition, get=GetSplitterPosition, set=SetSplitterPosition)
    %Property(name=StatePtr, get=GetStatePtr)
    %Property(name=ToolId, get=GetToolId)
};  // end of class wxPropertyGridPage


class wxPropertyGridManager : wxPanel, wxPropertyGridInterface
{
    %Docstring
        PropertyGridManager()
        PropertyGridManager(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=PGMAN_DEFAULT_STYLE, name=PropertyGridManagerNameStr)
        
        wxPropertyGridManager is an efficient multi-page version of
        wxPropertyGrid, which can optionally have toolbar for mode and page
        selection, a help text box, and a header.
    %End
    %TypeHeaderCode
        #include <wx/propgrid/manager.h>
    %End

public:
    wxPropertyGridManager();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxPropertyGridManager(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxPGMAN_DEFAULT_STYLE,
        const wxString & name = wxPropertyGridManagerNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxPropertyGridManager();

    wxPropertyGridPage * AddPage(
        const wxString & label = wxEmptyString,
        const wxBitmap & bmp = wxPG_NULL_BITMAP,
        wxPropertyGridPage * pageObj   /Transfer/ = NULL
    );
    %Docstring
        AddPage(label=wx.EmptyString, bmp=PG_NULL_BITMAP, pageObj=None) -> PropertyGridPage
        
        Creates new property page.
    %End

    virtual
    void Clear();
    %Docstring
        Clear()
        
        Deletes all properties and all pages.
    %End

    void ClearPage(
        int page
    );
    %Docstring
        ClearPage(page)
        
        Deletes all properties on given page.
    %End

    bool CommitChangesFromEditor(
        wxUint32 flags = 0
    );
    %Docstring
        CommitChangesFromEditor(flags=0) -> bool
        
        Forces updating the value of property from the editor control.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxPGMAN_DEFAULT_STYLE,
        const wxString & name = wxPropertyGridManagerNameStr
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=PGMAN_DEFAULT_STYLE, name=PropertyGridManagerNameStr) -> bool
        
        Two step creation.
    %End

    bool EnableCategories(
        bool enable
    );
    %Docstring
        EnableCategories(enable) -> bool
        
        Enables or disables (shows/hides) categories according to parameter
        enable.
    %End

    bool EnsureVisible(
        const wxPGPropArgCls & id
    );
    %Docstring
        EnsureVisible(id) -> bool
        
        Selects page, scrolls and/or expands items to ensure that the given
        item is visible.
    %End

    int GetColumnCount(
        int page = -1
    ) const;
    %Docstring
        GetColumnCount(page=-1) -> int
        
        Returns number of columns on given page.
    %End

    int GetDescBoxHeight() const;
    %Docstring
        GetDescBoxHeight() -> int
        
        Returns height of the description text box.
    %End

    wxPropertyGrid * GetGrid();
    %Docstring
        GetGrid() -> PropertyGrid
        
        Returns pointer to the contained wxPropertyGrid.
    %End

    virtual
    wxPGVIterator GetVIterator(
        int flags
    ) const;
    %Docstring
        GetVIterator(flags) -> PGVIterator
        
        Similar to GetIterator(), but instead returns wxPGVIterator instance,
        which can be useful for forward-iterating through arbitrary property
        containers.
    %End

    wxPropertyGridPage * GetCurrentPage() const;
    %Docstring
        GetCurrentPage() -> PropertyGridPage
        
        Returns currently selected page.
    %End

    wxPropertyGridPage * GetPage(
        unsigned int ind
    ) const;
    %Docstring
        GetPage(ind) -> PropertyGridPage
        GetPage(name) -> PropertyGridPage
        
        Returns page object for given page index.
    %End

    wxPropertyGridPage * GetPage(
        const wxString & name
    ) const;

    int GetPageByName(
        const wxString & name
    ) const;
    %Docstring
        GetPageByName(name) -> int
        
        Returns index for a page name.
    %End

    int GetPageByState(
        const wxPropertyGridPageState * pstate
    ) const;
    %Docstring
        GetPageByState(pstate) -> int
        
        Returns index for a relevant propertygrid state.
    %End

    size_t GetPageCount() const;
    %Docstring
        GetPageCount() -> size_t
        
        Returns number of managed pages.
    %End

    const wxString & GetPageName(
        int index
    ) const;
    %Docstring
        GetPageName(index) -> String
        
        Returns name of given page.
    %End

    wxPGProperty * GetPageRoot(
        int index
    ) const;
    %Docstring
        GetPageRoot(index) -> PGProperty
        
        Returns "root property" of the given page.
    %End

    int GetSelectedPage() const;
    %Docstring
        GetSelectedPage() -> int
        
        Returns index to currently selected page.
    %End

    wxPGProperty * GetSelectedProperty() const;
    %Docstring
        GetSelectedProperty() -> PGProperty
        
        Alias for GetSelection().
    %End

    wxPGProperty * GetSelection() const;
    %Docstring
        GetSelection() -> PGProperty
        
        Shortcut for GetGrid()->GetSelection().
    %End

    wxToolBar * GetToolBar() const;
    %Docstring
        GetToolBar() -> wx.ToolBar
        
        Returns a pointer to the toolbar currently associated with the
        wxPropertyGridManager (if any).
    %End

    virtual
    wxPropertyGridPage * InsertPage(
        int index,
        const wxString & label,
        const wxBitmap & bmp = wxNullBitmap,
        wxPropertyGridPage * pageObj = NULL
    );
    %Docstring
        InsertPage(index, label, bmp=wx.NullBitmap, pageObj=None) -> PropertyGridPage
        
        Creates new property page.
    %End

    bool IsAnyModified() const;
    %Docstring
        IsAnyModified() -> bool
        
        Returns true if any property on any page has been modified by the
        user.
    %End

    bool IsFrozen() const;
    %Docstring
        IsFrozen() -> bool
        
        Returns true if updating is frozen (i.e.
    %End

    bool IsPageModified(
        size_t index
    ) const;
    %Docstring
        IsPageModified(index) -> bool
        
        Returns true if any property on given page has been modified by the
        user.
    %End

    virtual
    bool IsPropertySelected(
        const wxPGPropArgCls & id
    ) const;
    %Docstring
        IsPropertySelected(id) -> bool
        
        Returns true if property is selected.
    %End

    virtual
    bool RemovePage(
        int page
    );
    %Docstring
        RemovePage(page) -> bool
        
        Removes a page.
    %End

    void SelectPage(
        int index
    );
    %Docstring
        SelectPage(index)
        SelectPage(label)
        SelectPage(page)
        
        Select and displays a given page.
    %End

    void SelectPage(
        const wxString & label
    );

    void SelectPage(
        wxPropertyGridPage * page
    );

    bool SelectProperty(
        const wxPGPropArgCls & id,
        bool focus = false
    );
    %Docstring
        SelectProperty(id, focus=False) -> bool
        
        Select a property.
    %End

    void SetColumnCount(
        int colCount,
        int page = -1
    );
    %Docstring
        SetColumnCount(colCount, page=-1)
        
        Sets number of columns on given page (default is current page).
    %End

    void SetColumnTitle(
        int idx,
        const wxString & title
    );
    %Docstring
        SetColumnTitle(idx, title)
        
        Sets a column title.
    %End

    void SetDescription(
        const wxString & label,
        const wxString & content
    );
    %Docstring
        SetDescription(label, content)
        
        Sets label and text in description box.
    %End

    void SetDescBoxHeight(
        int ht,
        bool refresh = true
    );
    %Docstring
        SetDescBoxHeight(ht, refresh=True)
        
        Sets y coordinate of the description box splitter.
    %End

    void SetSplitterLeft(
        bool subProps = false,
        bool allPages = true
    );
    %Docstring
        SetSplitterLeft(subProps=False, allPages=True)
        
        Moves splitter as left as possible, while still allowing all labels to
        be shown in full.
    %End

    void SetPageSplitterLeft(
        int page,
        bool subProps = false
    );
    %Docstring
        SetPageSplitterLeft(page, subProps=False)
        
        Moves splitter as left as possible on an individual page, while still
        allowing all labels to be shown in full.
    %End

    void SetPageSplitterPosition(
        int page,
        int pos,
        int column = 0
    );
    %Docstring
        SetPageSplitterPosition(page, pos, column=0)
        
        Sets splitter position on individual page.
    %End

    void SetSplitterPosition(
        int pos,
        int column = 0
    );
    %Docstring
        SetSplitterPosition(pos, column=0)
        
        Sets splitter position for all pages.
    %End

    void ShowHeader(
        bool show = true
    );
    %Docstring
        ShowHeader(show=True)
        
        Show or hide the property grid header control.
    %End

    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

            virtual void RefreshProperty( wxPGProperty* p );


    public:


    %Property(name=ColumnCount, get=GetColumnCount, set=SetColumnCount)
    %Property(name=CurrentPage, get=GetCurrentPage)
    %Property(name=DescBoxHeight, get=GetDescBoxHeight, set=SetDescBoxHeight)
    %Property(name=Grid, get=GetGrid)
    %Property(name=PageCount, get=GetPageCount)
    %Property(name=SelectedPage, get=GetSelectedPage)
    %Property(name=SelectedProperty, get=GetSelectedProperty)
    %Property(name=Selection, get=GetSelection)
    %Property(name=ToolBar, get=GetToolBar)

protected:
    virtual
    wxPropertyGrid * CreatePropertyGrid() const;
    %Docstring
        CreatePropertyGrid() -> PropertyGrid
        
        Creates property grid for the manager.
    %End

};  // end of class wxPropertyGridManager


%Extract(id=pycode_propgrid)
_PropertyGridManager__init__orig = PropertyGridManager.__init__
def _PropertyGridManager__init__(self, *args, **kw):
    _PropertyGridManager__init__orig(self, *args, **kw)
    self.DoDefaultTypeMappings()
    self.edited_objects = {}
    self.DoDefaultValueTypeMappings()
    if not hasattr(self.__class__, '_vt2setter'):
        self.__class__._vt2setter = {}
PropertyGridManager.__init__ = _PropertyGridManager__init__

%End


//---------------------------------------------------------------------------

