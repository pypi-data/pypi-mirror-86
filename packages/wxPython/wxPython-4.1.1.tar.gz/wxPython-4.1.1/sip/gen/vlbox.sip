//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/vlbox.h>
%End


//---------------------------------------------------------------------------

const char* wxVListBoxNameStr;

class wxVListBox : wxVScrolledWindow
{
    %Docstring
        VListBox()
        VListBox(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=VListBoxNameStr)
        
        wxVListBox is a wxListBox-like control with the following two main
        differences from a regular wxListBox: it can have an arbitrarily huge
        number of items because it doesn't store them itself but uses the
        OnDrawItem() callback to draw them (so it is a virtual listbox) and
        its items can have variable height as determined by OnMeasureItem()
        (so it is also a listbox with the lines of variable height).
    %End
    %TypeHeaderCode
        #include <wx/vlbox.h>
    %End

public:
    wxVListBox();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxVListBox(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxVListBoxNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxVListBox();

    void SetMargins(
        const wxPoint & pt
    );
    %Docstring
        SetMargins(pt)
        SetMargins(x, y)
        
        Set the margins: horizontal margin is the distance between the window
        border and the item contents while vertical margin is half of the
        distance between items.
    %End

    void SetMargins(
        wxCoord x,
        wxCoord y
    );

    void Clear();
    %Docstring
        Clear()
        
        Deletes all items from the control.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxVListBoxNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=VListBoxNameStr) -> bool
        
        Creates the control.
    %End

    bool DeselectAll();
    %Docstring
        DeselectAll() -> bool
        
        Deselects all the items in the listbox.
    %End

    int GetFirstSelected(
        unsigned long & cookie   /Out/
    ) const;
    %Docstring
        GetFirstSelected() -> (int, cookie)
        
        Returns the index of the first selected item in the listbox or
        wxNOT_FOUND if no items are currently selected.
    %End

    size_t GetItemCount() const;
    %Docstring
        GetItemCount() -> size_t
        
        Get the number of items in the control.
    %End

    wxPoint GetMargins() const;
    %Docstring
        GetMargins() -> Point
        
        Returns the margins used by the control.
    %End

    wxRect GetItemRect(
        size_t item
    ) const;
    %Docstring
        GetItemRect(item) -> Rect
        
        Returns the rectangle occupied by this item in physical coordinates.
    %End

    int GetNextSelected(
        unsigned long & cookie   /In, Out/
    ) const;
    %Docstring
        GetNextSelected(cookie) -> (int, cookie)
        
        Returns the index of the next selected item or wxNOT_FOUND if there
        are no more.
    %End

    size_t GetSelectedCount() const;
    %Docstring
        GetSelectedCount() -> size_t
        
        Returns the number of the items currently selected.
    %End

    int GetSelection() const;
    %Docstring
        GetSelection() -> int
        
        Get the currently selected item or wxNOT_FOUND if there is no
        selection.
    %End

    const wxColour & GetSelectionBackground() const;
    %Docstring
        GetSelectionBackground() -> Colour
        
        Returns the background colour used for the selected cells.
    %End

    bool HasMultipleSelection() const;
    %Docstring
        HasMultipleSelection() -> bool
        
        Returns true if the listbox was created with wxLB_MULTIPLE style and
        so supports multiple selection or false if it is a single selection
        listbox.
    %End

    bool IsCurrent(
        size_t item
    ) const;
    %Docstring
        IsCurrent(item) -> bool
        
        Returns true if this item is the current one, false otherwise.
    %End

    bool IsSelected(
        size_t item
    ) const;
    %Docstring
        IsSelected(item) -> bool
        
        Returns true if this item is selected, false otherwise.
    %End

    bool Select(
        size_t item,
        bool select = true
    );
    %Docstring
        Select(item, select=True) -> bool
        
        Selects or deselects the specified item which must be valid (i.e. not
        equal to wxNOT_FOUND).
    %End

    bool SelectAll();
    %Docstring
        SelectAll() -> bool
        
        Selects all the items in the listbox.
    %End

    bool SelectRange(
        size_t from_,
        size_t to_
    );
    %Docstring
        SelectRange(from_, to_) -> bool
        
        Selects all items in the specified range which may be given in any
        order.
    %End

    void SetItemCount(
        size_t count
    );
    %Docstring
        SetItemCount(count)
        
        Set the number of items to be shown in the control.
    %End

    void SetSelection(
        int selection
    );
    %Docstring
        SetSelection(selection)
        
        Set the selection to the specified item, if it is -1 the selection is
        unset.
    %End

    void SetSelectionBackground(
        const wxColour & col
    );
    %Docstring
        SetSelectionBackground(col)
        
        Sets the colour to be used for the selected cells background.
    %End

    void Toggle(
        size_t item
    );
    %Docstring
        Toggle(item)
        
        Toggles the state of the specified item, i.e. selects it if it was
        unselected and deselects it if it was selected.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ItemCount, get=GetItemCount, set=SetItemCount)
    %Property(name=Margins, get=GetMargins, set=SetMargins)
    %Property(name=SelectedCount, get=GetSelectedCount)
    %Property(name=Selection, get=GetSelection, set=SetSelection)
    %Property(name=SelectionBackground, get=GetSelectionBackground, set=SetSelectionBackground)

protected:
    virtual
    void OnDrawItem(
        wxDC & dc,
        const wxRect & rect,
        size_t n
    ) const = 0;
    %Docstring
        OnDrawItem(dc, rect, n)
        
        The derived class must implement this function to actually draw the
        item with the given index on the provided DC.
    %End

    virtual
    void OnDrawBackground(
        wxDC & dc,
        const wxRect & rect,
        size_t n
    ) const;
    %Docstring
        OnDrawBackground(dc, rect, n)
        
        This method is used to draw the item's background and, maybe, a border
        around it.
    %End

    virtual
    void OnDrawSeparator(
        wxDC & dc,
        wxRect & rect,
        size_t n
    ) const;
    %Docstring
        OnDrawSeparator(dc, rect, n)
        
        This method may be used to draw separators between the lines.
    %End

    virtual
    wxCoord OnMeasureItem(
        size_t n
    ) const = 0;
    %Docstring
        OnMeasureItem(n) -> Coord
        
        The derived class must implement this method to return the height of
        the specified item (in pixels).
    %End

    virtual wxCoord OnGetRowHeight(size_t n) const;


};  // end of class wxVListBox



//---------------------------------------------------------------------------

