//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/utils.h>
#include <wx/power.h>
%End


//---------------------------------------------------------------------------

enum wxSignal
{
    wxSIGNONE,
    wxSIGHUP,
    wxSIGINT,
    wxSIGQUIT,
    wxSIGILL,
    wxSIGTRAP,
    wxSIGABRT,
    wxSIGEMT,
    wxSIGFPE,
    wxSIGKILL,
    wxSIGBUS,
    wxSIGSEGV,
    wxSIGSYS,
    wxSIGPIPE,
    wxSIGALRM,
    wxSIGTERM
};

enum wxKillError
{
    wxKILL_OK,
    wxKILL_BAD_SIGNAL,
    wxKILL_ACCESS_DENIED,
    wxKILL_NO_PROCESS,
    wxKILL_ERROR
};

enum wxKillFlags
{
    wxKILL_NOCHILDREN,
    wxKILL_CHILDREN
};

enum wxShutdownFlags
{
    wxSHUTDOWN_FORCE,
    wxSHUTDOWN_POWEROFF,
    wxSHUTDOWN_REBOOT,
    wxSHUTDOWN_LOGOFF
};

enum 
{
    wxStrip_Mnemonics,
    wxStrip_Accel,
    wxStrip_CJKMnemonics,
    wxStrip_All,
    wxStrip_Menu
};

enum 
{
    wxEXEC_ASYNC,
    wxEXEC_SYNC,
    wxEXEC_SHOW_CONSOLE,
    wxEXEC_MAKE_GROUP_LEADER,
    wxEXEC_NODISABLE,
    wxEXEC_NOEVENTS,
    wxEXEC_HIDE_CONSOLE,
    wxEXEC_BLOCK
};

void wxBeginBusyCursor(
    const wxCursor * cursor = wxHOURGLASS_CURSOR
);
%Docstring
    BeginBusyCursor(cursor=HOURGLASS_CURSOR)
    
    Changes the cursor to the given cursor for all windows in the
    application.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

void wxEndBusyCursor();
%Docstring
    EndBusyCursor()
    
    Changes the cursor back to the original cursor, for all windows in the
    application.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

bool wxIsBusy();
%Docstring
    IsBusy() -> bool
    
    Returns true if between two wxBeginBusyCursor() and wxEndBusyCursor()
    calls.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

void wxBell();
%Docstring
    Bell()
    
    Ring the system bell.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

void wxInfoMessageBox(
    wxWindow * parent
);
%Docstring
    InfoMessageBox(parent)
    
    Shows a message box with the information about the wxWidgets build
    used, including its version, most important build parameters and the
    version of the underlying GUI toolkit.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

wxVersionInfo wxGetLibraryVersionInfo();
%Docstring
    GetLibraryVersionInfo() -> VersionInfo
    
    Get wxWidgets version information.
%End

wxBatteryState wxGetBatteryState();
%Docstring
    GetBatteryState() -> BatteryState
    
    Returns battery state as one of wxBATTERY_NORMAL_STATE,
    wxBATTERY_LOW_STATE, wxBATTERY_CRITICAL_STATE,
    wxBATTERY_SHUTDOWN_STATE or wxBATTERY_UNKNOWN_STATE.
%End

wxPowerType wxGetPowerType();
%Docstring
    GetPowerType() -> PowerType
    
    Returns the type of power source as one of wxPOWER_SOCKET,
    wxPOWER_BATTERY or wxPOWER_UNKNOWN.
%End

bool wxGetKeyState(
    wxKeyCode key
);
%Docstring
    GetKeyState(key) -> bool
    
    For normal keys, returns true if the specified key is currently down.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

wxPoint wxGetMousePosition();
%Docstring
    GetMousePosition() -> Point
    
    Returns the mouse position in screen coordinates.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

wxMouseState wxGetMouseState();
%Docstring
    GetMouseState() -> MouseState
    
    Returns the current state of the mouse.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

void wxEnableTopLevelWindows(
    bool enable = true
);
%Docstring
    EnableTopLevelWindows(enable=True)
    
    This function enables or disables all top level windows.
%End

wxWindow * wxFindWindowAtPoint(
    const wxPoint & pt
);
%Docstring
    FindWindowAtPoint(pt) -> Window
    
    Find the deepest window at the given mouse position in screen
    coordinates, returning the window if found, or NULL if not.
%End

wxWindow * wxFindWindowByLabel(
    const wxString & label,
    wxWindow * parent = NULL
)   /Deprecated/;
%Docstring
    FindWindowByLabel(label, parent=None) -> Window
%End

wxWindow * wxFindWindowByName(
    const wxString & name,
    wxWindow * parent = NULL
)   /Deprecated/;
%Docstring
    FindWindowByName(name, parent=None) -> Window
%End

int wxFindMenuItemId(
    wxFrame * frame,
    const wxString & menuString,
    const wxString & itemString
);
%Docstring
    FindMenuItemId(frame, menuString, itemString) -> int
    
    Find a menu item identifier associated with the given frame's menu
    bar.
%End

wxWindowID wxNewId()   /Deprecated/;
%Docstring
    NewId() -> WindowID
%End

void wxRegisterId(
    wxWindowID id
);
%Docstring
    RegisterId(id)
    
    Ensures that Ids subsequently generated by wxNewId() do not clash with
    the given id.
%End

bool wxLaunchDefaultApplication(
    const wxString & document,
    int flags = 0
);
%Docstring
    LaunchDefaultApplication(document, flags=0) -> bool
    
    Opens the document in the application associated with the files of
    this type.
%End

bool wxLaunchDefaultBrowser(
    const wxString & url,
    int flags = 0
);
%Docstring
    LaunchDefaultBrowser(url, flags=0) -> bool
    
    Opens the url in user's default browser.
%End

wxString wxStripMenuCodes(
    const wxString & str,
    int flags = wxStrip_All
);
%Docstring
    StripMenuCodes(str, flags=Strip_All) -> String
    
    Strips any menu codes from str and returns the result.
%End

wxString wxGetEmailAddress();
%Docstring
    GetEmailAddress() -> String
    
    Copies the user's email address into the supplied buffer, by
    concatenating the values returned by wxGetFullHostName() and
    wxGetUserId().
%End


wxString wxGetHomeDir();
%Docstring
    GetHomeDir() -> String
    
    Return the (current) user's home directory.
%End

wxString wxGetHostName();
%Docstring
    GetHostName() -> String
    
    Copies the current host machine's name into the supplied buffer.
%End


wxString wxGetFullHostName();
%Docstring
    GetFullHostName() -> String
    
    Returns the FQDN (fully qualified domain host name) or an empty string
    on error.
%End

wxString wxGetUserHome(
    const wxString & user = wxEmptyString
);
%Docstring
    GetUserHome(user=EmptyString) -> String
    
    Returns the home directory for the given user.
%End

wxString wxGetUserId();
%Docstring
    GetUserId() -> String
    
    This function returns the "user id" also known as "login name" under
    Unix (i.e.
%End


wxString wxGetUserName();
%Docstring
    GetUserName() -> String
    
    This function returns the full user name (something like "Mr. John
    Smith").
%End


wxString wxGetOsDescription();
%Docstring
    GetOsDescription() -> String
    
    Returns the string containing the description of the current platform
    in a user-readable form.
%End

wxOperatingSystemId wxGetOsVersion(
    int * major   /Out/ = NULL,
    int * minor   /Out/ = NULL,
    int * micro = NULL
);
%Docstring
    GetOsVersion(micro=None) -> (OperatingSystemId, major, minor)
    
    Gets the version and the operating system ID for currently running OS.
%End

bool wxCheckOsVersion(
    int majorVsn,
    int minorVsn = 0,
    int microVsn = 0
);
%Docstring
    CheckOsVersion(majorVsn, minorVsn=0, microVsn=0) -> bool
    
    Returns true if the version of the operating system on which the
    program is running under is the same or later than the given version.
%End

bool wxIsPlatform64Bit();
%Docstring
    IsPlatform64Bit() -> bool
    
    Returns true if the operating system the program is running under is
    64 bit.
%End

bool wxIsPlatformLittleEndian();
%Docstring
    IsPlatformLittleEndian() -> bool
    
    Returns true if the current platform is little endian (instead of big
    endian).
%End

wxString wxGetCpuArchitectureName();
%Docstring
    GetCpuArchitectureName() -> String
    
    Returns the CPU architecture name.
%End

long wxExecute(
    const wxString & command,
    int flags = wxEXEC_ASYNC,
    wxProcess * callback = NULL,
    const wxExecuteEnv * env = NULL
);
%Docstring
    Execute(command, flags=EXEC_ASYNC, callback=None, env=None) -> long
    
    Executes another program in Unix or Windows.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

unsigned long wxGetProcessId();
%Docstring
    GetProcessId() -> unsignedlong
    
    Returns the number uniquely identifying the current process in the
    system.
%End

int wxKill(
    long pid,
    wxSignal sig = wxSIGTERM,
    wxKillError * rc = NULL,
    int flags = wxKILL_NOCHILDREN
);
%Docstring
    Kill(pid, sig=SIGTERM, rc=None, flags=KILL_NOCHILDREN) -> int
    
    Equivalent to the Unix kill function: send the given signal sig to the
    process with PID pid.
%End

bool wxShell(
    const wxString & command = wxEmptyString
);
%Docstring
    Shell(command=EmptyString) -> bool
    
    Executes a command in an interactive shell window.
%End

bool wxShutdown(
    int flags = wxSHUTDOWN_POWEROFF
);
%Docstring
    Shutdown(flags=SHUTDOWN_POWEROFF) -> bool
    
    This function shuts down or reboots the computer depending on the
    value of the flags.
%End
%PreMethodCode
    if (!wxPyCheckForApp()) return NULL;
%End

void wxMicroSleep(
    unsigned long microseconds
);
%Docstring
    MicroSleep(microseconds)
    
    Sleeps for the specified number of microseconds.
%End

void wxMilliSleep(
    unsigned long milliseconds
);
%Docstring
    MilliSleep(milliseconds)
    
    Sleeps for the specified number of milliseconds.
%End

wxString wxNow();
%Docstring
    Now() -> String
    
    Returns a string representing the current date and time.
%End

void wxSleep(
    int secs
);
%Docstring
    Sleep(secs)
    
    Sleeps for the specified number of seconds.
%End

void wxDecToHex(
    unsigned char dec,
    wxChar * buf
);
%Docstring
    DecToHex(dec, buf)
    DecToHex(dec) -> String
    DecToHex(dec, ch1, ch2)
    
    Convert decimal integer to 2-character hexadecimal string.
%End
wxString wxDecToHex(
    unsigned char dec
);

void wxDecToHex(
    unsigned char dec,
    char * ch1,
    char * ch2
);


int wxHexToDec(
    const wxString & buf
);
%Docstring
    HexToDec(buf) -> int
    HexToDec(buf) -> int
    
    Convert 2-character hexadecimal string to decimal integer.
%End
int wxHexToDec(
    const char * buf
);


class wxWindowDisabler
{
    %Docstring
        WindowDisabler(disable=True)
        WindowDisabler(winToSkip)
        
        This class disables all top level windows of the application (maybe
        with the exception of one of them) in its constructor and enables them
        back in its destructor.
    %End
    %TypeHeaderCode
        #include <wx/utils.h>
    %End

public:
    wxWindowDisabler(
        bool disable = true
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxWindowDisabler(
        wxWindow * winToSkip
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxWindowDisabler();

    private:
        wxWindowDisabler(const wxWindowDisabler&);


};  // end of class wxWindowDisabler


%Extract(id=pycode_core)
def _WindowDisabler___enter__(self):
    return self
WindowDisabler.__enter__ = _WindowDisabler___enter__
del _WindowDisabler___enter__
%End

%Extract(id=pycode_core)
def _WindowDisabler___exit__(self, exc_type, exc_val, exc_tb):
    pass
WindowDisabler.__exit__ = _WindowDisabler___exit__
del _WindowDisabler___exit__
%End

class wxBusyCursor
{
    %Docstring
        BusyCursor(cursor=HOURGLASS_CURSOR)
        
        This class makes it easy to tell your user that the program is
        temporarily busy.
    %End
    %TypeHeaderCode
        #include <wx/utils.h>
    %End

public:
    wxBusyCursor(
        const wxCursor * cursor = wxHOURGLASS_CURSOR
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxBusyCursor();

};  // end of class wxBusyCursor


%Extract(id=pycode_core)
def _BusyCursor___enter__(self):
    return self
BusyCursor.__enter__ = _BusyCursor___enter__
del _BusyCursor___enter__
%End

%Extract(id=pycode_core)
def _BusyCursor___exit__(self, exc_type, exc_val, exc_tb):
    pass
BusyCursor.__exit__ = _BusyCursor___exit__
del _BusyCursor___exit__
%End

class wxVersionInfo
{
    %Docstring
        VersionInfo(name="", major=0, minor=0, micro=0, description="", copyright="")
        
        wxVersionInfo contains version information.
    %End
    %TypeHeaderCode
        #include <wx/versioninfo.h>
    %End

public:
    wxVersionInfo(
        const wxString & name = wxString(),
        int major = 0,
        int minor = 0,
        int micro = 0,
        const wxString & description = wxString(),
        const wxString & copyright = wxString()
    );

    const wxString & GetName() const;
    %Docstring
        GetName() -> String
        
        Get the name of the object (library).
    %End

    int GetMajor() const;
    %Docstring
        GetMajor() -> int
        
        Get the major version number.
    %End

    int GetMinor() const;
    %Docstring
        GetMinor() -> int
        
        Get the minor version number.
    %End

    int GetMicro() const;
    %Docstring
        GetMicro() -> int
        
        Get the micro version, or release number.
    %End

    wxString ToString() const;
    %Docstring
        ToString() -> String
        
        Get the string representation of this version object.
    %End

    wxString GetVersionString() const;
    %Docstring
        GetVersionString() -> String
        
        Get the string representation.
    %End

    bool HasDescription() const;
    %Docstring
        HasDescription() -> bool
        
        Return true if a description string has been specified.
    %End

    const wxString & GetDescription();
    %Docstring
        GetDescription() -> String
        
        Get the description string.
    %End

    bool HasCopyright() const;
    %Docstring
        HasCopyright() -> bool
        
        Returns true if a copyright string has been specified.
    %End

    const wxString & GetCopyright() const;
    %Docstring
        GetCopyright() -> String
        
        Get the copyright string.
    %End

    public:


    %Property(name=Copyright, get=GetCopyright)
    %Property(name=Description, get=GetDescription)
    %Property(name=Major, get=GetMajor)
    %Property(name=Micro, get=GetMicro)
    %Property(name=Minor, get=GetMinor)
    %Property(name=Name, get=GetName)
    %Property(name=VersionString, get=GetVersionString)
};  // end of class wxVersionInfo



//---------------------------------------------------------------------------

