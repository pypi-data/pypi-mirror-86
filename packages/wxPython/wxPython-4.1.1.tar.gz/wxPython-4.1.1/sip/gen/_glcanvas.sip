//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License

%Module( name=wx._glcanvas,
         keyword_arguments="All",
         use_argument_names=True,
         all_raise_py_exception=True,
         language="C++")
{
    %AutoPyName(remove_leading="wx")
};

%Copying
    Copyright: (c) 2020 by Total Control Software
    License:   wxWindows License
%End

%DefaultDocstringFormat(name="deindented")

%Extract(id=pycode_glcanvas, order=5)
# This file is generated by wxPython's SIP generator.  Do not edit by hand.
#
# Copyright: (c) 2020 by Total Control Software
# License:   wxWindows License

"""
These classes enable viewing and interacting with an OpenGL context in a wx.Window.
"""

from ._glcanvas import *

%End

//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wxPython/wxpy_api.h>
#include <wx/glcanvas.h>
#if !wxUSE_GLCANVAS
class wxGLAttribsBase;
class wxGLAttributes;
class wxGLContextAttrs;
class wxGLContext;
class wxGLCanvas;
#define wxGLCanvasName wxT("GLCanvas")


enum  {
    WX_GL_RGBA,
    WX_GL_BUFFER_SIZE,
    WX_GL_LEVEL,
    WX_GL_DOUBLEBUFFER,
    WX_GL_STEREO,
    WX_GL_AUX_BUFFERS,
    WX_GL_MIN_RED,
    WX_GL_MIN_GREEN,
    WX_GL_MIN_BLUE,
    WX_GL_MIN_ALPHA,
    WX_GL_DEPTH_SIZE,
    WX_GL_STENCIL_SIZE,
    WX_GL_MIN_ACCUM_RED,
    WX_GL_MIN_ACCUM_GREEN,
    WX_GL_MIN_ACCUM_BLUE,
    WX_GL_MIN_ACCUM_ALPHA,
    WX_GL_SAMPLE_BUFFERS,
    WX_GL_SAMPLES,
    WX_GL_FRAMEBUFFER_SRGB,
    WX_GL_MAJOR_VERSION,
    WX_GL_MINOR_VERSION,
    WX_GL_CORE_PROFILE,
    wx_GL_COMPAT_PROFILE,
    WX_GL_FORWARD_COMPAT,
    WX_GL_ES2,
    WX_GL_DEBUG,
    WX_GL_ROBUST_ACCESS,
    WX_GL_NO_RESET_NOTIFY,
    WX_GL_LOSE_ON_RESET,
    WX_GL_RESET_ISOLATION,
    WX_GL_RELEASE_FLUSH,
    WX_GL_RELEASE_NONE,
};

class wxGLAttribsBase {
public:
    wxGLAttribsBase()
        { wxPyRaiseNotImplemented(); }

    void AddAttribute(int attribute)
        { }

    void AddAttribBits(int searchVal, int combineVal)
        { }

    void SetNeedsARB(bool needsARB=true)
        { }

    void Reset()
        { }

    const int * GetGLAttrs() const 
        { return NULL; }

    int GetSize()
        { return 0; }

    bool NeedsARB() const 
        { return false; }

};

class wxGLAttributes : public wxGLAttribsBase {
public:
    wxGLAttributes & RGBA()
        { return *this; }

    wxGLAttributes & BufferSize(int val)
        { return *this; }

    wxGLAttributes & Level(int val)
        { return *this; }

    wxGLAttributes & DoubleBuffer()
        { return *this; }

    wxGLAttributes & Stereo()
        { return *this; }

    wxGLAttributes & AuxBuffers(int val)
        { return *this; }

    wxGLAttributes & MinRGBA(int mRed, int mGreen, int mBlue, int mAlpha)
        { return *this; }

    wxGLAttributes & Depth(int val)
        { return *this; }

    wxGLAttributes & Stencil(int val)
        { return *this; }

    wxGLAttributes & MinAcumRGBA(int mRed, int mGreen, int mBlue, int mAlpha)
        { return *this; }

    wxGLAttributes & SampleBuffers(int val)
        { return *this; }

    wxGLAttributes & Samplers(int val)
        { return *this; }

    wxGLAttributes & FrameBuffersRGB()
        { return *this; }

    wxGLAttributes & PlatformDefaults()
        { return *this; }

    wxGLAttributes & Defaults()
        { return *this; }

    void EndList()
        { }

};

class wxGLContextAttrs : public wxGLAttribsBase {
public:
    wxGLContextAttrs & CoreProfile()
        { return *this; }

    wxGLContextAttrs & MajorVersion(int val)
        { return *this; }

    wxGLContextAttrs & MinorVersion(int val)
        { return *this; }

    wxGLContextAttrs & OGLVersion(int vmayor, int vminor)
        { return *this; }

    wxGLContextAttrs & CompatibilityProfile()
        { return *this; }

    wxGLContextAttrs & ForwardCompatible()
        { return *this; }

    wxGLContextAttrs & ES2()
        { return *this; }

    wxGLContextAttrs & DebugCtx()
        { return *this; }

    wxGLContextAttrs & Robust()
        { return *this; }

    wxGLContextAttrs & NoResetNotify()
        { return *this; }

    wxGLContextAttrs & LoseOnReset()
        { return *this; }

    wxGLContextAttrs & ResetIsolation()
        { return *this; }

    wxGLContextAttrs & ReleaseFlush(int val=1)
        { return *this; }

    wxGLContextAttrs & PlatformDefaults()
        { return *this; }

    void EndList()
        { }

};

class wxGLContext : public wxObject {
public:
    wxGLContext(wxGLCanvas *win, const wxGLContext *other=NULL, const wxGLContextAttrs *ctxAttrs=NULL)
        { wxPyRaiseNotImplemented(); }

    bool IsOK()
        { return false; }

    virtual bool SetCurrent(const wxGLCanvas &win) const 
        { return false; }

};

class wxGLCanvas : public wxWindow {
public:
    wxGLCanvas(wxWindow *parent, const wxGLAttributes &dispAttrs, wxWindowID id=wxID_ANY, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=0, const wxString &name=wxGLCanvasName, const wxPalette &palette=wxNullPalette)
        { wxPyRaiseNotImplemented(); }

    wxGLCanvas(wxWindow *parent, wxWindowID id=wxID_ANY, const int *attribList=NULL, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=0, const wxString &name="GLCanvas", const wxPalette &palette=wxNullPalette)
        { wxPyRaiseNotImplemented(); }

    bool SetColour(const wxString &colour)
        { return false; }

    bool SetCurrent(const wxGLContext &context) const 
        { return false; }

    virtual bool SwapBuffers()
        { return false; }

    static bool IsDisplaySupported(const wxGLAttributes &dispAttrs)
        { wxPyRaiseNotImplemented(); return false; }

    static bool IsDisplaySupported(const int *attribList)
        { wxPyRaiseNotImplemented(); return false; }

    static bool IsExtensionSupported(const char *extension)
        { wxPyRaiseNotImplemented(); return false; }

};
#endif //!wxUSE_GLCANVAS

%End

%Import _core.sip


//---------------------------------------------------------------------------

enum 
{
    WX_GL_RGBA,
    WX_GL_BUFFER_SIZE,
    WX_GL_LEVEL,
    WX_GL_DOUBLEBUFFER,
    WX_GL_STEREO,
    WX_GL_AUX_BUFFERS,
    WX_GL_MIN_RED,
    WX_GL_MIN_GREEN,
    WX_GL_MIN_BLUE,
    WX_GL_MIN_ALPHA,
    WX_GL_DEPTH_SIZE,
    WX_GL_STENCIL_SIZE,
    WX_GL_MIN_ACCUM_RED,
    WX_GL_MIN_ACCUM_GREEN,
    WX_GL_MIN_ACCUM_BLUE,
    WX_GL_MIN_ACCUM_ALPHA,
    WX_GL_SAMPLE_BUFFERS,
    WX_GL_SAMPLES,
    WX_GL_FRAMEBUFFER_SRGB,
    WX_GL_MAJOR_VERSION,
    WX_GL_MINOR_VERSION,
    WX_GL_CORE_PROFILE,
    wx_GL_COMPAT_PROFILE,
    WX_GL_FORWARD_COMPAT,
    WX_GL_ES2,
    WX_GL_DEBUG,
    WX_GL_ROBUST_ACCESS,
    WX_GL_NO_RESET_NOTIFY,
    WX_GL_LOSE_ON_RESET,
    WX_GL_RESET_ISOLATION,
    WX_GL_RELEASE_FLUSH,
    WX_GL_RELEASE_NONE
};

class wxGLAttribsBase
{
    %Docstring
        GLAttribsBase()
        
        This is the base class for wxGLAttributes and wxGLContextAttrs.
    %End
    %TypeHeaderCode
        #include <wx/glcanvas.h>
    %End

public:
    wxGLAttribsBase();

    void AddAttribute(
        int attribute
    );
    %Docstring
        AddAttribute(attribute)
        
        Adds an integer value to the list of attributes.
    %End

    void AddAttribBits(
        int searchVal,
        int combineVal
    );
    %Docstring
        AddAttribBits(searchVal, combineVal)
        
        Combine (bitwise OR) a given value with the existing one, if any.
    %End

    void SetNeedsARB(
        bool needsARB = true
    );
    %Docstring
        SetNeedsARB(needsARB=True)
        
        Sets the necessity of using special ARB-functions (e.g.
    %End

    void Reset();
    %Docstring
        Reset()
        
        Delete contents and sets ARB-flag to false.
    %End

    int GetSize();
    %Docstring
        GetSize() -> int
        
        Returns the size of the internal list of attributes.
    %End

    bool NeedsARB() const;
    %Docstring
        NeedsARB() -> bool
        
        Returns the current value of the ARB-flag.
    %End

    public:


    %Property(name=Size, get=GetSize)
};  // end of class wxGLAttribsBase


class wxGLAttributes : wxGLAttribsBase
{
    %Docstring
        This class is used for setting display attributes when drawing through
        OpenGL ("Pixel format" in MSW and OSX parlance, "Configs" in X11).
    %End
    %TypeHeaderCode
        #include <wx/glcanvas.h>
    %End

public:
    wxGLAttributes & RGBA();
    %Docstring
        RGBA() -> GLAttributes
        
        Use true colour instead of colour index rendering for each pixel.
    %End

    wxGLAttributes & BufferSize(
        int val
    );
    %Docstring
        BufferSize(val) -> GLAttributes
        
        Specifies the number of bits for colour buffer.
    %End

    wxGLAttributes & Level(
        int val
    );
    %Docstring
        Level(val) -> GLAttributes
        
        Specifies the framebuffer level.
    %End

    wxGLAttributes & DoubleBuffer();
    %Docstring
        DoubleBuffer() -> GLAttributes
        
        Requests using double buffering.
    %End

    wxGLAttributes & Stereo();
    %Docstring
        Stereo() -> GLAttributes
        
        Use stereoscopic display.
    %End

    wxGLAttributes & AuxBuffers(
        int val
    );
    %Docstring
        AuxBuffers(val) -> GLAttributes
        
        Specifies the number of auxiliary buffers.
    %End

    wxGLAttributes & MinRGBA(
        int mRed,
        int mGreen,
        int mBlue,
        int mAlpha
    );
    %Docstring
        MinRGBA(mRed, mGreen, mBlue, mAlpha) -> GLAttributes
        
        Specifies the minimal number of bits for each colour and alpha.
    %End

    wxGLAttributes & Depth(
        int val
    );
    %Docstring
        Depth(val) -> GLAttributes
        
        Specifies number of bits for Z-buffer.
    %End

    wxGLAttributes & Stencil(
        int val
    );
    %Docstring
        Stencil(val) -> GLAttributes
        
        Specifies number of bits for stencil buffer.
    %End

    wxGLAttributes & MinAcumRGBA(
        int mRed,
        int mGreen,
        int mBlue,
        int mAlpha
    );
    %Docstring
        MinAcumRGBA(mRed, mGreen, mBlue, mAlpha) -> GLAttributes
        
        Specifies the minimal number of bits for each accumulator channel.
    %End

    wxGLAttributes & SampleBuffers(
        int val
    );
    %Docstring
        SampleBuffers(val) -> GLAttributes
        
        Use multi-sampling support (antialiasing).
    %End

    wxGLAttributes & Samplers(
        int val
    );
    %Docstring
        Samplers(val) -> GLAttributes
        
        Specifies the number of samplers per pixel.
    %End

    wxGLAttributes & FrameBuffersRGB();
    %Docstring
        FrameBuffersRGB() -> GLAttributes
        
        Used to request a frame buffer sRGB capable.
    %End

    wxGLAttributes & PlatformDefaults();
    %Docstring
        PlatformDefaults() -> GLAttributes
        
        Set some typically needed attributes.
    %End

    wxGLAttributes & Defaults();
    %Docstring
        Defaults() -> GLAttributes
        
        wxWidgets defaults: RGBA, Z-depth 16 bits, double buffering, 1 sample
        buffer, 4 samplers.
    %End

    void EndList();
    %Docstring
        EndList()
        
        The set of attributes must end with this one; otherwise, the GPU may
        display nothing at all.
    %End

};  // end of class wxGLAttributes


class wxGLContextAttrs : wxGLAttribsBase
{
    %Docstring
        This class is used for setting context attributes.
    %End
    %TypeHeaderCode
        #include <wx/glcanvas.h>
    %End

public:
    wxGLContextAttrs & CoreProfile();
    %Docstring
        CoreProfile() -> GLContextAttrs
        
        Request an OpenGL core profile for the context.
    %End

    wxGLContextAttrs & MajorVersion(
        int val
    );
    %Docstring
        MajorVersion(val) -> GLContextAttrs
        
        Request specific OpenGL core major version number (>= 3).
    %End

    wxGLContextAttrs & MinorVersion(
        int val
    );
    %Docstring
        MinorVersion(val) -> GLContextAttrs
        
        Request specific OpenGL core minor version number.
    %End

    wxGLContextAttrs & OGLVersion(
        int vmayor,
        int vminor
    );
    %Docstring
        OGLVersion(vmayor, vminor) -> GLContextAttrs
        
        An easy way of requesting an OpenGL version.
    %End

    wxGLContextAttrs & CompatibilityProfile();
    %Docstring
        CompatibilityProfile() -> GLContextAttrs
        
        Request a type of context with all OpenGL features from version 1.0 to
        the newest available by the GPU driver.
    %End

    wxGLContextAttrs & ForwardCompatible();
    %Docstring
        ForwardCompatible() -> GLContextAttrs
        
        Request a forward-compatible context.
    %End

    wxGLContextAttrs & ES2();
    %Docstring
        ES2() -> GLContextAttrs
        
        Request an ES or ES2 ("Embedded Subsystem") context.
    %End

    wxGLContextAttrs & DebugCtx();
    %Docstring
        DebugCtx() -> GLContextAttrs
        
        Request debugging functionality.
    %End

    wxGLContextAttrs & Robust();
    %Docstring
        Robust() -> GLContextAttrs
        
        Request robustness, or how OpenGL handles out-of-bounds buffer object
        accesses and graphics reset notification behaviours.
    %End

    wxGLContextAttrs & NoResetNotify();
    %Docstring
        NoResetNotify() -> GLContextAttrs
        
        With robustness enabled, never deliver notification of reset events.
    %End

    wxGLContextAttrs & LoseOnReset();
    %Docstring
        LoseOnReset() -> GLContextAttrs
        
        With robustness enabled, if graphics reset happens, all context state
        is lost.
    %End

    wxGLContextAttrs & ResetIsolation();
    %Docstring
        ResetIsolation() -> GLContextAttrs
        
        Request OpenGL to protect other applications or shared contexts from
        reset side-effects.
    %End

    wxGLContextAttrs & ReleaseFlush(
        int val = 1
    );
    %Docstring
        ReleaseFlush(val=1) -> GLContextAttrs
        
        Request OpenGL to avoid or not flushing pending commands when the
        context is made no longer current (released).
    %End

    wxGLContextAttrs & PlatformDefaults();
    %Docstring
        PlatformDefaults() -> GLContextAttrs
        
        Set platform specific defaults.
    %End

    void EndList();
    %Docstring
        EndList()
        
        The set of attributes must end with this one; otherwise, the GPU may
        display nothing at all.
    %End

};  // end of class wxGLContextAttrs


class wxGLContext : wxObject
{
    %Docstring
        GLContext(win, other=None, ctxAttrs=None)
        
        An instance of a wxGLContext represents the state of an OpenGL state
        machine and the connection between OpenGL and the system.
    %End
    %TypeHeaderCode
        #include <wx/glcanvas.h>
    %End

public:
    wxGLContext(
        wxGLCanvas * win,
        const wxGLContext * other = NULL,
        const wxGLContextAttrs * ctxAttrs = NULL
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool IsOK();
    %Docstring
        IsOK() -> bool
        
        Checks if the underlying OpenGL rendering context was correctly
        created by the system with the requested attributes.
    %End

    virtual
    bool SetCurrent(
        const wxGLCanvas & win
    ) const;
    %Docstring
        SetCurrent(win) -> bool
        
        Makes the OpenGL state that is represented by this rendering context
        current with the wxGLCanvas win.
    %End

    private:
        wxGLContext(const wxGLContext&);


    public:


};  // end of class wxGLContext


class wxGLCanvas : wxWindow
{
    %Docstring
        GLCanvas(parent, dispAttrs, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=GLCanvasName, palette=NullPalette)
        GLCanvas(parent, id=wx.ID_ANY, attribList=None, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, name='GLCanvas', palette=wx.NullPalette)
        
        wxGLCanvas is a class for displaying OpenGL graphics.
    %End
    %TypeHeaderCode
        #include <wx/glcanvas.h>
    %End

public:
    wxGLCanvas(
        wxWindow * parent   /TransferThis/,
        const wxGLAttributes & dispAttrs,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxGLCanvasName,
        const wxPalette & palette = wxNullPalette
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxGLCanvas(
             wxWindow* parent /TransferThis/,
             wxWindowID id=wxID_ANY,
             wxArrayInt* attribList=NULL,
             const wxPoint& pos=wxDefaultPosition,
             const wxSize& size=wxDefaultSize,
             long style=0,
             const wxString& name="GLCanvas",
             const wxPalette& palette=wxNullPalette)
              [ (
             wxWindow* parent, wxWindowID id=wxID_ANY, const int* attribList=NULL,
             const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize,
             long style=0, const wxString& name="GLCanvas",
             const wxPalette& palette=wxNullPalette) ];
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        const int* attribPtr = NULL;
        if (attribList) {
            attribList->push_back(0); // ensure it is zero-terminated
            attribPtr = &attribList->front();
        }
        sipCpp = new sipwxGLCanvas(parent, id, attribPtr, *pos, *size, style, *name, *palette);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End

    bool SetColour(
        const wxString & colour
    );
    %Docstring
        SetColour(colour) -> bool
        
        Sets the current colour for this window (using glcolor3f()), using the
        wxWidgets colour database to find a named colour.
    %End

    bool SetCurrent(
        const wxGLContext & context
    ) const;
    %Docstring
        SetCurrent(context) -> bool
        
        Makes the OpenGL state that is represented by the OpenGL rendering
        context context current, i.e.
    %End

    bool SwapBuffers();
    %Docstring
        SwapBuffers() -> bool
        
        Swaps the double-buffer of this window, making the back-buffer the
        front-buffer and vice versa, so that the output of the previous OpenGL
        commands is displayed on the window.
    %End

    static
    bool IsDisplaySupported(
        const wxGLAttributes & dispAttrs
    );
    %Docstring
        IsDisplaySupported(dispAttrs) -> bool
        IsDisplaySupported(attribList) -> bool
        
        Determines if a canvas having the specified attributes is available.
    %End

    static
    bool IsDisplaySupported(
        wxArrayInt* attribList
    );
    %MethodCode
        const int* attribPtr = NULL;
        if (attribList) {
            attribList->push_back(0); // ensure it is zero-terminated
            attribPtr = &attribList->front();
        }
        sipRes = wxGLCanvas::IsDisplaySupported(attribPtr);
    %End

    static
    bool IsExtensionSupported(
        const char * extension
    );
    %Docstring
        IsExtensionSupported(extension) -> bool
        
        Returns true if the extension with given name is supported.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


};  // end of class wxGLCanvas


%Extract(id=pycode_glcanvas, order=10)
import wx

%End

const int wxUSE_GLCANVAS;

//---------------------------------------------------------------------------

