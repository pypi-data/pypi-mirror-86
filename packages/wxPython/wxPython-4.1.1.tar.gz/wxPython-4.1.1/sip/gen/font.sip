//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

enum wxFontFamily
{
    wxFONTFAMILY_DEFAULT,
    wxFONTFAMILY_DECORATIVE,
    wxFONTFAMILY_ROMAN,
    wxFONTFAMILY_SCRIPT,
    wxFONTFAMILY_SWISS,
    wxFONTFAMILY_MODERN,
    wxFONTFAMILY_TELETYPE,
    wxFONTFAMILY_MAX,
    wxFONTFAMILY_UNKNOWN
};

enum wxFontStyle
{
    wxFONTSTYLE_NORMAL,
    wxFONTSTYLE_ITALIC,
    wxFONTSTYLE_SLANT,
    wxFONTSTYLE_MAX
};

enum wxFontWeight
{
    wxFONTWEIGHT_INVALID,
    wxFONTWEIGHT_THIN,
    wxFONTWEIGHT_EXTRALIGHT,
    wxFONTWEIGHT_LIGHT,
    wxFONTWEIGHT_NORMAL,
    wxFONTWEIGHT_MEDIUM,
    wxFONTWEIGHT_SEMIBOLD,
    wxFONTWEIGHT_BOLD,
    wxFONTWEIGHT_EXTRABOLD,
    wxFONTWEIGHT_HEAVY,
    wxFONTWEIGHT_EXTRAHEAVY,
    wxFONTWEIGHT_MAX
};

enum wxFontSymbolicSize
{
    wxFONTSIZE_XX_SMALL,
    wxFONTSIZE_X_SMALL,
    wxFONTSIZE_SMALL,
    wxFONTSIZE_MEDIUM,
    wxFONTSIZE_LARGE,
    wxFONTSIZE_X_LARGE,
    wxFONTSIZE_XX_LARGE
};

enum wxFontFlag
{
    wxFONTFLAG_DEFAULT,
    wxFONTFLAG_ITALIC,
    wxFONTFLAG_SLANT,
    wxFONTFLAG_LIGHT,
    wxFONTFLAG_BOLD,
    wxFONTFLAG_ANTIALIASED,
    wxFONTFLAG_NOT_ANTIALIASED,
    wxFONTFLAG_UNDERLINED,
    wxFONTFLAG_STRIKETHROUGH,
    wxFONTFLAG_MASK
};

enum wxFontEncoding
{
    wxFONTENCODING_SYSTEM,
    wxFONTENCODING_DEFAULT,
    wxFONTENCODING_ISO8859_1,
    wxFONTENCODING_ISO8859_2,
    wxFONTENCODING_ISO8859_3,
    wxFONTENCODING_ISO8859_4,
    wxFONTENCODING_ISO8859_5,
    wxFONTENCODING_ISO8859_6,
    wxFONTENCODING_ISO8859_7,
    wxFONTENCODING_ISO8859_8,
    wxFONTENCODING_ISO8859_9,
    wxFONTENCODING_ISO8859_10,
    wxFONTENCODING_ISO8859_11,
    wxFONTENCODING_ISO8859_12,
    wxFONTENCODING_ISO8859_13,
    wxFONTENCODING_ISO8859_14,
    wxFONTENCODING_ISO8859_15,
    wxFONTENCODING_ISO8859_MAX,
    wxFONTENCODING_KOI8,
    wxFONTENCODING_KOI8_U,
    wxFONTENCODING_ALTERNATIVE,
    wxFONTENCODING_BULGARIAN,
    wxFONTENCODING_CP437,
    wxFONTENCODING_CP850,
    wxFONTENCODING_CP852,
    wxFONTENCODING_CP855,
    wxFONTENCODING_CP866,
    wxFONTENCODING_CP874,
    wxFONTENCODING_CP932,
    wxFONTENCODING_CP936,
    wxFONTENCODING_CP949,
    wxFONTENCODING_CP950,
    wxFONTENCODING_CP1250,
    wxFONTENCODING_CP1251,
    wxFONTENCODING_CP1252,
    wxFONTENCODING_CP1253,
    wxFONTENCODING_CP1254,
    wxFONTENCODING_CP1255,
    wxFONTENCODING_CP1256,
    wxFONTENCODING_CP1257,
    wxFONTENCODING_CP1258,
    wxFONTENCODING_CP1361,
    wxFONTENCODING_CP12_MAX,
    wxFONTENCODING_UTF7,
    wxFONTENCODING_UTF8,
    wxFONTENCODING_EUC_JP,
    wxFONTENCODING_UTF16BE,
    wxFONTENCODING_UTF16LE,
    wxFONTENCODING_UTF32BE,
    wxFONTENCODING_UTF32LE,
    wxFONTENCODING_MACROMAN,
    wxFONTENCODING_MACJAPANESE,
    wxFONTENCODING_MACCHINESETRAD,
    wxFONTENCODING_MACKOREAN,
    wxFONTENCODING_MACARABIC,
    wxFONTENCODING_MACHEBREW,
    wxFONTENCODING_MACGREEK,
    wxFONTENCODING_MACCYRILLIC,
    wxFONTENCODING_MACDEVANAGARI,
    wxFONTENCODING_MACGURMUKHI,
    wxFONTENCODING_MACGUJARATI,
    wxFONTENCODING_MACORIYA,
    wxFONTENCODING_MACBENGALI,
    wxFONTENCODING_MACTAMIL,
    wxFONTENCODING_MACTELUGU,
    wxFONTENCODING_MACKANNADA,
    wxFONTENCODING_MACMALAJALAM,
    wxFONTENCODING_MACSINHALESE,
    wxFONTENCODING_MACBURMESE,
    wxFONTENCODING_MACKHMER,
    wxFONTENCODING_MACTHAI,
    wxFONTENCODING_MACLAOTIAN,
    wxFONTENCODING_MACGEORGIAN,
    wxFONTENCODING_MACARMENIAN,
    wxFONTENCODING_MACCHINESESIMP,
    wxFONTENCODING_MACTIBETAN,
    wxFONTENCODING_MACMONGOLIAN,
    wxFONTENCODING_MACETHIOPIC,
    wxFONTENCODING_MACCENTRALEUR,
    wxFONTENCODING_MACVIATNAMESE,
    wxFONTENCODING_MACARABICEXT,
    wxFONTENCODING_MACSYMBOL,
    wxFONTENCODING_MACDINGBATS,
    wxFONTENCODING_MACTURKISH,
    wxFONTENCODING_MACCROATIAN,
    wxFONTENCODING_MACICELANDIC,
    wxFONTENCODING_MACROMANIAN,
    wxFONTENCODING_MACCELTIC,
    wxFONTENCODING_MACGAELIC,
    wxFONTENCODING_MACKEYBOARD,
    wxFONTENCODING_ISO2022_JP,
    wxFONTENCODING_MAX,
    wxFONTENCODING_MACMIN,
    wxFONTENCODING_MACMAX,
    wxFONTENCODING_UTF16,
    wxFONTENCODING_UTF32,
    wxFONTENCODING_UNICODE,
    wxFONTENCODING_GB2312,
    wxFONTENCODING_BIG5,
    wxFONTENCODING_SHIFT_JIS,
    wxFONTENCODING_EUC_KR,
    wxFONTENCODING_JOHAB,
    wxFONTENCODING_VIETNAMESE
};

class wxFontInfo
{
    %Docstring
        FontInfo()
        FontInfo(pointSize)
        FontInfo(pixelSize)
        
        This class is a helper used for wxFont creation using named parameter
        idiom: it allows specifying various wxFont attributes using the
        chained calls to its clearly named methods instead of passing them in
        the fixed order to wxFont constructors.
    %End
    %TypeHeaderCode
        #include <wx/font.h>
    %End

public:
    wxFontInfo();

    wxFontInfo(
        double pointSize
    );

    wxFontInfo(
        const wxSize & pixelSize
    );

    wxFontInfo & Family(
        wxFontFamily family
    );
    %Docstring
        Family(family) -> FontInfo
        
        Set the font family.
    %End

    wxFontInfo & FaceName(
        const wxString & faceName
    );
    %Docstring
        FaceName(faceName) -> FontInfo
        
        Set the font face name to use.
    %End

    wxFontInfo & Weight(
        int weight
    );
    %Docstring
        Weight(weight) -> FontInfo
        
        Specify the weight of the font.
    %End

    wxFontInfo & Bold(
        bool bold = true
    );
    %Docstring
        Bold(bold=True) -> FontInfo
        
        Use a bold version of the font.
    %End

    wxFontInfo & Light(
        bool light = true
    );
    %Docstring
        Light(light=True) -> FontInfo
        
        Use a lighter version of the font.
    %End

    wxFontInfo & Italic(
        bool italic = true
    );
    %Docstring
        Italic(italic=True) -> FontInfo
        
        Use an italic version of the font.
    %End

    wxFontInfo & Slant(
        bool slant = true
    );
    %Docstring
        Slant(slant=True) -> FontInfo
        
        Use a slanted version of the font.
    %End

    wxFontInfo & Style(
        wxFontStyle style
    );
    %Docstring
        Style(style) -> FontInfo
        
        Specify the style of the font using one of wxFontStyle constants.
    %End

    wxFontInfo & AntiAliased(
        bool antiAliased = true
    );
    %Docstring
        AntiAliased(antiAliased=True) -> FontInfo
        
        Set anti-aliasing flag.
    %End

    wxFontInfo & Underlined(
        bool underlined = true
    );
    %Docstring
        Underlined(underlined=True) -> FontInfo
        
        Use an underlined version of the font.
    %End

    wxFontInfo & Strikethrough(
        bool strikethrough = true
    );
    %Docstring
        Strikethrough(strikethrough=True) -> FontInfo
        
        Use a strike-through version of the font.
    %End

    wxFontInfo & Encoding(
        wxFontEncoding encoding
    );
    %Docstring
        Encoding(encoding) -> FontInfo
        
        Set the font encoding to use.
    %End

    wxFontInfo & AllFlags(
        int flags
    );
    %Docstring
        AllFlags(flags) -> FontInfo
        
        Set all the font attributes at once.
    %End

    static
    wxFontWeight GetWeightClosestToNumericValue(
        int numWeight
    );
    %Docstring
        GetWeightClosestToNumericValue(numWeight) -> FontWeight
        
        Get the symbolic weight closest to the given raw weight value.
    %End

};  // end of class wxFontInfo


class wxFont : wxGDIObject
{
    %Docstring
        Font()
        Font(font)
        Font(fontInfo)
        Font(pointSize, family, style, weight, underline=False, faceName=EmptyString, encoding=FONTENCODING_DEFAULT)
        Font(pixelSize, family, style, weight, underline=False, faceName=EmptyString, encoding=FONTENCODING_DEFAULT)
        Font(nativeInfoString)
        Font(nativeInfo)
        
        A font is an object which determines the appearance of text.
    %End
    %TypeHeaderCode
        #include <wx/font.h>
    %End

public:
    wxFont();

    wxFont(
        const wxFont & font
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxFont(
        const wxFontInfo & fontInfo
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxFont(
        int pointSize,
        wxFontFamily family,
        wxFontStyle style,
        wxFontWeight weight,
        bool underline = false,
        const wxString & faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxFont(
        const wxSize & pixelSize,
        wxFontFamily family,
        wxFontStyle style,
        wxFontWeight weight,
        bool underline = false,
        const wxString & faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxFont(
        const wxString & nativeInfoString
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxFont(
        const wxNativeFontInfo & nativeInfo
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxFont();

    wxFont GetBaseFont() const;
    %Docstring
        GetBaseFont() -> Font
        
        Returns a font with the same face/size as the given one but with
        normal weight and style and not underlined nor stricken through.
    %End

    wxFontEncoding GetEncoding() const;
    %Docstring
        GetEncoding() -> FontEncoding
        
        Returns the encoding of this font.
    %End

    wxString GetFaceName() const;
    %Docstring
        GetFaceName() -> String
        
        Returns the face name associated with the font, or the empty string if
        there is no face information.
    %End

    wxFontFamily GetFamily() const;
    %Docstring
        GetFamily() -> FontFamily
        
        Gets the font family if possible.
    %End

    wxString GetNativeFontInfoDesc() const;
    %Docstring
        GetNativeFontInfoDesc() -> String
        
        Returns the platform-dependent string completely describing this font.
    %End

    wxString GetNativeFontInfoUserDesc() const;
    %Docstring
        GetNativeFontInfoUserDesc() -> String
        
        Returns a user-friendly string for this font object.
    %End

    const wxNativeFontInfo * GetNativeFontInfo() const;
    %Docstring
        GetNativeFontInfo() -> NativeFontInfo
        
        Returns a font with the same face/size as the given one but with
        normal weight and style and not underlined nor stricken through.
    %End

    int GetPointSize() const;
    %Docstring
        GetPointSize() -> int
        
        Gets the point size as an integer number.
    %End

    double GetFractionalPointSize() const;
    %Docstring
        GetFractionalPointSize() -> double
        
        Gets the point size as a floating number.
    %End

    wxSize GetPixelSize() const;
    %Docstring
        GetPixelSize() -> Size
        
        Gets the pixel size.
    %End

    wxFontStyle GetStyle() const;
    %Docstring
        GetStyle() -> FontStyle
        
        Gets the font style.
    %End

    bool GetUnderlined() const;
    %Docstring
        GetUnderlined() -> bool
        
        Returns true if the font is underlined, false otherwise.
    %End

    bool GetStrikethrough() const;
    %Docstring
        GetStrikethrough() -> bool
        
        Returns true if the font is stricken-through, false otherwise.
    %End

    wxFontWeight GetWeight() const;
    %Docstring
        GetWeight() -> FontWeight
        
        Gets the font weight.
    %End

    int GetNumericWeight() const;
    %Docstring
        GetNumericWeight() -> int
        
        Gets the font weight as an integer value.
    %End

    bool IsFixedWidth() const;
    %Docstring
        IsFixedWidth() -> bool
        
        Returns true if the font is a fixed width (or monospaced) font, false
        if it is a proportional one or font is invalid.
    %End

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if this object is a valid font, false otherwise.
    %End

    static
    bool AddPrivateFont(
        const wxString & filename
    );
    %Docstring
        AddPrivateFont(filename) -> bool
        
        Specify the name of a file containing a TrueType font to be made
        available to the current application.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFont_AddPrivateFont(filename);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxFont_AddPrivateFont(const wxString *filename)
    {
        #if wxUSE_PRIVATE_FONTS
            return wxFont::AddPrivateFont(*filename);
        #else
            wxPyRaiseNotImplemented();
            return false;
        #endif
    }
    %End

    wxFont Bold() const;
    %Docstring
        Bold() -> Font
        
        Returns a bold version of this font.
    %End

    wxFont Italic() const;
    %Docstring
        Italic() -> Font
        
        Returns an italic version of this font.
    %End

    wxFont Larger() const;
    %Docstring
        Larger() -> Font
        
        Returns a larger version of this font.
    %End

    wxFont Smaller() const;
    %Docstring
        Smaller() -> Font
        
        Returns a smaller version of this font.
    %End

    wxFont Underlined() const;
    %Docstring
        Underlined() -> Font
        
        Returns underlined version of this font.
    %End

    wxFont Strikethrough() const;
    %Docstring
        Strikethrough() -> Font
        
        Returns stricken-through version of this font.
    %End

    wxFont & MakeBold();
    %Docstring
        MakeBold() -> Font
        
        Changes this font to be bold.
    %End

    wxFont & MakeItalic();
    %Docstring
        MakeItalic() -> Font
        
        Changes this font to be italic.
    %End

    wxFont & MakeLarger();
    %Docstring
        MakeLarger() -> Font
        
        Changes this font to be larger.
    %End

    wxFont & MakeSmaller();
    %Docstring
        MakeSmaller() -> Font
        
        Changes this font to be smaller.
    %End

    wxFont & MakeUnderlined();
    %Docstring
        MakeUnderlined() -> Font
        
        Changes this font to be underlined.
    %End

    wxFont & MakeStrikethrough();
    %Docstring
        MakeStrikethrough() -> Font
        
        Changes this font to be stricken-through.
    %End

    wxFont & Scale(
        float x
    );
    %Docstring
        Scale(x) -> Font
        
        Changes the size of this font.
    %End

    wxFont Scaled(
        float x
    ) const;
    %Docstring
        Scaled(x) -> Font
        
        Returns a scaled version of this font.
    %End

    void SetEncoding(
        wxFontEncoding encoding
    );
    %Docstring
        SetEncoding(encoding)
        
        Sets the encoding for this font.
    %End

    bool SetFaceName(
        const wxString & faceName
    );
    %Docstring
        SetFaceName(faceName) -> bool
        
        Sets the facename for the font.
    %End

    void SetFamily(
        wxFontFamily family
    );
    %Docstring
        SetFamily(family)
        
        Sets the font family.
    %End

    bool SetNativeFontInfo(
        const wxString & info
    );
    %Docstring
        SetNativeFontInfo(info) -> bool
        SetNativeFontInfo(info)
        
        Creates the font corresponding to the given native font description
        string which must have been previously returned by
        GetNativeFontInfoDesc().
    %End

    void SetNativeFontInfo(
        const wxNativeFontInfo & info
    );

    bool SetNativeFontInfoUserDesc(
        const wxString & info
    );
    %Docstring
        SetNativeFontInfoUserDesc(info) -> bool
        
        Creates the font corresponding to the given native font description
        string and returns true if the creation was successful.
    %End

    void SetPointSize(
        int pointSize
    );
    %Docstring
        SetPointSize(pointSize)
        
        Sets the font size in points to an integer value.
    %End

    void SetFractionalPointSize(
        double pointSize
    );
    %Docstring
        SetFractionalPointSize(pointSize)
        
        Sets the font size in points.
    %End

    void SetPixelSize(
        const wxSize & pixelSize
    );
    %Docstring
        SetPixelSize(pixelSize)
        
        Sets the pixel size.
    %End

    void SetStyle(
        wxFontStyle style
    );
    %Docstring
        SetStyle(style)
        
        Sets the font style.
    %End

    void SetSymbolicSize(
        wxFontSymbolicSize size
    );
    %Docstring
        SetSymbolicSize(size)
        
        Sets the font size using a predefined symbolic size name.
    %End

    void SetSymbolicSizeRelativeTo(
        wxFontSymbolicSize size,
        int base
    );
    %Docstring
        SetSymbolicSizeRelativeTo(size, base)
        
        Sets the font size compared to the base font size.
    %End

    void SetUnderlined(
        bool underlined
    );
    %Docstring
        SetUnderlined(underlined)
        
        Sets underlining.
    %End

    void SetStrikethrough(
        bool strikethrough
    );
    %Docstring
        SetStrikethrough(strikethrough)
        
        Sets strike-through attribute of the font.
    %End

    void SetWeight(
        wxFontWeight weight
    );
    %Docstring
        SetWeight(weight)
        
        Sets the font weight.
    %End

    void SetNumericWeight(
        int weight
    );
    %Docstring
        SetNumericWeight(weight)
        
        Sets the font weight using an integer value.
    %End

    static
    wxFont * New(
        int pointSize,
        wxFontFamily family,
        wxFontStyle style,
        wxFontWeight weight,
        bool underline = false,
        const wxString & faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    )   /Factory/;
    %Docstring
        New(pointSize, family, style, weight, underline=False, faceName=EmptyString, encoding=FONTENCODING_DEFAULT) -> Font
        New(pointSize, family, flags=FONTFLAG_DEFAULT, faceName=EmptyString, encoding=FONTENCODING_DEFAULT) -> Font
        New(pixelSize, family, style, weight, underline=False, faceName=EmptyString, encoding=FONTENCODING_DEFAULT) -> Font
        New(pixelSize, family, flags=FONTFLAG_DEFAULT, faceName=EmptyString, encoding=FONTENCODING_DEFAULT) -> Font
        New(nativeInfo) -> Font
        New(nativeInfoString) -> Font
        
        This function takes the same parameters as the relative wxFont
        constructor and returns a new font object allocated on the heap.
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    wxFont * New(
        int pointSize,
        wxFontFamily family,
        int flags = wxFONTFLAG_DEFAULT,
        const wxString & faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    )   /Factory/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    wxFont * New(
        const wxSize & pixelSize,
        wxFontFamily family,
        wxFontStyle style,
        wxFontWeight weight,
        bool underline = false,
        const wxString & faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    )   /Factory/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    wxFont * New(
        const wxSize & pixelSize,
        wxFontFamily family,
        int flags = wxFONTFLAG_DEFAULT,
        const wxString & faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    )   /Factory/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    wxFont * New(
        const wxNativeFontInfo & nativeInfo
    )   /Factory/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    wxFont * New(
        const wxString & nativeInfoString
    )   /Factory/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool operator!=(
        const wxFont & font
    ) const;

    bool operator==(
        const wxFont & font
    ) const;

    static
    wxFontEncoding GetDefaultEncoding();
    %Docstring
        GetDefaultEncoding() -> FontEncoding
        
        Returns the current application's default encoding.
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    void SetDefaultEncoding(
        wxFontEncoding encoding
    );
    %Docstring
        SetDefaultEncoding(encoding)
        
        Sets the default font encoding.
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    static
    int GetNumericWeightOf(
        wxFontWeight weight
    );
    %Docstring
        GetNumericWeightOf(weight) -> int
        
        Get the raw weight value corresponding to the given symbolic constant.
    %End

    %Property(name=Encoding, get=GetEncoding, set=SetEncoding)
    %Property(name=FaceName, get=GetFaceName, set=SetFaceName)
    %Property(name=Family, get=GetFamily, set=SetFamily)
    %Property(name=NativeFontInfoDesc, get=GetNativeFontInfoDesc, set=SetNativeFontInfo)
    %Property(name=NativeFontInfoUserDesc, get=GetNativeFontInfoUserDesc, set=SetNativeFontInfoUserDesc)
    %Property(name=PointSize, get=GetPointSize, set=SetPointSize)
    %Property(name=PixelSize, get=GetPixelSize, set=SetPixelSize)
    %Property(name=Style, get=GetStyle, set=SetStyle)
    %Property(name=Weight, get=GetWeight, set=SetWeight)
    int __nonzero__();
    %Docstring
        __nonzero__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFont___nonzero__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxFont___nonzero__(wxFont* self)
    {
        return self->IsOk();
    }
    %End

    int __bool__();
    %Docstring
        __bool__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFont___bool__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxFont___bool__(wxFont* self)
    {
        return self->IsOk();
    }
    %End

    void* GetHFONT();
    %Docstring
        GetHFONT() -> void
        
        Returns the font's native handle.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFont_GetHFONT(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void* _wxFont_GetHFONT(wxFont* self)
    {
        #ifdef __WXMSW__
            return self->GetHFONT();
        #else
            return 0;
        #endif
    }
    %End

    void* OSXGetCGFont();
    %Docstring
        OSXGetCGFont() -> void
        
        Returns the font's native handle.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFont_OSXGetCGFont(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void* _wxFont_OSXGetCGFont(wxFont* self)
    {
        #ifdef __WXMAC__
            return self->OSXGetCGFont();
        #else
            return 0;
        #endif
    }
    %End

    void* GetPangoFontDescription();
    %Docstring
        GetPangoFontDescription() -> void
        
        Returns the font's native handle.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFont_GetPangoFontDescription(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void* _wxFont_GetPangoFontDescription(wxFont* self)
    {
        #ifdef __WXGTK__
            return self->GetNativeFontInfo()->description;
        #else
            return 0;
        #endif
    }
    %End

    static bool CanUsePrivateFont();
    %Docstring
        CanUsePrivateFont() -> bool
        
        Returns ``True`` if this build of wxPython supports using
        :meth:`AddPrivateFont`.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFont_CanUsePrivateFont();
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxFont_CanUsePrivateFont()
    {
        return wxUSE_PRIVATE_FONTS;
    }
    %End

    void _copyFrom(const wxFont* other);
    %Docstring
        _copyFrom(other)
        
        For internal use only.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxFont__copyFrom(sipCpp, other);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxFont__copyFrom(wxFont* self, const wxFont* other)
    {
        *self = *other;
    }
    %End

};  // end of class wxFont


%Extract(id=pycode_core)
def _Font_SetNoAntiAliasing(self, no=True):
    pass
Font.SetNoAntiAliasing = wx.deprecated(_Font_SetNoAntiAliasing)
del _Font_SetNoAntiAliasing
%End

%Extract(id=pycode_core)
def _Font_GetNoAntiAliasing(self):
    pass
Font.GetNoAntiAliasing = wx.deprecated(_Font_GetNoAntiAliasing)
del _Font_GetNoAntiAliasing
%End

class wxFontList
{
    %Docstring
        FontList()
        
        A font list is a list containing all fonts which have been created.
    %End
    %TypeHeaderCode
        #include <wx/font.h>
    %End

public:
    wxFontList();

    wxFont * FindOrCreateFont(
        int point_size,
        wxFontFamily family,
        wxFontStyle style,
        wxFontWeight weight,
        bool underline = false,
        const wxString & facename = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    );
    %Docstring
        FindOrCreateFont(point_size, family, style, weight, underline=False, facename=EmptyString, encoding=FONTENCODING_DEFAULT) -> Font
        FindOrCreateFont(fontInfo) -> Font
        
        Finds a font of the given specification, or creates one and adds it to
        the list.
    %End

    wxFont * FindOrCreateFont(
        const wxFontInfo & fontInfo
    );

};  // end of class wxFontList


wxFont wxNullFont;

wxFont* FFont(int pointSize, 
                              wxFontFamily family, 
                              int flags = wxFONTFLAG_DEFAULT, 
                              const wxString& faceName = wxEmptyString, 
                              wxFontEncoding encoding = wxFONTENCODING_DEFAULT)   /Factory/;
%Docstring
    FFont(pointSize, family, flags=FONTFLAG_DEFAULT, faceName=EmptyString, encoding=FONTENCODING_DEFAULT)
%End
%MethodCode
    PyErr_Clear();
    Py_BEGIN_ALLOW_THREADS
    sipRes = _FFont_function(pointSize, family, flags, faceName, encoding);
    Py_END_ALLOW_THREADS
    if (PyErr_Occurred()) sipIsErr = 1;
%End
%ModuleCode
wxFont* _FFont_function(int pointSize, wxFontFamily family, int flags, const wxString* faceName, wxFontEncoding encoding)
{
    wxFont* font = wxFont::New(pointSize, family, flags, *faceName, encoding);
    return font;
}
%End

%Extract(id=pycode_core)
# These stock fonts will be initialized when the wx.App object is created.
NORMAL_FONT = Font()
SMALL_FONT = Font()
ITALIC_FONT = Font()
SWISS_FONT = Font()

%End

%Extract(id=pycode_core)
wx.DEFAULT    = int(wx.FONTFAMILY_DEFAULT)
wx.DECORATIVE = int(wx.FONTFAMILY_DECORATIVE)
wx.ROMAN      = int(wx.FONTFAMILY_ROMAN)
wx.SCRIPT     = int(wx.FONTFAMILY_SCRIPT)
wx.SWISS      = int(wx.FONTFAMILY_SWISS)
wx.MODERN     = int(wx.FONTFAMILY_MODERN)
wx.TELETYPE   = int(wx.FONTFAMILY_TELETYPE)

wx.NORMAL = int(wx.FONTWEIGHT_NORMAL)
wx.LIGHT  = int(wx.FONTWEIGHT_LIGHT)
wx.BOLD   = int(wx.FONTWEIGHT_BOLD)

wx.NORMAL = int(wx.FONTSTYLE_NORMAL)
wx.ITALIC = int(wx.FONTSTYLE_ITALIC)
wx.SLANT  = int(wx.FONTSTYLE_SLANT)

%End


//---------------------------------------------------------------------------

