//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxTIMER_CONTINUOUS;
const int wxTIMER_ONE_SHOT;
wxEventType wxEVT_TIMER   /PyName=wxEVT_TIMER/;

class wxTimer : wxEvtHandler
{
    %Docstring
        Timer()
        Timer(owner, id=-1)
        
        The wxTimer class allows you to execute code at specified intervals.
    %End
    %TypeHeaderCode
        #include <wx/timer.h>
    %End

public:
    wxTimer();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxTimer(
        wxEvtHandler * owner,
        int id = -1
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    ~wxTimer();

    int GetId() const;
    %Docstring
        GetId() -> int
        
        Returns the ID of the events generated by this timer.
    %End

    int GetInterval() const;
    %Docstring
        GetInterval() -> int
        
        Returns the current interval for the timer (in milliseconds).
    %End

    wxEvtHandler * GetOwner() const;
    %Docstring
        GetOwner() -> EvtHandler
        
        Returns the current owner of the timer.
    %End

    bool IsOneShot() const;
    %Docstring
        IsOneShot() -> bool
        
        Returns true if the timer is one shot, i.e. if it will stop after
        firing the first notification automatically.
    %End

    bool IsRunning() const;
    %Docstring
        IsRunning() -> bool
        
        Returns true if the timer is running, false if it is stopped.
    %End

    virtual
    void Notify();
    %Docstring
        Notify()
        
        This member should be overridden by the user if the default
        constructor was used and SetOwner() wasn't called.
    %End

    void SetOwner(
        wxEvtHandler * owner,
        int id = -1
    );
    %Docstring
        SetOwner(owner, id=-1)
        
        Associates the timer with the given owner object.
    %End

    virtual
    bool Start(
        int milliseconds = -1,
        bool oneShot = wxTIMER_CONTINUOUS
    );
    %Docstring
        Start(milliseconds=-1, oneShot=TIMER_CONTINUOUS) -> bool
        
        (Re)starts the timer.
    %End

    bool StartOnce(
        int milliseconds = -1
    );
    %Docstring
        StartOnce(milliseconds=-1) -> bool
        
        Starts the timer for a once-only notification.
    %End

    virtual
    void Stop();
    %Docstring
        Stop()
        
        Stops the timer.
    %End

    public:


    %Property(name=Id, get=GetId)
    %Property(name=Interval, get=GetInterval)
    %Property(name=Owner, get=GetOwner, set=SetOwner)
};  // end of class wxTimer


class wxTimerRunner
{
    %Docstring
        TimerRunner(timer)
        TimerRunner(timer, milli, oneShot=False)
        
        Starts the timer in its ctor, stops in the dtor.
    %End
    %TypeHeaderCode
        #include <wx/timer.h>
    %End

public:
    wxTimerRunner(
        wxTimer & timer
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxTimerRunner(
        wxTimer & timer,
        int milli,
        bool oneShot = false
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxTimerRunner();

    void Start(
        int milli,
        bool oneShot = false
    );
    %Docstring
        Start(milli, oneShot=False)
    %End

    private:
        wxTimerRunner(const wxTimerRunner&);


};  // end of class wxTimerRunner


class wxTimerEvent : wxEvent
{
    %Docstring
        TimerEvent(timer)
        
        wxTimerEvent object is passed to the event handler of timer events
        (see wxTimer::SetOwner).
    %End
    %TypeHeaderCode
        #include <wx/timer.h>
    %End

public:
    wxTimerEvent(
        wxTimer & timer
    );

    int GetInterval() const;
    %Docstring
        GetInterval() -> int
        
        Returns the interval of the timer which generated this event.
    %End

    wxTimer & GetTimer() const;
    %Docstring
        GetTimer() -> Timer
        
        Returns the timer object which generated this event.
    %End

    public:


    %Property(name=Interval, get=GetInterval)
    %Property(name=Timer, get=GetTimer)
};  // end of class wxTimerEvent


%Extract(id=pycode_core)
EVT_TIMER = wx.PyEventBinder( wxEVT_TIMER )

%End

%Extract(id=pycode_core)
class PyTimer(Timer):
    '''This timer class is passed the callable object to be called when the timer expires.'''
    def __init__(self, notify):
        Timer.__init__(self)
        self.notify = notify

    def Notify(self):
        if self.notify:
            self.notify()

%End


//---------------------------------------------------------------------------

