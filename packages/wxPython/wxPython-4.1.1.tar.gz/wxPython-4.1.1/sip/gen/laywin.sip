//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _adv.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/laywin.h>
%End


//---------------------------------------------------------------------------

enum wxLayoutOrientation
{
    wxLAYOUT_HORIZONTAL,
    wxLAYOUT_VERTICAL
};

enum wxLayoutAlignment
{
    wxLAYOUT_NONE,
    wxLAYOUT_TOP,
    wxLAYOUT_LEFT,
    wxLAYOUT_RIGHT,
    wxLAYOUT_BOTTOM
};

wxEventType wxEVT_QUERY_LAYOUT_INFO   /PyName=wxEVT_QUERY_LAYOUT_INFO/;

wxEventType wxEVT_CALCULATE_LAYOUT   /PyName=wxEVT_CALCULATE_LAYOUT/;

class wxLayoutAlgorithm : wxObject
{
    %Docstring
        LayoutAlgorithm()
        
        wxLayoutAlgorithm implements layout of subwindows in MDI or SDI
        frames.
    %End
    %TypeHeaderCode
        #include <wx/laywin.h>
    %End

public:
    wxLayoutAlgorithm();

    virtual
    ~wxLayoutAlgorithm();

    bool LayoutFrame(
        wxFrame * frame,
        wxWindow * mainWindow = NULL
    );
    %Docstring
        LayoutFrame(frame, mainWindow=None) -> bool
        
        Lays out the children of a normal frame.
    %End

    bool LayoutMDIFrame(
        wxMDIParentFrame * frame,
        wxRect * rect = NULL
    );
    %Docstring
        LayoutMDIFrame(frame, rect=None) -> bool
        
        Lays out the children of an MDI parent frame.
    %End

    bool LayoutWindow(
        wxWindow * parent,
        wxWindow * mainWindow = NULL
    );
    %Docstring
        LayoutWindow(parent, mainWindow=None) -> bool
        
        Lays out the children of a normal frame or other window.
    %End

};  // end of class wxLayoutAlgorithm


class wxSashLayoutWindow : wxSashWindow
{
    %Docstring
        SashLayoutWindow()
        SashLayoutWindow(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.CLIP_CHILDREN|SW_3D, name="layoutWindow")
        
        wxSashLayoutWindow responds to OnCalculateLayout events generated by
        wxLayoutAlgorithm.
    %End
    %TypeHeaderCode
        #include <wx/laywin.h>
    %End

public:
    wxSashLayoutWindow();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxSashLayoutWindow(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxCLIP_CHILDREN|wxSW_3D,
        const wxString & name = "layoutWindow"
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxCLIP_CHILDREN|wxSW_3D,
        const wxString & name = "layoutWindow"
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.CLIP_CHILDREN|SW_3D, name="layoutWindow") -> bool
        
        Initializes a sash layout window, which can be a child of a frame,
        dialog or any other non-control window.
    %End

    wxLayoutAlignment GetAlignment() const;
    %Docstring
        GetAlignment() -> LayoutAlignment
        
        Returns the alignment of the window: one of wxLAYOUT_TOP,
        wxLAYOUT_LEFT, wxLAYOUT_RIGHT, wxLAYOUT_BOTTOM.
    %End

    wxLayoutOrientation GetOrientation() const;
    %Docstring
        GetOrientation() -> LayoutOrientation
        
        Returns the orientation of the window: one of wxLAYOUT_HORIZONTAL,
        wxLAYOUT_VERTICAL.
    %End

    void OnCalculateLayout(
        wxCalculateLayoutEvent & event
    );
    %Docstring
        OnCalculateLayout(event)
        
        The default handler for the event that is generated by
        wxLayoutAlgorithm.
    %End

    void OnQueryLayoutInfo(
        wxQueryLayoutInfoEvent & event
    );
    %Docstring
        OnQueryLayoutInfo(event)
        
        The default handler for the event that is generated by
        OnCalculateLayout to get size, alignment and orientation information
        for the window.
    %End

    void SetAlignment(
        wxLayoutAlignment alignment
    );
    %Docstring
        SetAlignment(alignment)
        
        Sets the alignment of the window (which edge of the available parent
        client area the window is attached to).
    %End

    void SetDefaultSize(
        const wxSize & size
    );
    %Docstring
        SetDefaultSize(size)
        
        Sets the default dimensions of the window.
    %End

    void SetOrientation(
        wxLayoutOrientation orientation
    );
    %Docstring
        SetOrientation(orientation)
        
        Sets the orientation of the window (the direction the window will
        stretch in, to fill the available parent client area).
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Alignment, get=GetAlignment, set=SetAlignment)
    %Property(name=Orientation, get=GetOrientation, set=SetOrientation)
};  // end of class wxSashLayoutWindow


class wxQueryLayoutInfoEvent : wxEvent
{
    %Docstring
        QueryLayoutInfoEvent(id=0)
        
        This event is sent when wxLayoutAlgorithm wishes to get the size,
        orientation and alignment of a window.
    %End
    %TypeHeaderCode
        #include <wx/laywin.h>
    %End

public:
    wxQueryLayoutInfoEvent(
        wxWindowID id = 0
    );

    wxLayoutAlignment GetAlignment() const;
    %Docstring
        GetAlignment() -> LayoutAlignment
        
        Specifies the alignment of the window (which side of the remaining
        parent client area the window sticks to).
    %End

    int GetFlags() const;
    %Docstring
        GetFlags() -> int
        
        Returns the flags associated with this event.
    %End

    wxLayoutOrientation GetOrientation() const;
    %Docstring
        GetOrientation() -> LayoutOrientation
        
        Returns the orientation that the event handler specified to the event
        object.
    %End

    int GetRequestedLength() const;
    %Docstring
        GetRequestedLength() -> int
        
        Returns the requested length of the window in the direction of the
        window orientation.
    %End

    wxSize GetSize() const;
    %Docstring
        GetSize() -> wx.Size
        
        Returns the size that the event handler specified to the event object
        as being the requested size of the window.
    %End

    void SetAlignment(
        wxLayoutAlignment alignment
    );
    %Docstring
        SetAlignment(alignment)
        
        Call this to specify the alignment of the window (which side of the
        remaining parent client area the window sticks to).
    %End

    void SetFlags(
        int flags
    );
    %Docstring
        SetFlags(flags)
        
        Sets the flags associated with this event.
    %End

    void SetOrientation(
        wxLayoutOrientation orientation
    );
    %Docstring
        SetOrientation(orientation)
        
        Call this to specify the orientation of the window.
    %End

    void SetRequestedLength(
        int length
    );
    %Docstring
        SetRequestedLength(length)
        
        Sets the requested length of the window in the direction of the window
        orientation.
    %End

    void SetSize(
        const wxSize & size
    );
    %Docstring
        SetSize(size)
        
        Call this to let the calling code know what the size of the window is.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxQueryLayoutInfoEvent& operator=(const wxQueryLayoutInfoEvent&);


    public:


    %Property(name=Alignment, get=GetAlignment, set=SetAlignment)
    %Property(name=Flags, get=GetFlags, set=SetFlags)
    %Property(name=Orientation, get=GetOrientation, set=SetOrientation)
    %Property(name=RequestedLength, get=GetRequestedLength, set=SetRequestedLength)
    %Property(name=Size, get=GetSize, set=SetSize)
};  // end of class wxQueryLayoutInfoEvent


class wxCalculateLayoutEvent : wxEvent
{
    %Docstring
        CalculateLayoutEvent(id=0)
        
        This event is sent by wxLayoutAlgorithm to calculate the amount of the
        remaining client area that the window should occupy.
    %End
    %TypeHeaderCode
        #include <wx/laywin.h>
    %End

public:
    wxCalculateLayoutEvent(
        wxWindowID id = 0
    );

    int GetFlags() const;
    %Docstring
        GetFlags() -> int
        
        Returns the flags associated with this event.
    %End

    wxRect GetRect() const;
    %Docstring
        GetRect() -> wx.Rect
        
        Before the event handler is entered, returns the remaining parent
        client area that the window could occupy.
    %End

    void SetFlags(
        int flags
    );
    %Docstring
        SetFlags(flags)
        
        Sets the flags associated with this event.
    %End

    void SetRect(
        const wxRect & rect
    );
    %Docstring
        SetRect(rect)
        
        Call this to specify the new remaining parent client area, after the
        space occupied by the window has been subtracted.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxCalculateLayoutEvent& operator=(const wxCalculateLayoutEvent&);


    public:


    %Property(name=Flags, get=GetFlags, set=SetFlags)
    %Property(name=Rect, get=GetRect, set=SetRect)
};  // end of class wxCalculateLayoutEvent


%Extract(id=pycode_adv)
EVT_QUERY_LAYOUT_INFO = wx.PyEventBinder( wxEVT_QUERY_LAYOUT_INFO )
EVT_CALCULATE_LAYOUT = wx.PyEventBinder( wxEVT_CALCULATE_LAYOUT )

%End


//---------------------------------------------------------------------------

