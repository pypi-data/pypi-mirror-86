//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _aui.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

enum wxAuiManagerDock
{
    wxAUI_DOCK_NONE,
    wxAUI_DOCK_TOP,
    wxAUI_DOCK_RIGHT,
    wxAUI_DOCK_BOTTOM,
    wxAUI_DOCK_LEFT,
    wxAUI_DOCK_CENTER,
    wxAUI_DOCK_CENTRE
};

enum wxAuiManagerOption
{
    wxAUI_MGR_ALLOW_FLOATING,
    wxAUI_MGR_ALLOW_ACTIVE_PANE,
    wxAUI_MGR_TRANSPARENT_DRAG,
    wxAUI_MGR_TRANSPARENT_HINT,
    wxAUI_MGR_VENETIAN_BLINDS_HINT,
    wxAUI_MGR_RECTANGLE_HINT,
    wxAUI_MGR_HINT_FADE,
    wxAUI_MGR_NO_VENETIAN_BLINDS_FADE,
    wxAUI_MGR_LIVE_RESIZE,
    wxAUI_MGR_DEFAULT
};

wxEventType wxEVT_AUI_PANE_BUTTON   /PyName=wxEVT_AUI_PANE_BUTTON/;

wxEventType wxEVT_AUI_PANE_CLOSE   /PyName=wxEVT_AUI_PANE_CLOSE/;

wxEventType wxEVT_AUI_PANE_MAXIMIZE   /PyName=wxEVT_AUI_PANE_MAXIMIZE/;

wxEventType wxEVT_AUI_PANE_RESTORE   /PyName=wxEVT_AUI_PANE_RESTORE/;

wxEventType wxEVT_AUI_PANE_ACTIVATED   /PyName=wxEVT_AUI_PANE_ACTIVATED/;

wxEventType wxEVT_AUI_RENDER   /PyName=wxEVT_AUI_RENDER/;

wxEventType wxEVT_AUI_FIND_MANAGER   /PyName=wxEVT_AUI_FIND_MANAGER/;

class wxAuiManager : wxEvtHandler
{
    %Docstring
        AuiManager(managed_wnd=None, flags=AUI_MGR_DEFAULT)
        
        wxAuiManager is the central class of the wxAUI class framework.
    %End
    %TypeHeaderCode
        #include <wx/aui/framemanager.h>
    %End

public:
    wxAuiManager(
        wxWindow * managed_wnd = NULL,
        unsigned int flags = wxAUI_MGR_DEFAULT
    );

    virtual
    ~wxAuiManager();

    bool AddPane(
        wxWindow * window,
        const wxAuiPaneInfo & pane_info
    );
    %Docstring
        AddPane(window, pane_info) -> bool
        AddPane(window, direction=wx.LEFT, caption=wx.EmptyString) -> bool
        AddPane(window, pane_info, drop_pos) -> bool
        
        AddPane() tells the frame manager to start managing a child window.
    %End

    bool AddPane(
        wxWindow * window,
        int direction = wxLEFT,
        const wxString & caption = wxEmptyString
    );

    bool AddPane(
        wxWindow * window,
        const wxAuiPaneInfo & pane_info,
        const wxPoint & drop_pos
    );

    wxAuiPaneInfo & GetPane(
        wxWindow * window
    );
    %Docstring
        GetPane(window) -> AuiPaneInfo
        GetPane(name) -> AuiPaneInfo
        
        GetPane() is used to lookup a wxAuiPaneInfo object either by window
        pointer or by pane name, which acts as a unique id for a window pane.
    %End

    wxAuiPaneInfo & GetPane(
        const wxString & name
    );

    wxRect CalculateHintRect(
        wxWindow * paneWindow,
        const wxPoint & pt,
        const wxPoint & offset
    );
    %Docstring
        CalculateHintRect(paneWindow, pt, offset) -> wx.Rect
        
        This function is used by controls to calculate the drop hint
        rectangle.
    %End

    virtual
    bool CanDockPanel(
        const wxAuiPaneInfo & p
    );
    %Docstring
        CanDockPanel(p) -> bool
        
        Check if a key modifier is pressed (actually WXK_CONTROL or WXK_ALT)
        while dragging the frame to not dock the window.
    %End

    void ClosePane(
        wxAuiPaneInfo & paneInfo
    );
    %Docstring
        ClosePane(paneInfo)
        
        Destroys or hides the given pane depending on its flags.
    %End

    virtual
    wxAuiFloatingFrame * CreateFloatingFrame(
        wxWindow * parent,
        const wxAuiPaneInfo & p
    );
    %Docstring
        CreateFloatingFrame(parent, p) -> AuiFloatingFrame
        
        Creates a floating frame in this wxAuiManager with the given parent
        and wxAuiPaneInfo.
    %End

    bool DetachPane(
        wxWindow * window
    );
    %Docstring
        DetachPane(window) -> bool
        
        Tells the wxAuiManager to stop managing the pane specified by window.
    %End

    void DrawHintRect(
        wxWindow * paneWindow,
        const wxPoint & pt,
        const wxPoint & offset
    );
    %Docstring
        DrawHintRect(paneWindow, pt, offset)
        
        This function is used by controls to draw the hint window.
    %End

    wxAuiPaneInfoArray & GetAllPanes();
    %Docstring
        GetAllPanes() -> AuiPaneInfoArray
        
        Returns an array of all panes managed by the frame manager.
    %End

    wxAuiDockArt * GetArtProvider() const;
    %Docstring
        GetArtProvider() -> AuiDockArt
        
        Returns the current art provider being used.
    %End

    void GetDockSizeConstraint(
        double * widthpct,
        double * heightpct
    ) const;
    %Docstring
        GetDockSizeConstraint(widthpct, heightpct)
        
        Returns the current dock constraint values.
    %End

    unsigned int GetFlags() const;
    %Docstring
        GetFlags() -> unsignedint
        
        Returns the current wxAuiManagerOption's flags.
    %End

    wxWindow * GetManagedWindow() const;
    %Docstring
        GetManagedWindow() -> wx.Window
        
        Returns the frame currently being managed by wxAuiManager.
    %End

    bool HasLiveResize() const;
    %Docstring
        HasLiveResize() -> bool
        
        Returns true if windows are resized live.
    %End

    virtual
    void HideHint();
    %Docstring
        HideHint()
        
        HideHint() hides any docking hint that may be visible.
    %End

    bool InsertPane(
        wxWindow * window,
        const wxAuiPaneInfo & insert_location,
        int insert_level = wxAUI_INSERT_PANE
    );
    %Docstring
        InsertPane(window, insert_location, insert_level=AUI_INSERT_PANE) -> bool
        
        This method is used to insert either a previously unmanaged pane
        window into the frame manager, or to insert a currently managed pane
        somewhere else.
    %End

    void LoadPaneInfo(
        wxString pane_part,
        wxAuiPaneInfo & pane
    );
    %Docstring
        LoadPaneInfo(pane_part, pane)
        
        LoadPaneInfo() is similar to LoadPerspective, with the exception that
        it only loads information about a single pane.
    %End

    bool LoadPerspective(
        const wxString & perspective,
        bool update = true
    );
    %Docstring
        LoadPerspective(perspective, update=True) -> bool
        
        Loads a saved perspective.
    %End

    void MaximizePane(
        wxAuiPaneInfo & paneInfo
    );
    %Docstring
        MaximizePane(paneInfo)
        
        Maximize the given pane.
    %End

    void RestorePane(
        wxAuiPaneInfo & paneInfo
    );
    %Docstring
        RestorePane(paneInfo)
        
        Restore the last state of the given pane.
    %End

    void RestoreMaximizedPane();
    %Docstring
        RestoreMaximizedPane()
        
        Restore the previously maximized pane.
    %End

    wxString SavePaneInfo(
        const wxAuiPaneInfo & pane
    );
    %Docstring
        SavePaneInfo(pane) -> String
        
        SavePaneInfo() is similar to SavePerspective, with the exception that
        it only saves information about a single pane.
    %End

    wxString SavePerspective();
    %Docstring
        SavePerspective() -> String
        
        Saves the entire user interface layout into an encoded wxString, which
        can then be stored by the application (probably using wxConfig).
    %End

    void SetArtProvider(
        wxAuiDockArt * art_provider
    );
    %Docstring
        SetArtProvider(art_provider)
        
        Instructs wxAuiManager to use art provider specified by parameter
        art_provider for all drawing calls.
    %End

    void SetDockSizeConstraint(
        double widthpct,
        double heightpct
    );
    %Docstring
        SetDockSizeConstraint(widthpct, heightpct)
        
        When a user creates a new dock by dragging a window into a docked
        position, often times the large size of the window will create a dock
        that is unwieldy large.
    %End

    void SetFlags(
        unsigned int flags
    );
    %Docstring
        SetFlags(flags)
        
        This method is used to specify wxAuiManagerOption's flags.
    %End

    void SetManagedWindow(
        wxWindow * managed_wnd
    );
    %Docstring
        SetManagedWindow(managed_wnd)
        
        Called to specify the frame or window which is to be managed by
        wxAuiManager.
    %End

    virtual
    void ShowHint(
        const wxRect & rect
    );
    %Docstring
        ShowHint(rect)
        
        This function is used by controls to explicitly show a hint window at
        the specified rectangle.
    %End

    void StartPaneDrag(
        wxWindow * paneWindow,
        const wxPoint & offset
    );
    %Docstring
        StartPaneDrag(paneWindow, offset)
        
        Mostly used internally to define the drag action parameters.
    %End

    void UnInit();
    %Docstring
        UnInit()
        
        Dissociate the managed window from the manager.
    %End

    void Update();
    %Docstring
        Update()
        
        This method is called after any number of changes are made to any of
        the managed panes.
    %End

    static
    bool AlwaysUsesLiveResize();
    %Docstring
        AlwaysUsesLiveResize() -> bool
        
        Returns true if live resize is always used on the current platform.
    %End

    static
    wxAuiManager * GetManager(
        wxWindow * window
    );
    %Docstring
        GetManager(window) -> AuiManager
        
        Calling this method will return the wxAuiManager for a given window.
    %End

    public:


    %Property(name=AllPanes, get=GetAllPanes)
    %Property(name=ArtProvider, get=GetArtProvider, set=SetArtProvider)
    %Property(name=Flags, get=GetFlags, set=SetFlags)
    %Property(name=ManagedWindow, get=GetManagedWindow, set=SetManagedWindow)

protected:
    virtual
    bool ProcessDockResult(
        wxAuiPaneInfo & target,
        const wxAuiPaneInfo & new_pos
    );
    %Docstring
        ProcessDockResult(target, new_pos) -> bool
        
        ProcessDockResult() is a protected member of the wxAUI layout manager.
    %End

};  // end of class wxAuiManager


class wxAuiPaneInfo
{
    %Docstring
        AuiPaneInfo()
        AuiPaneInfo(c)
        
        wxAuiPaneInfo is part of the wxAUI class framework.
    %End
    %TypeHeaderCode
        #include <wx/aui/framemanager.h>
    %End

public:
    wxAuiPaneInfo();

    wxAuiPaneInfo(
        const wxAuiPaneInfo & c
    );

    wxAuiPaneInfo & BestSize(
        const wxSize & size
    );
    %Docstring
        BestSize(size) -> AuiPaneInfo
        BestSize(x, y) -> AuiPaneInfo
        
        BestSize() sets the ideal size for the pane.
    %End

    wxAuiPaneInfo & BestSize(
        int x,
        int y
    );

    wxAuiPaneInfo & Centre();
    %Docstring
        Centre() -> AuiPaneInfo
        
        Center() sets the pane dock position to the left side of the frame.
    %End

    wxAuiPaneInfo & Center();
    %Docstring
        Center() -> AuiPaneInfo
        
        Center() sets the pane dock position to the left side of the frame.
    %End

    wxAuiPaneInfo & CentrePane();
    %Docstring
        CentrePane() -> AuiPaneInfo
        
        CentrePane() specifies that the pane should adopt the default center
        pane settings.
    %End

    wxAuiPaneInfo & CenterPane();
    %Docstring
        CenterPane() -> AuiPaneInfo
        
        CentrePane() specifies that the pane should adopt the default center
        pane settings.
    %End

    wxAuiPaneInfo & FloatingPosition(
        const wxPoint & pos
    );
    %Docstring
        FloatingPosition(pos) -> AuiPaneInfo
        FloatingPosition(x, y) -> AuiPaneInfo
        
        FloatingPosition() sets the position of the floating pane.
    %End

    wxAuiPaneInfo & FloatingPosition(
        int x,
        int y
    );

    wxAuiPaneInfo & FloatingSize(
        const wxSize & size
    );
    %Docstring
        FloatingSize(size) -> AuiPaneInfo
        FloatingSize(x, y) -> AuiPaneInfo
        
        FloatingSize() sets the size of the floating pane.
    %End

    wxAuiPaneInfo & FloatingSize(
        int x,
        int y
    );

    wxAuiPaneInfo & MaxSize(
        const wxSize & size
    );
    %Docstring
        MaxSize(size) -> AuiPaneInfo
        MaxSize(x, y) -> AuiPaneInfo
        
        MaxSize() sets the maximum size of the pane.
    %End

    wxAuiPaneInfo & MaxSize(
        int x,
        int y
    );

    wxAuiPaneInfo & MinSize(
        const wxSize & size
    );
    %Docstring
        MinSize(size) -> AuiPaneInfo
        MinSize(x, y) -> AuiPaneInfo
        
        MinSize() sets the minimum size of the pane.
    %End

    wxAuiPaneInfo & MinSize(
        int x,
        int y
    );

    wxString name;

    wxString caption;

    wxBitmap icon;

    wxWindow * window;

    wxFrame * frame;

    unsigned int state;

    int dock_direction;

    int dock_layer;

    int dock_row;

    int dock_pos;

    wxSize best_size;

    wxSize min_size;

    wxSize max_size;

    wxPoint floating_pos;

    wxSize floating_size;

    int dock_proportion;

    wxRect rect;

    wxAuiPaneInfo & Bottom();
    %Docstring
        Bottom() -> AuiPaneInfo
        
        Bottom() sets the pane dock position to the bottom side of the frame.
    %End

    wxAuiPaneInfo & BottomDockable(
        bool b = true
    );
    %Docstring
        BottomDockable(b=True) -> AuiPaneInfo
        
        BottomDockable() indicates whether a pane can be docked at the bottom
        of the frame.
    %End

    wxAuiPaneInfo & Caption(
        const wxString & c
    );
    %Docstring
        Caption(c) -> AuiPaneInfo
        
        Caption() sets the caption of the pane.
    %End

    wxAuiPaneInfo & CaptionVisible(
        bool visible = true
    );
    %Docstring
        CaptionVisible(visible=True) -> AuiPaneInfo
        
        CaptionVisible indicates that a pane caption should be visible.
    %End

    wxAuiPaneInfo & CloseButton(
        bool visible = true
    );
    %Docstring
        CloseButton(visible=True) -> AuiPaneInfo
        
        CloseButton() indicates that a close button should be drawn for the
        pane.
    %End

    wxAuiPaneInfo & DefaultPane();
    %Docstring
        DefaultPane() -> AuiPaneInfo
        
        DefaultPane() specifies that the pane should adopt the default pane
        settings.
    %End

    wxAuiPaneInfo & DestroyOnClose(
        bool b = true
    );
    %Docstring
        DestroyOnClose(b=True) -> AuiPaneInfo
        
        DestroyOnClose() indicates whether a pane should be destroyed when it
        is closed.
    %End

    wxAuiPaneInfo & Direction(
        int direction
    );
    %Docstring
        Direction(direction) -> AuiPaneInfo
        
        Direction() determines the direction of the docked pane.
    %End

    wxAuiPaneInfo & Dock();
    %Docstring
        Dock() -> AuiPaneInfo
        
        Dock() indicates that a pane should be docked.
    %End

    wxAuiPaneInfo & DockFixed(
        bool b = true
    );
    %Docstring
        DockFixed(b=True) -> AuiPaneInfo
        
        DockFixed() causes the containing dock to have no resize sash.
    %End

    wxAuiPaneInfo & Dockable(
        bool b = true
    );
    %Docstring
        Dockable(b=True) -> AuiPaneInfo
        
        Dockable() specifies whether a frame can be docked or not.
    %End

    wxAuiPaneInfo & Fixed();
    %Docstring
        Fixed() -> AuiPaneInfo
        
        Fixed() forces a pane to be fixed size so that it cannot be resized.
    %End

    wxAuiPaneInfo & Float();
    %Docstring
        Float() -> AuiPaneInfo
        
        Float() indicates that a pane should be floated.
    %End

    wxAuiPaneInfo & Floatable(
        bool b = true
    );
    %Docstring
        Floatable(b=True) -> AuiPaneInfo
        
        Floatable() sets whether the user will be able to undock a pane and
        turn it into a floating window.
    %End

    wxAuiPaneInfo & Gripper(
        bool visible = true
    );
    %Docstring
        Gripper(visible=True) -> AuiPaneInfo
        
        Gripper() indicates that a gripper should be drawn for the pane.
    %End

    wxAuiPaneInfo & GripperTop(
        bool attop = true
    );
    %Docstring
        GripperTop(attop=True) -> AuiPaneInfo
        
        GripperTop() indicates that a gripper should be drawn at the top of
        the pane.
    %End

    bool HasBorder() const;
    %Docstring
        HasBorder() -> bool
        
        HasBorder() returns true if the pane displays a border.
    %End

    bool HasCaption() const;
    %Docstring
        HasCaption() -> bool
        
        HasCaption() returns true if the pane displays a caption.
    %End

    bool HasCloseButton() const;
    %Docstring
        HasCloseButton() -> bool
        
        HasCloseButton() returns true if the pane displays a button to close
        the pane.
    %End

    bool HasFlag(
        int flag
    ) const;
    %Docstring
        HasFlag(flag) -> bool
        
        HasFlag() returns true if the property specified by flag is active for
        the pane.
    %End

    bool HasGripper() const;
    %Docstring
        HasGripper() -> bool
        
        HasGripper() returns true if the pane displays a gripper.
    %End

    bool HasGripperTop() const;
    %Docstring
        HasGripperTop() -> bool
        
        HasGripper() returns true if the pane displays a gripper at the top.
    %End

    bool HasMaximizeButton() const;
    %Docstring
        HasMaximizeButton() -> bool
        
        HasMaximizeButton() returns true if the pane displays a button to
        maximize the pane.
    %End

    bool HasMinimizeButton() const;
    %Docstring
        HasMinimizeButton() -> bool
        
        HasMinimizeButton() returns true if the pane displays a button to
        minimize the pane.
    %End

    bool HasPinButton() const;
    %Docstring
        HasPinButton() -> bool
        
        HasPinButton() returns true if the pane displays a button to float the
        pane.
    %End

    wxAuiPaneInfo & Hide();
    %Docstring
        Hide() -> AuiPaneInfo
        
        Hide() indicates that a pane should be hidden.
    %End

    wxAuiPaneInfo & Icon(
        const wxBitmap & b
    );
    %Docstring
        Icon(b) -> AuiPaneInfo
        
        Icon() sets the icon of the pane.
    %End

    bool IsBottomDockable() const;
    %Docstring
        IsBottomDockable() -> bool
        
        IsBottomDockable() returns true if the pane can be docked at the
        bottom of the managed frame.
    %End

    bool IsDockable() const;
    %Docstring
        IsDockable() -> bool
        
        Returns true if the pane can be docked at any side.
    %End

    bool IsDocked() const;
    %Docstring
        IsDocked() -> bool
        
        IsDocked() returns true if the pane is currently docked.
    %End

    bool IsFixed() const;
    %Docstring
        IsFixed() -> bool
        
        IsFixed() returns true if the pane cannot be resized.
    %End

    bool IsFloatable() const;
    %Docstring
        IsFloatable() -> bool
        
        IsFloatable() returns true if the pane can be undocked and displayed
        as a floating window.
    %End

    bool IsFloating() const;
    %Docstring
        IsFloating() -> bool
        
        IsFloating() returns true if the pane is floating.
    %End

    bool IsLeftDockable() const;
    %Docstring
        IsLeftDockable() -> bool
        
        IsLeftDockable() returns true if the pane can be docked on the left of
        the managed frame.
    %End

    bool IsMovable() const;
    %Docstring
        IsMovable() -> bool
        
        IsMoveable() returns true if the docked frame can be undocked or moved
        to another dock position.
    %End

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        IsOk() returns true if the wxAuiPaneInfo structure is valid.
    %End

    bool IsResizable() const;
    %Docstring
        IsResizable() -> bool
        
        IsResizable() returns true if the pane can be resized.
    %End

    bool IsRightDockable() const;
    %Docstring
        IsRightDockable() -> bool
        
        IsRightDockable() returns true if the pane can be docked on the right
        of the managed frame.
    %End

    bool IsShown() const;
    %Docstring
        IsShown() -> bool
        
        IsShown() returns true if the pane is currently shown.
    %End

    bool IsToolbar() const;
    %Docstring
        IsToolbar() -> bool
        
        IsToolbar() returns true if the pane contains a toolbar.
    %End

    bool IsTopDockable() const;
    %Docstring
        IsTopDockable() -> bool
        
        IsTopDockable() returns true if the pane can be docked at the top of
        the managed frame.
    %End

    wxAuiPaneInfo & Layer(
        int layer
    );
    %Docstring
        Layer(layer) -> AuiPaneInfo
        
        Layer() determines the layer of the docked pane.
    %End

    wxAuiPaneInfo & Left();
    %Docstring
        Left() -> AuiPaneInfo
        
        Left() sets the pane dock position to the left side of the frame.
    %End

    wxAuiPaneInfo & LeftDockable(
        bool b = true
    );
    %Docstring
        LeftDockable(b=True) -> AuiPaneInfo
        
        LeftDockable() indicates whether a pane can be docked on the left of
        the frame.
    %End

    wxAuiPaneInfo & MaximizeButton(
        bool visible = true
    );
    %Docstring
        MaximizeButton(visible=True) -> AuiPaneInfo
        
        MaximizeButton() indicates that a maximize button should be drawn for
        the pane.
    %End

    wxAuiPaneInfo & MinimizeButton(
        bool visible = true
    );
    %Docstring
        MinimizeButton(visible=True) -> AuiPaneInfo
        
        MinimizeButton() indicates that a minimize button should be drawn for
        the pane.
    %End

    wxAuiPaneInfo & Movable(
        bool b = true
    );
    %Docstring
        Movable(b=True) -> AuiPaneInfo
        
        Movable indicates whether a frame can be moved.
    %End

    wxAuiPaneInfo & Name(
        const wxString & n
    );
    %Docstring
        Name(n) -> AuiPaneInfo
        
        Name() sets the name of the pane so it can be referenced in lookup
        functions.
    %End

    wxAuiPaneInfo & PaneBorder(
        bool visible = true
    );
    %Docstring
        PaneBorder(visible=True) -> AuiPaneInfo
        
        PaneBorder indicates that a border should be drawn for the pane.
    %End

    wxAuiPaneInfo & PinButton(
        bool visible = true
    );
    %Docstring
        PinButton(visible=True) -> AuiPaneInfo
        
        PinButton() indicates that a pin button should be drawn for the pane.
    %End

    wxAuiPaneInfo & Position(
        int pos
    );
    %Docstring
        Position(pos) -> AuiPaneInfo
        
        Position() determines the position of the docked pane.
    %End

    wxAuiPaneInfo & Resizable(
        bool resizable = true
    );
    %Docstring
        Resizable(resizable=True) -> AuiPaneInfo
        
        Resizable() allows a pane to be resized if the parameter is true, and
        forces it to be a fixed size if the parameter is false.
    %End

    wxAuiPaneInfo & Right();
    %Docstring
        Right() -> AuiPaneInfo
        
        Right() sets the pane dock position to the right side of the frame.
    %End

    wxAuiPaneInfo & RightDockable(
        bool b = true
    );
    %Docstring
        RightDockable(b=True) -> AuiPaneInfo
        
        RightDockable() indicates whether a pane can be docked on the right of
        the frame.
    %End

    wxAuiPaneInfo & Row(
        int row
    );
    %Docstring
        Row(row) -> AuiPaneInfo
        
        Row() determines the row of the docked pane.
    %End

    void SafeSet(
        wxAuiPaneInfo source
    );
    %Docstring
        SafeSet(source)
        
        Write the safe parts of a PaneInfo object "source" into "this".
    %End

    wxAuiPaneInfo & SetFlag(
        int flag,
        bool option_state
    );
    %Docstring
        SetFlag(flag, option_state) -> AuiPaneInfo
        
        SetFlag() turns the property given by flag on or off with the
        option_state parameter.
    %End

    wxAuiPaneInfo & Show(
        bool show = true
    );
    %Docstring
        Show(show=True) -> AuiPaneInfo
        
        Show() indicates that a pane should be shown.
    %End

    wxAuiPaneInfo & ToolbarPane();
    %Docstring
        ToolbarPane() -> AuiPaneInfo
        
        ToolbarPane() specifies that the pane should adopt the default toolbar
        pane settings.
    %End

    wxAuiPaneInfo & Top();
    %Docstring
        Top() -> AuiPaneInfo
        
        Top() sets the pane dock position to the top of the frame.
    %End

    wxAuiPaneInfo & TopDockable(
        bool b = true
    );
    %Docstring
        TopDockable(b=True) -> AuiPaneInfo
        
        TopDockable() indicates whether a pane can be docked at the top of the
        frame.
    %End

    wxAuiPaneInfo & Window(
        wxWindow * w
    );
    %Docstring
        Window(w) -> AuiPaneInfo
        
        Window() assigns the window pointer that the wxAuiPaneInfo should use.
    %End

    bool IsValid() const;
    %Docstring
        IsValid() -> bool
    %End

};  // end of class wxAuiPaneInfo


class wxAuiManagerEvent : wxEvent
{
    %Docstring
        AuiManagerEvent(type=wx.wxEVT_NULL)
        
        Event used to indicate various actions taken with wxAuiManager.
    %End
    %TypeHeaderCode
        #include <wx/aui/framemanager.h>
    %End

public:
    wxAuiManagerEvent(
        wxEventType type = wxEVT_NULL
    );

    bool CanVeto();
    %Docstring
        CanVeto() -> bool
    %End

    int GetButton();
    %Docstring
        GetButton() -> int
    %End

    wxDC * GetDC();
    %Docstring
        GetDC() -> wx.DC
    %End

    bool GetVeto();
    %Docstring
        GetVeto() -> bool
    %End

    wxAuiManager * GetManager();
    %Docstring
        GetManager() -> AuiManager
    %End

    wxAuiPaneInfo * GetPane();
    %Docstring
        GetPane() -> AuiPaneInfo
    %End

    void SetButton(
        int button
    );
    %Docstring
        SetButton(button)
        
        Sets the ID of the button clicked that triggered this event.
    %End

    void SetCanVeto(
        bool can_veto
    );
    %Docstring
        SetCanVeto(can_veto)
        
        Sets whether or not this event can be vetoed.
    %End

    void SetDC(
        wxDC * pdc
    );
    %Docstring
        SetDC(pdc)
    %End

    void SetManager(
        wxAuiManager * manager
    );
    %Docstring
        SetManager(manager)
        
        Sets the wxAuiManager this event is associated with.
    %End

    void SetPane(
        wxAuiPaneInfo * pane
    );
    %Docstring
        SetPane(pane)
        
        Sets the pane this event is associated with.
    %End

    void Veto(
        bool veto = true
    );
    %Docstring
        Veto(veto=True)
        
        Cancels the action indicated by this event if CanVeto() is true.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxAuiManagerEvent& operator=(const wxAuiManagerEvent&);


    public:


    %Property(name=Button, get=GetButton, set=SetButton)
    %Property(name=DC, get=GetDC, set=SetDC)
    %Property(name=Manager, get=GetManager, set=SetManager)
    %Property(name=Pane, get=GetPane, set=SetPane)
};  // end of class wxAuiManagerEvent


class wxAuiDockInfo
{
    %Docstring
        AuiDockInfo()
        AuiDockInfo(c)
    %End
    %TypeHeaderCode
        #include <wx/aui/framemanager.h>
    %End

public:
    wxAuiDockInfo();

    wxAuiDockInfo(
        const wxAuiDockInfo & c
    );

    wxAuiPaneInfoPtrArray panes;

    wxRect rect;

    int dock_direction;

    int dock_layer;

    int dock_row;

    int size;

    int min_size;

    bool resizable;

    bool toolbar;

    bool fixed;

    bool reserved1;

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
    %End

    bool IsHorizontal() const;
    %Docstring
        IsHorizontal() -> bool
    %End

    bool IsVertical() const;
    %Docstring
        IsVertical() -> bool
    %End

};  // end of class wxAuiDockInfo


class wxAuiDockUIPart
{
    %Docstring
        
    %End
    %TypeHeaderCode
        #include <wx/aui/framemanager.h>
    %End

public:
    enum 
    {
        typeCaption,
        typeGripper,
        typeDock,
        typeDockSizer,
        typePane,
        typePaneSizer,
        typeBackground,
        typePaneBorder,
        typePaneButton    
    };

    int type;

    int orientation;

    wxAuiDockInfo * dock;

    wxAuiPaneInfo * pane;

    int button;

    wxSizer * cont_sizer;

    wxSizerItem * sizer_item;

    wxRect rect;

};  // end of class wxAuiDockUIPart


class wxAuiFloatingFrame : wxFrame
{
    %Docstring
        AuiFloatingFrame(parent, ownerMgr, pane, id=wx.ID_ANY, style=wx.RESIZE_BORDER|wx.SYSTEM_MENU|wx.CAPTION|wx.FRAME_NO_TASKBAR|wx.FRAME_FLOAT_ON_PARENT|wx.CLIP_CHILDREN)
    %End
    %TypeHeaderCode
        #include <wx/aui/floatpane.h>
    %End

public:
    wxAuiFloatingFrame(
        wxWindow * parent,
        wxAuiManager * ownerMgr,
        const wxAuiPaneInfo & pane,
        wxWindowID id = wxID_ANY,
        long style = wxRESIZE_BORDER|wxSYSTEM_MENU|wxCAPTION|wxFRAME_NO_TASKBAR|wxFRAME_FLOAT_ON_PARENT|wxCLIP_CHILDREN
    );

    virtual
    ~wxAuiFloatingFrame();

    void SetPaneWindow(
        const wxAuiPaneInfo & pane
    );
    %Docstring
        SetPaneWindow(pane)
    %End

    wxAuiManager * GetOwnerManager() const;
    %Docstring
        GetOwnerManager() -> AuiManager
    %End

    wxAuiManager & GetAuiManager();
    %Docstring
        GetAuiManager() -> AuiManager
        
        Returns the embedded wxAuiManager managing this floating pane's
        contents.
    %End

    public:


    %Property(name=AuiManager, get=GetAuiManager)
    %Property(name=OwnerManager, get=GetOwnerManager)
};  // end of class wxAuiFloatingFrame


class wxAuiPaneInfoArray
{
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->GetCount();
    %End

            wxAuiPaneInfo& __getitem__(long index);
        %MethodCode
            if (0 > index)
                index += sipCpp->GetCount();

            if ((index < sipCpp->GetCount()) && (0 <= index)) {
                sipRes = &sipCpp->Item(index);
            }
            else {
                wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
                sipError = sipErrorFail;
            }
        %End
        

    int __contains__(wxAuiPaneInfo& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        sipRes = idx != wxNOT_FOUND;
    %End

    void append(wxAuiPaneInfo& obj);
    %MethodCode
        sipCpp->Add(*obj);
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxAuiPaneInfo& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
            }
        sipRes = idx;
    %End
};

%Extract(id=pycode_aui)
def _AuiPaneInfoArray___repr__(self):
    return "AuiPaneInfoArray: " + repr(list(self))
AuiPaneInfoArray.__repr__ = _AuiPaneInfoArray___repr__
del _AuiPaneInfoArray___repr__
%End


%Extract(id=pycode_aui)
EVT_AUI_PANE_BUTTON = wx.PyEventBinder( wxEVT_AUI_PANE_BUTTON )
EVT_AUI_PANE_CLOSE = wx.PyEventBinder( wxEVT_AUI_PANE_CLOSE )
EVT_AUI_PANE_MAXIMIZE = wx.PyEventBinder( wxEVT_AUI_PANE_MAXIMIZE )
EVT_AUI_PANE_RESTORE = wx.PyEventBinder( wxEVT_AUI_PANE_RESTORE )
EVT_AUI_PANE_ACTIVATED = wx.PyEventBinder( wxEVT_AUI_PANE_ACTIVATED )
EVT_AUI_RENDER = wx.PyEventBinder( wxEVT_AUI_RENDER )
EVT_AUI_FIND_MANAGER = wx.PyEventBinder( wxEVT_AUI_FIND_MANAGER )

%End

class wxAuiDockInfoArray
{
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->GetCount();
    %End

            wxAuiDockInfo& __getitem__(long index);
        %MethodCode
            if (0 > index)
                index += sipCpp->GetCount();

            if ((index < sipCpp->GetCount()) && (0 <= index)) {
                sipRes = &sipCpp->Item(index);
            }
            else {
                wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
                sipError = sipErrorFail;
            }
        %End
        

    int __contains__(wxAuiDockInfo& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        sipRes = idx != wxNOT_FOUND;
    %End

    void append(wxAuiDockInfo& obj);
    %MethodCode
        sipCpp->Add(*obj);
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxAuiDockInfo& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
            }
        sipRes = idx;
    %End
};

%Extract(id=pycode_aui)
def _AuiDockInfoArray___repr__(self):
    return "AuiDockInfoArray: " + repr(list(self))
AuiDockInfoArray.__repr__ = _AuiDockInfoArray___repr__
del _AuiDockInfoArray___repr__
%End


class wxAuiDockUIPartArray
{
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->GetCount();
    %End

            wxAuiDockUIPart& __getitem__(long index);
        %MethodCode
            if (0 > index)
                index += sipCpp->GetCount();

            if ((index < sipCpp->GetCount()) && (0 <= index)) {
                sipRes = &sipCpp->Item(index);
            }
            else {
                wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
                sipError = sipErrorFail;
            }
        %End
        

    int __contains__(wxAuiDockUIPart& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        sipRes = idx != wxNOT_FOUND;
    %End

    void append(wxAuiDockUIPart& obj);
    %MethodCode
        sipCpp->Add(*obj);
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxAuiDockUIPart& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
            }
        sipRes = idx;
    %End
};

%Extract(id=pycode_aui)
def _AuiDockUIPartArray___repr__(self):
    return "AuiDockUIPartArray: " + repr(list(self))
AuiDockUIPartArray.__repr__ = _AuiDockUIPartArray___repr__
del _AuiDockUIPartArray___repr__
%End


class wxAuiPaneInfoPtrArray
{
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->GetCount();
    %End

            wxAuiPaneInfo* __getitem__(long index);
        %MethodCode
            if (0 > index)
                index += sipCpp->GetCount();

            if ((index < sipCpp->GetCount()) && (0 <= index)) {
                sipRes = sipCpp->Item(index);
            }
            else {
                wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
                sipError = sipErrorFail;
            }
        %End
        

    int __contains__(wxAuiPaneInfo* obj);
    %MethodCode
        int idx = sipCpp->Index(obj, false);
        sipRes = idx != wxNOT_FOUND;
    %End

    void append(wxAuiPaneInfo* obj);
    %MethodCode
        sipCpp->Add(obj);
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxAuiPaneInfo* obj);
    %MethodCode
        int idx = sipCpp->Index(obj, false);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
            }
        sipRes = idx;
    %End
};

%Extract(id=pycode_aui)
def _AuiPaneInfoPtrArray___repr__(self):
    return "AuiPaneInfoPtrArray: " + repr(list(self))
AuiPaneInfoPtrArray.__repr__ = _AuiPaneInfoPtrArray___repr__
del _AuiPaneInfoPtrArray___repr__
%End


class wxAuiDockInfoPtrArray
{
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->GetCount();
    %End

            wxAuiDockInfo* __getitem__(long index);
        %MethodCode
            if (0 > index)
                index += sipCpp->GetCount();

            if ((index < sipCpp->GetCount()) && (0 <= index)) {
                sipRes = sipCpp->Item(index);
            }
            else {
                wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
                sipError = sipErrorFail;
            }
        %End
        

    int __contains__(wxAuiDockInfo* obj);
    %MethodCode
        int idx = sipCpp->Index(obj, false);
        sipRes = idx != wxNOT_FOUND;
    %End

    void append(wxAuiDockInfo* obj);
    %MethodCode
        sipCpp->Add(obj);
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxAuiDockInfo* obj);
    %MethodCode
        int idx = sipCpp->Index(obj, false);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
            }
        sipRes = idx;
    %End
};

%Extract(id=pycode_aui)
def _AuiDockInfoPtrArray___repr__(self):
    return "AuiDockInfoPtrArray: " + repr(list(self))
AuiDockInfoPtrArray.__repr__ = _AuiDockInfoPtrArray___repr__
del _AuiDockInfoPtrArray___repr__
%End



//---------------------------------------------------------------------------

