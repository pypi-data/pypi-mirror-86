//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxTR_NO_BUTTONS;
const int wxTR_HAS_BUTTONS;
const int wxTR_NO_LINES;
const int wxTR_LINES_AT_ROOT;
const int wxTR_TWIST_BUTTONS;
const int wxTR_SINGLE;
const int wxTR_MULTIPLE;
const int wxTR_HAS_VARIABLE_ROW_HEIGHT;
const int wxTR_EDIT_LABELS;
const int wxTR_ROW_LINES;
const int wxTR_HIDE_ROOT;
const int wxTR_FULL_ROW_HIGHLIGHT;
const int wxTR_DEFAULT_STYLE;
enum wxTreeItemIcon
{
    wxTreeItemIcon_Normal,
    wxTreeItemIcon_Selected,
    wxTreeItemIcon_Expanded,
    wxTreeItemIcon_SelectedExpanded,
    wxTreeItemIcon_Max
};

const int wxTREE_ITEMSTATE_NONE;

const int wxTREE_ITEMSTATE_NEXT;

const int wxTREE_ITEMSTATE_PREV;

const int wxTREE_HITTEST_ABOVE;

const int wxTREE_HITTEST_BELOW;

const int wxTREE_HITTEST_NOWHERE;

const int wxTREE_HITTEST_ONITEMBUTTON;

const int wxTREE_HITTEST_ONITEMICON;

const int wxTREE_HITTEST_ONITEMINDENT;

const int wxTREE_HITTEST_ONITEMLABEL;

const int wxTREE_HITTEST_ONITEMRIGHT;

const int wxTREE_HITTEST_ONITEMSTATEICON;

const int wxTREE_HITTEST_TOLEFT;

const int wxTREE_HITTEST_TORIGHT;

const int wxTREE_HITTEST_ONITEMUPPERPART;

const int wxTREE_HITTEST_ONITEMLOWERPART;

const int wxTREE_HITTEST_ONITEM;

wxEventType wxEVT_TREE_BEGIN_DRAG   /PyName=wxEVT_TREE_BEGIN_DRAG/;

wxEventType wxEVT_TREE_BEGIN_RDRAG   /PyName=wxEVT_TREE_BEGIN_RDRAG/;

wxEventType wxEVT_TREE_BEGIN_LABEL_EDIT   /PyName=wxEVT_TREE_BEGIN_LABEL_EDIT/;

wxEventType wxEVT_TREE_END_LABEL_EDIT   /PyName=wxEVT_TREE_END_LABEL_EDIT/;

wxEventType wxEVT_TREE_DELETE_ITEM   /PyName=wxEVT_TREE_DELETE_ITEM/;

wxEventType wxEVT_TREE_GET_INFO   /PyName=wxEVT_TREE_GET_INFO/;

wxEventType wxEVT_TREE_SET_INFO   /PyName=wxEVT_TREE_SET_INFO/;

wxEventType wxEVT_TREE_ITEM_EXPANDED   /PyName=wxEVT_TREE_ITEM_EXPANDED/;

wxEventType wxEVT_TREE_ITEM_EXPANDING   /PyName=wxEVT_TREE_ITEM_EXPANDING/;

wxEventType wxEVT_TREE_ITEM_COLLAPSED   /PyName=wxEVT_TREE_ITEM_COLLAPSED/;

wxEventType wxEVT_TREE_ITEM_COLLAPSING   /PyName=wxEVT_TREE_ITEM_COLLAPSING/;

wxEventType wxEVT_TREE_SEL_CHANGED   /PyName=wxEVT_TREE_SEL_CHANGED/;

wxEventType wxEVT_TREE_SEL_CHANGING   /PyName=wxEVT_TREE_SEL_CHANGING/;

wxEventType wxEVT_TREE_KEY_DOWN   /PyName=wxEVT_TREE_KEY_DOWN/;

wxEventType wxEVT_TREE_ITEM_ACTIVATED   /PyName=wxEVT_TREE_ITEM_ACTIVATED/;

wxEventType wxEVT_TREE_ITEM_RIGHT_CLICK   /PyName=wxEVT_TREE_ITEM_RIGHT_CLICK/;

wxEventType wxEVT_TREE_ITEM_MIDDLE_CLICK   /PyName=wxEVT_TREE_ITEM_MIDDLE_CLICK/;

wxEventType wxEVT_TREE_END_DRAG   /PyName=wxEVT_TREE_END_DRAG/;

wxEventType wxEVT_TREE_STATE_IMAGE_CLICK   /PyName=wxEVT_TREE_STATE_IMAGE_CLICK/;

wxEventType wxEVT_TREE_ITEM_GETTOOLTIP   /PyName=wxEVT_TREE_ITEM_GETTOOLTIP/;

wxEventType wxEVT_TREE_ITEM_MENU   /PyName=wxEVT_TREE_ITEM_MENU/;

typedef void* wxTreeItemIdValue;

class wxTreeItemId
{
    %Docstring
        TreeItemId()
        TreeItemId(pItem)
        
        An opaque reference to a tree item.
    %End
    %TypeHeaderCode
        #include <wx/treebase.h>
    %End

public:
    wxTreeItemId();

    wxTreeItemId(
        void* pItem
    );

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if this instance is referencing a valid tree item.
    %End

    void * GetID() const;
    %Docstring
        GetID() -> void
    %End

    void Unset();
    %Docstring
        Unset()
    %End

    int __nonzero__();
    %Docstring
        __nonzero__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreeItemId___nonzero__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxTreeItemId___nonzero__(wxTreeItemId* self)
    {
        return self->IsOk();
    }
    %End

    int __bool__();
    %Docstring
        __bool__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreeItemId___bool__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxTreeItemId___bool__(wxTreeItemId* self)
    {
        return self->IsOk();
    }
    %End

    bool __eq__(const wxTreeItemId& other);
    %Docstring
        __eq__(other) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreeItemId___eq__(sipCpp, other);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxTreeItemId___eq__(wxTreeItemId* self, const wxTreeItemId* other)
    {
        return *self == *other;
    }
    %End

    bool __ne__(const wxTreeItemId& other);
    %Docstring
        __ne__(other) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreeItemId___ne__(sipCpp, other);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxTreeItemId___ne__(wxTreeItemId* self, const wxTreeItemId* other)
    {
        return *self != *other;
    }
    %End

    public:


    %Property(name=ID, get=GetID)
};  // end of class wxTreeItemId


%Extract(id=pycode_core)
def _TreeItemId___hash__(self):
    return hash(int(self.GetID()))
TreeItemId.__hash__ = _TreeItemId___hash__
del _TreeItemId___hash__
%End

const char* wxTreeCtrlNameStr;

class wxTreeCtrl : wxControl
{
    %Docstring
        TreeCtrl()
        TreeCtrl(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=TR_DEFAULT_STYLE, validator=DefaultValidator, name=TreeCtrlNameStr)
        
        A tree control presents information as a hierarchy, with items that
        may be expanded to show further items.
    %End
    %TypeHeaderCode
        #include <wx/treectrl.h>
    %End

public:
    wxTreeCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxTreeCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxTR_DEFAULT_STYLE,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxTreeCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxTreeCtrl();

    wxTreeItemId AddRoot(
        const wxString & text,
        int image = -1,
        int selImage = -1,
        wxTreeItemData * data   /Transfer/ = NULL
    );
    %Docstring
        AddRoot(text, image=-1, selImage=-1, data=None) -> TreeItemId
        
        Adds the root node to the tree, returning the new item.
    %End

    wxTreeItemId AppendItem(
        const wxTreeItemId & parent,
        const wxString & text,
        int image = -1,
        int selImage = -1,
        wxTreeItemData * data   /Transfer/ = NULL
    );
    %Docstring
        AppendItem(parent, text, image=-1, selImage=-1, data=None) -> TreeItemId
        
        Appends an item to the end of the branch identified by parent, return
        a new item id.
    %End

    void AssignImageList(
        wxImageList * imageList   /Transfer/
    );
    %Docstring
        AssignImageList(imageList)
        
        Sets the normal image list.
    %End

    void AssignStateImageList(
        wxImageList * imageList   /Transfer/
    );
    %Docstring
        AssignStateImageList(imageList)
        
        Sets the state image list.
    %End

    void Collapse(
        const wxTreeItemId & item
    );
    %Docstring
        Collapse(item)
        
        Collapses the given item.
    %End

    void CollapseAll();
    %Docstring
        CollapseAll()
        
        Collapses the root item.
    %End

    void CollapseAllChildren(
        const wxTreeItemId & item
    );
    %Docstring
        CollapseAllChildren(item)
        
        Collapses this item and all of its children, recursively.
    %End

    void CollapseAndReset(
        const wxTreeItemId & item
    );
    %Docstring
        CollapseAndReset(item)
        
        Collapses the given item and removes all children.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxTR_DEFAULT_STYLE,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxTreeCtrlNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=TR_DEFAULT_STYLE, validator=DefaultValidator, name=TreeCtrlNameStr) -> bool
        
        Creates the tree control.
    %End

    void Delete(
        const wxTreeItemId & item
    );
    %Docstring
        Delete(item)
        
        Deletes the specified item.
    %End

    void DeleteAllItems();
    %Docstring
        DeleteAllItems()
        
        Deletes all items in the control.
    %End

    void DeleteChildren(
        const wxTreeItemId & item
    );
    %Docstring
        DeleteChildren(item)
        
        Deletes all children of the given item (but not the item itself).
    %End

    wxTextCtrl * EditLabel(
        const wxTreeItemId & item
    );
    %Docstring
        EditLabel(item) -> TextCtrl
        
        Starts editing the label of the given item.
    %End

    void EnableBellOnNoMatch(
        bool on = true
    );
    %Docstring
        EnableBellOnNoMatch(on=True)
        
        Enable or disable a beep if there is no match for the currently
        entered text when searching for the item from keyboard.
    %End

    void EndEditLabel(
        const wxTreeItemId & item,
        bool discardChanges = false
    );
    %Docstring
        EndEditLabel(item, discardChanges=False)
        
        Ends label editing.
    %End

    void EnsureVisible(
        const wxTreeItemId & item
    );
    %Docstring
        EnsureVisible(item)
        
        Scrolls and/or expands items to ensure that the given item is visible.
    %End

    void Expand(
        const wxTreeItemId & item
    );
    %Docstring
        Expand(item)
        
        Expands the given item.
    %End

    void ExpandAll();
    %Docstring
        ExpandAll()
        
        Expands all items in the tree.
    %End

    void ExpandAllChildren(
        const wxTreeItemId & item
    );
    %Docstring
        ExpandAllChildren(item)
        
        Expands the given item and all its children recursively.
    %End

    PyObject* GetBoundingRect(const wxTreeItemId& item,  bool textOnly=false);
    %Docstring
        GetBoundingRect(item, textOnly=False) -> PyObject
        
        Returns the rectangle bounding the item. If textOnly is true,
        only the rectangle around the item's label will be returned, otherwise
        the item's image is also taken into account. The return value may be
        None
        if the rectangle was not successfully retrieved, such as if the item
        is
        currently not visible.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreeCtrl_GetBoundingRect(sipCpp, item, textOnly);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxTreeCtrl_GetBoundingRect(wxTreeCtrl* self, const wxTreeItemId* item, bool textOnly)
    {
        wxRect rect;
        if (self->GetBoundingRect(*item, rect, textOnly)) {
            wxPyThreadBlocker blocker;
            wxRect* r = new wxRect(rect);
            PyObject* val = wxPyConstructObject((void*)r, wxT("wxRect"), true);
            return val;
        }
        else
            RETURN_NONE();
    }
    %End

    size_t GetChildrenCount(
        const wxTreeItemId & item,
        bool recursively = true
    ) const;
    %Docstring
        GetChildrenCount(item, recursively=True) -> size_t
        
        Returns the number of items in the branch.
    %End

    unsigned int GetCount() const;
    %Docstring
        GetCount() -> unsignedint
        
        Returns the number of items in the control.
    %End

    wxTextCtrl * GetEditControl() const;
    %Docstring
        GetEditControl() -> TextCtrl
        
        Returns the edit control being currently used to edit a label.
    %End

    wxTreeItemId GetFirstChild(
        const wxTreeItemId & item,
        wxTreeItemIdValue & cookie   /Out/
    ) const;
    %Docstring
        GetFirstChild(item) -> (TreeItemId, cookie)
        
        Returns the first child; call GetNextChild() for the next child.
    %End

    wxTreeItemId GetFirstVisibleItem() const;
    %Docstring
        GetFirstVisibleItem() -> TreeItemId
        
        Returns the first visible item.
    %End

    wxTreeItemId GetFocusedItem() const;
    %Docstring
        GetFocusedItem() -> TreeItemId
        
        Returns the item last clicked or otherwise selected.
    %End

    void ClearFocusedItem();
    %Docstring
        ClearFocusedItem()
        
        Clears the currently focused item.
    %End

    void SetFocusedItem(
        const wxTreeItemId & item
    );
    %Docstring
        SetFocusedItem(item)
        
        Sets the currently focused item.
    %End

    wxImageList * GetImageList() const;
    %Docstring
        GetImageList() -> ImageList
        
        Returns the normal image list.
    %End

    unsigned int GetIndent() const;
    %Docstring
        GetIndent() -> unsignedint
        
        Returns the current tree control indentation.
    %End

    unsigned int GetSpacing() const;
    %Docstring
        GetSpacing() -> unsignedint
        
        Returns the current tree control spacing.
    %End

    wxColour GetItemBackgroundColour(
        const wxTreeItemId & item
    ) const;
    %Docstring
        GetItemBackgroundColour(item) -> Colour
        
        Returns the background colour of the item.
    %End

    wxTreeItemData * GetItemData(
        const wxTreeItemId & item
    ) const;
    %Docstring
        GetItemData(item) -> TreeItemData
        
        Returns the tree item data associated with the item.
    %End

    wxFont GetItemFont(
        const wxTreeItemId & item
    ) const;
    %Docstring
        GetItemFont(item) -> Font
        
        Returns the font of the item label.
    %End

    int GetItemImage(
        const wxTreeItemId & item,
        wxTreeItemIcon which = wxTreeItemIcon_Normal
    ) const;
    %Docstring
        GetItemImage(item, which=TreeItemIcon_Normal) -> int
        
        Gets the specified item image.
    %End

    wxTreeItemId GetItemParent(
        const wxTreeItemId & item
    ) const;
    %Docstring
        GetItemParent(item) -> TreeItemId
        
        Returns the item's parent.
    %End

    int GetItemState(
        const wxTreeItemId & item
    ) const;
    %Docstring
        GetItemState(item) -> int
        
        Gets the specified item state.
    %End

    wxString GetItemText(
        const wxTreeItemId & item
    ) const;
    %Docstring
        GetItemText(item) -> String
        
        Returns the item label.
    %End

    wxColour GetItemTextColour(
        const wxTreeItemId & item
    ) const;
    %Docstring
        GetItemTextColour(item) -> Colour
        
        Returns the colour of the item label.
    %End

    wxTreeItemId GetLastChild(
        const wxTreeItemId & item
    ) const;
    %Docstring
        GetLastChild(item) -> TreeItemId
        
        Returns the last child of the item (or an invalid tree item if this
        item has no children).
    %End

    wxTreeItemId GetNextChild(
        const wxTreeItemId & item,
        wxTreeItemIdValue & cookie   /In, Out/
    ) const;
    %Docstring
        GetNextChild(item, cookie) -> (TreeItemId, cookie)
        
        Returns the next child; call GetFirstChild() for the first child.
    %End

    wxTreeItemId GetNextSibling(
        const wxTreeItemId & item
    ) const;
    %Docstring
        GetNextSibling(item) -> TreeItemId
        
        Returns the next sibling of the specified item; call GetPrevSibling()
        for the previous sibling.
    %End

    wxTreeItemId GetNextVisible(
        const wxTreeItemId & item
    ) const;
    %Docstring
        GetNextVisible(item) -> TreeItemId
        
        Returns the next visible item or an invalid item if this item is the
        last visible one.
    %End

    wxTreeItemId GetPrevSibling(
        const wxTreeItemId & item
    ) const;
    %Docstring
        GetPrevSibling(item) -> TreeItemId
        
        Returns the previous sibling of the specified item; call
        GetNextSibling() for the next sibling.
    %End

    wxTreeItemId GetPrevVisible(
        const wxTreeItemId & item
    ) const;
    %Docstring
        GetPrevVisible(item) -> TreeItemId
        
        Returns the previous visible item or an invalid item if this item is
        the first visible one.
    %End

    bool GetQuickBestSize() const;
    %Docstring
        GetQuickBestSize() -> bool
        
        Returns true if the control will use a quick calculation for the best
        size, looking only at the first and last items.
    %End

    wxTreeItemId GetRootItem() const;
    %Docstring
        GetRootItem() -> TreeItemId
        
        Returns the root item for the tree control.
    %End

    wxTreeItemId GetSelection() const;
    %Docstring
        GetSelection() -> TreeItemId
        
        Returns the selection, or an invalid item if there is no selection.
    %End

    PyObject* GetSelections();
    %Docstring
        GetSelections() -> PyObject
        
        Returns a list of currently selected items in the tree.  This function
        can be called only if the control has the wx.TR_MULTIPLE style.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreeCtrl_GetSelections(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxTreeCtrl_GetSelections(wxTreeCtrl* self)
    {
        wxPyThreadBlocker blocker;
        PyObject*           rval = PyList_New(0);
        wxArrayTreeItemIds  array;
        size_t              num, x;
        num = self->GetSelections(array);
        for (x=0; x < num; x++) {
            wxTreeItemId *tii = new wxTreeItemId(array.Item(x));
            PyObject* item = wxPyConstructObject((void*)tii, wxT("wxTreeItemId"), true);
            PyList_Append(rval, item);
            Py_DECREF(item);
        }
        return rval;
    }
    %End

    wxImageList * GetStateImageList() const;
    %Docstring
        GetStateImageList() -> ImageList
        
        Returns the state image list (from which application-defined state
        images are taken).
    %End

    wxTreeItemId HitTest(
        const wxPoint & point,
        int & flags
    ) const;
    %Docstring
        HitTest(point, flags) -> TreeItemId
        
        Calculates which (if any) item is under the given point, returning the
        tree item id at this point plus extra information flags.
    %End

    wxTreeItemId InsertItem(
        const wxTreeItemId & parent,
        const wxTreeItemId & previous,
        const wxString & text,
        int image = -1,
        int selImage = -1,
        wxTreeItemData * data   /Transfer/ = NULL
    );
    %Docstring
        InsertItem(parent, previous, text, image=-1, selImage=-1, data=None) -> TreeItemId
        InsertItem(parent, pos, text, image=-1, selImage=-1, data=None) -> TreeItemId
        
        Inserts an item after a given one (previous).
    %End

    wxTreeItemId InsertItem(
        const wxTreeItemId & parent,
        size_t pos,
        const wxString & text,
        int image = -1,
        int selImage = -1,
        wxTreeItemData * data   /Transfer/ = NULL
    );

    bool IsBold(
        const wxTreeItemId & item
    ) const;
    %Docstring
        IsBold(item) -> bool
        
        Returns true if the given item is in bold state.
    %End

    bool IsEmpty() const;
    %Docstring
        IsEmpty() -> bool
        
        Returns true if the control is empty (i.e. has no items, even no root
        one).
    %End

    bool IsExpanded(
        const wxTreeItemId & item
    ) const;
    %Docstring
        IsExpanded(item) -> bool
        
        Returns true if the item is expanded (only makes sense if it has
        children).
    %End

    bool IsSelected(
        const wxTreeItemId & item
    ) const;
    %Docstring
        IsSelected(item) -> bool
        
        Returns true if the item is selected.
    %End

    bool IsVisible(
        const wxTreeItemId & item
    ) const;
    %Docstring
        IsVisible(item) -> bool
        
        Returns true if the item is visible on the screen.
    %End

    bool ItemHasChildren(
        const wxTreeItemId & item
    ) const;
    %Docstring
        ItemHasChildren(item) -> bool
        
        Returns true if the item has children.
    %End

    virtual
    int OnCompareItems(
        const wxTreeItemId & item1,
        const wxTreeItemId & item2
    );
    %Docstring
        OnCompareItems(item1, item2) -> int
        
        Override this function in the derived class to change the sort order
        of the items in the tree control.
    %End

    wxTreeItemId PrependItem(
        const wxTreeItemId & parent,
        const wxString & text,
        int image = -1,
        int selImage = -1,
        wxTreeItemData * data   /Transfer/ = NULL
    );
    %Docstring
        PrependItem(parent, text, image=-1, selImage=-1, data=None) -> TreeItemId
        
        Appends an item as the first child of parent, return a new item id.
    %End

    void ScrollTo(
        const wxTreeItemId & item
    );
    %Docstring
        ScrollTo(item)
        
        Scrolls the specified item into view.
    %End

    void SelectItem(
        const wxTreeItemId & item,
        bool select = true
    );
    %Docstring
        SelectItem(item, select=True)
        
        Selects the given item.
    %End

    void SetImageList(
        wxImageList * imageList
    );
    %Docstring
        SetImageList(imageList)
        
        Sets the normal image list.
    %End

    void SetIndent(
        unsigned int indent
    );
    %Docstring
        SetIndent(indent)
        
        Sets the indentation for the tree control.
    %End

    void SetSpacing(
        unsigned int spacing
    );
    %Docstring
        SetSpacing(spacing)
        
        Sets the spacing for the tree control.
    %End

    void SetItemBackgroundColour(
        const wxTreeItemId & item,
        const wxColour & col
    );
    %Docstring
        SetItemBackgroundColour(item, col)
        
        Sets the colour of the item's background.
    %End

    void SetItemBold(
        const wxTreeItemId & item,
        bool bold = true
    );
    %Docstring
        SetItemBold(item, bold=True)
        
        Makes item appear in bold font if bold parameter is true or resets it
        to the normal state.
    %End

    void SetItemData(
        const wxTreeItemId & item,
        wxTreeItemData * data   /Transfer/
    );
    %Docstring
        SetItemData(item, data)
        
        Sets the item client data.
    %End

    void SetItemDropHighlight(
        const wxTreeItemId & item,
        bool highlight = true
    );
    %Docstring
        SetItemDropHighlight(item, highlight=True)
        
        Gives the item the visual feedback for Drag'n'Drop actions, which is
        useful if something is dragged from the outside onto the tree control
        (as opposed to a DnD operation within the tree control, which already
        is implemented internally).
    %End

    void SetItemFont(
        const wxTreeItemId & item,
        const wxFont & font
    );
    %Docstring
        SetItemFont(item, font)
        
        Sets the item's font.
    %End

    void SetItemHasChildren(
        const wxTreeItemId & item,
        bool hasChildren = true
    );
    %Docstring
        SetItemHasChildren(item, hasChildren=True)
        
        Force appearance of the button next to the item.
    %End

    void SetItemImage(
        const wxTreeItemId & item,
        int image,
        wxTreeItemIcon which = wxTreeItemIcon_Normal
    );
    %Docstring
        SetItemImage(item, image, which=TreeItemIcon_Normal)
        
        Sets the specified item's image.
    %End

    void SetItemState(
        const wxTreeItemId & item,
        int state
    );
    %Docstring
        SetItemState(item, state)
        
        Sets the specified item state.
    %End

    void SetItemText(
        const wxTreeItemId & item,
        const wxString & text
    );
    %Docstring
        SetItemText(item, text)
        
        Sets the item label.
    %End

    void SetItemTextColour(
        const wxTreeItemId & item,
        const wxColour & col
    );
    %Docstring
        SetItemTextColour(item, col)
        
        Sets the colour of the item's text.
    %End

    void SetQuickBestSize(
        bool quickBestSize
    );
    %Docstring
        SetQuickBestSize(quickBestSize)
        
        If true is passed, specifies that the control will use a quick
        calculation for the best size, looking only at the first and last
        items.
    %End

    void SetStateImageList(
        wxImageList * imageList
    );
    %Docstring
        SetStateImageList(imageList)
        
        Sets the state image list (from which application-defined state images
        are taken).
    %End

    void SetWindowStyle(
        long styles
    );
    %Docstring
        SetWindowStyle(styles)
        
        Sets the mode flags associated with the display of the tree control.
    %End

    void SortChildren(
        const wxTreeItemId & item
    );
    %Docstring
        SortChildren(item)
        
        Sorts the children of the given item using OnCompareItems().
    %End

    void Toggle(
        const wxTreeItemId & item
    );
    %Docstring
        Toggle(item)
        
        Toggles the given item between collapsed and expanded states.
    %End

    void ToggleItemSelection(
        const wxTreeItemId & item
    );
    %Docstring
        ToggleItemSelection(item)
        
        Toggles the given item between selected and unselected states.
    %End

    void Unselect();
    %Docstring
        Unselect()
        
        Removes the selection from the currently selected item (if any).
    %End

    void UnselectAll();
    %Docstring
        UnselectAll()
        
        This function either behaves the same as Unselect() if the control
        doesn't have wxTR_MULTIPLE style, or removes the selection from all
        items if it does have this style.
    %End

    void UnselectItem(
        const wxTreeItemId & item
    );
    %Docstring
        UnselectItem(item)
        
        Unselects the given item.
    %End

    void SelectChildren(
        const wxTreeItemId & parent
    );
    %Docstring
        SelectChildren(parent)
        
        Select all the immediate children of the given parent.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void EnableSystemTheme(
        bool enable = true
    );
    %Docstring
        EnableSystemTheme(enable=True)
        
        Can be used to disable the system theme of controls using it by
        default.
    %End

    public:


    %Property(name=BoundingRect, get=GetBoundingRect)
    %Property(name=Count, get=GetCount)
    %Property(name=EditControl, get=GetEditControl)
    %Property(name=FirstVisibleItem, get=GetFirstVisibleItem)
    %Property(name=FocusedItem, get=GetFocusedItem, set=SetFocusedItem)
    %Property(name=ImageList, get=GetImageList, set=SetImageList)
    %Property(name=Indent, get=GetIndent, set=SetIndent)
    %Property(name=QuickBestSize, get=GetQuickBestSize, set=SetQuickBestSize)
    %Property(name=RootItem, get=GetRootItem)
    %Property(name=Selection, get=GetSelection)
    %Property(name=Selections, get=GetSelections)
    %Property(name=Spacing, get=GetSpacing, set=SetSpacing)
    %Property(name=StateImageList, get=GetStateImageList, set=SetStateImageList)
};  // end of class wxTreeCtrl


%Extract(id=pycode_core)
TreeCtrl.GetItemPyData = wx.deprecated(TreeCtrl.GetItemData, 'Use GetItemData instead.')
TreeCtrl.SetItemPyData = wx.deprecated(TreeCtrl.SetItemData, 'Use SetItemData instead.')
TreeCtrl.GetPyData = wx.deprecated(TreeCtrl.GetItemData, 'Use GetItemData instead.')
TreeCtrl.SetPyData = wx.deprecated(TreeCtrl.SetItemData, 'Use SetItemData instead.')

%End

class wxTreeEvent : wxNotifyEvent
{
    %Docstring
        TreeEvent(commandType, tree, item=TreeItemId())
        
        A tree event holds information about events associated with wxTreeCtrl
        objects.
    %End
    %TypeHeaderCode
        #include <wx/treectrl.h>
    %End

public:
    wxTreeEvent(
        wxEventType commandType,
        wxTreeCtrl * tree,
        const wxTreeItemId & item = wxTreeItemId()
    );

    wxTreeItemId GetItem() const;
    %Docstring
        GetItem() -> TreeItemId
        
        Returns the item (valid for all events).
    %End

    int GetKeyCode() const;
    %Docstring
        GetKeyCode() -> int
        
        Returns the key code if the event is a key event.
    %End

    const wxKeyEvent & GetKeyEvent() const;
    %Docstring
        GetKeyEvent() -> KeyEvent
        
        Returns the key event for EVT_TREE_KEY_DOWN events.
    %End

    const wxString & GetLabel() const;
    %Docstring
        GetLabel() -> String
        
        Returns the label if the event is a begin or end edit label event.
    %End

    wxTreeItemId GetOldItem() const;
    %Docstring
        GetOldItem() -> TreeItemId
        
        Returns the old item index (valid for EVT_TREE_SEL_CHANGING and
        EVT_TREE_SEL_CHANGED events).
    %End

    wxPoint GetPoint() const;
    %Docstring
        GetPoint() -> Point
        
        Returns the position of the mouse pointer if the event is a drag or
        menu-context event.
    %End

    bool IsEditCancelled() const;
    %Docstring
        IsEditCancelled() -> bool
        
        Returns true if the label edit was cancelled.
    %End

    void SetToolTip(
        const wxString & tooltip
    );
    %Docstring
        SetToolTip(tooltip)
        
        Set the tooltip for the item (valid for EVT_TREE_ITEM_GETTOOLTIP
        events).
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxTreeEvent& operator=(const wxTreeEvent&);


    public:


    %Property(name=Item, get=GetItem)
    %Property(name=KeyCode, get=GetKeyCode)
    %Property(name=KeyEvent, get=GetKeyEvent)
    %Property(name=Label, get=GetLabel)
    %Property(name=OldItem, get=GetOldItem)
    %Property(name=Point, get=GetPoint)
};  // end of class wxTreeEvent


%Extract(id=pycode_core)
def TreeItemData(data):
    return data
TreeItemData = deprecated(TreeItemData, "The TreeItemData class no longer exists, just pass your object directly to the tree instead.")

%End

%Extract(id=pycode_core)
EVT_TREE_BEGIN_DRAG        = PyEventBinder(wxEVT_TREE_BEGIN_DRAG       , 1)
EVT_TREE_BEGIN_RDRAG       = PyEventBinder(wxEVT_TREE_BEGIN_RDRAG      , 1)
EVT_TREE_BEGIN_LABEL_EDIT  = PyEventBinder(wxEVT_TREE_BEGIN_LABEL_EDIT , 1)
EVT_TREE_END_LABEL_EDIT    = PyEventBinder(wxEVT_TREE_END_LABEL_EDIT   , 1)
EVT_TREE_DELETE_ITEM       = PyEventBinder(wxEVT_TREE_DELETE_ITEM      , 1)
EVT_TREE_GET_INFO          = PyEventBinder(wxEVT_TREE_GET_INFO         , 1)
EVT_TREE_SET_INFO          = PyEventBinder(wxEVT_TREE_SET_INFO         , 1)
EVT_TREE_ITEM_EXPANDED     = PyEventBinder(wxEVT_TREE_ITEM_EXPANDED    , 1)
EVT_TREE_ITEM_EXPANDING    = PyEventBinder(wxEVT_TREE_ITEM_EXPANDING   , 1)
EVT_TREE_ITEM_COLLAPSED    = PyEventBinder(wxEVT_TREE_ITEM_COLLAPSED   , 1)
EVT_TREE_ITEM_COLLAPSING   = PyEventBinder(wxEVT_TREE_ITEM_COLLAPSING  , 1)
EVT_TREE_SEL_CHANGED       = PyEventBinder(wxEVT_TREE_SEL_CHANGED      , 1)
EVT_TREE_SEL_CHANGING      = PyEventBinder(wxEVT_TREE_SEL_CHANGING     , 1)
EVT_TREE_KEY_DOWN          = PyEventBinder(wxEVT_TREE_KEY_DOWN         , 1)
EVT_TREE_ITEM_ACTIVATED    = PyEventBinder(wxEVT_TREE_ITEM_ACTIVATED   , 1)
EVT_TREE_ITEM_RIGHT_CLICK  = PyEventBinder(wxEVT_TREE_ITEM_RIGHT_CLICK , 1)
EVT_TREE_ITEM_MIDDLE_CLICK = PyEventBinder(wxEVT_TREE_ITEM_MIDDLE_CLICK, 1)
EVT_TREE_END_DRAG          = PyEventBinder(wxEVT_TREE_END_DRAG         , 1)
EVT_TREE_STATE_IMAGE_CLICK = PyEventBinder(wxEVT_TREE_STATE_IMAGE_CLICK, 1)
EVT_TREE_ITEM_GETTOOLTIP   = PyEventBinder(wxEVT_TREE_ITEM_GETTOOLTIP,   1)
EVT_TREE_ITEM_MENU         = PyEventBinder(wxEVT_TREE_ITEM_MENU,         1)

# deprecated wxEVT aliases
wxEVT_COMMAND_TREE_BEGIN_DRAG         = wxEVT_TREE_BEGIN_DRAG
wxEVT_COMMAND_TREE_BEGIN_RDRAG        = wxEVT_TREE_BEGIN_RDRAG
wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT   = wxEVT_TREE_BEGIN_LABEL_EDIT
wxEVT_COMMAND_TREE_END_LABEL_EDIT     = wxEVT_TREE_END_LABEL_EDIT
wxEVT_COMMAND_TREE_DELETE_ITEM        = wxEVT_TREE_DELETE_ITEM
wxEVT_COMMAND_TREE_GET_INFO           = wxEVT_TREE_GET_INFO
wxEVT_COMMAND_TREE_SET_INFO           = wxEVT_TREE_SET_INFO
wxEVT_COMMAND_TREE_ITEM_EXPANDED      = wxEVT_TREE_ITEM_EXPANDED
wxEVT_COMMAND_TREE_ITEM_EXPANDING     = wxEVT_TREE_ITEM_EXPANDING
wxEVT_COMMAND_TREE_ITEM_COLLAPSED     = wxEVT_TREE_ITEM_COLLAPSED
wxEVT_COMMAND_TREE_ITEM_COLLAPSING    = wxEVT_TREE_ITEM_COLLAPSING
wxEVT_COMMAND_TREE_SEL_CHANGED        = wxEVT_TREE_SEL_CHANGED
wxEVT_COMMAND_TREE_SEL_CHANGING       = wxEVT_TREE_SEL_CHANGING
wxEVT_COMMAND_TREE_KEY_DOWN           = wxEVT_TREE_KEY_DOWN
wxEVT_COMMAND_TREE_ITEM_ACTIVATED     = wxEVT_TREE_ITEM_ACTIVATED
wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK   = wxEVT_TREE_ITEM_RIGHT_CLICK
wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK  = wxEVT_TREE_ITEM_MIDDLE_CLICK
wxEVT_COMMAND_TREE_END_DRAG           = wxEVT_TREE_END_DRAG
wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK  = wxEVT_TREE_STATE_IMAGE_CLICK
wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP    = wxEVT_TREE_ITEM_GETTOOLTIP
wxEVT_COMMAND_TREE_ITEM_MENU          = wxEVT_TREE_ITEM_MENU

%End


//---------------------------------------------------------------------------

