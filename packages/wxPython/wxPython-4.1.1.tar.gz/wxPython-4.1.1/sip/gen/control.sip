//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const char* wxControlNameStr;

class wxControl : wxWindow
{
    %Docstring
        Control(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ControlNameStr)
        Control()
        
        This is the base class for a control or "widget".
    %End
    %TypeHeaderCode
        #include <wx/control.h>
    %End

public:
    wxControl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxControlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxControl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxControlNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ControlNameStr) -> bool
    %End

    void Command(
        wxCommandEvent & event
    );
    %Docstring
        Command(event)
        
        Simulates the effect of the user issuing a command to the item.
    %End

    wxString GetLabel() const;
    %Docstring
        GetLabel() -> String
        
        Returns the control's label, as it was passed to SetLabel().
    %End

    wxString GetLabelText() const;
    %Docstring
        GetLabelText() -> String
        GetLabelText(label) -> String
        
        Returns the control's label without mnemonics.
    %End

    static
    wxString GetLabelText(
        const wxString & label
    );

    wxSize GetSizeFromTextSize(
        int xlen,
        int ylen = -1
    ) const;
    %Docstring
        GetSizeFromTextSize(xlen, ylen=-1) -> Size
        GetSizeFromTextSize(tsize) -> Size
        
        Determine the size needed by the control to leave the given area for
        its text.
    %End

    wxSize GetSizeFromTextSize(
        const wxSize & tsize
    ) const;

    wxSize GetSizeFromText(
        const wxString & text
    ) const;
    %Docstring
        GetSizeFromText(text) -> Size
        
        Determine the minimum size needed by the control to display the given
        text.
    %End

    void SetLabel(
        const wxString & label
    );
    %Docstring
        SetLabel(label)
        
        Sets the control's label.
    %End

    void SetLabelText(
        const wxString & text
    );
    %Docstring
        SetLabelText(text)
        
        Sets the control's label to exactly the given string.
    %End

    bool SetLabelMarkup(
        const wxString & markup
    );
    %Docstring
        SetLabelMarkup(markup) -> bool
        
        Sets the controls label to a string using markup.
    %End

    static
    wxString RemoveMnemonics(
        const wxString & str
    );
    %Docstring
        RemoveMnemonics(str) -> String
        
        Returns the given str string without mnemonics ("&" characters).
    %End

    static
    wxString EscapeMnemonics(
        const wxString & text
    );
    %Docstring
        EscapeMnemonics(text) -> String
        
        Escapes the special mnemonics characters ("&") in the given string.
    %End

    static
    wxString Ellipsize(
        const wxString & label,
        const wxDC & dc,
        wxEllipsizeMode mode,
        int maxWidth,
        int flags = wxELLIPSIZE_FLAGS_DEFAULT
    );
    %Docstring
        Ellipsize(label, dc, mode, maxWidth, flags=ELLIPSIZE_FLAGS_DEFAULT) -> String
        
        Replaces parts of the label string with ellipsis, if needed, so that
        it fits into maxWidth pixels if possible.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Label, get=GetLabel, set=SetLabel)
    %Property(name=LabelText, get=GetLabelText, set=SetLabelText)
};  // end of class wxControl


%Extract(id=pycode_core)
PyControl = wx.deprecated(Control, 'Use Control instead.')

%End


//---------------------------------------------------------------------------

