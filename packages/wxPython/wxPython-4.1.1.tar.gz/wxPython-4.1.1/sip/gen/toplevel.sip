//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxDEFAULT_FRAME_STYLE;
enum 
{
    wxUSER_ATTENTION_INFO,
    wxUSER_ATTENTION_ERROR
};

enum 
{
    wxFULLSCREEN_NOMENUBAR,
    wxFULLSCREEN_NOTOOLBAR,
    wxFULLSCREEN_NOSTATUSBAR,
    wxFULLSCREEN_NOBORDER,
    wxFULLSCREEN_NOCAPTION,
    wxFULLSCREEN_ALL
};

const char* wxFrameNameStr;

class wxTopLevelWindow : wxNonOwnedWindow
{
    %Docstring
        TopLevelWindow()
        TopLevelWindow(parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr)
        
        wxTopLevelWindow is a common base class for wxDialog and wxFrame.
    %End
    %TypeHeaderCode
        #include <wx/toplevel.h>
    %End

public:
public:
    class GeometrySerializer   /Abstract/
    {
        %Docstring
            Class used with SaveGeometry() and RestoreToGeometry().
        %End
        %TypeHeaderCode
            #include <wx/toplevel.h>
        %End

    public:
    };  // end of class GeometrySerializer


    wxTopLevelWindow();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxTopLevelWindow(
        wxWindow * parent,
        wxWindowID id = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_FRAME_STYLE,
        const wxString & name = wxFrameNameStr
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxTopLevelWindow();

    bool Create(
        wxWindow * parent,
        wxWindowID id = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_FRAME_STYLE,
        const wxString & name = wxFrameNameStr
    )   /TransferThis/;
    %Docstring
        Create(parent, id=ID_ANY, title=EmptyString, pos=DefaultPosition, size=DefaultSize, style=DEFAULT_FRAME_STYLE, name=FrameNameStr) -> bool
        
        Creates the top level window.
    %End

    bool CanSetTransparent();
    %Docstring
        CanSetTransparent() -> bool
        
        Returns true if the platform supports making the window translucent.
    %End

    void CenterOnScreen(
        int direction = wxBOTH
    );
    %Docstring
        CenterOnScreen(direction=BOTH)
        
        A synonym for CentreOnScreen().
    %End

    void CentreOnScreen(
        int direction = wxBOTH
    );
    %Docstring
        CentreOnScreen(direction=BOTH)
        
        Centres the window on screen.
    %End

    bool EnableCloseButton(
        bool enable = true
    );
    %Docstring
        EnableCloseButton(enable=True) -> bool
        
        Enables or disables the Close button (most often in the right upper
        corner of a dialog) and the Close entry of the system menu (most often
        in the left upper corner of the dialog).
    %End

    bool EnableMaximizeButton(
        bool enable = true
    );
    %Docstring
        EnableMaximizeButton(enable=True) -> bool
        
        Enables or disables the Maximize button (in the right or left upper
        corner of a frame or dialog).
    %End

    bool EnableMinimizeButton(
        bool enable = true
    );
    %Docstring
        EnableMinimizeButton(enable=True) -> bool
        
        Enables or disables the Minimize button (in the right or left upper
        corner of a frame or dialog).
    %End

    wxWindow * GetDefaultItem() const;
    %Docstring
        GetDefaultItem() -> Window
        
        Returns a pointer to the button which is the default for this window,
        or  NULL.
    %End

    wxIcon GetIcon() const;
    %Docstring
        GetIcon() -> Icon
        
        Returns the standard icon of the window.
    %End

    const wxIconBundle & GetIcons() const;
    %Docstring
        GetIcons() -> IconBundle
        
        Returns all icons associated with the window, there will be none of
        them if neither SetIcon() nor SetIcons() had been called before.
    %End

    wxString GetTitle() const;
    %Docstring
        GetTitle() -> String
        
        Gets a string containing the window title.
    %End

    void Iconize(
        bool iconize = true
    );
    %Docstring
        Iconize(iconize=True)
        
        Iconizes or restores the window.
    %End

    bool IsActive();
    %Docstring
        IsActive() -> bool
        
        Returns true if this window is currently active, i.e. if the user is
        currently working with it.
    %End

    bool IsAlwaysMaximized() const;
    %Docstring
        IsAlwaysMaximized() -> bool
        
        Returns true if this window is expected to be always maximized, either
        due to platform policy or due to local policy regarding particular
        class.
    %End

    bool IsFullScreen() const;
    %Docstring
        IsFullScreen() -> bool
        
        Returns true if the window is in fullscreen mode.
    %End

    bool IsIconized() const;
    %Docstring
        IsIconized() -> bool
        
        Returns true if the window is iconized.
    %End

    bool IsMaximized() const;
    %Docstring
        IsMaximized() -> bool
        
        Returns true if the window is maximized.
    %End

    bool Layout();
    %Docstring
        Layout() -> bool
        
        Lays out the children using the window sizer or resizes the only child
        of the window to cover its entire area.
    %End

    void Maximize(
        bool maximize = true
    );
    %Docstring
        Maximize(maximize=True)
        
        Maximizes or restores the window.
    %End

    void RequestUserAttention(
        int flags = wxUSER_ATTENTION_INFO
    );
    %Docstring
        RequestUserAttention(flags=USER_ATTENTION_INFO)
        
        Use a system-dependent way to attract users attention to the window
        when it is in background.
    %End

    void Restore();
    %Docstring
        Restore()
        
        Restore a previously iconized or maximized window to its normal state.
    %End

    bool RestoreToGeometry(
        GeometrySerializer & ser
    );
    %Docstring
        RestoreToGeometry(ser) -> bool
        
        Restores the window to the previously saved geometry.
    %End

    bool SaveGeometry(
        const GeometrySerializer & ser
    ) const;
    %Docstring
        SaveGeometry(ser) -> bool
        
        Save the current window geometry to allow restoring it later.
    %End

    wxWindow * SetDefaultItem(
        wxWindow * win
    );
    %Docstring
        SetDefaultItem(win) -> Window
        
        Changes the default item for the panel, usually win is a button.
    %End

    wxWindow * SetTmpDefaultItem(
        wxWindow * win
    );
    %Docstring
        SetTmpDefaultItem(win) -> Window
    %End

    wxWindow * GetTmpDefaultItem() const;
    %Docstring
        GetTmpDefaultItem() -> Window
    %End

    void SetIcon(
        const wxIcon & icon
    );
    %Docstring
        SetIcon(icon)
        
        Sets the icon for this window.
    %End

    void SetIcons(
        const wxIconBundle & icons
    );
    %Docstring
        SetIcons(icons)
        
        Sets several icons of different sizes for this window: this allows
        using different icons for different situations (e.g.
    %End

    void SetMaxSize(
        const wxSize & size
    );
    %Docstring
        SetMaxSize(size)
        
        A simpler interface for setting the size hints than SetSizeHints().
    %End

    void SetMinSize(
        const wxSize & size
    );
    %Docstring
        SetMinSize(size)
        
        A simpler interface for setting the size hints than SetSizeHints().
    %End

    void SetSizeHints(
        int minW,
        int minH,
        int maxW = -1,
        int maxH = -1,
        int incW = -1,
        int incH = -1
    );
    %Docstring
        SetSizeHints(minW, minH, maxW=-1, maxH=-1, incW=-1, incH=-1)
        SetSizeHints(minSize, maxSize=DefaultSize, incSize=DefaultSize)
        
        Allows specification of minimum and maximum window sizes, and window
        size increments.
    %End

    void SetSizeHints(
        const wxSize & minSize,
        const wxSize & maxSize = wxDefaultSize,
        const wxSize & incSize = wxDefaultSize
    );

    void SetTitle(
        const wxString & title
    );
    %Docstring
        SetTitle(title)
        
        Sets the window title.
    %End

    bool SetTransparent(
        wxByte alpha
    );
    %Docstring
        SetTransparent(alpha) -> bool
        
        If the platform supports it will set the window to be translucent.
    %End

    virtual
    bool ShouldPreventAppExit() const;
    %Docstring
        ShouldPreventAppExit() -> bool
        
        This virtual function is not meant to be called directly but can be
        overridden to return false (it returns true by default) to allow the
        application to close even if this, presumably not very important,
        window is still opened.
    %End

    void OSXSetModified(
        bool modified
    );
    %Docstring
        OSXSetModified(modified)
        
        This function sets the wxTopLevelWindow's modified state on macOS,
        which currently draws a black dot in the wxTopLevelWindow's close
        button.
    %End

    bool OSXIsModified() const;
    %Docstring
        OSXIsModified() -> bool
        
        Returns the current modified state of the wxTopLevelWindow on macOS.
    %End

    void SetRepresentedFilename(
        const wxString & filename
    );
    %Docstring
        SetRepresentedFilename(filename)
        
        Sets the file name represented by this wxTopLevelWindow.
    %End

    void ShowWithoutActivating();
    %Docstring
        ShowWithoutActivating()
        
        Show the wxTopLevelWindow, but do not give it keyboard focus.
    %End

    bool EnableFullScreenView(
        bool enable = true
    );
    %Docstring
        EnableFullScreenView(enable=True) -> bool
        
        Enables the maximize button to toggle full screen mode.
    %End

    bool ShowFullScreen(
        bool show,
        long style = wxFULLSCREEN_ALL
    );
    %Docstring
        ShowFullScreen(show, style=FULLSCREEN_ALL) -> bool
        
        Depending on the value of show parameter the window is either shown
        full screen or restored to its normal state.
    %End

    static
    wxSize GetDefaultSize();
    %Docstring
        GetDefaultSize() -> Size
        
        Get the default size for a new top level window.
    %End

    void MacSetMetalAppearance(bool on);
    %Docstring
        MacSetMetalAppearance(on)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxTopLevelWindow_MacSetMetalAppearance(sipCpp, on);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxTopLevelWindow_MacSetMetalAppearance(wxTopLevelWindow* self, bool on)
    {
        int style = self->GetExtraStyle();
        if ( on )
            style |= wxFRAME_EX_METAL;
        else
            style &= ~wxFRAME_EX_METAL;
        self->SetExtraStyle(style);
    }
    %End

    bool MacGetMetalAppearance();
    %Docstring
        MacGetMetalAppearance() -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTopLevelWindow_MacGetMetalAppearance(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxTopLevelWindow_MacGetMetalAppearance(wxTopLevelWindow* self)
    {
        return self->GetExtraStyle() & wxFRAME_EX_METAL;
    }
    %End

    bool MacGetUnifiedAppearance();
    %Docstring
        MacGetUnifiedAppearance() -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTopLevelWindow_MacGetUnifiedAppearance(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxTopLevelWindow_MacGetUnifiedAppearance(wxTopLevelWindow* self)
    {
        return true;
    }
    %End

    void* MacGetTopLevelWindowRef();
    %Docstring
        MacGetTopLevelWindowRef() -> void
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTopLevelWindow_MacGetTopLevelWindowRef(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void* _wxTopLevelWindow_MacGetTopLevelWindowRef(wxTopLevelWindow* self)
    {
        #ifdef __WXMAC__
            return (void*)(self->MacGetTopLevelWindowRef());
        #else
            return 0;
        #endif
    }
    %End

    %Property(name=DefaultItem, get=GetDefaultItem, set=SetDefaultItem)
    %Property(name=Icon, get=GetIcon, set=SetIcon)
    %Property(name=Title, get=GetTitle, set=SetTitle)
    %Property(name=TmpDefaultItem, get=GetTmpDefaultItem, set=SetTmpDefaultItem)
    %Property(name=OSXModified, get=OSXIsModified, set=OSXSetModified)
    %Property(name=MacMetalAppearance, get=MacGetMetalAppearance, set=MacSetMetalAppearance)
    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

};  // end of class wxTopLevelWindow



//---------------------------------------------------------------------------

