//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _richtext.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/richtext/richtextstyledlg.h>
%End


//---------------------------------------------------------------------------

const int wxRICHTEXT_ORGANISER_DELETE_STYLES;
const int wxRICHTEXT_ORGANISER_CREATE_STYLES;
const int wxRICHTEXT_ORGANISER_APPLY_STYLES;
const int wxRICHTEXT_ORGANISER_EDIT_STYLES;
const int wxRICHTEXT_ORGANISER_RENAME_STYLES;
const int wxRICHTEXT_ORGANISER_OK_CANCEL;
const int wxRICHTEXT_ORGANISER_RENUMBER;
const int wxRICHTEXT_ORGANISER_SHOW_CHARACTER;
const int wxRICHTEXT_ORGANISER_SHOW_PARAGRAPH;
const int wxRICHTEXT_ORGANISER_SHOW_LIST;
const int wxRICHTEXT_ORGANISER_SHOW_BOX;
const int wxRICHTEXT_ORGANISER_SHOW_ALL;
const int wxRICHTEXT_ORGANISER_ORGANISE;
const int wxRICHTEXT_ORGANISER_BROWSE;
const int wxRICHTEXT_ORGANISER_BROWSE_NUMBERING;
class wxRichTextStyleOrganiserDialog : wxDialog
{
    %Docstring
        RichTextStyleOrganiserDialog()
        RichTextStyleOrganiserDialog(flags, sheet, ctrl, parent, id=wx.ID_ANY, caption=_("StyleOrganiser"), pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.SYSTEM_MENU|wx.CLOSE_BOX)
        
        This class shows a style sheet and allows the user to edit, add and
        remove styles.
    %End
    %TypeHeaderCode
        #include <wx/richtext/richtextstyledlg.h>
    %End

public:
    wxRichTextStyleOrganiserDialog();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxRichTextStyleOrganiserDialog(
        int flags,
        wxRichTextStyleSheet * sheet,
        wxRichTextCtrl * ctrl,
        wxWindow * parent,
        wxWindowID id = wxID_ANY,
        const wxString & caption = _("Style Organiser"),
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxSYSTEM_MENU|wxCLOSE_BOX
    )   /Transfer/;
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool ApplyStyle(
        wxRichTextCtrl * ctrl = NULL
    );
    %Docstring
        ApplyStyle(ctrl=None) -> bool
        
        Applies the selected style to selection in the given control or the
        control passed to the constructor.
    %End

    bool Create(
        int flags,
        wxRichTextStyleSheet * sheet,
        wxRichTextCtrl * ctrl,
        wxWindow * parent,
        wxWindowID id = wxID_ANY,
        const wxString & caption = wxGetTranslation("Style Organiser"),
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxSize(400, 300),
        long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxSYSTEM_MENU|wxCLOSE_BOX
    )   /TransferThis/;
    %Docstring
        Create(flags, sheet, ctrl, parent, id=wx.ID_ANY, caption=wx.GetTranslation("StyleOrganiser"), pos=wx.DefaultPosition, size=wx.Size(400,300), style=wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.SYSTEM_MENU|wx.CLOSE_BOX) -> bool
        
        Creates the dialog.
    %End

    bool GetRestartNumbering() const;
    %Docstring
        GetRestartNumbering() -> bool
        
        Returns true if the user has opted to restart numbering.
    %End

    wxRichTextCtrl * GetRichTextCtrl() const;
    %Docstring
        GetRichTextCtrl() -> RichTextCtrl
        
        Returns the associated rich text control (if any).
    %End

    wxString GetSelectedStyle() const;
    %Docstring
        GetSelectedStyle() -> String
        
        Returns selected style name.
    %End

    wxRichTextStyleDefinition * GetSelectedStyleDefinition() const;
    %Docstring
        GetSelectedStyleDefinition() -> RichTextStyleDefinition
        
        Returns selected style definition.
    %End

    wxRichTextStyleSheet * GetStyleSheet() const;
    %Docstring
        GetStyleSheet() -> RichTextStyleSheet
        
        Returns the associated style sheet.
    %End

    void SetFlags(
        int flags
    );
    %Docstring
        SetFlags(flags)
        
        Sets the flags used to control the interface presented to the user.
    %End

    void SetRestartNumbering(
        bool restartNumbering
    );
    %Docstring
        SetRestartNumbering(restartNumbering)
        
        Checks or unchecks the restart numbering checkbox.
    %End

    void SetRichTextCtrl(
        wxRichTextCtrl * ctrl
    );
    %Docstring
        SetRichTextCtrl(ctrl)
        
        Sets the control to be associated with the dialog, for the purposes of
        applying a style to the selection.
    %End

    void SetStyleSheet(
        wxRichTextStyleSheet * sheet
    );
    %Docstring
        SetStyleSheet(sheet)
        
        Sets the associated style sheet.
    %End

    int GetFlags() const;
    %Docstring
        GetFlags() -> int
        
        Returns the flags used to control the interface presented to the user.
    %End

    static
    void SetShowToolTips(
        bool show
    );
    %Docstring
        SetShowToolTips(show)
        
        Determines whether tooltips will be shown.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Flags, get=GetFlags, set=SetFlags)
    %Property(name=RestartNumbering, get=GetRestartNumbering, set=SetRestartNumbering)
    %Property(name=RichTextCtrl, get=GetRichTextCtrl, set=SetRichTextCtrl)
    %Property(name=SelectedStyle, get=GetSelectedStyle)
    %Property(name=SelectedStyleDefinition, get=GetSelectedStyleDefinition)
    %Property(name=StyleSheet, get=GetStyleSheet, set=SetStyleSheet)
};  // end of class wxRichTextStyleOrganiserDialog



//---------------------------------------------------------------------------

