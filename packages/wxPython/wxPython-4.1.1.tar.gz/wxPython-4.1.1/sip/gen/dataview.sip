//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _dataview.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/dataview.h>
%End


//---------------------------------------------------------------------------

const int wxDVC_DEFAULT_RENDERER_SIZE;
const int wxDVC_DEFAULT_WIDTH;
const int wxDVC_TOGGLE_DEFAULT_WIDTH;
const int wxDVC_DEFAULT_MINWIDTH;
const int wxDVR_DEFAULT_ALIGNMENT;
const int wxDV_SINGLE;
const int wxDV_MULTIPLE;
const int wxDV_NO_HEADER;
const int wxDV_HORIZ_RULES;
const int wxDV_VERT_RULES;
const int wxDV_ROW_LINES;
const int wxDV_VARIABLE_LINE_HEIGHT;
enum wxDataViewCellMode
{
    wxDATAVIEW_CELL_INERT,
    wxDATAVIEW_CELL_ACTIVATABLE,
    wxDATAVIEW_CELL_EDITABLE
};

enum wxDataViewCellRenderState
{
    wxDATAVIEW_CELL_SELECTED,
    wxDATAVIEW_CELL_PRELIT,
    wxDATAVIEW_CELL_INSENSITIVE,
    wxDATAVIEW_CELL_FOCUSED
};

enum wxDataViewColumnFlags
{
    wxDATAVIEW_COL_RESIZABLE,
    wxDATAVIEW_COL_SORTABLE,
    wxDATAVIEW_COL_REORDERABLE,
    wxDATAVIEW_COL_HIDDEN
};

wxEventType wxEVT_DATAVIEW_SELECTION_CHANGED   /PyName=wxEVT_DATAVIEW_SELECTION_CHANGED/;

wxEventType wxEVT_DATAVIEW_ITEM_ACTIVATED   /PyName=wxEVT_DATAVIEW_ITEM_ACTIVATED/;

wxEventType wxEVT_DATAVIEW_ITEM_COLLAPSING   /PyName=wxEVT_DATAVIEW_ITEM_COLLAPSING/;

wxEventType wxEVT_DATAVIEW_ITEM_COLLAPSED   /PyName=wxEVT_DATAVIEW_ITEM_COLLAPSED/;

wxEventType wxEVT_DATAVIEW_ITEM_EXPANDING   /PyName=wxEVT_DATAVIEW_ITEM_EXPANDING/;

wxEventType wxEVT_DATAVIEW_ITEM_EXPANDED   /PyName=wxEVT_DATAVIEW_ITEM_EXPANDED/;

wxEventType wxEVT_DATAVIEW_ITEM_START_EDITING   /PyName=wxEVT_DATAVIEW_ITEM_START_EDITING/;

wxEventType wxEVT_DATAVIEW_ITEM_EDITING_STARTED   /PyName=wxEVT_DATAVIEW_ITEM_EDITING_STARTED/;

wxEventType wxEVT_DATAVIEW_ITEM_EDITING_DONE   /PyName=wxEVT_DATAVIEW_ITEM_EDITING_DONE/;

wxEventType wxEVT_DATAVIEW_ITEM_VALUE_CHANGED   /PyName=wxEVT_DATAVIEW_ITEM_VALUE_CHANGED/;

wxEventType wxEVT_DATAVIEW_ITEM_CONTEXT_MENU   /PyName=wxEVT_DATAVIEW_ITEM_CONTEXT_MENU/;

wxEventType wxEVT_DATAVIEW_COLUMN_HEADER_CLICK   /PyName=wxEVT_DATAVIEW_COLUMN_HEADER_CLICK/;

wxEventType wxEVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK   /PyName=wxEVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK/;

wxEventType wxEVT_DATAVIEW_COLUMN_SORTED   /PyName=wxEVT_DATAVIEW_COLUMN_SORTED/;

wxEventType wxEVT_DATAVIEW_COLUMN_REORDERED   /PyName=wxEVT_DATAVIEW_COLUMN_REORDERED/;

wxEventType wxEVT_DATAVIEW_CACHE_HINT   /PyName=wxEVT_DATAVIEW_CACHE_HINT/;

wxEventType wxEVT_DATAVIEW_ITEM_BEGIN_DRAG   /PyName=wxEVT_DATAVIEW_ITEM_BEGIN_DRAG/;

wxEventType wxEVT_DATAVIEW_ITEM_DROP_POSSIBLE   /PyName=wxEVT_DATAVIEW_ITEM_DROP_POSSIBLE/;

wxEventType wxEVT_DATAVIEW_ITEM_DROP   /PyName=wxEVT_DATAVIEW_ITEM_DROP/;

class wxDataViewItem
{
    %Docstring
        DataViewItem()
        DataViewItem(item)
        DataViewItem(id)
        
        wxDataViewItem is a small opaque class that represents an item in a
        wxDataViewCtrl in a persistent way, i.e.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewItem();

    wxDataViewItem(
        const wxDataViewItem & item
    );

    wxDataViewItem(
        void * id
    );

    void * GetID() const;
    %Docstring
        GetID() -> void
        
        Returns the ID.
    %End

    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if the ID is not NULL.
    %End

    int __nonzero__();
    %Docstring
        __nonzero__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataViewItem___nonzero__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxDataViewItem___nonzero__(wxDataViewItem* self)
    {
        return self->IsOk();
    }
    %End

    int __bool__();
    %Docstring
        __bool__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataViewItem___bool__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxDataViewItem___bool__(wxDataViewItem* self)
    {
        return self->IsOk();
    }
    %End

    long __hash__();
    %Docstring
        __hash__() -> long
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataViewItem___hash__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    long _wxDataViewItem___hash__(wxDataViewItem* self)
    {
        return (long)self->GetID();
    }
    %End

    bool __eq__(wxDataViewItem* other);
    %Docstring
        __eq__(other) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataViewItem___eq__(sipCpp, other);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxDataViewItem___eq__(wxDataViewItem* self, wxDataViewItem* other)
    {
        return other ? (self->GetID() == other->GetID()) : false;
    }
    %End

    bool __ne__(wxDataViewItem* other);
    %Docstring
        __ne__(other) -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataViewItem___ne__(sipCpp, other);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxDataViewItem___ne__(wxDataViewItem* self, wxDataViewItem* other)
    {
        return other ? (self->GetID() != other->GetID()) : true;
    }
    %End

    public:


    %Property(name=ID, get=GetID)
};  // end of class wxDataViewItem


class wxDataViewItemAttr
{
    %Docstring
        DataViewItemAttr()
        
        This class is used to indicate to a wxDataViewCtrl that a certain item
        (see wxDataViewItem) has extra font attributes for its renderer.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewItemAttr();

    void SetBold(
        bool set
    );
    %Docstring
        SetBold(set)
        
        Call this to indicate that the item shall be displayed in bold text.
    %End

    void SetColour(
        const wxColour & colour
    );
    %Docstring
        SetColour(colour)
        
        Call this to indicate that the item shall be displayed with that
        colour.
    %End

    void SetBackgroundColour(
        const wxColour & colour
    );
    %Docstring
        SetBackgroundColour(colour)
        
        Call this to set the background colour to use.
    %End

    void SetItalic(
        bool set
    );
    %Docstring
        SetItalic(set)
        
        Call this to indicate that the item shall be displayed in italic text.
    %End

    void SetStrikethrough(
        bool set
    );
    %Docstring
        SetStrikethrough(set)
        
        Call this to indicate that the item shall be displayed in
        strikethrough text.
    %End

    bool HasColour() const;
    %Docstring
        HasColour() -> bool
        
        Returns true if the colour property has been set.
    %End

    const wxColour & GetColour() const;
    %Docstring
        GetColour() -> wx.Colour
        
        Returns this attribute's colour.
    %End

    bool HasFont() const;
    %Docstring
        HasFont() -> bool
        
        Returns true if any property affecting the font has been set.
    %End

    bool GetBold() const;
    %Docstring
        GetBold() -> bool
        
        Returns value of the bold property.
    %End

    bool GetItalic() const;
    %Docstring
        GetItalic() -> bool
        
        Returns value of the italics property.
    %End

    bool HasBackgroundColour() const;
    %Docstring
        HasBackgroundColour() -> bool
        
        Returns true if the background colour property has been set.
    %End

    const wxColour & GetBackgroundColour() const;
    %Docstring
        GetBackgroundColour() -> wx.Colour
        
        Returns the colour to be used for the background.
    %End

    bool IsDefault() const;
    %Docstring
        IsDefault() -> bool
        
        Returns true if none of the properties have been set.
    %End

    wxFont GetEffectiveFont(
        const wxFont & font
    ) const;
    %Docstring
        GetEffectiveFont(font) -> wx.Font
        
        Return the font based on the given one with this attribute applied to
        it.
    %End

    public:


    %Property(name=BackgroundColour, get=GetBackgroundColour, set=SetBackgroundColour)
    %Property(name=Bold, get=GetBold, set=SetBold)
    %Property(name=Colour, get=GetColour, set=SetColour)
    %Property(name=Italic, get=GetItalic, set=SetItalic)
};  // end of class wxDataViewItemAttr


class wxDataViewIconText : wxObject
{
    %Docstring
        DataViewIconText(text=wx.EmptyString, icon=wx.NullIcon)
        DataViewIconText(other)
        
        wxDataViewIconText is used by wxDataViewIconTextRenderer for data
        transfer.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewIconText(
        const wxString & text = wxEmptyString,
        const wxIcon & icon = wxNullIcon
    );

    wxDataViewIconText(
        const wxDataViewIconText & other
    );

    const wxIcon & GetIcon() const;
    %Docstring
        GetIcon() -> wx.Icon
        
        Gets the icon.
    %End

    wxString GetText() const;
    %Docstring
        GetText() -> String
        
        Gets the text.
    %End

    void SetIcon(
        const wxIcon & icon
    );
    %Docstring
        SetIcon(icon)
        
        Set the icon.
    %End

    void SetText(
        const wxString & text
    );
    %Docstring
        SetText(text)
        
        Set the text.
    %End

    public:


    %Property(name=Icon, get=GetIcon, set=SetIcon)
    %Property(name=Text, get=GetText, set=SetText)
};  // end of class wxDataViewIconText


class wxDataViewModelNotifier
{
    %Docstring
        DataViewModelNotifier()
        
        A wxDataViewModelNotifier instance is owned by a wxDataViewModel and
        mirrors its notification interface.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewModelNotifier();

    virtual
    ~wxDataViewModelNotifier();

    virtual
    bool Cleared() = 0;
    %Docstring
        Cleared() -> bool
        
        Called by owning model.
    %End

    wxDataViewModel * GetOwner() const;
    %Docstring
        GetOwner() -> DataViewModel
        
        Get owning wxDataViewModel.
    %End

    virtual
    bool ItemAdded(
        const wxDataViewItem & parent,
        const wxDataViewItem & item
    ) = 0;
    %Docstring
        ItemAdded(parent, item) -> bool
        
        Called by owning model.
    %End

    virtual
    bool ItemChanged(
        const wxDataViewItem & item
    ) = 0;
    %Docstring
        ItemChanged(item) -> bool
        
        Called by owning model.
    %End

    virtual
    bool ItemDeleted(
        const wxDataViewItem & parent,
        const wxDataViewItem & item
    ) = 0;
    %Docstring
        ItemDeleted(parent, item) -> bool
        
        Called by owning model.
    %End

    virtual
    bool ItemsAdded(
        const wxDataViewItem & parent,
        const wxDataViewItemArray & items
    );
    %Docstring
        ItemsAdded(parent, items) -> bool
        
        Called by owning model.
    %End

    virtual
    bool ItemsChanged(
        const wxDataViewItemArray & items
    );
    %Docstring
        ItemsChanged(items) -> bool
        
        Called by owning model.
    %End

    virtual
    bool ItemsDeleted(
        const wxDataViewItem & parent,
        const wxDataViewItemArray & items
    );
    %Docstring
        ItemsDeleted(parent, items) -> bool
        
        Called by owning model.
    %End

    virtual
    void Resort() = 0;
    %Docstring
        Resort()
        
        Called by owning model.
    %End

    void SetOwner(
        wxDataViewModel * owner
    );
    %Docstring
        SetOwner(owner)
        
        Set owner of this notifier.
    %End

    virtual
    bool ValueChanged(
        const wxDataViewItem & item,
        unsigned int col
    ) = 0;
    %Docstring
        ValueChanged(item, col) -> bool
        
        Called by owning model.
    %End

    public:


    %Property(name=Owner, get=GetOwner, set=SetOwner)
};  // end of class wxDataViewModelNotifier


class wxDataViewModel : wxRefCounter
{
    %Docstring
        DataViewModel()
        
        wxDataViewModel is the base class for all data model to be displayed
        by a wxDataViewCtrl.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewModel()   /Transfer/;

    void AddNotifier(
        wxDataViewModelNotifier * notifier   /Transfer/
    );
    %Docstring
        AddNotifier(notifier)
        
        Adds a wxDataViewModelNotifier to the model.
    %End

    bool ChangeValue(
        const wxDVCVariant & variant,
        const wxDataViewItem & item,
        unsigned int col
    );
    %Docstring
        ChangeValue(variant, item, col) -> bool
        
        Change the value of the given item and update the control to reflect
        it.
    %End

    bool Cleared();
    %Docstring
        Cleared() -> bool
        
        Called to inform the model that all of its data has been changed.
    %End

    virtual
    int Compare(
        const wxDataViewItem & item1,
        const wxDataViewItem & item2,
        unsigned int column,
        bool ascending
    ) const;
    %Docstring
        Compare(item1, item2, column, ascending) -> int
        
        The compare function to be used by the control.
    %End

    virtual
    bool GetAttr(
        const wxDataViewItem & item,
        unsigned int col,
        wxDataViewItemAttr & attr
    ) const;
    %Docstring
        GetAttr(item, col, attr) -> bool
        
        Override this to indicate that the item has special font attributes.
    %End

    virtual
    bool IsEnabled(
        const wxDataViewItem & item,
        unsigned int col
    ) const;
    %Docstring
        IsEnabled(item, col) -> bool
        
        Override this to indicate that the item should be disabled.
    %End

    virtual
    unsigned int GetChildren(
        const wxDataViewItem & item,
        wxDataViewItemArray & children
    ) const = 0;
    %Docstring
        GetChildren(item, children) -> unsignedint
        
        Override this so the control can query the child items of an item.
    %End

    virtual
    unsigned int GetColumnCount() const = 0;
    %Docstring
        GetColumnCount() -> unsignedint
        
        Override this to indicate the number of columns in the model.
    %End

    virtual
    wxString GetColumnType(
        unsigned int col
    ) const = 0;
    %Docstring
        GetColumnType(col) -> String
        
        Override this to indicate what type of data is stored in the column
        specified by col.
    %End

    virtual
    wxDataViewItem GetParent(
        const wxDataViewItem & item
    ) const = 0;
    %Docstring
        GetParent(item) -> DataViewItem
        
        Override this to indicate which wxDataViewItem representing the parent
        of item or an invalid wxDataViewItem if the root item is the parent
        item.
    %End

    virtual
    void GetValue(
        wxDVCVariant & variant   /Out/,
        const wxDataViewItem & item,
        unsigned int col
    ) const = 0 [ void (wxVariant& variant, const wxDataViewItem& item, unsigned int col) ];
    %Docstring
        GetValue(item, col) -> variant
        
        Override this to indicate the value of item.
    %End

    virtual
    bool HasContainerColumns(
        const wxDataViewItem & item
    ) const;
    %Docstring
        HasContainerColumns(item) -> bool
        
        Override this method to indicate if a container item merely acts as a
        headline (or for categorisation) or if it also acts a normal item with
        entries for further columns.
    %End

    virtual
    bool HasDefaultCompare() const;
    %Docstring
        HasDefaultCompare() -> bool
        
        Override this to indicate that the model provides a default compare
        function that the control should use if no wxDataViewColumn has been
        chosen for sorting.
    %End

    virtual
    bool HasValue(
        const wxDataViewItem & item,
        unsigned col
    ) const;
    %Docstring
        HasValue(item, col) -> bool
        
        Return true if there is a value in the given column of this item.
    %End

    virtual
    bool IsContainer(
        const wxDataViewItem & item
    ) const = 0;
    %Docstring
        IsContainer(item) -> bool
        
        Override this to indicate of item is a container, i.e. if it can have
        child items.
    %End

    bool ItemAdded(
        const wxDataViewItem & parent,
        const wxDataViewItem & item
    );
    %Docstring
        ItemAdded(parent, item) -> bool
        
        Call this to inform the model that an item has been added to the data.
    %End

    bool ItemChanged(
        const wxDataViewItem & item
    );
    %Docstring
        ItemChanged(item) -> bool
        
        Call this to inform the model that an item has changed.
    %End

    bool ItemDeleted(
        const wxDataViewItem & parent,
        const wxDataViewItem & item
    );
    %Docstring
        ItemDeleted(parent, item) -> bool
        
        Call this to inform the model that an item has been deleted from the
        data.
    %End

    bool ItemsAdded(
        const wxDataViewItem & parent,
        const wxDataViewItemArray & items
    );
    %Docstring
        ItemsAdded(parent, items) -> bool
        
        Call this to inform the model that several items have been added to
        the data.
    %End

    bool ItemsChanged(
        const wxDataViewItemArray & items
    );
    %Docstring
        ItemsChanged(items) -> bool
        
        Call this to inform the model that several items have changed.
    %End

    bool ItemsDeleted(
        const wxDataViewItem & parent,
        const wxDataViewItemArray & items
    );
    %Docstring
        ItemsDeleted(parent, items) -> bool
        
        Call this to inform the model that several items have been deleted.
    %End

    void RemoveNotifier(
        wxDataViewModelNotifier * notifier   /TransferBack/
    );
    %Docstring
        RemoveNotifier(notifier)
        
        Remove the notifier from the list of notifiers.
    %End

    virtual
    void Resort();
    %Docstring
        Resort()
        
        Call this to initiate a resort after the sort function has been
        changed.
    %End

    virtual
    bool SetValue(
        const wxDVCVariant & variant,
        const wxDataViewItem & item,
        unsigned int col
    ) = 0;
    %Docstring
        SetValue(variant, item, col) -> bool
        
        This gets called in order to set a value in the data model.
    %End

    bool ValueChanged(
        const wxDataViewItem & item,
        unsigned int col
    );
    %Docstring
        ValueChanged(item, col) -> bool
        
        Call this to inform this model that a value in the model has been
        changed.
    %End

    virtual
    bool IsListModel() const;
    %Docstring
        IsListModel() -> bool
    %End

    virtual
    bool IsVirtualListModel() const;
    %Docstring
        IsVirtualListModel() -> bool
    %End

    public:


    %Property(name=ColumnCount, get=GetColumnCount)

protected:
    virtual
    ~wxDataViewModel();

};  // end of class wxDataViewModel


class wxDataViewListModel : wxDataViewModel
{
    %Docstring
        Base class with abstract API for wxDataViewIndexListModel and
        wxDataViewVirtualListModel.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    virtual
    ~wxDataViewListModel();

    virtual
    int Compare(
        const wxDataViewItem & item1,
        const wxDataViewItem & item2,
        unsigned int column,
        bool ascending
    ) const;
    %Docstring
        Compare(item1, item2, column, ascending) -> int
        
        Compare method that sorts the items by their index.
    %End

    virtual
    bool GetAttrByRow(
        unsigned int row,
        unsigned int col,
        wxDataViewItemAttr & attr
    ) const;
    %Docstring
        GetAttrByRow(row, col, attr) -> bool
        
        Override this to indicate that the row has special font attributes.
    %End

    virtual
    bool IsEnabledByRow(
        unsigned int row,
        unsigned int col
    ) const;
    %Docstring
        IsEnabledByRow(row, col) -> bool
        
        Override this if you want to disable specific items.
    %End

    virtual
    unsigned int GetCount() const = 0;
    %Docstring
        GetCount() -> unsignedint
        
        Returns the number of items (or rows) in the list.
    %End

    virtual
    unsigned int GetRow(
        const wxDataViewItem & item
    ) const = 0;
    %Docstring
        GetRow(item) -> unsignedint
        
        Returns the position of given item.
    %End

    virtual
    void GetValueByRow(
        wxDVCVariant & variant   /Out/,
        unsigned int row,
        unsigned int col
    ) const = 0 [ void (wxVariant& variant, unsigned int row, unsigned int col) ];
    %Docstring
        GetValueByRow(row, col) -> variant
        
        Override this to allow getting values from the model.
    %End

    virtual
    bool SetValueByRow(
        const wxDVCVariant & variant,
        unsigned int row,
        unsigned int col
    ) = 0;
    %Docstring
        SetValueByRow(variant, row, col) -> bool
        
        Called in order to set a value in the model.
    %End

    public:


    %Property(name=Count, get=GetCount)
            virtual wxDataViewItem GetParent( const wxDataViewItem &item ) const;
            virtual bool IsContainer( const wxDataViewItem &item ) const;
            virtual void GetValue( wxDVCVariant &variant /Out/, const wxDataViewItem &item, unsigned int col ) const [void ( wxDVCVariant &variant, const wxDataViewItem &item, unsigned int col )];
            virtual bool SetValue( const wxDVCVariant &variant, const wxDataViewItem &item, unsigned int col );
            virtual bool GetAttr(const wxDataViewItem &item, unsigned int col, wxDataViewItemAttr &attr) const;
            virtual bool IsEnabled(const wxDataViewItem &item, unsigned int col) const;
            virtual bool IsListModel() const;


};  // end of class wxDataViewListModel


class wxDataViewIndexListModel : wxDataViewListModel
{
    %Docstring
        DataViewIndexListModel(initial_size=0)
        
        wxDataViewIndexListModel is a specialized data model which lets you
        address an item by its position (row) rather than its wxDataViewItem
        (which you can obtain from this class).
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewIndexListModel(
        unsigned int initial_size = 0
    );

    wxDataViewItem GetItem(
        unsigned int row
    ) const;
    %Docstring
        GetItem(row) -> DataViewItem
        
        Returns the wxDataViewItem at the given row.
    %End

    void Reset(
        unsigned int new_size
    );
    %Docstring
        Reset(new_size)
        
        Call this after if the data has to be read again from the model.
    %End

    void RowAppended();
    %Docstring
        RowAppended()
        
        Call this after a row has been appended to the model.
    %End

    void RowChanged(
        unsigned int row
    );
    %Docstring
        RowChanged(row)
        
        Call this after a row has been changed.
    %End

    void RowDeleted(
        unsigned int row
    );
    %Docstring
        RowDeleted(row)
        
        Call this after a row has been deleted.
    %End

    void RowInserted(
        unsigned int before
    );
    %Docstring
        RowInserted(before)
        
        Call this after a row has been inserted at the given position.
    %End

    void RowPrepended();
    %Docstring
        RowPrepended()
        
        Call this after a row has been prepended to the model.
    %End

    void RowValueChanged(
        unsigned int row,
        unsigned int col
    );
    %Docstring
        RowValueChanged(row, col)
        
        Call this after a value has been changed.
    %End

    void RowsDeleted(
        const wxArrayInt & rows
    );
    %Docstring
        RowsDeleted(rows)
        
        Call this after rows have been deleted.
    %End

                virtual unsigned int GetRow(const wxDataViewItem& item) const;
                virtual unsigned int GetCount() const;
                virtual unsigned int GetChildren( const wxDataViewItem &item, wxDataViewItemArray &children ) const;


};  // end of class wxDataViewIndexListModel


class wxDataViewVirtualListModel : wxDataViewListModel
{
    %Docstring
        DataViewVirtualListModel(initial_size=0)
        
        wxDataViewVirtualListModel is a specialized data model which lets you
        address an item by its position (row) rather than its wxDataViewItem
        and as such offers the exact same interface as
        wxDataViewIndexListModel.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewVirtualListModel(
        unsigned int initial_size = 0
    );

    wxDataViewItem GetItem(
        unsigned int row
    ) const;
    %Docstring
        GetItem(row) -> DataViewItem
        
        Returns the wxDataViewItem at the given row.
    %End

    void Reset(
        unsigned int new_size
    );
    %Docstring
        Reset(new_size)
        
        Call this after if the data has to be read again from the model.
    %End

    void RowAppended();
    %Docstring
        RowAppended()
        
        Call this after a row has been appended to the model.
    %End

    void RowChanged(
        unsigned int row
    );
    %Docstring
        RowChanged(row)
        
        Call this after a row has been changed.
    %End

    void RowDeleted(
        unsigned int row
    );
    %Docstring
        RowDeleted(row)
        
        Call this after a row has been deleted.
    %End

    void RowInserted(
        unsigned int before
    );
    %Docstring
        RowInserted(before)
        
        Call this after a row has been inserted at the given position.
    %End

    void RowPrepended();
    %Docstring
        RowPrepended()
        
        Call this after a row has been prepended to the model.
    %End

    void RowValueChanged(
        unsigned int row,
        unsigned int col
    );
    %Docstring
        RowValueChanged(row, col)
        
        Call this after a value has been changed.
    %End

    void RowsDeleted(
        const wxArrayInt & rows
    );
    %Docstring
        RowsDeleted(rows)
        
        Call this after rows have been deleted.
    %End

                virtual unsigned int GetRow(const wxDataViewItem& item) const;
                virtual unsigned int GetCount() const;
                virtual unsigned int GetChildren( const wxDataViewItem &item, wxDataViewItemArray &children ) const;


};  // end of class wxDataViewVirtualListModel


class wxDataViewRenderer : wxObject   /Abstract/
{
    %Docstring
        DataViewRenderer(varianttype, mode=DATAVIEW_CELL_INERT, align=DVR_DEFAULT_ALIGNMENT)
        
        This class is used by wxDataViewCtrl to render the individual cells.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewRenderer(
        const wxString & varianttype,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int align = wxDVR_DEFAULT_ALIGNMENT
    );

    void EnableEllipsize(
        wxEllipsizeMode mode = wxELLIPSIZE_MIDDLE
    );
    %Docstring
        EnableEllipsize(mode=wx.ELLIPSIZE_MIDDLE)
        
        Enable or disable replacing parts of the item text with ellipsis to
        make it fit the column width.
    %End

    void DisableEllipsize();
    %Docstring
        DisableEllipsize()
        
        Disable replacing parts of the item text with ellipsis.
    %End

    virtual
    int GetAlignment() const;
    %Docstring
        GetAlignment() -> int
        
        Returns the alignment.
    %End

    wxEllipsizeMode GetEllipsizeMode() const;
    %Docstring
        GetEllipsizeMode() -> EllipsizeMode
        
        Returns the ellipsize mode used by the renderer.
    %End

    virtual
    wxDataViewCellMode GetMode() const;
    %Docstring
        GetMode() -> DataViewCellMode
        
        Returns the cell mode.
    %End

    wxDataViewColumn * GetOwner() const;
    %Docstring
        GetOwner() -> DataViewColumn
        
        Returns pointer to the owning wxDataViewColumn.
    %End

    virtual
    void GetValue(
        wxDVCVariant& value   /Out/
    ) const = 0 [ bool (wxVariant& value) ];
    %Docstring
        GetValue() -> value
        
        This methods retrieves the value from the renderer in order to
        transfer the value back to the data model.
    %End

    wxString GetVariantType() const;
    %Docstring
        GetVariantType() -> String
        
        Returns a string with the type of the wxVariant supported by this
        renderer.
    %End

    virtual
    void SetAlignment(
        int align
    );
    %Docstring
        SetAlignment(align)
        
        Sets the alignment of the renderer's content.
    %End

    void SetOwner(
        wxDataViewColumn * owner
    );
    %Docstring
        SetOwner(owner)
        
        Sets the owning wxDataViewColumn.
    %End

    virtual
    bool SetValue(
        const wxDVCVariant& value
    ) = 0 [ bool (const wxVariant& value) ];
    %Docstring
        SetValue(value) -> bool
        
        Set the value of the renderer (and thus its cell) to value.
    %End

    void SetValueAdjuster(
        wxDataViewValueAdjuster * transformer
    );
    %Docstring
        SetValueAdjuster(transformer)
        
        Set the transformer object to be used to customize values before they
        are rendered.
    %End

    virtual
    bool Validate(
        wxDVCVariant & value
    );
    %Docstring
        Validate(value) -> bool
        
        Before data is committed to the data model, it is passed to this
        method where it can be checked for validity.
    %End

    virtual
    bool HasEditorCtrl() const;
    %Docstring
        HasEditorCtrl() -> bool
    %End

    virtual
    wxWindow * CreateEditorCtrl(
        wxWindow * parent,
        wxRect labelRect,
        const wxDVCVariant & value
    ) [ wxWindow* (wxWindow * parent, wxRect labelRect, const wxVariant& value) ];
    %Docstring
        CreateEditorCtrl(parent, labelRect, value) -> wx.Window
    %End

    virtual
    void GetValueFromEditorCtrl(
        wxWindow * editor,
        wxDVCVariant& value   /Out/
    ) [ bool (wxWindow * editor, wxVariant& value) ];
    %Docstring
        GetValueFromEditorCtrl(editor) -> value
    %End

    virtual
    bool StartEditing(
        const wxDataViewItem & item,
        wxRect labelRect
    );
    %Docstring
        StartEditing(item, labelRect) -> bool
    %End

    virtual
    void CancelEditing();
    %Docstring
        CancelEditing()
    %End

    virtual
    bool FinishEditing();
    %Docstring
        FinishEditing() -> bool
    %End

    wxWindow * GetEditorCtrl();
    %Docstring
        GetEditorCtrl() -> wx.Window
    %End

    private:
        wxDataViewRenderer(const wxDataViewRenderer&);


    public:


    %Property(name=Alignment, get=GetAlignment, set=SetAlignment)
    %Property(name=EditorCtrl, get=GetEditorCtrl)
    %Property(name=EllipsizeMode, get=GetEllipsizeMode)
    %Property(name=Mode, get=GetMode)
    %Property(name=Owner, get=GetOwner, set=SetOwner)
    %Property(name=VariantType, get=GetVariantType)
    %Property(name=View, get=GetView)

protected:
    wxDataViewCtrl * GetView() const;
    %Docstring
        GetView() -> DataViewCtrl
    %End

};  // end of class wxDataViewRenderer


class wxDataViewCustomRenderer : wxDataViewRenderer
{
    %Docstring
        DataViewCustomRenderer(varianttype=DataViewCustomRenderer.GetDefaultType(), mode=DATAVIEW_CELL_INERT, align=DVR_DEFAULT_ALIGNMENT)
        
        You need to derive a new class from wxDataViewCustomRenderer in order
        to write a new renderer.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewCustomRenderer(
        const wxString & varianttype = wxDataViewCustomRenderer::GetDefaultType(),
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int align = wxDVR_DEFAULT_ALIGNMENT
    );

    virtual
    ~wxDataViewCustomRenderer();

    static
    wxString GetDefaultType();
    %Docstring
        GetDefaultType() -> String
        
        Returns the wxVariant type used with this renderer.
    %End

    virtual
    bool ActivateCell(
        const wxRect & cell,
        wxDataViewModel * model,
        const wxDataViewItem & item,
        unsigned int col,
        const wxMouseEvent * mouseEvent
    );
    %Docstring
        ActivateCell(cell, model, item, col, mouseEvent) -> bool
        
        Override this to react to cell activation.
    %End

    virtual
    wxWindow * CreateEditorCtrl(
        wxWindow * parent,
        wxRect labelRect,
        const wxDVCVariant & value
    ) [ wxWindow* (wxWindow * parent, wxRect labelRect, const wxVariant& value) ];
    %Docstring
        CreateEditorCtrl(parent, labelRect, value) -> wx.Window
        
        Override this to create the actual editor control once editing is
        about to start.
    %End

    const wxDataViewItemAttr & GetAttr() const;
    %Docstring
        GetAttr() -> DataViewItemAttr
        
        Return the attribute to be used for rendering.
    %End

    virtual
    wxSize GetSize() const = 0;
    %Docstring
        GetSize() -> wx.Size
        
        Return size required to show content.
    %End

    virtual
    void GetValueFromEditorCtrl(
        wxWindow * editor,
        wxDVCVariant& value   /Out/
    ) [ bool (wxWindow * editor, wxVariant& value) ];
    %Docstring
        GetValueFromEditorCtrl(editor) -> value
        
        Override this so that the renderer can get the value from the editor
        control (pointed to by editor):
    %End
    %VirtualCatcherCode
        PyObject *sipResObj = sipCallMethod(&sipIsErr, sipMethod, "D", editor, sipType_wxWindow, NULL);
        if (sipResObj == NULL) {
            if (PyErr_Occurred())
                PyErr_Print();
            sipRes = false;
        }
        else if (sipResObj == Py_None) {
            sipRes = false;
        } else {
            sipRes = true;
            sipParseResult(&sipIsErr, sipMethod, sipResObj, "H5", sipType_wxDVCVariant, &value);
        }
    %End

    virtual
    bool HasEditorCtrl() const;
    %Docstring
        HasEditorCtrl() -> bool
        
        Override this and make it return true in order to indicate that this
        renderer supports in-place editing.
    %End

    virtual
    bool LeftClick(
        wxPoint cursor,
        wxRect cell,
        wxDataViewModel * model,
        const wxDataViewItem & item,
        unsigned int col
    )   /Deprecated/;
    %Docstring
        LeftClick(cursor, cell, model, item, col) -> bool
        
        Override this to react to a left click.
    %End

    virtual
    bool Activate(
        wxRect cell,
        wxDataViewModel * model,
        const wxDataViewItem & item,
        unsigned int col
    )   /Deprecated/;
    %Docstring
        Activate(cell, model, item, col) -> bool
        
        Override this to react to the activation of a cell.
    %End

    virtual
    bool Render(
        wxRect cell,
        wxDC * dc,
        int state
    ) = 0;
    %Docstring
        Render(cell, dc, state) -> bool
        
        Override this to render the cell.
    %End

    void RenderText(
        const wxString & text,
        int xoffset,
        wxRect cell,
        wxDC * dc,
        int state
    );
    %Docstring
        RenderText(text, xoffset, cell, dc, state)
        
        This method should be called from within Render() whenever you need to
        render simple text.
    %End

    virtual
    bool StartDrag(
        const wxPoint & cursor,
        const wxRect & cell,
        wxDataViewModel * model,
        const wxDataViewItem & item,
        unsigned int col
    );
    %Docstring
        StartDrag(cursor, cell, model, item, col) -> bool
        
        Override this to start a drag operation.
    %End

    public:


    %Property(name=Attr, get=GetAttr)
    %Property(name=Size, get=GetSize)

protected:
    wxSize GetTextExtent(
        const wxString & str
    ) const;
    %Docstring
        GetTextExtent(str) -> wx.Size
        
        Helper for GetSize() implementations, respects attributes.
    %End

};  // end of class wxDataViewCustomRenderer


class wxDataViewTextRenderer : wxDataViewRenderer
{
    %Docstring
        DataViewTextRenderer(varianttype=DataViewTextRenderer.GetDefaultType(), mode=DATAVIEW_CELL_INERT, align=DVR_DEFAULT_ALIGNMENT)
        
        wxDataViewTextRenderer is used for rendering text.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewTextRenderer(
        const wxString & varianttype = wxDataViewTextRenderer::GetDefaultType(),
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int align = wxDVR_DEFAULT_ALIGNMENT
    );

    static
    wxString GetDefaultType();
    %Docstring
        GetDefaultType() -> String
        
        Returns the wxVariant type used with this renderer.
    %End

    void EnableMarkup(
        bool enable = true
    );
    %Docstring
        EnableMarkup(enable=True)
        
        Enable interpretation of markup in the item data.
    %End

                virtual bool SetValue( const wxDVCVariant &value ) [bool (const wxVariant& value)];
                virtual void GetValue( wxDVCVariant &value /Out/ ) const [bool (wxVariant& value)];
                %Property(name=Value, get=GetValue, set=SetValue)


};  // end of class wxDataViewTextRenderer


class wxDataViewIconTextRenderer : wxDataViewRenderer
{
    %Docstring
        DataViewIconTextRenderer(varianttype=DataViewIconTextRenderer.GetDefaultType(), mode=DATAVIEW_CELL_INERT, align=DVR_DEFAULT_ALIGNMENT)
        
        The wxDataViewIconTextRenderer class is used to display text with a
        small icon next to it as it is typically done in a file manager.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewIconTextRenderer(
        const wxString & varianttype = wxDataViewIconTextRenderer::GetDefaultType(),
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int align = wxDVR_DEFAULT_ALIGNMENT
    );

    static
    wxString GetDefaultType();
    %Docstring
        GetDefaultType() -> String
        
        Returns the wxVariant type used with this renderer.
    %End

                virtual bool SetValue( const wxDVCVariant &value ) [bool (const wxVariant& value)];
                virtual void GetValue( wxDVCVariant &value /Out/ ) const [bool (wxVariant& value)];
                %Property(name=Value, get=GetValue, set=SetValue)


};  // end of class wxDataViewIconTextRenderer


class wxDataViewCheckIconTextRenderer : wxDataViewRenderer
{
    %Docstring
        DataViewCheckIconTextRenderer(mode=DATAVIEW_CELL_ACTIVATABLE, align=DVR_DEFAULT_ALIGNMENT)
        
        This renderer class shows a checkbox in addition to the icon and text
        shown by the base class and also allows the user to toggle this
        checkbox.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewCheckIconTextRenderer(
        wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE,
        int align = wxDVR_DEFAULT_ALIGNMENT
    );

    static
    wxString GetDefaultType();
    %Docstring
        GetDefaultType() -> String
    %End

    void Allow3rdStateForUser(
        bool allow = true
    );
    %Docstring
        Allow3rdStateForUser(allow=True)
        
        Allow the user to interactively select the 3rd state for the items
        rendered by this object.
    %End

};  // end of class wxDataViewCheckIconTextRenderer


class wxDataViewProgressRenderer : wxDataViewRenderer
{
    %Docstring
        DataViewProgressRenderer(label=wx.EmptyString, varianttype=DataViewProgressRenderer.GetDefaultType(), mode=DATAVIEW_CELL_INERT, align=DVR_DEFAULT_ALIGNMENT)
        
        This class is used by wxDataViewCtrl to render progress bars.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewProgressRenderer(
        const wxString & label = wxEmptyString,
        const wxString & varianttype = wxDataViewProgressRenderer::GetDefaultType(),
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int align = wxDVR_DEFAULT_ALIGNMENT
    );

    static
    wxString GetDefaultType();
    %Docstring
        GetDefaultType() -> String
        
        Returns the wxVariant type used with this renderer.
    %End

                virtual bool SetValue( const wxDVCVariant &value ) [bool (const wxVariant& value)];
                virtual void GetValue( wxDVCVariant &value /Out/ ) const [bool (wxVariant& value)];
                %Property(name=Value, get=GetValue, set=SetValue)


};  // end of class wxDataViewProgressRenderer


class wxDataViewSpinRenderer : wxDataViewCustomRenderer
{
    %Docstring
        DataViewSpinRenderer(min, max, mode=DATAVIEW_CELL_EDITABLE, align=DVR_DEFAULT_ALIGNMENT)
        
        This is a specialized renderer for rendering integer values.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewSpinRenderer(
        int min,
        int max,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_EDITABLE,
        int align = wxDVR_DEFAULT_ALIGNMENT
    );

                virtual bool SetValue( const wxDVCVariant &value ) [bool (const wxVariant& value)];
                virtual void GetValue( wxDVCVariant &value /Out/ ) const [bool (wxVariant& value)];
                %Property(name=Value, get=GetValue, set=SetValue)


            virtual wxSize GetSize() const;
            virtual bool Render(wxRect cell, wxDC* dc, int state);


};  // end of class wxDataViewSpinRenderer


class wxDataViewToggleRenderer : wxDataViewRenderer
{
    %Docstring
        DataViewToggleRenderer(varianttype=DataViewToggleRenderer.GetDefaultType(), mode=DATAVIEW_CELL_INERT, align=DVR_DEFAULT_ALIGNMENT)
        
        This class is used by wxDataViewCtrl to render toggle controls.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewToggleRenderer(
        const wxString & varianttype = wxDataViewToggleRenderer::GetDefaultType(),
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int align = wxDVR_DEFAULT_ALIGNMENT
    );

    static
    wxString GetDefaultType();
    %Docstring
        GetDefaultType() -> String
        
        Returns the wxVariant type used with this renderer.
    %End

    void ShowAsRadio();
    %Docstring
        ShowAsRadio()
        
        Switch to using radiobutton-like appearance instead of the default
        checkbox-like one.
    %End

                virtual bool SetValue( const wxDVCVariant &value ) [bool (const wxVariant& value)];
                virtual void GetValue( wxDVCVariant &value /Out/ ) const [bool (wxVariant& value)];
                %Property(name=Value, get=GetValue, set=SetValue)


};  // end of class wxDataViewToggleRenderer


class wxDataViewChoiceRenderer : wxDataViewRenderer
{
    %Docstring
        DataViewChoiceRenderer(choices, mode=DATAVIEW_CELL_EDITABLE, alignment=DVR_DEFAULT_ALIGNMENT)
        
        A wxDataViewCtrl renderer using wxChoice control and values of strings
        in it.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewChoiceRenderer(
        const wxArrayString & choices,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_EDITABLE,
        int alignment = wxDVR_DEFAULT_ALIGNMENT
    );

    wxString GetChoice(
        size_t index
    ) const;
    %Docstring
        GetChoice(index) -> String
        
        Returns the choice referred to by index.
    %End

    const wxArrayString & GetChoices() const;
    %Docstring
        GetChoices() -> ArrayString
        
        Returns all choices.
    %End

    public:


    %Property(name=Choices, get=GetChoices)
                virtual bool SetValue( const wxDVCVariant &value ) [bool (const wxVariant& value)];
                virtual void GetValue( wxDVCVariant &value /Out/ ) const [bool (wxVariant& value)];
                %Property(name=Value, get=GetValue, set=SetValue)


};  // end of class wxDataViewChoiceRenderer


class wxDataViewDateRenderer : wxDataViewRenderer
{
    %Docstring
        DataViewDateRenderer(varianttype=DataViewDateRenderer.GetDefaultType(), mode=DATAVIEW_CELL_ACTIVATABLE, align=DVR_DEFAULT_ALIGNMENT)
        
        This class is used by wxDataViewCtrl to render calendar controls.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewDateRenderer(
        const wxString & varianttype = wxDataViewDateRenderer::GetDefaultType(),
        wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE,
        int align = wxDVR_DEFAULT_ALIGNMENT
    );

    static
    wxString GetDefaultType();
    %Docstring
        GetDefaultType() -> String
        
        Returns the wxVariant type used with this renderer.
    %End

                virtual bool SetValue( const wxDVCVariant &value ) [bool (const wxVariant& value)];
                virtual void GetValue( wxDVCVariant &value /Out/ ) const [bool (wxVariant& value)];
                %Property(name=Value, get=GetValue, set=SetValue)


};  // end of class wxDataViewDateRenderer


class wxDataViewBitmapRenderer : wxDataViewRenderer
{
    %Docstring
        DataViewBitmapRenderer(varianttype=DataViewBitmapRenderer.GetDefaultType(), mode=DATAVIEW_CELL_INERT, align=DVR_DEFAULT_ALIGNMENT)
        
        This class is used by wxDataViewCtrl to render bitmap controls.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewBitmapRenderer(
        const wxString & varianttype = wxDataViewBitmapRenderer::GetDefaultType(),
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int align = wxDVR_DEFAULT_ALIGNMENT
    );

    static
    wxString GetDefaultType();
    %Docstring
        GetDefaultType() -> String
        
        Returns the wxVariant type used with this renderer.
    %End

                virtual bool SetValue( const wxDVCVariant &value ) [bool (const wxVariant& value)];
                virtual void GetValue( wxDVCVariant &value /Out/ ) const [bool (wxVariant& value)];
                %Property(name=Value, get=GetValue, set=SetValue)


};  // end of class wxDataViewBitmapRenderer


class wxDataViewColumn : wxSettableHeaderColumn
{
    %Docstring
        DataViewColumn(title, renderer, model_column, width=DVC_DEFAULT_WIDTH, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE)
        DataViewColumn(bitmap, renderer, model_column, width=DVC_DEFAULT_WIDTH, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE)
        
        This class represents a column in a wxDataViewCtrl.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewColumn(
        const wxString & title,
        wxDataViewRenderer * renderer   /Transfer/,
        unsigned int model_column,
        int width = wxDVC_DEFAULT_WIDTH,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    wxDataViewColumn(
        const wxBitmap & bitmap,
        wxDataViewRenderer * renderer   /Transfer/,
        unsigned int model_column,
        int width = wxDVC_DEFAULT_WIDTH,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    unsigned int GetModelColumn() const;
    %Docstring
        GetModelColumn() -> unsignedint
        
        Returns the index of the column of the model, which this
        wxDataViewColumn is displaying.
    %End

    wxDataViewCtrl * GetOwner() const;
    %Docstring
        GetOwner() -> DataViewCtrl
        
        Returns the owning wxDataViewCtrl.
    %End

    wxDataViewRenderer * GetRenderer() const;
    %Docstring
        GetRenderer() -> DataViewRenderer
        
        Returns the renderer of this wxDataViewColumn.
    %End

            virtual void SetTitle(const wxString& title);
            virtual wxString GetTitle() const;
            virtual void SetBitmap(const wxBitmap& bitmap);
            virtual wxBitmap GetBitmap() const;
            virtual void SetWidth(int width);
            virtual int GetWidth() const;
            virtual void SetMinWidth(int minWidth);
            virtual int GetMinWidth() const;
            virtual void SetAlignment(wxAlignment align);
            virtual wxAlignment GetAlignment() const;
            virtual void SetFlags(int flags);
            virtual int GetFlags() const;
            virtual bool IsSortKey() const;
            virtual void SetSortOrder(bool ascending);
            virtual bool IsSortOrderAscending() const;
    
            virtual void SetResizeable(bool resizable);
            virtual void SetSortable(bool sortable);
            virtual void SetReorderable(bool reorderable);
            virtual void SetHidden(bool hidden);


    public:


    %Property(name=ModelColumn, get=GetModelColumn)
    %Property(name=Owner, get=GetOwner)
    %Property(name=Renderer, get=GetRenderer)
    %Property(name=Title, get=GetTitle, set=SetTitle)
    %Property(name=Bitmap, get=GetBitmap, set=SetBitmap)
    %Property(name=Width, get=GetWidth, set=SetWidth)
    %Property(name=MinWidth, get=GetMinWidth, set=SetMinWidth)
    %Property(name=Alignment, get=GetAlignment, set=SetAlignment)
    %Property(name=Flags, get=GetFlags, set=SetFlags)
    %Property(name=SortOrder, get=IsSortOrderAscending, set=SetSortOrder)
};  // end of class wxDataViewColumn


const char* wxDataViewCtrlNameStr;

class wxDataViewCtrl : wxControl
{
    %Docstring
        DataViewCtrl()
        DataViewCtrl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, validator=wx.DefaultValidator, name=DataViewCtrlNameStr)
        
        wxDataViewCtrl is a control to display data either in a tree like
        fashion or in a tabular form or both.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxDataViewCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxDataViewCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxDataViewCtrl();

    wxDataViewColumn * AppendBitmapColumn(
        const wxString & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        AppendBitmapColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        AppendBitmapColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Appends a column for rendering a bitmap.
    %End

    wxDataViewColumn * AppendBitmapColumn(
        const wxBitmap & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    wxDataViewColumn * PrependBitmapColumn(
        const wxString & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        PrependBitmapColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        PrependBitmapColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Prepends a column for rendering a bitmap.
    %End

    wxDataViewColumn * PrependBitmapColumn(
        const wxBitmap & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    wxDataViewColumn * AppendDateColumn(
        const wxString & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE,
        int width = -1,
        wxAlignment align = wxALIGN_NOT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        AppendDateColumn(label, model_column, mode=DATAVIEW_CELL_ACTIVATABLE, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        AppendDateColumn(label, model_column, mode=DATAVIEW_CELL_ACTIVATABLE, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Appends a column for rendering a date.
    %End

    wxDataViewColumn * AppendDateColumn(
        const wxBitmap & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE,
        int width = -1,
        wxAlignment align = wxALIGN_NOT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    wxDataViewColumn * PrependDateColumn(
        const wxString & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE,
        int width = -1,
        wxAlignment align = wxALIGN_NOT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        PrependDateColumn(label, model_column, mode=DATAVIEW_CELL_ACTIVATABLE, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        PrependDateColumn(label, model_column, mode=DATAVIEW_CELL_ACTIVATABLE, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Prepends a column for rendering a date.
    %End

    wxDataViewColumn * PrependDateColumn(
        const wxBitmap & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE,
        int width = -1,
        wxAlignment align = wxALIGN_NOT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    wxDataViewColumn * AppendIconTextColumn(
        const wxString & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_NOT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        AppendIconTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        AppendIconTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Appends a column for rendering text with an icon.
    %End

    wxDataViewColumn * AppendIconTextColumn(
        const wxBitmap & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_NOT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    wxDataViewColumn * PrependIconTextColumn(
        const wxString & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_NOT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        PrependIconTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        PrependIconTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Prepends a column for rendering text with an icon.
    %End

    wxDataViewColumn * PrependIconTextColumn(
        const wxBitmap & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_NOT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    wxDataViewColumn * AppendProgressColumn(
        const wxString & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = 80,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        AppendProgressColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=80, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        AppendProgressColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=80, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Appends a column for rendering a progress indicator.
    %End

    wxDataViewColumn * AppendProgressColumn(
        const wxBitmap & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = 80,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    wxDataViewColumn * PrependProgressColumn(
        const wxString & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = 80,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        PrependProgressColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=80, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        PrependProgressColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=80, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Prepends a column for rendering a progress indicator.
    %End

    wxDataViewColumn * PrependProgressColumn(
        const wxBitmap & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = 80,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    wxDataViewColumn * AppendTextColumn(
        const wxString & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_NOT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        AppendTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        AppendTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Appends a column for rendering text.
    %End

    wxDataViewColumn * AppendTextColumn(
        const wxBitmap & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_NOT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    wxDataViewColumn * PrependTextColumn(
        const wxString & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_NOT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        PrependTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        PrependTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Prepends a column for rendering text.
    %End

    wxDataViewColumn * PrependTextColumn(
        const wxBitmap & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_NOT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    wxDataViewColumn * AppendToggleColumn(
        const wxString & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = 30,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        AppendToggleColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=30, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        AppendToggleColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=30, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Appends a column for rendering a toggle.
    %End

    wxDataViewColumn * AppendToggleColumn(
        const wxBitmap & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = 30,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    wxDataViewColumn * PrependToggleColumn(
        const wxString & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = 30,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        PrependToggleColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=30, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        PrependToggleColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=30, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Prepends a column for rendering a toggle.
    %End

    wxDataViewColumn * PrependToggleColumn(
        const wxBitmap & label,
        unsigned int model_column,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = 30,
        wxAlignment align = wxALIGN_CENTER,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );

    bool AllowMultiColumnSort(
        bool allow
    );
    %Docstring
        AllowMultiColumnSort(allow) -> bool
        
        Call to allow using multiple columns for sorting.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxDataViewCtrlNameStr
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, validator=wx.DefaultValidator, name=DataViewCtrlNameStr) -> bool
        
        Create the control.
    %End

    bool AppendColumn(
        wxDataViewColumn * col   /Transfer/
    );
    %Docstring
        AppendColumn(col) -> bool
        
        Appends a wxDataViewColumn to the control.
    %End

    bool PrependColumn(
        wxDataViewColumn * col   /Transfer/
    );
    %Docstring
        PrependColumn(col) -> bool
        
        Prepends a wxDataViewColumn to the control.
    %End

    bool InsertColumn(
        unsigned int pos,
        wxDataViewColumn * col   /Transfer/
    );
    %Docstring
        InsertColumn(pos, col) -> bool
        
        Inserts a wxDataViewColumn to the control.
    %End

    bool AssociateModel(
        wxDataViewModel * model   /Transfer/
    )   /PyName=_AssociateModel/;
    %Docstring
        _AssociateModel(model) -> bool
        
        Associates a wxDataViewModel with the control.
    %End

    bool ClearColumns();
    %Docstring
        ClearColumns() -> bool
        
        Removes all columns.
    %End

    void Collapse(
        const wxDataViewItem & item
    );
    %Docstring
        Collapse(item)
        
        Collapses the item.
    %End

    bool DeleteColumn(
        wxDataViewColumn * column
    );
    %Docstring
        DeleteColumn(column) -> bool
        
        Deletes given column.
    %End

    void EditItem(
        const wxDataViewItem & item,
        const wxDataViewColumn * column
    );
    %Docstring
        EditItem(item, column)
        
        Programmatically starts editing given cell of item.
    %End

    bool EnableDragSource(
        const wxDataFormat & format
    );
    %Docstring
        EnableDragSource(format) -> bool
        
        Enable drag operations using the given format.
    %End

    bool EnableDropTarget(
        const wxDataFormat & format
    );
    %Docstring
        EnableDropTarget(format) -> bool
        
        Enable drop operations using the given format.
    %End

    void EnsureVisible(
        const wxDataViewItem & item,
        const wxDataViewColumn * column = NULL
    );
    %Docstring
        EnsureVisible(item, column=None)
        
        Call this to ensure that the given item is visible.
    %End

    void Expand(
        const wxDataViewItem & item
    );
    %Docstring
        Expand(item)
        
        Expands the item.
    %End

    void ExpandAncestors(
        const wxDataViewItem & item
    );
    %Docstring
        ExpandAncestors(item)
        
        Expands all ancestors of the item.
    %End

    wxDataViewColumn * GetColumn(
        unsigned int pos
    ) const;
    %Docstring
        GetColumn(pos) -> DataViewColumn
        
        Returns pointer to the column.
    %End

    unsigned int GetColumnCount() const;
    %Docstring
        GetColumnCount() -> unsignedint
        
        Returns the number of columns.
    %End

    int GetColumnPosition(
        const wxDataViewColumn * column
    ) const;
    %Docstring
        GetColumnPosition(column) -> int
        
        Returns the position of the column or -1 if not found in the control.
    %End

    wxDataViewColumn * GetExpanderColumn() const;
    %Docstring
        GetExpanderColumn() -> DataViewColumn
        
        Returns column containing the expanders.
    %End

    wxDataViewItem GetCurrentItem() const;
    %Docstring
        GetCurrentItem() -> DataViewItem
        
        Returns the currently focused item.
    %End

    wxDataViewColumn * GetCurrentColumn() const;
    %Docstring
        GetCurrentColumn() -> DataViewColumn
        
        Returns the column that currently has focus.
    %End

    int GetIndent() const;
    %Docstring
        GetIndent() -> int
        
        Returns indentation.
    %End

    wxRect GetItemRect(
        const wxDataViewItem & item,
        const wxDataViewColumn * col = NULL
    ) const;
    %Docstring
        GetItemRect(item, col=None) -> wx.Rect
        
        Returns item rectangle.
    %End

    wxWindow * GetMainWindow();
    %Docstring
        GetMainWindow() -> wx.Window
        
        Returns the window corresponding to the main area of the control.
    %End

    wxDataViewModel * GetModel();
    %Docstring
        GetModel() -> DataViewModel
        
        Returns pointer to the data model associated with the control (if
        any).
    %End

    int GetSelectedItemsCount() const;
    %Docstring
        GetSelectedItemsCount() -> int
        
        Returns the number of currently selected items.
    %End

    wxDataViewItem GetSelection() const;
    %Docstring
        GetSelection() -> DataViewItem
        
        Returns first selected item or an invalid item if none is selected.
    %End

    wxDataViewItemArray* GetSelections() const   /Factory/;
    %Docstring
        GetSelections() -> DataViewItemArray
        
        Returns a list of the currently selected items.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataViewCtrl_GetSelections(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxDataViewItemArray* _wxDataViewCtrl_GetSelections(const wxDataViewCtrl* self)
    {
        wxDataViewItemArray* selections = new wxDataViewItemArray;
        self->GetSelections(*selections);
        return selections;
    }
    %End

    wxDataViewColumn * GetSortingColumn() const;
    %Docstring
        GetSortingColumn() -> DataViewColumn
        
        Returns the wxDataViewColumn currently responsible for sorting or NULL
        if none has been selected.
    %End

    bool HasSelection() const;
    %Docstring
        HasSelection() -> bool
        
        Returns true if any items are currently selected.
    %End

    PyObject* HitTest(const wxPoint& point) const;
    %Docstring
        HitTest(point) -> PyObject
        
        HitTest(point) -> (item, col)
        
        Returns the item and column located at point, as a 2 element tuple.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataViewCtrl_HitTest(sipCpp, point);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxDataViewCtrl_HitTest(const wxDataViewCtrl* self, const wxPoint* point)
    {
        wxDataViewItem*   item = new wxDataViewItem();;
        wxDataViewColumn* col = NULL;
        
        self->HitTest(*point, *item, col);
        
        wxPyThreadBlocker blocker;
        PyObject* value = PyTuple_New(2);
        PyObject* item_obj =
            wxPyConstructObject((void*)item, wxT("wxDataViewItem"), 1);   // owned
        PyObject* col_obj;
        if (col) {
            col_obj = wxPyConstructObject((void*)col, wxT("wxDataViewColumn"), 0);  // not owned
        } else {
            col_obj = Py_None;
            Py_INCREF(Py_None);
        }
        PyTuple_SET_ITEM(value, 0, item_obj);
        PyTuple_SET_ITEM(value, 1, col_obj);
        // PyTuple steals a reference, so we don't need to decref the items here
        return value;
    }
    %End

    bool IsExpanded(
        const wxDataViewItem & item
    ) const;
    %Docstring
        IsExpanded(item) -> bool
        
        Return true if the item is expanded.
    %End

    bool IsMultiColumnSortAllowed() const;
    %Docstring
        IsMultiColumnSortAllowed() -> bool
        
        Return true if using more than one column for sorting is allowed.
    %End

    bool IsSelected(
        const wxDataViewItem & item
    ) const;
    %Docstring
        IsSelected(item) -> bool
        
        Return true if the item is selected.
    %End

    void Select(
        const wxDataViewItem & item
    );
    %Docstring
        Select(item)
        
        Select the given item.
    %End

    void SelectAll();
    %Docstring
        SelectAll()
        
        Select all items.
    %End

    bool SetAlternateRowColour(
        const wxColour & colour
    );
    %Docstring
        SetAlternateRowColour(colour) -> bool
        
        Set custom colour for the alternate rows used with wxDV_ROW_LINES
        style.
    %End

    void SetExpanderColumn(
        wxDataViewColumn * col
    );
    %Docstring
        SetExpanderColumn(col)
        
        Set which column shall contain the tree-like expanders.
    %End

    void SetCurrentItem(
        const wxDataViewItem & item
    );
    %Docstring
        SetCurrentItem(item)
        
        Changes the currently focused item.
    %End

    bool SetHeaderAttr(
        const wxItemAttr & attr
    );
    %Docstring
        SetHeaderAttr(attr) -> bool
        
        Set custom colours and/or font to use for the header.
    %End

    void SetIndent(
        int indent
    );
    %Docstring
        SetIndent(indent)
        
        Sets the indentation.
    %End

    void SetSelections(
        const wxDataViewItemArray & sel
    );
    %Docstring
        SetSelections(sel)
        
        Sets the selection to the array of wxDataViewItems.
    %End

    void Unselect(
        const wxDataViewItem & item
    );
    %Docstring
        Unselect(item)
        
        Unselect the given item.
    %End

    void UnselectAll();
    %Docstring
        UnselectAll()
        
        Unselect all item.
    %End

    bool SetRowHeight(
        int rowHeight
    );
    %Docstring
        SetRowHeight(rowHeight) -> bool
        
        Sets the row height.
    %End

    void ToggleSortByColumn(
        int column
    );
    %Docstring
        ToggleSortByColumn(column)
        
        Toggle sorting by the given column.
    %End

    int GetCountPerPage() const;
    %Docstring
        GetCountPerPage() -> int
        
        Return the number of items that can fit vertically in the visible area
        of the control.
    %End

    wxDataViewItem GetTopItem() const;
    %Docstring
        GetTopItem() -> DataViewItem
        
        Return the topmost visible item.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void EnableSystemTheme(
        bool enable = true
    );
    %Docstring
        EnableSystemTheme(enable=True)
        
        Can be used to disable the system theme of controls using it by
        default.
    %End

    public:


    %Property(name=ColumnCount, get=GetColumnCount)
    %Property(name=CountPerPage, get=GetCountPerPage)
    %Property(name=CurrentColumn, get=GetCurrentColumn)
    %Property(name=CurrentItem, get=GetCurrentItem, set=SetCurrentItem)
    %Property(name=ExpanderColumn, get=GetExpanderColumn, set=SetExpanderColumn)
    %Property(name=Indent, get=GetIndent, set=SetIndent)
    %Property(name=MainWindow, get=GetMainWindow)
    %Property(name=Model, get=GetModel)
    %Property(name=SelectedItemsCount, get=GetSelectedItemsCount)
    %Property(name=Selection, get=GetSelection)
    %Property(name=Selections, get=GetSelections, set=SetSelections)
    %Property(name=SortingColumn, get=GetSortingColumn)
    %Property(name=TopItem, get=GetTopItem)
};  // end of class wxDataViewCtrl


%Extract(id=pycode_dataview)
def _DataViewCtrl_AssociateModel(self, model):
    """
    Associates a :class:`DataViewModel` with the control.
    Ownership of the model object is passed to C++, however it
    is reference counted so it can be shared with other views.
    """
    import wx.siplib
    wasPyOwned = wx.siplib.ispyowned(model)
    self._AssociateModel(model)
    # Ownership of the python object has just been transferred to
    # C++, so DecRef the C++ instance associated with this python
    # reference.
    if wasPyOwned:
        model.DecRef()
DataViewCtrl.AssociateModel = _DataViewCtrl_AssociateModel
del _DataViewCtrl_AssociateModel
%End

%Extract(id=pycode_dataview)
def _DataViewCtrl_GetColumns(self):
    """
    Returns a list of column objects.
    """
    return [self.GetColumn(i) for i in range(self.GetColumnCount())]
DataViewCtrl.GetColumns = _DataViewCtrl_GetColumns
del _DataViewCtrl_GetColumns
%End

%Extract(id=pycode_dataview)
DataViewCtrl.Columns = property(DataViewCtrl.GetColumns)
%End

class wxDataViewEvent : wxNotifyEvent
{
    %Docstring
        DataViewEvent()
        DataViewEvent(evtType, dvc, column, item=DataViewItem())
        DataViewEvent(evtType, dvc, item)
        DataViewEvent(event)
        
        This is the event class for the wxDataViewCtrl notifications.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewEvent();

    wxDataViewEvent(
        wxEventType evtType,
        wxDataViewCtrl * dvc,
        wxDataViewColumn * column,
        const wxDataViewItem & item = wxDataViewItem()
    );

    wxDataViewEvent(
        wxEventType evtType,
        wxDataViewCtrl * dvc,
        const wxDataViewItem & item
    );

    wxDataViewEvent(
        const wxDataViewEvent & event
    );

    int GetColumn() const;
    %Docstring
        GetColumn() -> int
        
        Returns the position of the column in the control or -1 if column
        field is unavailable for this event.
    %End

    wxDataViewColumn * GetDataViewColumn() const;
    %Docstring
        GetDataViewColumn() -> DataViewColumn
        
        Returns a pointer to the wxDataViewColumn from which the event was
        emitted or NULL.
    %End

    wxDataViewModel * GetModel() const;
    %Docstring
        GetModel() -> DataViewModel
        
        Returns the wxDataViewModel associated with the event.
    %End

    wxPoint GetPosition() const;
    %Docstring
        GetPosition() -> wx.Point
        
        Returns the position of a context menu event in screen coordinates.
    %End

    const wxDVCVariant & GetValue() const;
    %Docstring
        GetValue() -> DVCVariant
        
        Returns a reference to a value.
    %End

    bool IsEditCancelled() const;
    %Docstring
        IsEditCancelled() -> bool
        
        Can be used to determine whether the new value is going to be accepted
        in wxEVT_DATAVIEW_ITEM_EDITING_DONE handler.
    %End

    void SetColumn(
        int col
    );
    %Docstring
        SetColumn(col)
        
        Sets the column index associated with this event.
    %End

    void SetDataViewColumn(
        wxDataViewColumn * col
    );
    %Docstring
        SetDataViewColumn(col)
        
        For wxEVT_DATAVIEW_COLUMN_HEADER_CLICK only.
    %End

    void SetModel(
        wxDataViewModel * model
    );
    %Docstring
        SetModel(model)
        
        Sets the dataview model associated with this event.
    %End

    void SetValue(
        const wxDVCVariant & value
    );
    %Docstring
        SetValue(value)
        
        Sets the value associated with this event.
    %End

    void SetDataObject(
        wxDataObject * obj   /Transfer/
    );
    %Docstring
        SetDataObject(obj)
        
        Set wxDataObject for data transfer within a drag operation.
    %End

    wxDataFormat GetDataFormat() const;
    %Docstring
        GetDataFormat() -> wx.DataFormat
        
        Gets the wxDataFormat during a drop operation.
    %End

    size_t GetDataSize() const;
    %Docstring
        GetDataSize() -> size_t
        
        Gets the data size for a drop data transfer.
    %End

    PyObject* GetDataBuffer() const;
    %Docstring
        GetDataBuffer() -> PyObject
        
        Gets the data buffer for a drop data transfer
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataViewEvent_GetDataBuffer(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxDataViewEvent_GetDataBuffer(const wxDataViewEvent* self)
    {
        wxPyThreadBlocker blocker;
        return wxPyMakeBuffer(self->GetDataBuffer(), self->GetDataSize(), true);
    }
    %End

    void SetDragFlags(
        int flags
    );
    %Docstring
        SetDragFlags(flags)
        
        Specify the kind of the drag operation to perform.
    %End

    wxDragResult GetDropEffect() const;
    %Docstring
        GetDropEffect() -> DragResult
        
        Returns the effect the user requested to happen to the dropped data.
    %End

    int GetCacheFrom() const;
    %Docstring
        GetCacheFrom() -> int
        
        Return the first row that will be displayed.
    %End

    int GetCacheTo() const;
    %Docstring
        GetCacheTo() -> int
        
        Return the last row that will be displayed.
    %End

    int GetProposedDropIndex() const;
    %Docstring
        GetProposedDropIndex() -> int
        
        Returns the index of the child item at which an item currently being
        dragged would be dropped.
    %End

    wxDataViewItem GetItem() const;
    %Docstring
        GetItem() -> DataViewItem
        
        Returns the item affected by the event.
    %End

    void SetItem(
        const wxDataViewItem & item
    );
    %Docstring
        SetItem(item)
    %End

    void SetPosition(
        int x,
        int y
    );
    %Docstring
        SetPosition(x, y)
    %End

    void SetCache(
        int from_,
        int to_
    );
    %Docstring
        SetCache(from_, to_)
    %End

    wxDataObject * GetDataObject() const;
    %Docstring
        GetDataObject() -> wx.DataObject
    %End

    void SetDataFormat(
        const wxDataFormat & format
    );
    %Docstring
        SetDataFormat(format)
    %End

    void SetDataSize(
        size_t size
    );
    %Docstring
        SetDataSize(size)
    %End

    void SetDataBuffer(
        void * buf
    );
    %Docstring
        SetDataBuffer(buf)
    %End

    int GetDragFlags() const;
    %Docstring
        GetDragFlags() -> int
    %End

    void SetDropEffect(
        wxDragResult effect
    );
    %Docstring
        SetDropEffect(effect)
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxDataViewEvent& operator=(const wxDataViewEvent&);


    public:


    %Property(name=CacheFrom, get=GetCacheFrom)
    %Property(name=CacheTo, get=GetCacheTo)
    %Property(name=Column, get=GetColumn, set=SetColumn)
    %Property(name=DataBuffer, get=GetDataBuffer, set=SetDataBuffer)
    %Property(name=DataFormat, get=GetDataFormat, set=SetDataFormat)
    %Property(name=DataObject, get=GetDataObject, set=SetDataObject)
    %Property(name=DataSize, get=GetDataSize, set=SetDataSize)
    %Property(name=DataViewColumn, get=GetDataViewColumn, set=SetDataViewColumn)
    %Property(name=DragFlags, get=GetDragFlags, set=SetDragFlags)
    %Property(name=DropEffect, get=GetDropEffect, set=SetDropEffect)
    %Property(name=Item, get=GetItem, set=SetItem)
    %Property(name=Model, get=GetModel, set=SetModel)
    %Property(name=Position, get=GetPosition, set=SetPosition)
    %Property(name=ProposedDropIndex, get=GetProposedDropIndex)
    %Property(name=Value, get=GetValue, set=SetValue)
};  // end of class wxDataViewEvent


class wxDataViewValueAdjuster
{
    %Docstring
        This class can be used with wxDataViewRenderer::SetValueAdjuster() to
        customize rendering of model values with standard renderers.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    virtual
    wxDVCVariant MakeHighlighted(
        const wxDVCVariant & value
    ) const;
    %Docstring
        MakeHighlighted(value) -> DVCVariant
        
        Change value for rendering when highlighted.
    %End

};  // end of class wxDataViewValueAdjuster


class wxDataViewListCtrl : wxDataViewCtrl
{
    %Docstring
        DataViewListCtrl()
        DataViewListCtrl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=DV_ROW_LINES, validator=wx.DefaultValidator)
        
        This class is a wxDataViewCtrl which internally uses a
        wxDataViewListStore and forwards most of its API to that class.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewListCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxDataViewListCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDV_ROW_LINES,
        const wxValidator & validator = wxDefaultValidator
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxDataViewListCtrl();

    wxDataViewListStore * GetStore();
    %Docstring
        GetStore() -> DataViewListStore
        
        Returns the store.
    %End

    int GetSelectedRow() const;
    %Docstring
        GetSelectedRow() -> int
        
        Returns index of the selected row or wxNOT_FOUND.
    %End

    void SelectRow(
        unsigned row
    );
    %Docstring
        SelectRow(row)
        
        Selects given row.
    %End

    void UnselectRow(
        unsigned row
    );
    %Docstring
        UnselectRow(row)
        
        Unselects given row.
    %End

    bool IsRowSelected(
        unsigned row
    ) const;
    %Docstring
        IsRowSelected(row) -> bool
        
        Returns true if row is selected.
    %End

    bool AppendColumn(
        wxDataViewColumn * column   /Transfer/
    );
    %Docstring
        AppendColumn(column) -> bool
        AppendColumn(column, varianttype)
        
        Appends a column to the control and additionally appends a column to
        the store with the type string.
    %End

    void AppendColumn(
        wxDataViewColumn * column   /Transfer/,
        const wxString & varianttype
    );

    wxDataViewColumn * AppendTextColumn(
        const wxString & label,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_LEFT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        AppendTextColumn(label, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_LEFT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Appends a text column to the control and the store.
    %End

    wxDataViewColumn * AppendToggleColumn(
        const wxString & label,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE,
        int width = -1,
        wxAlignment align = wxALIGN_LEFT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        AppendToggleColumn(label, mode=DATAVIEW_CELL_ACTIVATABLE, width=-1, align=wx.ALIGN_LEFT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Appends a toggle column to the control and the store.
    %End

    wxDataViewColumn * AppendProgressColumn(
        const wxString & label,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_LEFT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        AppendProgressColumn(label, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_LEFT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Appends a progress column to the control and the store.
    %End

    wxDataViewColumn * AppendIconTextColumn(
        const wxString & label,
        wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT,
        int width = -1,
        wxAlignment align = wxALIGN_LEFT,
        int flags = wxDATAVIEW_COL_RESIZABLE
    );
    %Docstring
        AppendIconTextColumn(label, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_LEFT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn
        
        Appends an icon-and-text column to the control and the store.
    %End

    bool InsertColumn(
        unsigned int pos,
        wxDataViewColumn * column   /Transfer/
    );
    %Docstring
        InsertColumn(pos, column) -> bool
        InsertColumn(pos, column, varianttype)
        
        Inserts a column to the control and additionally inserts a column to
        the store with the type string.
    %End

    void InsertColumn(
        unsigned int pos,
        wxDataViewColumn * column   /Transfer/,
        const wxString & varianttype
    );

    bool PrependColumn(
        wxDataViewColumn * column   /Transfer/
    );
    %Docstring
        PrependColumn(column) -> bool
        PrependColumn(column, varianttype)
        
        Prepends a column to the control and additionally prepends a column to
        the store with the type string.
    %End

    void PrependColumn(
        wxDataViewColumn * column   /Transfer/,
        const wxString & varianttype
    );

    void AppendItem(
        const wxVariantVector& values,
        wxUIntPtr data = NULL
    );
    %Docstring
        AppendItem(values, data=None)
        
        Appends an item (i.e. a row) to the control.
    %End

    void PrependItem(
        const wxVariantVector& values,
        wxUIntPtr data = NULL
    );
    %Docstring
        PrependItem(values, data=None)
        
        Prepends an item (i.e. a row) to the control.
    %End

    void InsertItem(
        unsigned int row,
        const wxVariantVector& values,
        wxUIntPtr data = NULL
    );
    %Docstring
        InsertItem(row, values, data=None)
        
        Inserts an item (i.e. a row) to the control.
    %End

    void DeleteItem(
        unsigned row
    );
    %Docstring
        DeleteItem(row)
        
        Delete the row at position row.
    %End

    void DeleteAllItems();
    %Docstring
        DeleteAllItems()
        
        Delete all items (= all rows).
    %End

    unsigned int GetItemCount() const;
    %Docstring
        GetItemCount() -> unsignedint
        
        Returns the number of items (=rows) in the control.
    %End

    wxUIntPtr GetItemData(
        const wxDataViewItem & item
    ) const;
    %Docstring
        GetItemData(item) -> UIntPtr
        
        Returns the client data associated with the item.
    %End

    void SetValue(
        const wxDVCVariant & value,
        unsigned int row,
        unsigned int col
    );
    %Docstring
        SetValue(value, row, col)
        
        Sets the value in the store and update the control.
    %End

    void GetValue(
        wxDVCVariant & value   /Out/,
        unsigned int row,
        unsigned int col
    );
    %Docstring
        GetValue(row, col) -> value
        
        Returns the value from the store.
    %End

    void SetTextValue(
        const wxString & value,
        unsigned int row,
        unsigned int col
    );
    %Docstring
        SetTextValue(value, row, col)
        
        Sets the value in the store and update the control.
    %End

    wxString GetTextValue(
        unsigned int row,
        unsigned int col
    ) const;
    %Docstring
        GetTextValue(row, col) -> String
        
        Returns the value from the store.
    %End

    void SetToggleValue(
        bool value,
        unsigned int row,
        unsigned int col
    );
    %Docstring
        SetToggleValue(value, row, col)
        
        Sets the value in the store and update the control.
    %End

    bool GetToggleValue(
        unsigned int row,
        unsigned int col
    ) const;
    %Docstring
        GetToggleValue(row, col) -> bool
        
        Returns the value from the store.
    %End

    void SetItemData(
        const wxDataViewItem & item,
        wxUIntPtr data
    );
    %Docstring
        SetItemData(item, data)
        
        Associates a client data pointer with the given item.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDV_ROW_LINES,
        const wxValidator & validator = wxDefaultValidator
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=DV_ROW_LINES, validator=wx.DefaultValidator) -> bool
        
        Creates the control and a wxDataViewListStore as its internal model.
    %End

    int ItemToRow(
        const wxDataViewItem & item
    ) const;
    %Docstring
        ItemToRow(item) -> int
        
        Returns the position of given item or wxNOT_FOUND if it's not a valid
        item.
    %End

    wxDataViewItem RowToItem(
        int row
    ) const;
    %Docstring
        RowToItem(row) -> DataViewItem
        
        Returns the wxDataViewItem at the given row.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ItemCount, get=GetItemCount)
    %Property(name=SelectedRow, get=GetSelectedRow)
    %Property(name=Store, get=GetStore)
};  // end of class wxDataViewListCtrl


class wxDataViewListStore : wxDataViewIndexListModel
{
    %Docstring
        DataViewListStore()
        
        wxDataViewListStore is a specialised wxDataViewModel for storing a
        simple table of data.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewListStore();

    ~wxDataViewListStore();

    void PrependColumn(
        const wxString & varianttype
    );
    %Docstring
        PrependColumn(varianttype)
        
        Prepends a data column.
    %End

    void InsertColumn(
        unsigned int pos,
        const wxString & varianttype
    );
    %Docstring
        InsertColumn(pos, varianttype)
        
        Inserts a data column before pos.
    %End

    void AppendColumn(
        const wxString & varianttype
    );
    %Docstring
        AppendColumn(varianttype)
        
        Appends a data column.
    %End

    void AppendItem(
        const wxVariantVector& values,
        wxUIntPtr data = NULL
    );
    %Docstring
        AppendItem(values, data=None)
        
        Appends an item (=row) and fills it with values.
    %End

    void PrependItem(
        const wxVariantVector& values,
        wxUIntPtr data = NULL
    );
    %Docstring
        PrependItem(values, data=None)
        
        Prepends an item (=row) and fills it with values.
    %End

    void InsertItem(
        unsigned int row,
        const wxVariantVector& values,
        wxUIntPtr data = NULL
    );
    %Docstring
        InsertItem(row, values, data=None)
        
        Inserts an item (=row) and fills it with values.
    %End

    void DeleteItem(
        unsigned pos
    );
    %Docstring
        DeleteItem(pos)
        
        Delete the item (=row) at position pos.
    %End

    void DeleteAllItems();
    %Docstring
        DeleteAllItems()
        
        Delete all item (=all rows) in the store.
    %End

    unsigned int GetItemCount() const;
    %Docstring
        GetItemCount() -> unsignedint
        
        Returns the number of items (=rows) in the control.
    %End

    wxUIntPtr GetItemData(
        const wxDataViewItem & item
    ) const;
    %Docstring
        GetItemData(item) -> UIntPtr
        
        Returns the client data associated with the item.
    %End

    virtual
    unsigned int GetColumnCount() const;
    %Docstring
        GetColumnCount() -> unsignedint
        
        Overridden from wxDataViewModel.
    %End

    virtual
    wxString GetColumnType(
        unsigned int col
    ) const;
    %Docstring
        GetColumnType(col) -> String
        
        Overridden from wxDataViewModel.
    %End

    void SetItemData(
        const wxDataViewItem & item,
        wxUIntPtr data
    );
    %Docstring
        SetItemData(item, data)
        
        Sets the client data associated with the item.
    %End

    virtual
    void GetValueByRow(
        wxDVCVariant & value   /Out/,
        unsigned int row,
        unsigned int col
    ) const [ void (wxVariant& value, unsigned int row, unsigned int col) ];
    %Docstring
        GetValueByRow(row, col) -> value
        
        Overridden from wxDataViewIndexListModel.
    %End

    virtual
    bool SetValueByRow(
        const wxDVCVariant & value,
        unsigned int row,
        unsigned int col
    );
    %Docstring
        SetValueByRow(value, row, col) -> bool
        
        Overridden from wxDataViewIndexListModel.
    %End

    public:


    %Property(name=ColumnCount, get=GetColumnCount)
    %Property(name=ItemCount, get=GetItemCount)
};  // end of class wxDataViewListStore


class wxDataViewTreeCtrl : wxDataViewCtrl
{
    %Docstring
        DataViewTreeCtrl()
        DataViewTreeCtrl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=DV_NO_HEADER|DV_ROW_LINES, validator=wx.DefaultValidator)
        
        This class is a wxDataViewCtrl which internally uses a
        wxDataViewTreeStore and forwards most of its API to that class.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewTreeCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxDataViewTreeCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDV_NO_HEADER|wxDV_ROW_LINES,
        const wxValidator & validator = wxDefaultValidator
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxDataViewTreeCtrl();

    wxDataViewTreeStore * GetStore();
    %Docstring
        GetStore() -> DataViewTreeStore
        
        Returns the store.
    %End

    wxDataViewItem AppendContainer(
        const wxDataViewItem & parent,
        const wxString & text,
        int icon = -1,
        int expanded = -1,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        AppendContainer(parent, text, icon=-1, expanded=-1, data=None) -> DataViewItem
        
        Appends a container to the given parent.
    %End

    wxDataViewItem AppendItem(
        const wxDataViewItem & parent,
        const wxString & text,
        int icon = -1,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        AppendItem(parent, text, icon=-1, data=None) -> DataViewItem
        
        Appends an item to the given parent.
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDV_NO_HEADER|wxDV_ROW_LINES,
        const wxValidator & validator = wxDefaultValidator
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=DV_NO_HEADER|DV_ROW_LINES, validator=wx.DefaultValidator) -> bool
        
        Creates the control and a wxDataViewTreeStore as its internal model.
    %End

    void DeleteAllItems();
    %Docstring
        DeleteAllItems()
        
        Calls the identical method from wxDataViewTreeStore.
    %End

    void DeleteChildren(
        const wxDataViewItem & item
    );
    %Docstring
        DeleteChildren(item)
        
        Calls the identical method from wxDataViewTreeStore.
    %End

    void DeleteItem(
        const wxDataViewItem & item
    );
    %Docstring
        DeleteItem(item)
        
        Calls the identical method from wxDataViewTreeStore.
    %End

    int GetChildCount(
        const wxDataViewItem & parent
    ) const;
    %Docstring
        GetChildCount(parent) -> int
        
        Calls the identical method from wxDataViewTreeStore.
    %End

    wxImageList * GetImageList();
    %Docstring
        GetImageList() -> wx.ImageList
        
        Returns the image list.
    %End

    wxClientData * GetItemData(
        const wxDataViewItem & item
    ) const;
    %Docstring
        GetItemData(item) -> ClientData
        
        Calls the identical method from wxDataViewTreeStore.
    %End

    const wxIcon & GetItemExpandedIcon(
        const wxDataViewItem & item
    ) const;
    %Docstring
        GetItemExpandedIcon(item) -> wx.Icon
        
        Calls the identical method from wxDataViewTreeStore.
    %End

    const wxIcon & GetItemIcon(
        const wxDataViewItem & item
    ) const;
    %Docstring
        GetItemIcon(item) -> wx.Icon
        
        Calls the identical method from wxDataViewTreeStore.
    %End

    wxString GetItemText(
        const wxDataViewItem & item
    ) const;
    %Docstring
        GetItemText(item) -> String
        
        Calls the identical method from wxDataViewTreeStore.
    %End

    wxDataViewItem GetNthChild(
        const wxDataViewItem & parent,
        unsigned int pos
    ) const;
    %Docstring
        GetNthChild(parent, pos) -> DataViewItem
        
        Calls the identical method from wxDataViewTreeStore.
    %End

    wxDataViewItem InsertContainer(
        const wxDataViewItem & parent,
        const wxDataViewItem & previous,
        const wxString & text,
        int icon = -1,
        int expanded = -1,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        InsertContainer(parent, previous, text, icon=-1, expanded=-1, data=None) -> DataViewItem
        
        Calls the same method from wxDataViewTreeStore but uses an index
        position in the image list instead of a wxIcon.
    %End

    wxDataViewItem InsertItem(
        const wxDataViewItem & parent,
        const wxDataViewItem & previous,
        const wxString & text,
        int icon = -1,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        InsertItem(parent, previous, text, icon=-1, data=None) -> DataViewItem
        
        Calls the same method from wxDataViewTreeStore but uses an index
        position in the image list instead of a wxIcon.
    %End

    bool IsContainer(
        const wxDataViewItem & item
    );
    %Docstring
        IsContainer(item) -> bool
        
        Returns true if item is a container.
    %End

    wxDataViewItem PrependContainer(
        const wxDataViewItem & parent,
        const wxString & text,
        int icon = -1,
        int expanded = -1,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        PrependContainer(parent, text, icon=-1, expanded=-1, data=None) -> DataViewItem
        
        Calls the same method from wxDataViewTreeStore but uses an index
        position in the image list instead of a wxIcon.
    %End

    wxDataViewItem PrependItem(
        const wxDataViewItem & parent,
        const wxString & text,
        int icon = -1,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        PrependItem(parent, text, icon=-1, data=None) -> DataViewItem
        
        Calls the same method from wxDataViewTreeStore but uses an index
        position in the image list instead of a wxIcon.
    %End

    void SetImageList(
        wxImageList * imagelist
    );
    %Docstring
        SetImageList(imagelist)
        
        Sets the image list.
    %End

    void SetItemData(
        const wxDataViewItem & item,
        wxClientData * data   /Transfer/
    );
    %Docstring
        SetItemData(item, data)
        
        Calls the identical method from wxDataViewTreeStore.
    %End

    void SetItemExpandedIcon(
        const wxDataViewItem & item,
        const wxIcon & icon
    );
    %Docstring
        SetItemExpandedIcon(item, icon)
        
        Calls the identical method from wxDataViewTreeStore.
    %End

    void SetItemIcon(
        const wxDataViewItem & item,
        const wxIcon & icon
    );
    %Docstring
        SetItemIcon(item, icon)
        
        Calls the identical method from wxDataViewTreeStore.
    %End

    void SetItemText(
        const wxDataViewItem & item,
        const wxString & text
    );
    %Docstring
        SetItemText(item, text)
        
        Calls the identical method from wxDataViewTreeStore.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();
    virtual void EnableVisibleFocus(bool enabled);


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=ImageList, get=GetImageList, set=SetImageList)
    %Property(name=Store, get=GetStore)
};  // end of class wxDataViewTreeCtrl


class wxDataViewTreeStore : wxDataViewModel
{
    %Docstring
        DataViewTreeStore()
        
        wxDataViewTreeStore is a specialised wxDataViewModel for storing
        simple trees very much like wxTreeCtrl does and it offers a similar
        API.
    %End
    %TypeHeaderCode
        #include <wx/dataview.h>
    %End

public:
    wxDataViewTreeStore()   /Transfer/;

    virtual
    ~wxDataViewTreeStore();

    wxDataViewItem AppendContainer(
        const wxDataViewItem & parent,
        const wxString & text,
        const wxIcon & icon = wxNullIcon,
        const wxIcon & expanded = wxNullIcon,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        AppendContainer(parent, text, icon=wx.NullIcon, expanded=wx.NullIcon, data=None) -> DataViewItem
        
        Append a container.
    %End

    wxDataViewItem AppendItem(
        const wxDataViewItem & parent,
        const wxString & text,
        const wxIcon & icon = wxNullIcon,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        AppendItem(parent, text, icon=wx.NullIcon, data=None) -> DataViewItem
        
        Append an item.
    %End

    void DeleteAllItems();
    %Docstring
        DeleteAllItems()
        
        Delete all item in the model.
    %End

    void DeleteChildren(
        const wxDataViewItem & item
    );
    %Docstring
        DeleteChildren(item)
        
        Delete all children of the item, but not the item itself.
    %End

    void DeleteItem(
        const wxDataViewItem & item
    );
    %Docstring
        DeleteItem(item)
        
        Delete this item.
    %End

    int GetChildCount(
        const wxDataViewItem & parent
    ) const;
    %Docstring
        GetChildCount(parent) -> int
        
        Return the number of children of item.
    %End

    wxClientData * GetItemData(
        const wxDataViewItem & item
    ) const;
    %Docstring
        GetItemData(item) -> ClientData
        
        Returns the client data associated with the item.
    %End

    const wxIcon & GetItemExpandedIcon(
        const wxDataViewItem & item
    ) const;
    %Docstring
        GetItemExpandedIcon(item) -> wx.Icon
        
        Returns the icon to display in expanded containers.
    %End

    const wxIcon & GetItemIcon(
        const wxDataViewItem & item
    ) const;
    %Docstring
        GetItemIcon(item) -> wx.Icon
        
        Returns the icon of the item.
    %End

    wxString GetItemText(
        const wxDataViewItem & item
    ) const;
    %Docstring
        GetItemText(item) -> String
        
        Returns the text of the item.
    %End

    wxDataViewItem GetNthChild(
        const wxDataViewItem & parent,
        unsigned int pos
    ) const;
    %Docstring
        GetNthChild(parent, pos) -> DataViewItem
        
        Returns the nth child item of item.
    %End

    wxDataViewItem InsertContainer(
        const wxDataViewItem & parent,
        const wxDataViewItem & previous,
        const wxString & text,
        const wxIcon & icon = wxNullIcon,
        const wxIcon & expanded = wxNullIcon,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        InsertContainer(parent, previous, text, icon=wx.NullIcon, expanded=wx.NullIcon, data=None) -> DataViewItem
        
        Inserts a container after previous.
    %End

    wxDataViewItem InsertItem(
        const wxDataViewItem & parent,
        const wxDataViewItem & previous,
        const wxString & text,
        const wxIcon & icon = wxNullIcon,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        InsertItem(parent, previous, text, icon=wx.NullIcon, data=None) -> DataViewItem
        
        Inserts an item after previous.
    %End

    wxDataViewItem PrependContainer(
        const wxDataViewItem & parent,
        const wxString & text,
        const wxIcon & icon = wxNullIcon,
        const wxIcon & expanded = wxNullIcon,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        PrependContainer(parent, text, icon=wx.NullIcon, expanded=wx.NullIcon, data=None) -> DataViewItem
        
        Inserts a container before the first child item or parent.
    %End

    wxDataViewItem PrependItem(
        const wxDataViewItem & parent,
        const wxString & text,
        const wxIcon & icon = wxNullIcon,
        wxClientData * data   /Transfer/ = NULL
    );
    %Docstring
        PrependItem(parent, text, icon=wx.NullIcon, data=None) -> DataViewItem
        
        Inserts an item before the first child item or parent.
    %End

    void SetItemData(
        const wxDataViewItem & item,
        wxClientData * data   /Transfer/
    );
    %Docstring
        SetItemData(item, data)
        
        Sets the client data associated with the item.
    %End

    void SetItemExpandedIcon(
        const wxDataViewItem & item,
        const wxIcon & icon
    );
    %Docstring
        SetItemExpandedIcon(item, icon)
        
        Sets the expanded icon for the item.
    %End

    void SetItemIcon(
        const wxDataViewItem & item,
        const wxIcon & icon
    );
    %Docstring
        SetItemIcon(item, icon)
        
        Sets the icon for the item.
    %End

};  // end of class wxDataViewTreeStore


class wxDataViewItemArray
{
public:
    SIP_SSIZE_T __len__();
    %MethodCode
        sipRes = sipCpp->GetCount();
    %End

            wxDataViewItem& __getitem__(long index);
        %MethodCode
            if (0 > index)
                index += sipCpp->GetCount();

            if ((index < sipCpp->GetCount()) && (0 <= index)) {
                sipRes = &sipCpp->Item(index);
            }
            else {
                wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
                sipError = sipErrorFail;
            }
        %End
        

    int __contains__(wxDataViewItem& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        sipRes = idx != wxNOT_FOUND;
    %End

    void append(wxDataViewItem& obj);
    %MethodCode
        sipCpp->Add(*obj);
    %End

    // TODO:  add support for index(value, [start, [stop]])
    int index(wxDataViewItem& obj);
    %MethodCode
        int idx = sipCpp->Index(*obj, false);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
            }
        sipRes = idx;
    %End
};

%Extract(id=pycode_dataview)
def _DataViewItemArray___repr__(self):
    return "DataViewItemArray: " + repr(list(self))
DataViewItemArray.__repr__ = _DataViewItemArray___repr__
del _DataViewItemArray___repr__
%End


%Extract(id=pycode_dataview)
NullDataViewItem = DataViewItem()

%End

%Extract(id=pycode_dataview)
class DataViewItemObjectMapper(object):
    """
    This class provides a mechanism for mapping between Python objects and the
    :class:`DataViewItem` objects used by the :class:`DataViewModel` for tracking the items in
    the view. The ID used for the item is the id() of the Python object. Use
    :meth:`ObjectToItem` to create a :class:`DataViewItem` using a Python object as its ID,
    and use :meth:`ItemToObject` to fetch that Python object again later for a given
    :class:`DataViewItem`.
    
    By default a regular dictionary is used to implement the ID to object
    mapping. Optionally a WeakValueDictionary can be useful when there will be
    a high turnover of objects and maintaining an extra reference to the
    objects would be unwise.  If weak references are used then the objects
    associated with data items must be weak-referenceable.  (Things like
    stock lists and dictionaries are not.)  See :meth:`UseWeakRefs`.
    
    This class is used in :class:`PyDataViewModel` as a mixin for convenience.
    """
    def __init__(self):
        self.mapper = dict()
        self.usingWeakRefs = False

    def ObjectToItem(self, obj):
        """
        Create a :class:`DataViewItem` for the object, and remember the ID-->obj mapping.
        """
        import sys
        oid = id(obj)
        while oid > sys.maxsize:
            # risk of conflict here... May need some more thought.
            oid -= sys.maxsize
        self.mapper[oid] = obj
        return DataViewItem(oid)

    def ItemToObject(self, item):
        """
        Retrieve the object that was used to create an item.
        """
        oid = int(item.GetID())
        return self.mapper[oid]

    def UseWeakRefs(self, flag):
        """
        Switch to or from using a weak value dictionary for keeping the ID to
        object map.
        """
        if flag == self.usingWeakRefs:
            return
        if flag:
            import weakref
            newmap = weakref.WeakValueDictionary()
        else:
            newmap = dict()
        newmap.update(self.mapper)
        self.mapper = newmap
        self.usingWeakRefs = flag


%End

%Extract(id=pycode_dataview)
class PyDataViewModel(DataViewModel, DataViewItemObjectMapper):
    """
    A convenience class that is a :class:`DataViewModel` combined with an object mapper.
    """
    def __init__(self):
        DataViewModel.__init__(self)
        DataViewItemObjectMapper.__init__(self)


%End

%Extract(id=pycode_dataview)
PyDataViewIndexListModel = wx.deprecated(DataViewIndexListModel)
PyDataViewVirtualListModel = wx.deprecated(DataViewVirtualListModel)

%End

%Extract(id=pycode_dataview)
PyDataViewCustomRenderer = wx.deprecated(DataViewCustomRenderer,
                                         "Use DataViewCustomRenderer instead")

%End

%Extract(id=pycode_dataview)
EVT_DATAVIEW_SELECTION_CHANGED         = wx.PyEventBinder( wxEVT_DATAVIEW_SELECTION_CHANGED, 1)
EVT_DATAVIEW_ITEM_ACTIVATED            = wx.PyEventBinder( wxEVT_DATAVIEW_ITEM_ACTIVATED, 1)
EVT_DATAVIEW_ITEM_COLLAPSED            = wx.PyEventBinder( wxEVT_DATAVIEW_ITEM_COLLAPSED, 1)
EVT_DATAVIEW_ITEM_EXPANDED             = wx.PyEventBinder( wxEVT_DATAVIEW_ITEM_EXPANDED, 1)
EVT_DATAVIEW_ITEM_COLLAPSING           = wx.PyEventBinder( wxEVT_DATAVIEW_ITEM_COLLAPSING, 1)
EVT_DATAVIEW_ITEM_EXPANDING            = wx.PyEventBinder( wxEVT_DATAVIEW_ITEM_EXPANDING, 1)
EVT_DATAVIEW_ITEM_START_EDITING        = wx.PyEventBinder( wxEVT_DATAVIEW_ITEM_START_EDITING, 1)
EVT_DATAVIEW_ITEM_EDITING_STARTED      = wx.PyEventBinder( wxEVT_DATAVIEW_ITEM_EDITING_STARTED, 1)
EVT_DATAVIEW_ITEM_EDITING_DONE         = wx.PyEventBinder( wxEVT_DATAVIEW_ITEM_EDITING_DONE, 1)
EVT_DATAVIEW_ITEM_VALUE_CHANGED        = wx.PyEventBinder( wxEVT_DATAVIEW_ITEM_VALUE_CHANGED, 1)
EVT_DATAVIEW_ITEM_CONTEXT_MENU         = wx.PyEventBinder( wxEVT_DATAVIEW_ITEM_CONTEXT_MENU, 1)
EVT_DATAVIEW_COLUMN_HEADER_CLICK       = wx.PyEventBinder( wxEVT_DATAVIEW_COLUMN_HEADER_CLICK, 1)
EVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK = wx.PyEventBinder( wxEVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK, 1)
EVT_DATAVIEW_COLUMN_SORTED             = wx.PyEventBinder( wxEVT_DATAVIEW_COLUMN_SORTED, 1)
EVT_DATAVIEW_COLUMN_REORDERED          = wx.PyEventBinder( wxEVT_DATAVIEW_COLUMN_REORDERED, 1)
EVT_DATAVIEW_ITEM_BEGIN_DRAG           = wx.PyEventBinder( wxEVT_DATAVIEW_ITEM_BEGIN_DRAG, 1)
EVT_DATAVIEW_ITEM_DROP_POSSIBLE        = wx.PyEventBinder( wxEVT_DATAVIEW_ITEM_DROP_POSSIBLE, 1)
EVT_DATAVIEW_ITEM_DROP                 = wx.PyEventBinder( wxEVT_DATAVIEW_ITEM_DROP, 1)
EVT_DATAVIEW_CACHE_HINT                = wx.PyEventBinder( wxEVT_DATAVIEW_CACHE_HINT, 1 )

# deprecated wxEVT aliases
wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED          = wxEVT_DATAVIEW_SELECTION_CHANGED
wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED             = wxEVT_DATAVIEW_ITEM_ACTIVATED
wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED             = wxEVT_DATAVIEW_ITEM_COLLAPSED
wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED              = wxEVT_DATAVIEW_ITEM_EXPANDED
wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING            = wxEVT_DATAVIEW_ITEM_COLLAPSING
wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING             = wxEVT_DATAVIEW_ITEM_EXPANDING
wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING         = wxEVT_DATAVIEW_ITEM_START_EDITING
wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED       = wxEVT_DATAVIEW_ITEM_EDITING_STARTED
wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE          = wxEVT_DATAVIEW_ITEM_EDITING_DONE
wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED         = wxEVT_DATAVIEW_ITEM_VALUE_CHANGED
wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU          = wxEVT_DATAVIEW_ITEM_CONTEXT_MENU
wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK        = wxEVT_DATAVIEW_COLUMN_HEADER_CLICK
wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK  = wxEVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK
wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED              = wxEVT_DATAVIEW_COLUMN_SORTED
wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED           = wxEVT_DATAVIEW_COLUMN_REORDERED
wxEVT_COMMAND_DATAVIEW_CACHE_HINT                 = wxEVT_DATAVIEW_CACHE_HINT
wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG            = wxEVT_DATAVIEW_ITEM_BEGIN_DRAG
wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE         = wxEVT_DATAVIEW_ITEM_DROP_POSSIBLE
wxEVT_COMMAND_DATAVIEW_ITEM_DROP                  = wxEVT_DATAVIEW_ITEM_DROP

%End


//---------------------------------------------------------------------------

