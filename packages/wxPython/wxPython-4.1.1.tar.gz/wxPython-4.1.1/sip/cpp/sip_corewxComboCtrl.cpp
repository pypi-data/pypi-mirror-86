/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/combo.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/validate.h>
        #include <wx/gdicmn.h>
        #include <wx/combo.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/bitmap.h>
        #include <wx/textctrl.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/textcompleter.h>


class sipwxComboCtrl : public  ::wxComboCtrl
{
public:
    sipwxComboCtrl();
    sipwxComboCtrl( ::wxWindow*, ::wxWindowID,const  ::wxString&,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxValidator&,const  ::wxString&);
    virtual ~sipwxComboCtrl();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);
    bool sipProtectVirt_AnimateShow(bool,const  ::wxRect&,int);
    void sipProtectVirt_DoSetPopupControl(bool, ::wxComboPopup*);
    void sipProtectVirt_DoShowPopup(bool,const  ::wxRect&,int);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void DoShowPopup(const  ::wxRect&,int) SIP_OVERRIDE;
    void DoSetPopupControl( ::wxComboPopup*) SIP_OVERRIDE;
    bool AnimateShow(const  ::wxRect&,int) SIP_OVERRIDE;
    void ShowPopup() SIP_OVERRIDE;
    void OnButtonClick() SIP_OVERRIDE;
    void HidePopup(bool) SIP_OVERRIDE;
    bool IsKeyPopupToggle(const  ::wxKeyEvent&) const SIP_OVERRIDE;
    void Dismiss() SIP_OVERRIDE;
    bool CanCopy() const SIP_OVERRIDE;
    bool CanCut() const SIP_OVERRIDE;
    bool CanPaste() const SIP_OVERRIDE;
    bool CanRedo() const SIP_OVERRIDE;
    bool CanUndo() const SIP_OVERRIDE;
    void Copy() SIP_OVERRIDE;
    void Cut() SIP_OVERRIDE;
    void Paste() SIP_OVERRIDE;
    void Redo() SIP_OVERRIDE;
    void Undo() SIP_OVERRIDE;
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
     ::wxSize DoGetBorderSize() const SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxComboCtrl(const sipwxComboCtrl &);
    sipwxComboCtrl &operator = (const sipwxComboCtrl &);

    char sipPyMethods[58];
};

sipwxComboCtrl::sipwxComboCtrl():  ::wxComboCtrl(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxComboCtrl::sipwxComboCtrl( ::wxWindow*parent, ::wxWindowID id,const  ::wxString& value,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxValidator& validator,const  ::wxString& name):  ::wxComboCtrl(parent,id,value,pos,size,style,validator,name), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxComboCtrl::~sipwxComboCtrl()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxComboCtrl::DoShowPopup(const  ::wxRect& rect,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_DoShowPopup);

    if (!sipMeth)
    {
         ::wxComboCtrl::DoShowPopup(rect,flags);
        return;
    }

    extern void sipVH__core_181(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRect&,int);

    sipVH__core_181(sipGILState, 0, sipPySelf, sipMeth, rect, flags);
}

void sipwxComboCtrl::DoSetPopupControl( ::wxComboPopup*popup)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_DoSetPopupControl);

    if (!sipMeth)
    {
         ::wxComboCtrl::DoSetPopupControl(popup);
        return;
    }

    extern void sipVH__core_180(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxComboPopup*);

    sipVH__core_180(sipGILState, 0, sipPySelf, sipMeth, popup);
}

bool sipwxComboCtrl::AnimateShow(const  ::wxRect& rect,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_AnimateShow);

    if (!sipMeth)
        return  ::wxComboCtrl::AnimateShow(rect,flags);

    extern bool sipVH__core_179(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRect&,int);

    return sipVH__core_179(sipGILState, 0, sipPySelf, sipMeth, rect, flags);
}

void sipwxComboCtrl::ShowPopup()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_ShowPopup);

    if (!sipMeth)
    {
         ::wxComboCtrl::ShowPopup();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::OnButtonClick()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_OnButtonClick);

    if (!sipMeth)
    {
         ::wxComboCtrl::OnButtonClick();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::HidePopup(bool generateEvent)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_HidePopup);

    if (!sipMeth)
    {
         ::wxComboCtrl::HidePopup(generateEvent);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, generateEvent);
}

bool sipwxComboCtrl::IsKeyPopupToggle(const  ::wxKeyEvent& event) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_IsKeyPopupToggle);

    if (!sipMeth)
        return  ::wxComboCtrl::IsKeyPopupToggle(event);

    extern bool sipVH__core_178(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxKeyEvent&);

    return sipVH__core_178(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxComboCtrl::Dismiss()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_Dismiss);

    if (!sipMeth)
    {
         ::wxComboCtrl::Dismiss();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::CanCopy() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_CanCopy);

    if (!sipMeth)
        return  ::wxComboCtrl::CanCopy();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::CanCut() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_CanCut);

    if (!sipMeth)
        return  ::wxComboCtrl::CanCut();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::CanPaste() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_CanPaste);

    if (!sipMeth)
        return  ::wxComboCtrl::CanPaste();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::CanRedo() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_CanRedo);

    if (!sipMeth)
        return  ::wxComboCtrl::CanRedo();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::CanUndo() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_CanUndo);

    if (!sipMeth)
        return  ::wxComboCtrl::CanUndo();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::Copy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_Copy);

    if (!sipMeth)
    {
         ::wxComboCtrl::Copy();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::Cut()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_Cut);

    if (!sipMeth)
    {
         ::wxComboCtrl::Cut();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::Paste()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_Paste);

    if (!sipMeth)
    {
         ::wxComboCtrl::Paste();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::Redo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_Redo);

    if (!sipMeth)
    {
         ::wxComboCtrl::Redo();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::Undo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_Undo);

    if (!sipMeth)
    {
         ::wxComboCtrl::Undo();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxComboCtrl::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxComboCtrl::DoGetBestClientSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxComboCtrl::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxComboCtrl::DoGetBestSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxComboCtrl::DoThaw();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxComboCtrl::DoFreeze();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxComboCtrl::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxComboCtrl::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__core_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_132(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxComboCtrl::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxComboCtrl::GetDefaultBorder();

    extern  ::wxBorder sipVH__core_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_132(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxComboCtrl::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__core_131(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__core_131(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxComboCtrl::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxComboCtrl::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__core_130(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__core_130(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

 ::wxSize sipwxComboCtrl::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,SIP_NULLPTR,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxComboCtrl::DoGetBorderSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxComboCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__core_129(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__core_129(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxComboCtrl::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxComboCtrl::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__core_128(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__core_128(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxComboCtrl::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxComboCtrl::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__core_127(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__core_127(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxComboCtrl::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,SIP_NULLPTR,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxComboCtrl::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxComboCtrl::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,SIP_NULLPTR,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxComboCtrl::DoGetSize(width,height);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxComboCtrl::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,SIP_NULLPTR,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxComboCtrl::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxComboCtrl::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxComboCtrl::DoEnable(enable);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxComboCtrl::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxComboCtrl::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__core_125(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_125(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxComboCtrl::OnInternalIdle();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxComboCtrl::InitDialog();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxComboCtrl::InheritAttributes();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_Destroy);

    if (!sipMeth)
        return  ::wxComboCtrl::Destroy();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::wxComboCtrl::Validate();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,SIP_NULLPTR,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxComboCtrl::TransferDataToWindow();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,SIP_NULLPTR,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxComboCtrl::TransferDataFromWindow();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxComboCtrl::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,SIP_NULLPTR,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxComboCtrl::SetValidator(validator);
        return;
    }

    extern void sipVH__core_124(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__core_124(sipGILState, 0, sipPySelf, sipMeth, validator);
}

 ::wxValidator* sipwxComboCtrl::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,SIP_NULLPTR,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxComboCtrl::GetValidator();

    extern  ::wxValidator* sipVH__core_123(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_123(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,SIP_NULLPTR,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxComboCtrl::ShouldInheritColours();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,SIP_NULLPTR,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxComboCtrl::HasTransparentBackground();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxComboCtrl::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,SIP_NULLPTR,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxComboCtrl::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__core_122(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_122(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,SIP_NULLPTR,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxComboCtrl::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__core_121(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__core_121(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxComboCtrl::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,SIP_NULLPTR,sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxComboCtrl::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

void sipwxComboCtrl::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,SIP_NULLPTR,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxComboCtrl::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxComboCtrl::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxComboCtrl::AcceptsFocusRecursively();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxComboCtrl::AcceptsFocusFromKeyboard();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxComboCtrl::AcceptsFocus();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxComboCtrl::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxComboCtrl::TryAfter(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxComboCtrl::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxComboCtrl::TryBefore(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxComboCtrl::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxComboCtrl::ProcessEvent(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxComboCtrl::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,SIP_NULLPTR,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxComboCtrl::AddChild(child);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxComboCtrl::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,SIP_NULLPTR,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxComboCtrl::RemoveChild(child);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxComboCtrl::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxComboCtrl::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxComboCtrl::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxComboCtrl::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxComboCtrl::DoEnable(enable) : DoEnable(enable));
}

void sipwxComboCtrl::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxComboCtrl::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxComboCtrl::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxComboCtrl::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxComboCtrl::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxComboCtrl::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxComboCtrl::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxComboCtrl::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxComboCtrl::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxComboCtrl::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxComboCtrl::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxComboCtrl::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxComboCtrl::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxComboCtrl::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxComboCtrl::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxComboCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxComboCtrl::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxComboCtrl::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxComboCtrl::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxComboCtrl::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxComboCtrl::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxComboCtrl::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxComboCtrl::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxComboCtrl::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxComboCtrl::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxComboCtrl::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxComboCtrl::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxComboCtrl::DoFreeze() : DoFreeze());
}

void sipwxComboCtrl::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxComboCtrl::DoThaw() : DoThaw());
}

bool sipwxComboCtrl::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxComboCtrl::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxComboCtrl::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxComboCtrl::TryBefore(event) : TryBefore(event));
}

bool sipwxComboCtrl::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxComboCtrl::TryAfter(event) : TryAfter(event));
}

bool sipwxComboCtrl::sipProtectVirt_AnimateShow(bool sipSelfWasArg,const  ::wxRect& rect,int flags)
{
    return (sipSelfWasArg ?  ::wxComboCtrl::AnimateShow(rect,flags) : AnimateShow(rect,flags));
}

void sipwxComboCtrl::sipProtectVirt_DoSetPopupControl(bool sipSelfWasArg, ::wxComboPopup*popup)
{
    (sipSelfWasArg ?  ::wxComboCtrl::DoSetPopupControl(popup) : DoSetPopupControl(popup));
}

void sipwxComboCtrl::sipProtectVirt_DoShowPopup(bool sipSelfWasArg,const  ::wxRect& rect,int flags)
{
    (sipSelfWasArg ?  ::wxComboCtrl::DoShowPopup(rect,flags) : DoShowPopup(rect,flags));
}


PyDoc_STRVAR(doc_wxComboCtrl_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxComboCtrl_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetMargins, "SetMargins(pt) -> bool\n"
"SetMargins(left, top=-1) -> bool\n"
"\n"
"Attempts to set the control margins.\n"
"");

extern "C" {static PyObject *meth_wxComboCtrl_SetMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint* pt;
        int ptState = 0;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetMargins(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::wxCoord left;
         ::wxCoord top = -1;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_left,
            sipName_top,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_wxComboCtrl, &sipCpp, &left, &top))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetMargins(left,top);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetMargins, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_Copy, "Copy()\n"
"\n"
"Copies the selected text to the clipboard.");

extern "C" {static PyObject *meth_wxComboCtrl_Copy(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_Copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::Copy() : sipCpp->Copy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_Copy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_Create, "Create(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ComboBoxNameStr) -> bool\n"
"\n"
"Creates the combo control for two-step construction.");

extern "C" {static PyObject *meth_wxComboCtrl_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxString& valuedef = wxEmptyString;
        const  ::wxString* value = &valuedef;
        int valueState = 0;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = 0;
        const  ::wxValidator& validatordef = wxDefaultValidator;
        const  ::wxValidator* validator = &validatordef;
        const  ::wxString& namedef = wxComboBoxNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_value,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_validator,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|iJ1J1J1lJ9J1", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxString,&value, &valueState, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxValidator, &validator, sipType_wxString,&name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*value,*pos,*size,style,*validator,*name);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxString *>(value),sipType_wxString,valueState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_Cut, "Cut()\n"
"\n"
"Copies the selected text to the clipboard and removes the selection.");

extern "C" {static PyObject *meth_wxComboCtrl_Cut(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_Cut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::Cut() : sipCpp->Cut());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_Cut, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_Dismiss, "Dismiss()\n"
"\n"
"Dismisses the popup window.");

extern "C" {static PyObject *meth_wxComboCtrl_Dismiss(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_Dismiss(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::Dismiss() : sipCpp->Dismiss());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_Dismiss, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_EnablePopupAnimation, "EnablePopupAnimation(enable=True)\n"
"\n"
"Enables or disables popup animation, if any, depending on the value of\n"
"the argument.");

extern "C" {static PyObject *meth_wxComboCtrl_EnablePopupAnimation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_EnablePopupAnimation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable = 1;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxComboCtrl, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnablePopupAnimation(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_EnablePopupAnimation, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_IsKeyPopupToggle, "IsKeyPopupToggle(event) -> bool\n"
"\n"
"Returns true if given key combination should toggle the popup.");

extern "C" {static PyObject *meth_wxComboCtrl_IsKeyPopupToggle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_IsKeyPopupToggle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxKeyEvent* event;
        const  ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxKeyEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::IsKeyPopupToggle(*event) : sipCpp->IsKeyPopupToggle(*event));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_IsKeyPopupToggle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_PrepareBackground, "PrepareBackground(dc, rect, flags)\n"
"\n"
"Prepare background of combo control or an item in a dropdown list in a\n"
"way typical on platform.");

extern "C" {static PyObject *meth_wxComboCtrl_PrepareBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_PrepareBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags;
        const  ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1i", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->PrepareBackground(*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_PrepareBackground, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_ShouldDrawFocus, "ShouldDrawFocus() -> bool\n"
"\n"
"Returns true if focus indicator should be drawn in the control.");

extern "C" {static PyObject *meth_wxComboCtrl_ShouldDrawFocus(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_ShouldDrawFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ShouldDrawFocus();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_ShouldDrawFocus, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetBitmapDisabled, "GetBitmapDisabled() -> Bitmap\n"
"\n"
"Returns disabled button bitmap that has been set with\n"
"SetButtonBitmaps().");

extern "C" {static PyObject *meth_wxComboCtrl_GetBitmapDisabled(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetBitmapDisabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetBitmapDisabled());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetBitmapDisabled, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetBitmapHover, "GetBitmapHover() -> Bitmap\n"
"\n"
"Returns button mouse hover bitmap that has been set with\n"
"SetButtonBitmaps().");

extern "C" {static PyObject *meth_wxComboCtrl_GetBitmapHover(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetBitmapHover(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetBitmapHover());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetBitmapHover, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetBitmapNormal, "GetBitmapNormal() -> Bitmap\n"
"\n"
"Returns default button bitmap that has been set with\n"
"SetButtonBitmaps().");

extern "C" {static PyObject *meth_wxComboCtrl_GetBitmapNormal(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetBitmapNormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetBitmapNormal());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetBitmapNormal, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetBitmapPressed, "GetBitmapPressed() -> Bitmap\n"
"\n"
"Returns depressed button bitmap that has been set with\n"
"SetButtonBitmaps().");

extern "C" {static PyObject *meth_wxComboCtrl_GetBitmapPressed(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetBitmapPressed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetBitmapPressed());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetBitmapPressed, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetButtonSize, "GetButtonSize() -> Size\n"
"\n"
"Returns current size of the dropdown button.");

extern "C" {static PyObject *meth_wxComboCtrl_GetButtonSize(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetButtonSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetButtonSize());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetButtonSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetCustomPaintWidth, "GetCustomPaintWidth() -> int\n"
"\n"
"Returns custom painted area in control.");

extern "C" {static PyObject *meth_wxComboCtrl_GetCustomPaintWidth(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetCustomPaintWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetCustomPaintWidth();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetCustomPaintWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetHint, "GetHint() -> String\n"
"\n"
"Returns the current hint string.");

extern "C" {static PyObject *meth_wxComboCtrl_GetHint(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetHint());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetHint, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetInsertionPoint, "GetInsertionPoint() -> long\n"
"\n"
"Returns the insertion point for the combo control's text field.");

extern "C" {static PyObject *meth_wxComboCtrl_GetInsertionPoint(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetInsertionPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetInsertionPoint();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetInsertionPoint, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetLastPosition, "GetLastPosition() -> long\n"
"\n"
"Returns the last position in the combo control text field.");

extern "C" {static PyObject *meth_wxComboCtrl_GetLastPosition(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetLastPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetLastPosition();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetLastPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetMargins, "GetMargins() -> Point\n"
"\n"
"Returns the margins used by the control.");

extern "C" {static PyObject *meth_wxComboCtrl_GetMargins(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint(sipCpp->GetMargins());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetMargins, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetPopupControl, "GetPopupControl() -> ComboPopup\n"
"\n"
"Returns current popup interface that has been set with\n"
"SetPopupControl().");

extern "C" {static PyObject *meth_wxComboCtrl_GetPopupControl(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetPopupControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxComboPopup*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPopupControl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxComboPopup,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetPopupControl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetPopupWindow, "GetPopupWindow() -> Window\n"
"\n"
"Returns popup window containing the popup control.");

extern "C" {static PyObject *meth_wxComboCtrl_GetPopupWindow(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetPopupWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPopupWindow();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetPopupWindow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetTextCtrl, "GetTextCtrl() -> TextCtrl\n"
"\n"
"Get the text control which is part of the combo control.");

extern "C" {static PyObject *meth_wxComboCtrl_GetTextCtrl(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetTextCtrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxTextCtrl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetTextCtrl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxTextCtrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetTextCtrl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetTextRect, "GetTextRect() -> Rect\n"
"\n"
"Returns area covered by the text field (includes everything except\n"
"borders and the dropdown button).");

extern "C" {static PyObject *meth_wxComboCtrl_GetTextRect(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetTextRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxRect*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRect(sipCpp->GetTextRect());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetTextRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetValue, "GetValue() -> String\n"
"\n"
"Returns text representation of the current value.");

extern "C" {static PyObject *meth_wxComboCtrl_GetValue(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetValue());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_HidePopup, "HidePopup(generateEvent=False)\n"
"\n"
"Dismisses the popup window.");

extern "C" {static PyObject *meth_wxComboCtrl_HidePopup(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_HidePopup(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool generateEvent = 0;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_generateEvent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxComboCtrl, &sipCpp, &generateEvent))
        {
            if (sipDeprecated(sipName_ComboCtrl,sipName_HidePopup) < 0)
                return SIP_NULLPTR;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::HidePopup(generateEvent) : sipCpp->HidePopup(generateEvent));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_HidePopup, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_IsPopupShown, "IsPopupShown() -> bool\n"
"\n"
"Returns true if the popup is currently shown.");

extern "C" {static PyObject *meth_wxComboCtrl_IsPopupShown(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_IsPopupShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsPopupShown();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_IsPopupShown, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_IsPopupWindowState, "IsPopupWindowState(state) -> bool\n"
"\n"
"Returns true if the popup window is in the given state.");

extern "C" {static PyObject *meth_wxComboCtrl_IsPopupWindowState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_IsPopupWindowState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int state;
        const  ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxComboCtrl, &sipCpp, &state))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsPopupWindowState(state);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_IsPopupWindowState, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_OnButtonClick, "OnButtonClick()\n"
"\n"
"Implement in a derived class to define what happens on dropdown button\n"
"click.");

extern "C" {static PyObject *meth_wxComboCtrl_OnButtonClick(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_OnButtonClick(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::OnButtonClick() : sipCpp->OnButtonClick());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_OnButtonClick, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_Paste, "Paste()\n"
"\n"
"Pastes text from the clipboard to the text field.");

extern "C" {static PyObject *meth_wxComboCtrl_Paste(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_Paste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::Paste() : sipCpp->Paste());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_Paste, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_Popup, "Popup()\n"
"\n"
"Shows the popup portion of the combo control.");

extern "C" {static PyObject *meth_wxComboCtrl_Popup(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_Popup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Popup();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_Popup, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_Remove, "Remove(frm, to)\n"
"\n"
"Removes the text between the two positions in the combo control text\n"
"field.");

extern "C" {static PyObject *meth_wxComboCtrl_Remove(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_Remove(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long frm;
        long to;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_frm,
            sipName_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bll", &sipSelf, sipType_wxComboCtrl, &sipCpp, &frm, &to))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Remove(frm,to);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_Remove, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_Replace, "Replace(frm, to, text)\n"
"\n"
"Replaces the text between two positions with the given text, in the\n"
"combo control text field.");

extern "C" {static PyObject *meth_wxComboCtrl_Replace(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_Replace(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long frm;
        long to;
        const  ::wxString* text;
        int textState = 0;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_frm,
            sipName_to,
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BllJ1", &sipSelf, sipType_wxComboCtrl, &sipCpp, &frm, &to, sipType_wxString,&text, &textState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Replace(frm,to,*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_Replace, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetButtonBitmaps, "SetButtonBitmaps(bmpNormal, pushButtonBg=False, bmpPressed=NullBitmap, bmpHover=NullBitmap, bmpDisabled=NullBitmap)\n"
"\n"
"Sets custom dropdown button graphics.");

extern "C" {static PyObject *meth_wxComboCtrl_SetButtonBitmaps(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetButtonBitmaps(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxBitmap* bmpNormal;
        bool pushButtonBg = 0;
        const  ::wxBitmap& bmpPresseddef = wxNullBitmap;
        const  ::wxBitmap* bmpPressed = &bmpPresseddef;
        const  ::wxBitmap& bmpHoverdef = wxNullBitmap;
        const  ::wxBitmap* bmpHover = &bmpHoverdef;
        const  ::wxBitmap& bmpDisableddef = wxNullBitmap;
        const  ::wxBitmap* bmpDisabled = &bmpDisableddef;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bmpNormal,
            sipName_pushButtonBg,
            sipName_bmpPressed,
            sipName_bmpHover,
            sipName_bmpDisabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|bJ9J9J9", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxBitmap, &bmpNormal, &pushButtonBg, sipType_wxBitmap, &bmpPressed, sipType_wxBitmap, &bmpHover, sipType_wxBitmap, &bmpDisabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetButtonBitmaps(*bmpNormal,pushButtonBg,*bmpPressed,*bmpHover,*bmpDisabled);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetButtonBitmaps, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetButtonPosition, "SetButtonPosition(width=-1, height=-1, side=RIGHT, spacingX=0)\n"
"\n"
"Sets size and position of dropdown button.");

extern "C" {static PyObject *meth_wxComboCtrl_SetButtonPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetButtonPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int width = -1;
        int height = -1;
        int side = wxRIGHT;
        int spacingX = 0;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
            sipName_side,
            sipName_spacingX,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|iiii", &sipSelf, sipType_wxComboCtrl, &sipCpp, &width, &height, &side, &spacingX))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetButtonPosition(width,height,side,spacingX);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetButtonPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetCustomPaintWidth, "SetCustomPaintWidth(width)\n"
"\n"
"Set width, in pixels, of custom painted area in control without\n"
"wxCB_READONLY style.");

extern "C" {static PyObject *meth_wxComboCtrl_SetCustomPaintWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetCustomPaintWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int width;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxComboCtrl, &sipCpp, &width))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCustomPaintWidth(width);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetCustomPaintWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetHint, "SetHint(hint) -> bool\n"
"\n"
"Sets a hint shown in an empty unfocused combo control.");

extern "C" {static PyObject *meth_wxComboCtrl_SetHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* hint;
        int hintState = 0;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxString,&hint, &hintState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetHint(*hint);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(hint),sipType_wxString,hintState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetHint, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetInsertionPoint, "SetInsertionPoint(pos)\n"
"\n"
"Sets the insertion point in the text field.");

extern "C" {static PyObject *meth_wxComboCtrl_SetInsertionPoint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetInsertionPoint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long pos;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxComboCtrl, &sipCpp, &pos))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetInsertionPoint(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetInsertionPoint, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetInsertionPointEnd, "SetInsertionPointEnd()\n"
"\n"
"Sets the insertion point at the end of the combo control text field.");

extern "C" {static PyObject *meth_wxComboCtrl_SetInsertionPointEnd(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetInsertionPointEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetInsertionPointEnd();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetInsertionPointEnd, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetPopupAnchor, "SetPopupAnchor(anchorSide)\n"
"\n"
"Set side of the control to which the popup will align itself.");

extern "C" {static PyObject *meth_wxComboCtrl_SetPopupAnchor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetPopupAnchor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int anchorSide;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_anchorSide,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxComboCtrl, &sipCpp, &anchorSide))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetPopupAnchor(anchorSide);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetPopupAnchor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetPopupControl, "SetPopupControl(popup)\n"
"\n"
"Set popup interface class derived from wxComboPopup.");

extern "C" {static PyObject *meth_wxComboCtrl_SetPopupControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetPopupControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxComboPopup* popup;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_popup,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxComboPopup, &popup))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetPopupControl(popup);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetPopupControl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetPopupExtents, "SetPopupExtents(extLeft, extRight)\n"
"\n"
"Extends popup size horizontally, relative to the edges of the combo\n"
"control.");

extern "C" {static PyObject *meth_wxComboCtrl_SetPopupExtents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetPopupExtents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int extLeft;
        int extRight;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_extLeft,
            sipName_extRight,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxComboCtrl, &sipCpp, &extLeft, &extRight))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetPopupExtents(extLeft,extRight);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetPopupExtents, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetPopupMaxHeight, "SetPopupMaxHeight(height)\n"
"\n"
"Sets preferred maximum height of the popup.");

extern "C" {static PyObject *meth_wxComboCtrl_SetPopupMaxHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetPopupMaxHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int height;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxComboCtrl, &sipCpp, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetPopupMaxHeight(height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetPopupMaxHeight, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetPopupMinWidth, "SetPopupMinWidth(width)\n"
"\n"
"Sets minimum width of the popup.");

extern "C" {static PyObject *meth_wxComboCtrl_SetPopupMinWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetPopupMinWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int width;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxComboCtrl, &sipCpp, &width))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetPopupMinWidth(width);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetPopupMinWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetSelection, "SetSelection(frm, to)\n"
"\n"
"Selects the text between the two positions, in the combo control text\n"
"field.");

extern "C" {static PyObject *meth_wxComboCtrl_SetSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long frm;
        long to;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_frm,
            sipName_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bll", &sipSelf, sipType_wxComboCtrl, &sipCpp, &frm, &to))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSelection(frm,to);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetText, "SetText(value)\n"
"\n"
"Sets the text for the text field without affecting the popup.");

extern "C" {static PyObject *meth_wxComboCtrl_SetText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* value;
        int valueState = 0;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxString,&value, &valueState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetText(*value);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(value),sipType_wxString,valueState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetTextCtrlStyle, "SetTextCtrlStyle(style)\n"
"\n"
"Set a custom window style for the embedded wxTextCtrl.");

extern "C" {static PyObject *meth_wxComboCtrl_SetTextCtrlStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetTextCtrlStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int style;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxComboCtrl, &sipCpp, &style))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTextCtrlStyle(style);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetTextCtrlStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetValue, "SetValue(value)\n"
"\n"
"Sets the text for the combo control text field.");

extern "C" {static PyObject *meth_wxComboCtrl_SetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* value;
        int valueState = 0;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxString,&value, &valueState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetValue(*value);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(value),sipType_wxString,valueState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetValueByUser, "SetValueByUser(value)\n"
"\n"
"Changes value of the control as if user had done it by selecting an\n"
"item from a combo box drop-down list.");

extern "C" {static PyObject *meth_wxComboCtrl_SetValueByUser(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetValueByUser(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* value;
        int valueState = 0;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxString,&value, &valueState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetValueByUser(*value);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(value),sipType_wxString,valueState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetValueByUser, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_ShowPopup, "ShowPopup()\n"
"\n"
"Show the popup.");

extern "C" {static PyObject *meth_wxComboCtrl_ShowPopup(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_ShowPopup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            if (sipDeprecated(sipName_ComboCtrl,sipName_ShowPopup) < 0)
                return SIP_NULLPTR;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::ShowPopup() : sipCpp->ShowPopup());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_ShowPopup, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_Undo, "Undo()\n"
"\n"
"Undoes the last edit in the text field.");

extern "C" {static PyObject *meth_wxComboCtrl_Undo(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_Undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::Undo() : sipCpp->Undo());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_Undo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_UseAltPopupWindow, "UseAltPopupWindow(enable=True)\n"
"\n"
"Enable or disable usage of an alternative popup window, which\n"
"guarantees ability to focus the popup control, and allows common\n"
"native controls to function normally.");

extern "C" {static PyObject *meth_wxComboCtrl_UseAltPopupWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_UseAltPopupWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable = 1;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxComboCtrl, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->UseAltPopupWindow(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_UseAltPopupWindow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetFeatures, "GetFeatures() -> int\n"
"\n"
"Returns features supported by wxComboCtrl.");

extern "C" {static PyObject *meth_wxComboCtrl_GetFeatures(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetFeatures(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxComboCtrl::GetFeatures();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetFeatures, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxComboCtrl_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxComboCtrl::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetClientAreaOrigin, doc_wxComboCtrl_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxComboCtrl_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_Validate, doc_wxComboCtrl_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxComboCtrl_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_TransferDataToWindow, doc_wxComboCtrl_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxComboCtrl_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_TransferDataFromWindow, doc_wxComboCtrl_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxComboCtrl_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_InitDialog, doc_wxComboCtrl_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxComboCtrl_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_AcceptsFocus, doc_wxComboCtrl_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxComboCtrl_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_AcceptsFocusRecursively, doc_wxComboCtrl_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxComboCtrl_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_AcceptsFocusFromKeyboard, doc_wxComboCtrl_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxComboCtrl_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_AddChild, doc_wxComboCtrl_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxComboCtrl_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_RemoveChild, doc_wxComboCtrl_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxComboCtrl_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_InheritAttributes, doc_wxComboCtrl_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxComboCtrl_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_ShouldInheritColours, doc_wxComboCtrl_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxComboCtrl_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_OnInternalIdle, doc_wxComboCtrl_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxComboCtrl_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetMainWindowOfCompositeControl, doc_wxComboCtrl_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxComboCtrl_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxComboCtrl, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_InformFirstDirection, doc_wxComboCtrl_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxComboCtrl_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxComboCtrl, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetCanFocus, doc_wxComboCtrl_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxComboCtrl_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_Destroy, doc_wxComboCtrl_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxComboCtrl_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_SetValidator, doc_wxComboCtrl_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxComboCtrl_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetValidator, doc_wxComboCtrl_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth_wxComboCtrl_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
         ::wxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxComboCtrl, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxComboCtrl::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_EnableVisibleFocus, doc_wxComboCtrl_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxComboCtrl_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_ProcessEvent, doc_wxComboCtrl_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxComboCtrl_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxComboCtrl, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoEnable, doc_wxComboCtrl_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxComboCtrl_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxComboCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoGetPosition, doc_wxComboCtrl_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxComboCtrl_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxComboCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoGetSize, doc_wxComboCtrl_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxComboCtrl_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxComboCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoGetClientSize, doc_wxComboCtrl_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxComboCtrl_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoGetBestSize, doc_wxComboCtrl_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxComboCtrl_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoGetBestClientSize, doc_wxComboCtrl_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxComboCtrl_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxComboCtrl, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoSetSize, doc_wxComboCtrl_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxComboCtrl_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxComboCtrl, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoSetClientSize, doc_wxComboCtrl_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxComboCtrl_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxComboCtrl, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoSetSizeHints, doc_wxComboCtrl_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxComboCtrl_DoGetBorderSize(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoGetBorderSize, doc_wxComboCtrl_DoGetBorderSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxComboCtrl_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxComboCtrl, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoMoveWindow, doc_wxComboCtrl_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxComboCtrl_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoSetWindowVariant, doc_wxComboCtrl_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxComboCtrl_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetDefaultBorder, doc_wxComboCtrl_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxComboCtrl_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetDefaultBorderForControl, doc_wxComboCtrl_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxComboCtrl_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoFreeze, doc_wxComboCtrl_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxComboCtrl_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoThaw, doc_wxComboCtrl_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxComboCtrl_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxComboCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxComboCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_HasTransparentBackground, doc_wxComboCtrl_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxComboCtrl_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_TryBefore, doc_wxComboCtrl_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxComboCtrl_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_TryAfter, doc_wxComboCtrl_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxComboCtrl_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxComboCtrl::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_AnimateShow, "AnimateShow(rect, flags) -> bool\n"
"\n"
"This member function is not normally called in application code.");

extern "C" {static PyObject *meth_wxComboCtrl_AnimateShow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_AnimateShow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRect* rect;
        int rectState = 0;
        int flags;
        sipwxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1i", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxRect, &rect, &rectState, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_AnimateShow(sipSelfWasArg,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_AnimateShow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoSetPopupControl, "DoSetPopupControl(popup)\n"
"\n"
"This member function is not normally called in application code.");

extern "C" {static PyObject *meth_wxComboCtrl_DoSetPopupControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoSetPopupControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxComboPopup* popup;
        sipwxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_popup,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxComboPopup, &popup))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetPopupControl(sipSelfWasArg,popup);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoSetPopupControl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxComboCtrl_DoShowPopup, "DoShowPopup(rect, flags)\n"
"\n"
"This member function is not normally called in application code.");

extern "C" {static PyObject *meth_wxComboCtrl_DoShowPopup(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxComboCtrl_DoShowPopup(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRect* rect;
        int rectState = 0;
        int flags;
        sipwxComboCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1i", &sipSelf, sipType_wxComboCtrl, &sipCpp, sipType_wxRect, &rect, &rectState, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoShowPopup(sipSelfWasArg,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ComboCtrl, sipName_DoShowPopup, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxComboCtrl(void *, const sipTypeDef *);}
static void *cast_wxComboCtrl(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxComboCtrl *sipCpp = reinterpret_cast< ::wxComboCtrl *>(sipCppV);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    if (targetType == sipType_wxTextEntry)
        return static_cast< ::wxTextEntry *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxComboCtrl(void *, int);}
static void release_wxComboCtrl(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxComboCtrl *>(sipCppV);
    else
        delete reinterpret_cast< ::wxComboCtrl *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxComboCtrl(Py_ssize_t);}
static void *array_wxComboCtrl(Py_ssize_t sipNrElem)
{
    return new  ::wxComboCtrl[sipNrElem];
}


extern "C" {static void dealloc_wxComboCtrl(sipSimpleWrapper *);}
static void dealloc_wxComboCtrl(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxComboCtrl *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxComboCtrl(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxComboCtrl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxComboCtrl(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxComboCtrl *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxComboCtrl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxString& valuedef = wxEmptyString;
        const  ::wxString* value = &valuedef;
        int valueState = 0;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = 0;
        const  ::wxValidator& validatordef = wxDefaultValidator;
        const  ::wxValidator* validator = &validatordef;
        const  ::wxString& namedef = wxComboBoxNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_value,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_validator,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1J1lJ9J1", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxString,&value, &valueState, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxValidator, &validator, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxComboCtrl(parent,id,*value,*pos,*size,style,*validator,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(value),sipType_wxString,valueState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxComboCtrl[] = {{93, 255, 0}, {556, 255, 1}};


static PyMethodDef methods_wxComboCtrl[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxComboCtrl_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxComboCtrl_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxComboCtrl_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), SIP_MLMETH_CAST(meth_wxComboCtrl_AddChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_AddChild)},
    {SIP_MLNAME_CAST(sipName_AnimateShow), SIP_MLMETH_CAST(meth_wxComboCtrl_AnimateShow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_AnimateShow)},
    {SIP_MLNAME_CAST(sipName_Copy), meth_wxComboCtrl_Copy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_Copy)},
    {SIP_MLNAME_CAST(sipName_Create), SIP_MLMETH_CAST(meth_wxComboCtrl_Create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_Create)},
    {SIP_MLNAME_CAST(sipName_Cut), meth_wxComboCtrl_Cut, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_Cut)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxComboCtrl_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_Destroy)},
    {SIP_MLNAME_CAST(sipName_Dismiss), meth_wxComboCtrl_Dismiss, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_Dismiss)},
    {SIP_MLNAME_CAST(sipName_DoEnable), SIP_MLMETH_CAST(meth_wxComboCtrl_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), meth_wxComboCtrl_DoFreeze, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), meth_wxComboCtrl_DoGetBestClientSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), meth_wxComboCtrl_DoGetBestSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), meth_wxComboCtrl_DoGetBorderSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), SIP_MLMETH_CAST(meth_wxComboCtrl_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), SIP_MLMETH_CAST(meth_wxComboCtrl_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), SIP_MLMETH_CAST(meth_wxComboCtrl_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), SIP_MLMETH_CAST(meth_wxComboCtrl_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), SIP_MLMETH_CAST(meth_wxComboCtrl_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetPopupControl), SIP_MLMETH_CAST(meth_wxComboCtrl_DoSetPopupControl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoSetPopupControl)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), SIP_MLMETH_CAST(meth_wxComboCtrl_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), SIP_MLMETH_CAST(meth_wxComboCtrl_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), SIP_MLMETH_CAST(meth_wxComboCtrl_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoShowPopup), SIP_MLMETH_CAST(meth_wxComboCtrl_DoShowPopup), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoShowPopup)},
    {SIP_MLNAME_CAST(sipName_DoThaw), meth_wxComboCtrl_DoThaw, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EnablePopupAnimation), SIP_MLMETH_CAST(meth_wxComboCtrl_EnablePopupAnimation), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_EnablePopupAnimation)},
    {SIP_MLNAME_CAST(sipName_EnableVisibleFocus), SIP_MLMETH_CAST(meth_wxComboCtrl_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_EnableVisibleFocus)},
    {SIP_MLNAME_CAST(sipName_GetBitmapDisabled), meth_wxComboCtrl_GetBitmapDisabled, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetBitmapDisabled)},
    {SIP_MLNAME_CAST(sipName_GetBitmapHover), meth_wxComboCtrl_GetBitmapHover, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetBitmapHover)},
    {SIP_MLNAME_CAST(sipName_GetBitmapNormal), meth_wxComboCtrl_GetBitmapNormal, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetBitmapNormal)},
    {SIP_MLNAME_CAST(sipName_GetBitmapPressed), meth_wxComboCtrl_GetBitmapPressed, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetBitmapPressed)},
    {SIP_MLNAME_CAST(sipName_GetButtonSize), meth_wxComboCtrl_GetButtonSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetButtonSize)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), SIP_MLMETH_CAST(meth_wxComboCtrl_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxComboCtrl_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetCustomPaintWidth), meth_wxComboCtrl_GetCustomPaintWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetCustomPaintWidth)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), meth_wxComboCtrl_GetDefaultBorder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), meth_wxComboCtrl_GetDefaultBorderForControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetFeatures), meth_wxComboCtrl_GetFeatures, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetFeatures)},
    {SIP_MLNAME_CAST(sipName_GetHint), meth_wxComboCtrl_GetHint, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetHint)},
    {SIP_MLNAME_CAST(sipName_GetInsertionPoint), meth_wxComboCtrl_GetInsertionPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetInsertionPoint)},
    {SIP_MLNAME_CAST(sipName_GetLastPosition), meth_wxComboCtrl_GetLastPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetLastPosition)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxComboCtrl_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetMargins), meth_wxComboCtrl_GetMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetMargins)},
    {SIP_MLNAME_CAST(sipName_GetPopupControl), meth_wxComboCtrl_GetPopupControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetPopupControl)},
    {SIP_MLNAME_CAST(sipName_GetPopupWindow), meth_wxComboCtrl_GetPopupWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetPopupWindow)},
    {SIP_MLNAME_CAST(sipName_GetTextCtrl), meth_wxComboCtrl_GetTextCtrl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetTextCtrl)},
    {SIP_MLNAME_CAST(sipName_GetTextRect), meth_wxComboCtrl_GetTextRect, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetTextRect)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxComboCtrl_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetValidator)},
    {SIP_MLNAME_CAST(sipName_GetValue), meth_wxComboCtrl_GetValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_GetValue)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), meth_wxComboCtrl_HasTransparentBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_HidePopup), SIP_MLMETH_CAST(meth_wxComboCtrl_HidePopup), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_HidePopup)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), SIP_MLMETH_CAST(meth_wxComboCtrl_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxComboCtrl_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxComboCtrl_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_InitDialog)},
    {SIP_MLNAME_CAST(sipName_IsKeyPopupToggle), SIP_MLMETH_CAST(meth_wxComboCtrl_IsKeyPopupToggle), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_IsKeyPopupToggle)},
    {SIP_MLNAME_CAST(sipName_IsPopupShown), meth_wxComboCtrl_IsPopupShown, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_IsPopupShown)},
    {SIP_MLNAME_CAST(sipName_IsPopupWindowState), SIP_MLMETH_CAST(meth_wxComboCtrl_IsPopupWindowState), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_IsPopupWindowState)},
    {SIP_MLNAME_CAST(sipName_OnButtonClick), meth_wxComboCtrl_OnButtonClick, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_OnButtonClick)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxComboCtrl_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_Paste), meth_wxComboCtrl_Paste, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_Paste)},
    {SIP_MLNAME_CAST(sipName_Popup), meth_wxComboCtrl_Popup, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_Popup)},
    {SIP_MLNAME_CAST(sipName_PrepareBackground), SIP_MLMETH_CAST(meth_wxComboCtrl_PrepareBackground), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_PrepareBackground)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), SIP_MLMETH_CAST(meth_wxComboCtrl_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_Remove), SIP_MLMETH_CAST(meth_wxComboCtrl_Remove), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_Remove)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), SIP_MLMETH_CAST(meth_wxComboCtrl_RemoveChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_Replace), SIP_MLMETH_CAST(meth_wxComboCtrl_Replace), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_Replace)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), meth_wxComboCtrl_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_SetButtonBitmaps), SIP_MLMETH_CAST(meth_wxComboCtrl_SetButtonBitmaps), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetButtonBitmaps)},
    {SIP_MLNAME_CAST(sipName_SetButtonPosition), SIP_MLMETH_CAST(meth_wxComboCtrl_SetButtonPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetButtonPosition)},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), SIP_MLMETH_CAST(meth_wxComboCtrl_SetCanFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetCustomPaintWidth), SIP_MLMETH_CAST(meth_wxComboCtrl_SetCustomPaintWidth), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetCustomPaintWidth)},
    {SIP_MLNAME_CAST(sipName_SetHint), SIP_MLMETH_CAST(meth_wxComboCtrl_SetHint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetHint)},
    {SIP_MLNAME_CAST(sipName_SetInsertionPoint), SIP_MLMETH_CAST(meth_wxComboCtrl_SetInsertionPoint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetInsertionPoint)},
    {SIP_MLNAME_CAST(sipName_SetInsertionPointEnd), meth_wxComboCtrl_SetInsertionPointEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetInsertionPointEnd)},
    {SIP_MLNAME_CAST(sipName_SetMargins), SIP_MLMETH_CAST(meth_wxComboCtrl_SetMargins), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetMargins)},
    {SIP_MLNAME_CAST(sipName_SetPopupAnchor), SIP_MLMETH_CAST(meth_wxComboCtrl_SetPopupAnchor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetPopupAnchor)},
    {SIP_MLNAME_CAST(sipName_SetPopupControl), SIP_MLMETH_CAST(meth_wxComboCtrl_SetPopupControl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetPopupControl)},
    {SIP_MLNAME_CAST(sipName_SetPopupExtents), SIP_MLMETH_CAST(meth_wxComboCtrl_SetPopupExtents), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetPopupExtents)},
    {SIP_MLNAME_CAST(sipName_SetPopupMaxHeight), SIP_MLMETH_CAST(meth_wxComboCtrl_SetPopupMaxHeight), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetPopupMaxHeight)},
    {SIP_MLNAME_CAST(sipName_SetPopupMinWidth), SIP_MLMETH_CAST(meth_wxComboCtrl_SetPopupMinWidth), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetPopupMinWidth)},
    {SIP_MLNAME_CAST(sipName_SetSelection), SIP_MLMETH_CAST(meth_wxComboCtrl_SetSelection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetSelection)},
    {SIP_MLNAME_CAST(sipName_SetText), SIP_MLMETH_CAST(meth_wxComboCtrl_SetText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetText)},
    {SIP_MLNAME_CAST(sipName_SetTextCtrlStyle), SIP_MLMETH_CAST(meth_wxComboCtrl_SetTextCtrlStyle), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetTextCtrlStyle)},
    {SIP_MLNAME_CAST(sipName_SetValidator), SIP_MLMETH_CAST(meth_wxComboCtrl_SetValidator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetValidator)},
    {SIP_MLNAME_CAST(sipName_SetValue), SIP_MLMETH_CAST(meth_wxComboCtrl_SetValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetValue)},
    {SIP_MLNAME_CAST(sipName_SetValueByUser), SIP_MLMETH_CAST(meth_wxComboCtrl_SetValueByUser), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_SetValueByUser)},
    {SIP_MLNAME_CAST(sipName_ShouldDrawFocus), meth_wxComboCtrl_ShouldDrawFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_ShouldDrawFocus)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxComboCtrl_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_ShowPopup), meth_wxComboCtrl_ShowPopup, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_ShowPopup)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxComboCtrl_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxComboCtrl_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth_wxComboCtrl_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth_wxComboCtrl_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Undo), meth_wxComboCtrl_Undo, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_Undo)},
    {SIP_MLNAME_CAST(sipName_UseAltPopupWindow), SIP_MLMETH_CAST(meth_wxComboCtrl_UseAltPopupWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxComboCtrl_UseAltPopupWindow)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxComboCtrl_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxComboCtrl_Validate)}
};

sipVariableDef variables_wxComboCtrl[] = {
    {PropertyVariable, sipName_Value, &methods_wxComboCtrl[49], &methods_wxComboCtrl[85], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_TextRect, &methods_wxComboCtrl[47], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_TextCtrl, &methods_wxComboCtrl[46], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_PopupWindow, &methods_wxComboCtrl[45], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_PopupControl, &methods_wxComboCtrl[44], &methods_wxComboCtrl[77], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Margins, &methods_wxComboCtrl[43], &methods_wxComboCtrl[75], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_LastPosition, &methods_wxComboCtrl[41], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_InsertionPoint, &methods_wxComboCtrl[40], &methods_wxComboCtrl[73], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Hint, &methods_wxComboCtrl[39], &methods_wxComboCtrl[72], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CustomPaintWidth, &methods_wxComboCtrl[35], &methods_wxComboCtrl[71], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ButtonSize, &methods_wxComboCtrl[32], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BitmapPressed, &methods_wxComboCtrl[31], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BitmapNormal, &methods_wxComboCtrl[30], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BitmapHover, &methods_wxComboCtrl[29], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BitmapDisabled, &methods_wxComboCtrl[28], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxComboCtrl, "ComboCtrl()\n"
"ComboCtrl(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ComboBoxNameStr)\n"
"\n"
"A combo control is a generic combobox that allows totally custom\n"
"popup.");


sipClassTypeDef sipTypeDef__core_wxComboCtrl = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxComboCtrl,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_ComboCtrl,
        {0, 0, 1},
        97, methods_wxComboCtrl,
        0, SIP_NULLPTR,
        15, variables_wxComboCtrl,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxComboCtrl,
    -1,
    -1,
    supers_wxComboCtrl,
    SIP_NULLPTR,
    init_type_wxComboCtrl,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxComboCtrl,
    SIP_NULLPTR,
    array_wxComboCtrl,
    SIP_NULLPTR,
    release_wxComboCtrl,
    cast_wxComboCtrl,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
