/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_aui.h"

        #include <wx/aui/tabmdi.h>

        #include <wx/aui/tabmdi.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/window.h>
        #include <wx/toolbar.h>
        #include <wx/statusbr.h>
        #include <wx/icon.h>
        #include <wx/iconbndl.h>
        #include <wx/menu.h>
        #include <wx/mdi.h>
        #include <wx/toplevel.h>
            #include <wx/toplevel.h>
        #include <wx/region.h>
        #include <wx/graphics.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    void _wxAuiMDIChildFrame_SetStatusWidths(wxAuiMDIChildFrame* self, const wxArrayInt* widths)
    {
        const int* ptr = &widths->front();
        self->SetStatusWidths(widths->size(), ptr);
    }


class sipwxAuiMDIChildFrame : public  ::wxAuiMDIChildFrame
{
public:
    sipwxAuiMDIChildFrame();
    sipwxAuiMDIChildFrame( ::wxAuiMDIParentFrame*, ::wxWindowID,const  ::wxString&,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxString&);
    virtual ~sipwxAuiMDIChildFrame();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool Show(bool) SIP_OVERRIDE;
    bool IsTopLevel() const SIP_OVERRIDE;
    void Activate() SIP_OVERRIDE;
    bool ShouldPreventAppExit() const SIP_OVERRIDE;
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
     ::wxSize DoGetBorderSize() const SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;
    void DoGiveHelp(const  ::wxString&,bool) SIP_OVERRIDE;
     ::wxStatusBar* OnCreateStatusBar(int,long, ::wxWindowID,const  ::wxString&) SIP_OVERRIDE;
     ::wxToolBar* OnCreateToolBar(long, ::wxWindowID,const  ::wxString&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxAuiMDIChildFrame(const sipwxAuiMDIChildFrame &);
    sipwxAuiMDIChildFrame &operator = (const sipwxAuiMDIChildFrame &);

    char sipPyMethods[47];
};

sipwxAuiMDIChildFrame::sipwxAuiMDIChildFrame():  ::wxAuiMDIChildFrame(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiMDIChildFrame::sipwxAuiMDIChildFrame( ::wxAuiMDIParentFrame*parent, ::wxWindowID winid,const  ::wxString& title,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxString& name):  ::wxAuiMDIChildFrame(parent,winid,title,pos,size,style,name), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiMDIChildFrame::~sipwxAuiMDIChildFrame()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxAuiMDIChildFrame::Show(bool show)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_Show);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::Show(show);

    extern bool sipVH__aui_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH__aui_67(sipGILState, 0, sipPySelf, sipMeth, show);
}

bool sipwxAuiMDIChildFrame::IsTopLevel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_IsTopLevel);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::IsTopLevel();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIChildFrame::Activate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_Activate);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::Activate();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIChildFrame::ShouldPreventAppExit() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_ShouldPreventAppExit);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::ShouldPreventAppExit();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxAuiMDIChildFrame::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::DoGetBestClientSize();

    extern  ::wxSize sipVH__aui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_23(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxAuiMDIChildFrame::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::DoGetBestSize();

    extern  ::wxSize sipVH__aui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_23(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIChildFrame::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::DoThaw();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIChildFrame::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::DoFreeze();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxAuiMDIChildFrame::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__aui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_26(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxAuiMDIChildFrame::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::GetDefaultBorder();

    extern  ::wxBorder sipVH__aui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_26(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIChildFrame::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__aui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__aui_25(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxAuiMDIChildFrame::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__aui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__aui_24(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

 ::wxSize sipwxAuiMDIChildFrame::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::DoGetBorderSize();

    extern  ::wxSize sipVH__aui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_23(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIChildFrame::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__aui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__aui_22(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxAuiMDIChildFrame::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__aui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__aui_21(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxAuiMDIChildFrame::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__aui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__aui_20(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxAuiMDIChildFrame::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__aui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__aui_19(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxAuiMDIChildFrame::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::DoGetSize(width,height);
        return;
    }

    extern void sipVH__aui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__aui_19(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxAuiMDIChildFrame::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__aui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__aui_19(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxAuiMDIChildFrame::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::DoEnable(enable);
        return;
    }

    extern void sipVH__aui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__aui_13(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxAuiMDIChildFrame::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__aui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_18(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIChildFrame::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::OnInternalIdle();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIChildFrame::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::InitDialog();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIChildFrame::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::InheritAttributes();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIChildFrame::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_Destroy);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::Destroy();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIChildFrame::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::Validate();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIChildFrame::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::TransferDataToWindow();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIChildFrame::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::TransferDataFromWindow();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIChildFrame::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::SetValidator(validator);
        return;
    }

    extern void sipVH__aui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__aui_17(sipGILState, 0, sipPySelf, sipMeth, validator);
}

 ::wxValidator* sipwxAuiMDIChildFrame::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::GetValidator();

    extern  ::wxValidator* sipVH__aui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIChildFrame::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,SIP_NULLPTR,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::ShouldInheritColours();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIChildFrame::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::HasTransparentBackground();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxAuiMDIChildFrame::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,SIP_NULLPTR,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__aui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_15(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIChildFrame::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__aui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__aui_14(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxAuiMDIChildFrame::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__aui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__aui_13(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

void sipwxAuiMDIChildFrame::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__aui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__aui_13(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxAuiMDIChildFrame::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::AcceptsFocusRecursively();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIChildFrame::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::AcceptsFocusFromKeyboard();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIChildFrame::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::AcceptsFocus();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIChildFrame::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::TryAfter(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxAuiMDIChildFrame::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::TryBefore(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxAuiMDIChildFrame::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::ProcessEvent(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxAuiMDIChildFrame::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,SIP_NULLPTR,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::AddChild(child);
        return;
    }

    extern void sipVH__aui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__aui_11(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxAuiMDIChildFrame::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,SIP_NULLPTR,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::RemoveChild(child);
        return;
    }

    extern void sipVH__aui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__aui_11(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxAuiMDIChildFrame::DoGiveHelp(const  ::wxString& text,bool show)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,SIP_NULLPTR,sipName_DoGiveHelp);

    if (!sipMeth)
    {
         ::wxAuiMDIChildFrame::DoGiveHelp(text,show);
        return;
    }

    extern void sipVH__aui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&,bool);

    sipVH__aui_10(sipGILState, 0, sipPySelf, sipMeth, text, show);
}

 ::wxStatusBar* sipwxAuiMDIChildFrame::OnCreateStatusBar(int number,long style, ::wxWindowID id,const  ::wxString& name)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,SIP_NULLPTR,sipName_OnCreateStatusBar);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::OnCreateStatusBar(number,style,id,name);

    extern  ::wxStatusBar* sipVH__aui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,long, ::wxWindowID,const  ::wxString&);

    return sipVH__aui_9(sipGILState, 0, sipPySelf, sipMeth, number, style, id, name);
}

 ::wxToolBar* sipwxAuiMDIChildFrame::OnCreateToolBar(long style, ::wxWindowID id,const  ::wxString& name)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,SIP_NULLPTR,sipName_OnCreateToolBar);

    if (!sipMeth)
        return  ::wxAuiMDIChildFrame::OnCreateToolBar(style,id,name);

    extern  ::wxToolBar* sipVH__aui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxWindowID,const  ::wxString&);

    return sipVH__aui_8(sipGILState, 0, sipPySelf, sipMeth, style, id, name);
}

void sipwxAuiMDIChildFrame::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxAuiMDIChildFrame::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxAuiMDIChildFrame::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxAuiMDIChildFrame::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoEnable(enable) : DoEnable(enable));
}

void sipwxAuiMDIChildFrame::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxAuiMDIChildFrame::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxAuiMDIChildFrame::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxAuiMDIChildFrame::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxAuiMDIChildFrame::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxAuiMDIChildFrame::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxAuiMDIChildFrame::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxAuiMDIChildFrame::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxAuiMDIChildFrame::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxAuiMDIChildFrame::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxAuiMDIChildFrame::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxAuiMDIChildFrame::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiMDIChildFrame::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxAuiMDIChildFrame::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiMDIChildFrame::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxAuiMDIChildFrame::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoFreeze() : DoFreeze());
}

void sipwxAuiMDIChildFrame::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxAuiMDIChildFrame::DoThaw() : DoThaw());
}

bool sipwxAuiMDIChildFrame::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxAuiMDIChildFrame::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxAuiMDIChildFrame::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxAuiMDIChildFrame::TryBefore(event) : TryBefore(event));
}

bool sipwxAuiMDIChildFrame::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxAuiMDIChildFrame::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_Create, "Create(parent, winid=wx.ID_ANY, title=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.DEFAULT_FRAME_STYLE, name=wx.FrameNameStr) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiMDIParentFrame* parent;
         ::wxWindowID winid = wxID_ANY;
        const  ::wxString& titledef = wxEmptyString;
        const  ::wxString* title = &titledef;
        int titleState = 0;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxDEFAULT_FRAME_STYLE;
        const  ::wxString& namedef = wxFrameNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_winid,
            sipName_title,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|iJ1J1J1lJ1", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxAuiMDIParentFrame, &parent, &winid, sipType_wxString,&title, &titleState, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,winid,*title,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS

            sipTransferTo(sipSelf, SIP_NULLPTR);
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_SetMenuBar, "SetMenuBar(menuBar)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_SetMenuBar(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_SetMenuBar(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxMenuBar* menuBar;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_menuBar,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxMenuBar, &menuBar))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMenuBar(menuBar);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_SetMenuBar, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_GetMenuBar, "GetMenuBar() -> wx.MenuBar");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_GetMenuBar(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_GetMenuBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxMenuBar*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetMenuBar();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxMenuBar,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_GetMenuBar, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_SetTitle, "SetTitle(title)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_SetTitle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_SetTitle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* title;
        int titleState = 0;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_title,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxString,&title, &titleState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTitle(*title);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_SetTitle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_GetTitle, "GetTitle() -> String");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_GetTitle(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_GetTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetTitle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_GetTitle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_SetIcons, "SetIcons(icons)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_SetIcons(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_SetIcons(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxIconBundle* icons;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_icons,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxIconBundle, &icons))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetIcons(*icons);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_SetIcons, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_GetIcons, "GetIcons() -> wx.IconBundle");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_GetIcons(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_GetIcons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxIconBundle*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxIconBundle(sipCpp->GetIcons());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxIconBundle,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_GetIcons, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_SetIcon, "SetIcon(icon)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_SetIcon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_SetIcon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxIcon* icon;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_icon,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxIcon, &icon))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetIcon(*icon);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_SetIcon, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_GetIcon, "GetIcon() -> wx.Icon");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_GetIcon(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_GetIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxIcon*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxIcon(sipCpp->GetIcon());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxIcon,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_GetIcon, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_Activate, "Activate()");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_Activate(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_Activate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::Activate() : sipCpp->Activate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_Activate, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_Destroy, "Destroy() -> bool\n"
"\n"
"Destroys the window safely.");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_Destroy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_Show, "Show(show=True) -> bool\n"
"\n"
"Shows or hides the window.");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_Show(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_Show(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool show = 1;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_show,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &show))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::Show(show) : sipCpp->Show(show));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_Show, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_CreateStatusBar, "CreateStatusBar(number=1, style=1, winid=1, name=wx.EmptyString) -> wx.StatusBar");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_CreateStatusBar(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_CreateStatusBar(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int number = 1;
        long style = 1;
         ::wxWindowID winid = 1;
        const  ::wxString& namedef = wxEmptyString;
        const  ::wxString* name = &namedef;
        int nameState = 0;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_number,
            sipName_style,
            sipName_winid,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|iliJ1", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &number, &style, &winid, sipType_wxString,&name, &nameState))
        {
             ::wxStatusBar*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CreateStatusBar(number,style,winid,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxStatusBar,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_CreateStatusBar, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_GetStatusBar, "GetStatusBar() -> wx.StatusBar");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_GetStatusBar(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_GetStatusBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxStatusBar*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetStatusBar();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxStatusBar,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_GetStatusBar, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_SetStatusText, "SetStatusText(text, number=0)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_SetStatusText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_SetStatusText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* text;
        int textState = 0;
        int number = 0;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
            sipName_number,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxString,&text, &textState, &number))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetStatusText(*text,number);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_SetStatusText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_SetStatusWidths, "SetStatusWidths(widths)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_SetStatusWidths(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_SetStatusWidths(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxArrayInt* widths;
        int widthsState = 0;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_widths,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxArrayInt,&widths, &widthsState))
        {
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxAuiMDIChildFrame_SetStatusWidths(sipCpp, widths);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
            sipReleaseType(const_cast< ::wxArrayInt *>(widths),sipType_wxArrayInt,widthsState);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_SetStatusWidths, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_CreateToolBar, "CreateToolBar(style, winid, name) -> wx.ToolBar");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_CreateToolBar(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_CreateToolBar(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long style;
         ::wxWindowID winid;
        const  ::wxString* name;
        int nameState = 0;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_style,
            sipName_winid,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BliJ1", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &style, &winid, sipType_wxString,&name, &nameState))
        {
             ::wxToolBar*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CreateToolBar(style,winid,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBar,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_CreateToolBar, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_GetToolBar, "GetToolBar() -> wx.ToolBar");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_GetToolBar(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_GetToolBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxToolBar*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolBar();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBar,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_GetToolBar, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_Maximize, "Maximize(maximize=True)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_Maximize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_Maximize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool maximize = 1;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maximize,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &maximize))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Maximize(maximize);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_Maximize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_Restore, "Restore()");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_Restore(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_Restore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Restore();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_Restore, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_Iconize, "Iconize(iconize=True)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_Iconize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_Iconize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool iconize = 1;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_iconize,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &iconize))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Iconize(iconize);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_Iconize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_IsMaximized, "IsMaximized() -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_IsMaximized(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_IsMaximized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsMaximized();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_IsMaximized, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_IsIconized, "IsIconized() -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_IsIconized(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_IsIconized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsIconized();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_IsIconized, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_ShowFullScreen, "ShowFullScreen(show, style) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_ShowFullScreen(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_ShowFullScreen(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool show;
        long style;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_show,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bbl", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &show, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ShowFullScreen(show,style);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_ShowFullScreen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_IsFullScreen, "IsFullScreen() -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_IsFullScreen(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_IsFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsFullScreen();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_IsFullScreen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_IsTopLevel, "IsTopLevel() -> bool\n"
"\n"
"Returns true if the given window is a top-level one.");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_IsTopLevel(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_IsTopLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::IsTopLevel() : sipCpp->IsTopLevel());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_IsTopLevel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_SetMDIParentFrame, "SetMDIParentFrame(parent)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_SetMDIParentFrame(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_SetMDIParentFrame(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiMDIParentFrame* parent;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxAuiMDIParentFrame, &parent))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMDIParentFrame(parent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_SetMDIParentFrame, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_GetMDIParentFrame, "GetMDIParentFrame() -> AuiMDIParentFrame");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_GetMDIParentFrame(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_GetMDIParentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxAuiMDIParentFrame*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetMDIParentFrame();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiMDIParentFrame,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_GetMDIParentFrame, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_GetClientAreaOrigin, doc_wxAuiMDIChildFrame_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_Validate, doc_wxAuiMDIChildFrame_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_TransferDataToWindow, doc_wxAuiMDIChildFrame_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_TransferDataFromWindow, doc_wxAuiMDIChildFrame_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_InitDialog, doc_wxAuiMDIChildFrame_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_AcceptsFocus, doc_wxAuiMDIChildFrame_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_AcceptsFocusRecursively, doc_wxAuiMDIChildFrame_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_AcceptsFocusFromKeyboard, doc_wxAuiMDIChildFrame_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_AddChild, doc_wxAuiMDIChildFrame_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_RemoveChild, doc_wxAuiMDIChildFrame_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_InheritAttributes, doc_wxAuiMDIChildFrame_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_ShouldInheritColours, doc_wxAuiMDIChildFrame_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_OnInternalIdle, doc_wxAuiMDIChildFrame_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_GetMainWindowOfCompositeControl, doc_wxAuiMDIChildFrame_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_InformFirstDirection, doc_wxAuiMDIChildFrame_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_SetCanFocus, doc_wxAuiMDIChildFrame_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_SetValidator, doc_wxAuiMDIChildFrame_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_GetValidator, doc_wxAuiMDIChildFrame_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
         ::wxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIChildFrame::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_EnableVisibleFocus, doc_wxAuiMDIChildFrame_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_ProcessEvent, doc_wxAuiMDIChildFrame_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoEnable, doc_wxAuiMDIChildFrame_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxAuiMDIChildFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoGetPosition, doc_wxAuiMDIChildFrame_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxAuiMDIChildFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoGetSize, doc_wxAuiMDIChildFrame_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxAuiMDIChildFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoGetClientSize, doc_wxAuiMDIChildFrame_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoGetBestSize, doc_wxAuiMDIChildFrame_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoGetBestClientSize, doc_wxAuiMDIChildFrame_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoSetSize, doc_wxAuiMDIChildFrame_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoSetClientSize, doc_wxAuiMDIChildFrame_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoSetSizeHints, doc_wxAuiMDIChildFrame_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoGetBorderSize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoGetBorderSize, doc_wxAuiMDIChildFrame_DoGetBorderSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoMoveWindow, doc_wxAuiMDIChildFrame_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoSetWindowVariant, doc_wxAuiMDIChildFrame_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_GetDefaultBorder, doc_wxAuiMDIChildFrame_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_GetDefaultBorderForControl, doc_wxAuiMDIChildFrame_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoFreeze, doc_wxAuiMDIChildFrame_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_DoThaw, doc_wxAuiMDIChildFrame_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxAuiMDIChildFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_HasTransparentBackground, doc_wxAuiMDIChildFrame_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_TryBefore, doc_wxAuiMDIChildFrame_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiMDIChildFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiMDIChildFrame, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_TryAfter, doc_wxAuiMDIChildFrame_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiMDIChildFrame_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes");

extern "C" {static PyObject *meth_wxAuiMDIChildFrame_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIChildFrame_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxAuiMDIChildFrame::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiMDIChildFrame, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxAuiMDIChildFrame(void *, const sipTypeDef *);}
static void *cast_wxAuiMDIChildFrame(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxAuiMDIChildFrame *sipCpp = reinterpret_cast< ::wxAuiMDIChildFrame *>(sipCppV);

    if (targetType == sipType_wxTDIChildFrame)
        return static_cast< ::wxTDIChildFrame *>(sipCpp);

    if (targetType == sipType_wxMDIChildFrameBase)
        return static_cast< ::wxMDIChildFrameBase *>(sipCpp);

    if (targetType == sipType_wxFrame)
        return static_cast< ::wxFrame *>(sipCpp);

    if (targetType == sipType_wxTopLevelWindow)
        return static_cast< ::wxTopLevelWindow *>(sipCpp);

    if (targetType == sipType_wxNonOwnedWindow)
        return static_cast< ::wxNonOwnedWindow *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxAuiMDIChildFrame(void *, int);}
static void release_wxAuiMDIChildFrame(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxAuiMDIChildFrame *>(sipCppV);
    else
        delete reinterpret_cast< ::wxAuiMDIChildFrame *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxAuiMDIChildFrame(Py_ssize_t);}
static void *array_wxAuiMDIChildFrame(Py_ssize_t sipNrElem)
{
    return new  ::wxAuiMDIChildFrame[sipNrElem];
}


extern "C" {static void dealloc_wxAuiMDIChildFrame(sipSimpleWrapper *);}
static void dealloc_wxAuiMDIChildFrame(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxAuiMDIChildFrame *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxAuiMDIChildFrame(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxAuiMDIChildFrame(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxAuiMDIChildFrame(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxAuiMDIChildFrame *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiMDIChildFrame();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxAuiMDIParentFrame* parent;
         ::wxWindowID winid = wxID_ANY;
        const  ::wxString& titledef = wxEmptyString;
        const  ::wxString* title = &titledef;
        int titleState = 0;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxDEFAULT_FRAME_STYLE;
        const  ::wxString& namedef = wxFrameNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_winid,
            sipName_title,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|iJ1J1J1lJ1", sipType_wxAuiMDIParentFrame, &parent, &winid, sipType_wxString,&title, &titleState, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiMDIChildFrame(parent,winid,*title,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS

            *sipOwner = Py_None;
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxAuiMDIChildFrame[] = {{32, 0, 1}};


static PyMethodDef methods_wxAuiMDIChildFrame[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxAuiMDIChildFrame_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxAuiMDIChildFrame_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxAuiMDIChildFrame_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_Activate), meth_wxAuiMDIChildFrame_Activate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_Activate)},
    {SIP_MLNAME_CAST(sipName_AddChild), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_AddChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_AddChild)},
    {SIP_MLNAME_CAST(sipName_Create), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_Create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_Create)},
    {SIP_MLNAME_CAST(sipName_CreateStatusBar), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_CreateStatusBar), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_CreateStatusBar)},
    {SIP_MLNAME_CAST(sipName_CreateToolBar), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_CreateToolBar), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_CreateToolBar)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxAuiMDIChildFrame_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), meth_wxAuiMDIChildFrame_DoFreeze, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), meth_wxAuiMDIChildFrame_DoGetBestClientSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), meth_wxAuiMDIChildFrame_DoGetBestSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), meth_wxAuiMDIChildFrame_DoGetBorderSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), meth_wxAuiMDIChildFrame_DoThaw, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EnableVisibleFocus), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_EnableVisibleFocus)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxAuiMDIChildFrame_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), meth_wxAuiMDIChildFrame_GetDefaultBorder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), meth_wxAuiMDIChildFrame_GetDefaultBorderForControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetIcon), meth_wxAuiMDIChildFrame_GetIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_GetIcon)},
    {SIP_MLNAME_CAST(sipName_GetIcons), meth_wxAuiMDIChildFrame_GetIcons, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_GetIcons)},
    {SIP_MLNAME_CAST(sipName_GetMDIParentFrame), meth_wxAuiMDIChildFrame_GetMDIParentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_GetMDIParentFrame)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxAuiMDIChildFrame_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetMenuBar), meth_wxAuiMDIChildFrame_GetMenuBar, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_GetMenuBar)},
    {SIP_MLNAME_CAST(sipName_GetStatusBar), meth_wxAuiMDIChildFrame_GetStatusBar, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_GetStatusBar)},
    {SIP_MLNAME_CAST(sipName_GetTitle), meth_wxAuiMDIChildFrame_GetTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_GetTitle)},
    {SIP_MLNAME_CAST(sipName_GetToolBar), meth_wxAuiMDIChildFrame_GetToolBar, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_GetToolBar)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxAuiMDIChildFrame_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_GetValidator)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), meth_wxAuiMDIChildFrame_HasTransparentBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_Iconize), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_Iconize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_Iconize)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxAuiMDIChildFrame_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxAuiMDIChildFrame_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_InitDialog)},
    {SIP_MLNAME_CAST(sipName_IsFullScreen), meth_wxAuiMDIChildFrame_IsFullScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_IsFullScreen)},
    {SIP_MLNAME_CAST(sipName_IsIconized), meth_wxAuiMDIChildFrame_IsIconized, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_IsIconized)},
    {SIP_MLNAME_CAST(sipName_IsMaximized), meth_wxAuiMDIChildFrame_IsMaximized, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_IsMaximized)},
    {SIP_MLNAME_CAST(sipName_IsTopLevel), meth_wxAuiMDIChildFrame_IsTopLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_IsTopLevel)},
    {SIP_MLNAME_CAST(sipName_Maximize), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_Maximize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_Maximize)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxAuiMDIChildFrame_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_RemoveChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_Restore), meth_wxAuiMDIChildFrame_Restore, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_Restore)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), meth_wxAuiMDIChildFrame_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_SetCanFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetIcon), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_SetIcon), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_SetIcon)},
    {SIP_MLNAME_CAST(sipName_SetIcons), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_SetIcons), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_SetIcons)},
    {SIP_MLNAME_CAST(sipName_SetMDIParentFrame), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_SetMDIParentFrame), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_SetMDIParentFrame)},
    {SIP_MLNAME_CAST(sipName_SetMenuBar), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_SetMenuBar), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_SetMenuBar)},
    {SIP_MLNAME_CAST(sipName_SetStatusText), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_SetStatusText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_SetStatusText)},
    {SIP_MLNAME_CAST(sipName_SetStatusWidths), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_SetStatusWidths), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_SetStatusWidths)},
    {SIP_MLNAME_CAST(sipName_SetTitle), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_SetTitle), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_SetTitle)},
    {SIP_MLNAME_CAST(sipName_SetValidator), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_SetValidator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxAuiMDIChildFrame_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_Show), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_Show), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_Show)},
    {SIP_MLNAME_CAST(sipName_ShowFullScreen), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_ShowFullScreen), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_ShowFullScreen)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxAuiMDIChildFrame_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxAuiMDIChildFrame_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth_wxAuiMDIChildFrame_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxAuiMDIChildFrame_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIChildFrame_Validate)}
};

sipVariableDef variables_wxAuiMDIChildFrame[] = {
    {PropertyVariable, sipName_ToolBar, &methods_wxAuiMDIChildFrame[35], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Title, &methods_wxAuiMDIChildFrame[34], &methods_wxAuiMDIChildFrame[59], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_StatusBar, &methods_wxAuiMDIChildFrame[33], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_MenuBar, &methods_wxAuiMDIChildFrame[32], &methods_wxAuiMDIChildFrame[56], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_MDIParentFrame, &methods_wxAuiMDIChildFrame[30], &methods_wxAuiMDIChildFrame[55], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Icons, &methods_wxAuiMDIChildFrame[29], &methods_wxAuiMDIChildFrame[54], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Icon, &methods_wxAuiMDIChildFrame[28], &methods_wxAuiMDIChildFrame[53], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxAuiMDIChildFrame, "AuiMDIChildFrame()\n"
"AuiMDIChildFrame(parent, winid=wx.ID_ANY, title=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.DEFAULT_FRAME_STYLE, name=wx.FrameNameStr)");


sipClassTypeDef sipTypeDef__aui_wxAuiMDIChildFrame = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxAuiMDIChildFrame,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_AuiMDIChildFrame,
        {0, 0, 1},
        69, methods_wxAuiMDIChildFrame,
        0, SIP_NULLPTR,
        7, variables_wxAuiMDIChildFrame,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxAuiMDIChildFrame,
    -1,
    -1,
    supers_wxAuiMDIChildFrame,
    SIP_NULLPTR,
    init_type_wxAuiMDIChildFrame,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxAuiMDIChildFrame,
    SIP_NULLPTR,
    array_wxAuiMDIChildFrame,
    SIP_NULLPTR,
    release_wxAuiMDIChildFrame,
    cast_wxAuiMDIChildFrame,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
