/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_adv.h"

        #include <wx/generic/helpext.h>

        #include <wx/window.h>
        #include <wx/frame.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxExtHelpController : public  ::wxExtHelpController
{
public:
    sipwxExtHelpController( ::wxWindow*);
    virtual ~sipwxExtHelpController();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool DisplayHelp(const  ::wxString&) SIP_OVERRIDE;
    bool DisplayBlock(long) SIP_OVERRIDE;
    bool DisplayContents() SIP_OVERRIDE;
    bool DisplayContextPopup(int) SIP_OVERRIDE;
    bool DisplaySection(const  ::wxString&) SIP_OVERRIDE;
    bool DisplaySection(int) SIP_OVERRIDE;
    bool DisplayTextPopup(const  ::wxString&,const  ::wxPoint&) SIP_OVERRIDE;
     ::wxFrame* GetFrameParameters( ::wxSize*, ::wxPoint*,bool*) SIP_OVERRIDE;
     ::wxWindow* GetParentWindow() const SIP_OVERRIDE;
    bool Initialize(const  ::wxString&) SIP_OVERRIDE;
    bool KeywordSearch(const  ::wxString&, ::wxHelpSearchMode) SIP_OVERRIDE;
    bool LoadFile(const  ::wxString&) SIP_OVERRIDE;
    void OnQuit() SIP_OVERRIDE;
    bool Quit() SIP_OVERRIDE;
    void SetFrameParameters(const  ::wxString&,const  ::wxSize&,const  ::wxPoint&,bool) SIP_OVERRIDE;
    void SetParentWindow( ::wxWindow*) SIP_OVERRIDE;
    void SetViewer(const  ::wxString&,long) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxExtHelpController(const sipwxExtHelpController &);
    sipwxExtHelpController &operator = (const sipwxExtHelpController &);

    char sipPyMethods[17];
};

sipwxExtHelpController::sipwxExtHelpController( ::wxWindow*parentWindow):  ::wxExtHelpController(parentWindow), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxExtHelpController::~sipwxExtHelpController()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxExtHelpController::DisplayHelp(const  ::wxString& relativeURL)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_DisplayHelp);

    if (!sipMeth)
        return  ::wxExtHelpController::DisplayHelp(relativeURL);

    extern bool sipVH__adv_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    return sipVH__adv_5(sipGILState, 0, sipPySelf, sipMeth, relativeURL);
}

bool sipwxExtHelpController::DisplayBlock(long blockNo)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_DisplayBlock);

    if (!sipMeth)
        return  ::wxExtHelpController::DisplayBlock(blockNo);

    extern bool sipVH__adv_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__adv_11(sipGILState, 0, sipPySelf, sipMeth, blockNo);
}

bool sipwxExtHelpController::DisplayContents()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_DisplayContents);

    if (!sipMeth)
        return  ::wxExtHelpController::DisplayContents();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxExtHelpController::DisplayContextPopup(int contextId)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_DisplayContextPopup);

    if (!sipMeth)
        return  ::wxExtHelpController::DisplayContextPopup(contextId);

    extern bool sipVH__adv_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__adv_10(sipGILState, 0, sipPySelf, sipMeth, contextId);
}

bool sipwxExtHelpController::DisplaySection(const  ::wxString& section)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_DisplaySection);

    if (!sipMeth)
        return  ::wxExtHelpController::DisplaySection(section);

    extern bool sipVH__adv_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    return sipVH__adv_5(sipGILState, 0, sipPySelf, sipMeth, section);
}

bool sipwxExtHelpController::DisplaySection(int sectionNo)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_DisplaySection);

    if (!sipMeth)
        return  ::wxExtHelpController::DisplaySection(sectionNo);

    extern bool sipVH__adv_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__adv_10(sipGILState, 0, sipPySelf, sipMeth, sectionNo);
}

bool sipwxExtHelpController::DisplayTextPopup(const  ::wxString& text,const  ::wxPoint& pos)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_DisplayTextPopup);

    if (!sipMeth)
        return  ::wxExtHelpController::DisplayTextPopup(text,pos);

    extern bool sipVH__adv_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&,const  ::wxPoint&);

    return sipVH__adv_9(sipGILState, 0, sipPySelf, sipMeth, text, pos);
}

 ::wxFrame* sipwxExtHelpController::GetFrameParameters( ::wxSize*size, ::wxPoint*pos,bool*newFrameEachTime)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_GetFrameParameters);

    if (!sipMeth)
        return  ::wxExtHelpController::GetFrameParameters(size,pos,newFrameEachTime);

    extern  ::wxFrame* sipVH__adv_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxSize*, ::wxPoint*,bool*);

    return sipVH__adv_8(sipGILState, 0, sipPySelf, sipMeth, size, pos, newFrameEachTime);
}

 ::wxWindow* sipwxExtHelpController::GetParentWindow() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_GetParentWindow);

    if (!sipMeth)
        return  ::wxExtHelpController::GetParentWindow();

    extern  ::wxWindow* sipVH__adv_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_7(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxExtHelpController::Initialize(const  ::wxString& dir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_Initialize);

    if (!sipMeth)
        return  ::wxExtHelpController::Initialize(dir);

    extern bool sipVH__adv_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    return sipVH__adv_5(sipGILState, 0, sipPySelf, sipMeth, dir);
}

bool sipwxExtHelpController::KeywordSearch(const  ::wxString& k, ::wxHelpSearchMode mode)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_KeywordSearch);

    if (!sipMeth)
        return  ::wxExtHelpController::KeywordSearch(k,mode);

    extern bool sipVH__adv_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxHelpSearchMode);

    return sipVH__adv_6(sipGILState, 0, sipPySelf, sipMeth, k, mode);
}

bool sipwxExtHelpController::LoadFile(const  ::wxString& file)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_LoadFile);

    if (!sipMeth)
        return  ::wxExtHelpController::LoadFile(file);

    extern bool sipVH__adv_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    return sipVH__adv_5(sipGILState, 0, sipPySelf, sipMeth, file);
}

void sipwxExtHelpController::OnQuit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_OnQuit);

    if (!sipMeth)
    {
         ::wxExtHelpController::OnQuit();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxExtHelpController::Quit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_Quit);

    if (!sipMeth)
        return  ::wxExtHelpController::Quit();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxExtHelpController::SetFrameParameters(const  ::wxString& titleFormat,const  ::wxSize& size,const  ::wxPoint& pos,bool newFrameEachTime)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_SetFrameParameters);

    if (!sipMeth)
    {
         ::wxExtHelpController::SetFrameParameters(titleFormat,size,pos,newFrameEachTime);
        return;
    }

    extern void sipVH__adv_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&,const  ::wxSize&,const  ::wxPoint&,bool);

    sipVH__adv_2(sipGILState, 0, sipPySelf, sipMeth, titleFormat, size, pos, newFrameEachTime);
}

void sipwxExtHelpController::SetParentWindow( ::wxWindow*parentWindow)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_SetParentWindow);

    if (!sipMeth)
    {
         ::wxExtHelpController::SetParentWindow(parentWindow);
        return;
    }

    extern void sipVH__adv_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*);

    sipVH__adv_1(sipGILState, 0, sipPySelf, sipMeth, parentWindow);
}

void sipwxExtHelpController::SetViewer(const  ::wxString& viewer,long flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_SetViewer);

    if (!sipMeth)
    {
         ::wxExtHelpController::SetViewer(viewer,flags);
        return;
    }

    extern void sipVH__adv_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&,long);

    sipVH__adv_0(sipGILState, 0, sipPySelf, sipMeth, viewer, flags);
}


PyDoc_STRVAR(doc_wxExtHelpController_SetViewer, "SetViewer(viewer=wx.EmptyString, flags=wx.HELP_NETSCAPE)\n"
"\n"
"Tell it which browser to use.");

extern "C" {static PyObject *meth_wxExtHelpController_SetViewer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxExtHelpController_SetViewer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString& viewerdef = wxEmptyString;
        const  ::wxString* viewer = &viewerdef;
        int viewerState = 0;
        long flags = wxHELP_NETSCAPE;
         ::wxExtHelpController *sipCpp;

        static const char *sipKwdList[] = {
            sipName_viewer,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1l", &sipSelf, sipType_wxExtHelpController, &sipCpp, sipType_wxString,&viewer, &viewerState, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxExtHelpController::SetViewer(*viewer,flags) : sipCpp->SetViewer(*viewer,flags));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(viewer),sipType_wxString,viewerState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ExtHelpController, sipName_SetViewer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxExtHelpController_Initialize, "Initialize(dir) -> bool\n"
"\n"
"This must be called to tell the controller where to find the\n"
"documentation.");

extern "C" {static PyObject *meth_wxExtHelpController_Initialize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxExtHelpController_Initialize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* dir;
        int dirState = 0;
         ::wxExtHelpController *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxExtHelpController, &sipCpp, sipType_wxString,&dir, &dirState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxExtHelpController::Initialize(*dir) : sipCpp->Initialize(*dir));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(dir),sipType_wxString,dirState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ExtHelpController, sipName_Initialize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxExtHelpController_LoadFile, "LoadFile(file=wx.EmptyString) -> bool\n"
"\n"
"If file is \"\", reloads file given in Initialize.");

extern "C" {static PyObject *meth_wxExtHelpController_LoadFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxExtHelpController_LoadFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString& filedef = wxEmptyString;
        const  ::wxString* file = &filedef;
        int fileState = 0;
         ::wxExtHelpController *sipCpp;

        static const char *sipKwdList[] = {
            sipName_file,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_wxExtHelpController, &sipCpp, sipType_wxString,&file, &fileState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxExtHelpController::LoadFile(*file) : sipCpp->LoadFile(*file));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(file),sipType_wxString,fileState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ExtHelpController, sipName_LoadFile, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxExtHelpController_DisplayContents, "DisplayContents() -> bool\n"
"\n"
"Display list of all help entries.");

extern "C" {static PyObject *meth_wxExtHelpController_DisplayContents(PyObject *, PyObject *);}
static PyObject *meth_wxExtHelpController_DisplayContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxExtHelpController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxExtHelpController, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxExtHelpController::DisplayContents() : sipCpp->DisplayContents());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ExtHelpController, sipName_DisplayContents, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxExtHelpController_DisplaySection, "DisplaySection(sectionNo) -> bool\n"
"DisplaySection(section) -> bool\n"
"\n"
"Display help for id sectionNo.\n"
"");

extern "C" {static PyObject *meth_wxExtHelpController_DisplaySection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxExtHelpController_DisplaySection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int sectionNo;
         ::wxExtHelpController *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sectionNo,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxExtHelpController, &sipCpp, &sectionNo))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxExtHelpController::DisplaySection(sectionNo) : sipCpp->DisplaySection(sectionNo));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::wxString* section;
        int sectionState = 0;
         ::wxExtHelpController *sipCpp;

        static const char *sipKwdList[] = {
            sipName_section,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxExtHelpController, &sipCpp, sipType_wxString,&section, &sectionState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxExtHelpController::DisplaySection(*section) : sipCpp->DisplaySection(*section));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(section),sipType_wxString,sectionState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ExtHelpController, sipName_DisplaySection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxExtHelpController_DisplayBlock, "DisplayBlock(blockNo) -> bool\n"
"\n"
"Display help for URL (using DisplayHelp) or keyword (using\n"
"KeywordSearch)");

extern "C" {static PyObject *meth_wxExtHelpController_DisplayBlock(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxExtHelpController_DisplayBlock(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long blockNo;
         ::wxExtHelpController *sipCpp;

        static const char *sipKwdList[] = {
            sipName_blockNo,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxExtHelpController, &sipCpp, &blockNo))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxExtHelpController::DisplayBlock(blockNo) : sipCpp->DisplayBlock(blockNo));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ExtHelpController, sipName_DisplayBlock, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxExtHelpController_KeywordSearch, "KeywordSearch(k, mode=wx.HELP_SEARCH_ALL) -> bool\n"
"\n"
"Search comment/documentation fields in map file and present a list to\n"
"chose from.");

extern "C" {static PyObject *meth_wxExtHelpController_KeywordSearch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxExtHelpController_KeywordSearch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* k;
        int kState = 0;
         ::wxHelpSearchMode mode = wxHELP_SEARCH_ALL;
         ::wxExtHelpController *sipCpp;

        static const char *sipKwdList[] = {
            sipName_k,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_wxExtHelpController, &sipCpp, sipType_wxString,&k, &kState, sipType_wxHelpSearchMode, &mode))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxExtHelpController::KeywordSearch(*k,mode) : sipCpp->KeywordSearch(*k,mode));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(k),sipType_wxString,kState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ExtHelpController, sipName_KeywordSearch, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxExtHelpController_Quit, "Quit() -> bool\n"
"\n"
"Does nothing.");

extern "C" {static PyObject *meth_wxExtHelpController_Quit(PyObject *, PyObject *);}
static PyObject *meth_wxExtHelpController_Quit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxExtHelpController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxExtHelpController, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxExtHelpController::Quit() : sipCpp->Quit());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ExtHelpController, sipName_Quit, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxExtHelpController_OnQuit, "OnQuit()\n"
"\n"
"Does nothing.");

extern "C" {static PyObject *meth_wxExtHelpController_OnQuit(PyObject *, PyObject *);}
static PyObject *meth_wxExtHelpController_OnQuit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxExtHelpController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxExtHelpController, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxExtHelpController::OnQuit() : sipCpp->OnQuit());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ExtHelpController, sipName_OnQuit, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxExtHelpController_DisplayHelp, "DisplayHelp(relativeURL) -> bool\n"
"\n"
"Call the browser using a relative URL.");

extern "C" {static PyObject *meth_wxExtHelpController_DisplayHelp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxExtHelpController_DisplayHelp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* relativeURL;
        int relativeURLState = 0;
         ::wxExtHelpController *sipCpp;

        static const char *sipKwdList[] = {
            sipName_relativeURL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxExtHelpController, &sipCpp, sipType_wxString,&relativeURL, &relativeURLState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxExtHelpController::DisplayHelp(*relativeURL) : sipCpp->DisplayHelp(*relativeURL));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(relativeURL),sipType_wxString,relativeURLState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ExtHelpController, sipName_DisplayHelp, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxExtHelpController_SetFrameParameters, "SetFrameParameters(titleFormat, size, pos=wx.DefaultPosition, newFrameEachTime=False)\n"
"\n"
"Allows one to override the default settings for the help frame.");

extern "C" {static PyObject *meth_wxExtHelpController_SetFrameParameters(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxExtHelpController_SetFrameParameters(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* titleFormat;
        int titleFormatState = 0;
        const  ::wxSize* size;
        int sizeState = 0;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        bool newFrameEachTime = 0;
         ::wxExtHelpController *sipCpp;

        static const char *sipKwdList[] = {
            sipName_titleFormat,
            sipName_size,
            sipName_pos,
            sipName_newFrameEachTime,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1|J1b", &sipSelf, sipType_wxExtHelpController, &sipCpp, sipType_wxString,&titleFormat, &titleFormatState, sipType_wxSize, &size, &sizeState, sipType_wxPoint, &pos, &posState, &newFrameEachTime))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxExtHelpController::SetFrameParameters(*titleFormat,*size,*pos,newFrameEachTime) : sipCpp->SetFrameParameters(*titleFormat,*size,*pos,newFrameEachTime));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(titleFormat),sipType_wxString,titleFormatState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ExtHelpController, sipName_SetFrameParameters, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxExtHelpController_GetFrameParameters, "GetFrameParameters(size=None, pos=None, newFrameEachTime=None) -> wx.Frame\n"
"\n"
"Obtains the latest settings used by the help frame and the help frame.");

extern "C" {static PyObject *meth_wxExtHelpController_GetFrameParameters(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxExtHelpController_GetFrameParameters(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxSize* size = 0;
        int sizeState = 0;
         ::wxPoint* pos = 0;
        int posState = 0;
        bool newFrameEachTime;
         ::wxExtHelpController *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J0J0", &sipSelf, sipType_wxExtHelpController, &sipCpp, sipType_wxSize, &size, &sizeState, sipType_wxPoint, &pos, &posState))
        {
             ::wxFrame*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxExtHelpController::GetFrameParameters(size,pos,&newFrameEachTime) : sipCpp->GetFrameParameters(size,pos,&newFrameEachTime));
            Py_END_ALLOW_THREADS
            sipReleaseType(size,sipType_wxSize,sizeState);
            sipReleaseType(pos,sipType_wxPoint,posState);

            if (PyErr_Occurred())
                return 0;

            PyObject *sipResObj = sipConvertFromType(sipRes,sipType_wxFrame,SIP_NULLPTR);
            return sipBuildResult(0,"(Rb)",sipResObj,newFrameEachTime);
        }
    }

    sipNoMethod(sipParseErr, sipName_ExtHelpController, sipName_GetFrameParameters, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxExtHelpController(void *, const sipTypeDef *);}
static void *cast_wxExtHelpController(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxExtHelpController *sipCpp = reinterpret_cast< ::wxExtHelpController *>(sipCppV);

    if (targetType == sipType_wxHelpControllerBase)
        return static_cast< ::wxHelpControllerBase *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxExtHelpController(void *, int);}
static void release_wxExtHelpController(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxExtHelpController *>(sipCppV);
    else
        delete reinterpret_cast< ::wxExtHelpController *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxExtHelpController(Py_ssize_t);}
static void *array_wxExtHelpController(Py_ssize_t sipNrElem)
{
    return new  ::wxExtHelpController[sipNrElem];
}


extern "C" {static void dealloc_wxExtHelpController(sipSimpleWrapper *);}
static void dealloc_wxExtHelpController(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxExtHelpController *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxExtHelpController(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxExtHelpController(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxExtHelpController(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxExtHelpController *sipCpp = SIP_NULLPTR;

    {
         ::wxWindow* parentWindow = 0;

        static const char *sipKwdList[] = {
            sipName_parentWindow,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8", sipType_wxWindow, &parentWindow))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxExtHelpController(parentWindow);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxExtHelpController[] = {{26, 0, 1}};


static PyMethodDef methods_wxExtHelpController[] = {
    {SIP_MLNAME_CAST(sipName_DisplayBlock), SIP_MLMETH_CAST(meth_wxExtHelpController_DisplayBlock), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxExtHelpController_DisplayBlock)},
    {SIP_MLNAME_CAST(sipName_DisplayContents), meth_wxExtHelpController_DisplayContents, METH_VARARGS, SIP_MLDOC_CAST(doc_wxExtHelpController_DisplayContents)},
    {SIP_MLNAME_CAST(sipName_DisplayHelp), SIP_MLMETH_CAST(meth_wxExtHelpController_DisplayHelp), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxExtHelpController_DisplayHelp)},
    {SIP_MLNAME_CAST(sipName_DisplaySection), SIP_MLMETH_CAST(meth_wxExtHelpController_DisplaySection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxExtHelpController_DisplaySection)},
    {SIP_MLNAME_CAST(sipName_GetFrameParameters), SIP_MLMETH_CAST(meth_wxExtHelpController_GetFrameParameters), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxExtHelpController_GetFrameParameters)},
    {SIP_MLNAME_CAST(sipName_Initialize), SIP_MLMETH_CAST(meth_wxExtHelpController_Initialize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxExtHelpController_Initialize)},
    {SIP_MLNAME_CAST(sipName_KeywordSearch), SIP_MLMETH_CAST(meth_wxExtHelpController_KeywordSearch), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxExtHelpController_KeywordSearch)},
    {SIP_MLNAME_CAST(sipName_LoadFile), SIP_MLMETH_CAST(meth_wxExtHelpController_LoadFile), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxExtHelpController_LoadFile)},
    {SIP_MLNAME_CAST(sipName_OnQuit), meth_wxExtHelpController_OnQuit, METH_VARARGS, SIP_MLDOC_CAST(doc_wxExtHelpController_OnQuit)},
    {SIP_MLNAME_CAST(sipName_Quit), meth_wxExtHelpController_Quit, METH_VARARGS, SIP_MLDOC_CAST(doc_wxExtHelpController_Quit)},
    {SIP_MLNAME_CAST(sipName_SetFrameParameters), SIP_MLMETH_CAST(meth_wxExtHelpController_SetFrameParameters), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxExtHelpController_SetFrameParameters)},
    {SIP_MLNAME_CAST(sipName_SetViewer), SIP_MLMETH_CAST(meth_wxExtHelpController_SetViewer), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxExtHelpController_SetViewer)}
};

sipVariableDef variables_wxExtHelpController[] = {
    {PropertyVariable, sipName_FrameParameters, &methods_wxExtHelpController[4], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxExtHelpController, "ExtHelpController(parentWindow=None)\n"
"\n"
"This class implements help via an external browser.");


sipClassTypeDef sipTypeDef__adv_wxExtHelpController = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxExtHelpController,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_ExtHelpController,
        {0, 0, 1},
        12, methods_wxExtHelpController,
        0, SIP_NULLPTR,
        1, variables_wxExtHelpController,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxExtHelpController,
    -1,
    -1,
    supers_wxExtHelpController,
    SIP_NULLPTR,
    init_type_wxExtHelpController,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxExtHelpController,
    SIP_NULLPTR,
    array_wxExtHelpController,
    SIP_NULLPTR,
    release_wxExtHelpController,
    cast_wxExtHelpController,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
