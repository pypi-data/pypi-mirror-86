/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/geometry.h>

        #include <wx/gdicmn.h>
    PyObject* _wxPoint2DDouble_Get(wxPoint2DDouble* self)
    {
        wxPyThreadBlocker blocker;
        return sipBuildResult(0, "(dd)", self->m_x, self->m_y);
    }


PyDoc_STRVAR(doc_wxPoint2DDouble_GetFloor, "GetFloor() -> (x, y)");

extern "C" {static PyObject *meth_wxPoint2DDouble_GetFloor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPoint2DDouble_GetFloor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxInt32 x;
         ::wxInt32 y;
        const  ::wxPoint2DDouble *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxPoint2DDouble, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->GetFloor(&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_Point2D, sipName_GetFloor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPoint2DDouble_GetRounded, "GetRounded() -> (x, y)");

extern "C" {static PyObject *meth_wxPoint2DDouble_GetRounded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPoint2DDouble_GetRounded(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxInt32 x;
         ::wxInt32 y;
        const  ::wxPoint2DDouble *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxPoint2DDouble, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->GetRounded(&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_Point2D, sipName_GetRounded, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPoint2DDouble_GetVectorLength, "GetVectorLength() -> Double");

extern "C" {static PyObject *meth_wxPoint2DDouble_GetVectorLength(PyObject *, PyObject *);}
static PyObject *meth_wxPoint2DDouble_GetVectorLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPoint2DDouble, &sipCpp))
        {
             ::wxDouble sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVectorLength();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Point2D, sipName_GetVectorLength, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPoint2DDouble_GetVectorAngle, "GetVectorAngle() -> Double");

extern "C" {static PyObject *meth_wxPoint2DDouble_GetVectorAngle(PyObject *, PyObject *);}
static PyObject *meth_wxPoint2DDouble_GetVectorAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPoint2DDouble, &sipCpp))
        {
             ::wxDouble sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVectorAngle();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Point2D, sipName_GetVectorAngle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPoint2DDouble_SetVectorLength, "SetVectorLength(length)");

extern "C" {static PyObject *meth_wxPoint2DDouble_SetVectorLength(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPoint2DDouble_SetVectorLength(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDouble length;
         ::wxPoint2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd", &sipSelf, sipType_wxPoint2DDouble, &sipCpp, &length))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetVectorLength(length);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Point2D, sipName_SetVectorLength, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPoint2DDouble_SetVectorAngle, "SetVectorAngle(degrees)");

extern "C" {static PyObject *meth_wxPoint2DDouble_SetVectorAngle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPoint2DDouble_SetVectorAngle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDouble degrees;
         ::wxPoint2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_degrees,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd", &sipSelf, sipType_wxPoint2DDouble, &sipCpp, &degrees))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetVectorAngle(degrees);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Point2D, sipName_SetVectorAngle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPoint2DDouble_Normalize, "Normalize()");

extern "C" {static PyObject *meth_wxPoint2DDouble_Normalize(PyObject *, PyObject *);}
static PyObject *meth_wxPoint2DDouble_Normalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPoint2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPoint2DDouble, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Normalize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Point2D, sipName_Normalize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPoint2DDouble_GetDistance, "GetDistance(pt) -> Double");

extern "C" {static PyObject *meth_wxPoint2DDouble_GetDistance(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPoint2DDouble_GetDistance(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint2DDouble* pt;
        int ptState = 0;
        const  ::wxPoint2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPoint2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
             ::wxDouble sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDistance(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Point2D, sipName_GetDistance, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPoint2DDouble_GetDistanceSquare, "GetDistanceSquare(pt) -> Double");

extern "C" {static PyObject *meth_wxPoint2DDouble_GetDistanceSquare(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPoint2DDouble_GetDistanceSquare(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint2DDouble* pt;
        int ptState = 0;
        const  ::wxPoint2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPoint2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
             ::wxDouble sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDistanceSquare(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Point2D, sipName_GetDistanceSquare, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPoint2DDouble_GetDotProduct, "GetDotProduct(vec) -> Double");

extern "C" {static PyObject *meth_wxPoint2DDouble_GetDotProduct(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPoint2DDouble_GetDotProduct(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint2DDouble* vec;
        int vecState = 0;
        const  ::wxPoint2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_vec,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPoint2DDouble, &sipCpp, sipType_wxPoint2DDouble, &vec, &vecState))
        {
             ::wxDouble sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDotProduct(*vec);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint2DDouble *>(vec),sipType_wxPoint2DDouble,vecState);

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Point2D, sipName_GetDotProduct, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPoint2DDouble_GetCrossProduct, "GetCrossProduct(vec) -> Double");

extern "C" {static PyObject *meth_wxPoint2DDouble_GetCrossProduct(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPoint2DDouble_GetCrossProduct(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint2DDouble* vec;
        int vecState = 0;
        const  ::wxPoint2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_vec,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPoint2DDouble, &sipCpp, sipType_wxPoint2DDouble, &vec, &vecState))
        {
             ::wxDouble sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetCrossProduct(*vec);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint2DDouble *>(vec),sipType_wxPoint2DDouble,vecState);

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Point2D, sipName_GetCrossProduct, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPoint2DDouble_Get, "Get() -> PyObject\n"
"\n"
"Get() -> (x,y)\n"
"\n"
"Return the x and y properties as a tuple.");

extern "C" {static PyObject *meth_wxPoint2DDouble_Get(PyObject *, PyObject *);}
static PyObject *meth_wxPoint2DDouble_Get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPoint2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPoint2DDouble, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxPoint2DDouble_Get(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_Point2D, sipName_Get, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_wxPoint2DDouble___ne__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint2DDouble___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::wxPoint2DDouble *sipCpp = reinterpret_cast< ::wxPoint2DDouble *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPoint2DDouble));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint2DDouble* pt;
        int ptState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxPoint2DDouble, &pt, &ptState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::wxPoint2DDouble::operator!=(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI__core, ne_slot, sipType_wxPoint2DDouble, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_wxPoint2DDouble___eq__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint2DDouble___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::wxPoint2DDouble *sipCpp = reinterpret_cast< ::wxPoint2DDouble *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPoint2DDouble));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint2DDouble* pt;
        int ptState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxPoint2DDouble, &pt, &ptState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::wxPoint2DDouble::operator==(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI__core, eq_slot, sipType_wxPoint2DDouble, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_wxPoint2DDouble___idiv__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint2DDouble___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_wxPoint2DDouble)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::wxPoint2DDouble *sipCpp = reinterpret_cast< ::wxPoint2DDouble *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPoint2DDouble));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint2DDouble* pt;
        int ptState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxPoint2DDouble, &pt, &ptState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::wxPoint2DDouble::operator/=(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_wxPoint2DDouble___imul__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint2DDouble___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_wxPoint2DDouble)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::wxPoint2DDouble *sipCpp = reinterpret_cast< ::wxPoint2DDouble *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPoint2DDouble));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint2DDouble* pt;
        int ptState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxPoint2DDouble, &pt, &ptState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::wxPoint2DDouble::operator*=(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_wxPoint2DDouble___isub__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint2DDouble___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_wxPoint2DDouble)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::wxPoint2DDouble *sipCpp = reinterpret_cast< ::wxPoint2DDouble *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPoint2DDouble));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint2DDouble* pt;
        int ptState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxPoint2DDouble, &pt, &ptState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::wxPoint2DDouble::operator-=(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_wxPoint2DDouble___iadd__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint2DDouble___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_wxPoint2DDouble)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::wxPoint2DDouble *sipCpp = reinterpret_cast< ::wxPoint2DDouble *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPoint2DDouble));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint2DDouble* pt;
        int ptState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxPoint2DDouble, &pt, &ptState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::wxPoint2DDouble::operator+=(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_wxPoint2DDouble___neg__(PyObject *);}
static PyObject *slot_wxPoint2DDouble___neg__(PyObject *sipSelf)
{
     ::wxPoint2DDouble *sipCpp = reinterpret_cast< ::wxPoint2DDouble *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPoint2DDouble));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::wxPoint2DDouble*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint2DDouble(-(*sipCpp));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint2DDouble,SIP_NULLPTR);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxPoint2DDouble(void *, int);}
static void release_wxPoint2DDouble(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxPoint2DDouble *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxPoint2DDouble(Py_ssize_t);}
static void *array_wxPoint2DDouble(Py_ssize_t sipNrElem)
{
    return new  ::wxPoint2DDouble[sipNrElem];
}


extern "C" {static void assign_wxPoint2DDouble(void *, SIP_SSIZE_T, void *);}
static void assign_wxPoint2DDouble(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxPoint2DDouble *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxPoint2DDouble *>(sipSrc);
}


extern "C" {static void *copy_wxPoint2DDouble(const void *, SIP_SSIZE_T);}
static void *copy_wxPoint2DDouble(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxPoint2DDouble(reinterpret_cast<const  ::wxPoint2DDouble *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxPoint2DDouble(sipSimpleWrapper *);}
static void dealloc_wxPoint2DDouble(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxPoint2DDouble(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxPoint2DDouble(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxPoint2DDouble(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::wxPoint2DDouble *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxPoint2DDouble();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            return sipCpp;
        }
    }

    {
         ::wxDouble x;
         ::wxDouble y;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "dd", &x, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxPoint2DDouble(x,y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            return sipCpp;
        }
    }

    {
        const  ::wxPoint2DDouble* pt;
        int ptState = 0;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1", sipType_wxPoint2DDouble, &pt, &ptState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxPoint2DDouble(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            return sipCpp;
        }
    }

    {
        const  ::wxPoint* pt;
        int ptState = 0;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1", sipType_wxPoint, &pt, &ptState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxPoint2DDouble(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_wxPoint2DDouble(PyObject *, void **, int *, PyObject *);}
static int convertTo_wxPoint2DDouble(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::wxPoint2DDouble **sipCppPtr = reinterpret_cast< ::wxPoint2DDouble **>(sipCppPtrV);

        // is it just a typecheck?
        if (!sipIsErr) {
            // is it already an instance of wxPoint2DDouble?
            if (sipCanConvertToType(sipPy, sipType_wxPoint2DDouble, SIP_NO_CONVERTORS))
                return 1;
        
           if (wxPyNumberSequenceCheck(sipPy, 2)) {
               return 1;
           }
            return 0;
        }
        
        // otherwise do the conversion
        if (sipCanConvertToType(sipPy, sipType_wxPoint2DDouble, SIP_NO_CONVERTORS)) {
            // Just fetch the existing instance
            *sipCppPtr = reinterpret_cast<wxPoint2DDouble*>(sipConvertToType(
                    sipPy, sipType_wxPoint2DDouble, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
            return 0; // not a new instance
        }
        
        // or create a new instance
        PyObject* o1 = PySequence_ITEM(sipPy, 0);
        PyObject* o2 = PySequence_ITEM(sipPy, 1);
        *sipCppPtr = new wxPoint2DDouble(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2));
        Py_DECREF(o1);
        Py_DECREF(o2);
        return SIP_TEMPORARY;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_wxPoint2DDouble[] = {
    {(void *)slot_wxPoint2DDouble___ne__, ne_slot},
    {(void *)slot_wxPoint2DDouble___eq__, eq_slot},
    {(void *)slot_wxPoint2DDouble___idiv__, idiv_slot},
    {(void *)slot_wxPoint2DDouble___imul__, imul_slot},
    {(void *)slot_wxPoint2DDouble___isub__, isub_slot},
    {(void *)slot_wxPoint2DDouble___iadd__, iadd_slot},
    {(void *)slot_wxPoint2DDouble___neg__, neg_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_wxPoint2DDouble[] = {
    {SIP_MLNAME_CAST(sipName_Get), meth_wxPoint2DDouble_Get, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPoint2DDouble_Get)},
    {SIP_MLNAME_CAST(sipName_GetCrossProduct), SIP_MLMETH_CAST(meth_wxPoint2DDouble_GetCrossProduct), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPoint2DDouble_GetCrossProduct)},
    {SIP_MLNAME_CAST(sipName_GetDistance), SIP_MLMETH_CAST(meth_wxPoint2DDouble_GetDistance), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPoint2DDouble_GetDistance)},
    {SIP_MLNAME_CAST(sipName_GetDistanceSquare), SIP_MLMETH_CAST(meth_wxPoint2DDouble_GetDistanceSquare), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPoint2DDouble_GetDistanceSquare)},
    {SIP_MLNAME_CAST(sipName_GetDotProduct), SIP_MLMETH_CAST(meth_wxPoint2DDouble_GetDotProduct), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPoint2DDouble_GetDotProduct)},
    {SIP_MLNAME_CAST(sipName_GetFloor), SIP_MLMETH_CAST(meth_wxPoint2DDouble_GetFloor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPoint2DDouble_GetFloor)},
    {SIP_MLNAME_CAST(sipName_GetRounded), SIP_MLMETH_CAST(meth_wxPoint2DDouble_GetRounded), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPoint2DDouble_GetRounded)},
    {SIP_MLNAME_CAST(sipName_GetVectorAngle), meth_wxPoint2DDouble_GetVectorAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPoint2DDouble_GetVectorAngle)},
    {SIP_MLNAME_CAST(sipName_GetVectorLength), meth_wxPoint2DDouble_GetVectorLength, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPoint2DDouble_GetVectorLength)},
    {SIP_MLNAME_CAST(sipName_Normalize), meth_wxPoint2DDouble_Normalize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPoint2DDouble_Normalize)},
    {SIP_MLNAME_CAST(sipName_SetVectorAngle), SIP_MLMETH_CAST(meth_wxPoint2DDouble_SetVectorAngle), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPoint2DDouble_SetVectorAngle)},
    {SIP_MLNAME_CAST(sipName_SetVectorLength), SIP_MLMETH_CAST(meth_wxPoint2DDouble_SetVectorLength), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPoint2DDouble_SetVectorLength)}
};


extern "C" {static PyObject *varget_wxPoint2DDouble_m_x(void *, PyObject *, PyObject *);}
static PyObject *varget_wxPoint2DDouble_m_x(void *sipSelf, PyObject *, PyObject *)
{
     ::wxDouble sipVal;
     ::wxPoint2DDouble *sipCpp = reinterpret_cast< ::wxPoint2DDouble *>(sipSelf);

    sipVal = sipCpp->m_x;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_wxPoint2DDouble_m_x(void *, PyObject *, PyObject *);}
static int varset_wxPoint2DDouble_m_x(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::wxDouble sipVal;
     ::wxPoint2DDouble *sipCpp = reinterpret_cast< ::wxPoint2DDouble *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->m_x = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_wxPoint2DDouble_m_y(void *, PyObject *, PyObject *);}
static PyObject *varget_wxPoint2DDouble_m_y(void *sipSelf, PyObject *, PyObject *)
{
     ::wxDouble sipVal;
     ::wxPoint2DDouble *sipCpp = reinterpret_cast< ::wxPoint2DDouble *>(sipSelf);

    sipVal = sipCpp->m_y;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_wxPoint2DDouble_m_y(void *, PyObject *, PyObject *);}
static int varset_wxPoint2DDouble_m_y(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::wxDouble sipVal;
     ::wxPoint2DDouble *sipCpp = reinterpret_cast< ::wxPoint2DDouble *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->m_y = sipVal;

    return 0;
}

sipVariableDef variables_wxPoint2DDouble[] = {
    {PropertyVariable, sipName_VectorLength, &methods_wxPoint2DDouble[8], &methods_wxPoint2DDouble[11], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_VectorAngle, &methods_wxPoint2DDouble[7], &methods_wxPoint2DDouble[10], SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_x, (PyMethodDef *)varget_wxPoint2DDouble_m_x, (PyMethodDef *)varset_wxPoint2DDouble_m_x, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_y, (PyMethodDef *)varget_wxPoint2DDouble_m_y, (PyMethodDef *)varset_wxPoint2DDouble_m_y, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxPoint2DDouble, "Point2DDouble()\n"
"Point2DDouble(x, y)\n"
"Point2DDouble(pt)\n"
"Point2DDouble(pt)");


sipClassTypeDef sipTypeDef__core_wxPoint2DDouble = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxPoint2DDouble,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_Point2D,
        {0, 0, 1},
        12, methods_wxPoint2DDouble,
        0, SIP_NULLPTR,
        4, variables_wxPoint2DDouble,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxPoint2DDouble,
    -1,
    -1,
    SIP_NULLPTR,
    slots_wxPoint2DDouble,
    init_type_wxPoint2DDouble,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxPoint2DDouble,
    assign_wxPoint2DDouble,
    array_wxPoint2DDouble,
    copy_wxPoint2DDouble,
    release_wxPoint2DDouble,
    SIP_NULLPTR,
    convertTo_wxPoint2DDouble,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
