/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_stc.h"

        #include <wx/stc/stc.h>

        #include <wx/event.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxStyledTextEvent : public  ::wxStyledTextEvent
{
public:
    sipwxStyledTextEvent( ::wxEventType,int);
    sipwxStyledTextEvent(const  ::wxStyledTextEvent&);
    virtual ~sipwxStyledTextEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEventCategory GetEventCategory() const SIP_OVERRIDE;
     ::wxEvent* Clone() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxStyledTextEvent(const sipwxStyledTextEvent &);
    sipwxStyledTextEvent &operator = (const sipwxStyledTextEvent &);

    char sipPyMethods[2];
};

sipwxStyledTextEvent::sipwxStyledTextEvent( ::wxEventType commandType,int id):  ::wxStyledTextEvent(commandType,id), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxStyledTextEvent::sipwxStyledTextEvent(const  ::wxStyledTextEvent& event):  ::wxStyledTextEvent(event), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxStyledTextEvent::~sipwxStyledTextEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEventCategory sipwxStyledTextEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxStyledTextEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__stc_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__stc_35(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEvent* sipwxStyledTextEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_Clone);

    if (!sipMeth)
        return  ::wxStyledTextEvent::Clone();

    extern  ::wxEvent* sipVH__stc_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__stc_34(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetAlt, "GetAlt() -> bool\n"
"\n"
"Returns true if the Alt key is pressed.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetAlt(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetAlt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetAlt();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetAlt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetAnnotationsLinesAdded, "GetAnnotationsLinesAdded() -> int\n"
"\n"
"Returns the number of lines that have been added to or removed from an\n"
"annotation.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetAnnotationsLinesAdded(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetAnnotationsLinesAdded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetAnnotationsLinesAdded();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetAnnotationsLinesAdded, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetControl, "GetControl() -> bool\n"
"\n"
"Returns true if the Control key is pressed.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetControl(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetControl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetControl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetDragFlags, "GetDragFlags() -> int\n"
"\n"
"Returns flags for the drag operation associated with this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetDragFlags(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetDragFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDragFlags();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetDragFlags, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetDragResult, "GetDragResult() -> DragResult\n"
"\n"
"Returns drag result for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetDragResult(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetDragResult(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
             ::wxDragResult sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDragResult();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxDragResult);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetDragResult, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetDragText, "GetDragText() -> String");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetDragText(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetDragText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
             ::wxString*sipRes;

            if (sipDeprecated(sipName_StyledTextEvent,sipName_GetDragText) < 0)
                return SIP_NULLPTR;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetDragText());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetDragText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetFoldLevelNow, "GetFoldLevelNow() -> int\n"
"\n"
"Returns the current fold level for the line.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetFoldLevelNow(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetFoldLevelNow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFoldLevelNow();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetFoldLevelNow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetFoldLevelPrev, "GetFoldLevelPrev() -> int\n"
"\n"
"Returns previous fold level for the line.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetFoldLevelPrev(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetFoldLevelPrev(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFoldLevelPrev();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetFoldLevelPrev, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetKey, "GetKey() -> int\n"
"\n"
"Returns the key code of the key that generated this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetKey(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetKey();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetKey, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetLength, "GetLength() -> int\n"
"\n"
"Returns the length (number of characters) of this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetLength(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetLength();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetLength, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetLine, "GetLine() -> int\n"
"\n"
"Returns zero-based line number for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetLine(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetLine();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetLine, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetLinesAdded, "GetLinesAdded() -> int\n"
"\n"
"Returns the number of lines added or deleted with this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetLinesAdded(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetLinesAdded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetLinesAdded();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetLinesAdded, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetListCompletionMethod, "GetListCompletionMethod() -> int\n"
"\n"
"Returns a value describing the action that closed the list.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetListCompletionMethod(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetListCompletionMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetListCompletionMethod();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetListCompletionMethod, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetListType, "GetListType() -> int\n"
"\n"
"Returns the list type for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetListType(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetListType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetListType();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetListType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetLParam, "GetLParam() -> int\n"
"\n"
"Returns the value of the LParam field for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetLParam(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetLParam(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetLParam();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetLParam, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetMargin, "GetMargin() -> int\n"
"\n"
"Returns the zero-based index of the margin that generated this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetMargin(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetMargin();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetMargin, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetMessage, "GetMessage() -> int\n"
"\n"
"Returns a message number while a macro is being recorded.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetMessage(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetMessage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetMessage();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetMessage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetModificationType, "GetModificationType() -> int\n"
"\n"
"Returns the modification type for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetModificationType(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetModificationType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetModificationType();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetModificationType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetModifiers, "GetModifiers() -> int\n"
"\n"
"Returns the modifiers of the key press or mouse click for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetModifiers(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetModifiers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetModifiers();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetModifiers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetPosition, "GetPosition() -> int\n"
"\n"
"Returns the zero-based text position associated this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetPosition(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPosition();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetShift, "GetShift() -> bool\n"
"\n"
"Returns true if the Shift key is pressed.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetShift(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetShift(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetShift();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetShift, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetText, "GetText() -> String");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetText(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
             ::wxString*sipRes;

            if (sipDeprecated(sipName_StyledTextEvent,sipName_GetText) < 0)
                return SIP_NULLPTR;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetText());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetToken, "GetToken() -> int\n"
"\n"
"Returns the token value for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetToken(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetToken(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToken();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetToken, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetUpdated, "GetUpdated() -> int\n"
"\n"
"Returns the value of the updated field for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetUpdated(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetUpdated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetUpdated();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetUpdated, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetWParam, "GetWParam() -> int\n"
"\n"
"Returns value of the WParam field for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetWParam(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetWParam(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetWParam();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetWParam, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetX, "GetX() -> int\n"
"\n"
"Returns the X coordinate of the mouse for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetX(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetX();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetX, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_GetY, "GetY() -> int\n"
"\n"
"Returns the Y coordinate of the mouse for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_GetY(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_GetY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetY();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_GetY, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetAnnotationLinesAdded, "SetAnnotationLinesAdded(val)\n"
"\n"
"Sets the annotation lines added value for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetAnnotationLinesAdded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetAnnotationLinesAdded(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetAnnotationLinesAdded(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetAnnotationLinesAdded, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetDragFlags, "SetDragFlags(flags)\n"
"\n"
"Sets the drag flags for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetDragFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetDragFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int flags;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetDragFlags(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetDragFlags, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetDragResult, "SetDragResult(val)\n"
"\n"
"Sets the drag result for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetDragResult(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetDragResult(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDragResult val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, sipType_wxDragResult, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetDragResult(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetDragResult, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetDragText, "SetDragText(val)\n"
"\n"
"Sets the drag text for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetDragText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetDragText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* val;
        int valState = 0;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, sipType_wxString,&val, &valState))
        {
            if (sipDeprecated(sipName_StyledTextEvent,sipName_SetDragText) < 0)
                return SIP_NULLPTR;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetDragText(*val);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(val),sipType_wxString,valState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetDragText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetFoldLevelNow, "SetFoldLevelNow(val)\n"
"\n"
"Sets the current fold level for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetFoldLevelNow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetFoldLevelNow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFoldLevelNow(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetFoldLevelNow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetFoldLevelPrev, "SetFoldLevelPrev(val)\n"
"\n"
"Sets the previous fold level for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetFoldLevelPrev(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetFoldLevelPrev(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFoldLevelPrev(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetFoldLevelPrev, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetKey, "SetKey(k)\n"
"\n"
"Sets the key code for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetKey(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetKey(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int k;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_k,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &k))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetKey(k);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetKey, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetLength, "SetLength(len)\n"
"\n"
"Sets the length value for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetLength(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetLength(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int len;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_len,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &len))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetLength(len);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetLength, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetLine, "SetLine(val)\n"
"\n"
"Sets line number for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetLine(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetLine(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetLine(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetLine, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetLinesAdded, "SetLinesAdded(num)\n"
"\n"
"Sets the number of lines added for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetLinesAdded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetLinesAdded(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int num;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_num,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &num))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetLinesAdded(num);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetLinesAdded, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetListCompletionMethod, "SetListCompletionMethod(val)\n"
"\n"
"Sets the list completion method for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetListCompletionMethod(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetListCompletionMethod(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetListCompletionMethod(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetListCompletionMethod, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetListType, "SetListType(val)\n"
"\n"
"Sets the list type for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetListType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetListType(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetListType(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetListType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetLParam, "SetLParam(val)\n"
"\n"
"Sets value of the LParam field for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetLParam(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetLParam(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetLParam(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetLParam, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetMargin, "SetMargin(val)\n"
"\n"
"Sets margin number for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetMargin(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetMargin(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMargin(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetMargin, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetMessage, "SetMessage(val)\n"
"\n"
"Sets message number for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetMessage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetMessage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMessage(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetMessage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetModificationType, "SetModificationType(t)\n"
"\n"
"Sets the modification type for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetModificationType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetModificationType(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int t;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_t,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &t))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetModificationType(t);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetModificationType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetModifiers, "SetModifiers(m)\n"
"\n"
"Sets the value of the modifiers field for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetModifiers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetModifiers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int m;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_m,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &m))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetModifiers(m);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetModifiers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetPosition, "SetPosition(pos)\n"
"\n"
"Sets file position for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int pos;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &pos))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetPosition(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetText, "SetText(t)\n"
"\n"
"Sets the text for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* t;
        int tState = 0;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_t,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, sipType_wxString,&t, &tState))
        {
            if (sipDeprecated(sipName_StyledTextEvent,sipName_SetText) < 0)
                return SIP_NULLPTR;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetText(*t);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(t),sipType_wxString,tState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetToken, "SetToken(val)\n"
"\n"
"Sets the token for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetToken(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetToken(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToken(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetToken, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetUpdated, "SetUpdated(val)\n"
"\n"
"Sets the value of the updated field for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetUpdated(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetUpdated(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetUpdated(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetUpdated, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetWParam, "SetWParam(val)\n"
"\n"
"Sets the value of the WParam field for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetWParam(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetWParam(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWParam(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetWParam, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetX, "SetX(val)\n"
"\n"
"Sets the X value for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetX(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetX(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetX(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetX, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_SetY, "SetY(val)\n"
"\n"
"Sets the Y value for this event.");

extern "C" {static PyObject *meth_wxStyledTextEvent_SetY(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_SetY(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxStyledTextEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxStyledTextEvent, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetY(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_SetY, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxStyledTextEvent_Clone, "Clone(self) -> Event");

extern "C" {static PyObject *meth_wxStyledTextEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxStyledTextEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxStyledTextEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxStyledTextEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxStyledTextEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_StyledTextEvent, sipName_Clone, doc_wxStyledTextEvent_Clone);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxStyledTextEvent(void *, const sipTypeDef *);}
static void *cast_wxStyledTextEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxStyledTextEvent *sipCpp = reinterpret_cast< ::wxStyledTextEvent *>(sipCppV);

    if (targetType == sipType_wxCommandEvent)
        return static_cast< ::wxCommandEvent *>(sipCpp);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxStyledTextEvent(void *, int);}
static void release_wxStyledTextEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxStyledTextEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxStyledTextEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxStyledTextEvent(sipSimpleWrapper *);}
static void dealloc_wxStyledTextEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxStyledTextEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxStyledTextEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxStyledTextEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxStyledTextEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxStyledTextEvent *sipCpp = SIP_NULLPTR;

    {
         ::wxEventType commandType = 0;
        int id = 0;

        static const char *sipKwdList[] = {
            sipName_commandType,
            sipName_id,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|ii", &commandType, &id))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxStyledTextEvent(commandType,id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxStyledTextEvent* event;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_wxStyledTextEvent, &event))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxStyledTextEvent(*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxStyledTextEvent[] = {{5, 0, 1}};


static PyMethodDef methods_wxStyledTextEvent[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxStyledTextEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_GetAlt), meth_wxStyledTextEvent_GetAlt, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetAlt)},
    {SIP_MLNAME_CAST(sipName_GetAnnotationsLinesAdded), meth_wxStyledTextEvent_GetAnnotationsLinesAdded, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetAnnotationsLinesAdded)},
    {SIP_MLNAME_CAST(sipName_GetControl), meth_wxStyledTextEvent_GetControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetControl)},
    {SIP_MLNAME_CAST(sipName_GetDragFlags), meth_wxStyledTextEvent_GetDragFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetDragFlags)},
    {SIP_MLNAME_CAST(sipName_GetDragResult), meth_wxStyledTextEvent_GetDragResult, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetDragResult)},
    {SIP_MLNAME_CAST(sipName_GetDragText), meth_wxStyledTextEvent_GetDragText, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetDragText)},
    {SIP_MLNAME_CAST(sipName_GetFoldLevelNow), meth_wxStyledTextEvent_GetFoldLevelNow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetFoldLevelNow)},
    {SIP_MLNAME_CAST(sipName_GetFoldLevelPrev), meth_wxStyledTextEvent_GetFoldLevelPrev, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetFoldLevelPrev)},
    {SIP_MLNAME_CAST(sipName_GetKey), meth_wxStyledTextEvent_GetKey, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetKey)},
    {SIP_MLNAME_CAST(sipName_GetLParam), meth_wxStyledTextEvent_GetLParam, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetLParam)},
    {SIP_MLNAME_CAST(sipName_GetLength), meth_wxStyledTextEvent_GetLength, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetLength)},
    {SIP_MLNAME_CAST(sipName_GetLine), meth_wxStyledTextEvent_GetLine, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetLine)},
    {SIP_MLNAME_CAST(sipName_GetLinesAdded), meth_wxStyledTextEvent_GetLinesAdded, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetLinesAdded)},
    {SIP_MLNAME_CAST(sipName_GetListCompletionMethod), meth_wxStyledTextEvent_GetListCompletionMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetListCompletionMethod)},
    {SIP_MLNAME_CAST(sipName_GetListType), meth_wxStyledTextEvent_GetListType, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetListType)},
    {SIP_MLNAME_CAST(sipName_GetMargin), meth_wxStyledTextEvent_GetMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetMargin)},
    {SIP_MLNAME_CAST(sipName_GetMessage), meth_wxStyledTextEvent_GetMessage, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetMessage)},
    {SIP_MLNAME_CAST(sipName_GetModificationType), meth_wxStyledTextEvent_GetModificationType, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetModificationType)},
    {SIP_MLNAME_CAST(sipName_GetModifiers), meth_wxStyledTextEvent_GetModifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetModifiers)},
    {SIP_MLNAME_CAST(sipName_GetPosition), meth_wxStyledTextEvent_GetPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetPosition)},
    {SIP_MLNAME_CAST(sipName_GetShift), meth_wxStyledTextEvent_GetShift, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetShift)},
    {SIP_MLNAME_CAST(sipName_GetText), meth_wxStyledTextEvent_GetText, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetText)},
    {SIP_MLNAME_CAST(sipName_GetToken), meth_wxStyledTextEvent_GetToken, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetToken)},
    {SIP_MLNAME_CAST(sipName_GetUpdated), meth_wxStyledTextEvent_GetUpdated, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetUpdated)},
    {SIP_MLNAME_CAST(sipName_GetWParam), meth_wxStyledTextEvent_GetWParam, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetWParam)},
    {SIP_MLNAME_CAST(sipName_GetX), meth_wxStyledTextEvent_GetX, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetX)},
    {SIP_MLNAME_CAST(sipName_GetY), meth_wxStyledTextEvent_GetY, METH_VARARGS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_GetY)},
    {SIP_MLNAME_CAST(sipName_SetAnnotationLinesAdded), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetAnnotationLinesAdded), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetAnnotationLinesAdded)},
    {SIP_MLNAME_CAST(sipName_SetDragFlags), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetDragFlags), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetDragFlags)},
    {SIP_MLNAME_CAST(sipName_SetDragResult), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetDragResult), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetDragResult)},
    {SIP_MLNAME_CAST(sipName_SetDragText), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetDragText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetDragText)},
    {SIP_MLNAME_CAST(sipName_SetFoldLevelNow), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetFoldLevelNow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetFoldLevelNow)},
    {SIP_MLNAME_CAST(sipName_SetFoldLevelPrev), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetFoldLevelPrev), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetFoldLevelPrev)},
    {SIP_MLNAME_CAST(sipName_SetKey), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetKey), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetKey)},
    {SIP_MLNAME_CAST(sipName_SetLParam), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetLParam), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetLParam)},
    {SIP_MLNAME_CAST(sipName_SetLength), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetLength), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetLength)},
    {SIP_MLNAME_CAST(sipName_SetLine), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetLine), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetLine)},
    {SIP_MLNAME_CAST(sipName_SetLinesAdded), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetLinesAdded), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetLinesAdded)},
    {SIP_MLNAME_CAST(sipName_SetListCompletionMethod), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetListCompletionMethod), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetListCompletionMethod)},
    {SIP_MLNAME_CAST(sipName_SetListType), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetListType), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetListType)},
    {SIP_MLNAME_CAST(sipName_SetMargin), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetMargin), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetMargin)},
    {SIP_MLNAME_CAST(sipName_SetMessage), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetMessage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetMessage)},
    {SIP_MLNAME_CAST(sipName_SetModificationType), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetModificationType), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetModificationType)},
    {SIP_MLNAME_CAST(sipName_SetModifiers), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetModifiers), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetModifiers)},
    {SIP_MLNAME_CAST(sipName_SetPosition), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetPosition)},
    {SIP_MLNAME_CAST(sipName_SetText), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetText)},
    {SIP_MLNAME_CAST(sipName_SetToken), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetToken), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetToken)},
    {SIP_MLNAME_CAST(sipName_SetUpdated), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetUpdated), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetUpdated)},
    {SIP_MLNAME_CAST(sipName_SetWParam), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetWParam), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetWParam)},
    {SIP_MLNAME_CAST(sipName_SetX), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetX), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetX)},
    {SIP_MLNAME_CAST(sipName_SetY), SIP_MLMETH_CAST(meth_wxStyledTextEvent_SetY), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxStyledTextEvent_SetY)}
};

sipVariableDef variables_wxStyledTextEvent[] = {
    {PropertyVariable, sipName_Y, &methods_wxStyledTextEvent[27], &methods_wxStyledTextEvent[51], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_X, &methods_wxStyledTextEvent[26], &methods_wxStyledTextEvent[50], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_WParam, &methods_wxStyledTextEvent[25], &methods_wxStyledTextEvent[49], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Updated, &methods_wxStyledTextEvent[24], &methods_wxStyledTextEvent[48], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Token, &methods_wxStyledTextEvent[23], &methods_wxStyledTextEvent[47], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Text, &methods_wxStyledTextEvent[22], &methods_wxStyledTextEvent[46], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Shift, &methods_wxStyledTextEvent[21], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Position, &methods_wxStyledTextEvent[20], &methods_wxStyledTextEvent[45], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Modifiers, &methods_wxStyledTextEvent[19], &methods_wxStyledTextEvent[44], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ModificationType, &methods_wxStyledTextEvent[18], &methods_wxStyledTextEvent[43], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Message, &methods_wxStyledTextEvent[17], &methods_wxStyledTextEvent[42], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Margin, &methods_wxStyledTextEvent[16], &methods_wxStyledTextEvent[41], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ListType, &methods_wxStyledTextEvent[15], &methods_wxStyledTextEvent[40], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ListCompletionMethod, &methods_wxStyledTextEvent[14], &methods_wxStyledTextEvent[39], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_LinesAdded, &methods_wxStyledTextEvent[13], &methods_wxStyledTextEvent[38], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Line, &methods_wxStyledTextEvent[12], &methods_wxStyledTextEvent[37], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Length, &methods_wxStyledTextEvent[11], &methods_wxStyledTextEvent[36], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_LParam, &methods_wxStyledTextEvent[10], &methods_wxStyledTextEvent[35], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Key, &methods_wxStyledTextEvent[9], &methods_wxStyledTextEvent[34], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_FoldLevelPrev, &methods_wxStyledTextEvent[8], &methods_wxStyledTextEvent[33], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_FoldLevelNow, &methods_wxStyledTextEvent[7], &methods_wxStyledTextEvent[32], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_DragText, &methods_wxStyledTextEvent[6], &methods_wxStyledTextEvent[31], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_DragResult, &methods_wxStyledTextEvent[5], &methods_wxStyledTextEvent[30], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_DragFlags, &methods_wxStyledTextEvent[4], &methods_wxStyledTextEvent[29], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Control, &methods_wxStyledTextEvent[3], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_AnnotationsLinesAdded, &methods_wxStyledTextEvent[2], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Alt, &methods_wxStyledTextEvent[1], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxStyledTextEvent, "StyledTextEvent(commandType=0, id=0)\n"
"StyledTextEvent(event)\n"
"\n"
"The type of events sent from wxStyledTextCtrl.");


sipClassTypeDef sipTypeDef__stc_wxStyledTextEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxStyledTextEvent,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_StyledTextEvent,
        {0, 0, 1},
        52, methods_wxStyledTextEvent,
        0, SIP_NULLPTR,
        27, variables_wxStyledTextEvent,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxStyledTextEvent,
    -1,
    -1,
    supers_wxStyledTextEvent,
    SIP_NULLPTR,
    init_type_wxStyledTextEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxStyledTextEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxStyledTextEvent,
    cast_wxStyledTextEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
