/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_aui.h"

        #include <wx/aui/auibar.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/aui/framemanager.h>
        #include <wx/bitmap.h>
        #include <wx/gdicmn.h>
        #include <wx/aui/auibar.h>
        #include <wx/control.h>
        #include <wx/object.h>
        #include <wx/font.h>
        #include <wx/aui/auibar.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/region.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxAuiToolBar : public  ::wxAuiToolBar
{
public:
    sipwxAuiToolBar();
    sipwxAuiToolBar( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long);
    virtual ~sipwxAuiToolBar();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
     ::wxSize DoGetBorderSize() const SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxAuiToolBar(const sipwxAuiToolBar &);
    sipwxAuiToolBar &operator = (const sipwxAuiToolBar &);

    char sipPyMethods[40];
};

sipwxAuiToolBar::sipwxAuiToolBar():  ::wxAuiToolBar(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiToolBar::sipwxAuiToolBar( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& position,const  ::wxSize& size,long style):  ::wxAuiToolBar(parent,id,position,size,style), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiToolBar::~sipwxAuiToolBar()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxSize sipwxAuiToolBar::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxAuiToolBar::DoGetBestClientSize();

    extern  ::wxSize sipVH__aui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_23(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxAuiToolBar::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxAuiToolBar::DoGetBestSize();

    extern  ::wxSize sipVH__aui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_23(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiToolBar::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxAuiToolBar::DoThaw();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiToolBar::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxAuiToolBar::DoFreeze();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxAuiToolBar::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxAuiToolBar::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__aui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_26(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxAuiToolBar::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxAuiToolBar::GetDefaultBorder();

    extern  ::wxBorder sipVH__aui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_26(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiToolBar::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxAuiToolBar::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__aui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__aui_25(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxAuiToolBar::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxAuiToolBar::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__aui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__aui_24(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

 ::wxSize sipwxAuiToolBar::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxAuiToolBar::DoGetBorderSize();

    extern  ::wxSize sipVH__aui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_23(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiToolBar::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxAuiToolBar::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__aui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__aui_22(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxAuiToolBar::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxAuiToolBar::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__aui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__aui_21(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxAuiToolBar::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxAuiToolBar::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__aui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__aui_20(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxAuiToolBar::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxAuiToolBar::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__aui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__aui_19(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxAuiToolBar::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxAuiToolBar::DoGetSize(width,height);
        return;
    }

    extern void sipVH__aui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__aui_19(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxAuiToolBar::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxAuiToolBar::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__aui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__aui_19(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxAuiToolBar::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxAuiToolBar::DoEnable(enable);
        return;
    }

    extern void sipVH__aui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__aui_13(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxAuiToolBar::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxAuiToolBar::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__aui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_18(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiToolBar::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxAuiToolBar::OnInternalIdle();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiToolBar::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxAuiToolBar::InitDialog();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiToolBar::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxAuiToolBar::InheritAttributes();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiToolBar::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_Destroy);

    if (!sipMeth)
        return  ::wxAuiToolBar::Destroy();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiToolBar::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::wxAuiToolBar::Validate();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiToolBar::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxAuiToolBar::TransferDataToWindow();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiToolBar::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxAuiToolBar::TransferDataFromWindow();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiToolBar::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxAuiToolBar::SetValidator(validator);
        return;
    }

    extern void sipVH__aui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__aui_17(sipGILState, 0, sipPySelf, sipMeth, validator);
}

 ::wxValidator* sipwxAuiToolBar::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxAuiToolBar::GetValidator();

    extern  ::wxValidator* sipVH__aui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiToolBar::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,SIP_NULLPTR,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxAuiToolBar::ShouldInheritColours();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiToolBar::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxAuiToolBar::HasTransparentBackground();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxAuiToolBar::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,SIP_NULLPTR,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxAuiToolBar::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__aui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_15(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiToolBar::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxAuiToolBar::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__aui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__aui_14(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxAuiToolBar::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxAuiToolBar::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__aui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__aui_13(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

void sipwxAuiToolBar::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxAuiToolBar::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__aui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__aui_13(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxAuiToolBar::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxAuiToolBar::AcceptsFocusRecursively();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiToolBar::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxAuiToolBar::AcceptsFocusFromKeyboard();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiToolBar::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxAuiToolBar::AcceptsFocus();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiToolBar::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxAuiToolBar::TryAfter(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxAuiToolBar::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxAuiToolBar::TryBefore(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxAuiToolBar::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxAuiToolBar::ProcessEvent(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxAuiToolBar::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxAuiToolBar::AddChild(child);
        return;
    }

    extern void sipVH__aui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__aui_11(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxAuiToolBar::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxAuiToolBar::RemoveChild(child);
        return;
    }

    extern void sipVH__aui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__aui_11(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxAuiToolBar::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxAuiToolBar::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxAuiToolBar::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxAuiToolBar::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxAuiToolBar::DoEnable(enable) : DoEnable(enable));
}

void sipwxAuiToolBar::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxAuiToolBar::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxAuiToolBar::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxAuiToolBar::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxAuiToolBar::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxAuiToolBar::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxAuiToolBar::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiToolBar::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxAuiToolBar::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiToolBar::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxAuiToolBar::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxAuiToolBar::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxAuiToolBar::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxAuiToolBar::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxAuiToolBar::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxAuiToolBar::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxAuiToolBar::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiToolBar::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxAuiToolBar::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxAuiToolBar::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxAuiToolBar::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxAuiToolBar::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxAuiToolBar::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiToolBar::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxAuiToolBar::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiToolBar::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxAuiToolBar::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxAuiToolBar::DoFreeze() : DoFreeze());
}

void sipwxAuiToolBar::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxAuiToolBar::DoThaw() : DoThaw());
}

bool sipwxAuiToolBar::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxAuiToolBar::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxAuiToolBar::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxAuiToolBar::TryBefore(event) : TryBefore(event));
}

bool sipwxAuiToolBar::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxAuiToolBar::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxAuiToolBar_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxAuiToolBar_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_Create, "Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=AUI_TB_DEFAULT_STYLE) -> bool\n"
"\n"
"Really create wxAuiToolBar created using default constructor.");

extern "C" {static PyObject *meth_wxAuiToolBar_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxAUI_TB_DEFAULT_STYLE;
        sipWrapper *sipOwner = SIP_NULLPTR;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|iJ1J1l", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*pos,*size,style);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetWindowStyleFlag, "SetWindowStyleFlag(style)\n"
"\n"
"Sets the style of the window.");

extern "C" {static PyObject *meth_wxAuiToolBar_SetWindowStyleFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetWindowStyleFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long style;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &style))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWindowStyleFlag(style);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetWindowStyleFlag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetWindowStyleFlag, "GetWindowStyleFlag() -> long\n"
"\n"
"Gets the window style that was passed to the constructor or Create()\n"
"method.");

extern "C" {static PyObject *meth_wxAuiToolBar_GetWindowStyleFlag(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetWindowStyleFlag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetWindowStyleFlag();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetWindowStyleFlag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetArtProvider, "SetArtProvider(art)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetArtProvider(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetArtProvider(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiToolBarArt* art;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_art,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxAuiToolBarArt, &art))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetArtProvider(art);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetArtProvider, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetArtProvider, "GetArtProvider() -> AuiToolBarArt");

extern "C" {static PyObject *meth_wxAuiToolBar_GetArtProvider(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetArtProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
             ::wxAuiToolBarArt*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetArtProvider();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiToolBarArt,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetArtProvider, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetFont, "SetFont(font) -> bool\n"
"\n"
"Sets the font for this window.");

extern "C" {static PyObject *meth_wxAuiToolBar_SetFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxFont* font;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxFont, &font))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetFont(*font);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_AddTool, "AddTool(toolId, label, bitmap, short_help_string=wx.EmptyString, kind=wx.ITEM_NORMAL) -> AuiToolBarItem\n"
"AddTool(toolId, label, bitmap, disabled_bitmap, kind, short_help_string, long_help_string, client_data) -> AuiToolBarItem\n"
"AddTool(toolId, bitmap, disabled_bitmap, toggle=False, client_data=None, short_help_string=wx.EmptyString, long_help_string=wx.EmptyString) -> AuiToolBarItem\n"
"\n"
"");

extern "C" {static PyObject *meth_wxAuiToolBar_AddTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_AddTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxString* label;
        int labelState = 0;
        const  ::wxBitmap* bitmap;
        const  ::wxString& short_help_stringdef = wxEmptyString;
        const  ::wxString* short_help_string = &short_help_stringdef;
        int short_help_stringState = 0;
         ::wxItemKind kind = wxITEM_NORMAL;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_label,
            sipName_bitmap,
            sipName_short_help_string,
            sipName_kind,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1J9|J1E", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId, sipType_wxString,&label, &labelState, sipType_wxBitmap, &bitmap, sipType_wxString,&short_help_string, &short_help_stringState, sipType_wxItemKind, &kind))
        {
             ::wxAuiToolBarItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddTool(toolId,*label,*bitmap,*short_help_string,kind);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);
            sipReleaseType(const_cast< ::wxString *>(short_help_string),sipType_wxString,short_help_stringState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiToolBarItem,SIP_NULLPTR);
        }
    }

    {
        int toolId;
        const  ::wxString* label;
        int labelState = 0;
        const  ::wxBitmap* bitmap;
        const  ::wxBitmap* disabled_bitmap;
         ::wxItemKind kind;
        const  ::wxString* short_help_string;
        int short_help_stringState = 0;
        const  ::wxString* long_help_string;
        int long_help_stringState = 0;
         ::wxObject* client_data;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_label,
            sipName_bitmap,
            sipName_disabled_bitmap,
            sipName_kind,
            sipName_short_help_string,
            sipName_long_help_string,
            sipName_client_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1J9J9EJ1J1J8", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId, sipType_wxString,&label, &labelState, sipType_wxBitmap, &bitmap, sipType_wxBitmap, &disabled_bitmap, sipType_wxItemKind, &kind, sipType_wxString,&short_help_string, &short_help_stringState, sipType_wxString,&long_help_string, &long_help_stringState, sipType_wxObject, &client_data))
        {
             ::wxAuiToolBarItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddTool(toolId,*label,*bitmap,*disabled_bitmap,kind,*short_help_string,*long_help_string,client_data);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);
            sipReleaseType(const_cast< ::wxString *>(short_help_string),sipType_wxString,short_help_stringState);
            sipReleaseType(const_cast< ::wxString *>(long_help_string),sipType_wxString,long_help_stringState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiToolBarItem,SIP_NULLPTR);
        }
    }

    {
        int toolId;
        const  ::wxBitmap* bitmap;
        const  ::wxBitmap* disabled_bitmap;
        bool toggle = 0;
         ::wxObject* client_data = 0;
        const  ::wxString& short_help_stringdef = wxEmptyString;
        const  ::wxString* short_help_string = &short_help_stringdef;
        int short_help_stringState = 0;
        const  ::wxString& long_help_stringdef = wxEmptyString;
        const  ::wxString* long_help_string = &long_help_stringdef;
        int long_help_stringState = 0;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_bitmap,
            sipName_disabled_bitmap,
            sipName_toggle,
            sipName_client_data,
            sipName_short_help_string,
            sipName_long_help_string,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ9J9|bJ8J1J1", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId, sipType_wxBitmap, &bitmap, sipType_wxBitmap, &disabled_bitmap, &toggle, sipType_wxObject, &client_data, sipType_wxString,&short_help_string, &short_help_stringState, sipType_wxString,&long_help_string, &long_help_stringState))
        {
             ::wxAuiToolBarItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddTool(toolId,*bitmap,*disabled_bitmap,toggle,client_data,*short_help_string,*long_help_string);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(short_help_string),sipType_wxString,short_help_stringState);
            sipReleaseType(const_cast< ::wxString *>(long_help_string),sipType_wxString,long_help_stringState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiToolBarItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_AddTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_AddLabel, "AddLabel(toolId, label=wx.EmptyString, width=-1) -> AuiToolBarItem");

extern "C" {static PyObject *meth_wxAuiToolBar_AddLabel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_AddLabel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxString& labeldef = wxEmptyString;
        const  ::wxString* label = &labeldef;
        int labelState = 0;
        int width = -1;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_label,
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|J1i", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId, sipType_wxString,&label, &labelState, &width))
        {
             ::wxAuiToolBarItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddLabel(toolId,*label,width);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiToolBarItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_AddLabel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_AddControl, "AddControl(control, label=wx.EmptyString) -> AuiToolBarItem");

extern "C" {static PyObject *meth_wxAuiToolBar_AddControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_AddControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxControl* control;
        const  ::wxString& labeldef = wxEmptyString;
        const  ::wxString* label = &labeldef;
        int labelState = 0;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_control,
            sipName_label,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|J1", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxControl, &control, sipType_wxString,&label, &labelState))
        {
             ::wxAuiToolBarItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddControl(control,*label);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiToolBarItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_AddControl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_AddSeparator, "AddSeparator() -> AuiToolBarItem");

extern "C" {static PyObject *meth_wxAuiToolBar_AddSeparator(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_AddSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
             ::wxAuiToolBarItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddSeparator();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiToolBarItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_AddSeparator, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_AddSpacer, "AddSpacer(pixels) -> AuiToolBarItem");

extern "C" {static PyObject *meth_wxAuiToolBar_AddSpacer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_AddSpacer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int pixels;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pixels,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &pixels))
        {
             ::wxAuiToolBarItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddSpacer(pixels);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiToolBarItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_AddSpacer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_AddStretchSpacer, "AddStretchSpacer(proportion=1) -> AuiToolBarItem");

extern "C" {static PyObject *meth_wxAuiToolBar_AddStretchSpacer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_AddStretchSpacer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int proportion = 1;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_proportion,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &proportion))
        {
             ::wxAuiToolBarItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddStretchSpacer(proportion);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiToolBarItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_AddStretchSpacer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_Realize, "Realize() -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_Realize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_Realize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Realize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_Realize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_FindControl, "FindControl(window_id) -> wx.Control");

extern "C" {static PyObject *meth_wxAuiToolBar_FindControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_FindControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int window_id;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &window_id))
        {
             ::wxControl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindControl(window_id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxControl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_FindControl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_FindToolByPosition, "FindToolByPosition(x, y) -> AuiToolBarItem");

extern "C" {static PyObject *meth_wxAuiToolBar_FindToolByPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_FindToolByPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxCoord x;
         ::wxCoord y;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &x, &y))
        {
             ::wxAuiToolBarItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindToolByPosition(x,y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiToolBarItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_FindToolByPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_FindToolByIndex, "FindToolByIndex(idx) -> AuiToolBarItem");

extern "C" {static PyObject *meth_wxAuiToolBar_FindToolByIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_FindToolByIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int idx;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_idx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &idx))
        {
             ::wxAuiToolBarItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindToolByIndex(idx);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiToolBarItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_FindToolByIndex, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_FindTool, "FindTool(toolId) -> AuiToolBarItem");

extern "C" {static PyObject *meth_wxAuiToolBar_FindTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_FindTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
             ::wxAuiToolBarItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindTool(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiToolBarItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_FindTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_ClearTools, "ClearTools()");

extern "C" {static PyObject *meth_wxAuiToolBar_ClearTools(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_ClearTools(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearTools();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_ClearTools, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_Clear, "Clear()");

extern "C" {static PyObject *meth_wxAuiToolBar_Clear(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_Clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Clear();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_Clear, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DestroyTool, "DestroyTool(toolId) -> bool\n"
"\n"
"Destroys the tool with the given ID and its associated window, if any.");

extern "C" {static PyObject *meth_wxAuiToolBar_DestroyTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DestroyTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DestroyTool(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DestroyTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DestroyToolByIndex, "DestroyToolByIndex(idx) -> bool\n"
"\n"
"Destroys the tool at the given position and its associated window, if\n"
"any.");

extern "C" {static PyObject *meth_wxAuiToolBar_DestroyToolByIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DestroyToolByIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int idx;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_idx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &idx))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DestroyToolByIndex(idx);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DestroyToolByIndex, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DeleteTool, "DeleteTool(toolId) -> bool\n"
"\n"
"Removes the tool with the given ID from the toolbar.");

extern "C" {static PyObject *meth_wxAuiToolBar_DeleteTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DeleteTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteTool(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DeleteTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DeleteByIndex, "DeleteByIndex(idx) -> bool\n"
"\n"
"Removes the tool at the given position from the toolbar.");

extern "C" {static PyObject *meth_wxAuiToolBar_DeleteByIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DeleteByIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int idx;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_idx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &idx))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteByIndex(idx);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DeleteByIndex, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolCount, "GetToolCount() -> size_t");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolCount(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            size_t sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolPos, "GetToolPos(toolId) -> int");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolPos(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolPos(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolPos(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolPos, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolIndex, "GetToolIndex(toolId) -> int");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolIndex(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolIndex, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolFits, "GetToolFits(toolId) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolFits(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolFits(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolFits(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolFits, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolRect, "GetToolRect(toolId) -> wx.Rect");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
             ::wxRect*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRect(sipCpp->GetToolRect(toolId));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolFitsByIndex, "GetToolFitsByIndex(toolId) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolFitsByIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolFitsByIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolFitsByIndex(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolFitsByIndex, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolBarFits, "GetToolBarFits() -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolBarFits(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolBarFits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolBarFits();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolBarFits, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetMargins, "SetMargins(size)\n"
"SetMargins(x, y)\n"
"SetMargins(left, right, top, bottom)\n"
"\n"
"");

extern "C" {static PyObject *meth_wxAuiToolBar_SetMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSize* size;
        int sizeState = 0;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxSize, &size, &sizeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMargins(*size);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int x;
        int y;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &x, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMargins(x,y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int left;
        int right;
        int top;
        int bottom;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_left,
            sipName_right,
            sipName_top,
            sipName_bottom,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &left, &right, &top, &bottom))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMargins(left,right,top,bottom);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetMargins, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetToolBitmapSize, "SetToolBitmapSize(size)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetToolBitmapSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetToolBitmapSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSize* size;
        int sizeState = 0;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxSize, &size, &sizeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolBitmapSize(*size);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetToolBitmapSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolBitmapSize, "GetToolBitmapSize() -> wx.Size");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolBitmapSize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolBitmapSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetToolBitmapSize());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolBitmapSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetOverflowVisible, "GetOverflowVisible() -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_GetOverflowVisible(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetOverflowVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetOverflowVisible();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetOverflowVisible, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetOverflowVisible, "SetOverflowVisible(visible)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetOverflowVisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetOverflowVisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool visible;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_visible,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &visible))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetOverflowVisible(visible);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetOverflowVisible, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetGripperVisible, "GetGripperVisible() -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_GetGripperVisible(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetGripperVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetGripperVisible();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetGripperVisible, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetGripperVisible, "SetGripperVisible(visible)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetGripperVisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetGripperVisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool visible;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_visible,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &visible))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetGripperVisible(visible);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetGripperVisible, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_ToggleTool, "ToggleTool(toolId, state)");

extern "C" {static PyObject *meth_wxAuiToolBar_ToggleTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_ToggleTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        bool state;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bib", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId, &state))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ToggleTool(toolId,state);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_ToggleTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolToggled, "GetToolToggled(toolId) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolToggled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolToggled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolToggled(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolToggled, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_EnableTool, "EnableTool(toolId, state)");

extern "C" {static PyObject *meth_wxAuiToolBar_EnableTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_EnableTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        bool state;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bib", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId, &state))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnableTool(toolId,state);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_EnableTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolEnabled, "GetToolEnabled(toolId) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolEnabled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolEnabled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolEnabled(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolEnabled, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetToolDropDown, "SetToolDropDown(toolId, dropdown)\n"
"\n"
"Set whether the specified toolbar item has a drop down button.");

extern "C" {static PyObject *meth_wxAuiToolBar_SetToolDropDown(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetToolDropDown(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        bool dropdown;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_dropdown,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bib", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId, &dropdown))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolDropDown(toolId,dropdown);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetToolDropDown, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolDropDown, "GetToolDropDown(toolId) -> bool\n"
"\n"
"Returns whether the specified toolbar item has an associated drop down\n"
"button.");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolDropDown(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolDropDown(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolDropDown(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolDropDown, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetToolBorderPadding, "SetToolBorderPadding(padding)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetToolBorderPadding(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetToolBorderPadding(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int padding;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_padding,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &padding))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolBorderPadding(padding);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetToolBorderPadding, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolBorderPadding, "GetToolBorderPadding() -> int");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolBorderPadding(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolBorderPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolBorderPadding();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolBorderPadding, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetToolTextOrientation, "SetToolTextOrientation(orientation)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetToolTextOrientation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetToolTextOrientation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int orientation;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_orientation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &orientation))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolTextOrientation(orientation);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetToolTextOrientation, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolTextOrientation, "GetToolTextOrientation() -> int");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolTextOrientation(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolTextOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolTextOrientation();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolTextOrientation, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetToolPacking, "SetToolPacking(packing)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetToolPacking(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetToolPacking(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int packing;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_packing,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &packing))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolPacking(packing);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetToolPacking, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolPacking, "GetToolPacking() -> int");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolPacking(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolPacking(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolPacking();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolPacking, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetToolProportion, "SetToolProportion(toolId, proportion)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetToolProportion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetToolProportion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        int proportion;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_proportion,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId, &proportion))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolProportion(toolId,proportion);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetToolProportion, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolProportion, "GetToolProportion(toolId) -> int");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolProportion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolProportion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolProportion(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolProportion, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetToolSeparation, "SetToolSeparation(separation)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetToolSeparation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetToolSeparation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int separation;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_separation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &separation))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolSeparation(separation);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetToolSeparation, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolSeparation, "GetToolSeparation() -> int");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolSeparation(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolSeparation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolSeparation();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolSeparation, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetToolSticky, "SetToolSticky(toolId, sticky)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetToolSticky(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetToolSticky(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        bool sticky;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_sticky,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bib", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId, &sticky))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolSticky(toolId,sticky);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetToolSticky, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolSticky, "GetToolSticky(toolId) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolSticky(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolSticky(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolSticky(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolSticky, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolLabel, "GetToolLabel(toolId) -> String");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolLabel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolLabel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetToolLabel(toolId));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolLabel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetToolLabel, "SetToolLabel(toolId, label)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetToolLabel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetToolLabel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxString* label;
        int labelState = 0;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_label,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId, sipType_wxString,&label, &labelState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolLabel(toolId,*label);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetToolLabel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolBitmap, "GetToolBitmap(toolId) -> wx.Bitmap");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetToolBitmap(toolId));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetToolBitmap, "SetToolBitmap(toolId, bitmap)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetToolBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetToolBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxBitmap* bitmap;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ9", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolBitmap(toolId,*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetToolBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolShortHelp, "GetToolShortHelp(toolId) -> String");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolShortHelp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolShortHelp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetToolShortHelp(toolId));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolShortHelp, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetToolShortHelp, "SetToolShortHelp(toolId, help_string)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetToolShortHelp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetToolShortHelp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxString* help_string;
        int help_stringState = 0;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_help_string,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId, sipType_wxString,&help_string, &help_stringState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolShortHelp(toolId,*help_string);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(help_string),sipType_wxString,help_stringState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetToolShortHelp, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetToolLongHelp, "GetToolLongHelp(toolId) -> String");

extern "C" {static PyObject *meth_wxAuiToolBar_GetToolLongHelp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetToolLongHelp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetToolLongHelp(toolId));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetToolLongHelp, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetToolLongHelp, "SetToolLongHelp(toolId, help_string)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetToolLongHelp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetToolLongHelp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxString* help_string;
        int help_stringState = 0;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_help_string,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &toolId, sipType_wxString,&help_string, &help_stringState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolLongHelp(toolId,*help_string);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(help_string),sipType_wxString,help_stringState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetToolLongHelp, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetCustomOverflowItems, "SetCustomOverflowItems(prepend, append)\n"
"\n"
"Add toolbar items that are always displayed in the overflow menu.");

extern "C" {static PyObject *meth_wxAuiToolBar_SetCustomOverflowItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetCustomOverflowItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiToolBarItemArray* prepend;
        const  ::wxAuiToolBarItemArray* append;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_prepend,
            sipName_append,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxAuiToolBarItemArray, &prepend, sipType_wxAuiToolBarItemArray, &append))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCustomOverflowItems(*prepend,*append);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetCustomOverflowItems, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetHintSize, "GetHintSize(dock_direction) -> wx.Size\n"
"\n"
"get size of hint rectangle for a particular dock location");

extern "C" {static PyObject *meth_wxAuiToolBar_GetHintSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetHintSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int dock_direction;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dock_direction,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &dock_direction))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetHintSize(dock_direction));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetHintSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_IsPaneValid, "IsPaneValid(pane) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_IsPaneValid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_IsPaneValid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiPaneInfo* pane;
        const  ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pane,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxAuiPaneInfo, &pane))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsPaneValid(*pane);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_IsPaneValid, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxAuiToolBar_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetClientAreaOrigin, doc_wxAuiToolBar_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_Validate, doc_wxAuiToolBar_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_TransferDataToWindow, doc_wxAuiToolBar_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_TransferDataFromWindow, doc_wxAuiToolBar_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxAuiToolBar_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_InitDialog, doc_wxAuiToolBar_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_AcceptsFocus, doc_wxAuiToolBar_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_AcceptsFocusRecursively, doc_wxAuiToolBar_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_AcceptsFocusFromKeyboard, doc_wxAuiToolBar_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxAuiToolBar_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_AddChild, doc_wxAuiToolBar_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxAuiToolBar_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_RemoveChild, doc_wxAuiToolBar_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxAuiToolBar_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_InheritAttributes, doc_wxAuiToolBar_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_ShouldInheritColours, doc_wxAuiToolBar_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxAuiToolBar_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_OnInternalIdle, doc_wxAuiToolBar_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxAuiToolBar_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetMainWindowOfCompositeControl, doc_wxAuiToolBar_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_InformFirstDirection, doc_wxAuiToolBar_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetCanFocus, doc_wxAuiToolBar_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_Destroy, doc_wxAuiToolBar_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxAuiToolBar_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_SetValidator, doc_wxAuiToolBar_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxAuiToolBar_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetValidator, doc_wxAuiToolBar_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth_wxAuiToolBar_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
         ::wxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiToolBar::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_EnableVisibleFocus, doc_wxAuiToolBar_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_ProcessEvent, doc_wxAuiToolBar_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxAuiToolBar_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoEnable, doc_wxAuiToolBar_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxAuiToolBar_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxAuiToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoGetPosition, doc_wxAuiToolBar_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxAuiToolBar_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxAuiToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoGetSize, doc_wxAuiToolBar_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxAuiToolBar_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxAuiToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoGetClientSize, doc_wxAuiToolBar_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxAuiToolBar_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoGetBestSize, doc_wxAuiToolBar_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxAuiToolBar_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoGetBestClientSize, doc_wxAuiToolBar_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxAuiToolBar_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoSetSize, doc_wxAuiToolBar_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxAuiToolBar_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoSetClientSize, doc_wxAuiToolBar_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxAuiToolBar_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoSetSizeHints, doc_wxAuiToolBar_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxAuiToolBar_DoGetBorderSize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoGetBorderSize, doc_wxAuiToolBar_DoGetBorderSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxAuiToolBar_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxAuiToolBar, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoMoveWindow, doc_wxAuiToolBar_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxAuiToolBar_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoSetWindowVariant, doc_wxAuiToolBar_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxAuiToolBar_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetDefaultBorder, doc_wxAuiToolBar_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxAuiToolBar_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetDefaultBorderForControl, doc_wxAuiToolBar_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxAuiToolBar_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoFreeze, doc_wxAuiToolBar_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxAuiToolBar_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_DoThaw, doc_wxAuiToolBar_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxAuiToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_HasTransparentBackground, doc_wxAuiToolBar_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_TryBefore, doc_wxAuiToolBar_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxAuiToolBar_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiToolBar, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_TryAfter, doc_wxAuiToolBar_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiToolBar_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes");

extern "C" {static PyObject *meth_wxAuiToolBar_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBar_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxAuiToolBar::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiToolBar, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxAuiToolBar(void *, const sipTypeDef *);}
static void *cast_wxAuiToolBar(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxAuiToolBar *sipCpp = reinterpret_cast< ::wxAuiToolBar *>(sipCppV);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxAuiToolBar(void *, int);}
static void release_wxAuiToolBar(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxAuiToolBar *>(sipCppV);
    else
        delete reinterpret_cast< ::wxAuiToolBar *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxAuiToolBar(Py_ssize_t);}
static void *array_wxAuiToolBar(Py_ssize_t sipNrElem)
{
    return new  ::wxAuiToolBar[sipNrElem];
}


extern "C" {static void dealloc_wxAuiToolBar(sipSimpleWrapper *);}
static void dealloc_wxAuiToolBar(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxAuiToolBar *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxAuiToolBar(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxAuiToolBar(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxAuiToolBar(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxAuiToolBar *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiToolBar();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& positiondef = wxDefaultPosition;
        const  ::wxPoint* position = &positiondef;
        int positionState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxAUI_TB_DEFAULT_STYLE;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_position,
            sipName_size,
            sipName_style,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1l", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &position, &positionState, sipType_wxSize, &size, &sizeState, &style))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiToolBar(parent,id,*position,*size,style);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(position),sipType_wxPoint,positionState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxAuiToolBar[] = {{7, 0, 1}};


static PyMethodDef methods_wxAuiToolBar[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxAuiToolBar_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxAuiToolBar_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxAuiToolBar_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), SIP_MLMETH_CAST(meth_wxAuiToolBar_AddChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_AddChild)},
    {SIP_MLNAME_CAST(sipName_AddControl), SIP_MLMETH_CAST(meth_wxAuiToolBar_AddControl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_AddControl)},
    {SIP_MLNAME_CAST(sipName_AddLabel), SIP_MLMETH_CAST(meth_wxAuiToolBar_AddLabel), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_AddLabel)},
    {SIP_MLNAME_CAST(sipName_AddSeparator), meth_wxAuiToolBar_AddSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_AddSeparator)},
    {SIP_MLNAME_CAST(sipName_AddSpacer), SIP_MLMETH_CAST(meth_wxAuiToolBar_AddSpacer), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_AddSpacer)},
    {SIP_MLNAME_CAST(sipName_AddStretchSpacer), SIP_MLMETH_CAST(meth_wxAuiToolBar_AddStretchSpacer), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_AddStretchSpacer)},
    {SIP_MLNAME_CAST(sipName_AddTool), SIP_MLMETH_CAST(meth_wxAuiToolBar_AddTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_AddTool)},
    {SIP_MLNAME_CAST(sipName_Clear), meth_wxAuiToolBar_Clear, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_Clear)},
    {SIP_MLNAME_CAST(sipName_ClearTools), meth_wxAuiToolBar_ClearTools, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_ClearTools)},
    {SIP_MLNAME_CAST(sipName_Create), SIP_MLMETH_CAST(meth_wxAuiToolBar_Create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_Create)},
    {SIP_MLNAME_CAST(sipName_DeleteByIndex), SIP_MLMETH_CAST(meth_wxAuiToolBar_DeleteByIndex), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DeleteByIndex)},
    {SIP_MLNAME_CAST(sipName_DeleteTool), SIP_MLMETH_CAST(meth_wxAuiToolBar_DeleteTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DeleteTool)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxAuiToolBar_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_Destroy)},
    {SIP_MLNAME_CAST(sipName_DestroyTool), SIP_MLMETH_CAST(meth_wxAuiToolBar_DestroyTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DestroyTool)},
    {SIP_MLNAME_CAST(sipName_DestroyToolByIndex), SIP_MLMETH_CAST(meth_wxAuiToolBar_DestroyToolByIndex), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DestroyToolByIndex)},
    {SIP_MLNAME_CAST(sipName_DoEnable), SIP_MLMETH_CAST(meth_wxAuiToolBar_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), meth_wxAuiToolBar_DoFreeze, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), meth_wxAuiToolBar_DoGetBestClientSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), meth_wxAuiToolBar_DoGetBestSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), meth_wxAuiToolBar_DoGetBorderSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), SIP_MLMETH_CAST(meth_wxAuiToolBar_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), SIP_MLMETH_CAST(meth_wxAuiToolBar_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), SIP_MLMETH_CAST(meth_wxAuiToolBar_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), SIP_MLMETH_CAST(meth_wxAuiToolBar_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), SIP_MLMETH_CAST(meth_wxAuiToolBar_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), SIP_MLMETH_CAST(meth_wxAuiToolBar_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), SIP_MLMETH_CAST(meth_wxAuiToolBar_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), SIP_MLMETH_CAST(meth_wxAuiToolBar_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), meth_wxAuiToolBar_DoThaw, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EnableTool), SIP_MLMETH_CAST(meth_wxAuiToolBar_EnableTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_EnableTool)},
    {SIP_MLNAME_CAST(sipName_EnableVisibleFocus), SIP_MLMETH_CAST(meth_wxAuiToolBar_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_EnableVisibleFocus)},
    {SIP_MLNAME_CAST(sipName_FindControl), SIP_MLMETH_CAST(meth_wxAuiToolBar_FindControl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_FindControl)},
    {SIP_MLNAME_CAST(sipName_FindTool), SIP_MLMETH_CAST(meth_wxAuiToolBar_FindTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_FindTool)},
    {SIP_MLNAME_CAST(sipName_FindToolByIndex), SIP_MLMETH_CAST(meth_wxAuiToolBar_FindToolByIndex), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_FindToolByIndex)},
    {SIP_MLNAME_CAST(sipName_FindToolByPosition), SIP_MLMETH_CAST(meth_wxAuiToolBar_FindToolByPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_FindToolByPosition)},
    {SIP_MLNAME_CAST(sipName_GetArtProvider), meth_wxAuiToolBar_GetArtProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetArtProvider)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxAuiToolBar_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), meth_wxAuiToolBar_GetDefaultBorder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), meth_wxAuiToolBar_GetDefaultBorderForControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetGripperVisible), meth_wxAuiToolBar_GetGripperVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetGripperVisible)},
    {SIP_MLNAME_CAST(sipName_GetHintSize), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetHintSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetHintSize)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxAuiToolBar_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetOverflowVisible), meth_wxAuiToolBar_GetOverflowVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetOverflowVisible)},
    {SIP_MLNAME_CAST(sipName_GetToolBarFits), meth_wxAuiToolBar_GetToolBarFits, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolBarFits)},
    {SIP_MLNAME_CAST(sipName_GetToolBitmap), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolBitmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolBitmap)},
    {SIP_MLNAME_CAST(sipName_GetToolBitmapSize), meth_wxAuiToolBar_GetToolBitmapSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolBitmapSize)},
    {SIP_MLNAME_CAST(sipName_GetToolBorderPadding), meth_wxAuiToolBar_GetToolBorderPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolBorderPadding)},
    {SIP_MLNAME_CAST(sipName_GetToolCount), meth_wxAuiToolBar_GetToolCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolCount)},
    {SIP_MLNAME_CAST(sipName_GetToolDropDown), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolDropDown), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolDropDown)},
    {SIP_MLNAME_CAST(sipName_GetToolEnabled), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolEnabled), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolEnabled)},
    {SIP_MLNAME_CAST(sipName_GetToolFits), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolFits), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolFits)},
    {SIP_MLNAME_CAST(sipName_GetToolFitsByIndex), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolFitsByIndex), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolFitsByIndex)},
    {SIP_MLNAME_CAST(sipName_GetToolIndex), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolIndex), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolIndex)},
    {SIP_MLNAME_CAST(sipName_GetToolLabel), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolLabel), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolLabel)},
    {SIP_MLNAME_CAST(sipName_GetToolLongHelp), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolLongHelp), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolLongHelp)},
    {SIP_MLNAME_CAST(sipName_GetToolPacking), meth_wxAuiToolBar_GetToolPacking, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolPacking)},
    {SIP_MLNAME_CAST(sipName_GetToolPos), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolPos), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolPos)},
    {SIP_MLNAME_CAST(sipName_GetToolProportion), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolProportion), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolProportion)},
    {SIP_MLNAME_CAST(sipName_GetToolRect), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolRect), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolRect)},
    {SIP_MLNAME_CAST(sipName_GetToolSeparation), meth_wxAuiToolBar_GetToolSeparation, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolSeparation)},
    {SIP_MLNAME_CAST(sipName_GetToolShortHelp), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolShortHelp), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolShortHelp)},
    {SIP_MLNAME_CAST(sipName_GetToolSticky), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolSticky), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolSticky)},
    {SIP_MLNAME_CAST(sipName_GetToolTextOrientation), meth_wxAuiToolBar_GetToolTextOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolTextOrientation)},
    {SIP_MLNAME_CAST(sipName_GetToolToggled), SIP_MLMETH_CAST(meth_wxAuiToolBar_GetToolToggled), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetToolToggled)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxAuiToolBar_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetValidator)},
    {SIP_MLNAME_CAST(sipName_GetWindowStyleFlag), meth_wxAuiToolBar_GetWindowStyleFlag, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_GetWindowStyleFlag)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), meth_wxAuiToolBar_HasTransparentBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), SIP_MLMETH_CAST(meth_wxAuiToolBar_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxAuiToolBar_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxAuiToolBar_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_InitDialog)},
    {SIP_MLNAME_CAST(sipName_IsPaneValid), SIP_MLMETH_CAST(meth_wxAuiToolBar_IsPaneValid), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_IsPaneValid)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxAuiToolBar_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), SIP_MLMETH_CAST(meth_wxAuiToolBar_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_Realize), meth_wxAuiToolBar_Realize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_Realize)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), SIP_MLMETH_CAST(meth_wxAuiToolBar_RemoveChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), meth_wxAuiToolBar_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_SetArtProvider), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetArtProvider), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetArtProvider)},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetCanFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetCustomOverflowItems), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetCustomOverflowItems), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetCustomOverflowItems)},
    {SIP_MLNAME_CAST(sipName_SetFont), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetFont), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetFont)},
    {SIP_MLNAME_CAST(sipName_SetGripperVisible), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetGripperVisible), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetGripperVisible)},
    {SIP_MLNAME_CAST(sipName_SetMargins), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetMargins), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetMargins)},
    {SIP_MLNAME_CAST(sipName_SetOverflowVisible), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetOverflowVisible), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetOverflowVisible)},
    {SIP_MLNAME_CAST(sipName_SetToolBitmap), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetToolBitmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetToolBitmap)},
    {SIP_MLNAME_CAST(sipName_SetToolBitmapSize), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetToolBitmapSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetToolBitmapSize)},
    {SIP_MLNAME_CAST(sipName_SetToolBorderPadding), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetToolBorderPadding), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetToolBorderPadding)},
    {SIP_MLNAME_CAST(sipName_SetToolDropDown), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetToolDropDown), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetToolDropDown)},
    {SIP_MLNAME_CAST(sipName_SetToolLabel), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetToolLabel), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetToolLabel)},
    {SIP_MLNAME_CAST(sipName_SetToolLongHelp), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetToolLongHelp), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetToolLongHelp)},
    {SIP_MLNAME_CAST(sipName_SetToolPacking), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetToolPacking), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetToolPacking)},
    {SIP_MLNAME_CAST(sipName_SetToolProportion), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetToolProportion), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetToolProportion)},
    {SIP_MLNAME_CAST(sipName_SetToolSeparation), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetToolSeparation), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetToolSeparation)},
    {SIP_MLNAME_CAST(sipName_SetToolShortHelp), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetToolShortHelp), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetToolShortHelp)},
    {SIP_MLNAME_CAST(sipName_SetToolSticky), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetToolSticky), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetToolSticky)},
    {SIP_MLNAME_CAST(sipName_SetToolTextOrientation), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetToolTextOrientation), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetToolTextOrientation)},
    {SIP_MLNAME_CAST(sipName_SetValidator), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetValidator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetValidator)},
    {SIP_MLNAME_CAST(sipName_SetWindowStyleFlag), SIP_MLMETH_CAST(meth_wxAuiToolBar_SetWindowStyleFlag), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_SetWindowStyleFlag)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxAuiToolBar_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_ToggleTool), SIP_MLMETH_CAST(meth_wxAuiToolBar_ToggleTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_ToggleTool)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxAuiToolBar_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxAuiToolBar_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth_wxAuiToolBar_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth_wxAuiToolBar_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBar_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxAuiToolBar_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBar_Validate)}
};

sipVariableDef variables_wxAuiToolBar[] = {
    {PropertyVariable, sipName_WindowStyleFlag, &methods_wxAuiToolBar[69], &methods_wxAuiToolBar[100], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ToolTextOrientation, &methods_wxAuiToolBar[66], &methods_wxAuiToolBar[98], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ToolSeparation, &methods_wxAuiToolBar[63], &methods_wxAuiToolBar[95], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ToolPacking, &methods_wxAuiToolBar[59], &methods_wxAuiToolBar[93], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ToolCount, &methods_wxAuiToolBar[51], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ToolBorderPadding, &methods_wxAuiToolBar[50], &methods_wxAuiToolBar[89], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ToolBitmapSize, &methods_wxAuiToolBar[49], &methods_wxAuiToolBar[88], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ToolBarFits, &methods_wxAuiToolBar[47], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_OverflowVisible, &methods_wxAuiToolBar[46], &methods_wxAuiToolBar[86], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_GripperVisible, &methods_wxAuiToolBar[43], &methods_wxAuiToolBar[84], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ArtProvider, &methods_wxAuiToolBar[38], &methods_wxAuiToolBar[80], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxAuiToolBar, "AuiToolBar()\n"
"AuiToolBar(parent, id=wx.ID_ANY, position=wx.DefaultPosition, size=wx.DefaultSize, style=AUI_TB_DEFAULT_STYLE)\n"
"\n"
"wxAuiToolBar is a dockable toolbar, part of the wxAUI class framework.");


sipClassTypeDef sipTypeDef__aui_wxAuiToolBar = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxAuiToolBar,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_AuiToolBar,
        {0, 0, 1},
        108, methods_wxAuiToolBar,
        0, SIP_NULLPTR,
        11, variables_wxAuiToolBar,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxAuiToolBar,
    -1,
    -1,
    supers_wxAuiToolBar,
    SIP_NULLPTR,
    init_type_wxAuiToolBar,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxAuiToolBar,
    SIP_NULLPTR,
    array_wxAuiToolBar,
    SIP_NULLPTR,
    release_wxAuiToolBar,
    cast_wxAuiToolBar,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
