/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_grid.h"

        #include <wx/grid.h>

        #include <wx/grid.h>
        #include <wx/grid.h>
        #include <wx/object.h>
        #include <wx/grid.h>
        #include <wx/grid.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    PyObject* _wxGridTableBase_GetValue(wxGridTableBase* self, int row, int col)
    {
        return wx2PyString(self->GetValue(row, col));
    }


class sipwxGridTableBase : public  ::wxGridTableBase
{
public:
    sipwxGridTableBase();
    virtual ~sipwxGridTableBase();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool CanMeasureColUsingSameAttr(int) const SIP_OVERRIDE;
    bool CanHaveAttributes() SIP_OVERRIDE;
     ::wxGrid* GetView() const SIP_OVERRIDE;
    void SetView( ::wxGrid*) SIP_OVERRIDE;
    int GetNumberCols() SIP_OVERRIDE;
    int GetNumberRows() SIP_OVERRIDE;
    void SetColAttr( ::wxGridCellAttr*,int) SIP_OVERRIDE;
    void SetRowAttr( ::wxGridCellAttr*,int) SIP_OVERRIDE;
    void SetAttr( ::wxGridCellAttr*,int,int) SIP_OVERRIDE;
     ::wxGridCellAttr* GetAttr(int,int, ::wxGridCellAttr::wxAttrKind) SIP_OVERRIDE;
    void SetCornerLabelValue(const  ::wxString&) SIP_OVERRIDE;
    void SetColLabelValue(int,const  ::wxString&) SIP_OVERRIDE;
    void SetRowLabelValue(int,const  ::wxString&) SIP_OVERRIDE;
     ::wxString GetCornerLabelValue() const SIP_OVERRIDE;
     ::wxString GetColLabelValue(int) SIP_OVERRIDE;
     ::wxString GetRowLabelValue(int) SIP_OVERRIDE;
    bool DeleteCols(size_t,size_t) SIP_OVERRIDE;
    bool AppendCols(size_t) SIP_OVERRIDE;
    bool InsertCols(size_t,size_t) SIP_OVERRIDE;
    bool DeleteRows(size_t,size_t) SIP_OVERRIDE;
    bool AppendRows(size_t) SIP_OVERRIDE;
    bool InsertRows(size_t,size_t) SIP_OVERRIDE;
    void Clear() SIP_OVERRIDE;
    void SetValueAsBool(int,int,bool) SIP_OVERRIDE;
    void SetValueAsDouble(int,int,double) SIP_OVERRIDE;
    void SetValueAsLong(int,int,long) SIP_OVERRIDE;
    bool GetValueAsBool(int,int) SIP_OVERRIDE;
    double GetValueAsDouble(int,int) SIP_OVERRIDE;
    long GetValueAsLong(int,int) SIP_OVERRIDE;
    bool CanSetValueAs(int,int,const  ::wxString&) SIP_OVERRIDE;
    bool CanGetValueAs(int,int,const  ::wxString&) SIP_OVERRIDE;
     ::wxString GetTypeName(int,int) SIP_OVERRIDE;
    void SetValue(int,int,const  ::wxString&) SIP_OVERRIDE;
     ::wxString GetValue(int,int) SIP_OVERRIDE;
    bool IsEmptyCell(int,int) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxGridTableBase(const sipwxGridTableBase &);
    sipwxGridTableBase &operator = (const sipwxGridTableBase &);

    char sipPyMethods[35];
};

sipwxGridTableBase::sipwxGridTableBase():  ::wxGridTableBase(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxGridTableBase::~sipwxGridTableBase()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxGridTableBase::CanMeasureColUsingSameAttr(int col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_CanMeasureColUsingSameAttr);

    if (!sipMeth)
        return  ::wxGridTableBase::CanMeasureColUsingSameAttr(col);

    extern bool sipVH__grid_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__grid_45(sipGILState, 0, sipPySelf, sipMeth, col);
}

bool sipwxGridTableBase::CanHaveAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_CanHaveAttributes);

    if (!sipMeth)
        return  ::wxGridTableBase::CanHaveAttributes();

    extern bool sipVH__grid_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__grid_44(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxGrid* sipwxGridTableBase::GetView() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_GetView);

    if (!sipMeth)
        return  ::wxGridTableBase::GetView();

    extern  ::wxGrid* sipVH__grid_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__grid_43(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxGridTableBase::SetView( ::wxGrid*grid)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_SetView);

    if (!sipMeth)
    {
         ::wxGridTableBase::SetView(grid);
        return;
    }

    extern void sipVH__grid_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGrid*);

    sipVH__grid_42(sipGILState, 0, sipPySelf, sipMeth, grid);
}

int sipwxGridTableBase::GetNumberCols()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_GridTableBase,sipName_GetNumberCols);

    if (!sipMeth)
        return 0;

    extern int sipVH__grid_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__grid_41(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxGridTableBase::GetNumberRows()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_GridTableBase,sipName_GetNumberRows);

    if (!sipMeth)
        return 0;

    extern int sipVH__grid_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__grid_41(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxGridTableBase::SetColAttr( ::wxGridCellAttr*attr,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_SetColAttr);

    if (!sipMeth)
    {
         ::wxGridTableBase::SetColAttr(attr,col);
        return;
    }

    extern void sipVH__grid_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGridCellAttr*,int);

    sipVH__grid_22(sipGILState, 0, sipPySelf, sipMeth, attr, col);
}

void sipwxGridTableBase::SetRowAttr( ::wxGridCellAttr*attr,int row)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_SetRowAttr);

    if (!sipMeth)
    {
         ::wxGridTableBase::SetRowAttr(attr,row);
        return;
    }

    extern void sipVH__grid_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGridCellAttr*,int);

    sipVH__grid_22(sipGILState, 0, sipPySelf, sipMeth, attr, row);
}

void sipwxGridTableBase::SetAttr( ::wxGridCellAttr*attr,int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_SetAttr);

    if (!sipMeth)
    {
         ::wxGridTableBase::SetAttr(attr,row,col);
        return;
    }

    extern void sipVH__grid_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGridCellAttr*,int,int);

    sipVH__grid_21(sipGILState, 0, sipPySelf, sipMeth, attr, row, col);
}

 ::wxGridCellAttr* sipwxGridTableBase::GetAttr(int row,int col, ::wxGridCellAttr::wxAttrKind kind)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_GetAttr);

    if (!sipMeth)
        return  ::wxGridTableBase::GetAttr(row,col,kind);

    extern  ::wxGridCellAttr* sipVH__grid_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int, ::wxGridCellAttr::wxAttrKind);

    return sipVH__grid_26(sipGILState, 0, sipPySelf, sipMeth, row, col, kind);
}

void sipwxGridTableBase::SetCornerLabelValue(const  ::wxString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_SetCornerLabelValue);

    if (!sipMeth)
    {
         ::wxGridTableBase::SetCornerLabelValue(a0);
        return;
    }

    extern void sipVH__grid_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    sipVH__grid_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipwxGridTableBase::SetColLabelValue(int col,const  ::wxString& label)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_SetColLabelValue);

    if (!sipMeth)
    {
         ::wxGridTableBase::SetColLabelValue(col,label);
        return;
    }

    extern void sipVH__grid_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::wxString&);

    sipVH__grid_40(sipGILState, 0, sipPySelf, sipMeth, col, label);
}

void sipwxGridTableBase::SetRowLabelValue(int row,const  ::wxString& label)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_SetRowLabelValue);

    if (!sipMeth)
    {
         ::wxGridTableBase::SetRowLabelValue(row,label);
        return;
    }

    extern void sipVH__grid_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::wxString&);

    sipVH__grid_40(sipGILState, 0, sipPySelf, sipMeth, row, label);
}

 ::wxString sipwxGridTableBase::GetCornerLabelValue() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_GetCornerLabelValue);

    if (!sipMeth)
        return  ::wxGridTableBase::GetCornerLabelValue();

    extern  ::wxString sipVH__grid_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__grid_16(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxGridTableBase::GetColLabelValue(int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_GetColLabelValue);

    if (!sipMeth)
        return  ::wxGridTableBase::GetColLabelValue(col);

    extern  ::wxString sipVH__grid_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__grid_39(sipGILState, 0, sipPySelf, sipMeth, col);
}

 ::wxString sipwxGridTableBase::GetRowLabelValue(int row)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_GetRowLabelValue);

    if (!sipMeth)
        return  ::wxGridTableBase::GetRowLabelValue(row);

    extern  ::wxString sipVH__grid_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__grid_39(sipGILState, 0, sipPySelf, sipMeth, row);
}

bool sipwxGridTableBase::DeleteCols(size_t pos,size_t numCols)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_DeleteCols);

    if (!sipMeth)
        return  ::wxGridTableBase::DeleteCols(pos,numCols);

    extern bool sipVH__grid_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t,size_t);

    return sipVH__grid_37(sipGILState, 0, sipPySelf, sipMeth, pos, numCols);
}

bool sipwxGridTableBase::AppendCols(size_t numCols)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_AppendCols);

    if (!sipMeth)
        return  ::wxGridTableBase::AppendCols(numCols);

    extern bool sipVH__grid_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t);

    return sipVH__grid_38(sipGILState, 0, sipPySelf, sipMeth, numCols);
}

bool sipwxGridTableBase::InsertCols(size_t pos,size_t numCols)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_InsertCols);

    if (!sipMeth)
        return  ::wxGridTableBase::InsertCols(pos,numCols);

    extern bool sipVH__grid_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t,size_t);

    return sipVH__grid_37(sipGILState, 0, sipPySelf, sipMeth, pos, numCols);
}

bool sipwxGridTableBase::DeleteRows(size_t pos,size_t numRows)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_DeleteRows);

    if (!sipMeth)
        return  ::wxGridTableBase::DeleteRows(pos,numRows);

    extern bool sipVH__grid_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t,size_t);

    return sipVH__grid_37(sipGILState, 0, sipPySelf, sipMeth, pos, numRows);
}

bool sipwxGridTableBase::AppendRows(size_t numRows)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_AppendRows);

    if (!sipMeth)
        return  ::wxGridTableBase::AppendRows(numRows);

    extern bool sipVH__grid_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t);

    return sipVH__grid_38(sipGILState, 0, sipPySelf, sipMeth, numRows);
}

bool sipwxGridTableBase::InsertRows(size_t pos,size_t numRows)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_InsertRows);

    if (!sipMeth)
        return  ::wxGridTableBase::InsertRows(pos,numRows);

    extern bool sipVH__grid_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t,size_t);

    return sipVH__grid_37(sipGILState, 0, sipPySelf, sipMeth, pos, numRows);
}

void sipwxGridTableBase::Clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_Clear);

    if (!sipMeth)
    {
         ::wxGridTableBase::Clear();
        return;
    }

    extern void sipVH__grid_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__grid_9(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxGridTableBase::SetValueAsBool(int row,int col,bool value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_SetValueAsBool);

    if (!sipMeth)
    {
         ::wxGridTableBase::SetValueAsBool(row,col,value);
        return;
    }

    extern void sipVH__grid_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,bool);

    sipVH__grid_36(sipGILState, 0, sipPySelf, sipMeth, row, col, value);
}

void sipwxGridTableBase::SetValueAsDouble(int row,int col,double value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_SetValueAsDouble);

    if (!sipMeth)
    {
         ::wxGridTableBase::SetValueAsDouble(row,col,value);
        return;
    }

    extern void sipVH__grid_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,double);

    sipVH__grid_35(sipGILState, 0, sipPySelf, sipMeth, row, col, value);
}

void sipwxGridTableBase::SetValueAsLong(int row,int col,long value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_SetValueAsLong);

    if (!sipMeth)
    {
         ::wxGridTableBase::SetValueAsLong(row,col,value);
        return;
    }

    extern void sipVH__grid_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,long);

    sipVH__grid_34(sipGILState, 0, sipPySelf, sipMeth, row, col, value);
}

bool sipwxGridTableBase::GetValueAsBool(int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_GetValueAsBool);

    if (!sipMeth)
        return  ::wxGridTableBase::GetValueAsBool(row,col);

    extern bool sipVH__grid_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__grid_27(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

double sipwxGridTableBase::GetValueAsDouble(int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_GetValueAsDouble);

    if (!sipMeth)
        return  ::wxGridTableBase::GetValueAsDouble(row,col);

    extern double sipVH__grid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__grid_33(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

long sipwxGridTableBase::GetValueAsLong(int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_GetValueAsLong);

    if (!sipMeth)
        return  ::wxGridTableBase::GetValueAsLong(row,col);

    extern long sipVH__grid_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__grid_32(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

bool sipwxGridTableBase::CanSetValueAs(int row,int col,const  ::wxString& typeName)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_CanSetValueAs);

    if (!sipMeth)
        return  ::wxGridTableBase::CanSetValueAs(row,col,typeName);

    extern bool sipVH__grid_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::wxString&);

    return sipVH__grid_31(sipGILState, 0, sipPySelf, sipMeth, row, col, typeName);
}

bool sipwxGridTableBase::CanGetValueAs(int row,int col,const  ::wxString& typeName)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_CanGetValueAs);

    if (!sipMeth)
        return  ::wxGridTableBase::CanGetValueAs(row,col,typeName);

    extern bool sipVH__grid_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::wxString&);

    return sipVH__grid_31(sipGILState, 0, sipPySelf, sipMeth, row, col, typeName);
}

 ::wxString sipwxGridTableBase::GetTypeName(int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_GetTypeName);

    if (!sipMeth)
        return  ::wxGridTableBase::GetTypeName(row,col);

    extern  ::wxString sipVH__grid_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__grid_30(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

void sipwxGridTableBase::SetValue(int row,int col,const  ::wxString& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,sipName_GridTableBase,sipName_SetValue);

    if (!sipMeth)
        return;

    extern void sipVH__grid_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::wxString&);

    sipVH__grid_29(sipGILState, 0, sipPySelf, sipMeth, row, col, value);
}

 ::wxString sipwxGridTableBase::GetValue(int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,sipName_GridTableBase,sipName_GetValue);

    if (!sipMeth)
        return  ::wxString();

    extern  ::wxString sipVH__grid_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__grid_28(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

bool sipwxGridTableBase::IsEmptyCell(int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_IsEmptyCell);

    if (!sipMeth)
        return  ::wxGridTableBase::IsEmptyCell(row,col);

    extern bool sipVH__grid_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__grid_27(sipGILState, 0, sipPySelf, sipMeth, row, col);
}


PyDoc_STRVAR(doc_wxGridTableBase_IsEmptyCell, "IsEmptyCell(row, col) -> bool\n"
"\n"
"May be overridden to implement testing for empty cells.");

extern "C" {static PyObject *meth_wxGridTableBase_IsEmptyCell(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_IsEmptyCell(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::IsEmptyCell(row,col) : sipCpp->IsEmptyCell(row,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_IsEmptyCell, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_IsEmpty, "IsEmpty(coords) -> bool\n"
"\n"
"Same as IsEmptyCell() but taking wxGridCellCoords.");

extern "C" {static PyObject *meth_wxGridTableBase_IsEmpty(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_IsEmpty(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxGridCellCoords* coords;
        int coordsState = 0;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_coords,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxGridTableBase, &sipCpp, sipType_wxGridCellCoords, &coords, &coordsState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsEmpty(*coords);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxGridCellCoords *>(coords),sipType_wxGridCellCoords,coordsState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_IsEmpty, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetValue, "GetValue(row, col) -> PyObject\n"
"\n"
"Must be overridden to implement accessing the table values as text.");

extern "C" {static PyObject *meth_wxGridTableBase_GetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int row;
        int col;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GridTableBase, sipName_GetValue);
                return SIP_NULLPTR;
            }

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGridTableBase_GetValue(sipCpp, row, col);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_SetValue, "SetValue(row, col, value)\n"
"\n"
"Must be overridden to implement setting the table values as text.");

extern "C" {static PyObject *meth_wxGridTableBase_SetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_SetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int row;
        int col;
        const  ::wxString* value;
        int valueState = 0;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiJ1", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col, sipType_wxString,&value, &valueState))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GridTableBase, sipName_SetValue);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetValue(row,col,*value);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(value),sipType_wxString,valueState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_SetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetTypeName, "GetTypeName(row, col) -> String\n"
"\n"
"Returns the type of the value in the given cell.");

extern "C" {static PyObject *meth_wxGridTableBase_GetTypeName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetTypeName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxGridTableBase::GetTypeName(row,col) : sipCpp->GetTypeName(row,col)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetTypeName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_CanGetValueAs, "CanGetValueAs(row, col, typeName) -> bool\n"
"\n"
"Returns true if the value of the given cell can be accessed as if it\n"
"were of the specified type.");

extern "C" {static PyObject *meth_wxGridTableBase_CanGetValueAs(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_CanGetValueAs(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
        const  ::wxString* typeName;
        int typeNameState = 0;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
            sipName_typeName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiJ1", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col, sipType_wxString,&typeName, &typeNameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::CanGetValueAs(row,col,*typeName) : sipCpp->CanGetValueAs(row,col,*typeName));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(typeName),sipType_wxString,typeNameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_CanGetValueAs, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_CanSetValueAs, "CanSetValueAs(row, col, typeName) -> bool\n"
"\n"
"Returns true if the value of the given cell can be set as if it were\n"
"of the specified type.");

extern "C" {static PyObject *meth_wxGridTableBase_CanSetValueAs(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_CanSetValueAs(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
        const  ::wxString* typeName;
        int typeNameState = 0;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
            sipName_typeName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiJ1", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col, sipType_wxString,&typeName, &typeNameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::CanSetValueAs(row,col,*typeName) : sipCpp->CanSetValueAs(row,col,*typeName));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(typeName),sipType_wxString,typeNameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_CanSetValueAs, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetValueAsLong, "GetValueAsLong(row, col) -> long\n"
"\n"
"Returns the value of the given cell as a long.");

extern "C" {static PyObject *meth_wxGridTableBase_GetValueAsLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetValueAsLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::GetValueAsLong(row,col) : sipCpp->GetValueAsLong(row,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetValueAsLong, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetValueAsDouble, "GetValueAsDouble(row, col) -> double\n"
"\n"
"Returns the value of the given cell as a double.");

extern "C" {static PyObject *meth_wxGridTableBase_GetValueAsDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetValueAsDouble(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col))
        {
            double sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::GetValueAsDouble(row,col) : sipCpp->GetValueAsDouble(row,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetValueAsDouble, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetValueAsBool, "GetValueAsBool(row, col) -> bool\n"
"\n"
"Returns the value of the given cell as a boolean.");

extern "C" {static PyObject *meth_wxGridTableBase_GetValueAsBool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetValueAsBool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::GetValueAsBool(row,col) : sipCpp->GetValueAsBool(row,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetValueAsBool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_SetValueAsLong, "SetValueAsLong(row, col, value)\n"
"\n"
"Sets the value of the given cell as a long.");

extern "C" {static PyObject *meth_wxGridTableBase_SetValueAsLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_SetValueAsLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
        long value;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biil", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col, &value))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::SetValueAsLong(row,col,value) : sipCpp->SetValueAsLong(row,col,value));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_SetValueAsLong, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_SetValueAsDouble, "SetValueAsDouble(row, col, value)\n"
"\n"
"Sets the value of the given cell as a double.");

extern "C" {static PyObject *meth_wxGridTableBase_SetValueAsDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_SetValueAsDouble(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
        double value;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biid", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col, &value))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::SetValueAsDouble(row,col,value) : sipCpp->SetValueAsDouble(row,col,value));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_SetValueAsDouble, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_SetValueAsBool, "SetValueAsBool(row, col, value)\n"
"\n"
"Sets the value of the given cell as a boolean.");

extern "C" {static PyObject *meth_wxGridTableBase_SetValueAsBool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_SetValueAsBool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
        bool value;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biib", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col, &value))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::SetValueAsBool(row,col,value) : sipCpp->SetValueAsBool(row,col,value));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_SetValueAsBool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_Clear, "Clear()\n"
"\n"
"Clear the table contents.");

extern "C" {static PyObject *meth_wxGridTableBase_Clear(PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_Clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridTableBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::Clear() : sipCpp->Clear());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_Clear, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_InsertRows, "InsertRows(pos=0, numRows=1) -> bool\n"
"\n"
"Insert additional rows into the table.");

extern "C" {static PyObject *meth_wxGridTableBase_InsertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_InsertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t pos = 0;
        size_t numRows = 1;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_numRows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|==", &sipSelf, sipType_wxGridTableBase, &sipCpp, &pos, &numRows))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::InsertRows(pos,numRows) : sipCpp->InsertRows(pos,numRows));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_InsertRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_AppendRows, "AppendRows(numRows=1) -> bool\n"
"\n"
"Append additional rows at the end of the table.");

extern "C" {static PyObject *meth_wxGridTableBase_AppendRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_AppendRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t numRows = 1;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_numRows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|=", &sipSelf, sipType_wxGridTableBase, &sipCpp, &numRows))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::AppendRows(numRows) : sipCpp->AppendRows(numRows));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_AppendRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_DeleteRows, "DeleteRows(pos=0, numRows=1) -> bool\n"
"\n"
"Delete rows from the table.");

extern "C" {static PyObject *meth_wxGridTableBase_DeleteRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_DeleteRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t pos = 0;
        size_t numRows = 1;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_numRows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|==", &sipSelf, sipType_wxGridTableBase, &sipCpp, &pos, &numRows))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::DeleteRows(pos,numRows) : sipCpp->DeleteRows(pos,numRows));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_DeleteRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_InsertCols, "InsertCols(pos=0, numCols=1) -> bool\n"
"\n"
"Exactly the same as InsertRows() but for columns.");

extern "C" {static PyObject *meth_wxGridTableBase_InsertCols(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_InsertCols(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t pos = 0;
        size_t numCols = 1;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_numCols,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|==", &sipSelf, sipType_wxGridTableBase, &sipCpp, &pos, &numCols))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::InsertCols(pos,numCols) : sipCpp->InsertCols(pos,numCols));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_InsertCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_AppendCols, "AppendCols(numCols=1) -> bool\n"
"\n"
"Exactly the same as AppendRows() but for columns.");

extern "C" {static PyObject *meth_wxGridTableBase_AppendCols(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_AppendCols(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t numCols = 1;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_numCols,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|=", &sipSelf, sipType_wxGridTableBase, &sipCpp, &numCols))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::AppendCols(numCols) : sipCpp->AppendCols(numCols));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_AppendCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_DeleteCols, "DeleteCols(pos=0, numCols=1) -> bool\n"
"\n"
"Exactly the same as DeleteRows() but for columns.");

extern "C" {static PyObject *meth_wxGridTableBase_DeleteCols(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_DeleteCols(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t pos = 0;
        size_t numCols = 1;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_numCols,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|==", &sipSelf, sipType_wxGridTableBase, &sipCpp, &pos, &numCols))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::DeleteCols(pos,numCols) : sipCpp->DeleteCols(pos,numCols));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_DeleteCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetRowLabelValue, "GetRowLabelValue(row) -> String\n"
"\n"
"Return the label of the specified row.");

extern "C" {static PyObject *meth_wxGridTableBase_GetRowLabelValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetRowLabelValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxGridTableBase::GetRowLabelValue(row) : sipCpp->GetRowLabelValue(row)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetRowLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetColLabelValue, "GetColLabelValue(col) -> String\n"
"\n"
"Return the label of the specified column.");

extern "C" {static PyObject *meth_wxGridTableBase_GetColLabelValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetColLabelValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int col;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGridTableBase, &sipCpp, &col))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxGridTableBase::GetColLabelValue(col) : sipCpp->GetColLabelValue(col)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetColLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetCornerLabelValue, "GetCornerLabelValue() -> String\n"
"\n"
"Return the label of the grid's corner.");

extern "C" {static PyObject *meth_wxGridTableBase_GetCornerLabelValue(PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetCornerLabelValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxGridTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridTableBase, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxGridTableBase::GetCornerLabelValue() : sipCpp->GetCornerLabelValue()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetCornerLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_SetRowLabelValue, "SetRowLabelValue(row, label)\n"
"\n"
"Set the given label for the specified row.");

extern "C" {static PyObject *meth_wxGridTableBase_SetRowLabelValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_SetRowLabelValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        const  ::wxString* label;
        int labelState = 0;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_label,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, sipType_wxString,&label, &labelState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::SetRowLabelValue(row,*label) : sipCpp->SetRowLabelValue(row,*label));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_SetRowLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_SetColLabelValue, "SetColLabelValue(col, label)\n"
"\n"
"Exactly the same as SetRowLabelValue() but for columns.");

extern "C" {static PyObject *meth_wxGridTableBase_SetColLabelValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_SetColLabelValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int col;
        const  ::wxString* label;
        int labelState = 0;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
            sipName_label,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1", &sipSelf, sipType_wxGridTableBase, &sipCpp, &col, sipType_wxString,&label, &labelState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::SetColLabelValue(col,*label) : sipCpp->SetColLabelValue(col,*label));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_SetColLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_SetCornerLabelValue, "SetCornerLabelValue()\n"
"\n"
"Set the given label for the grid's corner.");

extern "C" {static PyObject *meth_wxGridTableBase_SetCornerLabelValue(PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_SetCornerLabelValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* a0;
        int a0State = 0;
         ::wxGridTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_wxGridTableBase, &sipCpp, sipType_wxString,&a0, &a0State))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::SetCornerLabelValue(*a0) : sipCpp->SetCornerLabelValue(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(a0),sipType_wxString,a0State);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_SetCornerLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_SetAttrProvider, "SetAttrProvider(attrProvider)\n"
"\n"
"Associate this attributes provider with the table.");

extern "C" {static PyObject *meth_wxGridTableBase_SetAttrProvider(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_SetAttrProvider(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxGridCellAttrProvider* attrProvider;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_attrProvider,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxGridTableBase, &sipCpp, sipType_wxGridCellAttrProvider, &attrProvider))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetAttrProvider(attrProvider);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_SetAttrProvider, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetAttrProvider, "GetAttrProvider() -> GridCellAttrProvider\n"
"\n"
"Returns the attribute provider currently being used.");

extern "C" {static PyObject *meth_wxGridTableBase_GetAttrProvider(PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetAttrProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxGridTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridTableBase, &sipCpp))
        {
             ::wxGridCellAttrProvider*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetAttrProvider();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGridCellAttrProvider,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetAttrProvider, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetAttr, "GetAttr(row, col, kind) -> GridCellAttr\n"
"\n"
"Return the attribute for the given cell.");

extern "C" {static PyObject *meth_wxGridTableBase_GetAttr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetAttr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
         ::wxGridCellAttr::wxAttrKind kind;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
            sipName_kind,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiE", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col, sipType_wxGridCellAttr_wxAttrKind, &kind))
        {
             ::wxGridCellAttr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::GetAttr(row,col,kind) : sipCpp->GetAttr(row,col,kind));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGridCellAttr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetAttr, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetAttrPtr, "GetAttrPtr(row, col, kind) -> GridCellAttrPtr\n"
"\n"
"Return the attribute for the given cell.");

extern "C" {static PyObject *meth_wxGridTableBase_GetAttrPtr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetAttrPtr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int row;
        int col;
         ::wxGridCellAttr::wxAttrKind kind;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
            sipName_kind,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiE", &sipSelf, sipType_wxGridTableBase, &sipCpp, &row, &col, sipType_wxGridCellAttr_wxAttrKind, &kind))
        {
             ::wxGridCellAttrPtr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxGridCellAttrPtr(sipCpp->GetAttrPtr(row,col,kind));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxGridCellAttrPtr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetAttrPtr, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_SetAttr, "SetAttr(attr, row, col)\n"
"\n"
"Set attribute of the specified cell.");

extern "C" {static PyObject *meth_wxGridTableBase_SetAttr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_SetAttr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridCellAttr* attr;
        int row;
        int col;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_attr,
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:ii", &sipSelf, sipType_wxGridTableBase, &sipCpp, sipType_wxGridCellAttr, &attr, &row, &col))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::SetAttr(attr,row,col) : sipCpp->SetAttr(attr,row,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_SetAttr, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_SetRowAttr, "SetRowAttr(attr, row)\n"
"\n"
"Set attribute of the specified row.");

extern "C" {static PyObject *meth_wxGridTableBase_SetRowAttr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_SetRowAttr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridCellAttr* attr;
        int row;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_attr,
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:i", &sipSelf, sipType_wxGridTableBase, &sipCpp, sipType_wxGridCellAttr, &attr, &row))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::SetRowAttr(attr,row) : sipCpp->SetRowAttr(attr,row));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_SetRowAttr, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_SetColAttr, "SetColAttr(attr, col)\n"
"\n"
"Set attribute of the specified column.");

extern "C" {static PyObject *meth_wxGridTableBase_SetColAttr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_SetColAttr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridCellAttr* attr;
        int col;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_attr,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:i", &sipSelf, sipType_wxGridTableBase, &sipCpp, sipType_wxGridCellAttr, &attr, &col))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::SetColAttr(attr,col) : sipCpp->SetColAttr(attr,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_SetColAttr, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetNumberRows, "GetNumberRows() -> int\n"
"\n"
"Must be overridden to return the number of rows in the table.");

extern "C" {static PyObject *meth_wxGridTableBase_GetNumberRows(PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetNumberRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxGridTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridTableBase, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GridTableBase, sipName_GetNumberRows);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetNumberRows();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetNumberRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetNumberCols, "GetNumberCols() -> int\n"
"\n"
"Must be overridden to return the number of columns in the table.");

extern "C" {static PyObject *meth_wxGridTableBase_GetNumberCols(PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetNumberCols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxGridTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridTableBase, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GridTableBase, sipName_GetNumberCols);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetNumberCols();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetNumberCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetRowsCount, "GetRowsCount() -> int\n"
"\n"
"Return the number of rows in the table.");

extern "C" {static PyObject *meth_wxGridTableBase_GetRowsCount(PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetRowsCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxGridTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridTableBase, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetRowsCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetRowsCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetColsCount, "GetColsCount() -> int\n"
"\n"
"Return the number of columns in the table.");

extern "C" {static PyObject *meth_wxGridTableBase_GetColsCount(PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetColsCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxGridTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridTableBase, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColsCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetColsCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_SetView, "SetView(grid)\n"
"\n"
"Called by the grid when the table is associated with it.");

extern "C" {static PyObject *meth_wxGridTableBase_SetView(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_SetView(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGrid* grid;
         ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_grid,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxGridTableBase, &sipCpp, sipType_wxGrid, &grid))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::SetView(grid) : sipCpp->SetView(grid));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_SetView, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_GetView, "GetView() -> Grid\n"
"\n"
"Returns the last grid passed to SetView().");

extern "C" {static PyObject *meth_wxGridTableBase_GetView(PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_GetView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxGridTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridTableBase, &sipCpp))
        {
             ::wxGrid*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::GetView() : sipCpp->GetView());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGrid,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_GetView, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_CanHaveAttributes, "CanHaveAttributes() -> bool\n"
"\n"
"Returns true if this table supports attributes or false otherwise.");

extern "C" {static PyObject *meth_wxGridTableBase_CanHaveAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_CanHaveAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridTableBase, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::CanHaveAttributes() : sipCpp->CanHaveAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_CanHaveAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridTableBase_CanMeasureColUsingSameAttr, "CanMeasureColUsingSameAttr(col) -> bool\n"
"\n"
"Override to return true if the same attribute can be used for\n"
"measuring all cells in the given column.");

extern "C" {static PyObject *meth_wxGridTableBase_CanMeasureColUsingSameAttr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridTableBase_CanMeasureColUsingSameAttr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int col;
        const  ::wxGridTableBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGridTableBase, &sipCpp, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridTableBase::CanMeasureColUsingSameAttr(col) : sipCpp->CanMeasureColUsingSameAttr(col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridTableBase, sipName_CanMeasureColUsingSameAttr, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxGridTableBase(void *, const sipTypeDef *);}
static void *cast_wxGridTableBase(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxGridTableBase *sipCpp = reinterpret_cast< ::wxGridTableBase *>(sipCppV);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxGridTableBase(void *, int);}
static void release_wxGridTableBase(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxGridTableBase *>(sipCppV);
    else
        delete reinterpret_cast< ::wxGridTableBase *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxGridTableBase(sipSimpleWrapper *);}
static void dealloc_wxGridTableBase(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxGridTableBase *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxGridTableBase(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxGridTableBase(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxGridTableBase(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxGridTableBase *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxGridTableBase();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxGridTableBase[] = {{18, 0, 1}};


static PyMethodDef methods_wxGridTableBase[] = {
    {SIP_MLNAME_CAST(sipName_AppendCols), SIP_MLMETH_CAST(meth_wxGridTableBase_AppendCols), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_AppendCols)},
    {SIP_MLNAME_CAST(sipName_AppendRows), SIP_MLMETH_CAST(meth_wxGridTableBase_AppendRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_AppendRows)},
    {SIP_MLNAME_CAST(sipName_CanGetValueAs), SIP_MLMETH_CAST(meth_wxGridTableBase_CanGetValueAs), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_CanGetValueAs)},
    {SIP_MLNAME_CAST(sipName_CanHaveAttributes), meth_wxGridTableBase_CanHaveAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridTableBase_CanHaveAttributes)},
    {SIP_MLNAME_CAST(sipName_CanMeasureColUsingSameAttr), SIP_MLMETH_CAST(meth_wxGridTableBase_CanMeasureColUsingSameAttr), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_CanMeasureColUsingSameAttr)},
    {SIP_MLNAME_CAST(sipName_CanSetValueAs), SIP_MLMETH_CAST(meth_wxGridTableBase_CanSetValueAs), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_CanSetValueAs)},
    {SIP_MLNAME_CAST(sipName_Clear), meth_wxGridTableBase_Clear, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridTableBase_Clear)},
    {SIP_MLNAME_CAST(sipName_DeleteCols), SIP_MLMETH_CAST(meth_wxGridTableBase_DeleteCols), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_DeleteCols)},
    {SIP_MLNAME_CAST(sipName_DeleteRows), SIP_MLMETH_CAST(meth_wxGridTableBase_DeleteRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_DeleteRows)},
    {SIP_MLNAME_CAST(sipName_GetAttr), SIP_MLMETH_CAST(meth_wxGridTableBase_GetAttr), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetAttr)},
    {SIP_MLNAME_CAST(sipName_GetAttrProvider), meth_wxGridTableBase_GetAttrProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetAttrProvider)},
    {SIP_MLNAME_CAST(sipName_GetAttrPtr), SIP_MLMETH_CAST(meth_wxGridTableBase_GetAttrPtr), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetAttrPtr)},
    {SIP_MLNAME_CAST(sipName_GetColLabelValue), SIP_MLMETH_CAST(meth_wxGridTableBase_GetColLabelValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetColLabelValue)},
    {SIP_MLNAME_CAST(sipName_GetColsCount), meth_wxGridTableBase_GetColsCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetColsCount)},
    {SIP_MLNAME_CAST(sipName_GetCornerLabelValue), meth_wxGridTableBase_GetCornerLabelValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetCornerLabelValue)},
    {SIP_MLNAME_CAST(sipName_GetNumberCols), meth_wxGridTableBase_GetNumberCols, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetNumberCols)},
    {SIP_MLNAME_CAST(sipName_GetNumberRows), meth_wxGridTableBase_GetNumberRows, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetNumberRows)},
    {SIP_MLNAME_CAST(sipName_GetRowLabelValue), SIP_MLMETH_CAST(meth_wxGridTableBase_GetRowLabelValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetRowLabelValue)},
    {SIP_MLNAME_CAST(sipName_GetRowsCount), meth_wxGridTableBase_GetRowsCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetRowsCount)},
    {SIP_MLNAME_CAST(sipName_GetTypeName), SIP_MLMETH_CAST(meth_wxGridTableBase_GetTypeName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetTypeName)},
    {SIP_MLNAME_CAST(sipName_GetValue), SIP_MLMETH_CAST(meth_wxGridTableBase_GetValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetValue)},
    {SIP_MLNAME_CAST(sipName_GetValueAsBool), SIP_MLMETH_CAST(meth_wxGridTableBase_GetValueAsBool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetValueAsBool)},
    {SIP_MLNAME_CAST(sipName_GetValueAsDouble), SIP_MLMETH_CAST(meth_wxGridTableBase_GetValueAsDouble), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetValueAsDouble)},
    {SIP_MLNAME_CAST(sipName_GetValueAsLong), SIP_MLMETH_CAST(meth_wxGridTableBase_GetValueAsLong), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetValueAsLong)},
    {SIP_MLNAME_CAST(sipName_GetView), meth_wxGridTableBase_GetView, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridTableBase_GetView)},
    {SIP_MLNAME_CAST(sipName_InsertCols), SIP_MLMETH_CAST(meth_wxGridTableBase_InsertCols), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_InsertCols)},
    {SIP_MLNAME_CAST(sipName_InsertRows), SIP_MLMETH_CAST(meth_wxGridTableBase_InsertRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_InsertRows)},
    {SIP_MLNAME_CAST(sipName_IsEmpty), SIP_MLMETH_CAST(meth_wxGridTableBase_IsEmpty), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_IsEmpty)},
    {SIP_MLNAME_CAST(sipName_IsEmptyCell), SIP_MLMETH_CAST(meth_wxGridTableBase_IsEmptyCell), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_IsEmptyCell)},
    {SIP_MLNAME_CAST(sipName_SetAttr), SIP_MLMETH_CAST(meth_wxGridTableBase_SetAttr), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_SetAttr)},
    {SIP_MLNAME_CAST(sipName_SetAttrProvider), SIP_MLMETH_CAST(meth_wxGridTableBase_SetAttrProvider), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_SetAttrProvider)},
    {SIP_MLNAME_CAST(sipName_SetColAttr), SIP_MLMETH_CAST(meth_wxGridTableBase_SetColAttr), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_SetColAttr)},
    {SIP_MLNAME_CAST(sipName_SetColLabelValue), SIP_MLMETH_CAST(meth_wxGridTableBase_SetColLabelValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_SetColLabelValue)},
    {SIP_MLNAME_CAST(sipName_SetCornerLabelValue), meth_wxGridTableBase_SetCornerLabelValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridTableBase_SetCornerLabelValue)},
    {SIP_MLNAME_CAST(sipName_SetRowAttr), SIP_MLMETH_CAST(meth_wxGridTableBase_SetRowAttr), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_SetRowAttr)},
    {SIP_MLNAME_CAST(sipName_SetRowLabelValue), SIP_MLMETH_CAST(meth_wxGridTableBase_SetRowLabelValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_SetRowLabelValue)},
    {SIP_MLNAME_CAST(sipName_SetValue), SIP_MLMETH_CAST(meth_wxGridTableBase_SetValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_SetValue)},
    {SIP_MLNAME_CAST(sipName_SetValueAsBool), SIP_MLMETH_CAST(meth_wxGridTableBase_SetValueAsBool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_SetValueAsBool)},
    {SIP_MLNAME_CAST(sipName_SetValueAsDouble), SIP_MLMETH_CAST(meth_wxGridTableBase_SetValueAsDouble), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_SetValueAsDouble)},
    {SIP_MLNAME_CAST(sipName_SetValueAsLong), SIP_MLMETH_CAST(meth_wxGridTableBase_SetValueAsLong), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_SetValueAsLong)},
    {SIP_MLNAME_CAST(sipName_SetView), SIP_MLMETH_CAST(meth_wxGridTableBase_SetView), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridTableBase_SetView)}
};

sipVariableDef variables_wxGridTableBase[] = {
    {PropertyVariable, sipName_View, &methods_wxGridTableBase[24], &methods_wxGridTableBase[40], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_RowsCount, &methods_wxGridTableBase[18], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_NumberRows, &methods_wxGridTableBase[16], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_NumberCols, &methods_wxGridTableBase[15], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CornerLabelValue, &methods_wxGridTableBase[14], &methods_wxGridTableBase[33], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ColsCount, &methods_wxGridTableBase[13], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_AttrProvider, &methods_wxGridTableBase[10], &methods_wxGridTableBase[30], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxGridTableBase, "GridTableBase()\n"
"\n"
"The almost abstract base class for grid tables.");


sipClassTypeDef sipTypeDef__grid_wxGridTableBase = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxGridTableBase,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_GridTableBase,
        {0, 0, 1},
        41, methods_wxGridTableBase,
        0, SIP_NULLPTR,
        7, variables_wxGridTableBase,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxGridTableBase,
    -1,
    -1,
    supers_wxGridTableBase,
    SIP_NULLPTR,
    init_type_wxGridTableBase,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxGridTableBase,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxGridTableBase,
    cast_wxGridTableBase,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
