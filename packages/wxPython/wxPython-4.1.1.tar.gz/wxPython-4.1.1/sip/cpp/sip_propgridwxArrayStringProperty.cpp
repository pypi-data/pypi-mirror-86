/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_propgrid.h"

        #include <wx/propgrid/props.h>

        #include <wx/propgrid/propgrid.h>
        #include <wx/unichar.h>
        #include <wx/propgrid/props.h>
        #include <wx/window.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/property.h>
        #include <wx/bitmap.h>
        #include <wx/validate.h>
        #include <wx/colour.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/property.h>
        #include <wx/dc.h>
        #include <wx/gdicmn.h>
        #include <wx/propgrid/property.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/propgrid/propgrid.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxArrayStringProperty : public  ::wxArrayStringProperty
{
public:
    sipwxArrayStringProperty(const  ::wxString&,const  ::wxString&,const  ::wxArrayString&);
    sipwxArrayStringProperty(const  ::wxArrayStringProperty&);
    virtual ~sipwxArrayStringProperty();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    bool sipProtectVirt_DisplayEditorDialog(bool, ::wxPropertyGrid*, ::wxPGVariant&);
    void sipProtectVirt_GenerateValueAsString(bool);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void GenerateValueAsString() SIP_OVERRIDE;
     ::wxPGArrayEditorDialog* CreateEditorDialog() SIP_OVERRIDE;
    bool OnCustomStringEdit( ::wxWindow*, ::wxString&) SIP_OVERRIDE;
    void ConvertArrayToString(const  ::wxArrayString&, ::wxString*,const  ::wxUniChar&) const SIP_OVERRIDE;
     ::wxString GetValueAsString(int) const SIP_OVERRIDE;
    void OnValidationFailure( ::wxPGVariant&) SIP_OVERRIDE;
     ::wxPGEditorDialogAdapter* GetEditorDialog() const SIP_OVERRIDE;
     ::wxPGVariant DoGetAttribute(const  ::wxString&) const SIP_OVERRIDE;
    bool DoSetAttribute(const  ::wxString&, ::wxPGVariant&) SIP_OVERRIDE;
    void RefreshChildren() SIP_OVERRIDE;
    int GetChoiceSelection() const SIP_OVERRIDE;
     ::wxPGCellRenderer* GetCellRenderer(int) const SIP_OVERRIDE;
    void OnCustomPaint( ::wxDC&,const  ::wxRect&, ::wxPGPaintData&) SIP_OVERRIDE;
     ::wxValidator* DoGetValidator() const SIP_OVERRIDE;
    const  ::wxPGEditor* DoGetEditorClass() const SIP_OVERRIDE;
     ::wxPGVariant ChildChanged( ::wxPGVariant&,int, ::wxPGVariant&) const SIP_OVERRIDE;
    bool OnEvent( ::wxPropertyGrid*, ::wxWindow*, ::wxEvent&) SIP_OVERRIDE;
     ::wxSize OnMeasureImage(int) const SIP_OVERRIDE;
     ::wxString ValueToString( ::wxPGVariant&,int) const SIP_OVERRIDE;
    bool IntToValue( ::wxPGVariant&,int,int) const SIP_OVERRIDE;
    bool StringToValue( ::wxPGVariant&,const  ::wxString&,int) const SIP_OVERRIDE;
    bool ValidateValue( ::wxPGVariant&, ::wxPGValidationInfo&) const SIP_OVERRIDE;
     ::wxPGVariant DoGetValue() const SIP_OVERRIDE;
    void OnSetValue() SIP_OVERRIDE;
    bool DisplayEditorDialog( ::wxPropertyGrid*, ::wxPGVariant&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxArrayStringProperty(const sipwxArrayStringProperty &);
    sipwxArrayStringProperty &operator = (const sipwxArrayStringProperty &);

    char sipPyMethods[25];
};

sipwxArrayStringProperty::sipwxArrayStringProperty(const  ::wxString& label,const  ::wxString& name,const  ::wxArrayString& value):  ::wxArrayStringProperty(label,name,value), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxArrayStringProperty::sipwxArrayStringProperty(const  ::wxArrayStringProperty& a0):  ::wxArrayStringProperty(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxArrayStringProperty::~sipwxArrayStringProperty()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxArrayStringProperty::GenerateValueAsString()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_GenerateValueAsString);

    if (!sipMeth)
    {
         ::wxArrayStringProperty::GenerateValueAsString();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPGArrayEditorDialog* sipwxArrayStringProperty::CreateEditorDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_CreateEditorDialog);

    if (!sipMeth)
        return  ::wxArrayStringProperty::CreateEditorDialog();

    extern  ::wxPGArrayEditorDialog* sipVH__propgrid_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_76(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxArrayStringProperty::OnCustomStringEdit( ::wxWindow*parent, ::wxString& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_OnCustomStringEdit);

    if (!sipMeth)
        return  ::wxArrayStringProperty::OnCustomStringEdit(parent,value);

    extern bool sipVH__propgrid_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*, ::wxString&);

    return sipVH__propgrid_75(sipGILState, 0, sipPySelf, sipMeth, parent, value);
}

void sipwxArrayStringProperty::ConvertArrayToString(const  ::wxArrayString& arr, ::wxString*pString,const  ::wxUniChar& delimiter) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_ConvertArrayToString);

    if (!sipMeth)
    {
         ::wxArrayStringProperty::ConvertArrayToString(arr,pString,delimiter);
        return;
    }

    extern void sipVH__propgrid_74(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxArrayString&, ::wxString*,const  ::wxUniChar&);

    sipVH__propgrid_74(sipGILState, 0, sipPySelf, sipMeth, arr, pString, delimiter);
}

 ::wxString sipwxArrayStringProperty::GetValueAsString(int argFlags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_GetValueAsString);

    if (!sipMeth)
        return  ::wxArrayStringProperty::GetValueAsString(argFlags);

    extern  ::wxString sipVH__propgrid_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__propgrid_21(sipGILState, 0, sipPySelf, sipMeth, argFlags);
}

void sipwxArrayStringProperty::OnValidationFailure( ::wxPGVariant& pendingValue)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_OnValidationFailure);

    if (!sipMeth)
    {
         ::wxArrayStringProperty::OnValidationFailure(pendingValue);
        return;
    }

    extern void sipVH__propgrid_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&);

    sipVH__propgrid_20(sipGILState, 0, sipPySelf, sipMeth, pendingValue);
}

 ::wxPGEditorDialogAdapter* sipwxArrayStringProperty::GetEditorDialog() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_GetEditorDialog);

    if (!sipMeth)
        return  ::wxArrayStringProperty::GetEditorDialog();

    extern  ::wxPGEditorDialogAdapter* sipVH__propgrid_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_19(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPGVariant sipwxArrayStringProperty::DoGetAttribute(const  ::wxString& name) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_DoGetAttribute);

    if (!sipMeth)
        return  ::wxArrayStringProperty::DoGetAttribute(name);

    extern  ::wxPGVariant sipVH__propgrid_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    return sipVH__propgrid_18(sipGILState, 0, sipPySelf, sipMeth, name);
}

bool sipwxArrayStringProperty::DoSetAttribute(const  ::wxString& name, ::wxPGVariant& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_DoSetAttribute);

    if (!sipMeth)
        return  ::wxArrayStringProperty::DoSetAttribute(name,value);

    extern bool sipVH__propgrid_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxPGVariant&);

    return sipVH__propgrid_17(sipGILState, 0, sipPySelf, sipMeth, name, value);
}

void sipwxArrayStringProperty::RefreshChildren()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_RefreshChildren);

    if (!sipMeth)
    {
         ::wxArrayStringProperty::RefreshChildren();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxArrayStringProperty::GetChoiceSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_GetChoiceSelection);

    if (!sipMeth)
        return  ::wxArrayStringProperty::GetChoiceSelection();

    extern int sipVH__propgrid_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_16(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPGCellRenderer* sipwxArrayStringProperty::GetCellRenderer(int column) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_GetCellRenderer);

    if (!sipMeth)
        return  ::wxArrayStringProperty::GetCellRenderer(column);

    extern  ::wxPGCellRenderer* sipVH__propgrid_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__propgrid_15(sipGILState, 0, sipPySelf, sipMeth, column);
}

void sipwxArrayStringProperty::OnCustomPaint( ::wxDC& dc,const  ::wxRect& rect, ::wxPGPaintData& paintdata)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_OnCustomPaint);

    if (!sipMeth)
    {
         ::wxArrayStringProperty::OnCustomPaint(dc,rect,paintdata);
        return;
    }

    extern void sipVH__propgrid_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&,const  ::wxRect&, ::wxPGPaintData&);

    sipVH__propgrid_14(sipGILState, 0, sipPySelf, sipMeth, dc, rect, paintdata);
}

 ::wxValidator* sipwxArrayStringProperty::DoGetValidator() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_DoGetValidator);

    if (!sipMeth)
        return  ::wxArrayStringProperty::DoGetValidator();

    extern  ::wxValidator* sipVH__propgrid_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_13(sipGILState, 0, sipPySelf, sipMeth);
}

const  ::wxPGEditor* sipwxArrayStringProperty::DoGetEditorClass() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_DoGetEditorClass);

    if (!sipMeth)
        return  ::wxArrayStringProperty::DoGetEditorClass();

    extern const  ::wxPGEditor* sipVH__propgrid_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_12(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPGVariant sipwxArrayStringProperty::ChildChanged( ::wxPGVariant& thisValue,int childIndex, ::wxPGVariant& childValue) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_ChildChanged);

    if (!sipMeth)
        return  ::wxArrayStringProperty::ChildChanged(thisValue,childIndex,childValue);

    extern  ::wxPGVariant sipVH__propgrid_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&,int, ::wxPGVariant&);

    return sipVH__propgrid_11(sipGILState, 0, sipPySelf, sipMeth, thisValue, childIndex, childValue);
}

bool sipwxArrayStringProperty::OnEvent( ::wxPropertyGrid*propgrid, ::wxWindow*wnd_primary, ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_OnEvent);

    if (!sipMeth)
        return  ::wxArrayStringProperty::OnEvent(propgrid,wnd_primary,event);

    extern bool sipVH__propgrid_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPropertyGrid*, ::wxWindow*, ::wxEvent&);

    return sipVH__propgrid_10(sipGILState, 0, sipPySelf, sipMeth, propgrid, wnd_primary, event);
}

 ::wxSize sipwxArrayStringProperty::OnMeasureImage(int item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_OnMeasureImage);

    if (!sipMeth)
        return  ::wxArrayStringProperty::OnMeasureImage(item);

    extern  ::wxSize sipVH__propgrid_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__propgrid_9(sipGILState, 0, sipPySelf, sipMeth, item);
}

 ::wxString sipwxArrayStringProperty::ValueToString( ::wxPGVariant& value,int argFlags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_ValueToString);

    if (!sipMeth)
        return  ::wxArrayStringProperty::ValueToString(value,argFlags);

    extern  ::wxString sipVH__propgrid_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&,int);

    return sipVH__propgrid_8(sipGILState, 0, sipPySelf, sipMeth, value, argFlags);
}

bool sipwxArrayStringProperty::IntToValue( ::wxPGVariant& variant,int number,int argFlags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,SIP_NULLPTR,sipName_IntToValue);

    if (!sipMeth)
        return  ::wxArrayStringProperty::IntToValue(variant,number,argFlags);

    extern bool sipVH__propgrid_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&,int,int);

    return sipVH__propgrid_7(sipGILState, 0, sipPySelf, sipMeth, variant, number, argFlags);
}

bool sipwxArrayStringProperty::StringToValue( ::wxPGVariant& variant,const  ::wxString& text,int argFlags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,SIP_NULLPTR,sipName_StringToValue);

    if (!sipMeth)
        return  ::wxArrayStringProperty::StringToValue(variant,text,argFlags);

    extern bool sipVH__propgrid_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&,const  ::wxString&,int);

    return sipVH__propgrid_6(sipGILState, 0, sipPySelf, sipMeth, variant, text, argFlags);
}

bool sipwxArrayStringProperty::ValidateValue( ::wxPGVariant& value, ::wxPGValidationInfo& validationInfo) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,SIP_NULLPTR,sipName_ValidateValue);

    if (!sipMeth)
        return  ::wxArrayStringProperty::ValidateValue(value,validationInfo);

    extern bool sipVH__propgrid_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&, ::wxPGValidationInfo&);

    return sipVH__propgrid_5(sipGILState, 0, sipPySelf, sipMeth, value, validationInfo);
}

 ::wxPGVariant sipwxArrayStringProperty::DoGetValue() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,SIP_NULLPTR,sipName_DoGetValue);

    if (!sipMeth)
        return  ::wxArrayStringProperty::DoGetValue();

    extern  ::wxPGVariant sipVH__propgrid_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxArrayStringProperty::OnSetValue()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_OnSetValue);

    if (!sipMeth)
    {
         ::wxArrayStringProperty::OnSetValue();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxArrayStringProperty::DisplayEditorDialog( ::wxPropertyGrid*pg, ::wxPGVariant& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_DisplayEditorDialog);

    if (!sipMeth)
        return  ::wxArrayStringProperty::DisplayEditorDialog(pg,value);

    extern bool sipVH__propgrid_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPropertyGrid*, ::wxPGVariant&);

    return sipVH__propgrid_73(sipGILState, 0, sipPySelf, sipMeth, pg, value);
}

bool sipwxArrayStringProperty::sipProtectVirt_DisplayEditorDialog(bool sipSelfWasArg, ::wxPropertyGrid*pg, ::wxPGVariant& value)
{
    return (sipSelfWasArg ?  ::wxArrayStringProperty::DisplayEditorDialog(pg,value) : DisplayEditorDialog(pg,value));
}

void sipwxArrayStringProperty::sipProtectVirt_GenerateValueAsString(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxArrayStringProperty::GenerateValueAsString() : GenerateValueAsString());
}


PyDoc_STRVAR(doc_wxArrayStringProperty_OnSetValue, "OnSetValue()\n"
"\n"
"This virtual function is called after m_value has been set.");

extern "C" {static PyObject *meth_wxArrayStringProperty_OnSetValue(PyObject *, PyObject *);}
static PyObject *meth_wxArrayStringProperty_OnSetValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxArrayStringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxArrayStringProperty, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxArrayStringProperty::OnSetValue() : sipCpp->OnSetValue());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ArrayStringProperty, sipName_OnSetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxArrayStringProperty_ValueToString, "ValueToString(value, argFlags=0) -> String\n"
"\n"
"Converts property value into a text representation.");

extern "C" {static PyObject *meth_wxArrayStringProperty_ValueToString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxArrayStringProperty_ValueToString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGVariant* value;
        int valueState = 0;
        int argFlags = 0;
        const  ::wxArrayStringProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_argFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_wxArrayStringProperty, &sipCpp, sipType_wxPGVariant,&value, &valueState, &argFlags))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxArrayStringProperty::ValueToString(*value,argFlags) : sipCpp->ValueToString(*value,argFlags)));
            Py_END_ALLOW_THREADS
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ArrayStringProperty, sipName_ValueToString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxArrayStringProperty_StringToValue, "StringToValue(text, argFlags=0) -> (bool, variant)\n"
"\n"
"Converts text into wxVariant value appropriate for this property.");

extern "C" {static PyObject *meth_wxArrayStringProperty_StringToValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxArrayStringProperty_StringToValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGVariant* variant;
        const  ::wxString* text;
        int textState = 0;
        int argFlags = 0;
        const  ::wxArrayStringProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
            sipName_argFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_wxArrayStringProperty, &sipCpp, sipType_wxString,&text, &textState, &argFlags))
        {
            bool sipRes;
            variant = new  ::wxPGVariant();

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxArrayStringProperty::StringToValue(*variant,*text,argFlags) : sipCpp->StringToValue(*variant,*text,argFlags));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bN)",sipRes,variant,sipType_wxPGVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ArrayStringProperty, sipName_StringToValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxArrayStringProperty_DoSetAttribute, "DoSetAttribute(name, value) -> bool\n"
"\n"
"Reimplement this member function to add special handling for\n"
"attributes of this property.");

extern "C" {static PyObject *meth_wxArrayStringProperty_DoSetAttribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxArrayStringProperty_DoSetAttribute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* name;
        int nameState = 0;
         ::wxPGVariant* value;
        int valueState = 0;
         ::wxArrayStringProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_wxArrayStringProperty, &sipCpp, sipType_wxString,&name, &nameState, sipType_wxPGVariant,&value, &valueState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxArrayStringProperty::DoSetAttribute(*name,*value) : sipCpp->DoSetAttribute(*name,*value));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ArrayStringProperty, sipName_DoSetAttribute, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxArrayStringProperty_ConvertArrayToString, "ConvertArrayToString(arr, pString, delimiter)\n"
"\n"
"Implement in derived class for custom array-to-string conversion.");

extern "C" {static PyObject *meth_wxArrayStringProperty_ConvertArrayToString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxArrayStringProperty_ConvertArrayToString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxArrayString* arr;
        int arrState = 0;
         ::wxString* pString;
        int pStringState = 0;
        const  ::wxUniChar* delimiter;
        const  ::wxArrayStringProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_arr,
            sipName_pString,
            sipName_delimiter,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J0J9", &sipSelf, sipType_wxArrayStringProperty, &sipCpp, sipType_wxArrayString,&arr, &arrState, sipType_wxString,&pString, &pStringState, sipType_wxUniChar, &delimiter))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxArrayStringProperty::ConvertArrayToString(*arr,pString,*delimiter) : sipCpp->ConvertArrayToString(*arr,pString,*delimiter));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxArrayString *>(arr),sipType_wxArrayString,arrState);
            sipReleaseType(pString,sipType_wxString,pStringState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ArrayStringProperty, sipName_ConvertArrayToString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxArrayStringProperty_OnCustomStringEdit, "OnCustomStringEdit(parent, value) -> bool\n"
"\n"
"Shows string editor dialog to edit the individual item.");

extern "C" {static PyObject *meth_wxArrayStringProperty_OnCustomStringEdit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxArrayStringProperty_OnCustomStringEdit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindow* parent;
         ::wxString* value;
        int valueState = 0;
         ::wxArrayStringProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1", &sipSelf, sipType_wxArrayStringProperty, &sipCpp, sipType_wxWindow, &parent, sipType_wxString,&value, &valueState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxArrayStringProperty::OnCustomStringEdit(parent,*value) : sipCpp->OnCustomStringEdit(parent,*value));
            Py_END_ALLOW_THREADS
            sipReleaseType(value,sipType_wxString,valueState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ArrayStringProperty, sipName_OnCustomStringEdit, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxArrayStringProperty_CreateEditorDialog, "CreateEditorDialog() -> PGArrayEditorDialog\n"
"\n"
"Creates wxPGArrayEditorDialog for string editing.");

extern "C" {static PyObject *meth_wxArrayStringProperty_CreateEditorDialog(PyObject *, PyObject *);}
static PyObject *meth_wxArrayStringProperty_CreateEditorDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxArrayStringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxArrayStringProperty, &sipCpp))
        {
             ::wxPGArrayEditorDialog*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxArrayStringProperty::CreateEditorDialog() : sipCpp->CreateEditorDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGArrayEditorDialog,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ArrayStringProperty, sipName_CreateEditorDialog, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxArrayStringProperty_ArrayStringToString, "ArrayStringToString(dst, src, delimiter, flags)\n"
"\n"
"Generates contents for string dst based on the contents of\n"
"wxArrayString src.");

extern "C" {static PyObject *meth_wxArrayStringProperty_ArrayStringToString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxArrayStringProperty_ArrayStringToString(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxString* dst;
        int dstState = 0;
        const  ::wxArrayString* src;
        int srcState = 0;
         ::wxUniChar* delimiter;
        int flags;

        static const char *sipKwdList[] = {
            sipName_dst,
            sipName_src,
            sipName_delimiter,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1J1J9i", sipType_wxString,&dst, &dstState, sipType_wxArrayString,&src, &srcState, sipType_wxUniChar, &delimiter, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxArrayStringProperty::ArrayStringToString(*dst,*src,*delimiter,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(dst,sipType_wxString,dstState);
            sipReleaseType(const_cast< ::wxArrayString *>(src),sipType_wxArrayString,srcState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ArrayStringProperty, sipName_ArrayStringToString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxArrayStringProperty_DisplayEditorDialog, "DisplayEditorDialog(pg, value) -> (bool, value)\n"
"\n"
"Shows editor dialog.");

extern "C" {static PyObject *meth_wxArrayStringProperty_DisplayEditorDialog(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxArrayStringProperty_DisplayEditorDialog(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid* pg;
         ::wxPGVariant* value;
        int valueState = 0;
        sipwxArrayStringProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pg,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1", &sipSelf, sipType_wxArrayStringProperty, &sipCpp, sipType_wxPropertyGrid, &pg, sipType_wxPGVariant,&value, &valueState))
        {
            bool sipRes;
            PyObject *sipResObj;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_DisplayEditorDialog(sipSelfWasArg,pg,*value);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            sipResObj = sipBuildResult(0,"(bD)",sipRes,value,sipType_wxPGVariant,SIP_NULLPTR);
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            return sipResObj;
        }
    }

    sipNoMethod(sipParseErr, sipName_ArrayStringProperty, sipName_DisplayEditorDialog, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxArrayStringProperty_GenerateValueAsString, "GenerateValueAsString()\n"
"\n"
"Previously this was to be implemented in derived class for array-to-\n"
"string conversion.");

extern "C" {static PyObject *meth_wxArrayStringProperty_GenerateValueAsString(PyObject *, PyObject *);}
static PyObject *meth_wxArrayStringProperty_GenerateValueAsString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxArrayStringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxArrayStringProperty, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_GenerateValueAsString(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ArrayStringProperty, sipName_GenerateValueAsString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxArrayStringProperty(void *, const sipTypeDef *);}
static void *cast_wxArrayStringProperty(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxArrayStringProperty *sipCpp = reinterpret_cast< ::wxArrayStringProperty *>(sipCppV);

    if (targetType == sipType_wxEditorDialogProperty)
        return static_cast< ::wxEditorDialogProperty *>(sipCpp);

    if (targetType == sipType_wxPGProperty)
        return static_cast< ::wxPGProperty *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxArrayStringProperty(void *, int);}
static void release_wxArrayStringProperty(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxArrayStringProperty *>(sipCppV);
    else
        delete reinterpret_cast< ::wxArrayStringProperty *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxArrayStringProperty(Py_ssize_t);}
static void *array_wxArrayStringProperty(Py_ssize_t sipNrElem)
{
    return new  ::wxArrayStringProperty[sipNrElem];
}


extern "C" {static void assign_wxArrayStringProperty(void *, SIP_SSIZE_T, void *);}
static void assign_wxArrayStringProperty(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxArrayStringProperty *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxArrayStringProperty *>(sipSrc);
}


extern "C" {static void *copy_wxArrayStringProperty(const void *, SIP_SSIZE_T);}
static void *copy_wxArrayStringProperty(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxArrayStringProperty(reinterpret_cast<const  ::wxArrayStringProperty *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxArrayStringProperty(sipSimpleWrapper *);}
static void dealloc_wxArrayStringProperty(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxArrayStringProperty *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxArrayStringProperty(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxArrayStringProperty(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxArrayStringProperty(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxArrayStringProperty *sipCpp = SIP_NULLPTR;

    {
        const  ::wxString& labeldef = wxPG_LABEL;
        const  ::wxString* label = &labeldef;
        int labelState = 0;
        const  ::wxString& namedef = wxPG_LABEL;
        const  ::wxString* name = &namedef;
        int nameState = 0;
        const  ::wxArrayString& valuedef = wxArrayString();
        const  ::wxArrayString* value = &valuedef;
        int valueState = 0;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_name,
            sipName_value,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1J1J1", sipType_wxString,&label, &labelState, sipType_wxString,&name, &nameState, sipType_wxArrayString,&value, &valueState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxArrayStringProperty(*label,*name,*value);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);
            sipReleaseType(const_cast< ::wxArrayString *>(value),sipType_wxArrayString,valueState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxArrayStringProperty* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxArrayStringProperty, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxArrayStringProperty(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxArrayStringProperty[] = {{10, 255, 1}};


static PyMethodDef methods_wxArrayStringProperty[] = {
    {SIP_MLNAME_CAST(sipName_ArrayStringToString), SIP_MLMETH_CAST(meth_wxArrayStringProperty_ArrayStringToString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxArrayStringProperty_ArrayStringToString)},
    {SIP_MLNAME_CAST(sipName_ConvertArrayToString), SIP_MLMETH_CAST(meth_wxArrayStringProperty_ConvertArrayToString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxArrayStringProperty_ConvertArrayToString)},
    {SIP_MLNAME_CAST(sipName_CreateEditorDialog), meth_wxArrayStringProperty_CreateEditorDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxArrayStringProperty_CreateEditorDialog)},
    {SIP_MLNAME_CAST(sipName_DisplayEditorDialog), SIP_MLMETH_CAST(meth_wxArrayStringProperty_DisplayEditorDialog), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxArrayStringProperty_DisplayEditorDialog)},
    {SIP_MLNAME_CAST(sipName_DoSetAttribute), SIP_MLMETH_CAST(meth_wxArrayStringProperty_DoSetAttribute), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxArrayStringProperty_DoSetAttribute)},
    {SIP_MLNAME_CAST(sipName_GenerateValueAsString), meth_wxArrayStringProperty_GenerateValueAsString, METH_VARARGS, SIP_MLDOC_CAST(doc_wxArrayStringProperty_GenerateValueAsString)},
    {SIP_MLNAME_CAST(sipName_OnCustomStringEdit), SIP_MLMETH_CAST(meth_wxArrayStringProperty_OnCustomStringEdit), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxArrayStringProperty_OnCustomStringEdit)},
    {SIP_MLNAME_CAST(sipName_OnSetValue), meth_wxArrayStringProperty_OnSetValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxArrayStringProperty_OnSetValue)},
    {SIP_MLNAME_CAST(sipName_StringToValue), SIP_MLMETH_CAST(meth_wxArrayStringProperty_StringToValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxArrayStringProperty_StringToValue)},
    {SIP_MLNAME_CAST(sipName_ValueToString), SIP_MLMETH_CAST(meth_wxArrayStringProperty_ValueToString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxArrayStringProperty_ValueToString)}
};

static sipEnumMemberDef enummembers_wxArrayStringProperty[] = {
    {sipName_Escape, static_cast<int>( ::wxArrayStringProperty::Escape), 2},
    {sipName_QuoteStrings, static_cast<int>( ::wxArrayStringProperty::QuoteStrings), 2},
};

PyDoc_STRVAR(doc_wxArrayStringProperty, "ArrayStringProperty(label=PG_LABEL, name=PG_LABEL, value=[])\n"
"\n"
"Property that manages a list of strings.");


sipClassTypeDef sipTypeDef__propgrid_wxArrayStringProperty = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxArrayStringProperty,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_ArrayStringProperty,
        {0, 0, 1},
        10, methods_wxArrayStringProperty,
        2, enummembers_wxArrayStringProperty,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxArrayStringProperty,
    -1,
    -1,
    supers_wxArrayStringProperty,
    SIP_NULLPTR,
    init_type_wxArrayStringProperty,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxArrayStringProperty,
    assign_wxArrayStringProperty,
    array_wxArrayStringProperty,
    copy_wxArrayStringProperty,
    release_wxArrayStringProperty,
    cast_wxArrayStringProperty,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
