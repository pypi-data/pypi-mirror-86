/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/renderer.h>



/* Call the instance's destructor. */
extern "C" {static void release_wxSplitterRenderParams(void *, int);}
static void release_wxSplitterRenderParams(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxSplitterRenderParams *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxSplitterRenderParams(sipSimpleWrapper *);}
static void dealloc_wxSplitterRenderParams(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxSplitterRenderParams(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxSplitterRenderParams(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxSplitterRenderParams(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::wxSplitterRenderParams *sipCpp = SIP_NULLPTR;

    {
         ::wxCoord widthSash_;
         ::wxCoord border_;
        bool isSens_;

        static const char *sipKwdList[] = {
            sipName_widthSash_,
            sipName_border_,
            sipName_isSens_,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iib", &widthSash_, &border_, &isSens_))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxSplitterRenderParams(widthSash_,border_,isSens_);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            return sipCpp;
        }
    }

    {
        const  ::wxSplitterRenderParams* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxSplitterRenderParams, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxSplitterRenderParams(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static PyObject *varget_wxSplitterRenderParams_border(void *, PyObject *, PyObject *);}
static PyObject *varget_wxSplitterRenderParams_border(void *sipSelf, PyObject *, PyObject *)
{
     ::wxCoord sipVal;
     ::wxSplitterRenderParams *sipCpp = reinterpret_cast< ::wxSplitterRenderParams *>(sipSelf);

    sipVal = sipCpp->border;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static PyObject *varget_wxSplitterRenderParams_isHotSensitive(void *, PyObject *, PyObject *);}
static PyObject *varget_wxSplitterRenderParams_isHotSensitive(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::wxSplitterRenderParams *sipCpp = reinterpret_cast< ::wxSplitterRenderParams *>(sipSelf);

    sipVal = sipCpp->isHotSensitive;

    return PyBool_FromLong(sipVal);
}


extern "C" {static PyObject *varget_wxSplitterRenderParams_widthSash(void *, PyObject *, PyObject *);}
static PyObject *varget_wxSplitterRenderParams_widthSash(void *sipSelf, PyObject *, PyObject *)
{
     ::wxCoord sipVal;
     ::wxSplitterRenderParams *sipCpp = reinterpret_cast< ::wxSplitterRenderParams *>(sipSelf);

    sipVal = sipCpp->widthSash;

    return SIPLong_FromLong(sipVal);
}

sipVariableDef variables_wxSplitterRenderParams[] = {
    {InstanceVariable, sipName_border, (PyMethodDef *)varget_wxSplitterRenderParams_border, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_isHotSensitive, (PyMethodDef *)varget_wxSplitterRenderParams_isHotSensitive, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_widthSash, (PyMethodDef *)varget_wxSplitterRenderParams_widthSash, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxSplitterRenderParams, "SplitterRenderParams(widthSash_, border_, isSens_)\n"
"\n"
"This is just a simple struct used as a return value of\n"
"wxRendererNative::GetSplitterParams().");


sipClassTypeDef sipTypeDef__core_wxSplitterRenderParams = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxSplitterRenderParams,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_SplitterRenderParams,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        3, variables_wxSplitterRenderParams,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxSplitterRenderParams,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_wxSplitterRenderParams,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxSplitterRenderParams,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxSplitterRenderParams,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
