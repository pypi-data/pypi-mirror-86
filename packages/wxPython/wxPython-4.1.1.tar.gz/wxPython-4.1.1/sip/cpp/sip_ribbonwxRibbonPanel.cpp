/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_ribbon.h"

        #include <wx/ribbon/panel.h>

        #include <wx/window.h>
        #include <wx/bitmap.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/ribbon/art.h>
        #include <wx/ribbon/bar.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxRibbonPanel : public  ::wxRibbonPanel
{
public:
    sipwxRibbonPanel();
    sipwxRibbonPanel( ::wxWindow*, ::wxWindowID,const  ::wxString&,const  ::wxBitmap&,const  ::wxPoint&,const  ::wxSize&,long);
    virtual ~sipwxRibbonPanel();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
     ::wxSize sipProtect_DoGetNextSmallerSize( ::wxOrientation, ::wxSize) const;
     ::wxSize sipProtect_DoGetNextLargerSize( ::wxOrientation, ::wxSize) const;
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
     ::wxSize DoGetBorderSize() const SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRibbonPanel(const sipwxRibbonPanel &);
    sipwxRibbonPanel &operator = (const sipwxRibbonPanel &);

    char sipPyMethods[40];
};

sipwxRibbonPanel::sipwxRibbonPanel():  ::wxRibbonPanel(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRibbonPanel::sipwxRibbonPanel( ::wxWindow*parent, ::wxWindowID id,const  ::wxString& label,const  ::wxBitmap& minimised_icon,const  ::wxPoint& pos,const  ::wxSize& size,long style):  ::wxRibbonPanel(parent,id,label,minimised_icon,pos,size,style), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRibbonPanel::~sipwxRibbonPanel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxRibbonPanel::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxRibbonPanel::RemoveChild(child);
        return;
    }

    extern void sipVH__ribbon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__ribbon_0(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxRibbonPanel::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxRibbonPanel::AddChild(child);
        return;
    }

    extern void sipVH__ribbon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__ribbon_0(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sipwxRibbonPanel::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxRibbonPanel::ProcessEvent(event);

    extern bool sipVH__ribbon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__ribbon_1(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxRibbonPanel::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxRibbonPanel::TryBefore(event);

    extern bool sipVH__ribbon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__ribbon_1(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxRibbonPanel::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxRibbonPanel::TryAfter(event);

    extern bool sipVH__ribbon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__ribbon_1(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxRibbonPanel::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxRibbonPanel::AcceptsFocus();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonPanel::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxRibbonPanel::AcceptsFocusFromKeyboard();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonPanel::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxRibbonPanel::AcceptsFocusRecursively();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonPanel::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxRibbonPanel::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__ribbon_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__ribbon_3(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

void sipwxRibbonPanel::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxRibbonPanel::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__ribbon_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__ribbon_3(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

bool sipwxRibbonPanel::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxRibbonPanel::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__ribbon_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__ribbon_4(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

 ::wxPoint sipwxRibbonPanel::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxRibbonPanel::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__ribbon_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_5(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonPanel::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxRibbonPanel::HasTransparentBackground();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonPanel::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxRibbonPanel::ShouldInheritColours();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxValidator* sipwxRibbonPanel::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxRibbonPanel::GetValidator();

    extern  ::wxValidator* sipVH__ribbon_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonPanel::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxRibbonPanel::SetValidator(validator);
        return;
    }

    extern void sipVH__ribbon_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__ribbon_7(sipGILState, 0, sipPySelf, sipMeth, validator);
}

bool sipwxRibbonPanel::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxRibbonPanel::TransferDataFromWindow();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonPanel::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxRibbonPanel::TransferDataToWindow();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonPanel::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::wxRibbonPanel::Validate();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonPanel::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_Destroy);

    if (!sipMeth)
        return  ::wxRibbonPanel::Destroy();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonPanel::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxRibbonPanel::InheritAttributes();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonPanel::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxRibbonPanel::InitDialog();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonPanel::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxRibbonPanel::OnInternalIdle();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sipwxRibbonPanel::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxRibbonPanel::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__ribbon_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_9(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonPanel::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxRibbonPanel::DoEnable(enable);
        return;
    }

    extern void sipVH__ribbon_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__ribbon_3(sipGILState, 0, sipPySelf, sipMeth, enable);
}

void sipwxRibbonPanel::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxRibbonPanel::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__ribbon_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__ribbon_10(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxRibbonPanel::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,SIP_NULLPTR,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxRibbonPanel::DoGetSize(width,height);
        return;
    }

    extern void sipVH__ribbon_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__ribbon_10(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxRibbonPanel::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxRibbonPanel::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__ribbon_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__ribbon_10(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxRibbonPanel::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxRibbonPanel::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__ribbon_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__ribbon_11(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxRibbonPanel::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxRibbonPanel::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__ribbon_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__ribbon_12(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxRibbonPanel::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxRibbonPanel::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__ribbon_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__ribbon_13(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

 ::wxSize sipwxRibbonPanel::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,SIP_NULLPTR,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxRibbonPanel::DoGetBorderSize();

    extern  ::wxSize sipVH__ribbon_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_14(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonPanel::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxRibbonPanel::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__ribbon_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__ribbon_15(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sipwxRibbonPanel::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxRibbonPanel::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__ribbon_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__ribbon_16(sipGILState, 0, sipPySelf, sipMeth, variant);
}

 ::wxBorder sipwxRibbonPanel::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxRibbonPanel::GetDefaultBorder();

    extern  ::wxBorder sipVH__ribbon_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_17(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxRibbonPanel::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxRibbonPanel::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__ribbon_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_17(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonPanel::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxRibbonPanel::DoFreeze();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonPanel::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxRibbonPanel::DoThaw();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxRibbonPanel::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxRibbonPanel::DoGetBestSize();

    extern  ::wxSize sipVH__ribbon_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_14(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxRibbonPanel::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxRibbonPanel::DoGetBestClientSize();

    extern  ::wxSize sipVH__ribbon_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_14(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonPanel::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

 ::wxSize sipwxRibbonPanel::sipProtect_DoGetNextSmallerSize( ::wxOrientation direction, ::wxSize relative_to) const
{
    return  ::wxRibbonControl::DoGetNextSmallerSize(direction,relative_to);
}

 ::wxSize sipwxRibbonPanel::sipProtect_DoGetNextLargerSize( ::wxOrientation direction, ::wxSize relative_to) const
{
    return  ::wxRibbonControl::DoGetNextLargerSize(direction,relative_to);
}

bool sipwxRibbonPanel::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxRibbonPanel::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxRibbonPanel::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxRibbonPanel::DoEnable(enable) : DoEnable(enable));
}

void sipwxRibbonPanel::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxRibbonPanel::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxRibbonPanel::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxRibbonPanel::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxRibbonPanel::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxRibbonPanel::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxRibbonPanel::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonPanel::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxRibbonPanel::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonPanel::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxRibbonPanel::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxRibbonPanel::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxRibbonPanel::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxRibbonPanel::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxRibbonPanel::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxRibbonPanel::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxRibbonPanel::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonPanel::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxRibbonPanel::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxRibbonPanel::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxRibbonPanel::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxRibbonPanel::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxRibbonPanel::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonPanel::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxRibbonPanel::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonPanel::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxRibbonPanel::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxRibbonPanel::DoFreeze() : DoFreeze());
}

void sipwxRibbonPanel::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxRibbonPanel::DoThaw() : DoThaw());
}

bool sipwxRibbonPanel::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxRibbonPanel::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxRibbonPanel::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxRibbonPanel::TryBefore(event) : TryBefore(event));
}

bool sipwxRibbonPanel::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxRibbonPanel::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxRibbonPanel_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxRibbonPanel_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoGetNextSmallerSize, "DoGetNextSmallerSize(direction, relative_to) -> wx.Size\n"
"\n"
"Implementation of GetNextSmallerSize().");

extern "C" {static PyObject *meth_wxRibbonPanel_DoGetNextSmallerSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoGetNextSmallerSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxOrientation direction;
         ::wxSize* relative_to;
        int relative_toState = 0;
        const sipwxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_relative_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEJ1", &sipSelf, sipType_wxRibbonPanel, &sipCpp, sipType_wxOrientation, &direction, sipType_wxSize, &relative_to, &relative_toState))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtect_DoGetNextSmallerSize(direction,*relative_to));
            Py_END_ALLOW_THREADS
            sipReleaseType(relative_to,sipType_wxSize,relative_toState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoGetNextSmallerSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoGetNextLargerSize, "DoGetNextLargerSize(direction, relative_to) -> wx.Size\n"
"\n"
"Implementation of GetNextLargerSize().");

extern "C" {static PyObject *meth_wxRibbonPanel_DoGetNextLargerSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoGetNextLargerSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxOrientation direction;
         ::wxSize* relative_to;
        int relative_toState = 0;
        const sipwxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_relative_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEJ1", &sipSelf, sipType_wxRibbonPanel, &sipCpp, sipType_wxOrientation, &direction, sipType_wxSize, &relative_to, &relative_toState))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtect_DoGetNextLargerSize(direction,*relative_to));
            Py_END_ALLOW_THREADS
            sipReleaseType(relative_to,sipType_wxSize,relative_toState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoGetNextLargerSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_Create, "Create(parent, id=wx.ID_ANY, label=wx.EmptyString, icon=wx.NullBitmap, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_PANEL_DEFAULT_STYLE) -> bool\n"
"\n"
"Create a ribbon panel in two-step ribbon panel construction.");

extern "C" {static PyObject *meth_wxRibbonPanel_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxString& labeldef = wxEmptyString;
        const  ::wxString* label = &labeldef;
        int labelState = 0;
        const  ::wxBitmap& icondef = wxNullBitmap;
        const  ::wxBitmap* icon = &icondef;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxRIBBON_PANEL_DEFAULT_STYLE;
        sipWrapper *sipOwner = SIP_NULLPTR;
         ::wxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_label,
            sipName_icon,
            sipName_pos,
            sipName_size,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|iJ1J9J1J1l", &sipSelf, sipType_wxRibbonPanel, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxString,&label, &labelState, sipType_wxBitmap, &icon, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*label,*icon,*pos,*size,style);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_GetMinimisedIcon, "GetMinimisedIcon() -> wx.Bitmap\n"
"\n"
"Get the bitmap to be used in place of the panel children when it is\n"
"minimised.");

extern "C" {static PyObject *meth_wxRibbonPanel_GetMinimisedIcon(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_GetMinimisedIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetMinimisedIcon();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_GetMinimisedIcon, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_HasExtButton, "HasExtButton() -> bool\n"
"\n"
"Test if the panel has an extension button.");

extern "C" {static PyObject *meth_wxRibbonPanel_HasExtButton(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_HasExtButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasExtButton();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_HasExtButton, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_IsMinimised, "IsMinimised() -> bool\n"
"IsMinimised(at_size) -> bool\n"
"\n"
"Query if the panel is currently minimised.\n"
"");

extern "C" {static PyObject *meth_wxRibbonPanel_IsMinimised(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_IsMinimised(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRibbonPanel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsMinimised();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::wxSize* at_size;
        int at_sizeState = 0;
        const  ::wxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_at_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRibbonPanel, &sipCpp, sipType_wxSize, &at_size, &at_sizeState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsMinimised(*at_size);
            Py_END_ALLOW_THREADS
            sipReleaseType(at_size,sipType_wxSize,at_sizeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_IsMinimised, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_IsHovered, "IsHovered() -> bool\n"
"\n"
"Query is the mouse is currently hovered over the panel.");

extern "C" {static PyObject *meth_wxRibbonPanel_IsHovered(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_IsHovered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsHovered();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_IsHovered, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_IsExtButtonHovered, "IsExtButtonHovered() -> bool\n"
"\n"
"Query if the mouse is currently hovered over the extension button.");

extern "C" {static PyObject *meth_wxRibbonPanel_IsExtButtonHovered(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_IsExtButtonHovered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsExtButtonHovered();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_IsExtButtonHovered, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_CanAutoMinimise, "CanAutoMinimise() -> bool\n"
"\n"
"Query if the panel can automatically minimise itself at small sizes.");

extern "C" {static PyObject *meth_wxRibbonPanel_CanAutoMinimise(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_CanAutoMinimise(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CanAutoMinimise();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_CanAutoMinimise, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_ShowExpanded, "ShowExpanded() -> bool\n"
"\n"
"Show the panel externally expanded.");

extern "C" {static PyObject *meth_wxRibbonPanel_ShowExpanded(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_ShowExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ShowExpanded();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_ShowExpanded, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_HideExpanded, "HideExpanded() -> bool\n"
"\n"
"Hide the panel's external expansion.");

extern "C" {static PyObject *meth_wxRibbonPanel_HideExpanded(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_HideExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HideExpanded();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_HideExpanded, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_SetArtProvider, "SetArtProvider(art)\n"
"\n"
"Set the art provider to be used.");

extern "C" {static PyObject *meth_wxRibbonPanel_SetArtProvider(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_SetArtProvider(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRibbonArtProvider* art;
         ::wxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_art,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRibbonPanel, &sipCpp, sipType_wxRibbonArtProvider, &art))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetArtProvider(art);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_SetArtProvider, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_Realize, "Realize() -> bool\n"
"\n"
"Realize all children of the panel.");

extern "C" {static PyObject *meth_wxRibbonPanel_Realize(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_Realize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Realize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_Realize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_GetExpandedDummy, "GetExpandedDummy() -> RibbonPanel\n"
"\n"
"Get the dummy panel of an expanded panel.");

extern "C" {static PyObject *meth_wxRibbonPanel_GetExpandedDummy(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_GetExpandedDummy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
             ::wxRibbonPanel*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetExpandedDummy();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonPanel,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_GetExpandedDummy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_GetExpandedPanel, "GetExpandedPanel() -> RibbonPanel\n"
"\n"
"Get the expanded panel of a dummy panel.");

extern "C" {static PyObject *meth_wxRibbonPanel_GetExpandedPanel(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_GetExpandedPanel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
             ::wxRibbonPanel*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetExpandedPanel();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonPanel,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_GetExpandedPanel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxRibbonPanel_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_GetClientAreaOrigin, doc_wxRibbonPanel_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonPanel_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_Validate, doc_wxRibbonPanel_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonPanel_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_TransferDataToWindow, doc_wxRibbonPanel_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonPanel_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_TransferDataFromWindow, doc_wxRibbonPanel_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxRibbonPanel_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_InitDialog, doc_wxRibbonPanel_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonPanel_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_AcceptsFocus, doc_wxRibbonPanel_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonPanel_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_AcceptsFocusRecursively, doc_wxRibbonPanel_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonPanel_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_AcceptsFocusFromKeyboard, doc_wxRibbonPanel_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxRibbonPanel_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRibbonPanel, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_AddChild, doc_wxRibbonPanel_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxRibbonPanel_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRibbonPanel, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_RemoveChild, doc_wxRibbonPanel_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxRibbonPanel_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_InheritAttributes, doc_wxRibbonPanel_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonPanel_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_ShouldInheritColours, doc_wxRibbonPanel_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxRibbonPanel_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_OnInternalIdle, doc_wxRibbonPanel_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxRibbonPanel_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_GetMainWindowOfCompositeControl, doc_wxRibbonPanel_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxRibbonPanel_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxRibbonPanel, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_InformFirstDirection, doc_wxRibbonPanel_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxRibbonPanel_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxRibbonPanel, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_SetCanFocus, doc_wxRibbonPanel_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonPanel_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_Destroy, doc_wxRibbonPanel_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxRibbonPanel_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRibbonPanel, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_SetValidator, doc_wxRibbonPanel_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxRibbonPanel_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_GetValidator, doc_wxRibbonPanel_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth_wxRibbonPanel_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
         ::wxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxRibbonPanel, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonPanel::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_EnableVisibleFocus, doc_wxRibbonPanel_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxRibbonPanel_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRibbonPanel, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_ProcessEvent, doc_wxRibbonPanel_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxRibbonPanel_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxRibbonPanel, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoEnable, doc_wxRibbonPanel_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxRibbonPanel_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxRibbonPanel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoGetPosition, doc_wxRibbonPanel_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxRibbonPanel_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxRibbonPanel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoGetSize, doc_wxRibbonPanel_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxRibbonPanel_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxRibbonPanel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoGetClientSize, doc_wxRibbonPanel_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxRibbonPanel_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoGetBestSize, doc_wxRibbonPanel_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxRibbonPanel_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoGetBestClientSize, doc_wxRibbonPanel_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxRibbonPanel_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxRibbonPanel, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoSetSize, doc_wxRibbonPanel_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxRibbonPanel_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxRibbonPanel, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoSetClientSize, doc_wxRibbonPanel_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxRibbonPanel_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxRibbonPanel, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoSetSizeHints, doc_wxRibbonPanel_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxRibbonPanel_DoGetBorderSize(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoGetBorderSize, doc_wxRibbonPanel_DoGetBorderSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxRibbonPanel_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxRibbonPanel, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoMoveWindow, doc_wxRibbonPanel_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxRibbonPanel_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxRibbonPanel, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoSetWindowVariant, doc_wxRibbonPanel_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxRibbonPanel_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_GetDefaultBorder, doc_wxRibbonPanel_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxRibbonPanel_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_GetDefaultBorderForControl, doc_wxRibbonPanel_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxRibbonPanel_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoFreeze, doc_wxRibbonPanel_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxRibbonPanel_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_DoThaw, doc_wxRibbonPanel_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonPanel_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxRibbonPanel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonPanel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_HasTransparentBackground, doc_wxRibbonPanel_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxRibbonPanel_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRibbonPanel, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_TryBefore, doc_wxRibbonPanel_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxRibbonPanel_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxRibbonPanel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRibbonPanel, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_TryAfter, doc_wxRibbonPanel_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonPanel_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes");

extern "C" {static PyObject *meth_wxRibbonPanel_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonPanel_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxRibbonPanel::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonPanel, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRibbonPanel(void *, const sipTypeDef *);}
static void *cast_wxRibbonPanel(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRibbonPanel *sipCpp = reinterpret_cast< ::wxRibbonPanel *>(sipCppV);

    if (targetType == sipType_wxRibbonControl)
        return static_cast< ::wxRibbonControl *>(sipCpp);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRibbonPanel(void *, int);}
static void release_wxRibbonPanel(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRibbonPanel *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRibbonPanel *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxRibbonPanel(Py_ssize_t);}
static void *array_wxRibbonPanel(Py_ssize_t sipNrElem)
{
    return new  ::wxRibbonPanel[sipNrElem];
}


extern "C" {static void dealloc_wxRibbonPanel(sipSimpleWrapper *);}
static void dealloc_wxRibbonPanel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRibbonPanel *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRibbonPanel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRibbonPanel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRibbonPanel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxRibbonPanel *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRibbonPanel();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxString& labeldef = wxEmptyString;
        const  ::wxString* label = &labeldef;
        int labelState = 0;
        const  ::wxBitmap& minimised_icondef = wxNullBitmap;
        const  ::wxBitmap* minimised_icon = &minimised_icondef;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxRIBBON_PANEL_DEFAULT_STYLE;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_label,
            sipName_minimised_icon,
            sipName_pos,
            sipName_size,
            sipName_style,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J9J1J1l", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxString,&label, &labelState, sipType_wxBitmap, &minimised_icon, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRibbonPanel(parent,id,*label,*minimised_icon,*pos,*size,style);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRibbonPanel[] = {{11, 255, 1}};


static PyMethodDef methods_wxRibbonPanel[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxRibbonPanel_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxRibbonPanel_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxRibbonPanel_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), SIP_MLMETH_CAST(meth_wxRibbonPanel_AddChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_AddChild)},
    {SIP_MLNAME_CAST(sipName_CanAutoMinimise), meth_wxRibbonPanel_CanAutoMinimise, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_CanAutoMinimise)},
    {SIP_MLNAME_CAST(sipName_Create), SIP_MLMETH_CAST(meth_wxRibbonPanel_Create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_Create)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxRibbonPanel_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), SIP_MLMETH_CAST(meth_wxRibbonPanel_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), meth_wxRibbonPanel_DoFreeze, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), meth_wxRibbonPanel_DoGetBestClientSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), meth_wxRibbonPanel_DoGetBestSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), meth_wxRibbonPanel_DoGetBorderSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), SIP_MLMETH_CAST(meth_wxRibbonPanel_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetNextLargerSize), SIP_MLMETH_CAST(meth_wxRibbonPanel_DoGetNextLargerSize), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoGetNextSmallerSize), SIP_MLMETH_CAST(meth_wxRibbonPanel_DoGetNextSmallerSize), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), SIP_MLMETH_CAST(meth_wxRibbonPanel_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), SIP_MLMETH_CAST(meth_wxRibbonPanel_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), SIP_MLMETH_CAST(meth_wxRibbonPanel_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), SIP_MLMETH_CAST(meth_wxRibbonPanel_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), SIP_MLMETH_CAST(meth_wxRibbonPanel_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), SIP_MLMETH_CAST(meth_wxRibbonPanel_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), SIP_MLMETH_CAST(meth_wxRibbonPanel_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), meth_wxRibbonPanel_DoThaw, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EnableVisibleFocus), SIP_MLMETH_CAST(meth_wxRibbonPanel_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_EnableVisibleFocus)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), SIP_MLMETH_CAST(meth_wxRibbonPanel_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxRibbonPanel_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), meth_wxRibbonPanel_GetDefaultBorder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), meth_wxRibbonPanel_GetDefaultBorderForControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetExpandedDummy), meth_wxRibbonPanel_GetExpandedDummy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_GetExpandedDummy)},
    {SIP_MLNAME_CAST(sipName_GetExpandedPanel), meth_wxRibbonPanel_GetExpandedPanel, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_GetExpandedPanel)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxRibbonPanel_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetMinimisedIcon), meth_wxRibbonPanel_GetMinimisedIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_GetMinimisedIcon)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxRibbonPanel_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_GetValidator)},
    {SIP_MLNAME_CAST(sipName_HasExtButton), meth_wxRibbonPanel_HasExtButton, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_HasExtButton)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), meth_wxRibbonPanel_HasTransparentBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_HideExpanded), meth_wxRibbonPanel_HideExpanded, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_HideExpanded)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), SIP_MLMETH_CAST(meth_wxRibbonPanel_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxRibbonPanel_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxRibbonPanel_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_InitDialog)},
    {SIP_MLNAME_CAST(sipName_IsExtButtonHovered), meth_wxRibbonPanel_IsExtButtonHovered, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_IsExtButtonHovered)},
    {SIP_MLNAME_CAST(sipName_IsHovered), meth_wxRibbonPanel_IsHovered, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_IsHovered)},
    {SIP_MLNAME_CAST(sipName_IsMinimised), SIP_MLMETH_CAST(meth_wxRibbonPanel_IsMinimised), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_IsMinimised)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxRibbonPanel_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), SIP_MLMETH_CAST(meth_wxRibbonPanel_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_Realize), meth_wxRibbonPanel_Realize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_Realize)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), SIP_MLMETH_CAST(meth_wxRibbonPanel_RemoveChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), meth_wxRibbonPanel_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_SetArtProvider), SIP_MLMETH_CAST(meth_wxRibbonPanel_SetArtProvider), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_SetArtProvider)},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), SIP_MLMETH_CAST(meth_wxRibbonPanel_SetCanFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetValidator), SIP_MLMETH_CAST(meth_wxRibbonPanel_SetValidator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxRibbonPanel_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_ShowExpanded), meth_wxRibbonPanel_ShowExpanded, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_ShowExpanded)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxRibbonPanel_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxRibbonPanel_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth_wxRibbonPanel_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth_wxRibbonPanel_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonPanel_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxRibbonPanel_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonPanel_Validate)}
};

sipVariableDef variables_wxRibbonPanel[] = {
    {PropertyVariable, sipName_MinimisedIcon, &methods_wxRibbonPanel[31], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ExpandedPanel, &methods_wxRibbonPanel[29], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ExpandedDummy, &methods_wxRibbonPanel[28], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxRibbonPanel, "RibbonPanel()\n"
"RibbonPanel(parent, id=wx.ID_ANY, label=wx.EmptyString, minimised_icon=wx.NullBitmap, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_PANEL_DEFAULT_STYLE)\n"
"\n"
"Serves as a container for a group of (ribbon) controls.");


sipClassTypeDef sipTypeDef__ribbon_wxRibbonPanel = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRibbonPanel,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_RibbonPanel,
        {0, 0, 1},
        57, methods_wxRibbonPanel,
        0, SIP_NULLPTR,
        3, variables_wxRibbonPanel,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxRibbonPanel,
    -1,
    -1,
    supers_wxRibbonPanel,
    SIP_NULLPTR,
    init_type_wxRibbonPanel,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxRibbonPanel,
    SIP_NULLPTR,
    array_wxRibbonPanel,
    SIP_NULLPTR,
    release_wxRibbonPanel,
    cast_wxRibbonPanel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
