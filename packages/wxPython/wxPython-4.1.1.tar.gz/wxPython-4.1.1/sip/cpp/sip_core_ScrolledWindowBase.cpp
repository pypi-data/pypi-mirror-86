/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/scrolwin.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/dc.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sip_ScrolledWindowBase : public wxScrolled<wxPanel>
{
public:
    sip_ScrolledWindowBase();
    sip_ScrolledWindowBase( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxString&);
    virtual ~sip_ScrolledWindowBase();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);
    bool sipProtectVirt_ShouldScrollToChildOnFocus(bool, ::wxWindow*);
     ::wxSize sipProtectVirt_GetSizeAvailableForScrollTarget(bool,const  ::wxSize&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxSize GetSizeAvailableForScrollTarget(const  ::wxSize&) SIP_OVERRIDE;
    bool ShouldScrollToChildOnFocus( ::wxWindow*) SIP_OVERRIDE;
    bool SendAutoScrollEvents( ::wxScrollWinEvent&) const SIP_OVERRIDE;
    void OnDraw( ::wxDC&) SIP_OVERRIDE;
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
     ::wxSize DoGetBorderSize() const SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sip_ScrolledWindowBase(const sip_ScrolledWindowBase &);
    sip_ScrolledWindowBase &operator = (const sip_ScrolledWindowBase &);

    char sipPyMethods[44];
};

sip_ScrolledWindowBase::sip_ScrolledWindowBase(): wxScrolled<wxPanel>(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sip_ScrolledWindowBase::sip_ScrolledWindowBase( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxString& name): wxScrolled<wxPanel>(parent,id,pos,size,style,name), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sip_ScrolledWindowBase::~sip_ScrolledWindowBase()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxSize sip_ScrolledWindowBase::GetSizeAvailableForScrollTarget(const  ::wxSize& size)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_GetSizeAvailableForScrollTarget);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::GetSizeAvailableForScrollTarget(size);

    extern  ::wxSize sipVH__core_138(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    return sipVH__core_138(sipGILState, 0, sipPySelf, sipMeth, size);
}

bool sip_ScrolledWindowBase::ShouldScrollToChildOnFocus( ::wxWindow*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_ShouldScrollToChildOnFocus);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::ShouldScrollToChildOnFocus(child);

    extern bool sipVH__core_135(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*);

    return sipVH__core_135(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sip_ScrolledWindowBase::SendAutoScrollEvents( ::wxScrollWinEvent& event) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_SendAutoScrollEvents);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::SendAutoScrollEvents(event);

    extern bool sipVH__core_137(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxScrollWinEvent&);

    return sipVH__core_137(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sip_ScrolledWindowBase::OnDraw( ::wxDC& dc)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_OnDraw);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::OnDraw(dc);
        return;
    }

    extern void sipVH__core_136(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&);

    sipVH__core_136(sipGILState, 0, sipPySelf, sipMeth, dc);
}

void sip_ScrolledWindowBase::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::RemoveChild(child);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sip_ScrolledWindowBase::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_AddChild);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::AddChild(child);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sip_ScrolledWindowBase::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::ProcessEvent(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sip_ScrolledWindowBase::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::TryBefore(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sip_ScrolledWindowBase::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::TryAfter(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sip_ScrolledWindowBase::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::AcceptsFocus();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sip_ScrolledWindowBase::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::AcceptsFocusFromKeyboard();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sip_ScrolledWindowBase::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::AcceptsFocusRecursively();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sip_ScrolledWindowBase::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

void sip_ScrolledWindowBase::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

bool sip_ScrolledWindowBase::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__core_121(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__core_121(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

 ::wxPoint sip_ScrolledWindowBase::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__core_122(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_122(sipGILState, 0, sipPySelf, sipMeth);
}

bool sip_ScrolledWindowBase::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::HasTransparentBackground();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sip_ScrolledWindowBase::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::ShouldInheritColours();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxValidator* sip_ScrolledWindowBase::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_GetValidator);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::GetValidator();

    extern  ::wxValidator* sipVH__core_123(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_123(sipGILState, 0, sipPySelf, sipMeth);
}

void sip_ScrolledWindowBase::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_SetValidator);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::SetValidator(validator);
        return;
    }

    extern void sipVH__core_124(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__core_124(sipGILState, 0, sipPySelf, sipMeth, validator);
}

bool sip_ScrolledWindowBase::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::TransferDataFromWindow();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sip_ScrolledWindowBase::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::TransferDataToWindow();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sip_ScrolledWindowBase::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::Validate();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sip_ScrolledWindowBase::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_Destroy);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::Destroy();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sip_ScrolledWindowBase::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::InheritAttributes();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sip_ScrolledWindowBase::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_InitDialog);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::InitDialog();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sip_ScrolledWindowBase::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::OnInternalIdle();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sip_ScrolledWindowBase::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__core_125(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_125(sipGILState, 0, sipPySelf, sipMeth);
}

void sip_ScrolledWindowBase::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_DoEnable);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::DoEnable(enable);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, enable);
}

void sip_ScrolledWindowBase::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,SIP_NULLPTR,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sip_ScrolledWindowBase::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,SIP_NULLPTR,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::DoGetSize(width,height);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sip_ScrolledWindowBase::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,SIP_NULLPTR,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sip_ScrolledWindowBase::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__core_127(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__core_127(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sip_ScrolledWindowBase::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__core_128(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__core_128(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sip_ScrolledWindowBase::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__core_129(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__core_129(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

 ::wxSize sip_ScrolledWindowBase::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,SIP_NULLPTR,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::DoGetBorderSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

void sip_ScrolledWindowBase::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__core_130(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__core_130(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sip_ScrolledWindowBase::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__core_131(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__core_131(sipGILState, 0, sipPySelf, sipMeth, variant);
}

 ::wxBorder sip_ScrolledWindowBase::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::GetDefaultBorder();

    extern  ::wxBorder sipVH__core_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_132(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sip_ScrolledWindowBase::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__core_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_132(sipGILState, 0, sipPySelf, sipMeth);
}

void sip_ScrolledWindowBase::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,SIP_NULLPTR,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::DoFreeze();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sip_ScrolledWindowBase::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,SIP_NULLPTR,sipName_DoThaw);

    if (!sipMeth)
    {
         ::_ScrolledWindowBase::DoThaw();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sip_ScrolledWindowBase::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::DoGetBestSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sip_ScrolledWindowBase::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::_ScrolledWindowBase::DoGetBestClientSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

void sip_ScrolledWindowBase::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sip_ScrolledWindowBase::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ? wxScrolled<wxPanel>::ProcessEvent(event) : ProcessEvent(event));
}

void sip_ScrolledWindowBase::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ? wxScrolled<wxPanel>::DoEnable(enable) : DoEnable(enable));
}

void sip_ScrolledWindowBase::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ? wxScrolled<wxPanel>::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sip_ScrolledWindowBase::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ? wxScrolled<wxPanel>::DoGetSize(width,height) : DoGetSize(width,height));
}

void sip_ScrolledWindowBase::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ? wxScrolled<wxPanel>::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sip_ScrolledWindowBase::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? wxScrolled<wxPanel>::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sip_ScrolledWindowBase::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? wxScrolled<wxPanel>::DoGetBestClientSize() : DoGetBestClientSize());
}

void sip_ScrolledWindowBase::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ? wxScrolled<wxPanel>::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sip_ScrolledWindowBase::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ? wxScrolled<wxPanel>::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sip_ScrolledWindowBase::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ? wxScrolled<wxPanel>::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sip_ScrolledWindowBase::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? wxScrolled<wxPanel>::DoGetBorderSize() : DoGetBorderSize());
}

void sip_ScrolledWindowBase::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ? wxScrolled<wxPanel>::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sip_ScrolledWindowBase::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ? wxScrolled<wxPanel>::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sip_ScrolledWindowBase::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? wxScrolled<wxPanel>::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sip_ScrolledWindowBase::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? wxScrolled<wxPanel>::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sip_ScrolledWindowBase::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ? wxScrolled<wxPanel>::DoFreeze() : DoFreeze());
}

void sip_ScrolledWindowBase::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ? wxScrolled<wxPanel>::DoThaw() : DoThaw());
}

bool sip_ScrolledWindowBase::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ? wxScrolled<wxPanel>::HasTransparentBackground() : HasTransparentBackground());
}

bool sip_ScrolledWindowBase::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ? wxScrolled<wxPanel>::TryBefore(event) : TryBefore(event));
}

bool sip_ScrolledWindowBase::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ? wxScrolled<wxPanel>::TryAfter(event) : TryAfter(event));
}

bool sip_ScrolledWindowBase::sipProtectVirt_ShouldScrollToChildOnFocus(bool sipSelfWasArg, ::wxWindow*child)
{
    return (sipSelfWasArg ? wxScrolled<wxPanel>::ShouldScrollToChildOnFocus(child) : ShouldScrollToChildOnFocus(child));
}

 ::wxSize sip_ScrolledWindowBase::sipProtectVirt_GetSizeAvailableForScrollTarget(bool sipSelfWasArg,const  ::wxSize& size)
{
    return (sipSelfWasArg ? wxScrolled<wxPanel>::GetSizeAvailableForScrollTarget(size) : GetSizeAvailableForScrollTarget(size));
}


PyDoc_STRVAR(doc__ScrolledWindowBase_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth__ScrolledWindowBase_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sip_ScrolledWindowBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_CalcScrolledPosition, "CalcScrolledPosition(x, y) -> (xx, yy)\n"
"CalcScrolledPosition(pt) -> Point\n"
"\n"
"Translates the logical coordinates to the device ones.\n"
"");

extern "C" {static PyObject *meth__ScrolledWindowBase_CalcScrolledPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_CalcScrolledPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int x;
        int y;
        int xx;
        int yy;
        const wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &x, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->CalcScrolledPosition(x,y,&xx,&yy);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",xx,yy);
        }
    }

    {
        const  ::wxPoint* pt;
        int ptState = 0;
        const wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint(sipCpp->CalcScrolledPosition(*pt));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_CalcScrolledPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_CalcUnscrolledPosition, "CalcUnscrolledPosition(x, y) -> (xx, yy)\n"
"CalcUnscrolledPosition(pt) -> Point\n"
"\n"
"Translates the device coordinates to the logical ones.\n"
"");

extern "C" {static PyObject *meth__ScrolledWindowBase_CalcUnscrolledPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_CalcUnscrolledPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int x;
        int y;
        int xx;
        int yy;
        const wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &x, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->CalcUnscrolledPosition(x,y,&xx,&yy);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",xx,yy);
        }
    }

    {
        const  ::wxPoint* pt;
        int ptState = 0;
        const wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint(sipCpp->CalcUnscrolledPosition(*pt));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_CalcUnscrolledPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_Create, "Create(parent, id=-1, pos=DefaultPosition, size=DefaultSize, style=HSCROLL|VSCROLL, name=\"scrolledWindow\") -> bool\n"
"\n"
"Creates the window for two-step construction.");

extern "C" {static PyObject *meth__ScrolledWindowBase_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* parent;
         ::wxWindowID id = -1;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxHSCROLL|wxVSCROLL;
        const  ::wxString& namedef = "scrolledWindow";
        const  ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|iJ1J1lJ1", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DisableKeyboardScrolling, "DisableKeyboardScrolling()\n"
"\n"
"Disable use of keyboard keys for scrolling.");

extern "C" {static PyObject *meth__ScrolledWindowBase_DisableKeyboardScrolling(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DisableKeyboardScrolling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DisableKeyboardScrolling();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DisableKeyboardScrolling, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoPrepareDC, "DoPrepareDC(dc)\n"
"\n"
"Call this function to prepare the device context for drawing a\n"
"scrolled image.");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoPrepareDC(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoPrepareDC(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDC* dc;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxDC, &dc))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoPrepareDC(*dc);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoPrepareDC, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_EnableScrolling, "EnableScrolling(xScrolling, yScrolling)\n"
"\n"
"Enable or disable use of wxWindow::ScrollWindow() for scrolling.");

extern "C" {static PyObject *meth__ScrolledWindowBase_EnableScrolling(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_EnableScrolling(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool xScrolling;
        bool yScrolling;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_xScrolling,
            sipName_yScrolling,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bbb", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &xScrolling, &yScrolling))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnableScrolling(xScrolling,yScrolling);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_EnableScrolling, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_ShowScrollbars, "ShowScrollbars(horz, vert)\n"
"\n"
"Set the scrollbar visibility.");

extern "C" {static PyObject *meth__ScrolledWindowBase_ShowScrollbars(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_ShowScrollbars(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxScrollbarVisibility horz;
         ::wxScrollbarVisibility vert;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_horz,
            sipName_vert,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEE", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxScrollbarVisibility, &horz, sipType_wxScrollbarVisibility, &vert))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ShowScrollbars(horz,vert);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_ShowScrollbars, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetScrollPixelsPerUnit, "GetScrollPixelsPerUnit() -> (xUnit, yUnit)\n"
"\n"
"Get the number of pixels per scroll unit (line), in each direction, as\n"
"set by SetScrollbars().");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetScrollPixelsPerUnit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetScrollPixelsPerUnit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int xUnit;
        int yUnit;
        const wxScrolled<wxPanel> *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->GetScrollPixelsPerUnit(&xUnit,&yUnit);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",xUnit,yUnit);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetScrollPixelsPerUnit, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetViewStart, "GetViewStart() -> (x, y)\n"
"\n"
"Get the position at which the visible portion of the window starts.");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetViewStart(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetViewStart(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int x;
        int y;
        const wxScrolled<wxPanel> *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->GetViewStart(&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetViewStart, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_IsRetained, "IsRetained() -> bool\n"
"\n"
"Motif only: true if the window has a backing bitmap.");

extern "C" {static PyObject *meth__ScrolledWindowBase_IsRetained(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_IsRetained(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsRetained();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_IsRetained, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_OnDraw, "OnDraw(dc)\n"
"\n"
"Called by the default paint event handler to allow the application to\n"
"define painting behaviour without having to worry about calling\n"
"DoPrepareDC().");

extern "C" {static PyObject *meth__ScrolledWindowBase_OnDraw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_OnDraw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxDC, &dc))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::OnDraw(*dc) : sipCpp->OnDraw(*dc));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_OnDraw, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_PrepareDC, "PrepareDC(dc)\n"
"\n"
"This function is for backwards compatibility only and simply calls\n"
"DoPrepareDC() now.");

extern "C" {static PyObject *meth__ScrolledWindowBase_PrepareDC(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_PrepareDC(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDC* dc;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxDC, &dc))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->PrepareDC(*dc);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_PrepareDC, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_Scroll, "Scroll(x, y)\n"
"Scroll(pt)\n"
"\n"
"Scrolls a window so the view start is at the given point.\n"
"");

extern "C" {static PyObject *meth__ScrolledWindowBase_Scroll(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_Scroll(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int x;
        int y;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &x, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Scroll(x,y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::wxPoint* pt;
        int ptState = 0;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Scroll(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_Scroll, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_SetScrollRate, "SetScrollRate(xstep, ystep)\n"
"\n"
"Set the horizontal and vertical scrolling increment only.");

extern "C" {static PyObject *meth__ScrolledWindowBase_SetScrollRate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_SetScrollRate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int xstep;
        int ystep;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_xstep,
            sipName_ystep,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &xstep, &ystep))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetScrollRate(xstep,ystep);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_SetScrollRate, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_SetScrollbars, "SetScrollbars(pixelsPerUnitX, pixelsPerUnitY, noUnitsX, noUnitsY, xPos=0, yPos=0, noRefresh=False)\n"
"\n"
"Sets up vertical and/or horizontal scrollbars.");

extern "C" {static PyObject *meth__ScrolledWindowBase_SetScrollbars(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_SetScrollbars(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int pixelsPerUnitX;
        int pixelsPerUnitY;
        int noUnitsX;
        int noUnitsY;
        int xPos = 0;
        int yPos = 0;
        bool noRefresh = 0;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pixelsPerUnitX,
            sipName_pixelsPerUnitY,
            sipName_noUnitsX,
            sipName_noUnitsY,
            sipName_xPos,
            sipName_yPos,
            sipName_noRefresh,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii|iib", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &pixelsPerUnitX, &pixelsPerUnitY, &noUnitsX, &noUnitsY, &xPos, &yPos, &noRefresh))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetScrollbars(pixelsPerUnitX,pixelsPerUnitY,noUnitsX,noUnitsY,xPos,yPos,noRefresh);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_SetScrollbars, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_SetTargetWindow, "SetTargetWindow(window)\n"
"\n"
"Call this function to tell wxScrolled to perform the actual scrolling\n"
"on a different window (and not on itself).");

extern "C" {static PyObject *meth__ScrolledWindowBase_SetTargetWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_SetTargetWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* window;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxWindow, &window))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTargetWindow(window);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_SetTargetWindow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetTargetWindow, "GetTargetWindow() -> Window");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetTargetWindow(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetTargetWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetTargetWindow();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetTargetWindow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_SetTargetRect, "SetTargetRect(rect)");

extern "C" {static PyObject *meth__ScrolledWindowBase_SetTargetRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_SetTargetRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRect* rect;
        int rectState = 0;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxRect, &rect, &rectState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTargetRect(*rect);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_SetTargetRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetTargetRect, "GetTargetRect() -> Rect");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetTargetRect(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetTargetRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
             ::wxRect*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRect(sipCpp->GetTargetRect());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetTargetRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetScrollPageSize, "GetScrollPageSize(orient) -> int");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetScrollPageSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetScrollPageSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int orient;
        const wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_orient,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &orient))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetScrollPageSize(orient);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetScrollPageSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_SetScrollPageSize, "SetScrollPageSize(orient, pageSize)");

extern "C" {static PyObject *meth__ScrolledWindowBase_SetScrollPageSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_SetScrollPageSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int orient;
        int pageSize;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_orient,
            sipName_pageSize,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &orient, &pageSize))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetScrollPageSize(orient,pageSize);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_SetScrollPageSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetScrollLines, "GetScrollLines(orient) -> int");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetScrollLines(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetScrollLines(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int orient;
        const wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_orient,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &orient))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetScrollLines(orient);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetScrollLines, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_SetScale, "SetScale(xs, ys)");

extern "C" {static PyObject *meth__ScrolledWindowBase_SetScale(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_SetScale(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double xs;
        double ys;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_xs,
            sipName_ys,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bdd", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &xs, &ys))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetScale(xs,ys);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_SetScale, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetScaleX, "GetScaleX() -> double");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetScaleX(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetScaleX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            double sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetScaleX();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetScaleX, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetScaleY, "GetScaleY() -> double");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetScaleY(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetScaleY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            double sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetScaleY();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetScaleY, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_AdjustScrollbars, "AdjustScrollbars()");

extern "C" {static PyObject *meth__ScrolledWindowBase_AdjustScrollbars(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_AdjustScrollbars(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AdjustScrollbars();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_AdjustScrollbars, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_IsAutoScrolling, "IsAutoScrolling() -> bool\n"
"\n"
"Are we generating the autoscroll events?");

extern "C" {static PyObject *meth__ScrolledWindowBase_IsAutoScrolling(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_IsAutoScrolling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsAutoScrolling();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_IsAutoScrolling, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_StopAutoScrolling, "StopAutoScrolling()\n"
"\n"
"Stop generating the scroll events when mouse is held outside the\n"
"window.");

extern "C" {static PyObject *meth__ScrolledWindowBase_StopAutoScrolling(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_StopAutoScrolling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->StopAutoScrolling();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_StopAutoScrolling, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_SendAutoScrollEvents, "SendAutoScrollEvents(event) -> bool\n"
"\n"
"This method can be overridden in a derived class to forbid sending the\n"
"auto scroll events - note that unlike StopAutoScrolling() it doesn't\n"
"stop the timer, so it will be called repeatedly and will typically\n"
"return different values depending on the current mouse position.");

extern "C" {static PyObject *meth__ScrolledWindowBase_SendAutoScrollEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_SendAutoScrollEvents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxScrollWinEvent* event;
        const wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxScrollWinEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::SendAutoScrollEvents(*event) : sipCpp->SendAutoScrollEvents(*event));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_SendAutoScrollEvents, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetClientAreaOrigin, doc__ScrolledWindowBase_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth__ScrolledWindowBase_Validate(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_Validate, doc__ScrolledWindowBase_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth__ScrolledWindowBase_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_TransferDataToWindow, doc__ScrolledWindowBase_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth__ScrolledWindowBase_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_TransferDataFromWindow, doc__ScrolledWindowBase_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth__ScrolledWindowBase_InitDialog(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_InitDialog, doc__ScrolledWindowBase_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth__ScrolledWindowBase_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_AcceptsFocus, doc__ScrolledWindowBase_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth__ScrolledWindowBase_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_AcceptsFocusRecursively, doc__ScrolledWindowBase_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth__ScrolledWindowBase_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_AcceptsFocusFromKeyboard, doc__ScrolledWindowBase_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth__ScrolledWindowBase_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_AddChild, doc__ScrolledWindowBase_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth__ScrolledWindowBase_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_RemoveChild, doc__ScrolledWindowBase_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth__ScrolledWindowBase_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_InheritAttributes, doc__ScrolledWindowBase_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth__ScrolledWindowBase_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_ShouldInheritColours, doc__ScrolledWindowBase_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth__ScrolledWindowBase_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_OnInternalIdle, doc__ScrolledWindowBase_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetMainWindowOfCompositeControl, doc__ScrolledWindowBase_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth__ScrolledWindowBase_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_InformFirstDirection, doc__ScrolledWindowBase_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth__ScrolledWindowBase_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_SetCanFocus, doc__ScrolledWindowBase_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth__ScrolledWindowBase_Destroy(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_Destroy, doc__ScrolledWindowBase_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth__ScrolledWindowBase_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_SetValidator, doc__ScrolledWindowBase_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetValidator(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        wxScrolled<wxPanel> *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetValidator, doc__ScrolledWindowBase_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth__ScrolledWindowBase_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
        wxScrolled<wxPanel> *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::_ScrolledWindowBase::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_EnableVisibleFocus, doc__ScrolledWindowBase_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth__ScrolledWindowBase_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sip_ScrolledWindowBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_ProcessEvent, doc__ScrolledWindowBase_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sip_ScrolledWindowBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoEnable, doc__ScrolledWindowBase_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sip_ScrolledWindowBase *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoGetPosition, doc__ScrolledWindowBase_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sip_ScrolledWindowBase *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoGetSize, doc__ScrolledWindowBase_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sip_ScrolledWindowBase *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoGetClientSize, doc__ScrolledWindowBase_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sip_ScrolledWindowBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoGetBestSize, doc__ScrolledWindowBase_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sip_ScrolledWindowBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoGetBestClientSize, doc__ScrolledWindowBase_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sip_ScrolledWindowBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoSetSize, doc__ScrolledWindowBase_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sip_ScrolledWindowBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoSetClientSize, doc__ScrolledWindowBase_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sip_ScrolledWindowBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoSetSizeHints, doc__ScrolledWindowBase_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoGetBorderSize(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sip_ScrolledWindowBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoGetBorderSize, doc__ScrolledWindowBase_DoGetBorderSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sip_ScrolledWindowBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoMoveWindow, doc__ScrolledWindowBase_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sip_ScrolledWindowBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoSetWindowVariant, doc__ScrolledWindowBase_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sip_ScrolledWindowBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetDefaultBorder, doc__ScrolledWindowBase_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sip_ScrolledWindowBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetDefaultBorderForControl, doc__ScrolledWindowBase_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sip_ScrolledWindowBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoFreeze, doc__ScrolledWindowBase_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth__ScrolledWindowBase_DoThaw(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sip_ScrolledWindowBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_DoThaw, doc__ScrolledWindowBase_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth__ScrolledWindowBase_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sip_ScrolledWindowBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType__ScrolledWindowBase, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_HasTransparentBackground, doc__ScrolledWindowBase_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth__ScrolledWindowBase_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sip_ScrolledWindowBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_TryBefore, doc__ScrolledWindowBase_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth__ScrolledWindowBase_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sip_ScrolledWindowBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_TryAfter, doc__ScrolledWindowBase_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::_ScrolledWindowBase::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_ShouldScrollToChildOnFocus, "ShouldScrollToChildOnFocus(child) -> bool\n"
"\n"
"This method can be overridden in a derived class to prevent scrolling\n"
"the child window into view automatically when it gets focus.");

extern "C" {static PyObject *meth__ScrolledWindowBase_ShouldScrollToChildOnFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_ShouldScrollToChildOnFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindow* child;
        sip_ScrolledWindowBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxWindow, &child))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ShouldScrollToChildOnFocus(sipSelfWasArg,child);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_ShouldScrollToChildOnFocus, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc__ScrolledWindowBase_GetSizeAvailableForScrollTarget, "GetSizeAvailableForScrollTarget(size) -> Size\n"
"\n"
"Function which must be overridden to implement the size available for\n"
"the scroll target for the given size of the main window.");

extern "C" {static PyObject *meth__ScrolledWindowBase_GetSizeAvailableForScrollTarget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth__ScrolledWindowBase_GetSizeAvailableForScrollTarget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxSize* size;
        int sizeState = 0;
        sip_ScrolledWindowBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType__ScrolledWindowBase, &sipCpp, sipType_wxSize, &size, &sizeState))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_GetSizeAvailableForScrollTarget(sipSelfWasArg,*size));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName__ScrolledWindowBase, sipName_GetSizeAvailableForScrollTarget, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast__ScrolledWindowBase(void *, const sipTypeDef *);}
static void *cast__ScrolledWindowBase(void *sipCppV, const sipTypeDef *targetType)
{
     ::_ScrolledWindowBase *sipCpp = reinterpret_cast< ::_ScrolledWindowBase *>(sipCppV);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release__ScrolledWindowBase(void *, int);}
static void release__ScrolledWindowBase(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sip_ScrolledWindowBase *>(sipCppV);
    else
        delete reinterpret_cast<wxScrolled<wxPanel> *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc__ScrolledWindowBase(sipSimpleWrapper *);}
static void dealloc__ScrolledWindowBase(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sip_ScrolledWindowBase *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release__ScrolledWindowBase(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type__ScrolledWindowBase(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type__ScrolledWindowBase(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sip_ScrolledWindowBase *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sip_ScrolledWindowBase();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = -1;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxHSCROLL|wxVSCROLL;
        const  ::wxString& namedef = "scrolledWindow";
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1lJ1", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sip_ScrolledWindowBase(parent,id,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers__ScrolledWindowBase[] = {{604, 255, 1}};


static PyMethodDef methods__ScrolledWindowBase[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth__ScrolledWindowBase_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth__ScrolledWindowBase_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth__ScrolledWindowBase_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), SIP_MLMETH_CAST(meth__ScrolledWindowBase_AddChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_AddChild)},
    {SIP_MLNAME_CAST(sipName_AdjustScrollbars), meth__ScrolledWindowBase_AdjustScrollbars, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_AdjustScrollbars)},
    {SIP_MLNAME_CAST(sipName_CalcScrolledPosition), SIP_MLMETH_CAST(meth__ScrolledWindowBase_CalcScrolledPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_CalcScrolledPosition)},
    {SIP_MLNAME_CAST(sipName_CalcUnscrolledPosition), SIP_MLMETH_CAST(meth__ScrolledWindowBase_CalcUnscrolledPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_CalcUnscrolledPosition)},
    {SIP_MLNAME_CAST(sipName_Create), SIP_MLMETH_CAST(meth__ScrolledWindowBase_Create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_Create)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth__ScrolledWindowBase_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_Destroy)},
    {SIP_MLNAME_CAST(sipName_DisableKeyboardScrolling), meth__ScrolledWindowBase_DisableKeyboardScrolling, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DisableKeyboardScrolling)},
    {SIP_MLNAME_CAST(sipName_DoEnable), SIP_MLMETH_CAST(meth__ScrolledWindowBase_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), meth__ScrolledWindowBase_DoFreeze, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), meth__ScrolledWindowBase_DoGetBestClientSize, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), meth__ScrolledWindowBase_DoGetBestSize, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), meth__ScrolledWindowBase_DoGetBorderSize, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), SIP_MLMETH_CAST(meth__ScrolledWindowBase_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), SIP_MLMETH_CAST(meth__ScrolledWindowBase_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), SIP_MLMETH_CAST(meth__ScrolledWindowBase_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), SIP_MLMETH_CAST(meth__ScrolledWindowBase_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoPrepareDC), SIP_MLMETH_CAST(meth__ScrolledWindowBase_DoPrepareDC), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoPrepareDC)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), SIP_MLMETH_CAST(meth__ScrolledWindowBase_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), SIP_MLMETH_CAST(meth__ScrolledWindowBase_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), SIP_MLMETH_CAST(meth__ScrolledWindowBase_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), SIP_MLMETH_CAST(meth__ScrolledWindowBase_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), meth__ScrolledWindowBase_DoThaw, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EnableScrolling), SIP_MLMETH_CAST(meth__ScrolledWindowBase_EnableScrolling), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_EnableScrolling)},
    {SIP_MLNAME_CAST(sipName_EnableVisibleFocus), SIP_MLMETH_CAST(meth__ScrolledWindowBase_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_EnableVisibleFocus)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), SIP_MLMETH_CAST(meth__ScrolledWindowBase_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth__ScrolledWindowBase_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), meth__ScrolledWindowBase_GetDefaultBorder, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), meth__ScrolledWindowBase_GetDefaultBorderForControl, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth__ScrolledWindowBase_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetScaleX), meth__ScrolledWindowBase_GetScaleX, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetScaleX)},
    {SIP_MLNAME_CAST(sipName_GetScaleY), meth__ScrolledWindowBase_GetScaleY, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetScaleY)},
    {SIP_MLNAME_CAST(sipName_GetScrollLines), SIP_MLMETH_CAST(meth__ScrolledWindowBase_GetScrollLines), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetScrollLines)},
    {SIP_MLNAME_CAST(sipName_GetScrollPageSize), SIP_MLMETH_CAST(meth__ScrolledWindowBase_GetScrollPageSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetScrollPageSize)},
    {SIP_MLNAME_CAST(sipName_GetScrollPixelsPerUnit), SIP_MLMETH_CAST(meth__ScrolledWindowBase_GetScrollPixelsPerUnit), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetScrollPixelsPerUnit)},
    {SIP_MLNAME_CAST(sipName_GetSizeAvailableForScrollTarget), SIP_MLMETH_CAST(meth__ScrolledWindowBase_GetSizeAvailableForScrollTarget), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetSizeAvailableForScrollTarget)},
    {SIP_MLNAME_CAST(sipName_GetTargetRect), meth__ScrolledWindowBase_GetTargetRect, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetTargetRect)},
    {SIP_MLNAME_CAST(sipName_GetTargetWindow), meth__ScrolledWindowBase_GetTargetWindow, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetTargetWindow)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth__ScrolledWindowBase_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetValidator)},
    {SIP_MLNAME_CAST(sipName_GetViewStart), SIP_MLMETH_CAST(meth__ScrolledWindowBase_GetViewStart), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_GetViewStart)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), meth__ScrolledWindowBase_HasTransparentBackground, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), SIP_MLMETH_CAST(meth__ScrolledWindowBase_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth__ScrolledWindowBase_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth__ScrolledWindowBase_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_InitDialog)},
    {SIP_MLNAME_CAST(sipName_IsAutoScrolling), meth__ScrolledWindowBase_IsAutoScrolling, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_IsAutoScrolling)},
    {SIP_MLNAME_CAST(sipName_IsRetained), meth__ScrolledWindowBase_IsRetained, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_IsRetained)},
    {SIP_MLNAME_CAST(sipName_OnDraw), SIP_MLMETH_CAST(meth__ScrolledWindowBase_OnDraw), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_OnDraw)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth__ScrolledWindowBase_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_PrepareDC), SIP_MLMETH_CAST(meth__ScrolledWindowBase_PrepareDC), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_PrepareDC)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), SIP_MLMETH_CAST(meth__ScrolledWindowBase_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), SIP_MLMETH_CAST(meth__ScrolledWindowBase_RemoveChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_Scroll), SIP_MLMETH_CAST(meth__ScrolledWindowBase_Scroll), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_Scroll)},
    {SIP_MLNAME_CAST(sipName_SendAutoScrollEvents), SIP_MLMETH_CAST(meth__ScrolledWindowBase_SendAutoScrollEvents), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_SendAutoScrollEvents)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), meth__ScrolledWindowBase_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), SIP_MLMETH_CAST(meth__ScrolledWindowBase_SetCanFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetScale), SIP_MLMETH_CAST(meth__ScrolledWindowBase_SetScale), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_SetScale)},
    {SIP_MLNAME_CAST(sipName_SetScrollPageSize), SIP_MLMETH_CAST(meth__ScrolledWindowBase_SetScrollPageSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_SetScrollPageSize)},
    {SIP_MLNAME_CAST(sipName_SetScrollRate), SIP_MLMETH_CAST(meth__ScrolledWindowBase_SetScrollRate), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_SetScrollRate)},
    {SIP_MLNAME_CAST(sipName_SetScrollbars), SIP_MLMETH_CAST(meth__ScrolledWindowBase_SetScrollbars), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_SetScrollbars)},
    {SIP_MLNAME_CAST(sipName_SetTargetRect), SIP_MLMETH_CAST(meth__ScrolledWindowBase_SetTargetRect), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_SetTargetRect)},
    {SIP_MLNAME_CAST(sipName_SetTargetWindow), SIP_MLMETH_CAST(meth__ScrolledWindowBase_SetTargetWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_SetTargetWindow)},
    {SIP_MLNAME_CAST(sipName_SetValidator), SIP_MLMETH_CAST(meth__ScrolledWindowBase_SetValidator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth__ScrolledWindowBase_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_ShouldScrollToChildOnFocus), SIP_MLMETH_CAST(meth__ScrolledWindowBase_ShouldScrollToChildOnFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_ShouldScrollToChildOnFocus)},
    {SIP_MLNAME_CAST(sipName_ShowScrollbars), SIP_MLMETH_CAST(meth__ScrolledWindowBase_ShowScrollbars), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_ShowScrollbars)},
    {SIP_MLNAME_CAST(sipName_StopAutoScrolling), meth__ScrolledWindowBase_StopAutoScrolling, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_StopAutoScrolling)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth__ScrolledWindowBase_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth__ScrolledWindowBase_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth__ScrolledWindowBase_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth__ScrolledWindowBase_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth__ScrolledWindowBase_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc__ScrolledWindowBase_Validate)}
};

sipVariableDef variables__ScrolledWindowBase[] = {
    {PropertyVariable, sipName_TargetWindow, &methods__ScrolledWindowBase[39], &methods__ScrolledWindowBase[62], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_TargetRect, &methods__ScrolledWindowBase[38], &methods__ScrolledWindowBase[61], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ScaleY, &methods__ScrolledWindowBase[33], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ScaleX, &methods__ScrolledWindowBase[32], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc__ScrolledWindowBase, "Scrolled()\n"
"Scrolled(parent, id=-1, pos=DefaultPosition, size=DefaultSize, style=HSCROLL|VSCROLL, name=\"scrolledWindow\")\n"
"\n"
"The wxScrolled class manages scrolling for its client area,\n"
"transforming the coordinates according to the scrollbar positions, and\n"
"setting the scroll positions, thumb sizes and ranges according to the\n"
"area in view.");


sipClassTypeDef sipTypeDef__core__ScrolledWindowBase = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr__ScrolledWindowBase,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr__ScrolledWindowBase,
        {0, 0, 1},
        73, methods__ScrolledWindowBase,
        0, SIP_NULLPTR,
        4, variables__ScrolledWindowBase,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc__ScrolledWindowBase,
    -1,
    -1,
    supers__ScrolledWindowBase,
    SIP_NULLPTR,
    init_type__ScrolledWindowBase,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc__ScrolledWindowBase,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release__ScrolledWindowBase,
    cast__ScrolledWindowBase,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
