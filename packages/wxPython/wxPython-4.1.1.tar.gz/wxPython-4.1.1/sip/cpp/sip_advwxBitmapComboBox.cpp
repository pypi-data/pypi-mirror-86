/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_adv.h"

        #include <wx/bmpcbox.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/validate.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/bitmap.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/textcompleter.h>
    void _wxBitmapComboBox_SetTextSelection(wxBitmapComboBox* self, long from_, long to_)
    {
        self->SetSelection(from_, to_);
    }


class sipwxBitmapComboBox : public  ::wxBitmapComboBox
{
public:
    sipwxBitmapComboBox();
    sipwxBitmapComboBox( ::wxWindow*, ::wxWindowID,const  ::wxString&,const  ::wxPoint&,const  ::wxSize&,const  ::wxArrayString&,long,const  ::wxValidator&,const  ::wxString&);
    virtual ~sipwxBitmapComboBox();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxString GetStringSelection() const SIP_OVERRIDE;
    int GetSelection() const SIP_OVERRIDE;
    void SetSelection(int) SIP_OVERRIDE;
    int FindString(const  ::wxString&,bool) const SIP_OVERRIDE;
    void SetString(uint,const  ::wxString&) SIP_OVERRIDE;
     ::wxString GetString(uint) const SIP_OVERRIDE;
    uint GetCount() const SIP_OVERRIDE;
    bool CanCopy() const SIP_OVERRIDE;
    bool CanCut() const SIP_OVERRIDE;
    bool CanPaste() const SIP_OVERRIDE;
    bool CanRedo() const SIP_OVERRIDE;
    bool CanUndo() const SIP_OVERRIDE;
    void Copy() SIP_OVERRIDE;
    void Cut() SIP_OVERRIDE;
    void Paste() SIP_OVERRIDE;
    void Redo() SIP_OVERRIDE;
    void Undo() SIP_OVERRIDE;
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
     ::wxSize DoGetBorderSize() const SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxBitmapComboBox(const sipwxBitmapComboBox &);
    sipwxBitmapComboBox &operator = (const sipwxBitmapComboBox &);

    char sipPyMethods[57];
};

sipwxBitmapComboBox::sipwxBitmapComboBox():  ::wxBitmapComboBox(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxBitmapComboBox::sipwxBitmapComboBox( ::wxWindow*parent, ::wxWindowID id,const  ::wxString& value,const  ::wxPoint& pos,const  ::wxSize& size,const  ::wxArrayString& choices,long style,const  ::wxValidator& validator,const  ::wxString& name):  ::wxBitmapComboBox(parent,id,value,pos,size,choices,style,validator,name), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxBitmapComboBox::~sipwxBitmapComboBox()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxString sipwxBitmapComboBox::GetStringSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_GetStringSelection);

    if (!sipMeth)
    {
         ::wxString sipRes;

                sipRes = wxItemContainerImmutable::GetStringSelection();

        return sipRes;
    }

    extern  ::wxString sipVH__adv_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_29(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxBitmapComboBox::GetSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_GetSelection);

    if (!sipMeth)
        return  ::wxBitmapComboBox::GetSelection();

    extern int sipVH__adv_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_58(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::SetSelection(int n)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_SetSelection);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::SetSelection(n);
        return;
    }

    extern void sipVH__adv_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__adv_57(sipGILState, 0, sipPySelf, sipMeth, n);
}

int sipwxBitmapComboBox::FindString(const  ::wxString& string,bool caseSensitive) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_FindString);

    if (!sipMeth)
        return  ::wxBitmapComboBox::FindString(string,caseSensitive);

    extern int sipVH__adv_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&,bool);

    return sipVH__adv_56(sipGILState, 0, sipPySelf, sipMeth, string, caseSensitive);
}

void sipwxBitmapComboBox::SetString(uint n,const  ::wxString& text)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_SetString);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::SetString(n,text);
        return;
    }

    extern void sipVH__adv_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint,const  ::wxString&);

    sipVH__adv_55(sipGILState, 0, sipPySelf, sipMeth, n, text);
}

 ::wxString sipwxBitmapComboBox::GetString(uint n) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_GetString);

    if (!sipMeth)
        return  ::wxBitmapComboBox::GetString(n);

    extern  ::wxString sipVH__adv_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint);

    return sipVH__adv_54(sipGILState, 0, sipPySelf, sipMeth, n);
}

uint sipwxBitmapComboBox::GetCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_GetCount);

    if (!sipMeth)
        return  ::wxBitmapComboBox::GetCount();

    extern uint sipVH__adv_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_53(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::CanCopy() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_CanCopy);

    if (!sipMeth)
        return  ::wxBitmapComboBox::CanCopy();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::CanCut() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_CanCut);

    if (!sipMeth)
        return  ::wxBitmapComboBox::CanCut();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::CanPaste() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_CanPaste);

    if (!sipMeth)
        return  ::wxBitmapComboBox::CanPaste();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::CanRedo() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_CanRedo);

    if (!sipMeth)
        return  ::wxBitmapComboBox::CanRedo();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::CanUndo() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_CanUndo);

    if (!sipMeth)
        return  ::wxBitmapComboBox::CanUndo();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::Copy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_Copy);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::Copy();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::Cut()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_Cut);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::Cut();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::Paste()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_Paste);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::Paste();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::Redo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_Redo);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::Redo();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::Undo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_Undo);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::Undo();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxBitmapComboBox::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxBitmapComboBox::DoGetBestClientSize();

    extern  ::wxSize sipVH__adv_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_23(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxBitmapComboBox::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxBitmapComboBox::DoGetBestSize();

    extern  ::wxSize sipVH__adv_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_23(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::DoThaw();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::DoFreeze();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxBitmapComboBox::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxBitmapComboBox::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__adv_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_26(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxBitmapComboBox::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxBitmapComboBox::GetDefaultBorder();

    extern  ::wxBorder sipVH__adv_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_26(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__adv_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__adv_25(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxBitmapComboBox::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__adv_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__adv_24(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

 ::wxSize sipwxBitmapComboBox::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxBitmapComboBox::DoGetBorderSize();

    extern  ::wxSize sipVH__adv_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_23(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__adv_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__adv_22(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxBitmapComboBox::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__adv_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__adv_21(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxBitmapComboBox::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__adv_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__adv_20(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxBitmapComboBox::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,SIP_NULLPTR,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__adv_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__adv_19(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxBitmapComboBox::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,SIP_NULLPTR,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::DoGetSize(width,height);
        return;
    }

    extern void sipVH__adv_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__adv_19(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxBitmapComboBox::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,SIP_NULLPTR,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__adv_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__adv_19(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxBitmapComboBox::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::DoEnable(enable);
        return;
    }

    extern void sipVH__adv_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__adv_14(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxBitmapComboBox::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxBitmapComboBox::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__adv_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_7(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::OnInternalIdle();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::InitDialog();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::InheritAttributes();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_Destroy);

    if (!sipMeth)
        return  ::wxBitmapComboBox::Destroy();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::wxBitmapComboBox::Validate();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxBitmapComboBox::TransferDataToWindow();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,SIP_NULLPTR,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxBitmapComboBox::TransferDataFromWindow();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBitmapComboBox::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,SIP_NULLPTR,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::SetValidator(validator);
        return;
    }

    extern void sipVH__adv_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__adv_18(sipGILState, 0, sipPySelf, sipMeth, validator);
}

 ::wxValidator* sipwxBitmapComboBox::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,SIP_NULLPTR,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxBitmapComboBox::GetValidator();

    extern  ::wxValidator* sipVH__adv_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_17(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,SIP_NULLPTR,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxBitmapComboBox::ShouldInheritColours();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,SIP_NULLPTR,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxBitmapComboBox::HasTransparentBackground();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxBitmapComboBox::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,SIP_NULLPTR,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxBitmapComboBox::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__adv_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,SIP_NULLPTR,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxBitmapComboBox::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__adv_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__adv_15(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxBitmapComboBox::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,SIP_NULLPTR,sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__adv_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__adv_14(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

void sipwxBitmapComboBox::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,SIP_NULLPTR,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__adv_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__adv_14(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxBitmapComboBox::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxBitmapComboBox::AcceptsFocusRecursively();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxBitmapComboBox::AcceptsFocusFromKeyboard();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxBitmapComboBox::AcceptsFocus();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxBitmapComboBox::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxBitmapComboBox::TryAfter(event);

    extern bool sipVH__adv_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__adv_13(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxBitmapComboBox::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxBitmapComboBox::TryBefore(event);

    extern bool sipVH__adv_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__adv_13(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxBitmapComboBox::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxBitmapComboBox::ProcessEvent(event);

    extern bool sipVH__adv_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__adv_13(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxBitmapComboBox::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,SIP_NULLPTR,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::AddChild(child);
        return;
    }

    extern void sipVH__adv_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__adv_12(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxBitmapComboBox::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,SIP_NULLPTR,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxBitmapComboBox::RemoveChild(child);
        return;
    }

    extern void sipVH__adv_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__adv_12(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxBitmapComboBox::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxBitmapComboBox::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxBitmapComboBox::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxBitmapComboBox::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxBitmapComboBox::DoEnable(enable) : DoEnable(enable));
}

void sipwxBitmapComboBox::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxBitmapComboBox::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxBitmapComboBox::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxBitmapComboBox::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxBitmapComboBox::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxBitmapComboBox::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxBitmapComboBox::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxBitmapComboBox::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxBitmapComboBox::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxBitmapComboBox::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxBitmapComboBox::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxBitmapComboBox::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxBitmapComboBox::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxBitmapComboBox::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxBitmapComboBox::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxBitmapComboBox::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxBitmapComboBox::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxBitmapComboBox::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxBitmapComboBox::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxBitmapComboBox::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxBitmapComboBox::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxBitmapComboBox::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxBitmapComboBox::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxBitmapComboBox::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxBitmapComboBox::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxBitmapComboBox::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxBitmapComboBox::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxBitmapComboBox::DoFreeze() : DoFreeze());
}

void sipwxBitmapComboBox::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxBitmapComboBox::DoThaw() : DoThaw());
}

bool sipwxBitmapComboBox::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxBitmapComboBox::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxBitmapComboBox::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxBitmapComboBox::TryBefore(event) : TryBefore(event));
}

bool sipwxBitmapComboBox::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxBitmapComboBox::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxBitmapComboBox_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxBitmapComboBox_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_Append, "Append(item, bitmap=wx.NullBitmap) -> int\n"
"Append(item, bitmap, clientData) -> int\n"
"\n"
"Adds the item to the end of the combo box.\n"
"");

extern "C" {static PyObject *meth_wxBitmapComboBox_Append(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_Append(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* item;
        int itemState = 0;
        const  ::wxBitmap& bitmapdef = wxNullBitmap;
        const  ::wxBitmap* bitmap = &bitmapdef;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J9", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxString,&item, &itemState, sipType_wxBitmap, &bitmap))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Append(*item,*bitmap);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(item),sipType_wxString,itemState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::wxString* item;
        int itemState = 0;
        const  ::wxBitmap* bitmap;
         ::wxClientData* clientData;
        int clientDataState = 0;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_bitmap,
            sipName_clientData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9J2", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxString,&item, &itemState, sipType_wxBitmap, &bitmap, sipType_wxClientData,&clientData, &clientDataState))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Append(*item,*bitmap,clientData);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(item),sipType_wxString,itemState);
            sipReleaseType(clientData,sipType_wxClientData,clientDataState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_Append, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_Create, "Create(parent, id=wx.ID_ANY, value=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, choices=[], style=0, validator=wx.DefaultValidator, name=BitmapComboBoxNameStr) -> bool\n"
"\n"
"Creates the combobox for two-step construction.");

extern "C" {static PyObject *meth_wxBitmapComboBox_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxString& valuedef = wxEmptyString;
        const  ::wxString* value = &valuedef;
        int valueState = 0;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        const  ::wxArrayString& choicesdef = wxArrayString();
        const  ::wxArrayString* choices = &choicesdef;
        int choicesState = 0;
        long style = 0;
        const  ::wxValidator& validatordef = wxDefaultValidator;
        const  ::wxValidator* validator = &validatordef;
        const  ::wxString& namedef = wxBitmapComboBoxNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_value,
            sipName_pos,
            sipName_size,
            sipName_choices,
            sipName_style,
            sipName_validator,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|iJ1J1J1J1lJ9J1", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxString,&value, &valueState, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, sipType_wxArrayString,&choices, &choicesState, &style, sipType_wxValidator, &validator, sipType_wxString,&name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*value,*pos,*size,*choices,style,*validator,*name);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxString *>(value),sipType_wxString,valueState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxArrayString *>(choices),sipType_wxArrayString,choicesState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetBitmapSize, "GetBitmapSize() -> wx.Size\n"
"\n"
"Returns the size of the bitmaps used in the combo box.");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetBitmapSize(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetBitmapSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetBitmapSize());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetBitmapSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetItemBitmap, "GetItemBitmap(n) -> wx.Bitmap\n"
"\n"
"Returns the bitmap of the item with the given index.");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetItemBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetItemBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint n;
        const  ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &n))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetItemBitmap(n));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetItemBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_Insert, "Insert(item, bitmap, pos) -> int\n"
"Insert(item, bitmap, pos, clientData) -> int\n"
"\n"
"Inserts the item into the list before pos.\n"
"");

extern "C" {static PyObject *meth_wxBitmapComboBox_Insert(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_Insert(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* item;
        int itemState = 0;
        const  ::wxBitmap* bitmap;
        uint pos;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_bitmap,
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9u", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxString,&item, &itemState, sipType_wxBitmap, &bitmap, &pos))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Insert(*item,*bitmap,pos);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(item),sipType_wxString,itemState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::wxString* item;
        int itemState = 0;
        const  ::wxBitmap* bitmap;
        uint pos;
         ::wxClientData* clientData;
        int clientDataState = 0;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_bitmap,
            sipName_pos,
            sipName_clientData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9uJ2", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxString,&item, &itemState, sipType_wxBitmap, &bitmap, &pos, sipType_wxClientData,&clientData, &clientDataState))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Insert(*item,*bitmap,pos,clientData);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(item),sipType_wxString,itemState);
            sipReleaseType(clientData,sipType_wxClientData,clientDataState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_Insert, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_SetItemBitmap, "SetItemBitmap(n, bitmap)\n"
"\n"
"Sets the bitmap for the given item.");

extern "C" {static PyObject *meth_wxBitmapComboBox_SetItemBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_SetItemBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint n;
        const  ::wxBitmap* bitmap;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BuJ9", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &n, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemBitmap(n,*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_SetItemBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetClientAreaOrigin, doc_wxBitmapComboBox_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxBitmapComboBox_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_Validate, doc_wxBitmapComboBox_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxBitmapComboBox_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_TransferDataToWindow, doc_wxBitmapComboBox_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxBitmapComboBox_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_TransferDataFromWindow, doc_wxBitmapComboBox_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxBitmapComboBox_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_InitDialog, doc_wxBitmapComboBox_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxBitmapComboBox_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_AcceptsFocus, doc_wxBitmapComboBox_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxBitmapComboBox_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_AcceptsFocusRecursively, doc_wxBitmapComboBox_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxBitmapComboBox_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_AcceptsFocusFromKeyboard, doc_wxBitmapComboBox_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxBitmapComboBox_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_AddChild, doc_wxBitmapComboBox_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxBitmapComboBox_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_RemoveChild, doc_wxBitmapComboBox_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxBitmapComboBox_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_InheritAttributes, doc_wxBitmapComboBox_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxBitmapComboBox_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_ShouldInheritColours, doc_wxBitmapComboBox_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxBitmapComboBox_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_OnInternalIdle, doc_wxBitmapComboBox_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetMainWindowOfCompositeControl, doc_wxBitmapComboBox_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxBitmapComboBox_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_InformFirstDirection, doc_wxBitmapComboBox_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxBitmapComboBox_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_SetCanFocus, doc_wxBitmapComboBox_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxBitmapComboBox_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_Destroy, doc_wxBitmapComboBox_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxBitmapComboBox_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_SetValidator, doc_wxBitmapComboBox_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetValidator, doc_wxBitmapComboBox_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth_wxBitmapComboBox_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_EnableVisibleFocus, doc_wxBitmapComboBox_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxBitmapComboBox_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_ProcessEvent, doc_wxBitmapComboBox_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoEnable, doc_wxBitmapComboBox_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxBitmapComboBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoGetPosition, doc_wxBitmapComboBox_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxBitmapComboBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoGetSize, doc_wxBitmapComboBox_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxBitmapComboBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoGetClientSize, doc_wxBitmapComboBox_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoGetBestSize, doc_wxBitmapComboBox_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoGetBestClientSize, doc_wxBitmapComboBox_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoSetSize, doc_wxBitmapComboBox_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoSetClientSize, doc_wxBitmapComboBox_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoSetSizeHints, doc_wxBitmapComboBox_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoGetBorderSize(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoGetBorderSize, doc_wxBitmapComboBox_DoGetBorderSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoMoveWindow, doc_wxBitmapComboBox_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoSetWindowVariant, doc_wxBitmapComboBox_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetDefaultBorder, doc_wxBitmapComboBox_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetDefaultBorderForControl, doc_wxBitmapComboBox_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoFreeze, doc_wxBitmapComboBox_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxBitmapComboBox_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_DoThaw, doc_wxBitmapComboBox_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxBitmapComboBox_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_HasTransparentBackground, doc_wxBitmapComboBox_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxBitmapComboBox_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_TryBefore, doc_wxBitmapComboBox_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxBitmapComboBox_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_TryAfter, doc_wxBitmapComboBox_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxBitmapComboBox::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetInsertionPoint, "GetInsertionPoint() -> long\n"
"\n"
"Same as wxTextEntry::GetInsertionPoint().");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetInsertionPoint(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetInsertionPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetInsertionPoint();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetInsertionPoint, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_IsListEmpty, "IsListEmpty() -> bool\n"
"\n"
"Returns true if the list of combobox choices is empty.");

extern "C" {static PyObject *meth_wxBitmapComboBox_IsListEmpty(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_IsListEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsListEmpty();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_IsListEmpty, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_IsTextEmpty, "IsTextEmpty() -> bool\n"
"\n"
"Returns true if the text of the combobox is empty.");

extern "C" {static PyObject *meth_wxBitmapComboBox_IsTextEmpty(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_IsTextEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsTextEmpty();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_IsTextEmpty, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_SetSelection, "SetSelection(from_, to_)\n"
"SetSelection(n)\n"
"\n"
"Same as wxTextEntry::SetSelection().\n"
"");

extern "C" {static PyObject *meth_wxBitmapComboBox_SetSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_SetSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long from_;
        long to_;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_from_,
            sipName_to_,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bll", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &from_, &to_))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSelection(from_,to_);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int n;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &n))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::SetSelection(n) : sipCpp->SetSelection(n));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_SetSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_SetTextSelection, "SetTextSelection(from_, to_)\n"
"\n"
"Same as wxTextEntry::SetSelection().");

extern "C" {static PyObject *meth_wxBitmapComboBox_SetTextSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_SetTextSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long from_;
        long to_;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_from_,
            sipName_to_,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bll", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &from_, &to_))
        {
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxBitmapComboBox_SetTextSelection(sipCpp, from_, to_);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_SetTextSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_SetValue, "SetValue(text)\n"
"\n"
"Sets the text for the combobox text field.");

extern "C" {static PyObject *meth_wxBitmapComboBox_SetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_SetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* text;
        int textState = 0;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxString,&text, &textState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetValue(*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_SetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_Popup, "Popup()\n"
"\n"
"Shows the list box portion of the combo box.");

extern "C" {static PyObject *meth_wxBitmapComboBox_Popup(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_Popup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Popup();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_Popup, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_Dismiss, "Dismiss()\n"
"\n"
"Hides the list box portion of the combo box.");

extern "C" {static PyObject *meth_wxBitmapComboBox_Dismiss(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_Dismiss(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Dismiss();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_Dismiss, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetSelection, "GetSelection() -> int\n"
"\n"
"Returns the index of the selected item or wxNOT_FOUND if no item is\n"
"selected.");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetSelection(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::GetSelection() : sipCpp->GetSelection());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetTextSelection, "GetTextSelection() -> (from, to)\n"
"\n"
"Gets the current selection span.");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetTextSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetTextSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long from;
        long to;
        const  ::wxBitmapComboBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->GetSelection(&from,&to);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ll)",from,to);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetTextSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_FindString, "FindString(string, caseSensitive=False) -> int\n"
"\n"
"Finds an item whose label matches the given string.");

extern "C" {static PyObject *meth_wxBitmapComboBox_FindString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_FindString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* string;
        int stringState = 0;
        bool caseSensitive = 0;
        const  ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_string,
            sipName_caseSensitive,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|b", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, sipType_wxString,&string, &stringState, &caseSensitive))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::FindString(*string,caseSensitive) : sipCpp->FindString(*string,caseSensitive));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(string),sipType_wxString,stringState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_FindString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetString, "GetString(n) -> String\n"
"\n"
"Returns the label of the item with the given index.");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        uint n;
        const  ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &n))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::GetString(n) : sipCpp->GetString(n)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_SetString, "SetString(n, text)\n"
"\n"
"Changes the text of the specified combobox item.");

extern "C" {static PyObject *meth_wxBitmapComboBox_SetString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_SetString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        uint n;
        const  ::wxString* text;
        int textState = 0;
         ::wxBitmapComboBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BuJ1", &sipSelf, sipType_wxBitmapComboBox, &sipCpp, &n, sipType_wxString,&text, &textState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::SetString(n,*text) : sipCpp->SetString(n,*text));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_SetString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetCount, "GetCount() -> unsignedint\n"
"\n"
"Returns the number of items in the control.");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetCount(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxBitmapComboBox::GetCount() : sipCpp->GetCount());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBitmapComboBox_GetStringSelection, "GetStringSelection(self) -> object");

extern "C" {static PyObject *meth_wxBitmapComboBox_GetStringSelection(PyObject *, PyObject *);}
static PyObject *meth_wxBitmapComboBox_GetStringSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxBitmapComboBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBitmapComboBox, &sipCpp))
        {
             ::wxString*sipRes = 0;

                sipRes = new wxString(sipCpp->wxItemContainerImmutable::GetStringSelection());

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BitmapComboBox, sipName_GetStringSelection, doc_wxBitmapComboBox_GetStringSelection);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxBitmapComboBox(void *, const sipTypeDef *);}
static void *cast_wxBitmapComboBox(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxBitmapComboBox *sipCpp = reinterpret_cast< ::wxBitmapComboBox *>(sipCppV);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    if (targetType == sipType_wxTextEntry)
        return static_cast< ::wxTextEntry *>(sipCpp);

    if (targetType == sipType_wxItemContainer)
        return static_cast< ::wxItemContainer *>(sipCpp);

    if (targetType == sipType_wxItemContainerImmutable)
        return static_cast< ::wxItemContainerImmutable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxBitmapComboBox(void *, int);}
static void release_wxBitmapComboBox(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxBitmapComboBox *>(sipCppV);
    else
        delete reinterpret_cast< ::wxBitmapComboBox *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxBitmapComboBox(Py_ssize_t);}
static void *array_wxBitmapComboBox(Py_ssize_t sipNrElem)
{
    return new  ::wxBitmapComboBox[sipNrElem];
}


extern "C" {static void dealloc_wxBitmapComboBox(sipSimpleWrapper *);}
static void dealloc_wxBitmapComboBox(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxBitmapComboBox *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxBitmapComboBox(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxBitmapComboBox(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxBitmapComboBox(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxBitmapComboBox *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxBitmapComboBox();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxString& valuedef = wxEmptyString;
        const  ::wxString* value = &valuedef;
        int valueState = 0;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        const  ::wxArrayString& choicesdef = wxArrayString();
        const  ::wxArrayString* choices = &choicesdef;
        int choicesState = 0;
        long style = 0;
        const  ::wxValidator& validatordef = wxDefaultValidator;
        const  ::wxValidator* validator = &validatordef;
        const  ::wxString& namedef = wxBitmapComboBoxNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_value,
            sipName_pos,
            sipName_size,
            sipName_choices,
            sipName_style,
            sipName_validator,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1J1J1lJ9J1", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxString,&value, &valueState, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, sipType_wxArrayString,&choices, &choicesState, &style, sipType_wxValidator, &validator, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxBitmapComboBox(parent,id,*value,*pos,*size,*choices,style,*validator,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(value),sipType_wxString,valueState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxArrayString *>(choices),sipType_wxArrayString,choicesState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxBitmapComboBox[] = {{14, 0, 0}, {54, 0, 0}, {31, 0, 1}};


static PyMethodDef methods_wxBitmapComboBox[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxBitmapComboBox_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxBitmapComboBox_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxBitmapComboBox_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), SIP_MLMETH_CAST(meth_wxBitmapComboBox_AddChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_AddChild)},
    {SIP_MLNAME_CAST(sipName_Append), SIP_MLMETH_CAST(meth_wxBitmapComboBox_Append), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_Append)},
    {SIP_MLNAME_CAST(sipName_Create), SIP_MLMETH_CAST(meth_wxBitmapComboBox_Create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_Create)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxBitmapComboBox_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_Destroy)},
    {SIP_MLNAME_CAST(sipName_Dismiss), meth_wxBitmapComboBox_Dismiss, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_Dismiss)},
    {SIP_MLNAME_CAST(sipName_DoEnable), SIP_MLMETH_CAST(meth_wxBitmapComboBox_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), meth_wxBitmapComboBox_DoFreeze, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), meth_wxBitmapComboBox_DoGetBestClientSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), meth_wxBitmapComboBox_DoGetBestSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), meth_wxBitmapComboBox_DoGetBorderSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), SIP_MLMETH_CAST(meth_wxBitmapComboBox_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), SIP_MLMETH_CAST(meth_wxBitmapComboBox_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), SIP_MLMETH_CAST(meth_wxBitmapComboBox_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), SIP_MLMETH_CAST(meth_wxBitmapComboBox_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), SIP_MLMETH_CAST(meth_wxBitmapComboBox_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), SIP_MLMETH_CAST(meth_wxBitmapComboBox_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), SIP_MLMETH_CAST(meth_wxBitmapComboBox_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), SIP_MLMETH_CAST(meth_wxBitmapComboBox_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), meth_wxBitmapComboBox_DoThaw, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EnableVisibleFocus), SIP_MLMETH_CAST(meth_wxBitmapComboBox_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_EnableVisibleFocus)},
    {SIP_MLNAME_CAST(sipName_FindString), SIP_MLMETH_CAST(meth_wxBitmapComboBox_FindString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_FindString)},
    {SIP_MLNAME_CAST(sipName_GetBitmapSize), meth_wxBitmapComboBox_GetBitmapSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetBitmapSize)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), SIP_MLMETH_CAST(meth_wxBitmapComboBox_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxBitmapComboBox_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetCount), meth_wxBitmapComboBox_GetCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetCount)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), meth_wxBitmapComboBox_GetDefaultBorder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), meth_wxBitmapComboBox_GetDefaultBorderForControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetInsertionPoint), meth_wxBitmapComboBox_GetInsertionPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetInsertionPoint)},
    {SIP_MLNAME_CAST(sipName_GetItemBitmap), SIP_MLMETH_CAST(meth_wxBitmapComboBox_GetItemBitmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetItemBitmap)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxBitmapComboBox_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetSelection), meth_wxBitmapComboBox_GetSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetSelection)},
    {SIP_MLNAME_CAST(sipName_GetString), SIP_MLMETH_CAST(meth_wxBitmapComboBox_GetString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetString)},
    {SIP_MLNAME_CAST(sipName_GetStringSelection), meth_wxBitmapComboBox_GetStringSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetStringSelection)},
    {SIP_MLNAME_CAST(sipName_GetTextSelection), SIP_MLMETH_CAST(meth_wxBitmapComboBox_GetTextSelection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetTextSelection)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxBitmapComboBox_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_GetValidator)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), meth_wxBitmapComboBox_HasTransparentBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), SIP_MLMETH_CAST(meth_wxBitmapComboBox_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxBitmapComboBox_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxBitmapComboBox_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_InitDialog)},
    {SIP_MLNAME_CAST(sipName_Insert), SIP_MLMETH_CAST(meth_wxBitmapComboBox_Insert), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_Insert)},
    {SIP_MLNAME_CAST(sipName_IsListEmpty), meth_wxBitmapComboBox_IsListEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_IsListEmpty)},
    {SIP_MLNAME_CAST(sipName_IsTextEmpty), meth_wxBitmapComboBox_IsTextEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_IsTextEmpty)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxBitmapComboBox_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_Popup), meth_wxBitmapComboBox_Popup, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_Popup)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), SIP_MLMETH_CAST(meth_wxBitmapComboBox_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), SIP_MLMETH_CAST(meth_wxBitmapComboBox_RemoveChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), meth_wxBitmapComboBox_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), SIP_MLMETH_CAST(meth_wxBitmapComboBox_SetCanFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetItemBitmap), SIP_MLMETH_CAST(meth_wxBitmapComboBox_SetItemBitmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_SetItemBitmap)},
    {SIP_MLNAME_CAST(sipName_SetSelection), SIP_MLMETH_CAST(meth_wxBitmapComboBox_SetSelection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_SetSelection)},
    {SIP_MLNAME_CAST(sipName_SetString), SIP_MLMETH_CAST(meth_wxBitmapComboBox_SetString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_SetString)},
    {SIP_MLNAME_CAST(sipName_SetTextSelection), SIP_MLMETH_CAST(meth_wxBitmapComboBox_SetTextSelection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_SetTextSelection)},
    {SIP_MLNAME_CAST(sipName_SetValidator), SIP_MLMETH_CAST(meth_wxBitmapComboBox_SetValidator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_SetValidator)},
    {SIP_MLNAME_CAST(sipName_SetValue), SIP_MLMETH_CAST(meth_wxBitmapComboBox_SetValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_SetValue)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxBitmapComboBox_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxBitmapComboBox_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxBitmapComboBox_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth_wxBitmapComboBox_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth_wxBitmapComboBox_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxBitmapComboBox_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBitmapComboBox_Validate)}
};

sipVariableDef variables_wxBitmapComboBox[] = {
    {PropertyVariable, sipName_Selection, &methods_wxBitmapComboBox[33], &methods_wxBitmapComboBox[52], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_InsertionPoint, &methods_wxBitmapComboBox[30], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Count, &methods_wxBitmapComboBox[27], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BitmapSize, &methods_wxBitmapComboBox[24], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxBitmapComboBox, "BitmapComboBox()\n"
"BitmapComboBox(parent, id=wx.ID_ANY, value=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, choices=[], style=0, validator=wx.DefaultValidator, name=BitmapComboBoxNameStr)\n"
"\n"
"A combobox that displays bitmap in front of the list items.");


sipClassTypeDef sipTypeDef__adv_wxBitmapComboBox = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxBitmapComboBox,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_BitmapComboBox,
        {0, 0, 1},
        63, methods_wxBitmapComboBox,
        0, SIP_NULLPTR,
        4, variables_wxBitmapComboBox,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxBitmapComboBox,
    -1,
    -1,
    supers_wxBitmapComboBox,
    SIP_NULLPTR,
    init_type_wxBitmapComboBox,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxBitmapComboBox,
    SIP_NULLPTR,
    array_wxBitmapComboBox,
    SIP_NULLPTR,
    release_wxBitmapComboBox,
    cast_wxBitmapComboBox,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
