/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_richtext.h"

        #include <wx/richtext/richtextformatdlg.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/colourdata.h>
        #include <wx/richtext/richtextformatdlg.h>
        #include <wx/richtext/richtextstyles.h>
        #include <wx/textctrl.h>
        #include <wx/richtext/richtextstyles.h>
        #include <wx/imaglist.h>
        #include <wx/richtext/richtextctrl.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/bookctrl.h>
        #include <wx/sizer.h>
        #include <wx/dialog.h>
        #include <wx/iconbndl.h>
        #include <wx/icon.h>
        #include <wx/sizer.h>
        #include <wx/toplevel.h>
            #include <wx/toplevel.h>
        #include <wx/region.h>
        #include <wx/graphics.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxRichTextFormattingDialog : public  ::wxRichTextFormattingDialog
{
public:
    sipwxRichTextFormattingDialog();
    sipwxRichTextFormattingDialog(long, ::wxWindow*,const  ::wxString&, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long);
    virtual ~sipwxRichTextFormattingDialog();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxWindow* GetContentWindow() const SIP_OVERRIDE;
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
     ::wxSize DoGetBorderSize() const SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;
    bool ShouldPreventAppExit() const SIP_OVERRIDE;
    void AddBookCtrl( ::wxSizer*) SIP_OVERRIDE;
     ::wxBookCtrlBase* CreateBookCtrl() SIP_OVERRIDE;
    void CreateButtons(int) SIP_OVERRIDE;
    void LayoutDialog(int) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRichTextFormattingDialog(const sipwxRichTextFormattingDialog &);
    sipwxRichTextFormattingDialog &operator = (const sipwxRichTextFormattingDialog &);

    char sipPyMethods[46];
};

sipwxRichTextFormattingDialog::sipwxRichTextFormattingDialog():  ::wxRichTextFormattingDialog(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextFormattingDialog::sipwxRichTextFormattingDialog(long flags, ::wxWindow*parent,const  ::wxString& title, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& sz,long style):  ::wxRichTextFormattingDialog(flags,parent,title,id,pos,sz,style), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextFormattingDialog::~sipwxRichTextFormattingDialog()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxWindow* sipwxRichTextFormattingDialog::GetContentWindow() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_GetContentWindow);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::GetContentWindow();

    extern  ::wxWindow* sipVH__richtext_134(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_134(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextFormattingDialog::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::RemoveChild(child);
        return;
    }

    extern void sipVH__richtext_129(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__richtext_129(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxRichTextFormattingDialog::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::AddChild(child);
        return;
    }

    extern void sipVH__richtext_129(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__richtext_129(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sipwxRichTextFormattingDialog::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::ProcessEvent(event);

    extern bool sipVH__richtext_130(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__richtext_130(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxRichTextFormattingDialog::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::TryBefore(event);

    extern bool sipVH__richtext_130(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__richtext_130(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxRichTextFormattingDialog::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::TryAfter(event);

    extern bool sipVH__richtext_130(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__richtext_130(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxRichTextFormattingDialog::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::AcceptsFocus();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextFormattingDialog::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::AcceptsFocusFromKeyboard();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextFormattingDialog::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::AcceptsFocusRecursively();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextFormattingDialog::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__richtext_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__richtext_33(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

void sipwxRichTextFormattingDialog::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__richtext_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__richtext_33(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

bool sipwxRichTextFormattingDialog::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__richtext_131(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__richtext_131(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

 ::wxPoint sipwxRichTextFormattingDialog::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__richtext_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_22(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextFormattingDialog::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::HasTransparentBackground();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextFormattingDialog::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::ShouldInheritColours();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxValidator* sipwxRichTextFormattingDialog::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::GetValidator();

    extern  ::wxValidator* sipVH__richtext_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_132(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextFormattingDialog::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::SetValidator(validator);
        return;
    }

    extern void sipVH__richtext_133(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__richtext_133(sipGILState, 0, sipPySelf, sipMeth, validator);
}

bool sipwxRichTextFormattingDialog::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::TransferDataFromWindow();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextFormattingDialog::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::TransferDataToWindow();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextFormattingDialog::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::Validate();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextFormattingDialog::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_Destroy);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::Destroy();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextFormattingDialog::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::InheritAttributes();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextFormattingDialog::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::InitDialog();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextFormattingDialog::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::OnInternalIdle();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sipwxRichTextFormattingDialog::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__richtext_134(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_134(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextFormattingDialog::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::DoEnable(enable);
        return;
    }

    extern void sipVH__richtext_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__richtext_33(sipGILState, 0, sipPySelf, sipMeth, enable);
}

void sipwxRichTextFormattingDialog::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,SIP_NULLPTR,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__richtext_135(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__richtext_135(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxRichTextFormattingDialog::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::DoGetSize(width,height);
        return;
    }

    extern void sipVH__richtext_135(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__richtext_135(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxRichTextFormattingDialog::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,SIP_NULLPTR,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__richtext_135(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__richtext_135(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxRichTextFormattingDialog::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__richtext_136(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__richtext_136(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxRichTextFormattingDialog::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__richtext_137(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__richtext_137(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxRichTextFormattingDialog::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__richtext_138(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__richtext_138(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

 ::wxSize sipwxRichTextFormattingDialog::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,SIP_NULLPTR,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::DoGetBorderSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextFormattingDialog::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__richtext_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__richtext_29(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sipwxRichTextFormattingDialog::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__richtext_139(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__richtext_139(sipGILState, 0, sipPySelf, sipMeth, variant);
}

 ::wxBorder sipwxRichTextFormattingDialog::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::GetDefaultBorder();

    extern  ::wxBorder sipVH__richtext_140(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_140(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxRichTextFormattingDialog::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__richtext_140(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_140(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextFormattingDialog::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::DoFreeze();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextFormattingDialog::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::DoThaw();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxRichTextFormattingDialog::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::DoGetBestSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxRichTextFormattingDialog::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::DoGetBestClientSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextFormattingDialog::ShouldPreventAppExit() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,SIP_NULLPTR,sipName_ShouldPreventAppExit);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::ShouldPreventAppExit();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextFormattingDialog::AddBookCtrl( ::wxSizer*sizer)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,SIP_NULLPTR,sipName_AddBookCtrl);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::AddBookCtrl(sizer);
        return;
    }

    extern void sipVH__richtext_165(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxSizer*);

    sipVH__richtext_165(sipGILState, 0, sipPySelf, sipMeth, sizer);
}

 ::wxBookCtrlBase* sipwxRichTextFormattingDialog::CreateBookCtrl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,SIP_NULLPTR,sipName_CreateBookCtrl);

    if (!sipMeth)
        return  ::wxRichTextFormattingDialog::CreateBookCtrl();

    extern  ::wxBookCtrlBase* sipVH__richtext_164(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_164(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextFormattingDialog::CreateButtons(int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,SIP_NULLPTR,sipName_CreateButtons);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::CreateButtons(flags);
        return;
    }

    extern void sipVH__richtext_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__richtext_28(sipGILState, 0, sipPySelf, sipMeth, flags);
}

void sipwxRichTextFormattingDialog::LayoutDialog(int centreFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,SIP_NULLPTR,sipName_LayoutDialog);

    if (!sipMeth)
    {
         ::wxRichTextFormattingDialog::LayoutDialog(centreFlags);
        return;
    }

    extern void sipVH__richtext_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__richtext_28(sipGILState, 0, sipPySelf, sipMeth, centreFlags);
}

void sipwxRichTextFormattingDialog::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxRichTextFormattingDialog::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxRichTextFormattingDialog::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxRichTextFormattingDialog::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoEnable(enable) : DoEnable(enable));
}

void sipwxRichTextFormattingDialog::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxRichTextFormattingDialog::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxRichTextFormattingDialog::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxRichTextFormattingDialog::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxRichTextFormattingDialog::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxRichTextFormattingDialog::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxRichTextFormattingDialog::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxRichTextFormattingDialog::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxRichTextFormattingDialog::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxRichTextFormattingDialog::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxRichTextFormattingDialog::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxRichTextFormattingDialog::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRichTextFormattingDialog::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxRichTextFormattingDialog::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRichTextFormattingDialog::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxRichTextFormattingDialog::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoFreeze() : DoFreeze());
}

void sipwxRichTextFormattingDialog::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxRichTextFormattingDialog::DoThaw() : DoThaw());
}

bool sipwxRichTextFormattingDialog::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxRichTextFormattingDialog::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxRichTextFormattingDialog::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxRichTextFormattingDialog::TryBefore(event) : TryBefore(event));
}

bool sipwxRichTextFormattingDialog::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxRichTextFormattingDialog::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetAttributes, "GetAttributes() -> wx.TextAttr\n"
"\n"
"Gets the attributes being edited.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
             ::wxTextAttr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetAttributes();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxTextAttr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_ApplyStyle, "ApplyStyle(ctrl, range, flags=RICHTEXT_SETSTYLE_WITH_UNDO|RICHTEXT_SETSTYLE_OPTIMIZE) -> bool\n"
"\n"
"Apply attributes to the given range, only changing attributes that\n"
"need to be changed.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_ApplyStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_ApplyStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextCtrl* ctrl;
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO|wxRICHTEXT_SETSTYLE_OPTIMIZE;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ctrl,
            sipName_range,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1|i", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, sipType_wxRichTextCtrl, &ctrl, sipType_wxRichTextRange, &range, &rangeState, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ApplyStyle(ctrl,*range,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_ApplyStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_Create, "Create(flags, parent, title=wx.GetTranslation(\"Formatting\"), id=wx.ID_ANY, pos=wx.DefaultPosition, sz=wx.DefaultSize, style=wx.DEFAULT_DIALOG_STYLE) -> bool\n"
"\n"
"Creation: see wxRichTextFormattingDialog() \"the constructor\" for\n"
"details about the parameters.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long flags;
         ::wxWindow* parent;
        const  ::wxString& titledef = wxGetTranslation("Formatting");
        const  ::wxString* title = &titledef;
        int titleState = 0;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& szdef = wxDefaultSize;
        const  ::wxSize* sz = &szdef;
        int szState = 0;
        long style = wxDEFAULT_DIALOG_STYLE;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
            sipName_parent,
            sipName_title,
            sipName_id,
            sipName_pos,
            sipName_sz,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ8|J1iJ1J1l", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, &flags, sipType_wxWindow, &parent, sipType_wxString,&title, &titleState, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &sz, &szState, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(flags,parent,*title,id,*pos,*sz,style);
            Py_END_ALLOW_THREADS

            sipTransferTo(sipSelf, SIP_NULLPTR);
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(sz),sipType_wxSize,szState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetImageList, "GetImageList() -> wx.ImageList\n"
"\n"
"Returns the image list associated with the dialog, used for example if\n"
"showing the dialog as a toolbook.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetImageList(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetImageList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
             ::wxImageList*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetImageList();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxImageList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetImageList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetStyle, "GetStyle(ctrl, range) -> bool\n"
"\n"
"Gets common attributes from the given range and calls SetAttributes().");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextCtrl* ctrl;
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ctrl,
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, sipType_wxRichTextCtrl, &ctrl, sipType_wxRichTextRange, &range, &rangeState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetStyle(ctrl,*range);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetStyleDefinition, "GetStyleDefinition() -> RichTextStyleDefinition\n"
"\n"
"Gets the associated style definition, if any.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetStyleDefinition(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetStyleDefinition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
             ::wxRichTextStyleDefinition*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetStyleDefinition();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextStyleDefinition,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetStyleDefinition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetStyleSheet, "GetStyleSheet() -> RichTextStyleSheet\n"
"\n"
"Gets the associated style sheet, if any.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetStyleSheet(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetStyleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
             ::wxRichTextStyleSheet*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetStyleSheet();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextStyleSheet,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetStyleSheet, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_SetAttributes, "SetAttributes(attr)\n"
"\n"
"Sets the attributes to be edited.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_SetAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_SetAttributes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxTextAttr* attr;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_attr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, sipType_wxTextAttr, &attr))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetAttributes(*attr);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_SetAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_SetOptions, "SetOptions(options)\n"
"\n"
"Sets the dialog options, determining what the interface presents to\n"
"the user.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_SetOptions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_SetOptions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int options;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, &options))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetOptions(options);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_SetOptions, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetOptions, "GetOptions() -> int\n"
"\n"
"Gets the dialog options, determining what the interface presents to\n"
"the user.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetOptions(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetOptions();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetOptions, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_HasOption, "HasOption(option) -> bool\n"
"\n"
"Returns true if the given option is present.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_HasOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_HasOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int option;
        const  ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_option,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, &option))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasOption(option);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_HasOption, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_SetImageList, "SetImageList(imageList)\n"
"\n"
"Sets the image list associated with the dialog's property sheet.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_SetImageList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_SetImageList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxImageList* imageList;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_imageList,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, sipType_wxImageList, &imageList))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetImageList(imageList);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_SetImageList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_SetStyle, "SetStyle(style, update=True) -> bool\n"
"\n"
"Sets the attributes and optionally updates the display, if update is\n"
"true.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_SetStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_SetStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxTextAttr* style;
        bool update = 1;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_style,
            sipName_update,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|b", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, sipType_wxTextAttr, &style, &update))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetStyle(*style,update);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_SetStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_SetStyleDefinition, "SetStyleDefinition(styleDef, sheet, update=True) -> bool\n"
"\n"
"Sets the style definition and optionally update the display, if update\n"
"is true.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_SetStyleDefinition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_SetStyleDefinition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextStyleDefinition* styleDef;
         ::wxRichTextStyleSheet* sheet;
        bool update = 1;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_styleDef,
            sipName_sheet,
            sipName_update,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J8|b", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, sipType_wxRichTextStyleDefinition, &styleDef, sipType_wxRichTextStyleSheet, &sheet, &update))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetStyleDefinition(*styleDef,sheet,update);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_SetStyleDefinition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_UpdateDisplay, "UpdateDisplay() -> bool\n"
"\n"
"Updates the display.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_UpdateDisplay(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_UpdateDisplay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->UpdateDisplay();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_UpdateDisplay, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetDialog, "GetDialog(win) -> RichTextFormattingDialog\n"
"\n"
"Helper for pages to get the top-level dialog.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetDialog(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetDialog(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* win;

        static const char *sipKwdList[] = {
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8", sipType_wxWindow, &win))
        {
             ::wxRichTextFormattingDialog*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextFormattingDialog::GetDialog(win);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextFormattingDialog,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetDialog, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetDialogAttributes, "GetDialogAttributes(win) -> wx.TextAttr\n"
"\n"
"Helper for pages to get the attributes.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetDialogAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetDialogAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* win;

        static const char *sipKwdList[] = {
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8", sipType_wxWindow, &win))
        {
             ::wxTextAttr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextFormattingDialog::GetDialogAttributes(win);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxTextAttr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetDialogAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetDialogStyleDefinition, "GetDialogStyleDefinition(win) -> RichTextStyleDefinition\n"
"\n"
"Helper for pages to get the style.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetDialogStyleDefinition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetDialogStyleDefinition(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* win;

        static const char *sipKwdList[] = {
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8", sipType_wxWindow, &win))
        {
             ::wxRichTextStyleDefinition*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextFormattingDialog::GetDialogStyleDefinition(win);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextStyleDefinition,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetDialogStyleDefinition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetFormattingDialogFactory, "GetFormattingDialogFactory() -> RichTextFormattingDialogFactory\n"
"\n"
"Returns the object to be used to customize the dialog and provide\n"
"pages.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetFormattingDialogFactory(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetFormattingDialogFactory(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxRichTextFormattingDialogFactory*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextFormattingDialog::GetFormattingDialogFactory();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextFormattingDialogFactory,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetFormattingDialogFactory, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_SetFormattingDialogFactory, "SetFormattingDialogFactory(factory)\n"
"\n"
"Sets the formatting factory object to be used for customization and\n"
"page creation.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_SetFormattingDialogFactory(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_SetFormattingDialogFactory(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextFormattingDialogFactory* factory;

        static const char *sipKwdList[] = {
            sipName_factory,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8", sipType_wxRichTextFormattingDialogFactory, &factory))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextFormattingDialog::SetFormattingDialogFactory(factory);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_SetFormattingDialogFactory, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetRestoreLastPage, "GetRestoreLastPage() -> bool\n"
"\n"
"Returns true if the dialog will restore the last-selected page.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetRestoreLastPage(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetRestoreLastPage(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextFormattingDialog::GetRestoreLastPage();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetRestoreLastPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_SetRestoreLastPage, "SetRestoreLastPage(b)\n"
"\n"
"Pass true if the dialog should restore the last-selected page.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_SetRestoreLastPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_SetRestoreLastPage(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool b;

        static const char *sipKwdList[] = {
            sipName_b,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "b", &b))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextFormattingDialog::SetRestoreLastPage(b);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_SetRestoreLastPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetLastPage, "GetLastPage() -> int\n"
"\n"
"Returns the page identifier of the last page selected (not the control\n"
"id).");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetLastPage(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetLastPage(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextFormattingDialog::GetLastPage();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetLastPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_SetLastPage, "SetLastPage(lastPage)\n"
"\n"
"Sets the page identifier of the last page selected (not the control\n"
"id).");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_SetLastPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_SetLastPage(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int lastPage;

        static const char *sipKwdList[] = {
            sipName_lastPage,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "i", &lastPage))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextFormattingDialog::SetLastPage(lastPage);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_SetLastPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_SetColourData, "SetColourData(colourData)\n"
"\n"
"Sets the custom colour data for use by the colour dialog.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_SetColourData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_SetColourData(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColourData* colourData;

        static const char *sipKwdList[] = {
            sipName_colourData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J9", sipType_wxColourData, &colourData))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextFormattingDialog::SetColourData(*colourData);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_SetColourData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetColourData, "GetColourData() -> wx.ColourData\n"
"\n"
"Returns the custom colour data for use by the colour dialog.");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetColourData(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetColourData(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxColourData*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColourData( ::wxRichTextFormattingDialog::GetColourData());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColourData,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetColourData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetClientAreaOrigin, doc_wxRichTextFormattingDialog_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_Validate, doc_wxRichTextFormattingDialog_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_TransferDataToWindow, doc_wxRichTextFormattingDialog_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_TransferDataFromWindow, doc_wxRichTextFormattingDialog_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_InitDialog, doc_wxRichTextFormattingDialog_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_AcceptsFocus, doc_wxRichTextFormattingDialog_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_AcceptsFocusRecursively, doc_wxRichTextFormattingDialog_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_AcceptsFocusFromKeyboard, doc_wxRichTextFormattingDialog_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_AddChild, doc_wxRichTextFormattingDialog_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_RemoveChild, doc_wxRichTextFormattingDialog_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_InheritAttributes, doc_wxRichTextFormattingDialog_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_ShouldInheritColours, doc_wxRichTextFormattingDialog_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_OnInternalIdle, doc_wxRichTextFormattingDialog_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetMainWindowOfCompositeControl, doc_wxRichTextFormattingDialog_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_InformFirstDirection, doc_wxRichTextFormattingDialog_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_SetCanFocus, doc_wxRichTextFormattingDialog_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_Destroy, doc_wxRichTextFormattingDialog_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_SetValidator, doc_wxRichTextFormattingDialog_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetValidator, doc_wxRichTextFormattingDialog_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
         ::wxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextFormattingDialog::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_EnableVisibleFocus, doc_wxRichTextFormattingDialog_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_ProcessEvent, doc_wxRichTextFormattingDialog_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoEnable, doc_wxRichTextFormattingDialog_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxRichTextFormattingDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoGetPosition, doc_wxRichTextFormattingDialog_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxRichTextFormattingDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoGetSize, doc_wxRichTextFormattingDialog_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxRichTextFormattingDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoGetClientSize, doc_wxRichTextFormattingDialog_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoGetBestSize, doc_wxRichTextFormattingDialog_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoGetBestClientSize, doc_wxRichTextFormattingDialog_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoSetSize, doc_wxRichTextFormattingDialog_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoSetClientSize, doc_wxRichTextFormattingDialog_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoSetSizeHints, doc_wxRichTextFormattingDialog_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoGetBorderSize(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoGetBorderSize, doc_wxRichTextFormattingDialog_DoGetBorderSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoMoveWindow, doc_wxRichTextFormattingDialog_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoSetWindowVariant, doc_wxRichTextFormattingDialog_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetDefaultBorder, doc_wxRichTextFormattingDialog_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetDefaultBorderForControl, doc_wxRichTextFormattingDialog_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoFreeze, doc_wxRichTextFormattingDialog_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_DoThaw, doc_wxRichTextFormattingDialog_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxRichTextFormattingDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_HasTransparentBackground, doc_wxRichTextFormattingDialog_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_TryBefore, doc_wxRichTextFormattingDialog_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxRichTextFormattingDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextFormattingDialog, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_TryAfter, doc_wxRichTextFormattingDialog_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFormattingDialog_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes");

extern "C" {static PyObject *meth_wxRichTextFormattingDialog_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFormattingDialog_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxRichTextFormattingDialog::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFormattingDialog, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRichTextFormattingDialog(void *, const sipTypeDef *);}
static void *cast_wxRichTextFormattingDialog(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRichTextFormattingDialog *sipCpp = reinterpret_cast< ::wxRichTextFormattingDialog *>(sipCppV);

    if (targetType == sipType_wxPropertySheetDialog)
        return static_cast< ::wxPropertySheetDialog *>(sipCpp);

    if (targetType == sipType_wxDialog)
        return static_cast< ::wxDialog *>(sipCpp);

    if (targetType == sipType_wxTopLevelWindow)
        return static_cast< ::wxTopLevelWindow *>(sipCpp);

    if (targetType == sipType_wxNonOwnedWindow)
        return static_cast< ::wxNonOwnedWindow *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRichTextFormattingDialog(void *, int);}
static void release_wxRichTextFormattingDialog(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRichTextFormattingDialog *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRichTextFormattingDialog *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxRichTextFormattingDialog(Py_ssize_t);}
static void *array_wxRichTextFormattingDialog(Py_ssize_t sipNrElem)
{
    return new  ::wxRichTextFormattingDialog[sipNrElem];
}


extern "C" {static void dealloc_wxRichTextFormattingDialog(sipSimpleWrapper *);}
static void dealloc_wxRichTextFormattingDialog(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRichTextFormattingDialog *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRichTextFormattingDialog(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRichTextFormattingDialog(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRichTextFormattingDialog(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxRichTextFormattingDialog *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextFormattingDialog();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        long flags;
         ::wxWindow* parent;
        const  ::wxString& titledef = "Formatting";
        const  ::wxString* title = &titledef;
        int titleState = 0;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& szdef = wxDefaultSize;
        const  ::wxSize* sz = &szdef;
        int szState = 0;
        long style = wxDEFAULT_DIALOG_STYLE;

        static const char *sipKwdList[] = {
            sipName_flags,
            sipName_parent,
            sipName_title,
            sipName_id,
            sipName_pos,
            sipName_sz,
            sipName_style,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "lJ8|J1iJ1J1l", &flags, sipType_wxWindow, &parent, sipType_wxString,&title, &titleState, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &sz, &szState, &style))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextFormattingDialog(flags,parent,*title,id,*pos,*sz,style);
            Py_END_ALLOW_THREADS

            *sipOwner = Py_None;
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(sz),sipType_wxSize,szState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRichTextFormattingDialog[] = {{0, 1, 1}};


static PyMethodDef methods_wxRichTextFormattingDialog[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxRichTextFormattingDialog_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxRichTextFormattingDialog_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxRichTextFormattingDialog_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_AddChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_AddChild)},
    {SIP_MLNAME_CAST(sipName_ApplyStyle), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_ApplyStyle), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_ApplyStyle)},
    {SIP_MLNAME_CAST(sipName_Create), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_Create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_Create)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxRichTextFormattingDialog_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), meth_wxRichTextFormattingDialog_DoFreeze, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), meth_wxRichTextFormattingDialog_DoGetBestClientSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), meth_wxRichTextFormattingDialog_DoGetBestSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), meth_wxRichTextFormattingDialog_DoGetBorderSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), meth_wxRichTextFormattingDialog_DoThaw, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EnableVisibleFocus), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_EnableVisibleFocus)},
    {SIP_MLNAME_CAST(sipName_GetAttributes), meth_wxRichTextFormattingDialog_GetAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxRichTextFormattingDialog_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetColourData), meth_wxRichTextFormattingDialog_GetColourData, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetColourData)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), meth_wxRichTextFormattingDialog_GetDefaultBorder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), meth_wxRichTextFormattingDialog_GetDefaultBorderForControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetDialog), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_GetDialog), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetDialog)},
    {SIP_MLNAME_CAST(sipName_GetDialogAttributes), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_GetDialogAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetDialogAttributes)},
    {SIP_MLNAME_CAST(sipName_GetDialogStyleDefinition), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_GetDialogStyleDefinition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetDialogStyleDefinition)},
    {SIP_MLNAME_CAST(sipName_GetFormattingDialogFactory), meth_wxRichTextFormattingDialog_GetFormattingDialogFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetFormattingDialogFactory)},
    {SIP_MLNAME_CAST(sipName_GetImageList), meth_wxRichTextFormattingDialog_GetImageList, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetImageList)},
    {SIP_MLNAME_CAST(sipName_GetLastPage), meth_wxRichTextFormattingDialog_GetLastPage, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetLastPage)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxRichTextFormattingDialog_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetOptions), meth_wxRichTextFormattingDialog_GetOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetOptions)},
    {SIP_MLNAME_CAST(sipName_GetRestoreLastPage), meth_wxRichTextFormattingDialog_GetRestoreLastPage, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetRestoreLastPage)},
    {SIP_MLNAME_CAST(sipName_GetStyle), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_GetStyle), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetStyle)},
    {SIP_MLNAME_CAST(sipName_GetStyleDefinition), meth_wxRichTextFormattingDialog_GetStyleDefinition, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetStyleDefinition)},
    {SIP_MLNAME_CAST(sipName_GetStyleSheet), meth_wxRichTextFormattingDialog_GetStyleSheet, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetStyleSheet)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxRichTextFormattingDialog_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_GetValidator)},
    {SIP_MLNAME_CAST(sipName_HasOption), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_HasOption), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_HasOption)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), meth_wxRichTextFormattingDialog_HasTransparentBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxRichTextFormattingDialog_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxRichTextFormattingDialog_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_InitDialog)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxRichTextFormattingDialog_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_RemoveChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), meth_wxRichTextFormattingDialog_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_SetAttributes), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_SetAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_SetAttributes)},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_SetCanFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetColourData), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_SetColourData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_SetColourData)},
    {SIP_MLNAME_CAST(sipName_SetFormattingDialogFactory), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_SetFormattingDialogFactory), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_SetFormattingDialogFactory)},
    {SIP_MLNAME_CAST(sipName_SetImageList), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_SetImageList), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_SetImageList)},
    {SIP_MLNAME_CAST(sipName_SetLastPage), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_SetLastPage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_SetLastPage)},
    {SIP_MLNAME_CAST(sipName_SetOptions), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_SetOptions), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_SetOptions)},
    {SIP_MLNAME_CAST(sipName_SetRestoreLastPage), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_SetRestoreLastPage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_SetRestoreLastPage)},
    {SIP_MLNAME_CAST(sipName_SetStyle), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_SetStyle), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_SetStyle)},
    {SIP_MLNAME_CAST(sipName_SetStyleDefinition), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_SetStyleDefinition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_SetStyleDefinition)},
    {SIP_MLNAME_CAST(sipName_SetValidator), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_SetValidator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxRichTextFormattingDialog_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxRichTextFormattingDialog_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxRichTextFormattingDialog_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth_wxRichTextFormattingDialog_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_TryBefore)},
    {SIP_MLNAME_CAST(sipName_UpdateDisplay), meth_wxRichTextFormattingDialog_UpdateDisplay, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_UpdateDisplay)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxRichTextFormattingDialog_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFormattingDialog_Validate)}
};

static sipEnumMemberDef enummembers_wxRichTextFormattingDialog[] = {
    {sipName_Option_AllowPixelFontSize, static_cast<int>( ::wxRichTextFormattingDialog::Option_AllowPixelFontSize), -1},
};

sipVariableDef variables_wxRichTextFormattingDialog[] = {
    {PropertyVariable, sipName_StyleSheet, &methods_wxRichTextFormattingDialog[39], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_StyleDefinition, &methods_wxRichTextFormattingDialog[38], &methods_wxRichTextFormattingDialog[59], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Options, &methods_wxRichTextFormattingDialog[35], &methods_wxRichTextFormattingDialog[56], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ImageList, &methods_wxRichTextFormattingDialog[32], &methods_wxRichTextFormattingDialog[54], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Attributes, &methods_wxRichTextFormattingDialog[22], &methods_wxRichTextFormattingDialog[50], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxRichTextFormattingDialog, "RichTextFormattingDialog()\n"
"RichTextFormattingDialog(flags, parent, title=\"Formatting\", id=wx.ID_ANY, pos=wx.DefaultPosition, sz=wx.DefaultSize, style=wx.DEFAULT_DIALOG_STYLE)\n"
"\n"
"This dialog allows the user to edit a character and/or paragraph\n"
"style.");


sipClassTypeDef sipTypeDef__richtext_wxRichTextFormattingDialog = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRichTextFormattingDialog,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_RichTextFormattingDialog,
        {0, 0, 1},
        68, methods_wxRichTextFormattingDialog,
        1, enummembers_wxRichTextFormattingDialog,
        5, variables_wxRichTextFormattingDialog,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxRichTextFormattingDialog,
    -1,
    -1,
    supers_wxRichTextFormattingDialog,
    SIP_NULLPTR,
    init_type_wxRichTextFormattingDialog,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxRichTextFormattingDialog,
    SIP_NULLPTR,
    array_wxRichTextFormattingDialog,
    SIP_NULLPTR,
    release_wxRichTextFormattingDialog,
    cast_wxRichTextFormattingDialog,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
