/*
 * Module code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_dataview.h"

        #include <wx/object.h>
        #include <wx/treelist.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/dataview.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/dc.h>
        #include <wx/bitmap.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/treelist.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>

/* Define the strings used by this module. */
const char sipStrings__dataview[] = {
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'O', 'L', 'U', 'M', 'N', '_', 'H', 'E', 'A', 'D', 'E', 'R', '_', 'R', 'I', 'G', 'H', 'T', '_', 'C', 'L', 'I', 'C', 'K', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'I', 'T', 'E', 'M', '_', 'E', 'D', 'I', 'T', 'I', 'N', 'G', '_', 'S', 'T', 'A', 'R', 'T', 'E', 'D', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'O', 'L', 'U', 'M', 'N', '_', 'H', 'E', 'A', 'D', 'E', 'R', '_', 'C', 'L', 'I', 'C', 'K', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'I', 'T', 'E', 'M', '_', 'D', 'R', 'O', 'P', '_', 'P', 'O', 'S', 'S', 'I', 'B', 'L', 'E', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'I', 'T', 'E', 'M', '_', 'V', 'A', 'L', 'U', 'E', '_', 'C', 'H', 'A', 'N', 'G', 'E', 'D', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'I', 'T', 'E', 'M', '_', 'S', 'T', 'A', 'R', 'T', '_', 'E', 'D', 'I', 'T', 'I', 'N', 'G', 0,
    'U', 'p', 'd', 'a', 't', 'e', 'I', 't', 'e', 'm', 'P', 'a', 'r', 'e', 'n', 't', 'S', 't', 'a', 't', 'e', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 'l', 'y', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'T', 'R', 'E', 'E', 'L', 'I', 'S', 'T', '_', 'I', 'T', 'E', 'M', '_', 'C', 'O', 'N', 'T', 'E', 'X', 'T', '_', 'M', 'E', 'N', 'U', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'T', 'R', 'E', 'E', 'L', 'I', 'S', 'T', '_', 'S', 'E', 'L', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'C', 'H', 'A', 'N', 'G', 'E', 'D', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'I', 'T', 'E', 'M', '_', 'C', 'O', 'N', 'T', 'E', 'X', 'T', '_', 'M', 'E', 'N', 'U', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'I', 'T', 'E', 'M', '_', 'E', 'D', 'I', 'T', 'I', 'N', 'G', '_', 'D', 'O', 'N', 'E', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'S', 'E', 'L', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'C', 'H', 'A', 'N', 'G', 'E', 'D', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'C', 'h', 'e', 'c', 'k', 'I', 'c', 'o', 'n', 'T', 'e', 'x', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'O', 'L', 'U', 'M', 'N', '_', 'R', 'E', 'O', 'R', 'D', 'E', 'R', 'E', 'D', 0,
    'G', 'e', 't', 'M', 'a', 'i', 'n', 'W', 'i', 'n', 'd', 'o', 'w', 'O', 'f', 'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'e', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'I', 'T', 'E', 'M', '_', 'B', 'E', 'G', 'I', 'N', '_', 'D', 'R', 'A', 'G', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'I', 'T', 'E', 'M', '_', 'C', 'O', 'L', 'L', 'A', 'P', 'S', 'I', 'N', 'G', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'T', 'R', 'E', 'E', 'L', 'I', 'S', 'T', '_', 'I', 'T', 'E', 'M', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'T', 'R', 'E', 'E', 'L', 'I', 'S', 'T', '_', 'I', 'T', 'E', 'M', '_', 'E', 'X', 'P', 'A', 'N', 'D', 'I', 'N', 'G', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'I', 'T', 'E', 'M', '_', 'E', 'X', 'P', 'A', 'N', 'D', 'I', 'N', 'G', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'I', 'T', 'E', 'M', '_', 'C', 'O', 'L', 'L', 'A', 'P', 'S', 'E', 'D', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'I', 'T', 'E', 'M', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'T', 'R', 'E', 'E', 'L', 'I', 'S', 'T', '_', 'C', 'O', 'L', 'U', 'M', 'N', '_', 'S', 'O', 'R', 'T', 'E', 'D', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'T', 'R', 'E', 'E', 'L', 'I', 'S', 'T', '_', 'I', 'T', 'E', 'M', '_', 'E', 'X', 'P', 'A', 'N', 'D', 'E', 'D', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'O', 'L', 'U', 'M', 'N', '_', 'S', 'O', 'R', 'T', 'E', 'D', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'I', 'T', 'E', 'M', '_', 'E', 'X', 'P', 'A', 'N', 'D', 'E', 'D', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'T', 'R', 'E', 'E', 'L', 'I', 'S', 'T', '_', 'I', 'T', 'E', 'M', '_', 'C', 'H', 'E', 'C', 'K', 'E', 'D', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'I', 'c', 'o', 'n', 'T', 'e', 'x', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 0,
    'G', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'B', 'o', 'r', 'd', 'e', 'r', 'F', 'o', 'r', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'A', 'C', 'H', 'E', '_', 'H', 'I', 'N', 'T', 0,
    'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'E', 'L', 'L', '_', 'I', 'N', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'E', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'C', 'e', 'l', 'l', 'R', 'e', 'n', 'd', 'e', 'r', 'S', 't', 'a', 't', 'e', 0,
    'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'E', 'L', 'L', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'A', 'B', 'L', 'E', 0,
    'D', 'V', 'C', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', '_', 'R', 'E', 'N', 'D', 'E', 'R', 'E', 'R', '_', 'S', 'I', 'Z', 'E', 0,
    'G', 'e', 't', 'C', 'l', 'a', 's', 's', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'w', 'x', 'T', 'r', 'e', 'e', 'L', 'i', 's', 't', 'I', 't', 'e', 'm', 'C', 'o', 'm', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'I', 's', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'u', 'm', 'n', 'S', 'o', 'r', 't', 'A', 'l', 'l', 'o', 'w', 'e', 'd', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'B', 'i', 't', 'm', 'a', 'p', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'C', 'h', 'o', 'i', 'c', 'e', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'T', 'o', 'g', 'g', 'l', 'e', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'C', 'u', 's', 't', 'o', 'm', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'I', 'n', 'd', 'e', 'x', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'I', 'T', 'E', 'M', '_', 'D', 'R', 'O', 'P', 0,
    'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'O', 'L', '_', 'R', 'E', 'O', 'R', 'D', 'E', 'R', 'A', 'B', 'L', 'E', 0,
    'D', 'V', 'C', '_', 'T', 'O', 'G', 'G', 'L', 'E', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', '_', 'W', 'I', 'D', 'T', 'H', 0,
    'H', 'a', 's', 'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'A', 'c', 'c', 'e', 'p', 't', 's', 'F', 'o', 'c', 'u', 's', 'F', 'r', 'o', 'm', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'V', 'a', 'l', 'u', 'e', 'A', 'd', 'j', 'u', 's', 't', 'e', 'r', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'M', 'o', 'd', 'e', 'l', 'N', 'o', 't', 'i', 'f', 'i', 'e', 'r', 0,
    'D', 'V', '_', 'V', 'A', 'R', 'I', 'A', 'B', 'L', 'E', '_', 'L', 'I', 'N', 'E', '_', 'H', 'E', 'I', 'G', 'H', 'T', 0,
    'A', 'c', 'c', 'e', 'p', 't', 's', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 'l', 'y', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'D', 'a', 't', 'e', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'S', 'p', 'i', 'n', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'T', 'e', 'x', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'G', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'F', 'r', 'o', 'm', 'E', 'd', 'i', 't', 'o', 'r', 'C', 't', 'r', 'l', 0,
    'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'O', 'L', '_', 'R', 'E', 'S', 'I', 'Z', 'A', 'B', 'L', 'E', 0,
    'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'E', 'L', 'L', '_', 'S', 'E', 'L', 'E', 'C', 'T', 'E', 'D', 0,
    'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'E', 'L', 'L', '_', 'E', 'D', 'I', 'T', 'A', 'B', 'L', 'E', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'e', 'r', 'D', 'a', 't', 'a', 'F', 'r', 'o', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'A', 'r', 'e', 'A', 'l', 'l', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 'I', 'n', 'S', 't', 'a', 't', 'e', 0,
    'G', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 'I', 't', 'e', 'm', 's', 'C', 'o', 'u', 'n', 't', 0,
    'P', 'r', 'e', 'p', 'e', 'n', 'd', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'P', 'r', 'e', 'p', 'e', 'n', 'd', 'I', 'c', 'o', 'n', 'T', 'e', 'x', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'O', 'L', '_', 'S', 'O', 'R', 'T', 'A', 'B', 'L', 'E', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'C', 'o', 'l', 'u', 'm', 'n', 'F', 'l', 'a', 'g', 's', 0,
    'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'E', 'L', 'L', '_', 'F', 'O', 'C', 'U', 'S', 'E', 'D', 0,
    'D', 'V', 'R', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', '_', 'A', 'L', 'I', 'G', 'N', 'M', 'E', 'N', 'T', 0,
    'S', 'e', 't', 'A', 'l', 't', 'e', 'r', 'n', 'a', 't', 'e', 'R', 'o', 'w', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'C', 'h', 'e', 'c', 'k', 'I', 't', 'e', 'm', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 'l', 'y', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'o', 's', 'e', 'd', 'D', 'r', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 0,
    'A', 'l', 'l', 'o', 'w', 'M', 'u', 'l', 't', 'i', 'C', 'o', 'l', 'u', 'm', 'n', 'S', 'o', 'r', 't', 0,
    'A', 'p', 'p', 'e', 'n', 'd', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'A', 'p', 'p', 'e', 'n', 'd', 'I', 'c', 'o', 'n', 'T', 'e', 'x', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'A', 'l', 'l', 'o', 'w', '3', 'r', 'd', 'S', 't', 'a', 't', 'e', 'F', 'o', 'r', 'U', 's', 'e', 'r', 0,
    'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'E', 'L', 'L', '_', 'P', 'R', 'E', 'L', 'I', 'T', 0,
    'D', 'V', 'C', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', '_', 'M', 'I', 'N', 'W', 'I', 'D', 'T', 'H', 0,
    'I', 's', 'S', 'o', 'r', 't', 'O', 'r', 'd', 'e', 'r', 'A', 's', 'c', 'e', 'n', 'd', 'i', 'n', 'g', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'e', 'r', 'D', 'a', 't', 'a', 'T', 'o', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'S', 'h', 'o', 'u', 'l', 'd', 'I', 'n', 'h', 'e', 'r', 'i', 't', 'C', 'o', 'l', 'o', 'u', 'r', 's', 0,
    'I', 'n', 'f', 'o', 'r', 'm', 'F', 'i', 'r', 's', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'T', 'r', 'e', 'e', 'L', 'i', 's', 't', 'C', 't', 'r', 'l', 'N', 'a', 'm', 'e', 'S', 't', 'r', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'I', 't', 'e', 'm', 'A', 'r', 'r', 'a', 'y', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'T', 'r', 'e', 'e', 'S', 't', 'o', 'r', 'e', 0,
    'S', 'e', 't', 'I', 't', 'e', 'm', 'E', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 'I', 'c', 'o', 'n', 0,
    'G', 'e', 't', 'I', 't', 'e', 'm', 'E', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 'I', 'c', 'o', 'n', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'L', 'i', 's', 't', 'S', 't', 'o', 'r', 'e', 0,
    'P', 'r', 'e', 'p', 'e', 'n', 'd', 'T', 'o', 'g', 'g', 'l', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'P', 'r', 'e', 'p', 'e', 'n', 'd', 'B', 'i', 't', 'm', 'a', 'p', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'C', 't', 'r', 'l', 'N', 'a', 'm', 'e', 'S', 't', 'r', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 0,
    'H', 'a', 's', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'O', 'L', '_', 'H', 'I', 'D', 'D', 'E', 'N', 0,
    'D', 'A', 'T', 'A', 'V', 'I', 'E', 'W', '_', 'C', 'E', 'L', 'L', '_', 'I', 'N', 'E', 'R', 'T', 0,
    'H', 'a', 's', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'D', 'o', 'G', 'e', 't', 'B', 'e', 's', 't', 'C', 'l', 'i', 'e', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'S', 'e', 't', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'C', 'l', 'i', 'e', 'n', 't', 'A', 'r', 'e', 'a', 'O', 'r', 'i', 'g', 'i', 'n', 0,
    'G', 'e', 't', 'O', 'l', 'd', 'C', 'h', 'e', 'c', 'k', 'e', 'd', 'S', 't', 'a', 't', 'e', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'T', 'r', 'e', 'e', 'C', 't', 'r', 'l', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'L', 'i', 's', 't', 'C', 't', 'r', 'l', 0,
    'T', 'o', 'g', 'g', 'l', 'e', 'S', 'o', 'r', 't', 'B', 'y', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'A', 'p', 'p', 'e', 'n', 'd', 'T', 'o', 'g', 'g', 'l', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'A', 'p', 'p', 'e', 'n', 'd', 'B', 'i', 't', 'm', 'a', 'p', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'I', 's', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'I', 'c', 'o', 'n', 'T', 'e', 'x', 't', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'I', 't', 'e', 'm', 'A', 't', 't', 'r', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'C', 'e', 'l', 'l', 'M', 'o', 'd', 'e', 0,
    'D', 'o', 'S', 'e', 't', 'W', 'i', 'n', 'd', 'o', 'w', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'V', 'i', 's', 'i', 'b', 'l', 'e', 'F', 'o', 'c', 'u', 's', 0,
    'S', 'e', 't', 'I', 't', 'e', 'm', 'C', 'o', 'm', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'S', 'e', 't', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'G', 'e', 't', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'S', 'e', 't', 'E', 'x', 'p', 'a', 'n', 'd', 'e', 'r', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'G', 'e', 't', 'E', 'x', 'p', 'a', 'n', 'd', 'e', 'r', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'P', 'r', 'e', 'p', 'e', 'n', 'd', 'T', 'e', 'x', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'P', 'r', 'e', 'p', 'e', 'n', 'd', 'D', 'a', 't', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'H', 'a', 's', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'o', 'm', 'p', 'a', 'r', 'e', 0,
    'D', 'V', 'C', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', '_', 'W', 'I', 'D', 'T', 'H', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'S', 'y', 's', 't', 'e', 'm', 'T', 'h', 'e', 'm', 'e', 0,
    'I', 'n', 'h', 'e', 'r', 'i', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'O', 't', 'h', 'e', 'r', 'D', 'i', 'r', 0,
    'T', 'L', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', '_', 'S', 'T', 'Y', 'L', 'E', 0,
    'P', 'r', 'e', 'p', 'e', 'n', 'd', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 0,
    'G', 'e', 't', 'S', 'o', 'r', 't', 'i', 'n', 'g', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'G', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'D', 'r', 'o', 'p', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'D', 'r', 'a', 'g', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'A', 'p', 'p', 'e', 'n', 'd', 'T', 'e', 'x', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'A', 'p', 'p', 'e', 'n', 'd', 'D', 'a', 't', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'C', 'r', 'e', 'a', 't', 'e', 'E', 'd', 'i', 't', 'o', 'r', 'C', 't', 'r', 'l', 0,
    'S', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'A', 'd', 'j', 'u', 's', 't', 'e', 'r', 0,
    'G', 'e', 't', 'E', 'l', 'l', 'i', 'p', 's', 'i', 'z', 'e', 'M', 'o', 'd', 'e', 0,
    'D', 'i', 's', 'a', 'b', 'l', 'e', 'E', 'l', 'l', 'i', 'p', 's', 'i', 'z', 'e', 0,
    'G', 'e', 't', 'E', 'f', 'f', 'e', 'c', 't', 'i', 'v', 'e', 'F', 'o', 'n', 't', 0,
    'S', 'e', 'n', 'd', 'D', 'e', 's', 't', 'r', 'o', 'y', 'E', 'v', 'e', 'n', 't', 0,
    'G', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'B', 'o', 'r', 'd', 'e', 'r', 0,
    'G', 'e', 't', 'E', 'v', 'e', 'n', 't', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'S', 'e', 't', 'S', 't', 'r', 'i', 'k', 'e', 't', 'h', 'r', 'o', 'u', 'g', 'h', 0,
    'w', 'x', 'T', 'r', 'e', 'e', 'L', 'i', 's', 't', 'E', 'v', 'e', 'n', 't', 0,
    'G', 'e', 't', 'C', 'h', 'e', 'c', 'k', 'e', 'd', 'S', 't', 'a', 't', 'e', 0,
    'I', 'n', 's', 'e', 'r', 't', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 0,
    'A', 'p', 'p', 'e', 'n', 'd', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 0,
    'M', 'a', 'k', 'e', 'H', 'i', 'g', 'h', 'l', 'i', 'g', 'h', 't', 'e', 'd', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'E', 'v', 'e', 'n', 't', 0,
    'E', 'x', 'p', 'a', 'n', 'd', 'A', 'n', 'c', 'e', 's', 't', 'o', 'r', 's', 0,
    '_', 'A', 's', 's', 'o', 'c', 'i', 'a', 't', 'e', 'M', 'o', 'd', 'e', 'l', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'E', 'l', 'l', 'i', 'p', 's', 'i', 'z', 'e', 0,
    'R', 'o', 'w', 'V', 'a', 'l', 'u', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'M', 'o', 'd', 'e', 'l', 0,
    'w', 'x', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'V', 'e', 'c', 't', 'o', 'r', 0,
    'I', 's', 'E', 'd', 'i', 't', 'C', 'a', 'n', 'c', 'e', 'l', 'l', 'e', 'd', 0,
    'G', 'e', 't', 'C', 'o', 'u', 'n', 't', 'P', 'e', 'r', 'P', 'a', 'g', 'e', 0,
    'A', 's', 's', 'i', 'g', 'n', 'I', 'm', 'a', 'g', 'e', 'L', 'i', 's', 't', 0,
    'D', 'o', 'G', 'e', 't', 'B', 'o', 'r', 'd', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'D', 'o', 'S', 'e', 't', 'C', 'l', 'i', 'e', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'C', 'l', 'i', 'e', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'a', 's', 'c', 'e', 'n', 'd', 'i', 'n', 'g', 'O', 'r', 'd', 'e', 'r', 0,
    'w', 'x', 'T', 'r', 'e', 'e', 'L', 'i', 's', 't', 'C', 't', 'r', 'l', 0,
    'w', 'x', 'T', 'r', 'e', 'e', 'L', 'i', 's', 't', 'I', 't', 'e', 'm', 0,
    'T', 'L', '_', 'U', 'S', 'E', 'R', '_', '3', 'S', 'T', 'A', 'T', 'E', 0,
    'G', 'e', 't', 'T', 'o', 'g', 'g', 'l', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'S', 'e', 't', 'T', 'o', 'g', 'g', 'l', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'G', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 'R', 'o', 'w', 0,
    'S', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'I', 't', 'e', 'm', 0,
    'G', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'I', 't', 'e', 'm', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'C', 't', 'r', 'l', 0,
    'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'G', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'T', 'y', 'p', 'e', 0,
    'G', 'e', 't', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'T', 'y', 'p', 'e', 0,
    'I', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 'B', 'y', 'R', 'o', 'w', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'N', 'o', 't', 'i', 'f', 'i', 'e', 'r', 0,
    'w', 'x', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 'I', 't', 'e', 'm', 0,
    'D', 'V', '_', 'H', 'O', 'R', 'I', 'Z', '_', 'R', 'U', 'L', 'E', 'S', 0,
    'D', 'e', 'l', 'e', 't', 'e', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'S', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'W', 'i', 'd', 't', 'h', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'W', 'i', 'd', 't', 'h', 0,
    'D', 'e', 'l', 'e', 't', 'e', 'A', 'l', 'l', 'I', 't', 'e', 'm', 's', 0,
    'S', 'e', 't', 'R', 'e', 'o', 'r', 'd', 'e', 'r', 'a', 'b', 'l', 'e', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'C', 'o', 'u', 'n', 't', 0,
    'D', 'o', 'S', 'e', 't', 'S', 'i', 'z', 'e', 'H', 'i', 'n', 't', 's', 0,
    'O', 'n', 'I', 'n', 't', 'e', 'r', 'n', 'a', 'l', 'I', 'd', 'l', 'e', 0,
    'G', 'e', 't', 'N', 'e', 'x', 't', 'S', 'i', 'b', 'l', 'i', 'n', 'g', 0,
    'G', 'e', 't', 'S', 'o', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'S', 'e', 't', 'S', 'o', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'T', 'L', '_', 'S', 'T', 'Y', 'L', 'E', '_', 'M', 'A', 'S', 'K', 0,
    'I', 's', 'R', 'o', 'w', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 0,
    'S', 'e', 't', 'D', 'r', 'o', 'p', 'E', 'f', 'f', 'e', 'c', 't', 0,
    'S', 'e', 't', 'D', 'a', 't', 'a', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'G', 'e', 't', 'D', 'r', 'o', 'p', 'E', 'f', 'f', 'e', 'c', 't', 0,
    'G', 'e', 't', 'D', 'a', 't', 'a', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'P', 'r', 'e', 'p', 'e', 'n', 'd', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'G', 'e', 't', 'E', 'd', 'i', 't', 'o', 'r', 'C', 't', 'r', 'l', 0,
    'F', 'i', 'n', 'i', 's', 'h', 'E', 'd', 'i', 't', 'i', 'n', 'g', 0,
    'C', 'a', 'n', 'c', 'e', 'l', 'E', 'd', 'i', 't', 'i', 'n', 'g', 0,
    'H', 'a', 's', 'E', 'd', 'i', 't', 'o', 'r', 'C', 't', 'r', 'l', 0,
    'S', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'B', 'y', 'R', 'o', 'w', 0,
    'G', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'B', 'y', 'R', 'o', 'w', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'T', 'y', 'p', 'e', 0,
    'D', 'V', '_', 'V', 'E', 'R', 'T', '_', 'R', 'U', 'L', 'E', 'S', 0,
    'S', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', 0,
    'G', 'e', 't', 'I', 't', 'e', 'm', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'G', 'e', 't', 'F', 'i', 'r', 's', 't', 'C', 'h', 'i', 'l', 'd', 0,
    'G', 'e', 't', 'M', 'a', 'i', 'n', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'S', 'e', 't', 'H', 'e', 'a', 'd', 'e', 'r', 'A', 't', 't', 'r', 0,
    'S', 'e', 't', 'R', 'e', 's', 'i', 'z', 'e', 'a', 'b', 'l', 'e', 0,
    'I', 's', 'R', 'e', 'o', 'r', 'd', 'e', 'r', 'a', 'b', 'l', 'e', 0,
    'E', 'n', 's', 'u', 'r', 'e', 'V', 'i', 's', 'i', 'b', 'l', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'B', 'e', 's', 't', 'S', 'i', 'z', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'S', 'e', 't', 'D', 'a', 't', 'a', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'G', 'e', 't', 'D', 'a', 't', 'a', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'G', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', 0,
    'G', 'e', 't', 'C', 'h', 'i', 'l', 'd', 'C', 'o', 'u', 'n', 't', 0,
    'G', 'e', 't', 'T', 'e', 'x', 't', 'E', 'x', 't', 'e', 'n', 't', 0,
    'S', 'e', 't', 'D', 'a', 't', 'a', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'G', 'e', 't', 'D', 'a', 't', 'a', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'G', 'e', 't', 'F', 'i', 'r', 's', 't', 'I', 't', 'e', 'm', 0,
    'T', 'L', '_', 'N', 'O', '_', 'H', 'E', 'A', 'D', 'E', 'R', 0,
    'G', 'e', 't', 'T', 'e', 'x', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'S', 'e', 't', 'T', 'e', 'x', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'G', 'e', 't', 'D', 'r', 'a', 'g', 'F', 'l', 'a', 'g', 's', 0,
    'S', 'e', 't', 'D', 'r', 'a', 'g', 'F', 'l', 'a', 'g', 's', 0,
    'S', 'e', 't', 'R', 'o', 'w', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'H', 'a', 's', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'C', 'l', 'e', 'a', 'r', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'm', 'o', 'd', 'e', 'l', '_', 'c', 'o', 'l', 'u', 'm', 'n', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'M', 'a', 'r', 'k', 'u', 'p', 0,
    'A', 'c', 't', 'i', 'v', 'a', 't', 'e', 'C', 'e', 'l', 'l', 0,
    'S', 't', 'a', 'r', 't', 'E', 'd', 'i', 't', 'i', 'n', 'g', 0,
    'R', 'o', 'w', 'P', 'r', 'e', 'p', 'e', 'n', 'd', 'e', 'd', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', '_', 's', 'i', 'z', 'e', 0,
    'G', 'e', 't', 'A', 't', 't', 'r', 'B', 'y', 'R', 'o', 'w', 0,
    'I', 't', 'e', 'm', 's', 'D', 'e', 'l', 'e', 't', 'e', 'd', 0,
    'I', 't', 'e', 'm', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'D', 'V', '_', 'R', 'O', 'W', '_', 'L', 'I', 'N', 'E', 'S', 0,
    'D', 'V', '_', 'N', 'O', '_', 'H', 'E', 'A', 'D', 'E', 'R', 0,
    'w', 'x', 'D', 'V', 'C', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'G', 'e', 't', 'C', 'a', 'c', 'h', 'e', 'F', 'r', 'o', 'm', 0,
    'S', 'e', 't', 'I', 't', 'e', 'm', 'I', 'm', 'a', 'g', 'e', 0,
    'D', 'e', 'l', 'e', 't', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'A', 'p', 'p', 'e', 'n', 'd', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'I', 'n', 's', 'e', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'S', 'e', 't', 'S', 'o', 'r', 't', 'O', 'r', 'd', 'e', 'r', 0,
    'I', 's', 'R', 'e', 's', 'i', 'z', 'e', 'a', 'b', 'l', 'e', 0,
    'S', 'e', 't', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'G', 'e', 't', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'G', 'e', 't', 'I', 'm', 'a', 'g', 'e', 'L', 'i', 's', 't', 0,
    'S', 'e', 't', 'I', 'm', 'a', 'g', 'e', 'L', 'i', 's', 't', 0,
    'D', 'o', 'M', 'o', 'v', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'S', 'e', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'G', 'e', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'A', 'c', 'c', 'e', 'p', 't', 's', 'F', 'o', 'c', 'u', 's', 0,
    'G', 'e', 't', 'I', 't', 'e', 'm', 'C', 'o', 'u', 'n', 't', 0,
    'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 0,
    'G', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    '_', '_', 'c', 'o', 'n', 't', 'a', 'i', 'n', 's', '_', '_', 0,
    'w', 'x', '.', '_', 'd', 'a', 't', 'a', 'v', 'i', 'e', 'w', 0,
    'G', 'e', 't', 'D', 'a', 't', 'a', 'V', 'i', 'e', 'w', 0,
    'U', 'n', 'c', 'h', 'e', 'c', 'k', 'I', 't', 'e', 'm', 0,
    'i', 'm', 'a', 'g', 'e', 'O', 'p', 'e', 'n', 'e', 'd', 0,
    'i', 'm', 'a', 'g', 'e', 'C', 'l', 'o', 's', 'e', 'd', 0,
    'T', 'L', '_', 'C', 'H', 'E', 'C', 'K', 'B', 'O', 'X', 0,
    'T', 'L', '_', 'M', 'U', 'L', 'T', 'I', 'P', 'L', 'E', 0,
    'S', 'e', 't', 'I', 't', 'e', 'm', 'I', 'c', 'o', 'n', 0,
    'G', 'e', 't', 'N', 't', 'h', 'C', 'h', 'i', 'l', 'd', 0,
    'G', 'e', 't', 'I', 't', 'e', 'm', 'I', 'c', 'o', 'n', 0,
    'U', 'n', 's', 'e', 'l', 'e', 'c', 't', 'R', 'o', 'w', 0,
    'S', 'e', 't', 'D', 'a', 't', 'a', 'S', 'i', 'z', 'e', 0,
    'S', 'h', 'o', 'w', 'A', 's', 'R', 'a', 'd', 'i', 'o', 0,
    't', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'e', 'r', 0,
    'v', 'a', 'r', 'i', 'a', 'n', 't', 't', 'y', 'p', 'e', 0,
    'R', 'o', 'w', 's', 'D', 'e', 'l', 'e', 't', 'e', 'd', 0,
    'R', 'o', 'w', 'I', 'n', 's', 'e', 'r', 't', 'e', 'd', 0,
    'R', 'o', 'w', 'A', 'p', 'p', 'e', 'n', 'd', 'e', 'd', 0,
    'I', 's', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 0,
    'I', 's', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 0,
    'A', 'd', 'd', 'N', 'o', 't', 'i', 'f', 'i', 'e', 'r', 0,
    'I', 't', 'e', 'm', 'D', 'e', 'l', 'e', 't', 'e', 'd', 0,
    'I', 't', 'e', 'm', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'D', 'V', '_', 'M', 'U', 'L', 'T', 'I', 'P', 'L', 'E', 0,
    'U', 'n', 's', 'e', 'l', 'e', 'c', 't', 'A', 'l', 'l', 0,
    'P', 'r', 'e', 'p', 'e', 'n', 'd', 'I', 't', 'e', 'm', 0,
    'G', 'e', 't', 'R', 'o', 'o', 't', 'I', 't', 'e', 'm', 0,
    'S', 'e', 't', 'I', 't', 'e', 'm', 'T', 'e', 'x', 't', 0,
    'S', 'e', 't', 'I', 't', 'e', 'm', 'D', 'a', 't', 'a', 0,
    'G', 'e', 't', 'N', 'e', 'x', 't', 'I', 't', 'e', 'm', 0,
    'G', 'e', 't', 'I', 't', 'e', 'm', 'T', 'e', 'x', 't', 0,
    'G', 'e', 't', 'I', 't', 'e', 'm', 'R', 'e', 'c', 't', 0,
    'G', 'e', 't', 'I', 't', 'e', 'm', 'D', 'a', 't', 'a', 0,
    'r', 'e', 'o', 'r', 'd', 'e', 'r', 'a', 'b', 'l', 'e', 0,
    'S', 'e', 't', 'S', 'o', 'r', 't', 'a', 'b', 'l', 'e', 0,
    'S', 'e', 't', 'M', 'i', 'n', 'W', 'i', 'd', 't', 'h', 0,
    'C', 'h', 'a', 'n', 'g', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'G', 'e', 't', 'M', 'i', 'n', 'W', 'i', 'd', 't', 'h', 0,
    'S', 'e', 't', 'C', 'a', 'n', 'F', 'o', 'c', 'u', 's', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'C', 'h', 'i', 'l', 'd', 0,
    'G', 'e', 't', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'G', 'e', 't', 'D', 'a', 't', 'a', 'S', 'i', 'z', 'e', 0,
    'G', 'e', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'S', 'e', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    '_', '_', 'g', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    '_', '_', 'n', 'o', 'n', 'z', 'e', 'r', 'o', '_', '_', 0,
    'c', 'o', 'm', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'G', 'e', 't', 'C', 'h', 'o', 'i', 'c', 'e', 's', 0,
    'R', 'e', 'n', 'd', 'e', 'r', 'T', 'e', 'x', 't', 0,
    'm', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'R', 'o', 'w', 'D', 'e', 'l', 'e', 't', 'e', 'd', 0,
    'R', 'o', 'w', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'I', 't', 'e', 'm', 's', 'A', 'd', 'd', 'e', 'd', 0,
    'A', 'p', 'p', 'e', 'n', 'd', 'I', 't', 'e', 'm', 0,
    'G', 'e', 't', 'C', 'a', 'c', 'h', 'e', 'T', 'o', 0,
    'I', 'n', 's', 'e', 'r', 't', 'I', 't', 'e', 'm', 0,
    'D', 'e', 'l', 'e', 't', 'e', 'I', 't', 'e', 'm', 0,
    'w', 'i', 'd', 't', 'h', 'T', 'i', 't', 'l', 'e', 0,
    'I', 's', 'S', 'o', 'r', 't', 'a', 'b', 'l', 'e', 0,
    'G', 'e', 't', 'T', 'o', 'p', 'I', 't', 'e', 'm', 0,
    'I', 's', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 0,
    'I', 's', 'E', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 0,
    'I', 'n', 'i', 't', 'D', 'i', 'a', 'l', 'o', 'g', 0,
    'T', 'L', 'I', '_', 'F', 'I', 'R', 'S', 'T', 0,
    'T', 'L', '_', '3', 'S', 'T', 'A', 'T', 'E', 0,
    'T', 'L', '_', 'S', 'I', 'N', 'G', 'L', 'E', 0,
    'i', 'm', 'a', 'g', 'e', 'l', 'i', 's', 't', 0,
    'R', 'o', 'w', 'T', 'o', 'I', 't', 'e', 'm', 0,
    'I', 't', 'e', 'm', 'T', 'o', 'R', 'o', 'w', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'R', 'o', 'w', 0,
    'r', 'o', 'w', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'G', 'e', 't', 'C', 'h', 'o', 'i', 'c', 'e', 0,
    'S', 't', 'a', 'r', 't', 'D', 'r', 'a', 'g', 0,
    'L', 'e', 'f', 't', 'C', 'l', 'i', 'c', 'k', 0,
    'l', 'a', 'b', 'e', 'l', 'R', 'e', 'c', 't', 0,
    'I', 't', 'e', 'm', 'A', 'd', 'd', 'e', 'd', 0,
    'G', 'e', 't', 'I', 't', 'a', 'l', 'i', 'c', 0,
    'H', 'a', 's', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'S', 'e', 't', 'I', 't', 'a', 'l', 'i', 'c', 0,
    'D', 'V', '_', 'S', 'I', 'N', 'G', 'L', 'E', 0,
    'S', 'e', 't', 'I', 'n', 'd', 'e', 'n', 't', 0,
    'G', 'e', 't', 'I', 'n', 'd', 'e', 'n', 't', 0,
    'C', 'h', 'e', 'c', 'k', 'I', 't', 'e', 'm', 0,
    'a', 's', 'c', 'e', 'n', 'd', 'i', 'n', 'g', 0,
    'S', 'e', 't', 'H', 'i', 'd', 'd', 'e', 'n', 0,
    'r', 'e', 's', 'i', 'z', 'a', 'b', 'l', 'e', 0,
    'I', 's', 'S', 'o', 'r', 't', 'K', 'e', 'y', 0,
    'I', 's', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'A', 'l', 'l', 0,
    'i', 'm', 'a', 'g', 'e', 'L', 'i', 's', 't', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'M', 'a', 'x', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'M', 'i', 'n', 0,
    'D', 'o', 'S', 'e', 't', 'S', 'i', 'z', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'S', 'i', 'z', 'e', 0,
    'v', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    's', 'i', 'z', 'e', 'F', 'l', 'a', 'g', 's', 0,
    'T', 'r', 'y', 'B', 'e', 'f', 'o', 'r', 'e', 0,
    'S', 'e', 't', 'B', 'i', 't', 'm', 'a', 'p', 0,
    'I', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'G', 'e', 't', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'G', 'e', 't', 'B', 'i', 't', 'm', 'a', 'p', 0,
    'S', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'S', 'e', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'T', 'L', 'I', '_', 'L', 'A', 'S', 'T', 0,
    'W', 'i', 'd', 't', 'h', 'F', 'o', 'r', 0,
    't', 'r', 'e', 'e', 'l', 'i', 's', 't', 0,
    'e', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 0,
    'G', 'e', 't', 'S', 't', 'o', 'r', 'e', 0,
    'S', 'e', 't', 'C', 'a', 'c', 'h', 'e', 0,
    'S', 'e', 't', 'M', 'o', 'd', 'e', 'l', 0,
    'G', 'e', 't', 'M', 'o', 'd', 'e', 'l', 0,
    'E', 'd', 'i', 't', 'I', 't', 'e', 'm', 0,
    'n', 'e', 'w', '_', 's', 'i', 'z', 'e', 0,
    'H', 'a', 's', 'V', 'a', 'l', 'u', 'e', 0,
    'c', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'n', 'o', 't', 'i', 'f', 'i', 'e', 'r', 0,
    '_', '_', 'h', 'a', 's', 'h', '_', '_', 0,
    'A', 'c', 't', 'i', 'v', 'a', 't', 'e', 0,
    'U', 'n', 's', 'e', 'l', 'e', 'c', 't', 0,
    'p', 'r', 'e', 'v', 'i', 'o', 'u', 's', 0,
    's', 'o', 'r', 't', 'a', 'b', 'l', 'e', 0,
    'm', 'i', 'n', 'W', 'i', 'd', 't', 'h', 0,
    'I', 's', 'H', 'i', 'd', 'd', 'e', 'n', 0,
    'C', 'o', 'l', 'l', 'a', 'p', 's', 'e', 0,
    'N', 'O', '_', 'I', 'M', 'A', 'G', 'E', 0,
    'S', 'e', 't', 'T', 'i', 't', 'l', 'e', 0,
    'G', 'e', 't', 'T', 'i', 't', 'l', 'e', 0,
    'D', 'o', 'F', 'r', 'e', 'e', 'z', 'e', 0,
    'D', 'o', 'E', 'n', 'a', 'b', 'l', 'e', 0,
    'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 0,
    'c', 'a', 'n', 'F', 'o', 'c', 'u', 's', 0,
    'A', 'd', 'd', 'C', 'h', 'i', 'l', 'd', 0,
    'S', 'e', 't', 'O', 'w', 'n', 'e', 'r', 0,
    'G', 'e', 't', 'O', 'w', 'n', 'e', 'r', 0,
    'S', 'e', 't', 'F', 'l', 'a', 'g', 's', 0,
    'T', 'r', 'y', 'A', 'f', 't', 'e', 'r', 0,
    'S', 'e', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'G', 'e', 't', 'F', 'l', 'a', 'g', 's', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'S', 'e', 't', 'W', 'i', 'd', 't', 'h', 0,
    'G', 'e', 't', 'C', 'o', 'u', 'n', 't', 0,
    '_', '_', 'b', 'o', 'o', 'l', '_', '_', 0,
    'G', 'e', 't', 'W', 'i', 'd', 't', 'h', 0,
    'G', 'e', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'G', 'e', 't', 'V', 'i', 'e', 'w', 0,
    'G', 'e', 't', 'A', 't', 't', 'r', 0,
    'C', 'l', 'e', 'a', 'r', 'e', 'd', 0,
    'G', 'e', 't', 'B', 'o', 'l', 'd', 0,
    'S', 'e', 't', 'B', 'o', 'l', 'd', 0,
    'e', 'v', 't', 'T', 'y', 'p', 'e', 0,
    'S', 'e', 't', 'I', 't', 'e', 'm', 0,
    'H', 'a', 's', 'F', 'o', 'n', 't', 0,
    'c', 'h', 'o', 'i', 'c', 'e', 's', 0,
    'u', 'n', 'i', 't', 'M', 'a', 'x', 0,
    'u', 'n', 'i', 't', 'M', 'i', 'n', 0,
    'v', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'G', 'e', 't', 'I', 't', 'e', 'm', 0,
    'G', 'e', 't', 'M', 'o', 'd', 'e', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'S', 'e', 't', 'I', 'c', 'o', 'n', 0,
    'S', 'e', 't', 'T', 'e', 'x', 't', 0,
    'G', 'e', 't', 'T', 'e', 'x', 't', 0,
    'x', 'o', 'f', 'f', 's', 'e', 't', 0,
    'G', 'e', 't', 'I', 'c', 'o', 'n', 0,
    '_', '_', 'l', 'e', 'n', '_', '_', 0,
    'D', 'e', 's', 't', 'r', 'o', 'y', 0,
    'H', 'i', 't', 'T', 'e', 's', 't', 0,
    'o', 'p', 'e', 'n', 'e', 'd', 0,
    'c', 'l', 'o', 's', 'e', 'd', 0,
    'v', 'a', 'l', 'u', 'e', 's', 0,
    'R', 'e', 'n', 'd', 'e', 'r', 0,
    'e', 'd', 'i', 't', 'o', 'r', 0,
    'b', 'e', 'f', 'o', 'r', 'e', 0,
    'R', 'e', 's', 'o', 'r', 't', 0,
    'c', 'l', 'i', 'e', 'n', 't', 0,
    'd', 'i', 'a', 'l', 'o', 'g', 0,
    'h', 'i', 'd', 'd', 'e', 'n', 0,
    'i', 'n', 'd', 'e', 'n', 't', 0,
    'r', 'o', 'w', 'M', 'a', 'x', 0,
    'r', 'o', 'w', 'M', 'i', 'n', 0,
    'D', 'o', 'T', 'h', 'a', 'w', 0,
    'E', 'x', 'p', 'a', 'n', 'd', 0,
    'e', 'f', 'f', 'e', 'c', 't', 0,
    'S', 'e', 'l', 'e', 'c', 't', 0,
    'p', 'a', 'r', 'e', 'n', 't', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 0,
    'C', 'r', 'e', 'a', 't', 'e', 0,
    'b', 'i', 't', 'm', 'a', 'p', 0,
    's', 't', 'r', 'e', 'a', 'm', 0,
    'G', 'e', 't', 'R', 'o', 'w', 0,
    'c', 'u', 'r', 's', 'o', 'r', 0,
    'c', 'o', 'l', 'o', 'u', 'r', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 0,
    'h', 'e', 'i', 'g', 'h', 't', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
    'f', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 'c', 'o', 'n', 'd', 0,
    'f', 'i', 'r', 's', 't', 0,
    'a', 'l', 'l', 'o', 'w', 0,
    'm', 'o', 'd', 'e', 'l', 0,
    'p', 'o', 'p', 'u', 'p', 0,
    'i', 't', 'e', 'm', '2', 0,
    'i', 't', 'e', 'm', '1', 0,
    'G', 'e', 't', 'I', 'D', 0,
    'i', 't', 'e', 'm', 's', 0,
    'f', 'r', 'o', 'm', '_', 0,
    'o', 'w', 'n', 'e', 'r', 0,
    'l', 'a', 'b', 'e', 'l', 0,
    's', 'i', 'z', 'e', 'r', 0,
    'C', 'l', 'o', 'n', 'e', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'l', 'e', 'v', 'e', 'l', 0,
    's', 't', 'a', 't', 'e', 0,
    'c', 'h', 'i', 'l', 'd', 0,
    'a', 'l', 'i', 'g', 'n', 0,
    't', 'i', 't', 'l', 'e', 0,
    'p', 'o', 'i', 'n', 't', 0,
    's', 't', 'y', 'l', 'e', 0,
    'R', 'e', 's', 'e', 't', 0,
    'i', 'n', 'd', 'e', 'x', 0,
    'w', 'i', 'd', 't', 'h', 0,
    'c', 'o', 'u', 'n', 't', 0,
    'f', 'l', 'a', 'g', 's', 0,
    'o', 't', 'h', 'e', 'r', 0,
    'v', 'a', 'l', 'u', 'e', 0,
    'c', 'e', 'l', 'l', 0,
    'a', 't', 't', 'r', 0,
    'u', 'n', 'i', 't', 0,
    'i', 'n', 'c', 'H', 0,
    'i', 'n', 'c', 'W', 0,
    'm', 'a', 'x', 'H', 0,
    'm', 'a', 'x', 'W', 0,
    'm', 'i', 'n', 'H', 0,
    'm', 'i', 'n', 'W', 0,
    'r', 'o', 'w', 's', 0,
    's', 'h', 'o', 'w', 0,
    't', 'e', 'x', 't', 0,
    'f', 'o', 'n', 't', 0,
    'i', 'c', 'o', 'n', 0,
    'r', 'e', 'c', 't', 0,
    'n', 'a', 'm', 'e', 0,
    'm', 'o', 'd', 'e', 0,
    'I', 's', 'O', 'k', 0,
    't', 'i', 'm', 'e', 0,
    'i', 't', 'e', 'm', 0,
    'i', 'n', 'f', 'o', 0,
    'd', 'a', 't', 'a', 0,
    'd', 'v', 'c', 0,
    's', 'e', 'l', 0,
    't', 'o', '_', 0,
    'i', 'd', 'x', 0,
    'b', 'u', 'f', 0,
    'm', 's', 'g', 0,
    'm', 'a', 'x', 0,
    'c', 'o', 'l', 0,
    'r', 'o', 'w', 0,
    'p', 'o', 's', 0,
    'm', 'i', 'n', 0,
    's', 't', 'r', 0,
    'o', 'b', 'j', 0,
    'd', 'c', 0,
    'i', 'd', 0,
};
wxVariant wxDVCVariant_in_helper(PyObject* source)
{
    wxVariant ret;

    if (source == Py_None) {
        ret.MakeNull();
    }
    else if (wxPyWrappedPtr_TypeCheck(source, wxT("wxDataViewIconText"))) {
        wxDataViewIconText* ptr;
        wxPyConvertWrappedPtr(source, (void**)&ptr, wxT("wxDataViewIconText"));
        ret << *ptr;
    }
    else
        ret = wxVariant_in_helper(source);
    return ret;
}


PyObject* wxDVCVariant_out_helper(const wxVariant& value)
{
    PyObject* ret;

    if ( value.IsType("wxDataViewIconText") )
    {
        wxDataViewIconText val;
        val << value;
        ret = wxPyConstructObject(new wxDataViewIconText(val), wxT("wxDataViewIconText"), 0);
    }
    else
        ret = wxVariant_out_helper(value);
    return ret;
}

int sipVH__dataview_61(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxTreeListCtrl*treelist,uint column, ::wxTreeListItem first, ::wxTreeListItem second)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DuNN", treelist, sipType_wxTreeListCtrl, SIP_NULLPTR, column, new  ::wxTreeListItem(first), sipType_wxTreeListItem, SIP_NULLPTR, new  ::wxTreeListItem(second), sipType_wxTreeListItem, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

 ::wxDVCVariant sipVH__dataview_60(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDVCVariant& value)
{
     ::wxDVCVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::wxDVCVariant(value), sipType_wxDVCVariant, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxDVCVariant, &sipRes);

    return sipRes;
}

 ::wxEvent* sipVH__dataview_59(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxEvent* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_wxEvent, &sipRes);

    return sipRes;
}

 ::wxEventCategory sipVH__dataview_58(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxEventCategory sipRes = ::wxEVT_CATEGORY_UI;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_wxEventCategory, &sipRes);

    return sipRes;
}

 ::wxBorder sipVH__dataview_57(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxBorder sipRes = ::wxBORDER_DEFAULT;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_wxBorder, &sipRes);

    return sipRes;
}

void sipVH__dataview_56(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindowVariant variant)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "F", variant, sipType_wxWindowVariant);
}

void sipVH__dataview_55(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int x,int y,int width,int height)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iiii", x, y, width, height);
}

void sipVH__dataview_54(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iiiiii", minW, minH, maxW, maxH, incW, incH);
}

void sipVH__dataview_53(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int width,int height)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "ii", width, height);
}

void sipVH__dataview_52(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int x,int y,int width,int height,int sizeFlags)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iiiii", x, y, width, height, sizeFlags);
}

void sipVH__dataview_51(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int*x,int*y)
{
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(ii)", x, y);
}

 ::wxWindow* sipVH__dataview_50(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxWindow* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxWindow, &sipRes);

    return sipRes;
}

void sipVH__dataview_49(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxValidator& validator)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", const_cast< ::wxValidator *>(&validator), sipType_wxValidator, SIP_NULLPTR);
}

 ::wxValidator* sipVH__dataview_48(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxValidator* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxValidator, &sipRes);

    return sipRes;
}

 ::wxPoint sipVH__dataview_47(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxPoint sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxPoint, &sipRes);

    return sipRes;
}

bool sipVH__dataview_46(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int direction,int size,int availableOtherDir)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "iii", direction, size, availableOtherDir);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__dataview_45(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxEvent& event)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", &event, sipType_wxEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH__dataview_44(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindowBase*child)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", child, sipType_wxWindowBase, SIP_NULLPTR);
}

 ::wxAlignment sipVH__dataview_43(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxAlignment sipRes = ::wxALIGN_INVALID;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_wxAlignment, &sipRes);

    return sipRes;
}

 ::wxBitmap sipVH__dataview_42(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxBitmap sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxBitmap, &sipRes);

    return sipRes;
}

 ::wxString sipVH__dataview_41(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxString sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxString, &sipRes);

    return sipRes;
}

void sipVH__dataview_40(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxString& title)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::wxString(title), sipType_wxString, SIP_NULLPTR);
}

void sipVH__dataview_39(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxBitmap& bitmap)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::wxBitmap(bitmap), sipType_wxBitmap, SIP_NULLPTR);
}

void sipVH__dataview_38(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxAlignment align)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "F", align, sipType_wxAlignment);
}

void sipVH__dataview_37(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, bool ascending)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "b", ascending);
}

bool sipVH__dataview_36(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxPoint& cursor,const  ::wxRect& cell, ::wxDataViewModel*model,const  ::wxDataViewItem& item,uint col)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NNDNu", new  ::wxPoint(cursor), sipType_wxPoint, SIP_NULLPTR, new  ::wxRect(cell), sipType_wxRect, SIP_NULLPTR, model, sipType_wxDataViewModel, SIP_NULLPTR, new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR, col);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__dataview_35(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxRect cell, ::wxDC*dc,int state)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NDi", new  ::wxRect(cell), sipType_wxRect, SIP_NULLPTR, dc, sipType_wxDC, SIP_NULLPTR, state);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__dataview_34(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxRect cell, ::wxDataViewModel*model,const  ::wxDataViewItem& item,uint col)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NDNu", new  ::wxRect(cell), sipType_wxRect, SIP_NULLPTR, model, sipType_wxDataViewModel, SIP_NULLPTR, new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR, col);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__dataview_33(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPoint cursor, ::wxRect cell, ::wxDataViewModel*model,const  ::wxDataViewItem& item,uint col)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NNDNu", new  ::wxPoint(cursor), sipType_wxPoint, SIP_NULLPTR, new  ::wxRect(cell), sipType_wxRect, SIP_NULLPTR, model, sipType_wxDataViewModel, SIP_NULLPTR, new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR, col);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::wxSize sipVH__dataview_32(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxSize sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxSize, &sipRes);

    return sipRes;
}

bool sipVH__dataview_31(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxRect& cell, ::wxDataViewModel*model,const  ::wxDataViewItem& item,uint col,const  ::wxMouseEvent*mouseEvent)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NDNuD", new  ::wxRect(cell), sipType_wxRect, SIP_NULLPTR, model, sipType_wxDataViewModel, SIP_NULLPTR, new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR, col, const_cast< ::wxMouseEvent *>(mouseEvent), sipType_wxMouseEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__dataview_30(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindow*editor, ::wxVariant& value)
{
    bool sipRes = 0;
    int sipIsErr = 0;

        PyObject *sipResObj = sipCallMethod(&sipIsErr, sipMethod, "D", editor, sipType_wxWindow, NULL);
        if (sipResObj == NULL) {
            if (PyErr_Occurred())
                PyErr_Print();
            sipRes = false;
        }
        else if (sipResObj == Py_None) {
            sipRes = false;
        } else {
            sipRes = true;
            sipParseResult(&sipIsErr, sipMethod, sipResObj, "H5", sipType_wxDVCVariant, &value);
        }

    Py_DECREF(sipMethod);

    if (sipIsErr)
        sipCallErrorHandler(sipErrorHandler, sipPySelf, sipGILState);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH__dataview_29(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDataViewItem& item, ::wxRect labelRect)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NN", new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR, new  ::wxRect(labelRect), sipType_wxRect, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__dataview_28(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindow*editor, ::wxVariant& value)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", editor, sipType_wxWindow, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(bH5)", &sipRes, sipType_wxDVCVariant, &value);

    return sipRes;
}

 ::wxWindow* sipVH__dataview_27(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindow*parent, ::wxRect labelRect,const  ::wxVariant& value)
{
     ::wxWindow* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DNN", parent, sipType_wxWindow, SIP_NULLPTR, new  ::wxRect(labelRect), sipType_wxRect, SIP_NULLPTR, new  ::wxDVCVariant(value), sipType_wxDVCVariant, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxWindow, &sipRes);

    return sipRes;
}

bool sipVH__dataview_26(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxDVCVariant& value)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", &value, sipType_wxDVCVariant, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__dataview_25(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxVariant& value)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::wxDVCVariant(value), sipType_wxDVCVariant, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH__dataview_24(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int align)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "i", align);
}

bool sipVH__dataview_23(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxVariant& value)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(bH5)", &sipRes, sipType_wxDVCVariant, &value);

    return sipRes;
}

 ::wxDataViewCellMode sipVH__dataview_22(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxDataViewCellMode sipRes = ::wxDATAVIEW_CELL_INERT;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_wxDataViewCellMode, &sipRes);

    return sipRes;
}

int sipVH__dataview_21(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

void sipVH__dataview_20(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxDVCVariant& variant,const  ::wxDataViewItem& item,uint col)
{
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "Nu", new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR, col);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxDVCVariant, &variant);
}

bool sipVH__dataview_19(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDVCVariant& variant,uint row,uint col)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "Nuu", new  ::wxDVCVariant(variant), sipType_wxDVCVariant, SIP_NULLPTR, row, col);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH__dataview_18(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxVariant& variant,uint row,uint col)
{
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "uu", row, col);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxDVCVariant, &variant);
}

uint sipVH__dataview_17(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDataViewItem& item)
{
    uint sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "u", &sipRes);

    return sipRes;
}

bool sipVH__dataview_16(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, uint row,uint col)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "uu", row, col);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__dataview_15(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, uint row,uint col, ::wxDataViewItemAttr& attr)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "uuD", row, col, &attr, sipType_wxDataViewItemAttr, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__dataview_14(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDVCVariant& variant,const  ::wxDataViewItem& item,uint col)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NNu", new  ::wxDVCVariant(variant), sipType_wxDVCVariant, SIP_NULLPTR, new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR, col);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH__dataview_13(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxVariant& variant,const  ::wxDataViewItem& item,uint col)
{
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "Nu", new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR, col);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxDVCVariant, &variant);
}

 ::wxDataViewItem sipVH__dataview_12(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDataViewItem& item)
{
     ::wxDataViewItem sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxDataViewItem, &sipRes);

    return sipRes;
}

 ::wxString sipVH__dataview_11(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, uint col)
{
     ::wxString sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "u", col);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxString, &sipRes);

    return sipRes;
}

uint sipVH__dataview_10(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    uint sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "u", &sipRes);

    return sipRes;
}

uint sipVH__dataview_9(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDataViewItem& item, ::wxDataViewItemArray& children)
{
    uint sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "ND", new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR, &children, sipType_wxDataViewItemArray, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "u", &sipRes);

    return sipRes;
}

bool sipVH__dataview_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDataViewItem& item,uint col, ::wxDataViewItemAttr& attr)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NuD", new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR, col, &attr, sipType_wxDataViewItemAttr, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

int sipVH__dataview_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDataViewItem& item1,const  ::wxDataViewItem& item2,uint column,bool ascending)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NNub", new  ::wxDataViewItem(item1), sipType_wxDataViewItem, SIP_NULLPTR, new  ::wxDataViewItem(item2), sipType_wxDataViewItem, SIP_NULLPTR, column, ascending);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

bool sipVH__dataview_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDataViewItem& item,uint col)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "Nu", new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR, col);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH__dataview_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "");
}

bool sipVH__dataview_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDataViewItemArray& items)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::wxDataViewItemArray(items), sipType_wxDataViewItemArray, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__dataview_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDataViewItem& parent,const  ::wxDataViewItemArray& items)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NN", new  ::wxDataViewItem(parent), sipType_wxDataViewItem, SIP_NULLPTR, new  ::wxDataViewItemArray(items), sipType_wxDataViewItemArray, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__dataview_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDataViewItem& item)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__dataview_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxDataViewItem& parent,const  ::wxDataViewItem& item)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NN", new  ::wxDataViewItem(parent), sipType_wxDataViewItem, SIP_NULLPTR, new  ::wxDataViewItem(item), sipType_wxDataViewItem, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__dataview_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}
static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxDataViewColumnFlags, {0}, 0}, sipNameNr_DataViewColumnFlags, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxDataViewCellRenderState, {0}, 0}, sipNameNr_DataViewCellRenderState, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxDataViewCellMode, {0}, 0}, sipNameNr_DataViewCellMode, -1, SIP_NULLPTR},
};

/* These are the enum members of all global enums. */
static sipEnumMemberDef enummembers[] = {
    {sipName_DATAVIEW_CELL_ACTIVATABLE, static_cast<int>(::wxDATAVIEW_CELL_ACTIVATABLE), 2},
    {sipName_DATAVIEW_CELL_EDITABLE, static_cast<int>(::wxDATAVIEW_CELL_EDITABLE), 2},
    {sipName_DATAVIEW_CELL_FOCUSED, static_cast<int>(::wxDATAVIEW_CELL_FOCUSED), 3},
    {sipName_DATAVIEW_CELL_INERT, static_cast<int>(::wxDATAVIEW_CELL_INERT), 2},
    {sipName_DATAVIEW_CELL_INSENSITIVE, static_cast<int>(::wxDATAVIEW_CELL_INSENSITIVE), 3},
    {sipName_DATAVIEW_CELL_PRELIT, static_cast<int>(::wxDATAVIEW_CELL_PRELIT), 3},
    {sipName_DATAVIEW_CELL_SELECTED, static_cast<int>(::wxDATAVIEW_CELL_SELECTED), 3},
    {sipName_DATAVIEW_COL_HIDDEN, static_cast<int>(::wxDATAVIEW_COL_HIDDEN), 7},
    {sipName_DATAVIEW_COL_REORDERABLE, static_cast<int>(::wxDATAVIEW_COL_REORDERABLE), 7},
    {sipName_DATAVIEW_COL_RESIZABLE, static_cast<int>(::wxDATAVIEW_COL_RESIZABLE), 7},
    {sipName_DATAVIEW_COL_SORTABLE, static_cast<int>(::wxDATAVIEW_COL_SORTABLE), 7},
};


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes__dataview[] = {
    &sipTypeDef__dataview_wxDVCVariant.mtd_base,
    &sipTypeDef__dataview_wxDataViewBitmapRenderer.ctd_base,
    &enumTypes[2].etd_base,
    &enumTypes[1].etd_base,
    &sipTypeDef__dataview_wxDataViewCheckIconTextRenderer.ctd_base,
    &sipTypeDef__dataview_wxDataViewChoiceRenderer.ctd_base,
    &sipTypeDef__dataview_wxDataViewColumn.ctd_base,
    &enumTypes[0].etd_base,
    &sipTypeDef__dataview_wxDataViewCtrl.ctd_base,
    &sipTypeDef__dataview_wxDataViewCustomRenderer.ctd_base,
    &sipTypeDef__dataview_wxDataViewDateRenderer.ctd_base,
    &sipTypeDef__dataview_wxDataViewEvent.ctd_base,
    &sipTypeDef__dataview_wxDataViewIconText.ctd_base,
    &sipTypeDef__dataview_wxDataViewIconTextRenderer.ctd_base,
    &sipTypeDef__dataview_wxDataViewIndexListModel.ctd_base,
    &sipTypeDef__dataview_wxDataViewItem.ctd_base,
    &sipTypeDef__dataview_wxDataViewItemArray.ctd_base,
    &sipTypeDef__dataview_wxDataViewItemAttr.ctd_base,
    &sipTypeDef__dataview_wxDataViewListCtrl.ctd_base,
    &sipTypeDef__dataview_wxDataViewListModel.ctd_base,
    &sipTypeDef__dataview_wxDataViewListStore.ctd_base,
    &sipTypeDef__dataview_wxDataViewModel.ctd_base,
    &sipTypeDef__dataview_wxDataViewModelNotifier.ctd_base,
    &sipTypeDef__dataview_wxDataViewProgressRenderer.ctd_base,
    &sipTypeDef__dataview_wxDataViewRenderer.ctd_base,
    &sipTypeDef__dataview_wxDataViewSpinRenderer.ctd_base,
    &sipTypeDef__dataview_wxDataViewTextRenderer.ctd_base,
    &sipTypeDef__dataview_wxDataViewToggleRenderer.ctd_base,
    &sipTypeDef__dataview_wxDataViewTreeCtrl.ctd_base,
    &sipTypeDef__dataview_wxDataViewTreeStore.ctd_base,
    &sipTypeDef__dataview_wxDataViewValueAdjuster.ctd_base,
    &sipTypeDef__dataview_wxDataViewVirtualListModel.ctd_base,
    &sipTypeDef__dataview_wxTreeListCtrl.ctd_base,
    &sipTypeDef__dataview_wxTreeListEvent.ctd_base,
    &sipTypeDef__dataview_wxTreeListItem.ctd_base,
    &sipTypeDef__dataview_wxTreeListItemComparator.ctd_base,
    &sipTypeDef__dataview_wxVariantVector.mtd_base,
};


/* This defines the types that this module needs to import from _core. */
sipImportedTypeDef sipImportedTypes__dataview__core[] = {
    {"wxAlignment"},
    {"wxArrayInt"},
    {"wxArrayString"},
    {"wxBitmap"},
    {"wxBorder"},
    {"wxCheckBoxState"},
    {"wxClientData"},
    {"wxColour"},
    {"wxCommandEvent"},
    {"wxControl"},
    {"wxDC"},
    {"wxDataFormat"},
    {"wxDataObject"},
    {"wxDragResult"},
    {"wxEllipsizeMode"},
    {"wxEvent"},
    {"wxEventCategory"},
    {"wxEvtHandler"},
    {"wxFont"},
    {"wxHeaderColumn"},
    {"wxIcon"},
    {"wxImageList"},
    {"wxItemAttr"},
    {"wxMouseEvent"},
    {"wxNotifyEvent"},
    {"wxObject"},
    {"wxPoint"},
    {"wxRect"},
    {"wxRefCounter"},
    {"wxSettableHeaderColumn"},
    {"wxSize"},
    {"wxString"},
    {"wxTrackable"},
    {"wxUIntPtr"},
    {"wxValidator"},
    {"wxVariant"},
    {"wxVisualAttributes"},
    {"wxWindow"},
    {"wxWindowBase"},
    {"wxWindowVariant"},
    {SIP_NULLPTR}
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"wx._core", sipImportedTypes__dataview__core, SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


/* Define the strings to be added to this module dictionary. */
static sipStringInstanceDef stringInstances[] = {
    {sipName_DataViewCtrlNameStr, wxDataViewCtrlNameStr, 'N'},
    {sipName_TreeListCtrlNameStr, wxTreeListCtrlNameStr, 'N'},
    {0, 0, 0}
};


/* Define the ints to be added to this module dictionary. */
static sipIntInstanceDef intInstances[] = {
    {sipName_DVC_DEFAULT_MINWIDTH, wxDVC_DEFAULT_MINWIDTH},
    {sipName_DVC_DEFAULT_RENDERER_SIZE, wxDVC_DEFAULT_RENDERER_SIZE},
    {sipName_DVC_DEFAULT_WIDTH, wxDVC_DEFAULT_WIDTH},
    {sipName_DVC_TOGGLE_DEFAULT_WIDTH, wxDVC_TOGGLE_DEFAULT_WIDTH},
    {sipName_DVR_DEFAULT_ALIGNMENT, wxDVR_DEFAULT_ALIGNMENT},
    {sipName_DV_HORIZ_RULES, wxDV_HORIZ_RULES},
    {sipName_DV_MULTIPLE, wxDV_MULTIPLE},
    {sipName_DV_NO_HEADER, wxDV_NO_HEADER},
    {sipName_DV_ROW_LINES, wxDV_ROW_LINES},
    {sipName_DV_SINGLE, wxDV_SINGLE},
    {sipName_DV_VARIABLE_LINE_HEIGHT, wxDV_VARIABLE_LINE_HEIGHT},
    {sipName_DV_VERT_RULES, wxDV_VERT_RULES},
    {sipName_wxEVT_DATAVIEW_CACHE_HINT, wxEVT_DATAVIEW_CACHE_HINT},
    {sipName_wxEVT_DATAVIEW_COLUMN_HEADER_CLICK, wxEVT_DATAVIEW_COLUMN_HEADER_CLICK},
    {sipName_wxEVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK, wxEVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK},
    {sipName_wxEVT_DATAVIEW_COLUMN_REORDERED, wxEVT_DATAVIEW_COLUMN_REORDERED},
    {sipName_wxEVT_DATAVIEW_COLUMN_SORTED, wxEVT_DATAVIEW_COLUMN_SORTED},
    {sipName_wxEVT_DATAVIEW_ITEM_ACTIVATED, wxEVT_DATAVIEW_ITEM_ACTIVATED},
    {sipName_wxEVT_DATAVIEW_ITEM_BEGIN_DRAG, wxEVT_DATAVIEW_ITEM_BEGIN_DRAG},
    {sipName_wxEVT_DATAVIEW_ITEM_COLLAPSED, wxEVT_DATAVIEW_ITEM_COLLAPSED},
    {sipName_wxEVT_DATAVIEW_ITEM_COLLAPSING, wxEVT_DATAVIEW_ITEM_COLLAPSING},
    {sipName_wxEVT_DATAVIEW_ITEM_CONTEXT_MENU, wxEVT_DATAVIEW_ITEM_CONTEXT_MENU},
    {sipName_wxEVT_DATAVIEW_ITEM_DROP, wxEVT_DATAVIEW_ITEM_DROP},
    {sipName_wxEVT_DATAVIEW_ITEM_DROP_POSSIBLE, wxEVT_DATAVIEW_ITEM_DROP_POSSIBLE},
    {sipName_wxEVT_DATAVIEW_ITEM_EDITING_DONE, wxEVT_DATAVIEW_ITEM_EDITING_DONE},
    {sipName_wxEVT_DATAVIEW_ITEM_EDITING_STARTED, wxEVT_DATAVIEW_ITEM_EDITING_STARTED},
    {sipName_wxEVT_DATAVIEW_ITEM_EXPANDED, wxEVT_DATAVIEW_ITEM_EXPANDED},
    {sipName_wxEVT_DATAVIEW_ITEM_EXPANDING, wxEVT_DATAVIEW_ITEM_EXPANDING},
    {sipName_wxEVT_DATAVIEW_ITEM_START_EDITING, wxEVT_DATAVIEW_ITEM_START_EDITING},
    {sipName_wxEVT_DATAVIEW_ITEM_VALUE_CHANGED, wxEVT_DATAVIEW_ITEM_VALUE_CHANGED},
    {sipName_wxEVT_DATAVIEW_SELECTION_CHANGED, wxEVT_DATAVIEW_SELECTION_CHANGED},
    {sipName_wxEVT_TREELIST_COLUMN_SORTED, wxEVT_TREELIST_COLUMN_SORTED},
    {sipName_wxEVT_TREELIST_ITEM_ACTIVATED, wxEVT_TREELIST_ITEM_ACTIVATED},
    {sipName_wxEVT_TREELIST_ITEM_CHECKED, wxEVT_TREELIST_ITEM_CHECKED},
    {sipName_wxEVT_TREELIST_ITEM_CONTEXT_MENU, wxEVT_TREELIST_ITEM_CONTEXT_MENU},
    {sipName_wxEVT_TREELIST_ITEM_EXPANDED, wxEVT_TREELIST_ITEM_EXPANDED},
    {sipName_wxEVT_TREELIST_ITEM_EXPANDING, wxEVT_TREELIST_ITEM_EXPANDING},
    {sipName_wxEVT_TREELIST_SELECTION_CHANGED, wxEVT_TREELIST_SELECTION_CHANGED},
    {sipName_TL_SINGLE, wxTL_SINGLE},
    {sipName_TL_MULTIPLE, wxTL_MULTIPLE},
    {sipName_TL_CHECKBOX, wxTL_CHECKBOX},
    {sipName_TL_3STATE, wxTL_3STATE},
    {sipName_TL_USER_3STATE, wxTL_USER_3STATE},
    {sipName_TL_NO_HEADER, wxTL_NO_HEADER},
    {sipName_TL_DEFAULT_STYLE, wxTL_DEFAULT_STYLE},
    {sipName_TL_STYLE_MASK, wxTL_STYLE_MASK},
    {0, 0}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI__dataview = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_wx__dataview,
    0,
    sipStrings__dataview,
    importsTable,
    SIP_NULLPTR,
    37,
    sipExportedTypes__dataview,
    SIP_NULLPTR,
    11,
    enummembers,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, stringInstances, intInstances, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI__dataview;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit__dataview
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        init_dataview
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_NULLPTR, SIP_NULLPTR, 0, SIP_NULLPTR}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "wx._dataview",
        SIP_NULLPTR,
        -1,
        sip_methods,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_wx__dataview, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_wx__dataview), sip_methods);
#endif

    if (sipModule == SIP_NULLPTR)
        SIP_MODULE_RETURN(SIP_NULLPTR);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("wx.siplib");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("wx.siplib"));
#endif

    if (sip_sipmod == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == SIP_NULLPTR || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == SIP_NULLPTR || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI__dataview = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, "wx.siplib._C_API"));
#else
    sipAPI__dataview = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI__dataview == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI__dataview,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI__dataview,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    /*
     * Define the class, mapped type and enum instances that have to be
     * added inline.
     */
    sipAddTypeInstance(sipModuleDict,sipName_TLI_FIRST,const_cast< ::wxTreeListItem *>(& ::wxTLI_FIRST),sipType_wxTreeListItem);
    sipAddTypeInstance(sipModuleDict,sipName_TLI_LAST,const_cast< ::wxTreeListItem *>(& ::wxTLI_LAST),sipType_wxTreeListItem);

    SIP_MODULE_RETURN(sipModule);
}
