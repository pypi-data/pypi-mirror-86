/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_glcanvas.h"

        #include <wx/glcanvas.h>



PyDoc_STRVAR(doc_wxGLAttributes_RGBA, "RGBA() -> GLAttributes\n"
"\n"
"Use true colour instead of colour index rendering for each pixel.");

extern "C" {static PyObject *meth_wxGLAttributes_RGBA(PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_RGBA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxGLAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGLAttributes, &sipCpp))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->RGBA();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_RGBA, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_BufferSize, "BufferSize(val) -> GLAttributes\n"
"\n"
"Specifies the number of bits for colour buffer.");

extern "C" {static PyObject *meth_wxGLAttributes_BufferSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_BufferSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxGLAttributes *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGLAttributes, &sipCpp, &val))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->BufferSize(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_BufferSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_Level, "Level(val) -> GLAttributes\n"
"\n"
"Specifies the framebuffer level.");

extern "C" {static PyObject *meth_wxGLAttributes_Level(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_Level(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxGLAttributes *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGLAttributes, &sipCpp, &val))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Level(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_Level, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_DoubleBuffer, "DoubleBuffer() -> GLAttributes\n"
"\n"
"Requests using double buffering.");

extern "C" {static PyObject *meth_wxGLAttributes_DoubleBuffer(PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_DoubleBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxGLAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGLAttributes, &sipCpp))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->DoubleBuffer();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_DoubleBuffer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_Stereo, "Stereo() -> GLAttributes\n"
"\n"
"Use stereoscopic display.");

extern "C" {static PyObject *meth_wxGLAttributes_Stereo(PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_Stereo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxGLAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGLAttributes, &sipCpp))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Stereo();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_Stereo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_AuxBuffers, "AuxBuffers(val) -> GLAttributes\n"
"\n"
"Specifies the number of auxiliary buffers.");

extern "C" {static PyObject *meth_wxGLAttributes_AuxBuffers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_AuxBuffers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxGLAttributes *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGLAttributes, &sipCpp, &val))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->AuxBuffers(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_AuxBuffers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_MinRGBA, "MinRGBA(mRed, mGreen, mBlue, mAlpha) -> GLAttributes\n"
"\n"
"Specifies the minimal number of bits for each colour and alpha.");

extern "C" {static PyObject *meth_wxGLAttributes_MinRGBA(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_MinRGBA(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int mRed;
        int mGreen;
        int mBlue;
        int mAlpha;
         ::wxGLAttributes *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mRed,
            sipName_mGreen,
            sipName_mBlue,
            sipName_mAlpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxGLAttributes, &sipCpp, &mRed, &mGreen, &mBlue, &mAlpha))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->MinRGBA(mRed,mGreen,mBlue,mAlpha);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_MinRGBA, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_Depth, "Depth(val) -> GLAttributes\n"
"\n"
"Specifies number of bits for Z-buffer.");

extern "C" {static PyObject *meth_wxGLAttributes_Depth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_Depth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxGLAttributes *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGLAttributes, &sipCpp, &val))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Depth(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_Depth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_Stencil, "Stencil(val) -> GLAttributes\n"
"\n"
"Specifies number of bits for stencil buffer.");

extern "C" {static PyObject *meth_wxGLAttributes_Stencil(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_Stencil(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxGLAttributes *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGLAttributes, &sipCpp, &val))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Stencil(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_Stencil, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_MinAcumRGBA, "MinAcumRGBA(mRed, mGreen, mBlue, mAlpha) -> GLAttributes\n"
"\n"
"Specifies the minimal number of bits for each accumulator channel.");

extern "C" {static PyObject *meth_wxGLAttributes_MinAcumRGBA(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_MinAcumRGBA(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int mRed;
        int mGreen;
        int mBlue;
        int mAlpha;
         ::wxGLAttributes *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mRed,
            sipName_mGreen,
            sipName_mBlue,
            sipName_mAlpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxGLAttributes, &sipCpp, &mRed, &mGreen, &mBlue, &mAlpha))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->MinAcumRGBA(mRed,mGreen,mBlue,mAlpha);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_MinAcumRGBA, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_SampleBuffers, "SampleBuffers(val) -> GLAttributes\n"
"\n"
"Use multi-sampling support (antialiasing).");

extern "C" {static PyObject *meth_wxGLAttributes_SampleBuffers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_SampleBuffers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxGLAttributes *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGLAttributes, &sipCpp, &val))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->SampleBuffers(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_SampleBuffers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_Samplers, "Samplers(val) -> GLAttributes\n"
"\n"
"Specifies the number of samplers per pixel.");

extern "C" {static PyObject *meth_wxGLAttributes_Samplers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_Samplers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int val;
         ::wxGLAttributes *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGLAttributes, &sipCpp, &val))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Samplers(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_Samplers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_FrameBuffersRGB, "FrameBuffersRGB() -> GLAttributes\n"
"\n"
"Used to request a frame buffer sRGB capable.");

extern "C" {static PyObject *meth_wxGLAttributes_FrameBuffersRGB(PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_FrameBuffersRGB(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxGLAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGLAttributes, &sipCpp))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->FrameBuffersRGB();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_FrameBuffersRGB, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_PlatformDefaults, "PlatformDefaults() -> GLAttributes\n"
"\n"
"Set some typically needed attributes.");

extern "C" {static PyObject *meth_wxGLAttributes_PlatformDefaults(PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_PlatformDefaults(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxGLAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGLAttributes, &sipCpp))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->PlatformDefaults();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_PlatformDefaults, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_Defaults, "Defaults() -> GLAttributes\n"
"\n"
"wxWidgets defaults: RGBA, Z-depth 16 bits, double buffering, 1 sample\n"
"buffer, 4 samplers.");

extern "C" {static PyObject *meth_wxGLAttributes_Defaults(PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_Defaults(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxGLAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGLAttributes, &sipCpp))
        {
             ::wxGLAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Defaults();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGLAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_Defaults, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGLAttributes_EndList, "EndList()\n"
"\n"
"The set of attributes must end with this one; otherwise, the GPU may\n"
"display nothing at all.");

extern "C" {static PyObject *meth_wxGLAttributes_EndList(PyObject *, PyObject *);}
static PyObject *meth_wxGLAttributes_EndList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxGLAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGLAttributes, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EndList();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GLAttributes, sipName_EndList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxGLAttributes(void *, const sipTypeDef *);}
static void *cast_wxGLAttributes(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxGLAttributes *sipCpp = reinterpret_cast< ::wxGLAttributes *>(sipCppV);

    if (targetType == sipType_wxGLAttribsBase)
        return static_cast< ::wxGLAttribsBase *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxGLAttributes(void *, int);}
static void release_wxGLAttributes(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxGLAttributes *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxGLAttributes(Py_ssize_t);}
static void *array_wxGLAttributes(Py_ssize_t sipNrElem)
{
    return new  ::wxGLAttributes[sipNrElem];
}


extern "C" {static void assign_wxGLAttributes(void *, SIP_SSIZE_T, void *);}
static void assign_wxGLAttributes(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxGLAttributes *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxGLAttributes *>(sipSrc);
}


extern "C" {static void *copy_wxGLAttributes(const void *, SIP_SSIZE_T);}
static void *copy_wxGLAttributes(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxGLAttributes(reinterpret_cast<const  ::wxGLAttributes *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxGLAttributes(sipSimpleWrapper *);}
static void dealloc_wxGLAttributes(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxGLAttributes(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxGLAttributes(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxGLAttributes(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::wxGLAttributes *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxGLAttributes();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::wxGLAttributes* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxGLAttributes, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxGLAttributes(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxGLAttributes[] = {{0, 255, 1}};


static PyMethodDef methods_wxGLAttributes[] = {
    {SIP_MLNAME_CAST(sipName_AuxBuffers), SIP_MLMETH_CAST(meth_wxGLAttributes_AuxBuffers), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGLAttributes_AuxBuffers)},
    {SIP_MLNAME_CAST(sipName_BufferSize), SIP_MLMETH_CAST(meth_wxGLAttributes_BufferSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGLAttributes_BufferSize)},
    {SIP_MLNAME_CAST(sipName_Defaults), meth_wxGLAttributes_Defaults, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGLAttributes_Defaults)},
    {SIP_MLNAME_CAST(sipName_Depth), SIP_MLMETH_CAST(meth_wxGLAttributes_Depth), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGLAttributes_Depth)},
    {SIP_MLNAME_CAST(sipName_DoubleBuffer), meth_wxGLAttributes_DoubleBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGLAttributes_DoubleBuffer)},
    {SIP_MLNAME_CAST(sipName_EndList), meth_wxGLAttributes_EndList, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGLAttributes_EndList)},
    {SIP_MLNAME_CAST(sipName_FrameBuffersRGB), meth_wxGLAttributes_FrameBuffersRGB, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGLAttributes_FrameBuffersRGB)},
    {SIP_MLNAME_CAST(sipName_Level), SIP_MLMETH_CAST(meth_wxGLAttributes_Level), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGLAttributes_Level)},
    {SIP_MLNAME_CAST(sipName_MinAcumRGBA), SIP_MLMETH_CAST(meth_wxGLAttributes_MinAcumRGBA), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGLAttributes_MinAcumRGBA)},
    {SIP_MLNAME_CAST(sipName_MinRGBA), SIP_MLMETH_CAST(meth_wxGLAttributes_MinRGBA), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGLAttributes_MinRGBA)},
    {SIP_MLNAME_CAST(sipName_PlatformDefaults), meth_wxGLAttributes_PlatformDefaults, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGLAttributes_PlatformDefaults)},
    {SIP_MLNAME_CAST(sipName_RGBA), meth_wxGLAttributes_RGBA, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGLAttributes_RGBA)},
    {SIP_MLNAME_CAST(sipName_SampleBuffers), SIP_MLMETH_CAST(meth_wxGLAttributes_SampleBuffers), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGLAttributes_SampleBuffers)},
    {SIP_MLNAME_CAST(sipName_Samplers), SIP_MLMETH_CAST(meth_wxGLAttributes_Samplers), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGLAttributes_Samplers)},
    {SIP_MLNAME_CAST(sipName_Stencil), SIP_MLMETH_CAST(meth_wxGLAttributes_Stencil), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGLAttributes_Stencil)},
    {SIP_MLNAME_CAST(sipName_Stereo), meth_wxGLAttributes_Stereo, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGLAttributes_Stereo)}
};

PyDoc_STRVAR(doc_wxGLAttributes, "This class is used for setting display attributes when drawing through\n"
"OpenGL (\"Pixel format\" in MSW and OSX parlance, \"Configs\" in X11).");


sipClassTypeDef sipTypeDef__glcanvas_wxGLAttributes = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxGLAttributes,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_GLAttributes,
        {0, 0, 1},
        16, methods_wxGLAttributes,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxGLAttributes,
    -1,
    -1,
    supers_wxGLAttributes,
    SIP_NULLPTR,
    init_type_wxGLAttributes,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxGLAttributes,
    assign_wxGLAttributes,
    array_wxGLAttributes,
    copy_wxGLAttributes,
    release_wxGLAttributes,
    cast_wxGLAttributes,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
