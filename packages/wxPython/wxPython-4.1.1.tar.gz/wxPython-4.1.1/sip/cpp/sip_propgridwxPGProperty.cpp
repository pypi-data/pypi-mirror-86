/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_propgrid.h"

        #include <wx/propgrid/property.h>

        #include <wx/bitmap.h>
        #include <wx/validate.h>
        #include <wx/colour.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/propgrid.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/property.h>
        #include <wx/dc.h>
        #include <wx/gdicmn.h>
        #include <wx/propgrid/property.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/propgrid/propgrid.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    PyObject* _wxPGProperty_GetAttributes(const wxPGProperty* self)
    {
        const wxPGAttributeStorage& attrs = self->GetAttributes();
        wxPGAttributeStorage::const_iterator it = attrs.StartIteration();
        wxVariant v;
        wxPyThreadBlocker blocker;
        
        PyObject* dict = PyDict_New();
        if ( !dict ) return NULL;
        
        while ( attrs.GetNext( it, v ) ) {
            const wxString& name = v.GetName();
            PyObject* pyStr = wx2PyString(name);
            PyObject* pyVal = wxPGVariant_out_helper(v);
            int res = PyDict_SetItem( dict, pyStr, pyVal );
        }
        return dict;
    }


class sipwxPGProperty : public  ::wxPGProperty
{
public:
    sipwxPGProperty();
    sipwxPGProperty(const  ::wxString&,const  ::wxString&);
    sipwxPGProperty(const  ::wxPGProperty&);
    virtual ~sipwxPGProperty();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxString GetValueAsString(int) const SIP_OVERRIDE;
    void OnValidationFailure( ::wxPGVariant&) SIP_OVERRIDE;
     ::wxPGEditorDialogAdapter* GetEditorDialog() const SIP_OVERRIDE;
     ::wxPGVariant DoGetAttribute(const  ::wxString&) const SIP_OVERRIDE;
    bool DoSetAttribute(const  ::wxString&, ::wxPGVariant&) SIP_OVERRIDE;
    void RefreshChildren() SIP_OVERRIDE;
    int GetChoiceSelection() const SIP_OVERRIDE;
     ::wxPGCellRenderer* GetCellRenderer(int) const SIP_OVERRIDE;
    void OnCustomPaint( ::wxDC&,const  ::wxRect&, ::wxPGPaintData&) SIP_OVERRIDE;
     ::wxValidator* DoGetValidator() const SIP_OVERRIDE;
    const  ::wxPGEditor* DoGetEditorClass() const SIP_OVERRIDE;
     ::wxPGVariant ChildChanged( ::wxPGVariant&,int, ::wxPGVariant&) const SIP_OVERRIDE;
    bool OnEvent( ::wxPropertyGrid*, ::wxWindow*, ::wxEvent&) SIP_OVERRIDE;
     ::wxSize OnMeasureImage(int) const SIP_OVERRIDE;
     ::wxString ValueToString( ::wxPGVariant&,int) const SIP_OVERRIDE;
    bool IntToValue( ::wxPGVariant&,int,int) const SIP_OVERRIDE;
    bool StringToValue( ::wxPGVariant&,const  ::wxString&,int) const SIP_OVERRIDE;
    bool ValidateValue( ::wxPGVariant&, ::wxPGValidationInfo&) const SIP_OVERRIDE;
     ::wxPGVariant DoGetValue() const SIP_OVERRIDE;
    void OnSetValue() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxPGProperty(const sipwxPGProperty &);
    sipwxPGProperty &operator = (const sipwxPGProperty &);

    char sipPyMethods[20];
};

sipwxPGProperty::sipwxPGProperty():  ::wxPGProperty(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPGProperty::sipwxPGProperty(const  ::wxString& label,const  ::wxString& name):  ::wxPGProperty(label,name), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPGProperty::sipwxPGProperty(const  ::wxPGProperty& a0):  ::wxPGProperty(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPGProperty::~sipwxPGProperty()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxString sipwxPGProperty::GetValueAsString(int argFlags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_GetValueAsString);

    if (!sipMeth)
        return  ::wxPGProperty::GetValueAsString(argFlags);

    extern  ::wxString sipVH__propgrid_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__propgrid_21(sipGILState, 0, sipPySelf, sipMeth, argFlags);
}

void sipwxPGProperty::OnValidationFailure( ::wxPGVariant& pendingValue)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_OnValidationFailure);

    if (!sipMeth)
    {
         ::wxPGProperty::OnValidationFailure(pendingValue);
        return;
    }

    extern void sipVH__propgrid_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&);

    sipVH__propgrid_20(sipGILState, 0, sipPySelf, sipMeth, pendingValue);
}

 ::wxPGEditorDialogAdapter* sipwxPGProperty::GetEditorDialog() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_GetEditorDialog);

    if (!sipMeth)
        return  ::wxPGProperty::GetEditorDialog();

    extern  ::wxPGEditorDialogAdapter* sipVH__propgrid_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_19(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPGVariant sipwxPGProperty::DoGetAttribute(const  ::wxString& name) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_DoGetAttribute);

    if (!sipMeth)
        return  ::wxPGProperty::DoGetAttribute(name);

    extern  ::wxPGVariant sipVH__propgrid_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    return sipVH__propgrid_18(sipGILState, 0, sipPySelf, sipMeth, name);
}

bool sipwxPGProperty::DoSetAttribute(const  ::wxString& name, ::wxPGVariant& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_DoSetAttribute);

    if (!sipMeth)
        return  ::wxPGProperty::DoSetAttribute(name,value);

    extern bool sipVH__propgrid_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxPGVariant&);

    return sipVH__propgrid_17(sipGILState, 0, sipPySelf, sipMeth, name, value);
}

void sipwxPGProperty::RefreshChildren()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_RefreshChildren);

    if (!sipMeth)
    {
         ::wxPGProperty::RefreshChildren();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxPGProperty::GetChoiceSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_GetChoiceSelection);

    if (!sipMeth)
        return  ::wxPGProperty::GetChoiceSelection();

    extern int sipVH__propgrid_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_16(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPGCellRenderer* sipwxPGProperty::GetCellRenderer(int column) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_GetCellRenderer);

    if (!sipMeth)
        return  ::wxPGProperty::GetCellRenderer(column);

    extern  ::wxPGCellRenderer* sipVH__propgrid_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__propgrid_15(sipGILState, 0, sipPySelf, sipMeth, column);
}

void sipwxPGProperty::OnCustomPaint( ::wxDC& dc,const  ::wxRect& rect, ::wxPGPaintData& paintdata)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_OnCustomPaint);

    if (!sipMeth)
    {
         ::wxPGProperty::OnCustomPaint(dc,rect,paintdata);
        return;
    }

    extern void sipVH__propgrid_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&,const  ::wxRect&, ::wxPGPaintData&);

    sipVH__propgrid_14(sipGILState, 0, sipPySelf, sipMeth, dc, rect, paintdata);
}

 ::wxValidator* sipwxPGProperty::DoGetValidator() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_DoGetValidator);

    if (!sipMeth)
        return  ::wxPGProperty::DoGetValidator();

    extern  ::wxValidator* sipVH__propgrid_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_13(sipGILState, 0, sipPySelf, sipMeth);
}

const  ::wxPGEditor* sipwxPGProperty::DoGetEditorClass() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_DoGetEditorClass);

    if (!sipMeth)
        return  ::wxPGProperty::DoGetEditorClass();

    extern const  ::wxPGEditor* sipVH__propgrid_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_12(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPGVariant sipwxPGProperty::ChildChanged( ::wxPGVariant& thisValue,int childIndex, ::wxPGVariant& childValue) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_ChildChanged);

    if (!sipMeth)
        return  ::wxPGProperty::ChildChanged(thisValue,childIndex,childValue);

    extern  ::wxPGVariant sipVH__propgrid_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&,int, ::wxPGVariant&);

    return sipVH__propgrid_11(sipGILState, 0, sipPySelf, sipMeth, thisValue, childIndex, childValue);
}

bool sipwxPGProperty::OnEvent( ::wxPropertyGrid*propgrid, ::wxWindow*wnd_primary, ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_OnEvent);

    if (!sipMeth)
        return  ::wxPGProperty::OnEvent(propgrid,wnd_primary,event);

    extern bool sipVH__propgrid_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPropertyGrid*, ::wxWindow*, ::wxEvent&);

    return sipVH__propgrid_10(sipGILState, 0, sipPySelf, sipMeth, propgrid, wnd_primary, event);
}

 ::wxSize sipwxPGProperty::OnMeasureImage(int item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_OnMeasureImage);

    if (!sipMeth)
        return  ::wxPGProperty::OnMeasureImage(item);

    extern  ::wxSize sipVH__propgrid_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__propgrid_9(sipGILState, 0, sipPySelf, sipMeth, item);
}

 ::wxString sipwxPGProperty::ValueToString( ::wxPGVariant& value,int argFlags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_ValueToString);

    if (!sipMeth)
        return  ::wxPGProperty::ValueToString(value,argFlags);

    extern  ::wxString sipVH__propgrid_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&,int);

    return sipVH__propgrid_8(sipGILState, 0, sipPySelf, sipMeth, value, argFlags);
}

bool sipwxPGProperty::IntToValue( ::wxPGVariant& variant,int number,int argFlags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_IntToValue);

    if (!sipMeth)
        return  ::wxPGProperty::IntToValue(variant,number,argFlags);

    extern bool sipVH__propgrid_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&,int,int);

    return sipVH__propgrid_7(sipGILState, 0, sipPySelf, sipMeth, variant, number, argFlags);
}

bool sipwxPGProperty::StringToValue( ::wxPGVariant& variant,const  ::wxString& text,int argFlags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_StringToValue);

    if (!sipMeth)
        return  ::wxPGProperty::StringToValue(variant,text,argFlags);

    extern bool sipVH__propgrid_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&,const  ::wxString&,int);

    return sipVH__propgrid_6(sipGILState, 0, sipPySelf, sipMeth, variant, text, argFlags);
}

bool sipwxPGProperty::ValidateValue( ::wxPGVariant& value, ::wxPGValidationInfo& validationInfo) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_ValidateValue);

    if (!sipMeth)
        return  ::wxPGProperty::ValidateValue(value,validationInfo);

    extern bool sipVH__propgrid_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&, ::wxPGValidationInfo&);

    return sipVH__propgrid_5(sipGILState, 0, sipPySelf, sipMeth, value, validationInfo);
}

 ::wxPGVariant sipwxPGProperty::DoGetValue() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_DoGetValue);

    if (!sipMeth)
        return  ::wxPGProperty::DoGetValue();

    extern  ::wxPGVariant sipVH__propgrid_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPGProperty::OnSetValue()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_OnSetValue);

    if (!sipMeth)
    {
         ::wxPGProperty::OnSetValue();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxPGProperty_OnSetValue, "OnSetValue()\n"
"\n"
"This virtual function is called after m_value has been set.");

extern "C" {static PyObject *meth_wxPGProperty_OnSetValue(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_OnSetValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPGProperty::OnSetValue() : sipCpp->OnSetValue());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_OnSetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_DoGetValue, "DoGetValue() -> PGVariant\n"
"\n"
"Override this to return something else than m_value as the value.");

extern "C" {static PyObject *meth_wxPGProperty_DoGetValue(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_DoGetValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxPGVariant*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGVariant((sipSelfWasArg ? sipCpp-> ::wxPGProperty::DoGetValue() : sipCpp->DoGetValue()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_DoGetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_ValidateValue, "ValidateValue(value, validationInfo) -> bool\n"
"\n"
"Implement this function in derived class to check the value.");

extern "C" {static PyObject *meth_wxPGProperty_ValidateValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_ValidateValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGVariant* value;
        int valueState = 0;
         ::wxPGValidationInfo* validationInfo;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_validationInfo,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGVariant,&value, &valueState, sipType_wxPGValidationInfo, &validationInfo))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPGProperty::ValidateValue(*value,*validationInfo) : sipCpp->ValidateValue(*value,*validationInfo));
            Py_END_ALLOW_THREADS
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_ValidateValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_StringToValue, "StringToValue(text, argFlags=0) -> (bool, variant)\n"
"\n"
"Converts text into wxVariant value appropriate for this property.");

extern "C" {static PyObject *meth_wxPGProperty_StringToValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_StringToValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGVariant* variant;
        const  ::wxString* text;
        int textState = 0;
        int argFlags = 0;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
            sipName_argFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&text, &textState, &argFlags))
        {
            bool sipRes;
            variant = new  ::wxPGVariant();

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPGProperty::StringToValue(*variant,*text,argFlags) : sipCpp->StringToValue(*variant,*text,argFlags));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bN)",sipRes,variant,sipType_wxPGVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_StringToValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_IntToValue, "IntToValue(number, argFlags=0) -> (bool, variant)\n"
"\n"
"Converts integer (possibly a choice selection) into wxVariant value\n"
"appropriate for this property.");

extern "C" {static PyObject *meth_wxPGProperty_IntToValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_IntToValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGVariant* variant;
        int number;
        int argFlags = 0;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_number,
            sipName_argFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_wxPGProperty, &sipCpp, &number, &argFlags))
        {
            bool sipRes;
            variant = new  ::wxPGVariant();

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPGProperty::IntToValue(*variant,number,argFlags) : sipCpp->IntToValue(*variant,number,argFlags));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bN)",sipRes,variant,sipType_wxPGVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_IntToValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_ValueToString, "ValueToString(value, argFlags=0) -> String\n"
"\n"
"Converts property value into a text representation.");

extern "C" {static PyObject *meth_wxPGProperty_ValueToString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_ValueToString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGVariant* value;
        int valueState = 0;
        int argFlags = 0;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_argFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGVariant,&value, &valueState, &argFlags))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxPGProperty::ValueToString(*value,argFlags) : sipCpp->ValueToString(*value,argFlags)));
            Py_END_ALLOW_THREADS
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_ValueToString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetValueFromString, "SetValueFromString(text, flags=PG_PROGRAMMATIC_VALUE) -> bool\n"
"\n"
"Converts string to a value, and if successful, calls SetValue() on it.");

extern "C" {static PyObject *meth_wxPGProperty_SetValueFromString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetValueFromString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* text;
        int textState = 0;
        int flags = wxPG_PROGRAMMATIC_VALUE;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&text, &textState, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetValueFromString(*text,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetValueFromString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetValueFromInt, "SetValueFromInt(value, flags=0) -> bool\n"
"\n"
"Converts integer to a value, and if successful, calls SetValue() on\n"
"it.");

extern "C" {static PyObject *meth_wxPGProperty_SetValueFromInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetValueFromInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long value;
        int flags = 0;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl|i", &sipSelf, sipType_wxPGProperty, &sipCpp, &value, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetValueFromInt(value,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetValueFromInt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_OnMeasureImage, "OnMeasureImage(item=-1) -> wx.Size\n"
"\n"
"Returns size of the custom painted image in front of property.");

extern "C" {static PyObject *meth_wxPGProperty_OnMeasureImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_OnMeasureImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int item = -1;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_wxPGProperty, &sipCpp, &item))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize((sipSelfWasArg ? sipCpp-> ::wxPGProperty::OnMeasureImage(item) : sipCpp->OnMeasureImage(item)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_OnMeasureImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_OnEvent, "OnEvent(propgrid, wnd_primary, event) -> bool\n"
"\n"
"Events received by editor widgets are processed here.");

extern "C" {static PyObject *meth_wxPGProperty_OnEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_OnEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid* propgrid;
         ::wxWindow* wnd_primary;
         ::wxEvent* event;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_propgrid,
            sipName_wnd_primary,
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J8J9", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPropertyGrid, &propgrid, sipType_wxWindow, &wnd_primary, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPGProperty::OnEvent(propgrid,wnd_primary,*event) : sipCpp->OnEvent(propgrid,wnd_primary,*event));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_OnEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_ChildChanged, "ChildChanged(thisValue, childIndex, childValue) -> PGVariant\n"
"\n"
"Called after value of a child property has been altered.");

extern "C" {static PyObject *meth_wxPGProperty_ChildChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_ChildChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGVariant* thisValue;
        int thisValueState = 0;
        int childIndex;
         ::wxPGVariant* childValue;
        int childValueState = 0;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_thisValue,
            sipName_childIndex,
            sipName_childValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1iJ1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGVariant,&thisValue, &thisValueState, &childIndex, sipType_wxPGVariant,&childValue, &childValueState))
        {
             ::wxPGVariant*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGVariant((sipSelfWasArg ? sipCpp-> ::wxPGProperty::ChildChanged(*thisValue,childIndex,*childValue) : sipCpp->ChildChanged(*thisValue,childIndex,*childValue)));
            Py_END_ALLOW_THREADS
            sipReleaseType(thisValue,sipType_wxPGVariant,thisValueState);
            sipReleaseType(childValue,sipType_wxPGVariant,childValueState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_ChildChanged, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_DoGetEditorClass, "DoGetEditorClass() -> PGEditor\n"
"\n"
"Returns pointer to an instance of used editor.");

extern "C" {static PyObject *meth_wxPGProperty_DoGetEditorClass(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_DoGetEditorClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            const  ::wxPGEditor*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPGProperty::DoGetEditorClass() : sipCpp->DoGetEditorClass());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(const_cast< ::wxPGEditor *>(sipRes),sipType_wxPGEditor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_DoGetEditorClass, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_DoGetValidator, "DoGetValidator() -> wx.Validator\n"
"\n"
"Returns pointer to the wxValidator that should be used with the editor\n"
"of this property (NULL for no validator).");

extern "C" {static PyObject *meth_wxPGProperty_DoGetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_DoGetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPGProperty::DoGetValidator() : sipCpp->DoGetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_DoGetValidator, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_OnCustomPaint, "OnCustomPaint(dc, rect, paintdata)\n"
"\n"
"Override to paint an image in front of the property value text or\n"
"drop-down list item (but only if wxPGProperty::OnMeasureImage is\n"
"overridden as well).");

extern "C" {static PyObject *meth_wxPGProperty_OnCustomPaint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_OnCustomPaint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxPGPaintData* paintdata;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_rect,
            sipName_paintdata,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1J9", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, sipType_wxPGPaintData, &paintdata))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPGProperty::OnCustomPaint(*dc,*rect,*paintdata) : sipCpp->OnCustomPaint(*dc,*rect,*paintdata));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_OnCustomPaint, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetCellRenderer, "GetCellRenderer(column) -> PGCellRenderer\n"
"\n"
"Returns used wxPGCellRenderer instance for given property column\n"
"(label=0, value=1).");

extern "C" {static PyObject *meth_wxPGProperty_GetCellRenderer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetCellRenderer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int column;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPGProperty, &sipCpp, &column))
        {
             ::wxPGCellRenderer*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPGProperty::GetCellRenderer(column) : sipCpp->GetCellRenderer(column));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGCellRenderer,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetCellRenderer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetChoiceSelection, "GetChoiceSelection() -> int\n"
"\n"
"Returns which choice is currently selected.");

extern "C" {static PyObject *meth_wxPGProperty_GetChoiceSelection(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetChoiceSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPGProperty::GetChoiceSelection() : sipCpp->GetChoiceSelection());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetChoiceSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_RefreshChildren, "RefreshChildren()\n"
"\n"
"Refresh values of child properties.");

extern "C" {static PyObject *meth_wxPGProperty_RefreshChildren(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_RefreshChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPGProperty::RefreshChildren() : sipCpp->RefreshChildren());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_RefreshChildren, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_DoSetAttribute, "DoSetAttribute(name, value) -> bool\n"
"\n"
"Reimplement this member function to add special handling for\n"
"attributes of this property.");

extern "C" {static PyObject *meth_wxPGProperty_DoSetAttribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_DoSetAttribute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* name;
        int nameState = 0;
         ::wxPGVariant* value;
        int valueState = 0;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&name, &nameState, sipType_wxPGVariant,&value, &valueState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPGProperty::DoSetAttribute(*name,*value) : sipCpp->DoSetAttribute(*name,*value));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_DoSetAttribute, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_DoGetAttribute, "DoGetAttribute(name) -> PGVariant\n"
"\n"
"Returns value of an attribute.");

extern "C" {static PyObject *meth_wxPGProperty_DoGetAttribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_DoGetAttribute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* name;
        int nameState = 0;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&name, &nameState))
        {
             ::wxPGVariant*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGVariant((sipSelfWasArg ? sipCpp-> ::wxPGProperty::DoGetAttribute(*name) : sipCpp->DoGetAttribute(*name)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_DoGetAttribute, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetEditorDialog, "GetEditorDialog() -> PGEditorDialogAdapter\n"
"\n"
"Returns instance of a new wxPGEditorDialogAdapter instance, which is\n"
"used when user presses the (optional) button next to the editor\n"
"control;.");

extern "C" {static PyObject *meth_wxPGProperty_GetEditorDialog(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetEditorDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxPGEditorDialogAdapter*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPGProperty::GetEditorDialog() : sipCpp->GetEditorDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGEditorDialogAdapter,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetEditorDialog, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_OnValidationFailure, "OnValidationFailure(pendingValue)\n"
"\n"
"Called whenever validation has failed with given pending value.");

extern "C" {static PyObject *meth_wxPGProperty_OnValidationFailure(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_OnValidationFailure(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGVariant* pendingValue;
        int pendingValueState = 0;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pendingValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGVariant,&pendingValue, &pendingValueState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPGProperty::OnValidationFailure(*pendingValue) : sipCpp->OnValidationFailure(*pendingValue));
            Py_END_ALLOW_THREADS
            sipReleaseType(pendingValue,sipType_wxPGVariant,pendingValueState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_OnValidationFailure, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_AddChoice, "AddChoice(label, value=PG_INVALID_VALUE) -> int\n"
"\n"
"Append a new choice to property's list of choices.");

extern "C" {static PyObject *meth_wxPGProperty_AddChoice(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_AddChoice(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* label;
        int labelState = 0;
        int value = wxPG_INVALID_VALUE;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&label, &labelState, &value))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddChoice(*label,value);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_AddChoice, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_AddPrivateChild, "AddPrivateChild(prop)\n"
"\n"
"Adds a private child property.");

extern "C" {static PyObject *meth_wxPGProperty_AddPrivateChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_AddPrivateChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* prop;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_prop,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGProperty, &prop))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AddPrivateChild(prop);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_AddPrivateChild, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_AdaptListToValue, "AdaptListToValue(list, value)\n"
"\n"
"Adapts list variant into proper value using consecutive ChildChanged()\n"
"calls.");

extern "C" {static PyObject *meth_wxPGProperty_AdaptListToValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_AdaptListToValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGVariant* list;
        int listState = 0;
         ::wxPGVariant* value;
        int valueState = 0;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_list,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J0", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGVariant,&list, &listState, sipType_wxPGVariant,&value, &valueState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AdaptListToValue(*list,value);
            Py_END_ALLOW_THREADS
            sipReleaseType(list,sipType_wxPGVariant,listState);
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_AdaptListToValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_AppendChild, "AppendChild(childProperty) -> PGProperty\n"
"\n"
"Use this member function to add independent (i.e.");

extern "C" {static PyObject *meth_wxPGProperty_AppendChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_AppendChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* childProperty;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_childProperty,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGProperty, &childProperty))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendChild(childProperty);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_AppendChild, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_AreAllChildrenSpecified, "AreAllChildrenSpecified(pendingList=None) -> bool\n"
"\n"
"Determines, recursively, if all children are not unspecified.");

extern "C" {static PyObject *meth_wxPGProperty_AreAllChildrenSpecified(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_AreAllChildrenSpecified(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGVariant* pendingList = 0;
        int pendingListState = 0;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pendingList,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J0", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGVariant,&pendingList, &pendingListState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AreAllChildrenSpecified(pendingList);
            Py_END_ALLOW_THREADS
            sipReleaseType(pendingList,sipType_wxPGVariant,pendingListState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_AreAllChildrenSpecified, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_AreChildrenComponents, "AreChildrenComponents() -> bool\n"
"\n"
"Returns true if children of this property are component values (for\n"
"instance, points size, face name, and is_underlined are component\n"
"values of a font).");

extern "C" {static PyObject *meth_wxPGProperty_AreChildrenComponents(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_AreChildrenComponents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AreChildrenComponents();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_AreChildrenComponents, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_ChangeFlag, "ChangeFlag(flag, set)\n"
"\n"
"Sets or clears given property flag.");

extern "C" {static PyObject *meth_wxPGProperty_ChangeFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_ChangeFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGPropertyFlags flag;
        bool set;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
            sipName_set,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEb", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGPropertyFlags, &flag, &set))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ChangeFlag(flag,set);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_ChangeFlag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_DeleteChildren, "DeleteChildren()\n"
"\n"
"Deletes children of the property.");

extern "C" {static PyObject *meth_wxPGProperty_DeleteChildren(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_DeleteChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DeleteChildren();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_DeleteChildren, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_DeleteChoice, "DeleteChoice(index)\n"
"\n"
"Removes entry from property's wxPGChoices and editor control (if it is\n"
"active).");

extern "C" {static PyObject *meth_wxPGProperty_DeleteChoice(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_DeleteChoice(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int index;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_index,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPGProperty, &sipCpp, &index))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DeleteChoice(index);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_DeleteChoice, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_Enable, "Enable(enable=True)\n"
"\n"
"Enables or disables the property.");

extern "C" {static PyObject *meth_wxPGProperty_Enable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_Enable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable = 1;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxPGProperty, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Enable(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_Enable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_EnableCommonValue, "EnableCommonValue(enable=True)\n"
"\n"
"Call to enable or disable usage of common value (integer value that\n"
"can be selected for properties instead of their normal values) for\n"
"this property.");

extern "C" {static PyObject *meth_wxPGProperty_EnableCommonValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_EnableCommonValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable = 1;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxPGProperty, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnableCommonValue(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_EnableCommonValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GenerateComposedValue, "GenerateComposedValue() -> String\n"
"\n"
"Composes text from values of child properties.");

extern "C" {static PyObject *meth_wxPGProperty_GenerateComposedValue(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GenerateComposedValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GenerateComposedValue());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GenerateComposedValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetLabel, "GetLabel() -> String\n"
"\n"
"Returns property's label.");

extern "C" {static PyObject *meth_wxPGProperty_GetLabel(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetLabel());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetLabel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetAttribute, "GetAttribute(name) -> PGVariant\n"
"GetAttribute(name, defVal) -> String\n"
"\n"
"Returns property attribute value, null variant if not found.\n"
"");

extern "C" {static PyObject *meth_wxPGProperty_GetAttribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetAttribute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&name, &nameState))
        {
             ::wxPGVariant*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGVariant(sipCpp->GetAttribute(*name));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGVariant,SIP_NULLPTR);
        }
    }

    {
        const  ::wxString* name;
        int nameState = 0;
        const  ::wxString* defVal;
        int defValState = 0;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_defVal,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&name, &nameState, sipType_wxString,&defVal, &defValState))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetAttribute(*name,*defVal));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);
            sipReleaseType(const_cast< ::wxString *>(defVal),sipType_wxString,defValState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetAttribute, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetAttributeAsLong, "GetAttributeAsLong(name, defVal) -> long\n"
"\n"
"Returns named attribute, as long, if found.");

extern "C" {static PyObject *meth_wxPGProperty_GetAttributeAsLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetAttributeAsLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;
        long defVal;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_defVal,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1l", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&name, &nameState, &defVal))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetAttributeAsLong(*name,defVal);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetAttributeAsLong, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetAttributeAsDouble, "GetAttributeAsDouble(name, defVal) -> double\n"
"\n"
"Returns named attribute, as double, if found.");

extern "C" {static PyObject *meth_wxPGProperty_GetAttributeAsDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetAttributeAsDouble(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;
        double defVal;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_defVal,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1d", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&name, &nameState, &defVal))
        {
            double sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetAttributeAsDouble(*name,defVal);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetAttributeAsDouble, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetAttributes, "GetAttributes() -> PyObject\n"
"\n"
"Returns map-like storage of property's attributes.");

extern "C" {static PyObject *meth_wxPGProperty_GetAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxPGProperty_GetAttributes(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetAttributesAsList, "GetAttributesAsList() -> PGVariant\n"
"\n"
"Returns attributes as list wxVariant.");

extern "C" {static PyObject *meth_wxPGProperty_GetAttributesAsList(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetAttributesAsList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxPGVariant*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGVariant(sipCpp->GetAttributesAsList());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetAttributesAsList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetColumnEditor, "GetColumnEditor(column) -> PGEditor\n"
"\n"
"Returns editor used for given column.");

extern "C" {static PyObject *meth_wxPGProperty_GetColumnEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetColumnEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int column;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPGProperty, &sipCpp, &column))
        {
            const  ::wxPGEditor*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnEditor(column);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(const_cast< ::wxPGEditor *>(sipRes),sipType_wxPGEditor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetColumnEditor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetBaseName, "GetBaseName() -> String\n"
"\n"
"Returns property's base name (i.e.");

extern "C" {static PyObject *meth_wxPGProperty_GetBaseName(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetBaseName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetBaseName());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetBaseName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetCell, "GetCell(column) -> PGCell\n"
"\n"
"Returns wxPGCell of given column, creating one if necessary.");

extern "C" {static PyObject *meth_wxPGProperty_GetCell(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetCell(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint column;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxPGProperty, &sipCpp, &column))
        {
             ::wxPGCell*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetCell(column);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGCell,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetCell, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetOrCreateCell, "GetOrCreateCell(column) -> PGCell\n"
"\n"
"Returns wxPGCell of given column, creating one if necessary.");

extern "C" {static PyObject *meth_wxPGProperty_GetOrCreateCell(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetOrCreateCell(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint column;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxPGProperty, &sipCpp, &column))
        {
             ::wxPGCell*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetOrCreateCell(column);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGCell,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetOrCreateCell, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetChildCount, "GetChildCount() -> unsignedint\n"
"\n"
"Returns number of child properties.");

extern "C" {static PyObject *meth_wxPGProperty_GetChildCount(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetChildCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetChildCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetChildCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetChildrenHeight, "GetChildrenHeight(lh, iMax=-1) -> int\n"
"\n"
"Returns height of children, recursively, and by taking\n"
"expanded/collapsed status into account.");

extern "C" {static PyObject *meth_wxPGProperty_GetChildrenHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetChildrenHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int lh;
        int iMax = -1;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_lh,
            sipName_iMax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_wxPGProperty, &sipCpp, &lh, &iMax))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetChildrenHeight(lh,iMax);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetChildrenHeight, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetChoices, "GetChoices() -> PGChoices\n"
"\n"
"Returns read-only reference to property's list of choices.");

extern "C" {static PyObject *meth_wxPGProperty_GetChoices(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetChoices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxPGChoices*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGChoices(sipCpp->GetChoices());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGChoices,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetChoices, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetClientData, "GetClientData() -> ClientData\n"
"\n"
"Gets managed client object of a property.");

extern "C" {static PyObject *meth_wxPGProperty_GetClientData(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetClientData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxClientData*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetClientObject();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxClientData,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetClientData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetDefaultValue, "GetDefaultValue() -> PGVariant\n"
"\n"
"Returns property's default value.");

extern "C" {static PyObject *meth_wxPGProperty_GetDefaultValue(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetDefaultValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxPGVariant*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGVariant(sipCpp->GetDefaultValue());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetDefaultValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetCommonValue, "GetCommonValue() -> int\n"
"\n"
"Returns common value selected for this property.");

extern "C" {static PyObject *meth_wxPGProperty_GetCommonValue(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetCommonValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetCommonValue();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetCommonValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetDepth, "GetDepth() -> unsignedint");

extern "C" {static PyObject *meth_wxPGProperty_GetDepth(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDepth();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetDepth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetDisplayedCommonValueCount, "GetDisplayedCommonValueCount() -> int\n"
"\n"
"Return number of displayed common values for this property.");

extern "C" {static PyObject *meth_wxPGProperty_GetDisplayedCommonValueCount(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetDisplayedCommonValueCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDisplayedCommonValueCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetDisplayedCommonValueCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetDisplayedString, "GetDisplayedString() -> String\n"
"\n"
"Returns property's displayed text.");

extern "C" {static PyObject *meth_wxPGProperty_GetDisplayedString(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetDisplayedString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetDisplayedString());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetDisplayedString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetEditorClass, "GetEditorClass() -> PGEditor\n"
"\n"
"Returns wxPGEditor that will be used and created when property becomes\n"
"selected.");

extern "C" {static PyObject *meth_wxPGProperty_GetEditorClass(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetEditorClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            const  ::wxPGEditor*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetEditorClass();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(const_cast< ::wxPGEditor *>(sipRes),sipType_wxPGEditor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetEditorClass, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetHintText, "GetHintText() -> String\n"
"\n"
"Returns property's hint text (shown in empty value cell).");

extern "C" {static PyObject *meth_wxPGProperty_GetHintText(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetHintText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetHintText());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetHintText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetGrid, "GetGrid() -> PropertyGrid\n"
"\n"
"Returns property grid where property lies.");

extern "C" {static PyObject *meth_wxPGProperty_GetGrid(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetGrid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxPropertyGrid*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetGrid();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPropertyGrid,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetGrid, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetGridIfDisplayed, "GetGridIfDisplayed() -> PropertyGrid\n"
"\n"
"Returns owner wxPropertyGrid, but only if one is currently on a page\n"
"displaying this property.");

extern "C" {static PyObject *meth_wxPGProperty_GetGridIfDisplayed(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetGridIfDisplayed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxPropertyGrid*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetGridIfDisplayed();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPropertyGrid,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetGridIfDisplayed, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetHelpString, "GetHelpString() -> String\n"
"\n"
"Returns property's help or description text.");

extern "C" {static PyObject *meth_wxPGProperty_GetHelpString(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetHelpString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetHelpString());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetHelpString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetFlagsAsString, "GetFlagsAsString(flagsMask) -> String\n"
"\n"
"Gets flags as a'|' delimited string.");

extern "C" {static PyObject *meth_wxPGProperty_GetFlagsAsString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetFlagsAsString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty::FlagType flagsMask;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flagsMask,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxPGProperty, &sipCpp, &flagsMask))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetFlagsAsString(flagsMask));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetFlagsAsString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetIndexInParent, "GetIndexInParent() -> unsignedint\n"
"\n"
"Returns position in parent's array.");

extern "C" {static PyObject *meth_wxPGProperty_GetIndexInParent(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetIndexInParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetIndexInParent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetIndexInParent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetLastVisibleSubItem, "GetLastVisibleSubItem() -> PGProperty\n"
"\n"
"Returns last visible child property, recursively.");

extern "C" {static PyObject *meth_wxPGProperty_GetLastVisibleSubItem(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetLastVisibleSubItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            const  ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetLastVisibleSubItem();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(const_cast< ::wxPGProperty *>(sipRes),sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetLastVisibleSubItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetMainParent, "GetMainParent() -> PGProperty\n"
"\n"
"Returns highest level non-category, non-root parent.");

extern "C" {static PyObject *meth_wxPGProperty_GetMainParent(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetMainParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetMainParent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetMainParent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetMaxLength, "GetMaxLength() -> int\n"
"\n"
"Returns maximum allowed length of the text the user can enter in the\n"
"property text editor.");

extern "C" {static PyObject *meth_wxPGProperty_GetMaxLength(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetMaxLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetMaxLength();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetMaxLength, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetName, "GetName() -> String\n"
"\n"
"Returns property's name with all (non-category, non-root) parents.");

extern "C" {static PyObject *meth_wxPGProperty_GetName(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetName());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetParent, "GetParent() -> PGProperty\n"
"\n"
"Return parent of property.");

extern "C" {static PyObject *meth_wxPGProperty_GetParent(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetParent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetParent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetPropertyByName, "GetPropertyByName(name) -> PGProperty\n"
"\n"
"Returns (direct) child property with given name (or NULL if not\n"
"found).");

extern "C" {static PyObject *meth_wxPGProperty_GetPropertyByName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetPropertyByName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&name, &nameState))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPropertyByName(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetPropertyByName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetValidator, "GetValidator() -> wx.Validator\n"
"\n"
"Gets assignable version of property's validator.");

extern "C" {static PyObject *meth_wxPGProperty_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetValidator();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetValidator, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetValue, "GetValue() -> PGVariant\n"
"\n"
"Returns property's value.");

extern "C" {static PyObject *meth_wxPGProperty_GetValue(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxPGVariant*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGVariant(sipCpp->GetValue());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetValueImage, "GetValueImage() -> wx.Bitmap\n"
"\n"
"Returns bitmap that appears next to value text.");

extern "C" {static PyObject *meth_wxPGProperty_GetValueImage(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetValueImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetValueImage();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetValueImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetValueAsString, "GetValueAsString(argFlags=0) -> String\n"
"\n"
"Returns text representation of property's value.");

extern "C" {static PyObject *meth_wxPGProperty_GetValueAsString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetValueAsString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int argFlags = 0;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_argFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_wxPGProperty, &sipCpp, &argFlags))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxPGProperty::GetValueAsString(argFlags) : sipCpp->GetValueAsString(argFlags)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetValueAsString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetValueType, "GetValueType() -> String\n"
"\n"
"Returns value type used by this property.");

extern "C" {static PyObject *meth_wxPGProperty_GetValueType(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetValueType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetValueType());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetValueType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetY, "GetY() -> int\n"
"\n"
"Returns coordinate to the top y of the property.");

extern "C" {static PyObject *meth_wxPGProperty_GetY(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetY();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetY, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetImageOffset, "GetImageOffset(imageWidth) -> int\n"
"\n"
"Converts image width into full image offset, with margins.");

extern "C" {static PyObject *meth_wxPGProperty_GetImageOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetImageOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int imageWidth;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_imageWidth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPGProperty, &sipCpp, &imageWidth))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetImageOffset(imageWidth);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetImageOffset, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_GetItemAtY, "GetItemAtY(y) -> PGProperty\n"
"\n"
"Returns property at given virtual y coordinate.");

extern "C" {static PyObject *meth_wxPGProperty_GetItemAtY(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_GetItemAtY(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint y;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxPGProperty, &sipCpp, &y))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetItemAtY(y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_GetItemAtY, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_HasFlag, "HasFlag(flag) -> bool\n"
"\n"
"Returns true if property has given flag set.");

extern "C" {static PyObject *meth_wxPGProperty_HasFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_HasFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGPropertyFlags flag;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGPropertyFlags, &flag))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasFlag(flag);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_HasFlag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_HasFlagsExact, "HasFlagsExact(flags) -> bool\n"
"\n"
"Returns true if property has all given flags set.");

extern "C" {static PyObject *meth_wxPGProperty_HasFlagsExact(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_HasFlagsExact(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty::FlagType flags;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxPGProperty, &sipCpp, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasFlagsExact(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_HasFlagsExact, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_HasVisibleChildren, "HasVisibleChildren() -> bool\n"
"\n"
"Returns true if property has even one visible child.");

extern "C" {static PyObject *meth_wxPGProperty_HasVisibleChildren(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_HasVisibleChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasVisibleChildren();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_HasVisibleChildren, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_Hide, "Hide(hide, flags=PG_RECURSE) -> bool\n"
"\n"
"Hides or reveals the property.");

extern "C" {static PyObject *meth_wxPGProperty_Hide(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_Hide(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool hide;
        int flags = wxPG_RECURSE;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_hide,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb|i", &sipSelf, sipType_wxPGProperty, &sipCpp, &hide, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Hide(hide,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_Hide, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_Index, "Index(p) -> int\n"
"\n"
"Returns index of given child property.");

extern "C" {static PyObject *meth_wxPGProperty_Index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_Index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty* p;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGProperty, &p))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Index(p);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_Index, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_InsertChild, "InsertChild(index, childProperty) -> PGProperty\n"
"\n"
"Use this member function to add independent (i.e.");

extern "C" {static PyObject *meth_wxPGProperty_InsertChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_InsertChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int index;
         ::wxPGProperty* childProperty;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_index,
            sipName_childProperty,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ8", &sipSelf, sipType_wxPGProperty, &sipCpp, &index, sipType_wxPGProperty, &childProperty))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertChild(index,childProperty);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_InsertChild, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_InsertChoice, "InsertChoice(label, index, value=PG_INVALID_VALUE) -> int\n"
"\n"
"Inserts a new choice to property's list of choices.");

extern "C" {static PyObject *meth_wxPGProperty_InsertChoice(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_InsertChoice(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* label;
        int labelState = 0;
        int index;
        int value = wxPG_INVALID_VALUE;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_index,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1i|i", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&label, &labelState, &index, &value))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertChoice(*label,index,value);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_InsertChoice, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_IsCategory, "IsCategory() -> bool\n"
"\n"
"Returns true if this property is actually a wxPropertyCategory.");

extern "C" {static PyObject *meth_wxPGProperty_IsCategory(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_IsCategory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsCategory();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_IsCategory, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_IsEnabled, "IsEnabled() -> bool\n"
"\n"
"Returns true if property is enabled.");

extern "C" {static PyObject *meth_wxPGProperty_IsEnabled(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_IsEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsEnabled();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_IsEnabled, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_IsExpanded, "IsExpanded() -> bool\n"
"\n"
"Returns true if property has visible children.");

extern "C" {static PyObject *meth_wxPGProperty_IsExpanded(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_IsExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsExpanded();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_IsExpanded, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_IsRoot, "IsRoot() -> bool\n"
"\n"
"Returns true if this property is actually a wxRootProperty.");

extern "C" {static PyObject *meth_wxPGProperty_IsRoot(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_IsRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsRoot();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_IsRoot, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_IsSubProperty, "IsSubProperty() -> bool\n"
"\n"
"Returns true if this is a sub-property.");

extern "C" {static PyObject *meth_wxPGProperty_IsSubProperty(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_IsSubProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsSubProperty();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_IsSubProperty, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_IsSomeParent, "IsSomeParent(candidateParent) -> bool\n"
"\n"
"Returns true if candidateParent is some parent of this property.");

extern "C" {static PyObject *meth_wxPGProperty_IsSomeParent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_IsSomeParent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* candidateParent;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_candidateParent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGProperty, &candidateParent))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsSomeParent(candidateParent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_IsSomeParent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_IsTextEditable, "IsTextEditable() -> bool\n"
"\n"
"Returns true if property has editable wxTextCtrl when selected.");

extern "C" {static PyObject *meth_wxPGProperty_IsTextEditable(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_IsTextEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsTextEditable();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_IsTextEditable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_IsValueUnspecified, "IsValueUnspecified() -> bool\n"
"\n"
"Returns true if property's value is considered unspecified.");

extern "C" {static PyObject *meth_wxPGProperty_IsValueUnspecified(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_IsValueUnspecified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsValueUnspecified();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_IsValueUnspecified, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_IsVisible, "IsVisible() -> bool\n"
"\n"
"Returns true if all parents expanded.");

extern "C" {static PyObject *meth_wxPGProperty_IsVisible(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_IsVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsVisible();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_IsVisible, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_Item, "Item(i) -> PGProperty\n"
"\n"
"Returns child property at index i.");

extern "C" {static PyObject *meth_wxPGProperty_Item(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_Item(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint i;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxPGProperty, &sipCpp, &i))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Item(i);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_Item, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_Last, "Last() -> PGProperty\n"
"\n"
"Returns last sub-property.");

extern "C" {static PyObject *meth_wxPGProperty_Last(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_Last(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Last();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_Last, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_RecreateEditor, "RecreateEditor() -> bool\n"
"\n"
"If property's editor is created this forces its recreation.");

extern "C" {static PyObject *meth_wxPGProperty_RecreateEditor(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_RecreateEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->RecreateEditor();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_RecreateEditor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_RefreshEditor, "RefreshEditor()\n"
"\n"
"If property's editor is active, then update it's value.");

extern "C" {static PyObject *meth_wxPGProperty_RefreshEditor(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_RefreshEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RefreshEditor();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_RefreshEditor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetAttribute, "SetAttribute(name, value)\n"
"\n"
"Sets an attribute for this property.");

extern "C" {static PyObject *meth_wxPGProperty_SetAttribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetAttribute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;
         ::wxPGVariant* value;
        int valueState = 0;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&name, &nameState, sipType_wxPGVariant,&value, &valueState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetAttribute(*name,*value);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetAttribute, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetAutoUnspecified, "SetAutoUnspecified(enable=True)\n"
"\n"
"Set if user can change the property's value to unspecified by\n"
"modifying the value of the editor control (usually by clearing it).");

extern "C" {static PyObject *meth_wxPGProperty_SetAutoUnspecified(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetAutoUnspecified(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable = 1;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxPGProperty, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetAutoUnspecified(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetAutoUnspecified, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetBackgroundColour, "SetBackgroundColour(colour, flags=PG_RECURSE)\n"
"\n"
"Sets property's background colour.");

extern "C" {static PyObject *meth_wxPGProperty_SetBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* colour;
        int colourState = 0;
        int flags = wxPG_RECURSE;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colour,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxColour, &colour, &colourState, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBackgroundColour(*colour,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(colour),sipType_wxColour,colourState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetEditor, "SetEditor(editor)\n"
"SetEditor(editorName)\n"
"\n"
"Sets editor for a property.\n"
"");

extern "C" {static PyObject *meth_wxPGProperty_SetEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGEditor* editor;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_editor,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGEditor, &editor))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetEditor(editor);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::wxString* editorName;
        int editorNameState = 0;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_editorName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&editorName, &editorNameState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetEditor(*editorName);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(editorName),sipType_wxString,editorNameState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetEditor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetCell, "SetCell(column, cell)\n"
"\n"
"Sets cell information for given column.");

extern "C" {static PyObject *meth_wxPGProperty_SetCell(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetCell(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int column;
        const  ::wxPGCell* cell;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
            sipName_cell,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ9", &sipSelf, sipType_wxPGProperty, &sipCpp, &column, sipType_wxPGCell, &cell))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCell(column,*cell);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetCell, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetCommonValue, "SetCommonValue(commonValue)\n"
"\n"
"Sets common value selected for this property.");

extern "C" {static PyObject *meth_wxPGProperty_SetCommonValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetCommonValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int commonValue;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_commonValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPGProperty, &sipCpp, &commonValue))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCommonValue(commonValue);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetCommonValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetChoices, "SetChoices(choices) -> bool\n"
"\n"
"Sets new set of choices for the property.");

extern "C" {static PyObject *meth_wxPGProperty_SetChoices(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetChoices(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGChoices* choices;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_choices,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGChoices, &choices))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetChoices(*choices);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetChoices, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetClientData, "SetClientData(data)\n"
"\n"
"Sets client object of a property.");

extern "C" {static PyObject *meth_wxPGProperty_SetClientData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetClientData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxClientData* data;
        int dataState = 0;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ2", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxClientData,&data, &dataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetClientObject(data);
            Py_END_ALLOW_THREADS
            sipReleaseType(data,sipType_wxClientData,dataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetClientData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetChoiceSelection, "SetChoiceSelection(newValue)\n"
"\n"
"Sets selected choice and changes property value.");

extern "C" {static PyObject *meth_wxPGProperty_SetChoiceSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetChoiceSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int newValue;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_newValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPGProperty, &sipCpp, &newValue))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetChoiceSelection(newValue);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetChoiceSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetDefaultValue, "SetDefaultValue(value)\n"
"\n"
"Set default value of a property.");

extern "C" {static PyObject *meth_wxPGProperty_SetDefaultValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetDefaultValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGVariant* value;
        int valueState = 0;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGVariant,&value, &valueState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetDefaultValue(*value);
            Py_END_ALLOW_THREADS
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetDefaultValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetExpanded, "SetExpanded(expanded)");

extern "C" {static PyObject *meth_wxPGProperty_SetExpanded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetExpanded(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool expanded;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_expanded,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxPGProperty, &sipCpp, &expanded))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetExpanded(expanded);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetExpanded, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetFlagsFromString, "SetFlagsFromString(str)\n"
"\n"
"Sets flags from a '|' delimited string.");

extern "C" {static PyObject *meth_wxPGProperty_SetFlagsFromString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetFlagsFromString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* str;
        int strState = 0;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_str,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&str, &strState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFlagsFromString(*str);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(str),sipType_wxString,strState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetFlagsFromString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetFlagRecursively, "SetFlagRecursively(flag, set)\n"
"\n"
"Sets or clears given property flag, recursively.");

extern "C" {static PyObject *meth_wxPGProperty_SetFlagRecursively(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetFlagRecursively(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGPropertyFlags flag;
        bool set;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
            sipName_set,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEb", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGPropertyFlags, &flag, &set))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFlagRecursively(flag,set);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetFlagRecursively, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetHelpString, "SetHelpString(helpString)\n"
"\n"
"Sets property's help string, which is shown, for example, in\n"
"wxPropertyGridManager's description text box.");

extern "C" {static PyObject *meth_wxPGProperty_SetHelpString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetHelpString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* helpString;
        int helpStringState = 0;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_helpString,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&helpString, &helpStringState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetHelpString(*helpString);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(helpString),sipType_wxString,helpStringState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetHelpString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetLabel, "SetLabel(label)\n"
"\n"
"Sets property's label.");

extern "C" {static PyObject *meth_wxPGProperty_SetLabel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetLabel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* label;
        int labelState = 0;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&label, &labelState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetLabel(*label);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetLabel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetMaxLength, "SetMaxLength(maxLen) -> bool\n"
"\n"
"Set maximum length of the text the user can enter in the text editor.");

extern "C" {static PyObject *meth_wxPGProperty_SetMaxLength(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetMaxLength(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int maxLen;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maxLen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPGProperty, &sipCpp, &maxLen))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetMaxLength(maxLen);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetMaxLength, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetModifiedStatus, "SetModifiedStatus(modified)\n"
"\n"
"Sets property's \"is it modified?\" flag.");

extern "C" {static PyObject *meth_wxPGProperty_SetModifiedStatus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetModifiedStatus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool modified;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_modified,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxPGProperty, &sipCpp, &modified))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetModifiedStatus(modified);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetModifiedStatus, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetName, "SetName(newName)\n"
"\n"
"Sets new (base) name for property.");

extern "C" {static PyObject *meth_wxPGProperty_SetName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* newName;
        int newNameState = 0;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_newName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxString,&newName, &newNameState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetName(*newName);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(newName),sipType_wxString,newNameState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetParentalType, "SetParentalType(flag)\n"
"\n"
"Changes what sort of parent this property is for its children.");

extern "C" {static PyObject *meth_wxPGProperty_SetParentalType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetParentalType(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int flag;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPGProperty, &sipCpp, &flag))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetParentalType(flag);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetParentalType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetTextColour, "SetTextColour(colour, flags=PG_RECURSE)\n"
"\n"
"Sets property's text colour.");

extern "C" {static PyObject *meth_wxPGProperty_SetTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* colour;
        int colourState = 0;
        int flags = wxPG_RECURSE;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colour,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxColour, &colour, &colourState, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTextColour(*colour,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(colour),sipType_wxColour,colourState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetDefaultColours, "SetDefaultColours(flags=PG_RECURSE)\n"
"\n"
"Sets property's default text and background colours.");

extern "C" {static PyObject *meth_wxPGProperty_SetDefaultColours(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetDefaultColours(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int flags = wxPG_RECURSE;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_wxPGProperty, &sipCpp, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetDefaultColours(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetDefaultColours, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetValidator, "SetValidator(validator)\n"
"\n"
"Sets wxValidator for a property.");

extern "C" {static PyObject *meth_wxPGProperty_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxValidator* validator;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetValidator(*validator);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetValidator, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetValue, "SetValue(value, pList=None, flags=PG_SETVAL_REFRESH_EDITOR)\n"
"\n"
"Call this to set value of the property.");

extern "C" {static PyObject *meth_wxPGProperty_SetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGVariant* value;
        int valueState = 0;
         ::wxPGVariant* pList = 0;
        int pListState = 0;
        int flags = wxPG_SETVAL_REFRESH_EDITOR;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_pList,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J0i", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGVariant,&value, &valueState, sipType_wxPGVariant,&pList, &pListState, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetValue(*value,pList,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(value,sipType_wxPGVariant,valueState);
            sipReleaseType(pList,sipType_wxPGVariant,pListState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetValueImage, "SetValueImage(bmp)\n"
"\n"
"Set wxBitmap in front of the value.");

extern "C" {static PyObject *meth_wxPGProperty_SetValueImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetValueImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxBitmap* bmp;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bmp,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxBitmap, &bmp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetValueImage(*bmp);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetValueImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetValueInEvent, "SetValueInEvent(value)\n"
"\n"
"Call this function in OnEvent(), OnButtonClick() etc.");

extern "C" {static PyObject *meth_wxPGProperty_SetValueInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetValueInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGVariant* value;
        int valueState = 0;
        const  ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPGProperty, &sipCpp, sipType_wxPGVariant,&value, &valueState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetValueInEvent(*value);
            Py_END_ALLOW_THREADS
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetValueInEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetValueToUnspecified, "SetValueToUnspecified()\n"
"\n"
"Sets property's value to unspecified (i.e.");

extern "C" {static PyObject *meth_wxPGProperty_SetValueToUnspecified(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetValueToUnspecified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetValueToUnspecified();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetValueToUnspecified, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_SetWasModified, "SetWasModified(set=True)\n"
"\n"
"Call with false in OnSetValue() to cancel value changes after all\n"
"(i.e.");

extern "C" {static PyObject *meth_wxPGProperty_SetWasModified(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_SetWasModified(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool set = 1;
         ::wxPGProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_set,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxPGProperty, &sipCpp, &set))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWasModified(set);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_SetWasModified, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_UpdateParentValues, "UpdateParentValues() -> PGProperty\n"
"\n"
"Updates composed values of parent non-category properties,\n"
"recursively.");

extern "C" {static PyObject *meth_wxPGProperty_UpdateParentValues(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_UpdateParentValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->UpdateParentValues();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_UpdateParentValues, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPGProperty_UsesAutoUnspecified, "UsesAutoUnspecified() -> bool\n"
"\n"
"Returns true if containing grid uses wxPG_EX_AUTO_UNSPECIFIED_VALUES.");

extern "C" {static PyObject *meth_wxPGProperty_UsesAutoUnspecified(PyObject *, PyObject *);}
static PyObject *meth_wxPGProperty_UsesAutoUnspecified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGProperty, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->UsesAutoUnspecified();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PGProperty, sipName_UsesAutoUnspecified, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxPGProperty(void *, const sipTypeDef *);}
static void *cast_wxPGProperty(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxPGProperty *sipCpp = reinterpret_cast< ::wxPGProperty *>(sipCppV);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxPGProperty(void *, int);}
static void release_wxPGProperty(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxPGProperty *>(sipCppV);
    else
        delete reinterpret_cast< ::wxPGProperty *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxPGProperty(void *, SIP_SSIZE_T, void *);}
static void assign_wxPGProperty(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxPGProperty *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxPGProperty *>(sipSrc);
}


extern "C" {static void *copy_wxPGProperty(const void *, SIP_SSIZE_T);}
static void *copy_wxPGProperty(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxPGProperty(reinterpret_cast<const  ::wxPGProperty *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxPGProperty(sipSimpleWrapper *);}
static void dealloc_wxPGProperty(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxPGProperty *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxPGProperty(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxPGProperty(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxPGProperty(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxPGProperty *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPGProperty();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxString* label;
        int labelState = 0;
        const  ::wxString* name;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1", sipType_wxString,&label, &labelState, sipType_wxString,&name, &nameState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPGProperty(*label,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxPGProperty* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxPGProperty, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPGProperty(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxPGProperty[] = {{20, 0, 1}};


static PyMethodDef methods_wxPGProperty[] = {
    {SIP_MLNAME_CAST(sipName_AdaptListToValue), SIP_MLMETH_CAST(meth_wxPGProperty_AdaptListToValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_AdaptListToValue)},
    {SIP_MLNAME_CAST(sipName_AddChoice), SIP_MLMETH_CAST(meth_wxPGProperty_AddChoice), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_AddChoice)},
    {SIP_MLNAME_CAST(sipName_AddPrivateChild), SIP_MLMETH_CAST(meth_wxPGProperty_AddPrivateChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_AddPrivateChild)},
    {SIP_MLNAME_CAST(sipName_AppendChild), SIP_MLMETH_CAST(meth_wxPGProperty_AppendChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_AppendChild)},
    {SIP_MLNAME_CAST(sipName_AreAllChildrenSpecified), SIP_MLMETH_CAST(meth_wxPGProperty_AreAllChildrenSpecified), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_AreAllChildrenSpecified)},
    {SIP_MLNAME_CAST(sipName_AreChildrenComponents), meth_wxPGProperty_AreChildrenComponents, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_AreChildrenComponents)},
    {SIP_MLNAME_CAST(sipName_ChangeFlag), SIP_MLMETH_CAST(meth_wxPGProperty_ChangeFlag), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_ChangeFlag)},
    {SIP_MLNAME_CAST(sipName_ChildChanged), SIP_MLMETH_CAST(meth_wxPGProperty_ChildChanged), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_ChildChanged)},
    {SIP_MLNAME_CAST(sipName_DeleteChildren), meth_wxPGProperty_DeleteChildren, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_DeleteChildren)},
    {SIP_MLNAME_CAST(sipName_DeleteChoice), SIP_MLMETH_CAST(meth_wxPGProperty_DeleteChoice), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_DeleteChoice)},
    {SIP_MLNAME_CAST(sipName_DoGetAttribute), SIP_MLMETH_CAST(meth_wxPGProperty_DoGetAttribute), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_DoGetAttribute)},
    {SIP_MLNAME_CAST(sipName_DoGetEditorClass), meth_wxPGProperty_DoGetEditorClass, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_DoGetEditorClass)},
    {SIP_MLNAME_CAST(sipName_DoGetValidator), meth_wxPGProperty_DoGetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_DoGetValidator)},
    {SIP_MLNAME_CAST(sipName_DoGetValue), meth_wxPGProperty_DoGetValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_DoGetValue)},
    {SIP_MLNAME_CAST(sipName_DoSetAttribute), SIP_MLMETH_CAST(meth_wxPGProperty_DoSetAttribute), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_DoSetAttribute)},
    {SIP_MLNAME_CAST(sipName_Enable), SIP_MLMETH_CAST(meth_wxPGProperty_Enable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_Enable)},
    {SIP_MLNAME_CAST(sipName_EnableCommonValue), SIP_MLMETH_CAST(meth_wxPGProperty_EnableCommonValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_EnableCommonValue)},
    {SIP_MLNAME_CAST(sipName_GenerateComposedValue), meth_wxPGProperty_GenerateComposedValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GenerateComposedValue)},
    {SIP_MLNAME_CAST(sipName_GetAttribute), SIP_MLMETH_CAST(meth_wxPGProperty_GetAttribute), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_GetAttribute)},
    {SIP_MLNAME_CAST(sipName_GetAttributeAsDouble), SIP_MLMETH_CAST(meth_wxPGProperty_GetAttributeAsDouble), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_GetAttributeAsDouble)},
    {SIP_MLNAME_CAST(sipName_GetAttributeAsLong), SIP_MLMETH_CAST(meth_wxPGProperty_GetAttributeAsLong), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_GetAttributeAsLong)},
    {SIP_MLNAME_CAST(sipName_GetAttributes), meth_wxPGProperty_GetAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetAttributes)},
    {SIP_MLNAME_CAST(sipName_GetAttributesAsList), meth_wxPGProperty_GetAttributesAsList, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetAttributesAsList)},
    {SIP_MLNAME_CAST(sipName_GetBaseName), meth_wxPGProperty_GetBaseName, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetBaseName)},
    {SIP_MLNAME_CAST(sipName_GetCell), SIP_MLMETH_CAST(meth_wxPGProperty_GetCell), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_GetCell)},
    {SIP_MLNAME_CAST(sipName_GetCellRenderer), SIP_MLMETH_CAST(meth_wxPGProperty_GetCellRenderer), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_GetCellRenderer)},
    {SIP_MLNAME_CAST(sipName_GetChildCount), meth_wxPGProperty_GetChildCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetChildCount)},
    {SIP_MLNAME_CAST(sipName_GetChildrenHeight), SIP_MLMETH_CAST(meth_wxPGProperty_GetChildrenHeight), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_GetChildrenHeight)},
    {SIP_MLNAME_CAST(sipName_GetChoiceSelection), meth_wxPGProperty_GetChoiceSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetChoiceSelection)},
    {SIP_MLNAME_CAST(sipName_GetChoices), meth_wxPGProperty_GetChoices, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetChoices)},
    {SIP_MLNAME_CAST(sipName_GetClientData), meth_wxPGProperty_GetClientData, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetClientData)},
    {SIP_MLNAME_CAST(sipName_GetColumnEditor), SIP_MLMETH_CAST(meth_wxPGProperty_GetColumnEditor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_GetColumnEditor)},
    {SIP_MLNAME_CAST(sipName_GetCommonValue), meth_wxPGProperty_GetCommonValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetCommonValue)},
    {SIP_MLNAME_CAST(sipName_GetDefaultValue), meth_wxPGProperty_GetDefaultValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetDefaultValue)},
    {SIP_MLNAME_CAST(sipName_GetDepth), meth_wxPGProperty_GetDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetDepth)},
    {SIP_MLNAME_CAST(sipName_GetDisplayedCommonValueCount), meth_wxPGProperty_GetDisplayedCommonValueCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetDisplayedCommonValueCount)},
    {SIP_MLNAME_CAST(sipName_GetDisplayedString), meth_wxPGProperty_GetDisplayedString, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetDisplayedString)},
    {SIP_MLNAME_CAST(sipName_GetEditorClass), meth_wxPGProperty_GetEditorClass, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetEditorClass)},
    {SIP_MLNAME_CAST(sipName_GetEditorDialog), meth_wxPGProperty_GetEditorDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetEditorDialog)},
    {SIP_MLNAME_CAST(sipName_GetFlagsAsString), SIP_MLMETH_CAST(meth_wxPGProperty_GetFlagsAsString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_GetFlagsAsString)},
    {SIP_MLNAME_CAST(sipName_GetGrid), meth_wxPGProperty_GetGrid, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetGrid)},
    {SIP_MLNAME_CAST(sipName_GetGridIfDisplayed), meth_wxPGProperty_GetGridIfDisplayed, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetGridIfDisplayed)},
    {SIP_MLNAME_CAST(sipName_GetHelpString), meth_wxPGProperty_GetHelpString, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetHelpString)},
    {SIP_MLNAME_CAST(sipName_GetHintText), meth_wxPGProperty_GetHintText, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetHintText)},
    {SIP_MLNAME_CAST(sipName_GetImageOffset), SIP_MLMETH_CAST(meth_wxPGProperty_GetImageOffset), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_GetImageOffset)},
    {SIP_MLNAME_CAST(sipName_GetIndexInParent), meth_wxPGProperty_GetIndexInParent, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetIndexInParent)},
    {SIP_MLNAME_CAST(sipName_GetItemAtY), SIP_MLMETH_CAST(meth_wxPGProperty_GetItemAtY), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_GetItemAtY)},
    {SIP_MLNAME_CAST(sipName_GetLabel), meth_wxPGProperty_GetLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetLabel)},
    {SIP_MLNAME_CAST(sipName_GetLastVisibleSubItem), meth_wxPGProperty_GetLastVisibleSubItem, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetLastVisibleSubItem)},
    {SIP_MLNAME_CAST(sipName_GetMainParent), meth_wxPGProperty_GetMainParent, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetMainParent)},
    {SIP_MLNAME_CAST(sipName_GetMaxLength), meth_wxPGProperty_GetMaxLength, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetMaxLength)},
    {SIP_MLNAME_CAST(sipName_GetName), meth_wxPGProperty_GetName, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetName)},
    {SIP_MLNAME_CAST(sipName_GetOrCreateCell), SIP_MLMETH_CAST(meth_wxPGProperty_GetOrCreateCell), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_GetOrCreateCell)},
    {SIP_MLNAME_CAST(sipName_GetParent), meth_wxPGProperty_GetParent, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetParent)},
    {SIP_MLNAME_CAST(sipName_GetPropertyByName), SIP_MLMETH_CAST(meth_wxPGProperty_GetPropertyByName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_GetPropertyByName)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxPGProperty_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetValidator)},
    {SIP_MLNAME_CAST(sipName_GetValue), meth_wxPGProperty_GetValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetValue)},
    {SIP_MLNAME_CAST(sipName_GetValueAsString), SIP_MLMETH_CAST(meth_wxPGProperty_GetValueAsString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_GetValueAsString)},
    {SIP_MLNAME_CAST(sipName_GetValueImage), meth_wxPGProperty_GetValueImage, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetValueImage)},
    {SIP_MLNAME_CAST(sipName_GetValueType), meth_wxPGProperty_GetValueType, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetValueType)},
    {SIP_MLNAME_CAST(sipName_GetY), meth_wxPGProperty_GetY, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_GetY)},
    {SIP_MLNAME_CAST(sipName_HasFlag), SIP_MLMETH_CAST(meth_wxPGProperty_HasFlag), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_HasFlag)},
    {SIP_MLNAME_CAST(sipName_HasFlagsExact), SIP_MLMETH_CAST(meth_wxPGProperty_HasFlagsExact), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_HasFlagsExact)},
    {SIP_MLNAME_CAST(sipName_HasVisibleChildren), meth_wxPGProperty_HasVisibleChildren, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_HasVisibleChildren)},
    {SIP_MLNAME_CAST(sipName_Hide), SIP_MLMETH_CAST(meth_wxPGProperty_Hide), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_Hide)},
    {SIP_MLNAME_CAST(sipName_Index), SIP_MLMETH_CAST(meth_wxPGProperty_Index), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_Index)},
    {SIP_MLNAME_CAST(sipName_InsertChild), SIP_MLMETH_CAST(meth_wxPGProperty_InsertChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_InsertChild)},
    {SIP_MLNAME_CAST(sipName_InsertChoice), SIP_MLMETH_CAST(meth_wxPGProperty_InsertChoice), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_InsertChoice)},
    {SIP_MLNAME_CAST(sipName_IntToValue), SIP_MLMETH_CAST(meth_wxPGProperty_IntToValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_IntToValue)},
    {SIP_MLNAME_CAST(sipName_IsCategory), meth_wxPGProperty_IsCategory, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_IsCategory)},
    {SIP_MLNAME_CAST(sipName_IsEnabled), meth_wxPGProperty_IsEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_IsEnabled)},
    {SIP_MLNAME_CAST(sipName_IsExpanded), meth_wxPGProperty_IsExpanded, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_IsExpanded)},
    {SIP_MLNAME_CAST(sipName_IsRoot), meth_wxPGProperty_IsRoot, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_IsRoot)},
    {SIP_MLNAME_CAST(sipName_IsSomeParent), SIP_MLMETH_CAST(meth_wxPGProperty_IsSomeParent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_IsSomeParent)},
    {SIP_MLNAME_CAST(sipName_IsSubProperty), meth_wxPGProperty_IsSubProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_IsSubProperty)},
    {SIP_MLNAME_CAST(sipName_IsTextEditable), meth_wxPGProperty_IsTextEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_IsTextEditable)},
    {SIP_MLNAME_CAST(sipName_IsValueUnspecified), meth_wxPGProperty_IsValueUnspecified, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_IsValueUnspecified)},
    {SIP_MLNAME_CAST(sipName_IsVisible), meth_wxPGProperty_IsVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_IsVisible)},
    {SIP_MLNAME_CAST(sipName_Item), SIP_MLMETH_CAST(meth_wxPGProperty_Item), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_Item)},
    {SIP_MLNAME_CAST(sipName_Last), meth_wxPGProperty_Last, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_Last)},
    {SIP_MLNAME_CAST(sipName_OnCustomPaint), SIP_MLMETH_CAST(meth_wxPGProperty_OnCustomPaint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_OnCustomPaint)},
    {SIP_MLNAME_CAST(sipName_OnEvent), SIP_MLMETH_CAST(meth_wxPGProperty_OnEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_OnEvent)},
    {SIP_MLNAME_CAST(sipName_OnMeasureImage), SIP_MLMETH_CAST(meth_wxPGProperty_OnMeasureImage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_OnMeasureImage)},
    {SIP_MLNAME_CAST(sipName_OnSetValue), meth_wxPGProperty_OnSetValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_OnSetValue)},
    {SIP_MLNAME_CAST(sipName_OnValidationFailure), SIP_MLMETH_CAST(meth_wxPGProperty_OnValidationFailure), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_OnValidationFailure)},
    {SIP_MLNAME_CAST(sipName_RecreateEditor), meth_wxPGProperty_RecreateEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_RecreateEditor)},
    {SIP_MLNAME_CAST(sipName_RefreshChildren), meth_wxPGProperty_RefreshChildren, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_RefreshChildren)},
    {SIP_MLNAME_CAST(sipName_RefreshEditor), meth_wxPGProperty_RefreshEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_RefreshEditor)},
    {SIP_MLNAME_CAST(sipName_SetAttribute), SIP_MLMETH_CAST(meth_wxPGProperty_SetAttribute), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetAttribute)},
    {SIP_MLNAME_CAST(sipName_SetAutoUnspecified), SIP_MLMETH_CAST(meth_wxPGProperty_SetAutoUnspecified), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetAutoUnspecified)},
    {SIP_MLNAME_CAST(sipName_SetBackgroundColour), SIP_MLMETH_CAST(meth_wxPGProperty_SetBackgroundColour), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_SetCell), SIP_MLMETH_CAST(meth_wxPGProperty_SetCell), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetCell)},
    {SIP_MLNAME_CAST(sipName_SetChoiceSelection), SIP_MLMETH_CAST(meth_wxPGProperty_SetChoiceSelection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetChoiceSelection)},
    {SIP_MLNAME_CAST(sipName_SetChoices), SIP_MLMETH_CAST(meth_wxPGProperty_SetChoices), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetChoices)},
    {SIP_MLNAME_CAST(sipName_SetClientData), SIP_MLMETH_CAST(meth_wxPGProperty_SetClientData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetClientData)},
    {SIP_MLNAME_CAST(sipName_SetCommonValue), SIP_MLMETH_CAST(meth_wxPGProperty_SetCommonValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetCommonValue)},
    {SIP_MLNAME_CAST(sipName_SetDefaultColours), SIP_MLMETH_CAST(meth_wxPGProperty_SetDefaultColours), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetDefaultColours)},
    {SIP_MLNAME_CAST(sipName_SetDefaultValue), SIP_MLMETH_CAST(meth_wxPGProperty_SetDefaultValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetDefaultValue)},
    {SIP_MLNAME_CAST(sipName_SetEditor), SIP_MLMETH_CAST(meth_wxPGProperty_SetEditor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetEditor)},
    {SIP_MLNAME_CAST(sipName_SetExpanded), SIP_MLMETH_CAST(meth_wxPGProperty_SetExpanded), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetExpanded)},
    {SIP_MLNAME_CAST(sipName_SetFlagRecursively), SIP_MLMETH_CAST(meth_wxPGProperty_SetFlagRecursively), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetFlagRecursively)},
    {SIP_MLNAME_CAST(sipName_SetFlagsFromString), SIP_MLMETH_CAST(meth_wxPGProperty_SetFlagsFromString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetFlagsFromString)},
    {SIP_MLNAME_CAST(sipName_SetHelpString), SIP_MLMETH_CAST(meth_wxPGProperty_SetHelpString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetHelpString)},
    {SIP_MLNAME_CAST(sipName_SetLabel), SIP_MLMETH_CAST(meth_wxPGProperty_SetLabel), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetLabel)},
    {SIP_MLNAME_CAST(sipName_SetMaxLength), SIP_MLMETH_CAST(meth_wxPGProperty_SetMaxLength), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetMaxLength)},
    {SIP_MLNAME_CAST(sipName_SetModifiedStatus), SIP_MLMETH_CAST(meth_wxPGProperty_SetModifiedStatus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetModifiedStatus)},
    {SIP_MLNAME_CAST(sipName_SetName), SIP_MLMETH_CAST(meth_wxPGProperty_SetName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetName)},
    {SIP_MLNAME_CAST(sipName_SetParentalType), SIP_MLMETH_CAST(meth_wxPGProperty_SetParentalType), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetParentalType)},
    {SIP_MLNAME_CAST(sipName_SetTextColour), SIP_MLMETH_CAST(meth_wxPGProperty_SetTextColour), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetTextColour)},
    {SIP_MLNAME_CAST(sipName_SetValidator), SIP_MLMETH_CAST(meth_wxPGProperty_SetValidator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetValidator)},
    {SIP_MLNAME_CAST(sipName_SetValue), SIP_MLMETH_CAST(meth_wxPGProperty_SetValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetValue)},
    {SIP_MLNAME_CAST(sipName_SetValueFromInt), SIP_MLMETH_CAST(meth_wxPGProperty_SetValueFromInt), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetValueFromInt)},
    {SIP_MLNAME_CAST(sipName_SetValueFromString), SIP_MLMETH_CAST(meth_wxPGProperty_SetValueFromString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetValueFromString)},
    {SIP_MLNAME_CAST(sipName_SetValueImage), SIP_MLMETH_CAST(meth_wxPGProperty_SetValueImage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetValueImage)},
    {SIP_MLNAME_CAST(sipName_SetValueInEvent), SIP_MLMETH_CAST(meth_wxPGProperty_SetValueInEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetValueInEvent)},
    {SIP_MLNAME_CAST(sipName_SetValueToUnspecified), meth_wxPGProperty_SetValueToUnspecified, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_SetValueToUnspecified)},
    {SIP_MLNAME_CAST(sipName_SetWasModified), SIP_MLMETH_CAST(meth_wxPGProperty_SetWasModified), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_SetWasModified)},
    {SIP_MLNAME_CAST(sipName_StringToValue), SIP_MLMETH_CAST(meth_wxPGProperty_StringToValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_StringToValue)},
    {SIP_MLNAME_CAST(sipName_UpdateParentValues), meth_wxPGProperty_UpdateParentValues, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_UpdateParentValues)},
    {SIP_MLNAME_CAST(sipName_UsesAutoUnspecified), meth_wxPGProperty_UsesAutoUnspecified, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGProperty_UsesAutoUnspecified)},
    {SIP_MLNAME_CAST(sipName_ValidateValue), SIP_MLMETH_CAST(meth_wxPGProperty_ValidateValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_ValidateValue)},
    {SIP_MLNAME_CAST(sipName_ValueToString), SIP_MLMETH_CAST(meth_wxPGProperty_ValueToString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGProperty_ValueToString)}
};


extern "C" {static PyObject *varget_wxPGProperty_m_clientData(void *, PyObject *, PyObject *);}
static PyObject *varget_wxPGProperty_m_clientData(void *sipSelf, PyObject *, PyObject *)
{
    void*sipVal;
     ::wxPGProperty *sipCpp = reinterpret_cast< ::wxPGProperty *>(sipSelf);

    sipVal = sipCpp->m_clientData;

    return sipConvertFromVoidPtr(sipVal);
}


extern "C" {static int varset_wxPGProperty_m_clientData(void *, PyObject *, PyObject *);}
static int varset_wxPGProperty_m_clientData(void *sipSelf, PyObject *sipPy, PyObject *)
{
    void*sipVal;
     ::wxPGProperty *sipCpp = reinterpret_cast< ::wxPGProperty *>(sipSelf);

    sipVal = sipConvertToVoidPtr(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->m_clientData = sipVal;

    return 0;
}

sipVariableDef variables_wxPGProperty[] = {
    {PropertyVariable, sipName_m_value, &methods_wxPGProperty[56], &methods_wxPGProperty[110], SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_m_clientData, (PyMethodDef *)varget_wxPGProperty_m_clientData, (PyMethodDef *)varset_wxPGProperty_m_clientData, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxPGProperty, "PGProperty()\n"
"PGProperty(label, name)\n"
"\n"
"wxPGProperty is base class for all wxPropertyGrid properties and as\n"
"such it is not intended to be instantiated directly.");


sipClassTypeDef sipTypeDef__propgrid_wxPGProperty = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxPGProperty,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_PGProperty,
        {0, 0, 1},
        122, methods_wxPGProperty,
        0, SIP_NULLPTR,
        2, variables_wxPGProperty,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxPGProperty,
    -1,
    -1,
    supers_wxPGProperty,
    SIP_NULLPTR,
    init_type_wxPGProperty,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxPGProperty,
    assign_wxPGProperty,
    SIP_NULLPTR,
    copy_wxPGProperty,
    release_wxPGProperty,
    cast_wxPGProperty,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
