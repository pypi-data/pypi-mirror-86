/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_grid.h"

        #include <wx/grid.h>



class sipwxGridStringTable : public  ::wxGridStringTable
{
public:
    sipwxGridStringTable();
    sipwxGridStringTable(int,int);
    virtual ~sipwxGridStringTable();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void SetValue(int,int,const  ::wxString&) SIP_OVERRIDE;
     ::wxString GetValue(int,int) SIP_OVERRIDE;
    int GetNumberCols() SIP_OVERRIDE;
    int GetNumberRows() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxGridStringTable(const sipwxGridStringTable &);
    sipwxGridStringTable &operator = (const sipwxGridStringTable &);

    char sipPyMethods[4];
};

sipwxGridStringTable::sipwxGridStringTable():  ::wxGridStringTable(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxGridStringTable::sipwxGridStringTable(int numRows,int numCols):  ::wxGridStringTable(numRows,numCols), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxGridStringTable::~sipwxGridStringTable()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxGridStringTable::SetValue(int row,int col,const  ::wxString& s)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_SetValue);

    if (!sipMeth)
    {
         ::wxGridStringTable::SetValue(row,col,s);
        return;
    }

    extern void sipVH__grid_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::wxString&);

    sipVH__grid_29(sipGILState, 0, sipPySelf, sipMeth, row, col, s);
}

 ::wxString sipwxGridStringTable::GetValue(int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_GetValue);

    if (!sipMeth)
        return  ::wxGridStringTable::GetValue(row,col);

    extern  ::wxString sipVH__grid_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__grid_30(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

int sipwxGridStringTable::GetNumberCols()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_GetNumberCols);

    if (!sipMeth)
        return  ::wxGridStringTable::GetNumberCols();

    extern int sipVH__grid_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__grid_41(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxGridStringTable::GetNumberRows()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_GetNumberRows);

    if (!sipMeth)
        return  ::wxGridStringTable::GetNumberRows();

    extern int sipVH__grid_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__grid_41(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxGridStringTable_GetNumberRows, "GetNumberRows() -> int");

extern "C" {static PyObject *meth_wxGridStringTable_GetNumberRows(PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_GetNumberRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridStringTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridStringTable, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::GetNumberRows() : sipCpp->GetNumberRows());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_GetNumberRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_GetNumberCols, "GetNumberCols() -> int");

extern "C" {static PyObject *meth_wxGridStringTable_GetNumberCols(PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_GetNumberCols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridStringTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridStringTable, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::GetNumberCols() : sipCpp->GetNumberCols());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_GetNumberCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_GetValue, "GetValue(row, col) -> String");

extern "C" {static PyObject *meth_wxGridStringTable_GetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_GetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxGridStringTable, &sipCpp, &row, &col))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxGridStringTable::GetValue(row,col) : sipCpp->GetValue(row,col)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_GetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_SetValue, "SetValue(row, col, s)");

extern "C" {static PyObject *meth_wxGridStringTable_SetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_SetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
        const  ::wxString* s;
        int sState = 0;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
            sipName_s,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiJ1", &sipSelf, sipType_wxGridStringTable, &sipCpp, &row, &col, sipType_wxString,&s, &sState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::SetValue(row,col,*s) : sipCpp->SetValue(row,col,*s));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(s),sipType_wxString,sState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_SetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_Clear, "Clear()");

extern "C" {static PyObject *meth_wxGridStringTable_Clear(PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_Clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxGridStringTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridStringTable, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Clear();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_Clear, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_InsertRows, "InsertRows(pos=0, numRows=1) -> bool");

extern "C" {static PyObject *meth_wxGridStringTable_InsertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_InsertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t pos = 0;
        size_t numRows = 1;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_numRows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|==", &sipSelf, sipType_wxGridStringTable, &sipCpp, &pos, &numRows))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertRows(pos,numRows);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_InsertRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_AppendRows, "AppendRows(numRows=1) -> bool");

extern "C" {static PyObject *meth_wxGridStringTable_AppendRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_AppendRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t numRows = 1;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_numRows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|=", &sipSelf, sipType_wxGridStringTable, &sipCpp, &numRows))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendRows(numRows);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_AppendRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_DeleteRows, "DeleteRows(pos=0, numRows=1) -> bool");

extern "C" {static PyObject *meth_wxGridStringTable_DeleteRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_DeleteRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t pos = 0;
        size_t numRows = 1;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_numRows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|==", &sipSelf, sipType_wxGridStringTable, &sipCpp, &pos, &numRows))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteRows(pos,numRows);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_DeleteRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_InsertCols, "InsertCols(pos=0, numCols=1) -> bool");

extern "C" {static PyObject *meth_wxGridStringTable_InsertCols(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_InsertCols(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t pos = 0;
        size_t numCols = 1;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_numCols,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|==", &sipSelf, sipType_wxGridStringTable, &sipCpp, &pos, &numCols))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertCols(pos,numCols);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_InsertCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_AppendCols, "AppendCols(numCols=1) -> bool");

extern "C" {static PyObject *meth_wxGridStringTable_AppendCols(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_AppendCols(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t numCols = 1;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_numCols,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|=", &sipSelf, sipType_wxGridStringTable, &sipCpp, &numCols))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendCols(numCols);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_AppendCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_DeleteCols, "DeleteCols(pos=0, numCols=1) -> bool");

extern "C" {static PyObject *meth_wxGridStringTable_DeleteCols(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_DeleteCols(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t pos = 0;
        size_t numCols = 1;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_numCols,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|==", &sipSelf, sipType_wxGridStringTable, &sipCpp, &pos, &numCols))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteCols(pos,numCols);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_DeleteCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_SetRowLabelValue, "SetRowLabelValue(row, )");

extern "C" {static PyObject *meth_wxGridStringTable_SetRowLabelValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_SetRowLabelValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int row;
        const  ::wxString* a1;
        int a1State = 0;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1", &sipSelf, sipType_wxGridStringTable, &sipCpp, &row, sipType_wxString,&a1, &a1State))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetRowLabelValue(row,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(a1),sipType_wxString,a1State);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_SetRowLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_SetColLabelValue, "SetColLabelValue(col, )");

extern "C" {static PyObject *meth_wxGridStringTable_SetColLabelValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_SetColLabelValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int col;
        const  ::wxString* a1;
        int a1State = 0;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1", &sipSelf, sipType_wxGridStringTable, &sipCpp, &col, sipType_wxString,&a1, &a1State))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetColLabelValue(col,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(a1),sipType_wxString,a1State);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_SetColLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_SetCornerLabelValue, "SetCornerLabelValue()");

extern "C" {static PyObject *meth_wxGridStringTable_SetCornerLabelValue(PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_SetCornerLabelValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* a0;
        int a0State = 0;
         ::wxGridStringTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_wxGridStringTable, &sipCpp, sipType_wxString,&a0, &a0State))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCornerLabelValue(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(a0),sipType_wxString,a0State);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_SetCornerLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_GetRowLabelValue, "GetRowLabelValue(row) -> String");

extern "C" {static PyObject *meth_wxGridStringTable_GetRowLabelValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_GetRowLabelValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int row;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGridStringTable, &sipCpp, &row))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetRowLabelValue(row));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_GetRowLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_GetColLabelValue, "GetColLabelValue(col) -> String");

extern "C" {static PyObject *meth_wxGridStringTable_GetColLabelValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_GetColLabelValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int col;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGridStringTable, &sipCpp, &col))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetColLabelValue(col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_GetColLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_GetCornerLabelValue, "GetCornerLabelValue() -> String");

extern "C" {static PyObject *meth_wxGridStringTable_GetCornerLabelValue(PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_GetCornerLabelValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxGridStringTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridStringTable, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetCornerLabelValue());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_GetCornerLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxGridStringTable(void *, int);}
static void release_wxGridStringTable(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxGridStringTable *>(sipCppV);
    else
        delete reinterpret_cast< ::wxGridStringTable *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxGridStringTable(Py_ssize_t);}
static void *array_wxGridStringTable(Py_ssize_t sipNrElem)
{
    return new  ::wxGridStringTable[sipNrElem];
}


extern "C" {static void dealloc_wxGridStringTable(sipSimpleWrapper *);}
static void dealloc_wxGridStringTable(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxGridStringTable *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxGridStringTable(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxGridStringTable(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxGridStringTable(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxGridStringTable *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxGridStringTable();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int numRows;
        int numCols;

        static const char *sipKwdList[] = {
            sipName_numRows,
            sipName_numCols,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ii", &numRows, &numCols))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxGridStringTable(numRows,numCols);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_wxGridStringTable[] = {
    {SIP_MLNAME_CAST(sipName_AppendCols), SIP_MLMETH_CAST(meth_wxGridStringTable_AppendCols), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_AppendCols)},
    {SIP_MLNAME_CAST(sipName_AppendRows), SIP_MLMETH_CAST(meth_wxGridStringTable_AppendRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_AppendRows)},
    {SIP_MLNAME_CAST(sipName_Clear), meth_wxGridStringTable_Clear, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridStringTable_Clear)},
    {SIP_MLNAME_CAST(sipName_DeleteCols), SIP_MLMETH_CAST(meth_wxGridStringTable_DeleteCols), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_DeleteCols)},
    {SIP_MLNAME_CAST(sipName_DeleteRows), SIP_MLMETH_CAST(meth_wxGridStringTable_DeleteRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_DeleteRows)},
    {SIP_MLNAME_CAST(sipName_GetColLabelValue), SIP_MLMETH_CAST(meth_wxGridStringTable_GetColLabelValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_GetColLabelValue)},
    {SIP_MLNAME_CAST(sipName_GetCornerLabelValue), meth_wxGridStringTable_GetCornerLabelValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridStringTable_GetCornerLabelValue)},
    {SIP_MLNAME_CAST(sipName_GetNumberCols), meth_wxGridStringTable_GetNumberCols, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridStringTable_GetNumberCols)},
    {SIP_MLNAME_CAST(sipName_GetNumberRows), meth_wxGridStringTable_GetNumberRows, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridStringTable_GetNumberRows)},
    {SIP_MLNAME_CAST(sipName_GetRowLabelValue), SIP_MLMETH_CAST(meth_wxGridStringTable_GetRowLabelValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_GetRowLabelValue)},
    {SIP_MLNAME_CAST(sipName_GetValue), SIP_MLMETH_CAST(meth_wxGridStringTable_GetValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_GetValue)},
    {SIP_MLNAME_CAST(sipName_InsertCols), SIP_MLMETH_CAST(meth_wxGridStringTable_InsertCols), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_InsertCols)},
    {SIP_MLNAME_CAST(sipName_InsertRows), SIP_MLMETH_CAST(meth_wxGridStringTable_InsertRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_InsertRows)},
    {SIP_MLNAME_CAST(sipName_SetColLabelValue), SIP_MLMETH_CAST(meth_wxGridStringTable_SetColLabelValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_SetColLabelValue)},
    {SIP_MLNAME_CAST(sipName_SetCornerLabelValue), meth_wxGridStringTable_SetCornerLabelValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridStringTable_SetCornerLabelValue)},
    {SIP_MLNAME_CAST(sipName_SetRowLabelValue), SIP_MLMETH_CAST(meth_wxGridStringTable_SetRowLabelValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_SetRowLabelValue)},
    {SIP_MLNAME_CAST(sipName_SetValue), SIP_MLMETH_CAST(meth_wxGridStringTable_SetValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_SetValue)}
};

sipVariableDef variables_wxGridStringTable[] = {
    {PropertyVariable, sipName_NumberRows, &methods_wxGridStringTable[8], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_NumberCols, &methods_wxGridStringTable[7], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CornerLabelValue, &methods_wxGridStringTable[6], &methods_wxGridStringTable[14], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxGridStringTable, "GridStringTable()\n"
"GridStringTable(numRows, numCols)\n"
"\n"
"Simplest type of data table for a grid for small tables of strings\n"
"that are stored in memory.");


sipClassTypeDef sipTypeDef__grid_wxGridStringTable = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxGridStringTable,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_GridStringTable,
        {0, 0, 1},
        17, methods_wxGridStringTable,
        0, SIP_NULLPTR,
        3, variables_wxGridStringTable,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxGridStringTable,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_wxGridStringTable,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxGridStringTable,
    SIP_NULLPTR,
    array_wxGridStringTable,
    SIP_NULLPTR,
    release_wxGridStringTable,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
