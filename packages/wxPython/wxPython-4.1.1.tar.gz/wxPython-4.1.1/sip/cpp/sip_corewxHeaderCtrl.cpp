/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/headerctrl.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/headercol.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/menu.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxHeaderCtrl : public  ::wxHeaderCtrl
{
public:
    sipwxHeaderCtrl();
    sipwxHeaderCtrl( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxString&);
    virtual ~sipwxHeaderCtrl();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);
    const  ::wxHeaderColumn& sipProtect_GetColumn(uint) const;
    void sipProtectVirt_UpdateColumnVisibility(bool,uint,bool);
    void sipProtectVirt_UpdateColumnsOrder(bool,const  ::wxArrayInt&);
    bool sipProtectVirt_UpdateColumnWidthToFit(bool,uint,int);
    void sipProtectVirt_OnColumnCountChanging(bool,uint);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void OnColumnCountChanging(uint) SIP_OVERRIDE;
    bool UpdateColumnWidthToFit(uint,int) SIP_OVERRIDE;
    void UpdateColumnsOrder(const  ::wxArrayInt&) SIP_OVERRIDE;
    void UpdateColumnVisibility(uint,bool) SIP_OVERRIDE;
    const  ::wxHeaderColumn& GetColumn(uint) const SIP_OVERRIDE;
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
     ::wxSize DoGetBorderSize() const SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxHeaderCtrl(const sipwxHeaderCtrl &);
    sipwxHeaderCtrl &operator = (const sipwxHeaderCtrl &);

    char sipPyMethods[45];
};

sipwxHeaderCtrl::sipwxHeaderCtrl():  ::wxHeaderCtrl(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHeaderCtrl::sipwxHeaderCtrl( ::wxWindow*parent, ::wxWindowID winid,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxString& name):  ::wxHeaderCtrl(parent,winid,pos,size,style,name), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHeaderCtrl::~sipwxHeaderCtrl()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxHeaderCtrl::OnColumnCountChanging(uint count)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_OnColumnCountChanging);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::OnColumnCountChanging(count);
        return;
    }

    extern void sipVH__core_166(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint);

    sipVH__core_166(sipGILState, 0, sipPySelf, sipMeth, count);
}

bool sipwxHeaderCtrl::UpdateColumnWidthToFit(uint idx,int widthTitle)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_UpdateColumnWidthToFit);

    if (!sipMeth)
        return  ::wxHeaderCtrl::UpdateColumnWidthToFit(idx,widthTitle);

    extern bool sipVH__core_165(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint,int);

    return sipVH__core_165(sipGILState, 0, sipPySelf, sipMeth, idx, widthTitle);
}

void sipwxHeaderCtrl::UpdateColumnsOrder(const  ::wxArrayInt& order)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_UpdateColumnsOrder);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::UpdateColumnsOrder(order);
        return;
    }

    extern void sipVH__core_164(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxArrayInt&);

    sipVH__core_164(sipGILState, 0, sipPySelf, sipMeth, order);
}

void sipwxHeaderCtrl::UpdateColumnVisibility(uint idx,bool show)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_UpdateColumnVisibility);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::UpdateColumnVisibility(idx,show);
        return;
    }

    extern void sipVH__core_163(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint,bool);

    sipVH__core_163(sipGILState, 0, sipPySelf, sipMeth, idx, show);
}

const  ::wxHeaderColumn& sipwxHeaderCtrl::GetColumn(uint idx) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_HeaderCtrl,sipName_GetColumn);

    if (!sipMeth)
    {
        static  ::wxHeaderColumn *sipCpp = SIP_NULLPTR;

        if (!sipCpp)
        {
        sipCpp = new wxHeaderColumnSimple("");
        }

        return *sipCpp;
    }

    extern const  ::wxHeaderColumn& sipVH__core_162(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint);

    return sipVH__core_162(sipGILState, 0, sipPySelf, sipMeth, idx);
}

 ::wxSize sipwxHeaderCtrl::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxHeaderCtrl::DoGetBestClientSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxHeaderCtrl::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxHeaderCtrl::DoGetBestSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHeaderCtrl::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::DoThaw();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHeaderCtrl::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::DoFreeze();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxHeaderCtrl::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxHeaderCtrl::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__core_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_132(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxHeaderCtrl::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxHeaderCtrl::GetDefaultBorder();

    extern  ::wxBorder sipVH__core_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_132(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHeaderCtrl::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__core_131(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__core_131(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxHeaderCtrl::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__core_130(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__core_130(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

 ::wxSize sipwxHeaderCtrl::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxHeaderCtrl::DoGetBorderSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHeaderCtrl::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__core_129(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__core_129(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxHeaderCtrl::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__core_128(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__core_128(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxHeaderCtrl::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__core_127(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__core_127(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxHeaderCtrl::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxHeaderCtrl::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::DoGetSize(width,height);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxHeaderCtrl::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,SIP_NULLPTR,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxHeaderCtrl::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::DoEnable(enable);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxHeaderCtrl::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxHeaderCtrl::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__core_125(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_125(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHeaderCtrl::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::OnInternalIdle();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHeaderCtrl::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::InitDialog();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHeaderCtrl::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::InheritAttributes();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderCtrl::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_Destroy);

    if (!sipMeth)
        return  ::wxHeaderCtrl::Destroy();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderCtrl::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::wxHeaderCtrl::Validate();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderCtrl::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxHeaderCtrl::TransferDataToWindow();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderCtrl::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxHeaderCtrl::TransferDataFromWindow();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHeaderCtrl::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::SetValidator(validator);
        return;
    }

    extern void sipVH__core_124(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__core_124(sipGILState, 0, sipPySelf, sipMeth, validator);
}

 ::wxValidator* sipwxHeaderCtrl::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxHeaderCtrl::GetValidator();

    extern  ::wxValidator* sipVH__core_123(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_123(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderCtrl::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,SIP_NULLPTR,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxHeaderCtrl::ShouldInheritColours();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderCtrl::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxHeaderCtrl::HasTransparentBackground();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxHeaderCtrl::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,SIP_NULLPTR,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxHeaderCtrl::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__core_122(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_122(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderCtrl::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxHeaderCtrl::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__core_121(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__core_121(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxHeaderCtrl::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

void sipwxHeaderCtrl::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxHeaderCtrl::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxHeaderCtrl::AcceptsFocusRecursively();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderCtrl::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxHeaderCtrl::AcceptsFocusFromKeyboard();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderCtrl::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxHeaderCtrl::AcceptsFocus();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderCtrl::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxHeaderCtrl::TryAfter(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxHeaderCtrl::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxHeaderCtrl::TryBefore(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxHeaderCtrl::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxHeaderCtrl::ProcessEvent(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxHeaderCtrl::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,SIP_NULLPTR,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::AddChild(child);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxHeaderCtrl::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,SIP_NULLPTR,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxHeaderCtrl::RemoveChild(child);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxHeaderCtrl::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxHeaderCtrl::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxHeaderCtrl::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxHeaderCtrl::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::DoEnable(enable) : DoEnable(enable));
}

void sipwxHeaderCtrl::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxHeaderCtrl::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxHeaderCtrl::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxHeaderCtrl::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHeaderCtrl::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxHeaderCtrl::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHeaderCtrl::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxHeaderCtrl::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxHeaderCtrl::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxHeaderCtrl::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxHeaderCtrl::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHeaderCtrl::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxHeaderCtrl::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxHeaderCtrl::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxHeaderCtrl::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHeaderCtrl::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxHeaderCtrl::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHeaderCtrl::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxHeaderCtrl::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::DoFreeze() : DoFreeze());
}

void sipwxHeaderCtrl::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::DoThaw() : DoThaw());
}

bool sipwxHeaderCtrl::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxHeaderCtrl::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxHeaderCtrl::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxHeaderCtrl::TryBefore(event) : TryBefore(event));
}

bool sipwxHeaderCtrl::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxHeaderCtrl::TryAfter(event) : TryAfter(event));
}

const  ::wxHeaderColumn& sipwxHeaderCtrl::sipProtect_GetColumn(uint idx) const
{
    return GetColumn(idx);
}

void sipwxHeaderCtrl::sipProtectVirt_UpdateColumnVisibility(bool sipSelfWasArg,uint idx,bool show)
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::UpdateColumnVisibility(idx,show) : UpdateColumnVisibility(idx,show));
}

void sipwxHeaderCtrl::sipProtectVirt_UpdateColumnsOrder(bool sipSelfWasArg,const  ::wxArrayInt& order)
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::UpdateColumnsOrder(order) : UpdateColumnsOrder(order));
}

bool sipwxHeaderCtrl::sipProtectVirt_UpdateColumnWidthToFit(bool sipSelfWasArg,uint idx,int widthTitle)
{
    return (sipSelfWasArg ?  ::wxHeaderCtrl::UpdateColumnWidthToFit(idx,widthTitle) : UpdateColumnWidthToFit(idx,widthTitle));
}

void sipwxHeaderCtrl::sipProtectVirt_OnColumnCountChanging(bool sipSelfWasArg,uint count)
{
    (sipSelfWasArg ?  ::wxHeaderCtrl::OnColumnCountChanging(count) : OnColumnCountChanging(count));
}


PyDoc_STRVAR(doc_wxHeaderCtrl_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxHeaderCtrl_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_Create, "Create(parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=HD_DEFAULT_STYLE, name=HeaderCtrlNameStr) -> bool\n"
"\n"
"Create the header control window.");

extern "C" {static PyObject *meth_wxHeaderCtrl_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* parent;
         ::wxWindowID winid = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxHD_DEFAULT_STYLE;
        const  ::wxString& namedef = wxHeaderCtrlNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_winid,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|iJ1J1lJ1", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &winid, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,winid,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_SetColumnCount, "SetColumnCount(count)\n"
"\n"
"Set the number of columns in the control.");

extern "C" {static PyObject *meth_wxHeaderCtrl_SetColumnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_SetColumnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint count;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_count,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &count))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetColumnCount(count);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_SetColumnCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_GetColumnCount, "GetColumnCount() -> unsignedint\n"
"\n"
"Return the number of columns in the control.");

extern "C" {static PyObject *meth_wxHeaderCtrl_GetColumnCount(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_GetColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_GetColumnCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_IsEmpty, "IsEmpty() -> bool\n"
"\n"
"Return whether the control has any columns.");

extern "C" {static PyObject *meth_wxHeaderCtrl_IsEmpty(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_IsEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsEmpty();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_IsEmpty, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_UpdateColumn, "UpdateColumn(idx)\n"
"\n"
"Update the column with the given index.");

extern "C" {static PyObject *meth_wxHeaderCtrl_UpdateColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_UpdateColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint idx;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_idx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &idx))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->UpdateColumn(idx);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_UpdateColumn, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_SetColumnsOrder, "SetColumnsOrder(order)\n"
"\n"
"Change the columns display order.");

extern "C" {static PyObject *meth_wxHeaderCtrl_SetColumnsOrder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_SetColumnsOrder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxArrayInt* order;
        int orderState = 0;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, sipType_wxArrayInt,&order, &orderState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetColumnsOrder(*order);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxArrayInt *>(order),sipType_wxArrayInt,orderState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_SetColumnsOrder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_GetColumnsOrder, "GetColumnsOrder() -> ArrayInt\n"
"\n"
"Return the array describing the columns display order.");

extern "C" {static PyObject *meth_wxHeaderCtrl_GetColumnsOrder(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_GetColumnsOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
             ::wxArrayInt*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxArrayInt(sipCpp->GetColumnsOrder());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxArrayInt,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_GetColumnsOrder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_GetColumnAt, "GetColumnAt(pos) -> unsignedint\n"
"\n"
"Return the index of the column displayed at the given position.");

extern "C" {static PyObject *meth_wxHeaderCtrl_GetColumnAt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_GetColumnAt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint pos;
        const  ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &pos))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnAt(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_GetColumnAt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_GetColumnPos, "GetColumnPos(idx) -> unsignedint\n"
"\n"
"Get the position at which this column is currently displayed.");

extern "C" {static PyObject *meth_wxHeaderCtrl_GetColumnPos(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_GetColumnPos(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint idx;
        const  ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_idx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &idx))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnPos(idx);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_GetColumnPos, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_ResetColumnsOrder, "ResetColumnsOrder()\n"
"\n"
"Reset the columns order to the natural one.");

extern "C" {static PyObject *meth_wxHeaderCtrl_ResetColumnsOrder(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_ResetColumnsOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ResetColumnsOrder();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_ResetColumnsOrder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_ShowColumnsMenu, "ShowColumnsMenu(pt, title=\"\") -> bool\n"
"\n"
"Show the popup menu allowing the user to show or hide the columns.");

extern "C" {static PyObject *meth_wxHeaderCtrl_ShowColumnsMenu(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_ShowColumnsMenu(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint* pt;
        int ptState = 0;
        const  ::wxString& titledef = wxString();
        const  ::wxString* title = &titledef;
        int titleState = 0;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
            sipName_title,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, sipType_wxPoint, &pt, &ptState, sipType_wxString,&title, &titleState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ShowColumnsMenu(*pt,*title);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_ShowColumnsMenu, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_AddColumnsItems, "AddColumnsItems(menu, idColumnsBase=0)\n"
"\n"
"Helper function appending the checkable items corresponding to all the\n"
"columns to the given menu.");

extern "C" {static PyObject *meth_wxHeaderCtrl_AddColumnsItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_AddColumnsItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxMenu* menu;
        int idColumnsBase = 0;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_menu,
            sipName_idColumnsBase,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, sipType_wxMenu, &menu, &idColumnsBase))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AddColumnsItems(*menu,idColumnsBase);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_AddColumnsItems, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_ShowCustomizeDialog, "ShowCustomizeDialog() -> bool\n"
"\n"
"Show the column customization dialog.");

extern "C" {static PyObject *meth_wxHeaderCtrl_ShowCustomizeDialog(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_ShowCustomizeDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ShowCustomizeDialog();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_ShowCustomizeDialog, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_GetColumnTitleWidth, "GetColumnTitleWidth(col) -> int\n"
"GetColumnTitleWidth(idx) -> int\n"
"\n"
"Returns width needed for given column's title.\n"
"");

extern "C" {static PyObject *meth_wxHeaderCtrl_GetColumnTitleWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_GetColumnTitleWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxHeaderColumn* col;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, sipType_wxHeaderColumn, &col))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnTitleWidth(*col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        uint idx;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_idx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &idx))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnTitleWidth(idx);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_GetColumnTitleWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_MoveColumnInOrderArray, "MoveColumnInOrderArray(order, idx, pos)\n"
"\n"
"Helper function to manipulate the array of column indices.");

extern "C" {static PyObject *meth_wxHeaderCtrl_MoveColumnInOrderArray(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_MoveColumnInOrderArray(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxArrayInt* order;
        int orderState = 0;
        uint idx;
        uint pos;

        static const char *sipKwdList[] = {
            sipName_order,
            sipName_idx,
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1uu", sipType_wxArrayInt,&order, &orderState, &idx, &pos))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxHeaderCtrl::MoveColumnInOrderArray(*order,idx,pos);
            Py_END_ALLOW_THREADS
            sipReleaseType(order,sipType_wxArrayInt,orderState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_MoveColumnInOrderArray, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxHeaderCtrl_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_GetClientAreaOrigin, doc_wxHeaderCtrl_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxHeaderCtrl_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_Validate, doc_wxHeaderCtrl_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxHeaderCtrl_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_TransferDataToWindow, doc_wxHeaderCtrl_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxHeaderCtrl_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_TransferDataFromWindow, doc_wxHeaderCtrl_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxHeaderCtrl_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_InitDialog, doc_wxHeaderCtrl_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxHeaderCtrl_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_AcceptsFocus, doc_wxHeaderCtrl_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxHeaderCtrl_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_AcceptsFocusRecursively, doc_wxHeaderCtrl_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxHeaderCtrl_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_AcceptsFocusFromKeyboard, doc_wxHeaderCtrl_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxHeaderCtrl_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_AddChild, doc_wxHeaderCtrl_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxHeaderCtrl_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_RemoveChild, doc_wxHeaderCtrl_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxHeaderCtrl_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_InheritAttributes, doc_wxHeaderCtrl_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxHeaderCtrl_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_ShouldInheritColours, doc_wxHeaderCtrl_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxHeaderCtrl_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_OnInternalIdle, doc_wxHeaderCtrl_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxHeaderCtrl_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_GetMainWindowOfCompositeControl, doc_wxHeaderCtrl_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxHeaderCtrl_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_InformFirstDirection, doc_wxHeaderCtrl_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxHeaderCtrl_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_SetCanFocus, doc_wxHeaderCtrl_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxHeaderCtrl_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_Destroy, doc_wxHeaderCtrl_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxHeaderCtrl_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_SetValidator, doc_wxHeaderCtrl_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxHeaderCtrl_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_GetValidator, doc_wxHeaderCtrl_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth_wxHeaderCtrl_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
         ::wxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderCtrl::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_EnableVisibleFocus, doc_wxHeaderCtrl_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxHeaderCtrl_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_ProcessEvent, doc_wxHeaderCtrl_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoEnable, doc_wxHeaderCtrl_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxHeaderCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoGetPosition, doc_wxHeaderCtrl_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxHeaderCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoGetSize, doc_wxHeaderCtrl_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxHeaderCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoGetClientSize, doc_wxHeaderCtrl_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoGetBestSize, doc_wxHeaderCtrl_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoGetBestClientSize, doc_wxHeaderCtrl_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoSetSize, doc_wxHeaderCtrl_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoSetClientSize, doc_wxHeaderCtrl_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoSetSizeHints, doc_wxHeaderCtrl_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoGetBorderSize(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoGetBorderSize, doc_wxHeaderCtrl_DoGetBorderSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoMoveWindow, doc_wxHeaderCtrl_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoSetWindowVariant, doc_wxHeaderCtrl_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxHeaderCtrl_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_GetDefaultBorder, doc_wxHeaderCtrl_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxHeaderCtrl_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_GetDefaultBorderForControl, doc_wxHeaderCtrl_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoFreeze, doc_wxHeaderCtrl_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxHeaderCtrl_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_DoThaw, doc_wxHeaderCtrl_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxHeaderCtrl_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxHeaderCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_HasTransparentBackground, doc_wxHeaderCtrl_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxHeaderCtrl_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_TryBefore, doc_wxHeaderCtrl_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxHeaderCtrl_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_TryAfter, doc_wxHeaderCtrl_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxHeaderCtrl_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxHeaderCtrl::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_GetColumn, "GetColumn(idx) -> HeaderColumn\n"
"\n"
"Method to be implemented by the derived classes to return the\n"
"information for the given column.");

extern "C" {static PyObject *meth_wxHeaderCtrl_GetColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_GetColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        uint idx;
        const sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_idx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &idx))
        {
            const  ::wxHeaderColumn*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_HeaderCtrl, sipName_GetColumn);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->sipProtect_GetColumn(idx);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(const_cast< ::wxHeaderColumn *>(sipRes),sipType_wxHeaderColumn,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_GetColumn, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_UpdateColumnVisibility, "UpdateColumnVisibility(idx, show)\n"
"\n"
"Method called when the column visibility is changed by the user.");

extern "C" {static PyObject *meth_wxHeaderCtrl_UpdateColumnVisibility(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_UpdateColumnVisibility(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        uint idx;
        bool show;
        sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_idx,
            sipName_show,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bub", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &idx, &show))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_UpdateColumnVisibility(sipSelfWasArg,idx,show);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_UpdateColumnVisibility, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_UpdateColumnsOrder, "UpdateColumnsOrder(order)\n"
"\n"
"Method called when the columns order is changed in the customization\n"
"dialog.");

extern "C" {static PyObject *meth_wxHeaderCtrl_UpdateColumnsOrder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_UpdateColumnsOrder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxArrayInt* order;
        int orderState = 0;
        sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, sipType_wxArrayInt,&order, &orderState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_UpdateColumnsOrder(sipSelfWasArg,*order);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxArrayInt *>(order),sipType_wxArrayInt,orderState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_UpdateColumnsOrder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_UpdateColumnWidthToFit, "UpdateColumnWidthToFit(idx, widthTitle) -> bool\n"
"\n"
"Method which may be implemented by the derived classes to allow double\n"
"clicking the column separator to resize the column to fit its\n"
"contents.");

extern "C" {static PyObject *meth_wxHeaderCtrl_UpdateColumnWidthToFit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_UpdateColumnWidthToFit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        uint idx;
        int widthTitle;
        sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_idx,
            sipName_widthTitle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bui", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &idx, &widthTitle))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_UpdateColumnWidthToFit(sipSelfWasArg,idx,widthTitle);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_UpdateColumnWidthToFit, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHeaderCtrl_OnColumnCountChanging, "OnColumnCountChanging(count)\n"
"\n"
"Can be overridden in the derived class to update internal data\n"
"structures when the number of the columns in the control changes.");

extern "C" {static PyObject *meth_wxHeaderCtrl_OnColumnCountChanging(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderCtrl_OnColumnCountChanging(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        uint count;
        sipwxHeaderCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_count,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxHeaderCtrl, &sipCpp, &count))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_OnColumnCountChanging(sipSelfWasArg,count);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HeaderCtrl, sipName_OnColumnCountChanging, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxHeaderCtrl(void *, const sipTypeDef *);}
static void *cast_wxHeaderCtrl(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxHeaderCtrl *sipCpp = reinterpret_cast< ::wxHeaderCtrl *>(sipCppV);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxHeaderCtrl(void *, int);}
static void release_wxHeaderCtrl(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxHeaderCtrl *>(sipCppV);
    else
        delete reinterpret_cast< ::wxHeaderCtrl *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxHeaderCtrl(sipSimpleWrapper *);}
static void dealloc_wxHeaderCtrl(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxHeaderCtrl *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxHeaderCtrl(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxHeaderCtrl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxHeaderCtrl(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxHeaderCtrl *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHeaderCtrl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID winid = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxHD_DEFAULT_STYLE;
        const  ::wxString& namedef = wxHeaderCtrlNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_winid,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1lJ1", sipType_wxWindow, &parent, sipOwner, &winid, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHeaderCtrl(parent,winid,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxHeaderCtrl[] = {{93, 255, 1}};


static PyMethodDef methods_wxHeaderCtrl[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxHeaderCtrl_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxHeaderCtrl_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxHeaderCtrl_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), SIP_MLMETH_CAST(meth_wxHeaderCtrl_AddChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_AddChild)},
    {SIP_MLNAME_CAST(sipName_AddColumnsItems), SIP_MLMETH_CAST(meth_wxHeaderCtrl_AddColumnsItems), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_AddColumnsItems)},
    {SIP_MLNAME_CAST(sipName_Create), SIP_MLMETH_CAST(meth_wxHeaderCtrl_Create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_Create)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxHeaderCtrl_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), SIP_MLMETH_CAST(meth_wxHeaderCtrl_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), meth_wxHeaderCtrl_DoFreeze, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), meth_wxHeaderCtrl_DoGetBestClientSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), meth_wxHeaderCtrl_DoGetBestSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), meth_wxHeaderCtrl_DoGetBorderSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), SIP_MLMETH_CAST(meth_wxHeaderCtrl_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), SIP_MLMETH_CAST(meth_wxHeaderCtrl_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), SIP_MLMETH_CAST(meth_wxHeaderCtrl_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), SIP_MLMETH_CAST(meth_wxHeaderCtrl_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), SIP_MLMETH_CAST(meth_wxHeaderCtrl_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), SIP_MLMETH_CAST(meth_wxHeaderCtrl_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), SIP_MLMETH_CAST(meth_wxHeaderCtrl_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), SIP_MLMETH_CAST(meth_wxHeaderCtrl_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), meth_wxHeaderCtrl_DoThaw, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EnableVisibleFocus), SIP_MLMETH_CAST(meth_wxHeaderCtrl_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_EnableVisibleFocus)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), SIP_MLMETH_CAST(meth_wxHeaderCtrl_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxHeaderCtrl_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetColumn), SIP_MLMETH_CAST(meth_wxHeaderCtrl_GetColumn), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_GetColumn)},
    {SIP_MLNAME_CAST(sipName_GetColumnAt), SIP_MLMETH_CAST(meth_wxHeaderCtrl_GetColumnAt), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_GetColumnAt)},
    {SIP_MLNAME_CAST(sipName_GetColumnCount), meth_wxHeaderCtrl_GetColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_GetColumnCount)},
    {SIP_MLNAME_CAST(sipName_GetColumnPos), SIP_MLMETH_CAST(meth_wxHeaderCtrl_GetColumnPos), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_GetColumnPos)},
    {SIP_MLNAME_CAST(sipName_GetColumnTitleWidth), SIP_MLMETH_CAST(meth_wxHeaderCtrl_GetColumnTitleWidth), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_GetColumnTitleWidth)},
    {SIP_MLNAME_CAST(sipName_GetColumnsOrder), meth_wxHeaderCtrl_GetColumnsOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_GetColumnsOrder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), meth_wxHeaderCtrl_GetDefaultBorder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), meth_wxHeaderCtrl_GetDefaultBorderForControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxHeaderCtrl_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxHeaderCtrl_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_GetValidator)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), meth_wxHeaderCtrl_HasTransparentBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), SIP_MLMETH_CAST(meth_wxHeaderCtrl_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxHeaderCtrl_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxHeaderCtrl_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_InitDialog)},
    {SIP_MLNAME_CAST(sipName_IsEmpty), meth_wxHeaderCtrl_IsEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_IsEmpty)},
    {SIP_MLNAME_CAST(sipName_MoveColumnInOrderArray), SIP_MLMETH_CAST(meth_wxHeaderCtrl_MoveColumnInOrderArray), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_MoveColumnInOrderArray)},
    {SIP_MLNAME_CAST(sipName_OnColumnCountChanging), SIP_MLMETH_CAST(meth_wxHeaderCtrl_OnColumnCountChanging), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_OnColumnCountChanging)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxHeaderCtrl_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), SIP_MLMETH_CAST(meth_wxHeaderCtrl_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), SIP_MLMETH_CAST(meth_wxHeaderCtrl_RemoveChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_ResetColumnsOrder), meth_wxHeaderCtrl_ResetColumnsOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_ResetColumnsOrder)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), meth_wxHeaderCtrl_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), SIP_MLMETH_CAST(meth_wxHeaderCtrl_SetCanFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetColumnCount), SIP_MLMETH_CAST(meth_wxHeaderCtrl_SetColumnCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_SetColumnCount)},
    {SIP_MLNAME_CAST(sipName_SetColumnsOrder), SIP_MLMETH_CAST(meth_wxHeaderCtrl_SetColumnsOrder), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_SetColumnsOrder)},
    {SIP_MLNAME_CAST(sipName_SetValidator), SIP_MLMETH_CAST(meth_wxHeaderCtrl_SetValidator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxHeaderCtrl_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_ShowColumnsMenu), SIP_MLMETH_CAST(meth_wxHeaderCtrl_ShowColumnsMenu), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_ShowColumnsMenu)},
    {SIP_MLNAME_CAST(sipName_ShowCustomizeDialog), meth_wxHeaderCtrl_ShowCustomizeDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_ShowCustomizeDialog)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxHeaderCtrl_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxHeaderCtrl_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth_wxHeaderCtrl_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth_wxHeaderCtrl_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_TryBefore)},
    {SIP_MLNAME_CAST(sipName_UpdateColumn), SIP_MLMETH_CAST(meth_wxHeaderCtrl_UpdateColumn), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_UpdateColumn)},
    {SIP_MLNAME_CAST(sipName_UpdateColumnVisibility), SIP_MLMETH_CAST(meth_wxHeaderCtrl_UpdateColumnVisibility), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_UpdateColumnVisibility)},
    {SIP_MLNAME_CAST(sipName_UpdateColumnWidthToFit), SIP_MLMETH_CAST(meth_wxHeaderCtrl_UpdateColumnWidthToFit), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_UpdateColumnWidthToFit)},
    {SIP_MLNAME_CAST(sipName_UpdateColumnsOrder), SIP_MLMETH_CAST(meth_wxHeaderCtrl_UpdateColumnsOrder), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_UpdateColumnsOrder)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxHeaderCtrl_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderCtrl_Validate)}
};

sipVariableDef variables_wxHeaderCtrl[] = {
    {PropertyVariable, sipName_ColumnsOrder, &methods_wxHeaderCtrl[29], &methods_wxHeaderCtrl[48], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ColumnCount, &methods_wxHeaderCtrl[26], &methods_wxHeaderCtrl[47], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxHeaderCtrl, "HeaderCtrl()\n"
"HeaderCtrl(parent, winid=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=HD_DEFAULT_STYLE, name=HeaderCtrlNameStr)\n"
"\n"
"wxHeaderCtrl is the control containing the column headings which is\n"
"usually used for display of tabular data.");


sipClassTypeDef sipTypeDef__core_wxHeaderCtrl = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxHeaderCtrl,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_HeaderCtrl,
        {0, 0, 1},
        62, methods_wxHeaderCtrl,
        0, SIP_NULLPTR,
        2, variables_wxHeaderCtrl,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxHeaderCtrl,
    -1,
    -1,
    supers_wxHeaderCtrl,
    SIP_NULLPTR,
    init_type_wxHeaderCtrl,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxHeaderCtrl,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxHeaderCtrl,
    cast_wxHeaderCtrl,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
