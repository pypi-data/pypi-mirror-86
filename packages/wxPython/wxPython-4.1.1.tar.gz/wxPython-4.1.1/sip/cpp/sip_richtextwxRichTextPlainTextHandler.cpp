/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_richtext.h"

        #include <wx/richtext/richtextbuffer.h>

        #include <wx/richtext/richtextbuffer.h>
        #include <wx/stream.h>
        #include <wx/stream.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxRichTextPlainTextHandler : public  ::wxRichTextPlainTextHandler
{
public:
    sipwxRichTextPlainTextHandler(const  ::wxString&,const  ::wxString&, ::wxRichTextFileType);
    sipwxRichTextPlainTextHandler(const  ::wxRichTextPlainTextHandler&);
    virtual ~sipwxRichTextPlainTextHandler();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    bool sipProtectVirt_DoLoadFile(bool, ::wxRichTextBuffer*, ::wxInputStream&);
    bool sipProtectVirt_DoSaveFile(bool, ::wxRichTextBuffer*, ::wxOutputStream&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool LoadFile( ::wxRichTextBuffer*,const  ::wxString&) SIP_OVERRIDE;
    bool SaveFile( ::wxRichTextBuffer*,const  ::wxString&) SIP_OVERRIDE;
    bool CanHandle(const  ::wxString&) const SIP_OVERRIDE;
    bool CanSave() const SIP_OVERRIDE;
    bool CanLoad() const SIP_OVERRIDE;
    bool IsVisible() const SIP_OVERRIDE;
    void SetVisible(bool) SIP_OVERRIDE;
    bool DoLoadFile( ::wxRichTextBuffer*, ::wxInputStream&) SIP_OVERRIDE;
    bool DoSaveFile( ::wxRichTextBuffer*, ::wxOutputStream&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRichTextPlainTextHandler(const sipwxRichTextPlainTextHandler &);
    sipwxRichTextPlainTextHandler &operator = (const sipwxRichTextPlainTextHandler &);

    char sipPyMethods[9];
};

sipwxRichTextPlainTextHandler::sipwxRichTextPlainTextHandler(const  ::wxString& name,const  ::wxString& ext, ::wxRichTextFileType type):  ::wxRichTextPlainTextHandler(name,ext,type), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextPlainTextHandler::sipwxRichTextPlainTextHandler(const  ::wxRichTextPlainTextHandler& a0):  ::wxRichTextPlainTextHandler(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextPlainTextHandler::~sipwxRichTextPlainTextHandler()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxRichTextPlainTextHandler::LoadFile( ::wxRichTextBuffer*buffer,const  ::wxString& filename)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_LoadFile);

    if (!sipMeth)
        return  ::wxRichTextPlainTextHandler::LoadFile(buffer,filename);

    extern bool sipVH__richtext_108(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextBuffer*,const  ::wxString&);

    return sipVH__richtext_108(sipGILState, 0, sipPySelf, sipMeth, buffer, filename);
}

bool sipwxRichTextPlainTextHandler::SaveFile( ::wxRichTextBuffer*buffer,const  ::wxString& filename)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_SaveFile);

    if (!sipMeth)
        return  ::wxRichTextPlainTextHandler::SaveFile(buffer,filename);

    extern bool sipVH__richtext_108(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextBuffer*,const  ::wxString&);

    return sipVH__richtext_108(sipGILState, 0, sipPySelf, sipMeth, buffer, filename);
}

bool sipwxRichTextPlainTextHandler::CanHandle(const  ::wxString& filename) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_CanHandle);

    if (!sipMeth)
        return  ::wxRichTextPlainTextHandler::CanHandle(filename);

    extern bool sipVH__richtext_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    return sipVH__richtext_96(sipGILState, 0, sipPySelf, sipMeth, filename);
}

bool sipwxRichTextPlainTextHandler::CanSave() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_CanSave);

    if (!sipMeth)
        return  ::wxRichTextPlainTextHandler::CanSave();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextPlainTextHandler::CanLoad() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_CanLoad);

    if (!sipMeth)
        return  ::wxRichTextPlainTextHandler::CanLoad();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextPlainTextHandler::IsVisible() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_IsVisible);

    if (!sipMeth)
        return  ::wxRichTextPlainTextHandler::IsVisible();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextPlainTextHandler::SetVisible(bool visible)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_SetVisible);

    if (!sipMeth)
    {
         ::wxRichTextPlainTextHandler::SetVisible(visible);
        return;
    }

    extern void sipVH__richtext_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__richtext_33(sipGILState, 0, sipPySelf, sipMeth, visible);
}

bool sipwxRichTextPlainTextHandler::DoLoadFile( ::wxRichTextBuffer*buffer, ::wxInputStream& stream)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_DoLoadFile);

    if (!sipMeth)
        return  ::wxRichTextPlainTextHandler::DoLoadFile(buffer,stream);

    extern bool sipVH__richtext_109(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextBuffer*, ::wxInputStream&);

    return sipVH__richtext_109(sipGILState, 0, sipPySelf, sipMeth, buffer, stream);
}

bool sipwxRichTextPlainTextHandler::DoSaveFile( ::wxRichTextBuffer*buffer, ::wxOutputStream& stream)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_DoSaveFile);

    if (!sipMeth)
        return  ::wxRichTextPlainTextHandler::DoSaveFile(buffer,stream);

    extern bool sipVH__richtext_110(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextBuffer*, ::wxOutputStream&);

    return sipVH__richtext_110(sipGILState, 0, sipPySelf, sipMeth, buffer, stream);
}

bool sipwxRichTextPlainTextHandler::sipProtectVirt_DoLoadFile(bool sipSelfWasArg, ::wxRichTextBuffer*buffer, ::wxInputStream& stream)
{
    return (sipSelfWasArg ?  ::wxRichTextPlainTextHandler::DoLoadFile(buffer,stream) : DoLoadFile(buffer,stream));
}

bool sipwxRichTextPlainTextHandler::sipProtectVirt_DoSaveFile(bool sipSelfWasArg, ::wxRichTextBuffer*buffer, ::wxOutputStream& stream)
{
    return (sipSelfWasArg ?  ::wxRichTextPlainTextHandler::DoSaveFile(buffer,stream) : DoSaveFile(buffer,stream));
}


PyDoc_STRVAR(doc_wxRichTextPlainTextHandler_CanSave, "CanSave() -> bool\n"
"\n"
"Returns true if we can save using this handler.");

extern "C" {static PyObject *meth_wxRichTextPlainTextHandler_CanSave(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextPlainTextHandler_CanSave(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextPlainTextHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextPlainTextHandler, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextPlainTextHandler::CanSave() : sipCpp->CanSave());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextPlainTextHandler, sipName_CanSave, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextPlainTextHandler_CanLoad, "CanLoad() -> bool\n"
"\n"
"Returns true if we can load using this handler.");

extern "C" {static PyObject *meth_wxRichTextPlainTextHandler_CanLoad(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextPlainTextHandler_CanLoad(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextPlainTextHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextPlainTextHandler, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextPlainTextHandler::CanLoad() : sipCpp->CanLoad());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextPlainTextHandler, sipName_CanLoad, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextPlainTextHandler_DoLoadFile, "DoLoadFile(buffer, stream) -> bool\n"
"\n"
"Override to load content from stream into buffer.");

extern "C" {static PyObject *meth_wxRichTextPlainTextHandler_DoLoadFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextPlainTextHandler_DoLoadFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextBuffer* buffer;
         ::wxInputStream* stream;
        int streamState = 0;
        sipwxRichTextPlainTextHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_buffer,
            sipName_stream,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1", &sipSelf, sipType_wxRichTextPlainTextHandler, &sipCpp, sipType_wxRichTextBuffer, &buffer, sipType_wxInputStream, &stream, &streamState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_DoLoadFile(sipSelfWasArg,buffer,*stream);
            Py_END_ALLOW_THREADS
            sipReleaseType(stream,sipType_wxInputStream,streamState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextPlainTextHandler, sipName_DoLoadFile, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextPlainTextHandler_DoSaveFile, "DoSaveFile(buffer, stream) -> bool\n"
"\n"
"Override to save content to stream from buffer.");

extern "C" {static PyObject *meth_wxRichTextPlainTextHandler_DoSaveFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextPlainTextHandler_DoSaveFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextBuffer* buffer;
         ::wxOutputStream* stream;
        int streamState = 0;
        sipwxRichTextPlainTextHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_buffer,
            sipName_stream,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1", &sipSelf, sipType_wxRichTextPlainTextHandler, &sipCpp, sipType_wxRichTextBuffer, &buffer, sipType_wxOutputStream, &stream, &streamState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_DoSaveFile(sipSelfWasArg,buffer,*stream);
            Py_END_ALLOW_THREADS
            sipReleaseType(stream,sipType_wxOutputStream,streamState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextPlainTextHandler, sipName_DoSaveFile, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRichTextPlainTextHandler(void *, const sipTypeDef *);}
static void *cast_wxRichTextPlainTextHandler(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRichTextPlainTextHandler *sipCpp = reinterpret_cast< ::wxRichTextPlainTextHandler *>(sipCppV);

    if (targetType == sipType_wxRichTextFileHandler)
        return static_cast< ::wxRichTextFileHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRichTextPlainTextHandler(void *, int);}
static void release_wxRichTextPlainTextHandler(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRichTextPlainTextHandler *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRichTextPlainTextHandler *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxRichTextPlainTextHandler(Py_ssize_t);}
static void *array_wxRichTextPlainTextHandler(Py_ssize_t sipNrElem)
{
    return new  ::wxRichTextPlainTextHandler[sipNrElem];
}


extern "C" {static void assign_wxRichTextPlainTextHandler(void *, SIP_SSIZE_T, void *);}
static void assign_wxRichTextPlainTextHandler(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxRichTextPlainTextHandler *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxRichTextPlainTextHandler *>(sipSrc);
}


extern "C" {static void *copy_wxRichTextPlainTextHandler(const void *, SIP_SSIZE_T);}
static void *copy_wxRichTextPlainTextHandler(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxRichTextPlainTextHandler(reinterpret_cast<const  ::wxRichTextPlainTextHandler *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxRichTextPlainTextHandler(sipSimpleWrapper *);}
static void dealloc_wxRichTextPlainTextHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRichTextPlainTextHandler *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRichTextPlainTextHandler(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRichTextPlainTextHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRichTextPlainTextHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxRichTextPlainTextHandler *sipCpp = SIP_NULLPTR;

    {
        const  ::wxString& namedef = "Text";
        const  ::wxString* name = &namedef;
        int nameState = 0;
        const  ::wxString& extdef = "txt";
        const  ::wxString* ext = &extdef;
        int extState = 0;
         ::wxRichTextFileType type = wxRICHTEXT_TYPE_TEXT;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_ext,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1J1E", sipType_wxString,&name, &nameState, sipType_wxString,&ext, &extState, sipType_wxRichTextFileType, &type))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextPlainTextHandler(*name,*ext,type);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);
            sipReleaseType(const_cast< ::wxString *>(ext),sipType_wxString,extState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxRichTextPlainTextHandler* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxRichTextPlainTextHandler, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextPlainTextHandler(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRichTextPlainTextHandler[] = {{24, 255, 1}};


static PyMethodDef methods_wxRichTextPlainTextHandler[] = {
    {SIP_MLNAME_CAST(sipName_CanLoad), meth_wxRichTextPlainTextHandler_CanLoad, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextPlainTextHandler_CanLoad)},
    {SIP_MLNAME_CAST(sipName_CanSave), meth_wxRichTextPlainTextHandler_CanSave, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextPlainTextHandler_CanSave)},
    {SIP_MLNAME_CAST(sipName_DoLoadFile), SIP_MLMETH_CAST(meth_wxRichTextPlainTextHandler_DoLoadFile), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextPlainTextHandler_DoLoadFile)},
    {SIP_MLNAME_CAST(sipName_DoSaveFile), SIP_MLMETH_CAST(meth_wxRichTextPlainTextHandler_DoSaveFile), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextPlainTextHandler_DoSaveFile)}
};

PyDoc_STRVAR(doc_wxRichTextPlainTextHandler, "RichTextPlainTextHandler(name=\"Text\", ext=\"txt\", type=RICHTEXT_TYPE_TEXT)\n"
"\n"
"Implements saving a buffer to plain text.");


sipClassTypeDef sipTypeDef__richtext_wxRichTextPlainTextHandler = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRichTextPlainTextHandler,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_RichTextPlainTextHandler,
        {0, 0, 1},
        4, methods_wxRichTextPlainTextHandler,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxRichTextPlainTextHandler,
    -1,
    -1,
    supers_wxRichTextPlainTextHandler,
    SIP_NULLPTR,
    init_type_wxRichTextPlainTextHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxRichTextPlainTextHandler,
    assign_wxRichTextPlainTextHandler,
    array_wxRichTextPlainTextHandler,
    copy_wxRichTextPlainTextHandler,
    release_wxRichTextPlainTextHandler,
    cast_wxRichTextPlainTextHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
