/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_dataview.h"

        #include <wx/dataview.h>

        #include <wx/dataview.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>


class sipwxDataViewListStore : public  ::wxDataViewListStore
{
public:
    sipwxDataViewListStore();
    virtual ~sipwxDataViewListStore();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void GetValue( ::wxDVCVariant&,const  ::wxDataViewItem&,uint) const SIP_OVERRIDE;
    bool SetValueByRow(const  ::wxDVCVariant&,uint,uint) SIP_OVERRIDE;
    void GetValueByRow( ::wxVariant&,uint,uint) const SIP_OVERRIDE;
    uint GetRow(const  ::wxDataViewItem&) const SIP_OVERRIDE;
    uint GetCount() const SIP_OVERRIDE;
    bool IsEnabledByRow(uint,uint) const SIP_OVERRIDE;
    bool GetAttrByRow(uint,uint, ::wxDataViewItemAttr&) const SIP_OVERRIDE;
    int Compare(const  ::wxDataViewItem&,const  ::wxDataViewItem&,uint,bool) const SIP_OVERRIDE;
    bool GetAttr(const  ::wxDataViewItem&,uint, ::wxDataViewItemAttr&) const SIP_OVERRIDE;
    bool IsEnabled(const  ::wxDataViewItem&,uint) const SIP_OVERRIDE;
    uint GetChildren(const  ::wxDataViewItem&, ::wxDataViewItemArray&) const SIP_OVERRIDE;
    uint GetColumnCount() const SIP_OVERRIDE;
     ::wxString GetColumnType(uint) const SIP_OVERRIDE;
     ::wxDataViewItem GetParent(const  ::wxDataViewItem&) const SIP_OVERRIDE;
    bool HasContainerColumns(const  ::wxDataViewItem&) const SIP_OVERRIDE;
    bool HasDefaultCompare() const SIP_OVERRIDE;
    bool HasValue(const  ::wxDataViewItem&,uint) const SIP_OVERRIDE;
    bool IsContainer(const  ::wxDataViewItem&) const SIP_OVERRIDE;
    void Resort() SIP_OVERRIDE;
    bool SetValue(const  ::wxDVCVariant&,const  ::wxDataViewItem&,uint) SIP_OVERRIDE;
    bool IsListModel() const SIP_OVERRIDE;
    bool IsVirtualListModel() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxDataViewListStore(const sipwxDataViewListStore &);
    sipwxDataViewListStore &operator = (const sipwxDataViewListStore &);

    char sipPyMethods[22];
};

sipwxDataViewListStore::sipwxDataViewListStore():  ::wxDataViewListStore(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDataViewListStore::~sipwxDataViewListStore()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxDataViewListStore::GetValue( ::wxDVCVariant& variant,const  ::wxDataViewItem& item,uint col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_GetValue);

    if (!sipMeth)
    {
         ::wxDataViewListStore::GetValue(variant,item,col);
        return;
    }

    extern void sipVH__dataview_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDVCVariant&,const  ::wxDataViewItem&,uint);

    sipVH__dataview_20(sipGILState, 0, sipPySelf, sipMeth, variant, item, col);
}

bool sipwxDataViewListStore::SetValueByRow(const  ::wxDVCVariant& value,uint row,uint col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_SetValueByRow);

    if (!sipMeth)
        return  ::wxDataViewListStore::SetValueByRow(value,row,col);

    extern bool sipVH__dataview_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDVCVariant&,uint,uint);

    return sipVH__dataview_19(sipGILState, 0, sipPySelf, sipMeth, value, row, col);
}

void sipwxDataViewListStore::GetValueByRow( ::wxVariant& value,uint row,uint col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_GetValueByRow);

    if (!sipMeth)
    {
         ::wxDataViewListStore::GetValueByRow(value,row,col);
        return;
    }

    extern void sipVH__dataview_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxVariant&,uint,uint);

    sipVH__dataview_18(sipGILState, 0, sipPySelf, sipMeth, value, row, col);
}

uint sipwxDataViewListStore::GetRow(const  ::wxDataViewItem& item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_GetRow);

    if (!sipMeth)
        return  ::wxDataViewListStore::GetRow(item);

    extern uint sipVH__dataview_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&);

    return sipVH__dataview_17(sipGILState, 0, sipPySelf, sipMeth, item);
}

uint sipwxDataViewListStore::GetCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_GetCount);

    if (!sipMeth)
        return  ::wxDataViewListStore::GetCount();

    extern uint sipVH__dataview_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_10(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListStore::IsEnabledByRow(uint row,uint col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_IsEnabledByRow);

    if (!sipMeth)
        return  ::wxDataViewListStore::IsEnabledByRow(row,col);

    extern bool sipVH__dataview_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint,uint);

    return sipVH__dataview_16(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

bool sipwxDataViewListStore::GetAttrByRow(uint row,uint col, ::wxDataViewItemAttr& attr) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_GetAttrByRow);

    if (!sipMeth)
        return  ::wxDataViewListStore::GetAttrByRow(row,col,attr);

    extern bool sipVH__dataview_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint,uint, ::wxDataViewItemAttr&);

    return sipVH__dataview_15(sipGILState, 0, sipPySelf, sipMeth, row, col, attr);
}

int sipwxDataViewListStore::Compare(const  ::wxDataViewItem& item1,const  ::wxDataViewItem& item2,uint column,bool ascending) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_Compare);

    if (!sipMeth)
        return  ::wxDataViewListStore::Compare(item1,item2,column,ascending);

    extern int sipVH__dataview_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&,const  ::wxDataViewItem&,uint,bool);

    return sipVH__dataview_7(sipGILState, 0, sipPySelf, sipMeth, item1, item2, column, ascending);
}

bool sipwxDataViewListStore::GetAttr(const  ::wxDataViewItem& item,uint col, ::wxDataViewItemAttr& attr) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_GetAttr);

    if (!sipMeth)
        return  ::wxDataViewListStore::GetAttr(item,col,attr);

    extern bool sipVH__dataview_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&,uint, ::wxDataViewItemAttr&);

    return sipVH__dataview_8(sipGILState, 0, sipPySelf, sipMeth, item, col, attr);
}

bool sipwxDataViewListStore::IsEnabled(const  ::wxDataViewItem& item,uint col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_IsEnabled);

    if (!sipMeth)
        return  ::wxDataViewListStore::IsEnabled(item,col);

    extern bool sipVH__dataview_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&,uint);

    return sipVH__dataview_6(sipGILState, 0, sipPySelf, sipMeth, item, col);
}

uint sipwxDataViewListStore::GetChildren(const  ::wxDataViewItem& item, ::wxDataViewItemArray& children) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_GetChildren);

    if (!sipMeth)
        return  ::wxDataViewListStore::GetChildren(item,children);

    extern uint sipVH__dataview_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&, ::wxDataViewItemArray&);

    return sipVH__dataview_9(sipGILState, 0, sipPySelf, sipMeth, item, children);
}

uint sipwxDataViewListStore::GetColumnCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_GetColumnCount);

    if (!sipMeth)
        return  ::wxDataViewListStore::GetColumnCount();

    extern uint sipVH__dataview_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxDataViewListStore::GetColumnType(uint col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_GetColumnType);

    if (!sipMeth)
        return  ::wxDataViewListStore::GetColumnType(col);

    extern  ::wxString sipVH__dataview_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint);

    return sipVH__dataview_11(sipGILState, 0, sipPySelf, sipMeth, col);
}

 ::wxDataViewItem sipwxDataViewListStore::GetParent(const  ::wxDataViewItem& item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_GetParent);

    if (!sipMeth)
        return  ::wxDataViewListStore::GetParent(item);

    extern  ::wxDataViewItem sipVH__dataview_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&);

    return sipVH__dataview_12(sipGILState, 0, sipPySelf, sipMeth, item);
}

bool sipwxDataViewListStore::HasContainerColumns(const  ::wxDataViewItem& item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_HasContainerColumns);

    if (!sipMeth)
        return  ::wxDataViewListStore::HasContainerColumns(item);

    extern bool sipVH__dataview_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&);

    return sipVH__dataview_2(sipGILState, 0, sipPySelf, sipMeth, item);
}

bool sipwxDataViewListStore::HasDefaultCompare() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_HasDefaultCompare);

    if (!sipMeth)
        return  ::wxDataViewListStore::HasDefaultCompare();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListStore::HasValue(const  ::wxDataViewItem& item,uint col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_HasValue);

    if (!sipMeth)
        return  ::wxDataViewListStore::HasValue(item,col);

    extern bool sipVH__dataview_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&,uint);

    return sipVH__dataview_6(sipGILState, 0, sipPySelf, sipMeth, item, col);
}

bool sipwxDataViewListStore::IsContainer(const  ::wxDataViewItem& item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_IsContainer);

    if (!sipMeth)
        return  ::wxDataViewListStore::IsContainer(item);

    extern bool sipVH__dataview_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&);

    return sipVH__dataview_2(sipGILState, 0, sipPySelf, sipMeth, item);
}

void sipwxDataViewListStore::Resort()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_Resort);

    if (!sipMeth)
    {
         ::wxDataViewListStore::Resort();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListStore::SetValue(const  ::wxDVCVariant& variant,const  ::wxDataViewItem& item,uint col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_SetValue);

    if (!sipMeth)
        return  ::wxDataViewListStore::SetValue(variant,item,col);

    extern bool sipVH__dataview_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDVCVariant&,const  ::wxDataViewItem&,uint);

    return sipVH__dataview_14(sipGILState, 0, sipPySelf, sipMeth, variant, item, col);
}

bool sipwxDataViewListStore::IsListModel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,SIP_NULLPTR,sipName_IsListModel);

    if (!sipMeth)
        return  ::wxDataViewListStore::IsListModel();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListStore::IsVirtualListModel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,SIP_NULLPTR,sipName_IsVirtualListModel);

    if (!sipMeth)
        return  ::wxDataViewListStore::IsVirtualListModel();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxDataViewListStore_PrependColumn, "PrependColumn(varianttype)\n"
"\n"
"Prepends a data column.");

extern "C" {static PyObject *meth_wxDataViewListStore_PrependColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_PrependColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* varianttype;
        int varianttypeState = 0;
         ::wxDataViewListStore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_varianttype,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxDataViewListStore, &sipCpp, sipType_wxString,&varianttype, &varianttypeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->PrependColumn(*varianttype);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(varianttype),sipType_wxString,varianttypeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_PrependColumn, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_InsertColumn, "InsertColumn(pos, varianttype)\n"
"\n"
"Inserts a data column before pos.");

extern "C" {static PyObject *meth_wxDataViewListStore_InsertColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_InsertColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint pos;
        const  ::wxString* varianttype;
        int varianttypeState = 0;
         ::wxDataViewListStore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_varianttype,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BuJ1", &sipSelf, sipType_wxDataViewListStore, &sipCpp, &pos, sipType_wxString,&varianttype, &varianttypeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->InsertColumn(pos,*varianttype);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(varianttype),sipType_wxString,varianttypeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_InsertColumn, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_AppendColumn, "AppendColumn(varianttype)\n"
"\n"
"Appends a data column.");

extern "C" {static PyObject *meth_wxDataViewListStore_AppendColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_AppendColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* varianttype;
        int varianttypeState = 0;
         ::wxDataViewListStore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_varianttype,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxDataViewListStore, &sipCpp, sipType_wxString,&varianttype, &varianttypeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AppendColumn(*varianttype);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(varianttype),sipType_wxString,varianttypeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_AppendColumn, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_AppendItem, "AppendItem(values, data=None)\n"
"\n"
"Appends an item (=row) and fills it with values.");

extern "C" {static PyObject *meth_wxDataViewListStore_AppendItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_AppendItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxVariantVector* values;
        int valuesState = 0;
         ::wxUIntPtr datadef = 0;
         ::wxUIntPtr* data = &datadef;
        int dataState = 0;
         ::wxDataViewListStore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_values,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_wxDataViewListStore, &sipCpp, sipType_wxVariantVector,&values, &valuesState, sipType_wxUIntPtr,&data, &dataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AppendItem(*values,*data);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxVariantVector *>(values),sipType_wxVariantVector,valuesState);
            sipReleaseType(data,sipType_wxUIntPtr,dataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_AppendItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_PrependItem, "PrependItem(values, data=None)\n"
"\n"
"Prepends an item (=row) and fills it with values.");

extern "C" {static PyObject *meth_wxDataViewListStore_PrependItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_PrependItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxVariantVector* values;
        int valuesState = 0;
         ::wxUIntPtr datadef = 0;
         ::wxUIntPtr* data = &datadef;
        int dataState = 0;
         ::wxDataViewListStore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_values,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_wxDataViewListStore, &sipCpp, sipType_wxVariantVector,&values, &valuesState, sipType_wxUIntPtr,&data, &dataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->PrependItem(*values,*data);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxVariantVector *>(values),sipType_wxVariantVector,valuesState);
            sipReleaseType(data,sipType_wxUIntPtr,dataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_PrependItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_InsertItem, "InsertItem(row, values, data=None)\n"
"\n"
"Inserts an item (=row) and fills it with values.");

extern "C" {static PyObject *meth_wxDataViewListStore_InsertItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_InsertItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint row;
        const  ::wxVariantVector* values;
        int valuesState = 0;
         ::wxUIntPtr datadef = 0;
         ::wxUIntPtr* data = &datadef;
        int dataState = 0;
         ::wxDataViewListStore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_values,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BuJ1|J1", &sipSelf, sipType_wxDataViewListStore, &sipCpp, &row, sipType_wxVariantVector,&values, &valuesState, sipType_wxUIntPtr,&data, &dataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->InsertItem(row,*values,*data);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxVariantVector *>(values),sipType_wxVariantVector,valuesState);
            sipReleaseType(data,sipType_wxUIntPtr,dataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_InsertItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_DeleteItem, "DeleteItem(pos)\n"
"\n"
"Delete the item (=row) at position pos.");

extern "C" {static PyObject *meth_wxDataViewListStore_DeleteItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_DeleteItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint pos;
         ::wxDataViewListStore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxDataViewListStore, &sipCpp, &pos))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DeleteItem(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_DeleteItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_DeleteAllItems, "DeleteAllItems()\n"
"\n"
"Delete all item (=all rows) in the store.");

extern "C" {static PyObject *meth_wxDataViewListStore_DeleteAllItems(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_DeleteAllItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDataViewListStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListStore, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DeleteAllItems();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_DeleteAllItems, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_GetItemCount, "GetItemCount() -> unsignedint\n"
"\n"
"Returns the number of items (=rows) in the control.");

extern "C" {static PyObject *meth_wxDataViewListStore_GetItemCount(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_GetItemCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewListStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListStore, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetItemCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_GetItemCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_GetItemData, "GetItemData(item) -> UIntPtr\n"
"\n"
"Returns the client data associated with the item.");

extern "C" {static PyObject *meth_wxDataViewListStore_GetItemData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_GetItemData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewListStore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewListStore, &sipCpp, sipType_wxDataViewItem, &item))
        {
             ::wxUIntPtr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxUIntPtr(sipCpp->GetItemData(*item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxUIntPtr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_GetItemData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_GetColumnCount, "GetColumnCount() -> unsignedint\n"
"\n"
"Overridden from wxDataViewModel.");

extern "C" {static PyObject *meth_wxDataViewListStore_GetColumnCount(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_GetColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewListStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListStore, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListStore::GetColumnCount() : sipCpp->GetColumnCount());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_GetColumnCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_GetColumnType, "GetColumnType(col) -> String\n"
"\n"
"Overridden from wxDataViewModel.");

extern "C" {static PyObject *meth_wxDataViewListStore_GetColumnType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_GetColumnType(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        uint col;
        const  ::wxDataViewListStore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxDataViewListStore, &sipCpp, &col))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxDataViewListStore::GetColumnType(col) : sipCpp->GetColumnType(col)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_GetColumnType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_SetItemData, "SetItemData(item, data)\n"
"\n"
"Sets the client data associated with the item.");

extern "C" {static PyObject *meth_wxDataViewListStore_SetItemData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_SetItemData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* item;
         ::wxUIntPtr* data;
        int dataState = 0;
         ::wxDataViewListStore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1", &sipSelf, sipType_wxDataViewListStore, &sipCpp, sipType_wxDataViewItem, &item, sipType_wxUIntPtr,&data, &dataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemData(*item,*data);
            Py_END_ALLOW_THREADS
            sipReleaseType(data,sipType_wxUIntPtr,dataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_SetItemData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_GetValueByRow, "GetValueByRow(row, col) -> value\n"
"\n"
"Overridden from wxDataViewIndexListModel.");

extern "C" {static PyObject *meth_wxDataViewListStore_GetValueByRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_GetValueByRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDVCVariant* value;
        uint row;
        uint col;
        const  ::wxDataViewListStore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Buu", &sipSelf, sipType_wxDataViewListStore, &sipCpp, &row, &col))
        {
            value = new  ::wxDVCVariant();

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewListStore::GetValueByRow(*value,row,col) : sipCpp->GetValueByRow(*value,row,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(value,sipType_wxDVCVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_GetValueByRow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewListStore_SetValueByRow, "SetValueByRow(value, row, col) -> bool\n"
"\n"
"Overridden from wxDataViewIndexListModel.");

extern "C" {static PyObject *meth_wxDataViewListStore_SetValueByRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListStore_SetValueByRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDVCVariant* value;
        int valueState = 0;
        uint row;
        uint col;
         ::wxDataViewListStore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1uu", &sipSelf, sipType_wxDataViewListStore, &sipCpp, sipType_wxDVCVariant,&value, &valueState, &row, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListStore::SetValueByRow(*value,row,col) : sipCpp->SetValueByRow(*value,row,col));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxDVCVariant *>(value),sipType_wxDVCVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewListStore, sipName_SetValueByRow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxDataViewListStore(void *, const sipTypeDef *);}
static void *cast_wxDataViewListStore(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxDataViewListStore *sipCpp = reinterpret_cast< ::wxDataViewListStore *>(sipCppV);

    if (targetType == sipType_wxDataViewIndexListModel)
        return static_cast< ::wxDataViewIndexListModel *>(sipCpp);

    if (targetType == sipType_wxDataViewListModel)
        return static_cast< ::wxDataViewListModel *>(sipCpp);

    if (targetType == sipType_wxDataViewModel)
        return static_cast< ::wxDataViewModel *>(sipCpp);

    if (targetType == sipType_wxRefCounter)
        return static_cast< ::wxRefCounter *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxDataViewListStore(void *, int);}
static void release_wxDataViewListStore(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxDataViewListStore *>(sipCppV);
    else
        delete reinterpret_cast< ::wxDataViewListStore *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxDataViewListStore(Py_ssize_t);}
static void *array_wxDataViewListStore(Py_ssize_t sipNrElem)
{
    return new  ::wxDataViewListStore[sipNrElem];
}


extern "C" {static void dealloc_wxDataViewListStore(sipSimpleWrapper *);}
static void dealloc_wxDataViewListStore(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxDataViewListStore *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxDataViewListStore(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxDataViewListStore(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxDataViewListStore(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxDataViewListStore *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxDataViewListStore();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxDataViewListStore[] = {{14, 255, 1}};


static PyMethodDef methods_wxDataViewListStore[] = {
    {SIP_MLNAME_CAST(sipName_AppendColumn), SIP_MLMETH_CAST(meth_wxDataViewListStore_AppendColumn), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListStore_AppendColumn)},
    {SIP_MLNAME_CAST(sipName_AppendItem), SIP_MLMETH_CAST(meth_wxDataViewListStore_AppendItem), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListStore_AppendItem)},
    {SIP_MLNAME_CAST(sipName_DeleteAllItems), meth_wxDataViewListStore_DeleteAllItems, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListStore_DeleteAllItems)},
    {SIP_MLNAME_CAST(sipName_DeleteItem), SIP_MLMETH_CAST(meth_wxDataViewListStore_DeleteItem), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListStore_DeleteItem)},
    {SIP_MLNAME_CAST(sipName_GetColumnCount), meth_wxDataViewListStore_GetColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListStore_GetColumnCount)},
    {SIP_MLNAME_CAST(sipName_GetColumnType), SIP_MLMETH_CAST(meth_wxDataViewListStore_GetColumnType), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListStore_GetColumnType)},
    {SIP_MLNAME_CAST(sipName_GetItemCount), meth_wxDataViewListStore_GetItemCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListStore_GetItemCount)},
    {SIP_MLNAME_CAST(sipName_GetItemData), SIP_MLMETH_CAST(meth_wxDataViewListStore_GetItemData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListStore_GetItemData)},
    {SIP_MLNAME_CAST(sipName_GetValueByRow), SIP_MLMETH_CAST(meth_wxDataViewListStore_GetValueByRow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListStore_GetValueByRow)},
    {SIP_MLNAME_CAST(sipName_InsertColumn), SIP_MLMETH_CAST(meth_wxDataViewListStore_InsertColumn), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListStore_InsertColumn)},
    {SIP_MLNAME_CAST(sipName_InsertItem), SIP_MLMETH_CAST(meth_wxDataViewListStore_InsertItem), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListStore_InsertItem)},
    {SIP_MLNAME_CAST(sipName_PrependColumn), SIP_MLMETH_CAST(meth_wxDataViewListStore_PrependColumn), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListStore_PrependColumn)},
    {SIP_MLNAME_CAST(sipName_PrependItem), SIP_MLMETH_CAST(meth_wxDataViewListStore_PrependItem), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListStore_PrependItem)},
    {SIP_MLNAME_CAST(sipName_SetItemData), SIP_MLMETH_CAST(meth_wxDataViewListStore_SetItemData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListStore_SetItemData)},
    {SIP_MLNAME_CAST(sipName_SetValueByRow), SIP_MLMETH_CAST(meth_wxDataViewListStore_SetValueByRow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListStore_SetValueByRow)}
};

sipVariableDef variables_wxDataViewListStore[] = {
    {PropertyVariable, sipName_ItemCount, &methods_wxDataViewListStore[6], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ColumnCount, &methods_wxDataViewListStore[4], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxDataViewListStore, "DataViewListStore()\n"
"\n"
"wxDataViewListStore is a specialised wxDataViewModel for storing a\n"
"simple table of data.");


sipClassTypeDef sipTypeDef__dataview_wxDataViewListStore = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxDataViewListStore,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_DataViewListStore,
        {0, 0, 1},
        15, methods_wxDataViewListStore,
        0, SIP_NULLPTR,
        2, variables_wxDataViewListStore,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxDataViewListStore,
    -1,
    -1,
    supers_wxDataViewListStore,
    SIP_NULLPTR,
    init_type_wxDataViewListStore,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxDataViewListStore,
    SIP_NULLPTR,
    array_wxDataViewListStore,
    SIP_NULLPTR,
    release_wxDataViewListStore,
    cast_wxDataViewListStore,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
