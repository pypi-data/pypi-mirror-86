/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_aui.h"

        #include <wx/aui/auibook.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/font.h>
        #include <wx/bitmap.h>
        #include <wx/aui/auibook.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/region.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/imaglist.h>


class sipwxAuiNotebook : public  ::wxAuiNotebook
{
public:
    sipwxAuiNotebook();
    sipwxAuiNotebook( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long);
    virtual ~sipwxAuiNotebook();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
     ::wxSize DoGetBorderSize() const SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;
    void SetImageList( ::wxImageList*) SIP_OVERRIDE;
    int GetPageImage(size_t) const SIP_OVERRIDE;
    bool SetPageImage(size_t,int) SIP_OVERRIDE;
     ::wxString GetPageText(size_t) const SIP_OVERRIDE;
    bool SetPageText(size_t,const  ::wxString&) SIP_OVERRIDE;
    int GetSelection() const SIP_OVERRIDE;
    int SetSelection(size_t) SIP_OVERRIDE;
    int ChangeSelection(size_t) SIP_OVERRIDE;
    bool AddPage( ::wxWindow*,const  ::wxString&,bool,int) SIP_OVERRIDE;
    bool DeleteAllPages() SIP_OVERRIDE;
    bool DeletePage(size_t) SIP_OVERRIDE;
    bool InsertPage(size_t, ::wxWindow*,const  ::wxString&,bool,int) SIP_OVERRIDE;
    bool RemovePage(size_t) SIP_OVERRIDE;
    size_t GetPageCount() const SIP_OVERRIDE;
    void SetPageSize(const  ::wxSize&) SIP_OVERRIDE;
    int HitTest(const  ::wxPoint&,long*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxAuiNotebook(const sipwxAuiNotebook &);
    sipwxAuiNotebook &operator = (const sipwxAuiNotebook &);

    char sipPyMethods[56];
};

sipwxAuiNotebook::sipwxAuiNotebook():  ::wxAuiNotebook(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiNotebook::sipwxAuiNotebook( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style):  ::wxAuiNotebook(parent,id,pos,size,style), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiNotebook::~sipwxAuiNotebook()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxAuiNotebook::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxAuiNotebook::RemoveChild(child);
        return;
    }

    extern void sipVH__aui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__aui_11(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxAuiNotebook::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxAuiNotebook::AddChild(child);
        return;
    }

    extern void sipVH__aui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__aui_11(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sipwxAuiNotebook::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxAuiNotebook::ProcessEvent(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxAuiNotebook::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxAuiNotebook::TryBefore(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxAuiNotebook::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxAuiNotebook::TryAfter(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxAuiNotebook::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxAuiNotebook::AcceptsFocus();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiNotebook::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxAuiNotebook::AcceptsFocusFromKeyboard();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiNotebook::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxAuiNotebook::AcceptsFocusRecursively();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiNotebook::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxAuiNotebook::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__aui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__aui_13(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

void sipwxAuiNotebook::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxAuiNotebook::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__aui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__aui_13(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

bool sipwxAuiNotebook::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxAuiNotebook::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__aui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__aui_14(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

 ::wxPoint sipwxAuiNotebook::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxAuiNotebook::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__aui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_15(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiNotebook::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxAuiNotebook::HasTransparentBackground();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiNotebook::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxAuiNotebook::ShouldInheritColours();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxValidator* sipwxAuiNotebook::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxAuiNotebook::GetValidator();

    extern  ::wxValidator* sipVH__aui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_16(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiNotebook::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxAuiNotebook::SetValidator(validator);
        return;
    }

    extern void sipVH__aui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__aui_17(sipGILState, 0, sipPySelf, sipMeth, validator);
}

bool sipwxAuiNotebook::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxAuiNotebook::TransferDataFromWindow();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiNotebook::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxAuiNotebook::TransferDataToWindow();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiNotebook::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::wxAuiNotebook::Validate();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiNotebook::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_Destroy);

    if (!sipMeth)
        return  ::wxAuiNotebook::Destroy();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiNotebook::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxAuiNotebook::InheritAttributes();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiNotebook::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxAuiNotebook::InitDialog();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiNotebook::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxAuiNotebook::OnInternalIdle();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sipwxAuiNotebook::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxAuiNotebook::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__aui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_18(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiNotebook::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxAuiNotebook::DoEnable(enable);
        return;
    }

    extern void sipVH__aui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__aui_13(sipGILState, 0, sipPySelf, sipMeth, enable);
}

void sipwxAuiNotebook::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxAuiNotebook::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__aui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__aui_19(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxAuiNotebook::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,SIP_NULLPTR,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxAuiNotebook::DoGetSize(width,height);
        return;
    }

    extern void sipVH__aui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__aui_19(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxAuiNotebook::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxAuiNotebook::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__aui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__aui_19(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxAuiNotebook::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxAuiNotebook::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__aui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__aui_20(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxAuiNotebook::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxAuiNotebook::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__aui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__aui_21(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxAuiNotebook::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxAuiNotebook::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__aui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__aui_22(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

 ::wxSize sipwxAuiNotebook::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,SIP_NULLPTR,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxAuiNotebook::DoGetBorderSize();

    extern  ::wxSize sipVH__aui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_23(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiNotebook::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxAuiNotebook::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__aui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__aui_24(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sipwxAuiNotebook::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxAuiNotebook::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__aui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__aui_25(sipGILState, 0, sipPySelf, sipMeth, variant);
}

 ::wxBorder sipwxAuiNotebook::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxAuiNotebook::GetDefaultBorder();

    extern  ::wxBorder sipVH__aui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_26(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxAuiNotebook::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxAuiNotebook::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__aui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_26(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiNotebook::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxAuiNotebook::DoFreeze();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiNotebook::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxAuiNotebook::DoThaw();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxAuiNotebook::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxAuiNotebook::DoGetBestSize();

    extern  ::wxSize sipVH__aui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_23(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxAuiNotebook::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxAuiNotebook::DoGetBestClientSize();

    extern  ::wxSize sipVH__aui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_23(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiNotebook::SetImageList( ::wxImageList*imageList)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,SIP_NULLPTR,sipName_SetImageList);

    if (!sipMeth)
    {
         ::wxAuiNotebook::SetImageList(imageList);
        return;
    }

    extern void sipVH__aui_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxImageList*);

    sipVH__aui_59(sipGILState, 0, sipPySelf, sipMeth, imageList);
}

int sipwxAuiNotebook::GetPageImage(size_t nPage) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,SIP_NULLPTR,sipName_GetPageImage);

    if (!sipMeth)
        return  ::wxAuiNotebook::GetPageImage(nPage);

    extern int sipVH__aui_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t);

    return sipVH__aui_55(sipGILState, 0, sipPySelf, sipMeth, nPage);
}

bool sipwxAuiNotebook::SetPageImage(size_t n,int imageId)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,SIP_NULLPTR,sipName_SetPageImage);

    if (!sipMeth)
        return  ::wxAuiNotebook::SetPageImage(n,imageId);

    extern bool sipVH__aui_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t,int);

    return sipVH__aui_58(sipGILState, 0, sipPySelf, sipMeth, n, imageId);
}

 ::wxString sipwxAuiNotebook::GetPageText(size_t page) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,SIP_NULLPTR,sipName_GetPageText);

    if (!sipMeth)
        return  ::wxAuiNotebook::GetPageText(page);

    extern  ::wxString sipVH__aui_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t);

    return sipVH__aui_57(sipGILState, 0, sipPySelf, sipMeth, page);
}

bool sipwxAuiNotebook::SetPageText(size_t page,const  ::wxString& text)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,SIP_NULLPTR,sipName_SetPageText);

    if (!sipMeth)
        return  ::wxAuiNotebook::SetPageText(page,text);

    extern bool sipVH__aui_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t,const  ::wxString&);

    return sipVH__aui_56(sipGILState, 0, sipPySelf, sipMeth, page, text);
}

int sipwxAuiNotebook::GetSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,SIP_NULLPTR,sipName_GetSelection);

    if (!sipMeth)
        return  ::wxAuiNotebook::GetSelection();

    extern int sipVH__aui_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_43(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxAuiNotebook::SetSelection(size_t new_page)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,SIP_NULLPTR,sipName_SetSelection);

    if (!sipMeth)
        return  ::wxAuiNotebook::SetSelection(new_page);

    extern int sipVH__aui_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t);

    return sipVH__aui_55(sipGILState, 0, sipPySelf, sipMeth, new_page);
}

int sipwxAuiNotebook::ChangeSelection(size_t n)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,SIP_NULLPTR,sipName_ChangeSelection);

    if (!sipMeth)
        return  ::wxAuiNotebook::ChangeSelection(n);

    extern int sipVH__aui_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t);

    return sipVH__aui_55(sipGILState, 0, sipPySelf, sipMeth, n);
}

bool sipwxAuiNotebook::AddPage( ::wxWindow*page,const  ::wxString& text,bool select,int imageId)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,SIP_NULLPTR,sipName_AddPage);

    if (!sipMeth)
        return  ::wxAuiNotebook::AddPage(page,text,select,imageId);

    extern bool sipVH__aui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*,const  ::wxString&,bool,int);

    return sipVH__aui_54(sipGILState, 0, sipPySelf, sipMeth, page, text, select, imageId);
}

bool sipwxAuiNotebook::DeleteAllPages()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,SIP_NULLPTR,sipName_DeleteAllPages);

    if (!sipMeth)
        return  ::wxAuiNotebook::DeleteAllPages();

    extern bool sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiNotebook::DeletePage(size_t page)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,SIP_NULLPTR,sipName_DeletePage);

    if (!sipMeth)
        return  ::wxAuiNotebook::DeletePage(page);

    extern bool sipVH__aui_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t);

    return sipVH__aui_52(sipGILState, 0, sipPySelf, sipMeth, page);
}

bool sipwxAuiNotebook::InsertPage(size_t index, ::wxWindow*page,const  ::wxString& text,bool select,int imageId)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,SIP_NULLPTR,sipName_InsertPage);

    if (!sipMeth)
        return  ::wxAuiNotebook::InsertPage(index,page,text,select,imageId);

    extern bool sipVH__aui_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t, ::wxWindow*,const  ::wxString&,bool,int);

    return sipVH__aui_53(sipGILState, 0, sipPySelf, sipMeth, index, page, text, select, imageId);
}

bool sipwxAuiNotebook::RemovePage(size_t page)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,SIP_NULLPTR,sipName_RemovePage);

    if (!sipMeth)
        return  ::wxAuiNotebook::RemovePage(page);

    extern bool sipVH__aui_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t);

    return sipVH__aui_52(sipGILState, 0, sipPySelf, sipMeth, page);
}

size_t sipwxAuiNotebook::GetPageCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[53]),sipPySelf,SIP_NULLPTR,sipName_GetPageCount);

    if (!sipMeth)
        return  ::wxAuiNotebook::GetPageCount();

    extern size_t sipVH__aui_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_51(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiNotebook::SetPageSize(const  ::wxSize& size)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,SIP_NULLPTR,sipName_SetPageSize);

    if (!sipMeth)
    {
         ::wxAuiNotebook::SetPageSize(size);
        return;
    }

    extern void sipVH__aui_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__aui_50(sipGILState, 0, sipPySelf, sipMeth, size);
}

int sipwxAuiNotebook::HitTest(const  ::wxPoint& pt,long*flags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[55]),sipPySelf,SIP_NULLPTR,sipName_HitTest);

    if (!sipMeth)
        return  ::wxAuiNotebook::HitTest(pt,flags);

    extern int sipVH__aui_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPoint&,long*);

    return sipVH__aui_49(sipGILState, 0, sipPySelf, sipMeth, pt, flags);
}

void sipwxAuiNotebook::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxAuiNotebook::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxAuiNotebook::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxAuiNotebook::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxAuiNotebook::DoEnable(enable) : DoEnable(enable));
}

void sipwxAuiNotebook::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxAuiNotebook::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxAuiNotebook::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxAuiNotebook::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxAuiNotebook::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxAuiNotebook::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxAuiNotebook::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiNotebook::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxAuiNotebook::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiNotebook::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxAuiNotebook::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxAuiNotebook::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxAuiNotebook::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxAuiNotebook::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxAuiNotebook::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxAuiNotebook::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxAuiNotebook::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiNotebook::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxAuiNotebook::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxAuiNotebook::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxAuiNotebook::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxAuiNotebook::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxAuiNotebook::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiNotebook::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxAuiNotebook::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiNotebook::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxAuiNotebook::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxAuiNotebook::DoFreeze() : DoFreeze());
}

void sipwxAuiNotebook::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxAuiNotebook::DoThaw() : DoThaw());
}

bool sipwxAuiNotebook::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxAuiNotebook::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxAuiNotebook::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxAuiNotebook::TryBefore(event) : TryBefore(event));
}

bool sipwxAuiNotebook::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxAuiNotebook::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxAuiNotebook_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxAuiNotebook_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_AddPage, "AddPage(page, caption, select=False, bitmap=wx.NullBitmap) -> bool\n"
"AddPage(page, text, select, imageId) -> bool\n"
"\n"
"Adds a page.\n"
"");

extern "C" {static PyObject *meth_wxAuiNotebook_AddPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_AddPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindow* page;
        const  ::wxString* caption;
        int captionState = 0;
        bool select = 0;
        const  ::wxBitmap& bitmapdef = wxNullBitmap;
        const  ::wxBitmap* bitmap = &bitmapdef;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
            sipName_caption,
            sipName_select,
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1|bJ9", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxWindow, &page, sipType_wxString,&caption, &captionState, &select, sipType_wxBitmap, &bitmap))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddPage(page,*caption,select,*bitmap);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(caption),sipType_wxString,captionState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::wxWindow* page;
        const  ::wxString* text;
        int textState = 0;
        bool select;
        int imageId;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
            sipName_text,
            sipName_select,
            sipName_imageId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1bi", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxWindow, &page, sipType_wxString,&text, &textState, &select, &imageId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::AddPage(page,*text,select,imageId) : sipCpp->AddPage(page,*text,select,imageId));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_AddPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_AdvanceSelection, "AdvanceSelection(forward=True)\n"
"\n"
"Sets the selection to the next or previous page.");

extern "C" {static PyObject *meth_wxAuiNotebook_AdvanceSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_AdvanceSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool forward = 1;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_forward,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &forward))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AdvanceSelection(forward);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_AdvanceSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_ChangeSelection, "ChangeSelection(n) -> int\n"
"\n"
"Changes the selection for the given page, returning the previous\n"
"selection.");

extern "C" {static PyObject *meth_wxAuiNotebook_ChangeSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_ChangeSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t n;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &n))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::ChangeSelection(n) : sipCpp->ChangeSelection(n));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_ChangeSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_Create, "Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0) -> bool\n"
"\n"
"Creates the notebook window.");

extern "C" {static PyObject *meth_wxAuiNotebook_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|iJ1J1l", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*pos,*size,style);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DeleteAllPages, "DeleteAllPages() -> bool\n"
"\n"
"Deletes all pages.");

extern "C" {static PyObject *meth_wxAuiNotebook_DeleteAllPages(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DeleteAllPages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::DeleteAllPages() : sipCpp->DeleteAllPages());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DeleteAllPages, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DeletePage, "DeletePage(page) -> bool\n"
"\n"
"Deletes a page at the given index.");

extern "C" {static PyObject *meth_wxAuiNotebook_DeletePage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DeletePage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t page;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &page))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::DeletePage(page) : sipCpp->DeletePage(page));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DeletePage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetArtProvider, "GetArtProvider() -> AuiTabArt\n"
"\n"
"Returns the associated art provider.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetArtProvider(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetArtProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
             ::wxAuiTabArt*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetArtProvider();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiTabArt,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetArtProvider, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetCurrentPage, "GetCurrentPage() -> wx.Window\n"
"\n"
"Returns the currently selected page or NULL.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetCurrentPage(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetCurrentPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetCurrentPage();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetCurrentPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetHeightForPageHeight, "GetHeightForPageHeight(pageHeight) -> int\n"
"\n"
"Returns the desired height of the notebook for the given page height.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetHeightForPageHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetHeightForPageHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int pageHeight;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pageHeight,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &pageHeight))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetHeightForPageHeight(pageHeight);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetHeightForPageHeight, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetPage, "GetPage(page_idx) -> wx.Window\n"
"\n"
"Returns the page specified by the given index.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t page_idx;
        const  ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page_idx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &page_idx))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPage(page_idx);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetPageBitmap, "GetPageBitmap(page) -> wx.Bitmap\n"
"\n"
"Returns the tab bitmap for the page.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetPageBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetPageBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t page;
        const  ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &page))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetPageBitmap(page));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetPageBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetPageCount, "GetPageCount() -> size_t\n"
"\n"
"Returns the number of pages in the notebook.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetPageCount(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetPageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            size_t sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::GetPageCount() : sipCpp->GetPageCount());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetPageCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetPageIndex, "GetPageIndex(page_wnd) -> int\n"
"\n"
"Returns the page index for the specified window.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetPageIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetPageIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* page_wnd;
        const  ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page_wnd,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxWindow, &page_wnd))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPageIndex(page_wnd);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetPageIndex, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetPageText, "GetPageText(page) -> String\n"
"\n"
"Returns the tab label for the page.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetPageText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetPageText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t page;
        const  ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &page))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::GetPageText(page) : sipCpp->GetPageText(page)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetPageText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetPageToolTip, "GetPageToolTip(pageIdx) -> String\n"
"\n"
"Returns the tooltip for the tab label of the page.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetPageToolTip(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetPageToolTip(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t pageIdx;
        const  ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pageIdx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &pageIdx))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetPageToolTip(pageIdx));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetPageToolTip, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetSelection, "GetSelection() -> int\n"
"\n"
"Returns the currently selected page.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetSelection(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::GetSelection() : sipCpp->GetSelection());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetTabCtrlHeight, "GetTabCtrlHeight() -> int\n"
"\n"
"Returns the height of the tab control.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetTabCtrlHeight(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetTabCtrlHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetTabCtrlHeight();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetTabCtrlHeight, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_InsertPage, "InsertPage(page_idx, page, caption, select=False, bitmap=wx.NullBitmap) -> bool\n"
"InsertPage(index, page, text, select, imageId) -> bool\n"
"\n"
"InsertPage() is similar to AddPage, but allows the ability to specify\n"
"the insert location.\n"
"");

extern "C" {static PyObject *meth_wxAuiNotebook_InsertPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_InsertPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t page_idx;
         ::wxWindow* page;
        const  ::wxString* caption;
        int captionState = 0;
        bool select = 0;
        const  ::wxBitmap& bitmapdef = wxNullBitmap;
        const  ::wxBitmap* bitmap = &bitmapdef;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page_idx,
            sipName_page,
            sipName_caption,
            sipName_select,
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=J8J1|bJ9", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &page_idx, sipType_wxWindow, &page, sipType_wxString,&caption, &captionState, &select, sipType_wxBitmap, &bitmap))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertPage(page_idx,page,*caption,select,*bitmap);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(caption),sipType_wxString,captionState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
        size_t index;
         ::wxWindow* page;
        const  ::wxString* text;
        int textState = 0;
        bool select;
        int imageId;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_index,
            sipName_page,
            sipName_text,
            sipName_select,
            sipName_imageId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=J8J1bi", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &index, sipType_wxWindow, &page, sipType_wxString,&text, &textState, &select, &imageId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::InsertPage(index,page,*text,select,imageId) : sipCpp->InsertPage(index,page,*text,select,imageId));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_InsertPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_RemovePage, "RemovePage(page) -> bool\n"
"\n"
"Removes a page, without deleting the window pointer.");

extern "C" {static PyObject *meth_wxAuiNotebook_RemovePage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_RemovePage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t page;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &page))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::RemovePage(page) : sipCpp->RemovePage(page));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_RemovePage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetArtProvider, "SetArtProvider(art)\n"
"\n"
"Sets the art provider to be used by the notebook.");

extern "C" {static PyObject *meth_wxAuiNotebook_SetArtProvider(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetArtProvider(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiTabArt* art;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_art,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxAuiTabArt, &art))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetArtProvider(art);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetArtProvider, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetFont, "SetFont(font) -> bool\n"
"\n"
"Sets the font for drawing the tab labels, using a bold version of the\n"
"font for selected tab labels.");

extern "C" {static PyObject *meth_wxAuiNotebook_SetFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxFont* font;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxFont, &font))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetFont(*font);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetMeasuringFont, "SetMeasuringFont(font)\n"
"\n"
"Sets the font for measuring tab labels.");

extern "C" {static PyObject *meth_wxAuiNotebook_SetMeasuringFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetMeasuringFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxFont* font;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxFont, &font))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMeasuringFont(*font);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetMeasuringFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetNormalFont, "SetNormalFont(font)\n"
"\n"
"Sets the font for drawing unselected tab labels.");

extern "C" {static PyObject *meth_wxAuiNotebook_SetNormalFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetNormalFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxFont* font;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxFont, &font))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetNormalFont(*font);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetNormalFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetPageBitmap, "SetPageBitmap(page, bitmap) -> bool\n"
"\n"
"Sets the bitmap for the page.");

extern "C" {static PyObject *meth_wxAuiNotebook_SetPageBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetPageBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t page;
        const  ::wxBitmap* bitmap;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=J9", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &page, sipType_wxBitmap, &bitmap))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetPageBitmap(page,*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetPageBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetPageImage, "SetPageImage(n, imageId) -> bool\n"
"\n"
"Sets the image index for the given page.");

extern "C" {static PyObject *meth_wxAuiNotebook_SetPageImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetPageImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t n;
        int imageId;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
            sipName_imageId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=i", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &n, &imageId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::SetPageImage(n,imageId) : sipCpp->SetPageImage(n,imageId));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetPageImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetPageText, "SetPageText(page, text) -> bool\n"
"\n"
"Sets the tab label for the page.");

extern "C" {static PyObject *meth_wxAuiNotebook_SetPageText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetPageText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t page;
        const  ::wxString* text;
        int textState = 0;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=J1", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &page, sipType_wxString,&text, &textState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::SetPageText(page,*text) : sipCpp->SetPageText(page,*text));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetPageText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetPageToolTip, "SetPageToolTip(page, text) -> bool\n"
"\n"
"Sets the tooltip displayed when hovering over the tab label of the\n"
"page.");

extern "C" {static PyObject *meth_wxAuiNotebook_SetPageToolTip(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetPageToolTip(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t page;
        const  ::wxString* text;
        int textState = 0;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=J1", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &page, sipType_wxString,&text, &textState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetPageToolTip(page,*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetPageToolTip, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetSelectedFont, "SetSelectedFont(font)\n"
"\n"
"Sets the font for drawing selected tab labels.");

extern "C" {static PyObject *meth_wxAuiNotebook_SetSelectedFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetSelectedFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxFont* font;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxFont, &font))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSelectedFont(*font);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetSelectedFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetSelection, "SetSelection(new_page) -> int\n"
"\n"
"Sets the page selection.");

extern "C" {static PyObject *meth_wxAuiNotebook_SetSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t new_page;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_new_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &new_page))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::SetSelection(new_page) : sipCpp->SetSelection(new_page));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetTabCtrlHeight, "SetTabCtrlHeight(height)\n"
"\n"
"Sets the tab height.");

extern "C" {static PyObject *meth_wxAuiNotebook_SetTabCtrlHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetTabCtrlHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int height;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTabCtrlHeight(height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetTabCtrlHeight, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetUniformBitmapSize, "SetUniformBitmapSize(size)\n"
"\n"
"Ensure that all tabs have the same height, even if some of them don't\n"
"have bitmaps.");

extern "C" {static PyObject *meth_wxAuiNotebook_SetUniformBitmapSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetUniformBitmapSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSize* size;
        int sizeState = 0;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxSize, &size, &sizeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetUniformBitmapSize(*size);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetUniformBitmapSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_Split, "Split(page, direction)\n"
"\n"
"Split performs a split operation programmatically.");

extern "C" {static PyObject *meth_wxAuiNotebook_Split(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_Split(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t page;
        int direction;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
            sipName_direction,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=i", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &page, &direction))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Split(page,direction);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_Split, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_ShowWindowMenu, "ShowWindowMenu() -> bool\n"
"\n"
"Shows the window menu for the active tab control associated with this\n"
"notebook, and returns true if a selection was made.");

extern "C" {static PyObject *meth_wxAuiNotebook_ShowWindowMenu(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_ShowWindowMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ShowWindowMenu();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_ShowWindowMenu, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetPageImage, "GetPageImage(nPage) -> int\n"
"\n"
"Returns the image index for the given page.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetPageImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetPageImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t nPage;
        const  ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_nPage,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &nPage))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::GetPageImage(nPage) : sipCpp->GetPageImage(nPage));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetPageImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetTabCtrlFromPoint, "GetTabCtrlFromPoint(pt) -> AuiTabCtrl\n"
"\n"
"Returns tab control based on point coordinates inside the tab frame.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetTabCtrlFromPoint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetTabCtrlFromPoint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint* pt;
        int ptState = 0;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
             ::wxAuiTabCtrl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetTabCtrlFromPoint(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiTabCtrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetTabCtrlFromPoint, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetActiveTabCtrl, "GetActiveTabCtrl() -> AuiTabCtrl\n"
"\n"
"Returns active tab control for this notebook.");

extern "C" {static PyObject *meth_wxAuiNotebook_GetActiveTabCtrl(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetActiveTabCtrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
             ::wxAuiTabCtrl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetActiveTabCtrl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiTabCtrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetActiveTabCtrl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_FindTab, "FindTab(page, ctrl, idx) -> bool\n"
"\n"
"Finds tab control associated with a given window and its tab index.");

extern "C" {static PyObject *meth_wxAuiNotebook_FindTab(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_FindTab(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* page;
         ::wxAuiTabCtrl* ctrl;
        int idx;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxWindow, &page))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindTab(page,&ctrl,&idx);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bDi)",sipRes,ctrl,sipType_wxAuiTabCtrl,SIP_NULLPTR,idx);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_FindTab, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxAuiNotebook_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetClientAreaOrigin, doc_wxAuiNotebook_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxAuiNotebook_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_Validate, doc_wxAuiNotebook_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxAuiNotebook_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_TransferDataToWindow, doc_wxAuiNotebook_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxAuiNotebook_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_TransferDataFromWindow, doc_wxAuiNotebook_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxAuiNotebook_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_InitDialog, doc_wxAuiNotebook_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxAuiNotebook_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_AcceptsFocus, doc_wxAuiNotebook_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxAuiNotebook_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_AcceptsFocusRecursively, doc_wxAuiNotebook_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxAuiNotebook_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_AcceptsFocusFromKeyboard, doc_wxAuiNotebook_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxAuiNotebook_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_AddChild, doc_wxAuiNotebook_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxAuiNotebook_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_RemoveChild, doc_wxAuiNotebook_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxAuiNotebook_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_InheritAttributes, doc_wxAuiNotebook_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxAuiNotebook_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_ShouldInheritColours, doc_wxAuiNotebook_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxAuiNotebook_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_OnInternalIdle, doc_wxAuiNotebook_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxAuiNotebook_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetMainWindowOfCompositeControl, doc_wxAuiNotebook_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxAuiNotebook_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_InformFirstDirection, doc_wxAuiNotebook_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxAuiNotebook_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetCanFocus, doc_wxAuiNotebook_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxAuiNotebook_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_Destroy, doc_wxAuiNotebook_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxAuiNotebook_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_SetValidator, doc_wxAuiNotebook_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxAuiNotebook_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetValidator, doc_wxAuiNotebook_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth_wxAuiNotebook_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
         ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_EnableVisibleFocus, doc_wxAuiNotebook_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxAuiNotebook_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_ProcessEvent, doc_wxAuiNotebook_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxAuiNotebook_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoEnable, doc_wxAuiNotebook_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxAuiNotebook_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxAuiNotebook *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoGetPosition, doc_wxAuiNotebook_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxAuiNotebook_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxAuiNotebook *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoGetSize, doc_wxAuiNotebook_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxAuiNotebook_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxAuiNotebook *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoGetClientSize, doc_wxAuiNotebook_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxAuiNotebook_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoGetBestSize, doc_wxAuiNotebook_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxAuiNotebook_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoGetBestClientSize, doc_wxAuiNotebook_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxAuiNotebook_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoSetSize, doc_wxAuiNotebook_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxAuiNotebook_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoSetClientSize, doc_wxAuiNotebook_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxAuiNotebook_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoSetSizeHints, doc_wxAuiNotebook_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxAuiNotebook_DoGetBorderSize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoGetBorderSize, doc_wxAuiNotebook_DoGetBorderSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxAuiNotebook_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxAuiNotebook, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoMoveWindow, doc_wxAuiNotebook_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxAuiNotebook_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoSetWindowVariant, doc_wxAuiNotebook_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxAuiNotebook_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetDefaultBorder, doc_wxAuiNotebook_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxAuiNotebook_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetDefaultBorderForControl, doc_wxAuiNotebook_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxAuiNotebook_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoFreeze, doc_wxAuiNotebook_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxAuiNotebook_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_DoThaw, doc_wxAuiNotebook_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxAuiNotebook_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxAuiNotebook *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiNotebook, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_HasTransparentBackground, doc_wxAuiNotebook_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxAuiNotebook_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_TryBefore, doc_wxAuiNotebook_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxAuiNotebook_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_TryAfter, doc_wxAuiNotebook_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes");

extern "C" {static PyObject *meth_wxAuiNotebook_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxAuiNotebook::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiNotebook_HitTest, "HitTest(self, pt: Point) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxAuiNotebook_HitTest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiNotebook_HitTest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPoint* pt;
        int ptState = 0;
        long flags;
        const  ::wxAuiNotebook *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxAuiNotebook, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiNotebook::HitTest(*pt,&flags) : sipCpp->HitTest(*pt,&flags));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(il)",sipRes,flags);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiNotebook, sipName_HitTest, doc_wxAuiNotebook_HitTest);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxAuiNotebook(void *, const sipTypeDef *);}
static void *cast_wxAuiNotebook(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxAuiNotebook *sipCpp = reinterpret_cast< ::wxAuiNotebook *>(sipCppV);

    if (targetType == sipType_wxBookCtrlBase)
        return static_cast< ::wxBookCtrlBase *>(sipCpp);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    if (targetType == sipType_wxWithImages)
        return static_cast< ::wxWithImages *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxAuiNotebook(void *, int);}
static void release_wxAuiNotebook(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxAuiNotebook *>(sipCppV);
    else
        delete reinterpret_cast< ::wxAuiNotebook *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxAuiNotebook(sipSimpleWrapper *);}
static void dealloc_wxAuiNotebook(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxAuiNotebook *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxAuiNotebook(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxAuiNotebook(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxAuiNotebook(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxAuiNotebook *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiNotebook();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxAUI_NB_DEFAULT_STYLE;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1l", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiNotebook(parent,id,*pos,*size,style);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxAuiNotebook[] = {{2, 0, 1}};


static PyMethodDef methods_wxAuiNotebook[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxAuiNotebook_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxAuiNotebook_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxAuiNotebook_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), SIP_MLMETH_CAST(meth_wxAuiNotebook_AddChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_AddChild)},
    {SIP_MLNAME_CAST(sipName_AddPage), SIP_MLMETH_CAST(meth_wxAuiNotebook_AddPage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_AddPage)},
    {SIP_MLNAME_CAST(sipName_AdvanceSelection), SIP_MLMETH_CAST(meth_wxAuiNotebook_AdvanceSelection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_AdvanceSelection)},
    {SIP_MLNAME_CAST(sipName_ChangeSelection), SIP_MLMETH_CAST(meth_wxAuiNotebook_ChangeSelection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_ChangeSelection)},
    {SIP_MLNAME_CAST(sipName_Create), SIP_MLMETH_CAST(meth_wxAuiNotebook_Create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_Create)},
    {SIP_MLNAME_CAST(sipName_DeleteAllPages), meth_wxAuiNotebook_DeleteAllPages, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DeleteAllPages)},
    {SIP_MLNAME_CAST(sipName_DeletePage), SIP_MLMETH_CAST(meth_wxAuiNotebook_DeletePage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DeletePage)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxAuiNotebook_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), SIP_MLMETH_CAST(meth_wxAuiNotebook_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), meth_wxAuiNotebook_DoFreeze, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), meth_wxAuiNotebook_DoGetBestClientSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), meth_wxAuiNotebook_DoGetBestSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), meth_wxAuiNotebook_DoGetBorderSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), SIP_MLMETH_CAST(meth_wxAuiNotebook_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), SIP_MLMETH_CAST(meth_wxAuiNotebook_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), SIP_MLMETH_CAST(meth_wxAuiNotebook_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), SIP_MLMETH_CAST(meth_wxAuiNotebook_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), SIP_MLMETH_CAST(meth_wxAuiNotebook_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), SIP_MLMETH_CAST(meth_wxAuiNotebook_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), SIP_MLMETH_CAST(meth_wxAuiNotebook_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), SIP_MLMETH_CAST(meth_wxAuiNotebook_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), meth_wxAuiNotebook_DoThaw, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EnableVisibleFocus), SIP_MLMETH_CAST(meth_wxAuiNotebook_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_EnableVisibleFocus)},
    {SIP_MLNAME_CAST(sipName_FindTab), SIP_MLMETH_CAST(meth_wxAuiNotebook_FindTab), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_FindTab)},
    {SIP_MLNAME_CAST(sipName_GetActiveTabCtrl), meth_wxAuiNotebook_GetActiveTabCtrl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetActiveTabCtrl)},
    {SIP_MLNAME_CAST(sipName_GetArtProvider), meth_wxAuiNotebook_GetArtProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetArtProvider)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), SIP_MLMETH_CAST(meth_wxAuiNotebook_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxAuiNotebook_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetCurrentPage), meth_wxAuiNotebook_GetCurrentPage, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetCurrentPage)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), meth_wxAuiNotebook_GetDefaultBorder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), meth_wxAuiNotebook_GetDefaultBorderForControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetHeightForPageHeight), SIP_MLMETH_CAST(meth_wxAuiNotebook_GetHeightForPageHeight), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetHeightForPageHeight)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxAuiNotebook_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetPage), SIP_MLMETH_CAST(meth_wxAuiNotebook_GetPage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetPage)},
    {SIP_MLNAME_CAST(sipName_GetPageBitmap), SIP_MLMETH_CAST(meth_wxAuiNotebook_GetPageBitmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetPageBitmap)},
    {SIP_MLNAME_CAST(sipName_GetPageCount), meth_wxAuiNotebook_GetPageCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetPageCount)},
    {SIP_MLNAME_CAST(sipName_GetPageImage), SIP_MLMETH_CAST(meth_wxAuiNotebook_GetPageImage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetPageImage)},
    {SIP_MLNAME_CAST(sipName_GetPageIndex), SIP_MLMETH_CAST(meth_wxAuiNotebook_GetPageIndex), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetPageIndex)},
    {SIP_MLNAME_CAST(sipName_GetPageText), SIP_MLMETH_CAST(meth_wxAuiNotebook_GetPageText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetPageText)},
    {SIP_MLNAME_CAST(sipName_GetPageToolTip), SIP_MLMETH_CAST(meth_wxAuiNotebook_GetPageToolTip), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetPageToolTip)},
    {SIP_MLNAME_CAST(sipName_GetSelection), meth_wxAuiNotebook_GetSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetSelection)},
    {SIP_MLNAME_CAST(sipName_GetTabCtrlFromPoint), SIP_MLMETH_CAST(meth_wxAuiNotebook_GetTabCtrlFromPoint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetTabCtrlFromPoint)},
    {SIP_MLNAME_CAST(sipName_GetTabCtrlHeight), meth_wxAuiNotebook_GetTabCtrlHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetTabCtrlHeight)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxAuiNotebook_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_GetValidator)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), meth_wxAuiNotebook_HasTransparentBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_HitTest), SIP_MLMETH_CAST(meth_wxAuiNotebook_HitTest), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_HitTest)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), SIP_MLMETH_CAST(meth_wxAuiNotebook_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxAuiNotebook_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxAuiNotebook_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_InitDialog)},
    {SIP_MLNAME_CAST(sipName_InsertPage), SIP_MLMETH_CAST(meth_wxAuiNotebook_InsertPage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_InsertPage)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxAuiNotebook_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), SIP_MLMETH_CAST(meth_wxAuiNotebook_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), SIP_MLMETH_CAST(meth_wxAuiNotebook_RemoveChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_RemovePage), SIP_MLMETH_CAST(meth_wxAuiNotebook_RemovePage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_RemovePage)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), meth_wxAuiNotebook_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_SetArtProvider), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetArtProvider), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetArtProvider)},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetCanFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetFont), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetFont), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetFont)},
    {SIP_MLNAME_CAST(sipName_SetMeasuringFont), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetMeasuringFont), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetMeasuringFont)},
    {SIP_MLNAME_CAST(sipName_SetNormalFont), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetNormalFont), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetNormalFont)},
    {SIP_MLNAME_CAST(sipName_SetPageBitmap), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetPageBitmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetPageBitmap)},
    {SIP_MLNAME_CAST(sipName_SetPageImage), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetPageImage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetPageImage)},
    {SIP_MLNAME_CAST(sipName_SetPageText), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetPageText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetPageText)},
    {SIP_MLNAME_CAST(sipName_SetPageToolTip), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetPageToolTip), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetPageToolTip)},
    {SIP_MLNAME_CAST(sipName_SetSelectedFont), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetSelectedFont), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetSelectedFont)},
    {SIP_MLNAME_CAST(sipName_SetSelection), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetSelection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetSelection)},
    {SIP_MLNAME_CAST(sipName_SetTabCtrlHeight), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetTabCtrlHeight), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetTabCtrlHeight)},
    {SIP_MLNAME_CAST(sipName_SetUniformBitmapSize), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetUniformBitmapSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetUniformBitmapSize)},
    {SIP_MLNAME_CAST(sipName_SetValidator), SIP_MLMETH_CAST(meth_wxAuiNotebook_SetValidator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxAuiNotebook_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_ShowWindowMenu), meth_wxAuiNotebook_ShowWindowMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_ShowWindowMenu)},
    {SIP_MLNAME_CAST(sipName_Split), SIP_MLMETH_CAST(meth_wxAuiNotebook_Split), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_Split)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxAuiNotebook_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxAuiNotebook_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth_wxAuiNotebook_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth_wxAuiNotebook_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiNotebook_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxAuiNotebook_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiNotebook_Validate)}
};

sipVariableDef variables_wxAuiNotebook[] = {
    {PropertyVariable, sipName_TabCtrlHeight, &methods_wxAuiNotebook[45], &methods_wxAuiNotebook[69], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Selection, &methods_wxAuiNotebook[43], &methods_wxAuiNotebook[68], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_PageCount, &methods_wxAuiNotebook[38], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CurrentPage, &methods_wxAuiNotebook[31], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ArtProvider, &methods_wxAuiNotebook[28], &methods_wxAuiNotebook[58], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ActiveTabCtrl, &methods_wxAuiNotebook[27], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxAuiNotebook, "AuiNotebook()\n"
"AuiNotebook(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=AUI_NB_DEFAULT_STYLE)\n"
"\n"
"wxAuiNotebook is part of the wxAUI class framework, which represents a\n"
"notebook control, managing multiple windows with associated tabs.");


sipClassTypeDef sipTypeDef__aui_wxAuiNotebook = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxAuiNotebook,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_AuiNotebook,
        {0, 0, 1},
        80, methods_wxAuiNotebook,
        0, SIP_NULLPTR,
        6, variables_wxAuiNotebook,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxAuiNotebook,
    -1,
    -1,
    supers_wxAuiNotebook,
    SIP_NULLPTR,
    init_type_wxAuiNotebook,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxAuiNotebook,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxAuiNotebook,
    cast_wxAuiNotebook,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
