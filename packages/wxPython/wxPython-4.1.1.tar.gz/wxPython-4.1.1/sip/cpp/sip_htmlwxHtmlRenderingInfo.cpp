/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_html.h"

        #include <wx/html/htmlcell.h>

        #include <wx/html/htmlcell.h>
        #include <wx/html/htmlcell.h>
        #include <wx/html/htmlcell.h>


PyDoc_STRVAR(doc_wxHtmlRenderingInfo_SetSelection, "SetSelection(s)\n"
"\n"
"Accessors.");

extern "C" {static PyObject *meth_wxHtmlRenderingInfo_SetSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlRenderingInfo_SetSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxHtmlSelection* s;
         ::wxHtmlRenderingInfo *sipCpp;

        static const char *sipKwdList[] = {
            sipName_s,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxHtmlRenderingInfo, &sipCpp, sipType_wxHtmlSelection, &s))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSelection(s);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlRenderingInfo, sipName_SetSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlRenderingInfo_GetSelection, "GetSelection() -> HtmlSelection\n"
"\n"
"Accessors.");

extern "C" {static PyObject *meth_wxHtmlRenderingInfo_GetSelection(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlRenderingInfo_GetSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxHtmlRenderingInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlRenderingInfo, &sipCpp))
        {
             ::wxHtmlSelection*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSelection();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxHtmlSelection,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlRenderingInfo, sipName_GetSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlRenderingInfo_SetStyle, "SetStyle(style)\n"
"\n"
"Accessors.");

extern "C" {static PyObject *meth_wxHtmlRenderingInfo_SetStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlRenderingInfo_SetStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxHtmlRenderingStyle* style;
         ::wxHtmlRenderingInfo *sipCpp;

        static const char *sipKwdList[] = {
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxHtmlRenderingInfo, &sipCpp, sipType_wxHtmlRenderingStyle, &style))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetStyle(style);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlRenderingInfo, sipName_SetStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlRenderingInfo_GetStyle, "GetStyle() -> HtmlRenderingStyle\n"
"\n"
"Accessors.");

extern "C" {static PyObject *meth_wxHtmlRenderingInfo_GetStyle(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlRenderingInfo_GetStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxHtmlRenderingInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlRenderingInfo, &sipCpp))
        {
             ::wxHtmlRenderingStyle*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetStyle();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxHtmlRenderingStyle,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlRenderingInfo, sipName_GetStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlRenderingInfo_GetState, "GetState() -> HtmlRenderingState\n"
"\n"
"Accessors.");

extern "C" {static PyObject *meth_wxHtmlRenderingInfo_GetState(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlRenderingInfo_GetState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxHtmlRenderingInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlRenderingInfo, &sipCpp))
        {
             ::wxHtmlRenderingState*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetState();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxHtmlRenderingState,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlRenderingInfo, sipName_GetState, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxHtmlRenderingInfo(void *, int);}
static void release_wxHtmlRenderingInfo(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxHtmlRenderingInfo *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxHtmlRenderingInfo(Py_ssize_t);}
static void *array_wxHtmlRenderingInfo(Py_ssize_t sipNrElem)
{
    return new  ::wxHtmlRenderingInfo[sipNrElem];
}


extern "C" {static void assign_wxHtmlRenderingInfo(void *, SIP_SSIZE_T, void *);}
static void assign_wxHtmlRenderingInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxHtmlRenderingInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxHtmlRenderingInfo *>(sipSrc);
}


extern "C" {static void *copy_wxHtmlRenderingInfo(const void *, SIP_SSIZE_T);}
static void *copy_wxHtmlRenderingInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxHtmlRenderingInfo(reinterpret_cast<const  ::wxHtmlRenderingInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxHtmlRenderingInfo(sipSimpleWrapper *);}
static void dealloc_wxHtmlRenderingInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxHtmlRenderingInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxHtmlRenderingInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxHtmlRenderingInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::wxHtmlRenderingInfo *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxHtmlRenderingInfo();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            return sipCpp;
        }
    }

    {
        const  ::wxHtmlRenderingInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxHtmlRenderingInfo, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxHtmlRenderingInfo(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_wxHtmlRenderingInfo[] = {
    {SIP_MLNAME_CAST(sipName_GetSelection), meth_wxHtmlRenderingInfo_GetSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlRenderingInfo_GetSelection)},
    {SIP_MLNAME_CAST(sipName_GetState), meth_wxHtmlRenderingInfo_GetState, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlRenderingInfo_GetState)},
    {SIP_MLNAME_CAST(sipName_GetStyle), meth_wxHtmlRenderingInfo_GetStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlRenderingInfo_GetStyle)},
    {SIP_MLNAME_CAST(sipName_SetSelection), SIP_MLMETH_CAST(meth_wxHtmlRenderingInfo_SetSelection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlRenderingInfo_SetSelection)},
    {SIP_MLNAME_CAST(sipName_SetStyle), SIP_MLMETH_CAST(meth_wxHtmlRenderingInfo_SetStyle), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlRenderingInfo_SetStyle)}
};

sipVariableDef variables_wxHtmlRenderingInfo[] = {
    {PropertyVariable, sipName_Style, &methods_wxHtmlRenderingInfo[2], &methods_wxHtmlRenderingInfo[4], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_State, &methods_wxHtmlRenderingInfo[1], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Selection, &methods_wxHtmlRenderingInfo[0], &methods_wxHtmlRenderingInfo[3], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxHtmlRenderingInfo, "HtmlRenderingInfo()\n"
"\n"
"This class contains information given to cells when drawing them.");


sipClassTypeDef sipTypeDef__html_wxHtmlRenderingInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxHtmlRenderingInfo,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_HtmlRenderingInfo,
        {0, 0, 1},
        5, methods_wxHtmlRenderingInfo,
        0, SIP_NULLPTR,
        3, variables_wxHtmlRenderingInfo,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxHtmlRenderingInfo,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_wxHtmlRenderingInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxHtmlRenderingInfo,
    assign_wxHtmlRenderingInfo,
    array_wxHtmlRenderingInfo,
    copy_wxHtmlRenderingInfo,
    release_wxHtmlRenderingInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
