/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_ribbon.h"

        #include <wx/ribbon/buttonbar.h>

        #include <wx/ribbon/buttonbar.h>
        #include <wx/event.h>
        #include <wx/menu.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxRibbonButtonBarEvent : public  ::wxRibbonButtonBarEvent
{
public:
    sipwxRibbonButtonBarEvent( ::wxEventType,int, ::wxRibbonButtonBar*, ::wxRibbonButtonBarButtonBase*);
    sipwxRibbonButtonBarEvent(const  ::wxRibbonButtonBarEvent&);
    virtual ~sipwxRibbonButtonBarEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEventCategory GetEventCategory() const SIP_OVERRIDE;
     ::wxEvent* Clone() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRibbonButtonBarEvent(const sipwxRibbonButtonBarEvent &);
    sipwxRibbonButtonBarEvent &operator = (const sipwxRibbonButtonBarEvent &);

    char sipPyMethods[2];
};

sipwxRibbonButtonBarEvent::sipwxRibbonButtonBarEvent( ::wxEventType command_type,int win_id, ::wxRibbonButtonBar*bar, ::wxRibbonButtonBarButtonBase*button):  ::wxRibbonButtonBarEvent(command_type,win_id,bar,button), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRibbonButtonBarEvent::sipwxRibbonButtonBarEvent(const  ::wxRibbonButtonBarEvent& a0):  ::wxRibbonButtonBarEvent(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRibbonButtonBarEvent::~sipwxRibbonButtonBarEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEventCategory sipwxRibbonButtonBarEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxRibbonButtonBarEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__ribbon_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_19(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEvent* sipwxRibbonButtonBarEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_Clone);

    if (!sipMeth)
        return  ::wxRibbonButtonBarEvent::Clone();

    extern  ::wxEvent* sipVH__ribbon_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_18(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxRibbonButtonBarEvent_GetBar, "GetBar() -> RibbonButtonBar\n"
"\n"
"Returns the bar which contains the button which the event relates to.");

extern "C" {static PyObject *meth_wxRibbonButtonBarEvent_GetBar(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonButtonBarEvent_GetBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRibbonButtonBarEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonButtonBarEvent, &sipCpp))
        {
             ::wxRibbonButtonBar*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetBar();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonButtonBar,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonButtonBarEvent, sipName_GetBar, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonButtonBarEvent_SetBar, "SetBar(bar)\n"
"\n"
"Sets the button bar relating to this event.");

extern "C" {static PyObject *meth_wxRibbonButtonBarEvent_SetBar(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonButtonBarEvent_SetBar(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRibbonButtonBar* bar;
         ::wxRibbonButtonBarEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bar,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRibbonButtonBarEvent, &sipCpp, sipType_wxRibbonButtonBar, &bar))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBar(bar);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonButtonBarEvent, sipName_SetBar, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonButtonBarEvent_GetButton, "GetButton() -> RibbonButtonBarButtonBase\n"
"\n"
"Returns the button which the event relates to.");

extern "C" {static PyObject *meth_wxRibbonButtonBarEvent_GetButton(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonButtonBarEvent_GetButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRibbonButtonBarEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonButtonBarEvent, &sipCpp))
        {
             ::wxRibbonButtonBarButtonBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetButton();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonButtonBarButtonBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonButtonBarEvent, sipName_GetButton, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonButtonBarEvent_SetButton, "SetButton(bar)\n"
"\n"
"Sets the button relating to this event.");

extern "C" {static PyObject *meth_wxRibbonButtonBarEvent_SetButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonButtonBarEvent_SetButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRibbonButtonBarButtonBase* bar;
         ::wxRibbonButtonBarEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bar,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRibbonButtonBarEvent, &sipCpp, sipType_wxRibbonButtonBarButtonBase, &bar))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetButton(bar);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonButtonBarEvent, sipName_SetButton, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonButtonBarEvent_PopupMenu, "PopupMenu(menu) -> bool\n"
"\n"
"Display a popup menu as a result of this (dropdown clicked) event.");

extern "C" {static PyObject *meth_wxRibbonButtonBarEvent_PopupMenu(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonButtonBarEvent_PopupMenu(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxMenu* menu;
         ::wxRibbonButtonBarEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_menu,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRibbonButtonBarEvent, &sipCpp, sipType_wxMenu, &menu))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PopupMenu(menu);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonButtonBarEvent, sipName_PopupMenu, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRibbonButtonBarEvent_Clone, "Clone(self) -> Event");

extern "C" {static PyObject *meth_wxRibbonButtonBarEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonButtonBarEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonButtonBarEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonButtonBarEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonButtonBarEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RibbonButtonBarEvent, sipName_Clone, doc_wxRibbonButtonBarEvent_Clone);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRibbonButtonBarEvent(void *, const sipTypeDef *);}
static void *cast_wxRibbonButtonBarEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRibbonButtonBarEvent *sipCpp = reinterpret_cast< ::wxRibbonButtonBarEvent *>(sipCppV);

    if (targetType == sipType_wxCommandEvent)
        return static_cast< ::wxCommandEvent *>(sipCpp);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRibbonButtonBarEvent(void *, int);}
static void release_wxRibbonButtonBarEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRibbonButtonBarEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRibbonButtonBarEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxRibbonButtonBarEvent(sipSimpleWrapper *);}
static void dealloc_wxRibbonButtonBarEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRibbonButtonBarEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRibbonButtonBarEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRibbonButtonBarEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRibbonButtonBarEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxRibbonButtonBarEvent *sipCpp = SIP_NULLPTR;

    {
         ::wxEventType command_type = wxEVT_NULL;
        int win_id = 0;
         ::wxRibbonButtonBar* bar = 0;
         ::wxRibbonButtonBarButtonBase* button = 0;

        static const char *sipKwdList[] = {
            sipName_command_type,
            sipName_win_id,
            sipName_bar,
            sipName_button,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|iiJ8J8", &command_type, &win_id, sipType_wxRibbonButtonBar, &bar, sipType_wxRibbonButtonBarButtonBase, &button))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRibbonButtonBarEvent(command_type,win_id,bar,button);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxRibbonButtonBarEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxRibbonButtonBarEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRibbonButtonBarEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRibbonButtonBarEvent[] = {{4, 0, 1}};


static PyMethodDef methods_wxRibbonButtonBarEvent[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxRibbonButtonBarEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonButtonBarEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_GetBar), meth_wxRibbonButtonBarEvent_GetBar, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonButtonBarEvent_GetBar)},
    {SIP_MLNAME_CAST(sipName_GetButton), meth_wxRibbonButtonBarEvent_GetButton, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonButtonBarEvent_GetButton)},
    {SIP_MLNAME_CAST(sipName_PopupMenu), SIP_MLMETH_CAST(meth_wxRibbonButtonBarEvent_PopupMenu), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonButtonBarEvent_PopupMenu)},
    {SIP_MLNAME_CAST(sipName_SetBar), SIP_MLMETH_CAST(meth_wxRibbonButtonBarEvent_SetBar), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonButtonBarEvent_SetBar)},
    {SIP_MLNAME_CAST(sipName_SetButton), SIP_MLMETH_CAST(meth_wxRibbonButtonBarEvent_SetButton), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonButtonBarEvent_SetButton)}
};

sipVariableDef variables_wxRibbonButtonBarEvent[] = {
    {PropertyVariable, sipName_Button, &methods_wxRibbonButtonBarEvent[2], &methods_wxRibbonButtonBarEvent[5], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Bar, &methods_wxRibbonButtonBarEvent[1], &methods_wxRibbonButtonBarEvent[4], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxRibbonButtonBarEvent, "RibbonButtonBarEvent(command_type=wx.wxEVT_NULL, win_id=0, bar=None, button=None)\n"
"\n"
"Event used to indicate various actions relating to a button on a\n"
"wxRibbonButtonBar.");


sipClassTypeDef sipTypeDef__ribbon_wxRibbonButtonBarEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRibbonButtonBarEvent,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_RibbonButtonBarEvent,
        {0, 0, 1},
        6, methods_wxRibbonButtonBarEvent,
        0, SIP_NULLPTR,
        2, variables_wxRibbonButtonBarEvent,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxRibbonButtonBarEvent,
    -1,
    -1,
    supers_wxRibbonButtonBarEvent,
    SIP_NULLPTR,
    init_type_wxRibbonButtonBarEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxRibbonButtonBarEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxRibbonButtonBarEvent,
    cast_wxRibbonButtonBarEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
