/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/busyinfo.h>

        #include <wx/colour.h>
        #include <wx/icon.h>
        #include <wx/window.h>


PyDoc_STRVAR(doc_wxBusyInfoFlags_Parent, "Parent(parent) -> BusyInfoFlags\n"
"\n"
"Sets the parent for wxBusyInfo.");

extern "C" {static PyObject *meth_wxBusyInfoFlags_Parent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBusyInfoFlags_Parent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* parent;
         ::wxBusyInfoFlags *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxBusyInfoFlags, &sipCpp, sipType_wxWindow, &parent))
        {
             ::wxBusyInfoFlags*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Parent(parent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxBusyInfoFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BusyInfoFlags, sipName_Parent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBusyInfoFlags_Icon, "Icon(icon) -> BusyInfoFlags\n"
"\n"
"Sets the icon to show in wxBusyInfo.");

extern "C" {static PyObject *meth_wxBusyInfoFlags_Icon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBusyInfoFlags_Icon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxIcon* icon;
         ::wxBusyInfoFlags *sipCpp;

        static const char *sipKwdList[] = {
            sipName_icon,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxBusyInfoFlags, &sipCpp, sipType_wxIcon, &icon))
        {
             ::wxBusyInfoFlags*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Icon(*icon);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxBusyInfoFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BusyInfoFlags, sipName_Icon, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBusyInfoFlags_Title, "Title(title) -> BusyInfoFlags\n"
"\n"
"Sets the title, shown prominently in wxBusyInfo window.");

extern "C" {static PyObject *meth_wxBusyInfoFlags_Title(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBusyInfoFlags_Title(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* title;
        int titleState = 0;
         ::wxBusyInfoFlags *sipCpp;

        static const char *sipKwdList[] = {
            sipName_title,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxBusyInfoFlags, &sipCpp, sipType_wxString,&title, &titleState))
        {
             ::wxBusyInfoFlags*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Title(*title);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxBusyInfoFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BusyInfoFlags, sipName_Title, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBusyInfoFlags_Text, "Text(text) -> BusyInfoFlags\n"
"\n"
"Sets the more detailed text, shown under the title, if any.");

extern "C" {static PyObject *meth_wxBusyInfoFlags_Text(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBusyInfoFlags_Text(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* text;
        int textState = 0;
         ::wxBusyInfoFlags *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxBusyInfoFlags, &sipCpp, sipType_wxString,&text, &textState))
        {
             ::wxBusyInfoFlags*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Text(*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxBusyInfoFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BusyInfoFlags, sipName_Text, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBusyInfoFlags_Label, "Label(label) -> BusyInfoFlags\n"
"\n"
"Same as Text() but doesn't interpret the string as containing markup.");

extern "C" {static PyObject *meth_wxBusyInfoFlags_Label(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBusyInfoFlags_Label(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* label;
        int labelState = 0;
         ::wxBusyInfoFlags *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxBusyInfoFlags, &sipCpp, sipType_wxString,&label, &labelState))
        {
             ::wxBusyInfoFlags*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Label(*label);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxBusyInfoFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BusyInfoFlags, sipName_Label, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBusyInfoFlags_Foreground, "Foreground(foreground) -> BusyInfoFlags\n"
"\n"
"Sets the foreground colour of the title and text strings.");

extern "C" {static PyObject *meth_wxBusyInfoFlags_Foreground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBusyInfoFlags_Foreground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* foreground;
        int foregroundState = 0;
         ::wxBusyInfoFlags *sipCpp;

        static const char *sipKwdList[] = {
            sipName_foreground,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxBusyInfoFlags, &sipCpp, sipType_wxColour, &foreground, &foregroundState))
        {
             ::wxBusyInfoFlags*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Foreground(*foreground);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(foreground),sipType_wxColour,foregroundState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxBusyInfoFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BusyInfoFlags, sipName_Foreground, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBusyInfoFlags_Background, "Background(background) -> BusyInfoFlags\n"
"\n"
"Sets the background colour of wxBusyInfo window.");

extern "C" {static PyObject *meth_wxBusyInfoFlags_Background(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBusyInfoFlags_Background(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* background;
        int backgroundState = 0;
         ::wxBusyInfoFlags *sipCpp;

        static const char *sipKwdList[] = {
            sipName_background,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxBusyInfoFlags, &sipCpp, sipType_wxColour, &background, &backgroundState))
        {
             ::wxBusyInfoFlags*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Background(*background);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(background),sipType_wxColour,backgroundState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxBusyInfoFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BusyInfoFlags, sipName_Background, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxBusyInfoFlags_Transparency, "Transparency(alpha) -> BusyInfoFlags\n"
"\n"
"Sets the transparency of wxBusyInfo window.");

extern "C" {static PyObject *meth_wxBusyInfoFlags_Transparency(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBusyInfoFlags_Transparency(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxByte alpha;
         ::wxBusyInfoFlags *sipCpp;

        static const char *sipKwdList[] = {
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BM", &sipSelf, sipType_wxBusyInfoFlags, &sipCpp, &alpha))
        {
             ::wxBusyInfoFlags*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->Transparency(alpha);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxBusyInfoFlags,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_BusyInfoFlags, sipName_Transparency, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxBusyInfoFlags(void *, int);}
static void release_wxBusyInfoFlags(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxBusyInfoFlags *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxBusyInfoFlags(Py_ssize_t);}
static void *array_wxBusyInfoFlags(Py_ssize_t sipNrElem)
{
    return new  ::wxBusyInfoFlags[sipNrElem];
}


extern "C" {static void assign_wxBusyInfoFlags(void *, SIP_SSIZE_T, void *);}
static void assign_wxBusyInfoFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxBusyInfoFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxBusyInfoFlags *>(sipSrc);
}


extern "C" {static void *copy_wxBusyInfoFlags(const void *, SIP_SSIZE_T);}
static void *copy_wxBusyInfoFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxBusyInfoFlags(reinterpret_cast<const  ::wxBusyInfoFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxBusyInfoFlags(sipSimpleWrapper *);}
static void dealloc_wxBusyInfoFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxBusyInfoFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxBusyInfoFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxBusyInfoFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::wxBusyInfoFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxBusyInfoFlags();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            return sipCpp;
        }
    }

    {
        const  ::wxBusyInfoFlags* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxBusyInfoFlags, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxBusyInfoFlags(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_wxBusyInfoFlags[] = {
    {SIP_MLNAME_CAST(sipName_Background), SIP_MLMETH_CAST(meth_wxBusyInfoFlags_Background), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBusyInfoFlags_Background)},
    {SIP_MLNAME_CAST(sipName_Foreground), SIP_MLMETH_CAST(meth_wxBusyInfoFlags_Foreground), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBusyInfoFlags_Foreground)},
    {SIP_MLNAME_CAST(sipName_Icon), SIP_MLMETH_CAST(meth_wxBusyInfoFlags_Icon), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBusyInfoFlags_Icon)},
    {SIP_MLNAME_CAST(sipName_Label), SIP_MLMETH_CAST(meth_wxBusyInfoFlags_Label), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBusyInfoFlags_Label)},
    {SIP_MLNAME_CAST(sipName_Parent), SIP_MLMETH_CAST(meth_wxBusyInfoFlags_Parent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBusyInfoFlags_Parent)},
    {SIP_MLNAME_CAST(sipName_Text), SIP_MLMETH_CAST(meth_wxBusyInfoFlags_Text), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBusyInfoFlags_Text)},
    {SIP_MLNAME_CAST(sipName_Title), SIP_MLMETH_CAST(meth_wxBusyInfoFlags_Title), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBusyInfoFlags_Title)},
    {SIP_MLNAME_CAST(sipName_Transparency), SIP_MLMETH_CAST(meth_wxBusyInfoFlags_Transparency), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBusyInfoFlags_Transparency)}
};

PyDoc_STRVAR(doc_wxBusyInfoFlags, "BusyInfoFlags()\n"
"\n"
"Parameters for wxBusyInfo.");


sipClassTypeDef sipTypeDef__core_wxBusyInfoFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxBusyInfoFlags,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_BusyInfoFlags,
        {0, 0, 1},
        8, methods_wxBusyInfoFlags,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxBusyInfoFlags,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_wxBusyInfoFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxBusyInfoFlags,
    assign_wxBusyInfoFlags,
    array_wxBusyInfoFlags,
    copy_wxBusyInfoFlags,
    release_wxBusyInfoFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
