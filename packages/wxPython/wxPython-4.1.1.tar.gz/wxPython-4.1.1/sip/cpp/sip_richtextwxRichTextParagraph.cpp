/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_richtext.h"

        #include <wx/richtext/richtextbuffer.h>

        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/dc.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/gdicmn.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        
        typedef wxList wxRichTextObjectList_;
        
        
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/richtext/richtextbuffer.h>
        
        
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/xml/xml.h>
        #include <wx/richtext/richtextxml.h>
        #include <wx/window.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxRichTextParagraph : public  ::wxRichTextParagraph
{
public:
    sipwxRichTextParagraph( ::wxRichTextObject*, ::wxRichTextAttr*);
    sipwxRichTextParagraph(const  ::wxString&, ::wxRichTextObject*, ::wxRichTextAttr*, ::wxRichTextAttr*);
    sipwxRichTextParagraph(const  ::wxRichTextParagraph&);
    virtual ~sipwxRichTextParagraph();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void MoveFromList( ::wxRichTextObjectList_&) SIP_OVERRIDE;
    void MoveToList( ::wxRichTextObject*, ::wxRichTextObjectList_&) SIP_OVERRIDE;
     ::wxRichTextObject* SplitAt(long, ::wxRichTextObject**) SIP_OVERRIDE;
    bool InsertText(long,const  ::wxString&) SIP_OVERRIDE;
    void ApplyParagraphStyle( ::wxRichTextLine*,const  ::wxRichTextAttr&,const  ::wxRect&, ::wxDC&) SIP_OVERRIDE;
    void Move(const  ::wxPoint&) SIP_OVERRIDE;
     ::wxRichTextObject* Clone() const SIP_OVERRIDE;
    void Show(bool) SIP_OVERRIDE;
    bool IsTopLevel() const SIP_OVERRIDE;
    bool AdjustAttributes( ::wxRichTextAttr&, ::wxRichTextDrawingContext&) SIP_OVERRIDE;
    bool LayoutToBestSize( ::wxDC&, ::wxRichTextDrawingContext&, ::wxRichTextBuffer*,const  ::wxRichTextAttr&,const  ::wxRichTextAttr&,const  ::wxRect&,const  ::wxRect&,int) SIP_OVERRIDE;
     ::wxRect GetAvailableContentArea( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&) const SIP_OVERRIDE;
    int GetBottomMargin() const SIP_OVERRIDE;
    int GetTopMargin() const SIP_OVERRIDE;
    int GetRightMargin() const SIP_OVERRIDE;
    int GetLeftMargin() const SIP_OVERRIDE;
    void SetMargins(int,int,int,int) SIP_OVERRIDE;
    void SetMargins(int) SIP_OVERRIDE;
     ::wxRichTextParagraphLayoutBox* GetParentContainer() const SIP_OVERRIDE;
     ::wxRichTextParagraphLayoutBox* GetContainer() const SIP_OVERRIDE;
    void SetParent( ::wxRichTextObject*) SIP_OVERRIDE;
     ::wxRichTextObject* GetParent() const SIP_OVERRIDE;
    bool IsAtomic() const SIP_OVERRIDE;
    bool IsComposite() const SIP_OVERRIDE;
     ::wxRect GetRect() const SIP_OVERRIDE;
     ::wxPoint GetAbsolutePosition() const SIP_OVERRIDE;
    void SetPosition(const  ::wxPoint&) SIP_OVERRIDE;
     ::wxPoint GetPosition() const SIP_OVERRIDE;
     ::wxTextAttrSize GetNaturalSize() const SIP_OVERRIDE;
    void SetMinSize(const  ::wxSize&) SIP_OVERRIDE;
     ::wxSize GetMinSize() const SIP_OVERRIDE;
    void SetMaxSize(const  ::wxSize&) SIP_OVERRIDE;
     ::wxSize GetMaxSize() const SIP_OVERRIDE;
    void SetCachedSize(const  ::wxSize&) SIP_OVERRIDE;
     ::wxSize GetCachedSize() const SIP_OVERRIDE;
     ::wxRichTextSelection GetSelection(long,long) const SIP_OVERRIDE;
    bool HandlesChildSelections() const SIP_OVERRIDE;
    void Invalidate(const  ::wxRichTextRange&) SIP_OVERRIDE;
     ::wxString GetXMLNodeName() const SIP_OVERRIDE;
    bool UsesParagraphAttributes() const SIP_OVERRIDE;
    bool ImportFromXML( ::wxRichTextBuffer*, ::wxXmlNode*, ::wxRichTextXMLHandler*,bool*) SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
     ::wxString GetPropertiesMenuLabel() const SIP_OVERRIDE;
    bool EditProperties( ::wxWindow*, ::wxRichTextBuffer*) SIP_OVERRIDE;
    bool CanEditProperties() const SIP_OVERRIDE;
     ::wxRichTextObject* Split( ::wxRichTextDrawingContext&) SIP_OVERRIDE;
    bool CanSplit( ::wxRichTextDrawingContext&) const SIP_OVERRIDE;
    bool Merge( ::wxRichTextObject*, ::wxRichTextDrawingContext&) SIP_OVERRIDE;
    bool CanMerge( ::wxRichTextObject*, ::wxRichTextDrawingContext&) const SIP_OVERRIDE;
     ::wxString GetTextForRange(const  ::wxRichTextRange&) const SIP_OVERRIDE;
    int GetFloatDirection() const SIP_OVERRIDE;
    bool IsFloating() const SIP_OVERRIDE;
    bool IsFloatable() const SIP_OVERRIDE;
    bool IsEmpty() const SIP_OVERRIDE;
    bool DeleteRange(const  ::wxRichTextRange&) SIP_OVERRIDE;
    void CalculateRange(long,long&) SIP_OVERRIDE;
     ::wxRichTextObject* DoSplit(long) SIP_OVERRIDE;
    bool GetRangeSize(const  ::wxRichTextRange&, ::wxSize&,int&, ::wxDC&, ::wxRichTextDrawingContext&,int,const  ::wxPoint&,const  ::wxSize&, ::wxArrayInt*) const SIP_OVERRIDE;
     ::wxSize GetBestSize() const SIP_OVERRIDE;
    bool FindPosition( ::wxDC&, ::wxRichTextDrawingContext&,long, ::wxPoint&,int*,bool) SIP_OVERRIDE;
    int HitTest( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxPoint&,long&, ::wxRichTextObject**, ::wxRichTextObject**,int) SIP_OVERRIDE;
    bool Layout( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&,const  ::wxRect&,int) SIP_OVERRIDE;
    bool Draw( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRichTextRange&,const  ::wxRichTextSelection&,const  ::wxRect&,int,int) SIP_OVERRIDE;
     ::wxRichTextObject* GetChildAtPosition(long) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRichTextParagraph(const sipwxRichTextParagraph &);
    sipwxRichTextParagraph &operator = (const sipwxRichTextParagraph &);

    char sipPyMethods[64];
};

sipwxRichTextParagraph::sipwxRichTextParagraph( ::wxRichTextObject*parent, ::wxRichTextAttr*style):  ::wxRichTextParagraph(parent,style), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextParagraph::sipwxRichTextParagraph(const  ::wxString& text, ::wxRichTextObject*parent, ::wxRichTextAttr*paraStyle, ::wxRichTextAttr*charStyle):  ::wxRichTextParagraph(text,parent,paraStyle,charStyle), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextParagraph::sipwxRichTextParagraph(const  ::wxRichTextParagraph& obj):  ::wxRichTextParagraph(obj), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextParagraph::~sipwxRichTextParagraph()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxRichTextParagraph::MoveFromList( ::wxRichTextObjectList_& list)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_MoveFromList);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::MoveFromList(list);
        return;
    }

    extern void sipVH__richtext_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObjectList_&);

    sipVH__richtext_87(sipGILState, 0, sipPySelf, sipMeth, list);
}

void sipwxRichTextParagraph::MoveToList( ::wxRichTextObject*obj, ::wxRichTextObjectList_& list)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_MoveToList);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::MoveToList(obj,list);
        return;
    }

    extern void sipVH__richtext_86(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*, ::wxRichTextObjectList_&);

    sipVH__richtext_86(sipGILState, 0, sipPySelf, sipMeth, obj, list);
}

 ::wxRichTextObject* sipwxRichTextParagraph::SplitAt(long pos, ::wxRichTextObject**previousObject)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_SplitAt);

    if (!sipMeth)
        return  ::wxRichTextParagraph::SplitAt(pos,previousObject);

    extern  ::wxRichTextObject* sipVH__richtext_85(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextObject**);

    return sipVH__richtext_85(sipGILState, 0, sipPySelf, sipMeth, pos, previousObject);
}

bool sipwxRichTextParagraph::InsertText(long pos,const  ::wxString& text)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_InsertText);

    if (!sipMeth)
        return  ::wxRichTextParagraph::InsertText(pos,text);

    extern bool sipVH__richtext_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,const  ::wxString&);

    return sipVH__richtext_84(sipGILState, 0, sipPySelf, sipMeth, pos, text);
}

void sipwxRichTextParagraph::ApplyParagraphStyle( ::wxRichTextLine*line,const  ::wxRichTextAttr& attr,const  ::wxRect& rect, ::wxDC& dc)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_ApplyParagraphStyle);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::ApplyParagraphStyle(line,attr,rect,dc);
        return;
    }

    extern void sipVH__richtext_83(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextLine*,const  ::wxRichTextAttr&,const  ::wxRect&, ::wxDC&);

    sipVH__richtext_83(sipGILState, 0, sipPySelf, sipMeth, line, attr, rect, dc);
}

void sipwxRichTextParagraph::Move(const  ::wxPoint& pt)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_Move);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::Move(pt);
        return;
    }

    extern void sipVH__richtext_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPoint&);

    sipVH__richtext_23(sipGILState, 0, sipPySelf, sipMeth, pt);
}

 ::wxRichTextObject* sipwxRichTextParagraph::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_Clone);

    if (!sipMeth)
        return  ::wxRichTextParagraph::Clone();

    extern  ::wxRichTextObject* sipVH__richtext_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraph::Show(bool show)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_Show);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::Show(show);
        return;
    }

    extern void sipVH__richtext_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__richtext_33(sipGILState, 0, sipPySelf, sipMeth, show);
}

bool sipwxRichTextParagraph::IsTopLevel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_IsTopLevel);

    if (!sipMeth)
        return  ::wxRichTextParagraph::IsTopLevel();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraph::AdjustAttributes( ::wxRichTextAttr& attr, ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_AdjustAttributes);

    if (!sipMeth)
        return  ::wxRichTextParagraph::AdjustAttributes(attr,context);

    extern bool sipVH__richtext_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextAttr&, ::wxRichTextDrawingContext&);

    return sipVH__richtext_32(sipGILState, 0, sipPySelf, sipMeth, attr, context);
}

bool sipwxRichTextParagraph::LayoutToBestSize( ::wxDC& dc, ::wxRichTextDrawingContext& context, ::wxRichTextBuffer*buffer,const  ::wxRichTextAttr& parentAttr,const  ::wxRichTextAttr& attr,const  ::wxRect& availableParentSpace,const  ::wxRect& availableContainerSpace,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_LayoutToBestSize);

    if (!sipMeth)
        return  ::wxRichTextParagraph::LayoutToBestSize(dc,context,buffer,parentAttr,attr,availableParentSpace,availableContainerSpace,style);

    extern bool sipVH__richtext_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&, ::wxRichTextBuffer*,const  ::wxRichTextAttr&,const  ::wxRichTextAttr&,const  ::wxRect&,const  ::wxRect&,int);

    return sipVH__richtext_31(sipGILState, 0, sipPySelf, sipMeth, dc, context, buffer, parentAttr, attr, availableParentSpace, availableContainerSpace, style);
}

 ::wxRect sipwxRichTextParagraph::GetAvailableContentArea( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRect& outerRect) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_GetAvailableContentArea);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetAvailableContentArea(dc,context,outerRect);

    extern  ::wxRect sipVH__richtext_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&);

    return sipVH__richtext_30(sipGILState, 0, sipPySelf, sipMeth, dc, context, outerRect);
}

int sipwxRichTextParagraph::GetBottomMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_GetBottomMargin);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetBottomMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextParagraph::GetTopMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_GetTopMargin);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetTopMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextParagraph::GetRightMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_GetRightMargin);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetRightMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextParagraph::GetLeftMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_GetLeftMargin);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetLeftMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraph::SetMargins(int leftMargin,int rightMargin,int topMargin,int bottomMargin)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_SetMargins);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::SetMargins(leftMargin,rightMargin,topMargin,bottomMargin);
        return;
    }

    extern void sipVH__richtext_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__richtext_29(sipGILState, 0, sipPySelf, sipMeth, leftMargin, rightMargin, topMargin, bottomMargin);
}

void sipwxRichTextParagraph::SetMargins(int margin)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_SetMargins);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::SetMargins(margin);
        return;
    }

    extern void sipVH__richtext_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__richtext_28(sipGILState, 0, sipPySelf, sipMeth, margin);
}

 ::wxRichTextParagraphLayoutBox* sipwxRichTextParagraph::GetParentContainer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_GetParentContainer);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetParentContainer();

    extern  ::wxRichTextParagraphLayoutBox* sipVH__richtext_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_27(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextParagraphLayoutBox* sipwxRichTextParagraph::GetContainer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,SIP_NULLPTR,sipName_GetContainer);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetContainer();

    extern  ::wxRichTextParagraphLayoutBox* sipVH__richtext_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_27(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraph::SetParent( ::wxRichTextObject*parent)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_SetParent);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::SetParent(parent);
        return;
    }

    extern void sipVH__richtext_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*);

    sipVH__richtext_26(sipGILState, 0, sipPySelf, sipMeth, parent);
}

 ::wxRichTextObject* sipwxRichTextParagraph::GetParent() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,SIP_NULLPTR,sipName_GetParent);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetParent();

    extern  ::wxRichTextObject* sipVH__richtext_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_34(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraph::IsAtomic() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,SIP_NULLPTR,sipName_IsAtomic);

    if (!sipMeth)
        return  ::wxRichTextParagraph::IsAtomic();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraph::IsComposite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,SIP_NULLPTR,sipName_IsComposite);

    if (!sipMeth)
        return  ::wxRichTextParagraph::IsComposite();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRect sipwxRichTextParagraph::GetRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,SIP_NULLPTR,sipName_GetRect);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetRect();

    extern  ::wxRect sipVH__richtext_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_24(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxRichTextParagraph::GetAbsolutePosition() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_GetAbsolutePosition);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetAbsolutePosition();

    extern  ::wxPoint sipVH__richtext_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_22(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraph::SetPosition(const  ::wxPoint& pos)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_SetPosition);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::SetPosition(pos);
        return;
    }

    extern void sipVH__richtext_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPoint&);

    sipVH__richtext_23(sipGILState, 0, sipPySelf, sipMeth, pos);
}

 ::wxPoint sipwxRichTextParagraph::GetPosition() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_GetPosition);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetPosition();

    extern  ::wxPoint sipVH__richtext_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_22(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxTextAttrSize sipwxRichTextParagraph::GetNaturalSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,SIP_NULLPTR,sipName_GetNaturalSize);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetNaturalSize();

    extern  ::wxTextAttrSize sipVH__richtext_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_21(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraph::SetMinSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_SetMinSize);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::SetMinSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextParagraph::GetMinSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,SIP_NULLPTR,sipName_GetMinSize);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetMinSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraph::SetMaxSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_SetMaxSize);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::SetMaxSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextParagraph::GetMaxSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,SIP_NULLPTR,sipName_GetMaxSize);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetMaxSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraph::SetCachedSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_SetCachedSize);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::SetCachedSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextParagraph::GetCachedSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,SIP_NULLPTR,sipName_GetCachedSize);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetCachedSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextSelection sipwxRichTextParagraph::GetSelection(long start,long end) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,SIP_NULLPTR,sipName_GetSelection);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetSelection(start,end);

    extern  ::wxRichTextSelection sipVH__richtext_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long);

    return sipVH__richtext_19(sipGILState, 0, sipPySelf, sipMeth, start, end);
}

bool sipwxRichTextParagraph::HandlesChildSelections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,SIP_NULLPTR,sipName_HandlesChildSelections);

    if (!sipMeth)
        return  ::wxRichTextParagraph::HandlesChildSelections();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraph::Invalidate(const  ::wxRichTextRange& invalidRange)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_Invalidate);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::Invalidate(invalidRange);
        return;
    }

    extern void sipVH__richtext_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    sipVH__richtext_18(sipGILState, 0, sipPySelf, sipMeth, invalidRange);
}

 ::wxString sipwxRichTextParagraph::GetXMLNodeName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,SIP_NULLPTR,sipName_GetXMLNodeName);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetXMLNodeName();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraph::UsesParagraphAttributes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,SIP_NULLPTR,sipName_UsesParagraphAttributes);

    if (!sipMeth)
        return  ::wxRichTextParagraph::UsesParagraphAttributes();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraph::ImportFromXML( ::wxRichTextBuffer*buffer, ::wxXmlNode*node, ::wxRichTextXMLHandler*handler,bool*recurse)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,SIP_NULLPTR,sipName_ImportFromXML);

    if (!sipMeth)
        return  ::wxRichTextParagraph::ImportFromXML(buffer,node,handler,recurse);

    extern bool sipVH__richtext_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextBuffer*, ::wxXmlNode*, ::wxRichTextXMLHandler*,bool*);

    return sipVH__richtext_17(sipGILState, 0, sipPySelf, sipMeth, buffer, node, handler, recurse);
}

bool sipwxRichTextParagraph::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxRichTextParagraph::AcceptsFocus();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxRichTextParagraph::GetPropertiesMenuLabel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,SIP_NULLPTR,sipName_GetPropertiesMenuLabel);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetPropertiesMenuLabel();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraph::EditProperties( ::wxWindow*parent, ::wxRichTextBuffer*buffer)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,SIP_NULLPTR,sipName_EditProperties);

    if (!sipMeth)
        return  ::wxRichTextParagraph::EditProperties(parent,buffer);

    extern bool sipVH__richtext_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*, ::wxRichTextBuffer*);

    return sipVH__richtext_15(sipGILState, 0, sipPySelf, sipMeth, parent, buffer);
}

bool sipwxRichTextParagraph::CanEditProperties() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,SIP_NULLPTR,sipName_CanEditProperties);

    if (!sipMeth)
        return  ::wxRichTextParagraph::CanEditProperties();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextObject* sipwxRichTextParagraph::Split( ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,SIP_NULLPTR,sipName_Split);

    if (!sipMeth)
        return  ::wxRichTextParagraph::Split(context);

    extern  ::wxRichTextObject* sipVH__richtext_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextDrawingContext&);

    return sipVH__richtext_14(sipGILState, 0, sipPySelf, sipMeth, context);
}

bool sipwxRichTextParagraph::CanSplit( ::wxRichTextDrawingContext& context) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,SIP_NULLPTR,sipName_CanSplit);

    if (!sipMeth)
        return  ::wxRichTextParagraph::CanSplit(context);

    extern bool sipVH__richtext_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextDrawingContext&);

    return sipVH__richtext_13(sipGILState, 0, sipPySelf, sipMeth, context);
}

bool sipwxRichTextParagraph::Merge( ::wxRichTextObject*object, ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,SIP_NULLPTR,sipName_Merge);

    if (!sipMeth)
        return  ::wxRichTextParagraph::Merge(object,context);

    extern bool sipVH__richtext_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*, ::wxRichTextDrawingContext&);

    return sipVH__richtext_12(sipGILState, 0, sipPySelf, sipMeth, object, context);
}

bool sipwxRichTextParagraph::CanMerge( ::wxRichTextObject*object, ::wxRichTextDrawingContext& context) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[48]),sipPySelf,SIP_NULLPTR,sipName_CanMerge);

    if (!sipMeth)
        return  ::wxRichTextParagraph::CanMerge(object,context);

    extern bool sipVH__richtext_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*, ::wxRichTextDrawingContext&);

    return sipVH__richtext_12(sipGILState, 0, sipPySelf, sipMeth, object, context);
}

 ::wxString sipwxRichTextParagraph::GetTextForRange(const  ::wxRichTextRange& range) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,SIP_NULLPTR,sipName_GetTextForRange);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetTextForRange(range);

    extern  ::wxString sipVH__richtext_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    return sipVH__richtext_11(sipGILState, 0, sipPySelf, sipMeth, range);
}

int sipwxRichTextParagraph::GetFloatDirection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,SIP_NULLPTR,sipName_GetFloatDirection);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetFloatDirection();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraph::IsFloating() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,SIP_NULLPTR,sipName_IsFloating);

    if (!sipMeth)
        return  ::wxRichTextParagraph::IsFloating();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraph::IsFloatable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,SIP_NULLPTR,sipName_IsFloatable);

    if (!sipMeth)
        return  ::wxRichTextParagraph::IsFloatable();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraph::IsEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[53]),sipPySelf,SIP_NULLPTR,sipName_IsEmpty);

    if (!sipMeth)
        return  ::wxRichTextParagraph::IsEmpty();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraph::DeleteRange(const  ::wxRichTextRange& range)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,SIP_NULLPTR,sipName_DeleteRange);

    if (!sipMeth)
        return  ::wxRichTextParagraph::DeleteRange(range);

    extern bool sipVH__richtext_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    return sipVH__richtext_8(sipGILState, 0, sipPySelf, sipMeth, range);
}

void sipwxRichTextParagraph::CalculateRange(long start,long& end)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,SIP_NULLPTR,sipName_CalculateRange);

    if (!sipMeth)
    {
         ::wxRichTextParagraph::CalculateRange(start,end);
        return;
    }

    extern void sipVH__richtext_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long&);

    sipVH__richtext_7(sipGILState, 0, sipPySelf, sipMeth, start, end);
}

 ::wxRichTextObject* sipwxRichTextParagraph::DoSplit(long pos)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,SIP_NULLPTR,sipName_DoSplit);

    if (!sipMeth)
        return  ::wxRichTextParagraph::DoSplit(pos);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, pos);
}

bool sipwxRichTextParagraph::GetRangeSize(const  ::wxRichTextRange& range, ::wxSize& size,int& descent, ::wxDC& dc, ::wxRichTextDrawingContext& context,int flags,const  ::wxPoint& position,const  ::wxSize& parentSize, ::wxArrayInt*partialExtents) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[57]),sipPySelf,SIP_NULLPTR,sipName_GetRangeSize);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetRangeSize(range,size,descent,dc,context,flags,position,parentSize,partialExtents);

    extern bool sipVH__richtext_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxSize&,int&, ::wxDC&, ::wxRichTextDrawingContext&,int,const  ::wxPoint&,const  ::wxSize&, ::wxArrayInt*);

    return sipVH__richtext_5(sipGILState, 0, sipPySelf, sipMeth, range, size, descent, dc, context, flags, position, parentSize, partialExtents);
}

 ::wxSize sipwxRichTextParagraph::GetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[58]),sipPySelf,SIP_NULLPTR,sipName_GetBestSize);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetBestSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraph::FindPosition( ::wxDC& dc, ::wxRichTextDrawingContext& context,long index, ::wxPoint& pt,int*height,bool forceLineStart)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,SIP_NULLPTR,sipName_FindPosition);

    if (!sipMeth)
        return  ::wxRichTextParagraph::FindPosition(dc,context,index,pt,height,forceLineStart);

    extern bool sipVH__richtext_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,long, ::wxPoint&,int*,bool);

    return sipVH__richtext_3(sipGILState, 0, sipPySelf, sipMeth, dc, context, index, pt, height, forceLineStart);
}

int sipwxRichTextParagraph::HitTest( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxPoint& pt,long& textPosition, ::wxRichTextObject**obj, ::wxRichTextObject**contextObj,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,SIP_NULLPTR,sipName_HitTest);

    if (!sipMeth)
        return  ::wxRichTextParagraph::HitTest(dc,context,pt,textPosition,obj,contextObj,flags);

    extern int sipVH__richtext_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxPoint&,long&, ::wxRichTextObject**, ::wxRichTextObject**,int);

    return sipVH__richtext_2(sipGILState, 0, sipPySelf, sipMeth, dc, context, pt, textPosition, obj, contextObj, flags);
}

bool sipwxRichTextParagraph::Layout( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRect& rect,const  ::wxRect& parentRect,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,SIP_NULLPTR,sipName_Layout);

    if (!sipMeth)
        return  ::wxRichTextParagraph::Layout(dc,context,rect,parentRect,style);

    extern bool sipVH__richtext_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&,const  ::wxRect&,int);

    return sipVH__richtext_1(sipGILState, 0, sipPySelf, sipMeth, dc, context, rect, parentRect, style);
}

bool sipwxRichTextParagraph::Draw( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRichTextRange& range,const  ::wxRichTextSelection& selection,const  ::wxRect& rect,int descent,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,SIP_NULLPTR,sipName_Draw);

    if (!sipMeth)
        return  ::wxRichTextParagraph::Draw(dc,context,range,selection,rect,descent,style);

    extern bool sipVH__richtext_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRichTextRange&,const  ::wxRichTextSelection&,const  ::wxRect&,int,int);

    return sipVH__richtext_0(sipGILState, 0, sipPySelf, sipMeth, dc, context, range, selection, rect, descent, style);
}

 ::wxRichTextObject* sipwxRichTextParagraph::GetChildAtPosition(long pos) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[63]),sipPySelf,SIP_NULLPTR,sipName_GetChildAtPosition);

    if (!sipMeth)
        return  ::wxRichTextParagraph::GetChildAtPosition(pos);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, pos);
}


PyDoc_STRVAR(doc_wxRichTextParagraph_Init, "Init()");

extern "C" {static PyObject *meth_wxRichTextParagraph_Init(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_Init(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextParagraph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraph, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Init();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_Init, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_Draw, "Draw(dc, context, range, selection, rect, descent, style) -> bool\n"
"\n"
"Draw the item, within the given range.");

extern "C" {static PyObject *meth_wxRichTextParagraph_Draw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_Draw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextSelection* selection;
        const  ::wxRect* rect;
        int rectState = 0;
        int descent;
        int style;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_range,
            sipName_selection,
            sipName_rect,
            sipName_descent,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J1J9J1ii", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextSelection, &selection, sipType_wxRect, &rect, &rectState, &descent, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraph::Draw(*dc,*context,*range,*selection,*rect,descent,style) : sipCpp->Draw(*dc,*context,*range,*selection,*rect,descent,style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_Draw, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_Layout, "Layout(dc, context, rect, parentRect, style) -> bool\n"
"\n"
"Lay the item out at the specified position with the given size\n"
"constraint.");

extern "C" {static PyObject *meth_wxRichTextParagraph_Layout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_Layout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRect* rect;
        int rectState = 0;
        const  ::wxRect* parentRect;
        int parentRectState = 0;
        int style;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_rect,
            sipName_parentRect,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J1J1i", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRect, &rect, &rectState, sipType_wxRect, &parentRect, &parentRectState, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraph::Layout(*dc,*context,*rect,*parentRect,style) : sipCpp->Layout(*dc,*context,*rect,*parentRect,style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);
            sipReleaseType(const_cast< ::wxRect *>(parentRect),sipType_wxRect,parentRectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_Layout, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_GetRangeSize, "GetRangeSize(range, size, descent, dc, context, flags, position=wx.Point(0,0), parentSize=wx.DefaultSize, partialExtents=None) -> bool\n"
"\n"
"Returns the object size for the given range.");

extern "C" {static PyObject *meth_wxRichTextParagraph_GetRangeSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_GetRangeSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxSize* size;
        int sizeState = 0;
        int descent;
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        int flags;
        const  ::wxPoint& positiondef = wxPoint(0,0);
        const  ::wxPoint* position = &positiondef;
        int positionState = 0;
        const  ::wxSize& parentSizedef = wxDefaultSize;
        const  ::wxSize* parentSize = &parentSizedef;
        int parentSizeState = 0;
         ::wxArrayInt* partialExtents = 0;
        int partialExtentsState = 0;
        const  ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_size,
            sipName_dc,
            sipName_context,
            sipName_flags,
            sipName_position,
            sipName_parentSize,
            sipName_partialExtents,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1J9J9i|J1J1J0", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxSize, &size, &sizeState, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, &flags, sipType_wxPoint, &position, &positionState, sipType_wxSize, &parentSize, &parentSizeState, sipType_wxArrayInt,&partialExtents, &partialExtentsState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraph::GetRangeSize(*range,*size,descent,*dc,*context,flags,*position,*parentSize,partialExtents) : sipCpp->GetRangeSize(*range,*size,descent,*dc,*context,flags,*position,*parentSize,partialExtents));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);
            sipReleaseType(size,sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxPoint *>(position),sipType_wxPoint,positionState);
            sipReleaseType(const_cast< ::wxSize *>(parentSize),sipType_wxSize,parentSizeState);
            sipReleaseType(partialExtents,sipType_wxArrayInt,partialExtentsState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bi)",sipRes,descent);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_GetRangeSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_FindPosition, "FindPosition(dc, context, index, forceLineStart) -> (bool, pt, height)\n"
"\n"
"Finds the absolute position and row height for the given character\n"
"position.");

extern "C" {static PyObject *meth_wxRichTextParagraph_FindPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_FindPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        long index;
         ::wxPoint* pt;
        int height;
        bool forceLineStart;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_index,
            sipName_forceLineStart,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9lb", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, &index, &forceLineStart))
        {
            bool sipRes;
            pt = new  ::wxPoint();

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraph::FindPosition(*dc,*context,index,*pt,&height,forceLineStart) : sipCpp->FindPosition(*dc,*context,index,*pt,&height,forceLineStart));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bNi)",sipRes,pt,sipType_wxPoint,SIP_NULLPTR,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_FindPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_HitTest, "HitTest(dc, context, pt, flags=0) -> (int, textPosition, obj, contextObj)\n"
"\n"
"Hit-testing: returns a flag indicating hit test details, plus\n"
"information about position.");

extern "C" {static PyObject *meth_wxRichTextParagraph_HitTest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_HitTest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxPoint* pt;
        int ptState = 0;
        long textPosition;
         ::wxRichTextObject* obj;
         ::wxRichTextObject* contextObj;
        int flags = 0;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_pt,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J1|i", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxPoint, &pt, &ptState, &flags))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraph::HitTest(*dc,*context,*pt,textPosition,&obj,&contextObj,flags) : sipCpp->HitTest(*dc,*context,*pt,textPosition,&obj,&contextObj,flags));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ilDD)",sipRes,textPosition,obj,sipType_wxRichTextObject,SIP_NULLPTR,contextObj,sipType_wxRichTextObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_HitTest, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_CalculateRange, "CalculateRange(start) -> end\n"
"\n"
"Calculates the range of the object.");

extern "C" {static PyObject *meth_wxRichTextParagraph_CalculateRange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_CalculateRange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long start;
        long end;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_start,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, &start))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraph::CalculateRange(start,end) : sipCpp->CalculateRange(start,end));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(end);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_CalculateRange, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_GetXMLNodeName, "GetXMLNodeName() -> String\n"
"\n"
"Returns the XML node name of this object.");

extern "C" {static PyObject *meth_wxRichTextParagraph_GetXMLNodeName(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_GetXMLNodeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextParagraph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraph, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxRichTextParagraph::GetXMLNodeName() : sipCpp->GetXMLNodeName()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_GetXMLNodeName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_GetLines, "GetLines() -> RichTextLineList\n"
"\n"
"Returns the cached lines.");

extern "C" {static PyObject *meth_wxRichTextParagraph_GetLines(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_GetLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextParagraph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraph, &sipCpp))
        {
             ::wxRichTextLineList*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetLines();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextLineList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_GetLines, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_Copy, "Copy(obj)\n"
"\n"
"Copies the object.");

extern "C" {static PyObject *meth_wxRichTextParagraph_Copy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_Copy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextParagraph* obj;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, sipType_wxRichTextParagraph, &obj))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Copy(*obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_Copy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_Clone, "Clone() -> RichTextObject\n"
"\n"
"Clones the object.");

extern "C" {static PyObject *meth_wxRichTextParagraph_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextParagraph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraph, &sipCpp))
        {
             ::wxRichTextObject*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraph::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_Clone, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_ClearLines, "ClearLines()\n"
"\n"
"Clears the cached lines.");

extern "C" {static PyObject *meth_wxRichTextParagraph_ClearLines(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_ClearLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextParagraph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraph, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearLines();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_ClearLines, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_ApplyParagraphStyle, "ApplyParagraphStyle(line, attr, rect, dc)\n"
"\n"
"Applies paragraph styles such as centering to the wrapped lines.");

extern "C" {static PyObject *meth_wxRichTextParagraph_ApplyParagraphStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_ApplyParagraphStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextLine* line;
        const  ::wxRichTextAttr* attr;
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxDC* dc;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_line,
            sipName_attr,
            sipName_rect,
            sipName_dc,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1J9", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, sipType_wxRichTextLine, &line, sipType_wxRichTextAttr, &attr, sipType_wxRect, &rect, &rectState, sipType_wxDC, &dc))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraph::ApplyParagraphStyle(line,*attr,*rect,*dc) : sipCpp->ApplyParagraphStyle(line,*attr,*rect,*dc));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_ApplyParagraphStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_InsertText, "InsertText(pos, text) -> bool\n"
"\n"
"Inserts text at the given position.");

extern "C" {static PyObject *meth_wxRichTextParagraph_InsertText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_InsertText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long pos;
        const  ::wxString* text;
        int textState = 0;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ1", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, &pos, sipType_wxString,&text, &textState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraph::InsertText(pos,*text) : sipCpp->InsertText(pos,*text));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_InsertText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_SplitAt, "SplitAt(pos, previousObject=None) -> RichTextObject\n"
"\n"
"Splits an object at this position if necessary, and returns the\n"
"previous object, or NULL if inserting at the beginning.");

extern "C" {static PyObject *meth_wxRichTextParagraph_SplitAt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_SplitAt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long pos;
         ::wxRichTextObject* previousObject;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, &pos))
        {
             ::wxRichTextObject*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraph::SplitAt(pos,&previousObject) : sipCpp->SplitAt(pos,&previousObject));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            PyObject *sipResObj = sipConvertFromType(sipRes,sipType_wxRichTextObject,SIP_NULLPTR);
            return sipBuildResult(0,"(RD)",sipResObj,previousObject,sipType_wxRichTextObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_SplitAt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_MoveToList, "MoveToList(obj, list)\n"
"\n"
"Moves content to a list from this point.");

extern "C" {static PyObject *meth_wxRichTextParagraph_MoveToList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_MoveToList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextObject* obj;
         ::wxRichTextObjectList_* list;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
            sipName_list,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, sipType_wxRichTextObject, &obj, sipType_wxRichTextObjectList_, &list))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraph::MoveToList(obj,*list) : sipCpp->MoveToList(obj,*list));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_MoveToList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_MoveFromList, "MoveFromList(list)\n"
"\n"
"Adds content back from a list.");

extern "C" {static PyObject *meth_wxRichTextParagraph_MoveFromList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_MoveFromList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextObjectList_* list;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_list,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, sipType_wxRichTextObjectList_, &list))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraph::MoveFromList(*list) : sipCpp->MoveFromList(*list));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_MoveFromList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_GetContiguousPlainText, "GetContiguousPlainText(text, range, fromStart=True) -> bool\n"
"\n"
"Returns the plain text searching from the start or end of the range.");

extern "C" {static PyObject *meth_wxRichTextParagraph_GetContiguousPlainText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_GetContiguousPlainText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxString* text;
        int textState = 0;
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        bool fromStart = 1;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
            sipName_range,
            sipName_fromStart,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1|b", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, sipType_wxString,&text, &textState, sipType_wxRichTextRange, &range, &rangeState, &fromStart))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetContiguousPlainText(*text,*range,fromStart);
            Py_END_ALLOW_THREADS
            sipReleaseType(text,sipType_wxString,textState);
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_GetContiguousPlainText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_FindWrapPosition, "FindWrapPosition(range, dc, context, availableSpace, wrapPosition, partialExtents) -> bool\n"
"\n"
"Finds a suitable wrap position.");

extern "C" {static PyObject *meth_wxRichTextParagraph_FindWrapPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_FindWrapPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        int availableSpace;
        long wrapPosition;
         ::wxArrayInt* partialExtents;
        int partialExtentsState = 0;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_dc,
            sipName_context,
            sipName_availableSpace,
            sipName_partialExtents,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9J9iJ0", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, &availableSpace, sipType_wxArrayInt,&partialExtents, &partialExtentsState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindWrapPosition(*range,*dc,*context,availableSpace,wrapPosition,partialExtents);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);
            sipReleaseType(partialExtents,sipType_wxArrayInt,partialExtentsState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bl)",sipRes,wrapPosition);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_FindWrapPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_FindObjectAtPosition, "FindObjectAtPosition(position) -> RichTextObject\n"
"\n"
"Finds the object at the given position.");

extern "C" {static PyObject *meth_wxRichTextParagraph_FindObjectAtPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_FindObjectAtPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long position;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_position,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, &position))
        {
             ::wxRichTextObject*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindObjectAtPosition(position);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_FindObjectAtPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_GetBulletText, "GetBulletText() -> String\n"
"\n"
"Returns the bullet text for this paragraph.");

extern "C" {static PyObject *meth_wxRichTextParagraph_GetBulletText(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_GetBulletText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextParagraph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraph, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetBulletText());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_GetBulletText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_AllocateLine, "AllocateLine(pos) -> RichTextLine\n"
"\n"
"Allocates or reuses a line object.");

extern "C" {static PyObject *meth_wxRichTextParagraph_AllocateLine(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_AllocateLine(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int pos;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, &pos))
        {
             ::wxRichTextLine*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AllocateLine(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextLine,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_AllocateLine, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_ClearUnusedLines, "ClearUnusedLines(lineCount) -> bool\n"
"\n"
"Clears remaining unused line objects, if any.");

extern "C" {static PyObject *meth_wxRichTextParagraph_ClearUnusedLines(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_ClearUnusedLines(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int lineCount;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_lineCount,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, &lineCount))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ClearUnusedLines(lineCount);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_ClearUnusedLines, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_GetCombinedAttributes, "GetCombinedAttributes(contentStyle, includingBoxAttr=False) -> RichTextAttr\n"
"GetCombinedAttributes(includingBoxAttr=False) -> RichTextAttr\n"
"\n"
"Returns combined attributes of the base style, paragraph style and\n"
"character style.\n"
"");

extern "C" {static PyObject *meth_wxRichTextParagraph_GetCombinedAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_GetCombinedAttributes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextAttr* contentStyle;
        bool includingBoxAttr = 0;
        const  ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_contentStyle,
            sipName_includingBoxAttr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|b", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, sipType_wxRichTextAttr, &contentStyle, &includingBoxAttr))
        {
             ::wxRichTextAttr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRichTextAttr(sipCpp->GetCombinedAttributes(*contentStyle,includingBoxAttr));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextAttr,SIP_NULLPTR);
        }
    }

    {
        bool includingBoxAttr = 0;
        const  ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_includingBoxAttr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, &includingBoxAttr))
        {
             ::wxRichTextAttr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRichTextAttr(sipCpp->GetCombinedAttributes(includingBoxAttr));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextAttr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_GetCombinedAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_GetFirstLineBreakPosition, "GetFirstLineBreakPosition(pos) -> long\n"
"\n"
"Returns the first position from pos that has a line break character.");

extern "C" {static PyObject *meth_wxRichTextParagraph_GetFirstLineBreakPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_GetFirstLineBreakPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long pos;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, &pos))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFirstLineBreakPosition(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_GetFirstLineBreakPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_LayoutFloat, "LayoutFloat(dc, context, rect, parentRect, style, floatCollector)\n"
"\n"
"Lays out the floating objects.");

extern "C" {static PyObject *meth_wxRichTextParagraph_LayoutFloat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_LayoutFloat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRect* rect;
        int rectState = 0;
        const  ::wxRect* parentRect;
        int parentRectState = 0;
        int style;
         ::wxRichTextFloatCollector* floatCollector;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_rect,
            sipName_parentRect,
            sipName_style,
            sipName_floatCollector,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J1J1iJ8", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRect, &rect, &rectState, sipType_wxRect, &parentRect, &parentRectState, &style, sipType_wxRichTextFloatCollector, &floatCollector))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->LayoutFloat(*dc,*context,*rect,*parentRect,style,floatCollector);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);
            sipReleaseType(const_cast< ::wxRect *>(parentRect),sipType_wxRect,parentRectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_LayoutFloat, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_GetImpactedByFloatingObjects, "GetImpactedByFloatingObjects() -> int\n"
"\n"
"Whether the paragraph is impacted by floating objects from above.");

extern "C" {static PyObject *meth_wxRichTextParagraph_GetImpactedByFloatingObjects(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_GetImpactedByFloatingObjects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextParagraph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraph, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetImpactedByFloatingObjects();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_GetImpactedByFloatingObjects, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_SetImpactedByFloatingObjects, "SetImpactedByFloatingObjects(i)\n"
"\n"
"Sets whether the paragraph is impacted by floating objects from above.");

extern "C" {static PyObject *meth_wxRichTextParagraph_SetImpactedByFloatingObjects(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_SetImpactedByFloatingObjects(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int i;
         ::wxRichTextParagraph *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextParagraph, &sipCpp, &i))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetImpactedByFloatingObjects(i);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_SetImpactedByFloatingObjects, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_InitDefaultTabs, "InitDefaultTabs()\n"
"\n"
"Creates a default tabstop array.");

extern "C" {static PyObject *meth_wxRichTextParagraph_InitDefaultTabs(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_InitDefaultTabs(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextParagraph::InitDefaultTabs();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_InitDefaultTabs, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_ClearDefaultTabs, "ClearDefaultTabs()\n"
"\n"
"Clears the default tabstop array.");

extern "C" {static PyObject *meth_wxRichTextParagraph_ClearDefaultTabs(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_ClearDefaultTabs(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextParagraph::ClearDefaultTabs();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_ClearDefaultTabs, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraph_GetDefaultTabs, "GetDefaultTabs() -> ArrayInt\n"
"\n"
"Returns the default tabstop array.");

extern "C" {static PyObject *meth_wxRichTextParagraph_GetDefaultTabs(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraph_GetDefaultTabs(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxArrayInt*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxArrayInt( ::wxRichTextParagraph::GetDefaultTabs());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxArrayInt,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraph, sipName_GetDefaultTabs, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRichTextParagraph(void *, const sipTypeDef *);}
static void *cast_wxRichTextParagraph(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRichTextParagraph *sipCpp = reinterpret_cast< ::wxRichTextParagraph *>(sipCppV);

    if (targetType == sipType_wxRichTextCompositeObject)
        return static_cast< ::wxRichTextCompositeObject *>(sipCpp);

    if (targetType == sipType_wxRichTextObject)
        return static_cast< ::wxRichTextObject *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRichTextParagraph(void *, int);}
static void release_wxRichTextParagraph(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRichTextParagraph *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRichTextParagraph *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxRichTextParagraph(Py_ssize_t);}
static void *array_wxRichTextParagraph(Py_ssize_t sipNrElem)
{
    return new  ::wxRichTextParagraph[sipNrElem];
}


extern "C" {static void assign_wxRichTextParagraph(void *, SIP_SSIZE_T, void *);}
static void assign_wxRichTextParagraph(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxRichTextParagraph *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxRichTextParagraph *>(sipSrc);
}


extern "C" {static void *copy_wxRichTextParagraph(const void *, SIP_SSIZE_T);}
static void *copy_wxRichTextParagraph(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxRichTextParagraph(reinterpret_cast<const  ::wxRichTextParagraph *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxRichTextParagraph(sipSimpleWrapper *);}
static void dealloc_wxRichTextParagraph(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRichTextParagraph *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRichTextParagraph(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRichTextParagraph(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRichTextParagraph(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxRichTextParagraph *sipCpp = SIP_NULLPTR;

    {
         ::wxRichTextObject* parent = 0;
         ::wxRichTextAttr* style = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_style,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8J8", sipType_wxRichTextObject, &parent, sipType_wxRichTextAttr, &style))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextParagraph(parent,style);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxString* text;
        int textState = 0;
         ::wxRichTextObject* parent = 0;
         ::wxRichTextAttr* paraStyle = 0;
         ::wxRichTextAttr* charStyle = 0;

        static const char *sipKwdList[] = {
            sipName_text,
            sipName_parent,
            sipName_paraStyle,
            sipName_charStyle,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J8J8J8", sipType_wxString,&text, &textState, sipType_wxRichTextObject, &parent, sipType_wxRichTextAttr, &paraStyle, sipType_wxRichTextAttr, &charStyle))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextParagraph(*text,parent,paraStyle,charStyle);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxRichTextParagraph* obj;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_wxRichTextParagraph, &obj))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextParagraph(*obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRichTextParagraph[] = {{12, 255, 1}};


static PyMethodDef methods_wxRichTextParagraph[] = {
    {SIP_MLNAME_CAST(sipName_AllocateLine), SIP_MLMETH_CAST(meth_wxRichTextParagraph_AllocateLine), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_AllocateLine)},
    {SIP_MLNAME_CAST(sipName_ApplyParagraphStyle), SIP_MLMETH_CAST(meth_wxRichTextParagraph_ApplyParagraphStyle), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_ApplyParagraphStyle)},
    {SIP_MLNAME_CAST(sipName_CalculateRange), SIP_MLMETH_CAST(meth_wxRichTextParagraph_CalculateRange), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_CalculateRange)},
    {SIP_MLNAME_CAST(sipName_ClearDefaultTabs), meth_wxRichTextParagraph_ClearDefaultTabs, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_ClearDefaultTabs)},
    {SIP_MLNAME_CAST(sipName_ClearLines), meth_wxRichTextParagraph_ClearLines, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_ClearLines)},
    {SIP_MLNAME_CAST(sipName_ClearUnusedLines), SIP_MLMETH_CAST(meth_wxRichTextParagraph_ClearUnusedLines), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_ClearUnusedLines)},
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxRichTextParagraph_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_Clone)},
    {SIP_MLNAME_CAST(sipName_Copy), SIP_MLMETH_CAST(meth_wxRichTextParagraph_Copy), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_Copy)},
    {SIP_MLNAME_CAST(sipName_Draw), SIP_MLMETH_CAST(meth_wxRichTextParagraph_Draw), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_Draw)},
    {SIP_MLNAME_CAST(sipName_FindObjectAtPosition), SIP_MLMETH_CAST(meth_wxRichTextParagraph_FindObjectAtPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_FindObjectAtPosition)},
    {SIP_MLNAME_CAST(sipName_FindPosition), SIP_MLMETH_CAST(meth_wxRichTextParagraph_FindPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_FindPosition)},
    {SIP_MLNAME_CAST(sipName_FindWrapPosition), SIP_MLMETH_CAST(meth_wxRichTextParagraph_FindWrapPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_FindWrapPosition)},
    {SIP_MLNAME_CAST(sipName_GetBulletText), meth_wxRichTextParagraph_GetBulletText, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_GetBulletText)},
    {SIP_MLNAME_CAST(sipName_GetCombinedAttributes), SIP_MLMETH_CAST(meth_wxRichTextParagraph_GetCombinedAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_GetCombinedAttributes)},
    {SIP_MLNAME_CAST(sipName_GetContiguousPlainText), SIP_MLMETH_CAST(meth_wxRichTextParagraph_GetContiguousPlainText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_GetContiguousPlainText)},
    {SIP_MLNAME_CAST(sipName_GetDefaultTabs), meth_wxRichTextParagraph_GetDefaultTabs, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_GetDefaultTabs)},
    {SIP_MLNAME_CAST(sipName_GetFirstLineBreakPosition), SIP_MLMETH_CAST(meth_wxRichTextParagraph_GetFirstLineBreakPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_GetFirstLineBreakPosition)},
    {SIP_MLNAME_CAST(sipName_GetImpactedByFloatingObjects), meth_wxRichTextParagraph_GetImpactedByFloatingObjects, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_GetImpactedByFloatingObjects)},
    {SIP_MLNAME_CAST(sipName_GetLines), meth_wxRichTextParagraph_GetLines, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_GetLines)},
    {SIP_MLNAME_CAST(sipName_GetRangeSize), SIP_MLMETH_CAST(meth_wxRichTextParagraph_GetRangeSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_GetRangeSize)},
    {SIP_MLNAME_CAST(sipName_GetXMLNodeName), meth_wxRichTextParagraph_GetXMLNodeName, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_GetXMLNodeName)},
    {SIP_MLNAME_CAST(sipName_HitTest), SIP_MLMETH_CAST(meth_wxRichTextParagraph_HitTest), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_HitTest)},
    {SIP_MLNAME_CAST(sipName_Init), meth_wxRichTextParagraph_Init, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_Init)},
    {SIP_MLNAME_CAST(sipName_InitDefaultTabs), meth_wxRichTextParagraph_InitDefaultTabs, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_InitDefaultTabs)},
    {SIP_MLNAME_CAST(sipName_InsertText), SIP_MLMETH_CAST(meth_wxRichTextParagraph_InsertText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_InsertText)},
    {SIP_MLNAME_CAST(sipName_Layout), SIP_MLMETH_CAST(meth_wxRichTextParagraph_Layout), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_Layout)},
    {SIP_MLNAME_CAST(sipName_LayoutFloat), SIP_MLMETH_CAST(meth_wxRichTextParagraph_LayoutFloat), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_LayoutFloat)},
    {SIP_MLNAME_CAST(sipName_MoveFromList), SIP_MLMETH_CAST(meth_wxRichTextParagraph_MoveFromList), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_MoveFromList)},
    {SIP_MLNAME_CAST(sipName_MoveToList), SIP_MLMETH_CAST(meth_wxRichTextParagraph_MoveToList), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_MoveToList)},
    {SIP_MLNAME_CAST(sipName_SetImpactedByFloatingObjects), SIP_MLMETH_CAST(meth_wxRichTextParagraph_SetImpactedByFloatingObjects), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_SetImpactedByFloatingObjects)},
    {SIP_MLNAME_CAST(sipName_SplitAt), SIP_MLMETH_CAST(meth_wxRichTextParagraph_SplitAt), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextParagraph_SplitAt)}
};

sipVariableDef variables_wxRichTextParagraph[] = {
    {PropertyVariable, sipName_XMLNodeName, &methods_wxRichTextParagraph[20], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Lines, &methods_wxRichTextParagraph[18], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ImpactedByFloatingObjects, &methods_wxRichTextParagraph[17], &methods_wxRichTextParagraph[29], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CombinedAttributes, &methods_wxRichTextParagraph[13], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BulletText, &methods_wxRichTextParagraph[12], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxRichTextParagraph, "RichTextParagraph(parent=None, style=None)\n"
"RichTextParagraph(text, parent=None, paraStyle=None, charStyle=None)\n"
"RichTextParagraph(obj)\n"
"\n"
"This object represents a single paragraph containing various objects\n"
"such as text content, images, and further paragraph layout objects.");


sipClassTypeDef sipTypeDef__richtext_wxRichTextParagraph = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRichTextParagraph,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_RichTextParagraph,
        {0, 0, 1},
        31, methods_wxRichTextParagraph,
        0, SIP_NULLPTR,
        5, variables_wxRichTextParagraph,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxRichTextParagraph,
    -1,
    -1,
    supers_wxRichTextParagraph,
    SIP_NULLPTR,
    init_type_wxRichTextParagraph,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxRichTextParagraph,
    assign_wxRichTextParagraph,
    array_wxRichTextParagraph,
    copy_wxRichTextParagraph,
    release_wxRichTextParagraph,
    cast_wxRichTextParagraph,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
