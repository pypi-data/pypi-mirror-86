/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_html.h"

        #include <wx/html/htmlcell.h>

        #include <wx/cursor.h>
        #include <wx/html/htmlwin.h>
        #include <wx/dc.h>
        #include <wx/html/htmlcell.h>
        #include <wx/html/htmltag.h>
        #include <wx/colour.h>
        #include <wx/html/htmlcell.h>
        #include <wx/gdicmn.h>
        #include <wx/html/htmlcell.h>
        #include <wx/html/htmlcell.h>
        #include <wx/event.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxHtmlContainerCell : public  ::wxHtmlContainerCell
{
public:
    sipwxHtmlContainerCell( ::wxHtmlContainerCell*);
    virtual ~sipwxHtmlContainerCell();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool AdjustPagebreak(int*,int) const SIP_OVERRIDE;
    void Draw( ::wxDC&,int,int,int,int, ::wxHtmlRenderingInfo&) SIP_OVERRIDE;
    void DrawInvisible( ::wxDC&,int,int, ::wxHtmlRenderingInfo&) SIP_OVERRIDE;
    const  ::wxHtmlCell* Find(int,const void*) const SIP_OVERRIDE;
     ::wxHtmlCell* FindCellByPos( ::wxCoord, ::wxCoord,uint) const SIP_OVERRIDE;
     ::wxHtmlCell* GetFirstChild() const SIP_OVERRIDE;
     ::wxHtmlLinkInfo* GetLink(int,int) const SIP_OVERRIDE;
     ::wxCursor GetMouseCursor( ::wxHtmlWindowInterface*) const SIP_OVERRIDE;
     ::wxCursor GetMouseCursorAt( ::wxHtmlWindowInterface*,const  ::wxPoint&) const SIP_OVERRIDE;
    void Layout(int) SIP_OVERRIDE;
    bool ProcessMouseClick( ::wxHtmlWindowInterface*,const  ::wxPoint&,const  ::wxMouseEvent&) SIP_OVERRIDE;
    void SetPos(int,int) SIP_OVERRIDE;
     ::wxString ConvertToText( ::wxHtmlSelection*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxHtmlContainerCell(const sipwxHtmlContainerCell &);
    sipwxHtmlContainerCell &operator = (const sipwxHtmlContainerCell &);

    char sipPyMethods[13];
};

sipwxHtmlContainerCell::sipwxHtmlContainerCell( ::wxHtmlContainerCell*parent):  ::wxHtmlContainerCell(parent), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHtmlContainerCell::~sipwxHtmlContainerCell()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxHtmlContainerCell::AdjustPagebreak(int*pagebreak,int pageHeight) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_AdjustPagebreak);

    if (!sipMeth)
        return  ::wxHtmlContainerCell::AdjustPagebreak(pagebreak,pageHeight);

    extern bool sipVH__html_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int);

    return sipVH__html_1(sipGILState, 0, sipPySelf, sipMeth, pagebreak, pageHeight);
}

void sipwxHtmlContainerCell::Draw( ::wxDC& dc,int x,int y,int view_y1,int view_y2, ::wxHtmlRenderingInfo& info)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_Draw);

    if (!sipMeth)
    {
         ::wxHtmlContainerCell::Draw(dc,x,y,view_y1,view_y2,info);
        return;
    }

    extern void sipVH__html_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&,int,int,int,int, ::wxHtmlRenderingInfo&);

    sipVH__html_2(sipGILState, 0, sipPySelf, sipMeth, dc, x, y, view_y1, view_y2, info);
}

void sipwxHtmlContainerCell::DrawInvisible( ::wxDC& dc,int x,int y, ::wxHtmlRenderingInfo& info)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_DrawInvisible);

    if (!sipMeth)
    {
         ::wxHtmlContainerCell::DrawInvisible(dc,x,y,info);
        return;
    }

    extern void sipVH__html_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&,int,int, ::wxHtmlRenderingInfo&);

    sipVH__html_3(sipGILState, 0, sipPySelf, sipMeth, dc, x, y, info);
}

const  ::wxHtmlCell* sipwxHtmlContainerCell::Find(int condition,const void*param) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_Find);

    if (!sipMeth)
        return  ::wxHtmlContainerCell::Find(condition,param);

    extern const  ::wxHtmlCell* sipVH__html_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const void*);

    return sipVH__html_4(sipGILState, 0, sipPySelf, sipMeth, condition, param);
}

 ::wxHtmlCell* sipwxHtmlContainerCell::FindCellByPos( ::wxCoord x, ::wxCoord y,uint flags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_FindCellByPos);

    if (!sipMeth)
        return  ::wxHtmlContainerCell::FindCellByPos(x,y,flags);

    extern  ::wxHtmlCell* sipVH__html_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxCoord, ::wxCoord,uint);

    return sipVH__html_5(sipGILState, 0, sipPySelf, sipMeth, x, y, flags);
}

 ::wxHtmlCell* sipwxHtmlContainerCell::GetFirstChild() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_GetFirstChild);

    if (!sipMeth)
        return  ::wxHtmlContainerCell::GetFirstChild();

    extern  ::wxHtmlCell* sipVH__html_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_6(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxHtmlLinkInfo* sipwxHtmlContainerCell::GetLink(int x,int y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_GetLink);

    if (!sipMeth)
        return  ::wxHtmlContainerCell::GetLink(x,y);

    extern  ::wxHtmlLinkInfo* sipVH__html_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__html_7(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

 ::wxCursor sipwxHtmlContainerCell::GetMouseCursor( ::wxHtmlWindowInterface*window) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_GetMouseCursor);

    if (!sipMeth)
        return  ::wxHtmlContainerCell::GetMouseCursor(window);

    extern  ::wxCursor sipVH__html_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlWindowInterface*);

    return sipVH__html_8(sipGILState, 0, sipPySelf, sipMeth, window);
}

 ::wxCursor sipwxHtmlContainerCell::GetMouseCursorAt( ::wxHtmlWindowInterface*window,const  ::wxPoint& rePos) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_GetMouseCursorAt);

    if (!sipMeth)
        return  ::wxHtmlContainerCell::GetMouseCursorAt(window,rePos);

    extern  ::wxCursor sipVH__html_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlWindowInterface*,const  ::wxPoint&);

    return sipVH__html_9(sipGILState, 0, sipPySelf, sipMeth, window, rePos);
}

void sipwxHtmlContainerCell::Layout(int w)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_Layout);

    if (!sipMeth)
    {
         ::wxHtmlContainerCell::Layout(w);
        return;
    }

    extern void sipVH__html_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__html_10(sipGILState, 0, sipPySelf, sipMeth, w);
}

bool sipwxHtmlContainerCell::ProcessMouseClick( ::wxHtmlWindowInterface*window,const  ::wxPoint& pos,const  ::wxMouseEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_ProcessMouseClick);

    if (!sipMeth)
        return  ::wxHtmlContainerCell::ProcessMouseClick(window,pos,event);

    extern bool sipVH__html_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlWindowInterface*,const  ::wxPoint&,const  ::wxMouseEvent&);

    return sipVH__html_11(sipGILState, 0, sipPySelf, sipMeth, window, pos, event);
}

void sipwxHtmlContainerCell::SetPos(int x,int y)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_SetPos);

    if (!sipMeth)
    {
         ::wxHtmlContainerCell::SetPos(x,y);
        return;
    }

    extern void sipVH__html_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__html_12(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

 ::wxString sipwxHtmlContainerCell::ConvertToText( ::wxHtmlSelection*sel) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_ConvertToText);

    if (!sipMeth)
        return  ::wxHtmlContainerCell::ConvertToText(sel);

    extern  ::wxString sipVH__html_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlSelection*);

    return sipVH__html_13(sipGILState, 0, sipPySelf, sipMeth, sel);
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_Detach, "Detach(cell)\n"
"\n"
"Detach a child cell.");

extern "C" {static PyObject *meth_wxHtmlContainerCell_Detach(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_Detach(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxHtmlCell* cell;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cell,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, sipType_wxHtmlCell, &cell))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Detach(cell);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_Detach, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_GetAlignHor, "GetAlignHor() -> int\n"
"\n"
"Returns container's horizontal alignment.");

extern "C" {static PyObject *meth_wxHtmlContainerCell_GetAlignHor(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_GetAlignHor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxHtmlContainerCell *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetAlignHor();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_GetAlignHor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_GetAlignVer, "GetAlignVer() -> int\n"
"\n"
"Returns container's vertical alignment.");

extern "C" {static PyObject *meth_wxHtmlContainerCell_GetAlignVer(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_GetAlignVer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxHtmlContainerCell *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetAlignVer();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_GetAlignVer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_GetBackgroundColour, "GetBackgroundColour() -> wx.Colour\n"
"\n"
"Returns the background colour of the container or wxNullColour if no\n"
"background colour is set.");

extern "C" {static PyObject *meth_wxHtmlContainerCell_GetBackgroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_GetBackgroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxHtmlContainerCell *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetBackgroundColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_GetBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_GetIndent, "GetIndent(ind) -> int\n"
"\n"
"Returns the indentation.");

extern "C" {static PyObject *meth_wxHtmlContainerCell_GetIndent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_GetIndent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int ind;
        const  ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ind,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, &ind))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetIndent(ind);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_GetIndent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_GetIndentUnits, "GetIndentUnits(ind) -> int\n"
"\n"
"Returns the units of indentation for ind where ind is one of the\n"
"wxHTML_INDENT_* constants.");

extern "C" {static PyObject *meth_wxHtmlContainerCell_GetIndentUnits(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_GetIndentUnits(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int ind;
        const  ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ind,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, &ind))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetIndentUnits(ind);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_GetIndentUnits, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_InsertCell, "InsertCell(cell)\n"
"\n"
"Inserts a new cell into the container.");

extern "C" {static PyObject *meth_wxHtmlContainerCell_InsertCell(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_InsertCell(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxHtmlCell* cell;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cell,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, sipType_wxHtmlCell, &cell))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->InsertCell(cell);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_InsertCell, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_SetAlign, "SetAlign(tag)\n"
"\n"
"Sets the container's alignment (both horizontal and vertical)\n"
"according to the values stored in tag.");

extern "C" {static PyObject *meth_wxHtmlContainerCell_SetAlign(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_SetAlign(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxHtmlTag* tag;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tag,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, sipType_wxHtmlTag, &tag))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetAlign(*tag);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_SetAlign, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_SetAlignHor, "SetAlignHor(al)\n"
"\n"
"Sets the container's horizontal alignment.");

extern "C" {static PyObject *meth_wxHtmlContainerCell_SetAlignHor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_SetAlignHor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int al;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_al,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, &al))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetAlignHor(al);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_SetAlignHor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_SetAlignVer, "SetAlignVer(al)\n"
"\n"
"Sets the container's vertical alignment.");

extern "C" {static PyObject *meth_wxHtmlContainerCell_SetAlignVer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_SetAlignVer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int al;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_al,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, &al))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetAlignVer(al);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_SetAlignVer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_SetBackgroundColour, "SetBackgroundColour(clr)\n"
"\n"
"Sets the background colour for this container.");

extern "C" {static PyObject *meth_wxHtmlContainerCell_SetBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_SetBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* clr;
        int clrState = 0;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_clr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, sipType_wxColour, &clr, &clrState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBackgroundColour(*clr);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(clr),sipType_wxColour,clrState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_SetBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_SetBorder, "SetBorder(clr1, clr2, border=1)\n"
"\n"
"Sets the border (frame) colours.");

extern "C" {static PyObject *meth_wxHtmlContainerCell_SetBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_SetBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* clr1;
        int clr1State = 0;
        const  ::wxColour* clr2;
        int clr2State = 0;
        int border = 1;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_clr1,
            sipName_clr2,
            sipName_border,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1|i", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, sipType_wxColour, &clr1, &clr1State, sipType_wxColour, &clr2, &clr2State, &border))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBorder(*clr1,*clr2,border);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(clr1),sipType_wxColour,clr1State);
            sipReleaseType(const_cast< ::wxColour *>(clr2),sipType_wxColour,clr2State);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_SetBorder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_SetIndent, "SetIndent(i, what, units=HTML_UNITS_PIXELS)\n"
"\n"
"Sets the indentation (free space between borders of container and\n"
"subcells).");

extern "C" {static PyObject *meth_wxHtmlContainerCell_SetIndent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_SetIndent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int i;
        int what;
        int units = wxHTML_UNITS_PIXELS;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
            sipName_what,
            sipName_units,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|i", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, &i, &what, &units))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetIndent(i,what,units);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_SetIndent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_SetMinHeight, "SetMinHeight(h, align=HTML_ALIGN_TOP)\n"
"\n"
"Sets minimal height of the container.");

extern "C" {static PyObject *meth_wxHtmlContainerCell_SetMinHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_SetMinHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int h;
        int align = wxHTML_ALIGN_TOP;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_h,
            sipName_align,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, &h, &align))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMinHeight(h,align);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_SetMinHeight, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_SetWidthFloat, "SetWidthFloat(w, units)\n"
"SetWidthFloat(tag, pixel_scale=1.0)\n"
"\n"
"Sets floating width adjustment.\n"
"");

extern "C" {static PyObject *meth_wxHtmlContainerCell_SetWidthFloat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_SetWidthFloat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int w;
        int units;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_w,
            sipName_units,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, &w, &units))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWidthFloat(w,units);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::wxHtmlTag* tag;
        double pixel_scale = 1;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tag,
            sipName_pixel_scale,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|d", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, sipType_wxHtmlTag, &tag, &pixel_scale))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWidthFloat(*tag,pixel_scale);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_SetWidthFloat, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_Draw, "Draw(self, dc: DC, x: int, y: int, view_y1: int, view_y2: int, info: HtmlRenderingInfo)");

extern "C" {static PyObject *meth_wxHtmlContainerCell_Draw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_Draw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
        int x;
        int y;
        int view_y1;
        int view_y2;
         ::wxHtmlRenderingInfo* info;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_x,
            sipName_y,
            sipName_view_y1,
            sipName_view_y2,
            sipName_info,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iiiiJ9", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, sipType_wxDC, &dc, &x, &y, &view_y1, &view_y2, sipType_wxHtmlRenderingInfo, &info))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlContainerCell::Draw(*dc,x,y,view_y1,view_y2,*info) : sipCpp->Draw(*dc,x,y,view_y1,view_y2,*info));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_Draw, doc_wxHtmlContainerCell_Draw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_DrawInvisible, "DrawInvisible(self, dc: DC, x: int, y: int, info: HtmlRenderingInfo)");

extern "C" {static PyObject *meth_wxHtmlContainerCell_DrawInvisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_DrawInvisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
        int x;
        int y;
         ::wxHtmlRenderingInfo* info;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_x,
            sipName_y,
            sipName_info,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iiJ9", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, sipType_wxDC, &dc, &x, &y, sipType_wxHtmlRenderingInfo, &info))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlContainerCell::DrawInvisible(*dc,x,y,*info) : sipCpp->DrawInvisible(*dc,x,y,*info));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_DrawInvisible, doc_wxHtmlContainerCell_DrawInvisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_GetMouseCursor, "GetMouseCursor(self, window: HtmlWindowInterface) -> Cursor");

extern "C" {static PyObject *meth_wxHtmlContainerCell_GetMouseCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_GetMouseCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWindowInterface* window;
        const  ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, sipType_wxHtmlWindowInterface, &window))
        {
             ::wxCursor*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxCursor((sipSelfWasArg ? sipCpp-> ::wxHtmlContainerCell::GetMouseCursor(window) : sipCpp->GetMouseCursor(window)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxCursor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_GetMouseCursor, doc_wxHtmlContainerCell_GetMouseCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlContainerCell_Layout, "Layout(self, w: int)");

extern "C" {static PyObject *meth_wxHtmlContainerCell_Layout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlContainerCell_Layout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int w;
         ::wxHtmlContainerCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_w,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxHtmlContainerCell, &sipCpp, &w))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlContainerCell::Layout(w) : sipCpp->Layout(w));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlContainerCell, sipName_Layout, doc_wxHtmlContainerCell_Layout);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxHtmlContainerCell(void *, const sipTypeDef *);}
static void *cast_wxHtmlContainerCell(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxHtmlContainerCell *sipCpp = reinterpret_cast< ::wxHtmlContainerCell *>(sipCppV);

    if (targetType == sipType_wxHtmlCell)
        return static_cast< ::wxHtmlCell *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxHtmlContainerCell(void *, int);}
static void release_wxHtmlContainerCell(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxHtmlContainerCell *>(sipCppV);
    else
        delete reinterpret_cast< ::wxHtmlContainerCell *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxHtmlContainerCell(sipSimpleWrapper *);}
static void dealloc_wxHtmlContainerCell(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxHtmlContainerCell *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxHtmlContainerCell(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxHtmlContainerCell(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxHtmlContainerCell(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxHtmlContainerCell *sipCpp = SIP_NULLPTR;

    {
         ::wxHtmlContainerCell* parent;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8", sipType_wxHtmlContainerCell, &parent))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHtmlContainerCell(parent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxHtmlContainerCell[] = {{2, 255, 1}};


static PyMethodDef methods_wxHtmlContainerCell[] = {
    {SIP_MLNAME_CAST(sipName_Detach), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_Detach), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_Detach)},
    {SIP_MLNAME_CAST(sipName_Draw), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_Draw), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_Draw)},
    {SIP_MLNAME_CAST(sipName_DrawInvisible), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_DrawInvisible), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_DrawInvisible)},
    {SIP_MLNAME_CAST(sipName_GetAlignHor), meth_wxHtmlContainerCell_GetAlignHor, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_GetAlignHor)},
    {SIP_MLNAME_CAST(sipName_GetAlignVer), meth_wxHtmlContainerCell_GetAlignVer, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_GetAlignVer)},
    {SIP_MLNAME_CAST(sipName_GetBackgroundColour), meth_wxHtmlContainerCell_GetBackgroundColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_GetBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_GetIndent), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_GetIndent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_GetIndent)},
    {SIP_MLNAME_CAST(sipName_GetIndentUnits), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_GetIndentUnits), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_GetIndentUnits)},
    {SIP_MLNAME_CAST(sipName_GetMouseCursor), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_GetMouseCursor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_GetMouseCursor)},
    {SIP_MLNAME_CAST(sipName_InsertCell), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_InsertCell), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_InsertCell)},
    {SIP_MLNAME_CAST(sipName_Layout), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_Layout), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_Layout)},
    {SIP_MLNAME_CAST(sipName_SetAlign), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_SetAlign), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_SetAlign)},
    {SIP_MLNAME_CAST(sipName_SetAlignHor), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_SetAlignHor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_SetAlignHor)},
    {SIP_MLNAME_CAST(sipName_SetAlignVer), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_SetAlignVer), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_SetAlignVer)},
    {SIP_MLNAME_CAST(sipName_SetBackgroundColour), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_SetBackgroundColour), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_SetBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_SetBorder), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_SetBorder), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_SetBorder)},
    {SIP_MLNAME_CAST(sipName_SetIndent), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_SetIndent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_SetIndent)},
    {SIP_MLNAME_CAST(sipName_SetMinHeight), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_SetMinHeight), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_SetMinHeight)},
    {SIP_MLNAME_CAST(sipName_SetWidthFloat), SIP_MLMETH_CAST(meth_wxHtmlContainerCell_SetWidthFloat), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlContainerCell_SetWidthFloat)}
};

sipVariableDef variables_wxHtmlContainerCell[] = {
    {PropertyVariable, sipName_BackgroundColour, &methods_wxHtmlContainerCell[5], &methods_wxHtmlContainerCell[14], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_AlignVer, &methods_wxHtmlContainerCell[4], &methods_wxHtmlContainerCell[13], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_AlignHor, &methods_wxHtmlContainerCell[3], &methods_wxHtmlContainerCell[12], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxHtmlContainerCell, "HtmlContainerCell(parent)\n"
"\n"
"The wxHtmlContainerCell class is an implementation of a cell that may\n"
"contain more cells in it.");


sipClassTypeDef sipTypeDef__html_wxHtmlContainerCell = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxHtmlContainerCell,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_HtmlContainerCell,
        {0, 0, 1},
        19, methods_wxHtmlContainerCell,
        0, SIP_NULLPTR,
        3, variables_wxHtmlContainerCell,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxHtmlContainerCell,
    -1,
    -1,
    supers_wxHtmlContainerCell,
    SIP_NULLPTR,
    init_type_wxHtmlContainerCell,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxHtmlContainerCell,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxHtmlContainerCell,
    cast_wxHtmlContainerCell,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
