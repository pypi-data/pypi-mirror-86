/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/toolbar.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/toolbar.h>
        #include <wx/bitmap.h>
        #include <wx/control.h>
        #include <wx/menu.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    wxPyUserData* _wxToolBar_GetToolClientData(const wxToolBar* self, int toolId)
    {
        return dynamic_cast<wxPyUserData*>(self->GetToolClientData(toolId));
    }


class sipwxToolBar : public  ::wxToolBar
{
public:
    sipwxToolBar();
    sipwxToolBar( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxString&);
    virtual ~sipwxToolBar();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
     ::wxSize DoGetBorderSize() const SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxToolBar(const sipwxToolBar &);
    sipwxToolBar &operator = (const sipwxToolBar &);

    char sipPyMethods[40];
};

sipwxToolBar::sipwxToolBar():  ::wxToolBar(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxToolBar::sipwxToolBar( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxString& name):  ::wxToolBar(parent,id,pos,size,style,name), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxToolBar::~sipwxToolBar()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxSize sipwxToolBar::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxToolBar::DoGetBestClientSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxToolBar::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxToolBar::DoGetBestSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxToolBar::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxToolBar::DoThaw();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxToolBar::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxToolBar::DoFreeze();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxToolBar::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxToolBar::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__core_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_132(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxToolBar::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxToolBar::GetDefaultBorder();

    extern  ::wxBorder sipVH__core_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_132(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxToolBar::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxToolBar::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__core_131(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__core_131(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxToolBar::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxToolBar::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__core_130(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__core_130(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

 ::wxSize sipwxToolBar::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxToolBar::DoGetBorderSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxToolBar::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxToolBar::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__core_129(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__core_129(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxToolBar::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxToolBar::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__core_128(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__core_128(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxToolBar::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxToolBar::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__core_127(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__core_127(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxToolBar::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxToolBar::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxToolBar::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxToolBar::DoGetSize(width,height);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxToolBar::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxToolBar::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxToolBar::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxToolBar::DoEnable(enable);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxToolBar::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxToolBar::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__core_125(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_125(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxToolBar::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxToolBar::OnInternalIdle();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxToolBar::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxToolBar::InitDialog();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxToolBar::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxToolBar::InheritAttributes();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxToolBar::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_Destroy);

    if (!sipMeth)
        return  ::wxToolBar::Destroy();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxToolBar::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::wxToolBar::Validate();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxToolBar::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxToolBar::TransferDataToWindow();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxToolBar::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxToolBar::TransferDataFromWindow();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxToolBar::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxToolBar::SetValidator(validator);
        return;
    }

    extern void sipVH__core_124(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__core_124(sipGILState, 0, sipPySelf, sipMeth, validator);
}

 ::wxValidator* sipwxToolBar::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxToolBar::GetValidator();

    extern  ::wxValidator* sipVH__core_123(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_123(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxToolBar::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,SIP_NULLPTR,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxToolBar::ShouldInheritColours();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxToolBar::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxToolBar::HasTransparentBackground();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxToolBar::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,SIP_NULLPTR,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxToolBar::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__core_122(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_122(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxToolBar::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxToolBar::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__core_121(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__core_121(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxToolBar::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxToolBar::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

void sipwxToolBar::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxToolBar::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxToolBar::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxToolBar::AcceptsFocusRecursively();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxToolBar::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxToolBar::AcceptsFocusFromKeyboard();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxToolBar::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxToolBar::AcceptsFocus();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxToolBar::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxToolBar::TryAfter(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxToolBar::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxToolBar::TryBefore(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxToolBar::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxToolBar::ProcessEvent(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxToolBar::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxToolBar::AddChild(child);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxToolBar::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxToolBar::RemoveChild(child);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxToolBar::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxToolBar::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxToolBar::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxToolBar::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxToolBar::DoEnable(enable) : DoEnable(enable));
}

void sipwxToolBar::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxToolBar::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxToolBar::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxToolBar::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxToolBar::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxToolBar::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxToolBar::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxToolBar::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxToolBar::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxToolBar::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxToolBar::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxToolBar::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxToolBar::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxToolBar::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxToolBar::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxToolBar::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxToolBar::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxToolBar::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxToolBar::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxToolBar::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxToolBar::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxToolBar::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxToolBar::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxToolBar::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxToolBar::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxToolBar::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxToolBar::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxToolBar::DoFreeze() : DoFreeze());
}

void sipwxToolBar::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxToolBar::DoThaw() : DoThaw());
}

bool sipwxToolBar::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxToolBar::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxToolBar::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxToolBar::TryBefore(event) : TryBefore(event));
}

bool sipwxToolBar::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxToolBar::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxToolBar_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxToolBar_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_AddTool, "AddTool(tool) -> ToolBarToolBase\n"
"AddTool(toolId, label, bitmap, shortHelp=EmptyString, kind=ITEM_NORMAL) -> ToolBarToolBase\n"
"AddTool(toolId, label, bitmap, bmpDisabled, kind=ITEM_NORMAL, shortHelp=EmptyString, longHelp=EmptyString, clientData=None) -> ToolBarToolBase\n"
"\n"
"Adds a tool to the toolbar.\n"
"\n"
"");

extern "C" {static PyObject *meth_wxToolBar_AddTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_AddTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxToolBarToolBase* tool;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:", &sipSelf, sipType_wxToolBar, &sipCpp, sipType_wxToolBarToolBase, &tool))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddTool(tool);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    {
        int toolId;
        const  ::wxString* label;
        int labelState = 0;
        const  ::wxBitmap* bitmap;
        const  ::wxString& shortHelpdef = wxEmptyString;
        const  ::wxString* shortHelp = &shortHelpdef;
        int shortHelpState = 0;
         ::wxItemKind kind = wxITEM_NORMAL;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_label,
            sipName_bitmap,
            sipName_shortHelp,
            sipName_kind,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1J9|J1E", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId, sipType_wxString,&label, &labelState, sipType_wxBitmap, &bitmap, sipType_wxString,&shortHelp, &shortHelpState, sipType_wxItemKind, &kind))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddTool(toolId,*label,*bitmap,*shortHelp,kind);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);
            sipReleaseType(const_cast< ::wxString *>(shortHelp),sipType_wxString,shortHelpState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    {
        int toolId;
        const  ::wxString* label;
        int labelState = 0;
        const  ::wxBitmap* bitmap;
        const  ::wxBitmap* bmpDisabled;
         ::wxItemKind kind = wxITEM_NORMAL;
        const  ::wxString& shortHelpdef = wxEmptyString;
        const  ::wxString* shortHelp = &shortHelpdef;
        int shortHelpState = 0;
        const  ::wxString& longHelpdef = wxEmptyString;
        const  ::wxString* longHelp = &longHelpdef;
        int longHelpState = 0;
         ::wxPyUserData* clientData = 0;
        int clientDataState = 0;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_label,
            sipName_bitmap,
            sipName_bmpDisabled,
            sipName_kind,
            sipName_shortHelp,
            sipName_longHelp,
            sipName_clientData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1J9J9|EJ1J1J2", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId, sipType_wxString,&label, &labelState, sipType_wxBitmap, &bitmap, sipType_wxBitmap, &bmpDisabled, sipType_wxItemKind, &kind, sipType_wxString,&shortHelp, &shortHelpState, sipType_wxString,&longHelp, &longHelpState, sipType_wxPyUserData,&clientData, &clientDataState))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddTool(toolId,*label,*bitmap,*bmpDisabled,kind,*shortHelp,*longHelp,clientData);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);
            sipReleaseType(const_cast< ::wxString *>(shortHelp),sipType_wxString,shortHelpState);
            sipReleaseType(const_cast< ::wxString *>(longHelp),sipType_wxString,longHelpState);
            sipReleaseType(clientData,sipType_wxPyUserData,clientDataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_AddTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_InsertTool, "InsertTool(pos, toolId, label, bitmap, bmpDisabled=NullBitmap, kind=ITEM_NORMAL, shortHelp=EmptyString, longHelp=EmptyString, clientData=None) -> ToolBarToolBase\n"
"InsertTool(pos, tool) -> ToolBarToolBase\n"
"\n"
"Inserts the tool with the specified attributes into the toolbar at the\n"
"given position.\n"
"");

extern "C" {static PyObject *meth_wxToolBar_InsertTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_InsertTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t pos;
        int toolId;
        const  ::wxString* label;
        int labelState = 0;
        const  ::wxBitmap* bitmap;
        const  ::wxBitmap& bmpDisableddef = wxNullBitmap;
        const  ::wxBitmap* bmpDisabled = &bmpDisableddef;
         ::wxItemKind kind = wxITEM_NORMAL;
        const  ::wxString& shortHelpdef = wxEmptyString;
        const  ::wxString* shortHelp = &shortHelpdef;
        int shortHelpState = 0;
        const  ::wxString& longHelpdef = wxEmptyString;
        const  ::wxString* longHelp = &longHelpdef;
        int longHelpState = 0;
         ::wxPyUserData* clientData = 0;
        int clientDataState = 0;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_toolId,
            sipName_label,
            sipName_bitmap,
            sipName_bmpDisabled,
            sipName_kind,
            sipName_shortHelp,
            sipName_longHelp,
            sipName_clientData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=iJ1J9|J9EJ1J1J2", &sipSelf, sipType_wxToolBar, &sipCpp, &pos, &toolId, sipType_wxString,&label, &labelState, sipType_wxBitmap, &bitmap, sipType_wxBitmap, &bmpDisabled, sipType_wxItemKind, &kind, sipType_wxString,&shortHelp, &shortHelpState, sipType_wxString,&longHelp, &longHelpState, sipType_wxPyUserData,&clientData, &clientDataState))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertTool(pos,toolId,*label,*bitmap,*bmpDisabled,kind,*shortHelp,*longHelp,clientData);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);
            sipReleaseType(const_cast< ::wxString *>(shortHelp),sipType_wxString,shortHelpState);
            sipReleaseType(const_cast< ::wxString *>(longHelp),sipType_wxString,longHelpState);
            sipReleaseType(clientData,sipType_wxPyUserData,clientDataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    {
        size_t pos;
         ::wxToolBarToolBase* tool;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_tool,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=J:", &sipSelf, sipType_wxToolBar, &sipCpp, &pos, sipType_wxToolBarToolBase, &tool))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertTool(pos,tool);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_InsertTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_SetMargins, "SetMargins(x, y)\n"
"SetMargins(size)\n"
"\n"
"Set the values to be used as margins for the toolbar.\n"
"");

extern "C" {static PyObject *meth_wxToolBar_SetMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_SetMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int x;
        int y;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxToolBar, &sipCpp, &x, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMargins(x,y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::wxSize* size;
        int sizeState = 0;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxToolBar, &sipCpp, sipType_wxSize, &size, &sizeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMargins(*size);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_SetMargins, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_AddCheckTool, "AddCheckTool(toolId, label, bitmap1, bmpDisabled=NullBitmap, shortHelp=EmptyString, longHelp=EmptyString, clientData=None) -> ToolBarToolBase\n"
"\n"
"Adds a new check (or toggle) tool to the toolbar.");

extern "C" {static PyObject *meth_wxToolBar_AddCheckTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_AddCheckTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxString* label;
        int labelState = 0;
        const  ::wxBitmap* bitmap1;
        const  ::wxBitmap& bmpDisableddef = wxNullBitmap;
        const  ::wxBitmap* bmpDisabled = &bmpDisableddef;
        const  ::wxString& shortHelpdef = wxEmptyString;
        const  ::wxString* shortHelp = &shortHelpdef;
        int shortHelpState = 0;
        const  ::wxString& longHelpdef = wxEmptyString;
        const  ::wxString* longHelp = &longHelpdef;
        int longHelpState = 0;
         ::wxPyUserData* clientData = 0;
        int clientDataState = 0;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_label,
            sipName_bitmap1,
            sipName_bmpDisabled,
            sipName_shortHelp,
            sipName_longHelp,
            sipName_clientData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1J9|J9J1J1J2", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId, sipType_wxString,&label, &labelState, sipType_wxBitmap, &bitmap1, sipType_wxBitmap, &bmpDisabled, sipType_wxString,&shortHelp, &shortHelpState, sipType_wxString,&longHelp, &longHelpState, sipType_wxPyUserData,&clientData, &clientDataState))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddCheckTool(toolId,*label,*bitmap1,*bmpDisabled,*shortHelp,*longHelp,clientData);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);
            sipReleaseType(const_cast< ::wxString *>(shortHelp),sipType_wxString,shortHelpState);
            sipReleaseType(const_cast< ::wxString *>(longHelp),sipType_wxString,longHelpState);
            sipReleaseType(clientData,sipType_wxPyUserData,clientDataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_AddCheckTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_AddControl, "AddControl(control, label=EmptyString) -> ToolBarToolBase\n"
"\n"
"Adds any control to the toolbar, typically e.g. a wxComboBox.");

extern "C" {static PyObject *meth_wxToolBar_AddControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_AddControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxControl* control;
        const  ::wxString& labeldef = wxEmptyString;
        const  ::wxString* label = &labeldef;
        int labelState = 0;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_control,
            sipName_label,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|J1", &sipSelf, sipType_wxToolBar, &sipCpp, sipType_wxControl, &control, sipType_wxString,&label, &labelState))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddControl(control,*label);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_AddControl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_AddRadioTool, "AddRadioTool(toolId, label, bitmap1, bmpDisabled=NullBitmap, shortHelp=EmptyString, longHelp=EmptyString, clientData=None) -> ToolBarToolBase\n"
"\n"
"Adds a new radio tool to the toolbar.");

extern "C" {static PyObject *meth_wxToolBar_AddRadioTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_AddRadioTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxString* label;
        int labelState = 0;
        const  ::wxBitmap* bitmap1;
        const  ::wxBitmap& bmpDisableddef = wxNullBitmap;
        const  ::wxBitmap* bmpDisabled = &bmpDisableddef;
        const  ::wxString& shortHelpdef = wxEmptyString;
        const  ::wxString* shortHelp = &shortHelpdef;
        int shortHelpState = 0;
        const  ::wxString& longHelpdef = wxEmptyString;
        const  ::wxString* longHelp = &longHelpdef;
        int longHelpState = 0;
         ::wxPyUserData* clientData = 0;
        int clientDataState = 0;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_label,
            sipName_bitmap1,
            sipName_bmpDisabled,
            sipName_shortHelp,
            sipName_longHelp,
            sipName_clientData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1J9|J9J1J1J2", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId, sipType_wxString,&label, &labelState, sipType_wxBitmap, &bitmap1, sipType_wxBitmap, &bmpDisabled, sipType_wxString,&shortHelp, &shortHelpState, sipType_wxString,&longHelp, &longHelpState, sipType_wxPyUserData,&clientData, &clientDataState))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddRadioTool(toolId,*label,*bitmap1,*bmpDisabled,*shortHelp,*longHelp,clientData);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);
            sipReleaseType(const_cast< ::wxString *>(shortHelp),sipType_wxString,shortHelpState);
            sipReleaseType(const_cast< ::wxString *>(longHelp),sipType_wxString,longHelpState);
            sipReleaseType(clientData,sipType_wxPyUserData,clientDataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_AddRadioTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_AddSeparator, "AddSeparator() -> ToolBarToolBase\n"
"\n"
"Adds a separator for spacing groups of tools.");

extern "C" {static PyObject *meth_wxToolBar_AddSeparator(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_AddSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddSeparator();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_AddSeparator, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_AddStretchableSpace, "AddStretchableSpace() -> ToolBarToolBase\n"
"\n"
"Adds a stretchable space to the toolbar.");

extern "C" {static PyObject *meth_wxToolBar_AddStretchableSpace(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_AddStretchableSpace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddStretchableSpace();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_AddStretchableSpace, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_ClearTools, "ClearTools()\n"
"\n"
"Deletes all the tools in the toolbar.");

extern "C" {static PyObject *meth_wxToolBar_ClearTools(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_ClearTools(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearTools();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_ClearTools, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DeleteTool, "DeleteTool(toolId) -> bool\n"
"\n"
"Removes the specified tool from the toolbar and deletes it.");

extern "C" {static PyObject *meth_wxToolBar_DeleteTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DeleteTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteTool(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DeleteTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DeleteToolByPos, "DeleteToolByPos(pos) -> bool\n"
"\n"
"This function behaves like DeleteTool() but it deletes the tool at the\n"
"specified position and not the one with the given id.");

extern "C" {static PyObject *meth_wxToolBar_DeleteToolByPos(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DeleteToolByPos(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t pos;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=", &sipSelf, sipType_wxToolBar, &sipCpp, &pos))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteToolByPos(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DeleteToolByPos, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_EnableTool, "EnableTool(toolId, enable)\n"
"\n"
"Enables or disables the tool.");

extern "C" {static PyObject *meth_wxToolBar_EnableTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_EnableTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        bool enable;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bib", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnableTool(toolId,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_EnableTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_FindById, "FindById(id) -> ToolBarToolBase\n"
"\n"
"Returns a pointer to the tool identified by id or NULL if no\n"
"corresponding tool is found.");

extern "C" {static PyObject *meth_wxToolBar_FindById(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_FindById(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int id;
        const  ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxToolBar, &sipCpp, &id))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindById(id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_FindById, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_FindControl, "FindControl(id) -> Control\n"
"\n"
"Returns a pointer to the control identified by id or NULL if no\n"
"corresponding control is found.");

extern "C" {static PyObject *meth_wxToolBar_FindControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_FindControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int id;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxToolBar, &sipCpp, &id))
        {
             ::wxControl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindControl(id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxControl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_FindControl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_FindToolForPosition, "FindToolForPosition(x, y) -> ToolBarToolBase\n"
"\n"
"Finds a tool for the given mouse position.");

extern "C" {static PyObject *meth_wxToolBar_FindToolForPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_FindToolForPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxCoord x;
         ::wxCoord y;
        const  ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxToolBar, &sipCpp, &x, &y))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindToolForPosition(x,y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_FindToolForPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetMargins, "GetMargins() -> Size\n"
"\n"
"Returns the left/right and top/bottom margins, which are also used for\n"
"inter-toolspacing.");

extern "C" {static PyObject *meth_wxToolBar_GetMargins(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetMargins());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetMargins, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetToolBitmapSize, "GetToolBitmapSize() -> Size\n"
"\n"
"Returns the size of bitmap that the toolbar expects to have.");

extern "C" {static PyObject *meth_wxToolBar_GetToolBitmapSize(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetToolBitmapSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetToolBitmapSize());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetToolBitmapSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetToolByPos, "GetToolByPos(pos) -> ToolBarToolBase\n"
"\n"
"Returns a pointer to the tool at ordinal position pos.");

extern "C" {static PyObject *meth_wxToolBar_GetToolByPos(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetToolByPos(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int pos;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxToolBar, &sipCpp, &pos))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolByPos(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetToolByPos, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetToolClientData, "GetToolClientData(toolId) -> PyUserData\n"
"\n"
"Get any client data associated with the tool.");

extern "C" {static PyObject *meth_wxToolBar_GetToolClientData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetToolClientData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId))
        {
             ::wxPyUserData*sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxToolBar_GetToolClientData(sipCpp, toolId);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPyUserData,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetToolClientData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetToolEnabled, "GetToolEnabled(toolId) -> bool\n"
"\n"
"Called to determine whether a tool is enabled (responds to user\n"
"input).");

extern "C" {static PyObject *meth_wxToolBar_GetToolEnabled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetToolEnabled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolEnabled(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetToolEnabled, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetToolLongHelp, "GetToolLongHelp(toolId) -> String\n"
"\n"
"Returns the long help for the given tool.");

extern "C" {static PyObject *meth_wxToolBar_GetToolLongHelp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetToolLongHelp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetToolLongHelp(toolId));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetToolLongHelp, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetToolPacking, "GetToolPacking() -> int\n"
"\n"
"Returns the value used for packing tools.");

extern "C" {static PyObject *meth_wxToolBar_GetToolPacking(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetToolPacking(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolPacking();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetToolPacking, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetToolPos, "GetToolPos(toolId) -> int\n"
"\n"
"Returns the tool position in the toolbar, or wxNOT_FOUND if the tool\n"
"is not found.");

extern "C" {static PyObject *meth_wxToolBar_GetToolPos(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetToolPos(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolPos(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetToolPos, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetToolSeparation, "GetToolSeparation() -> int\n"
"\n"
"Returns the default separator size.");

extern "C" {static PyObject *meth_wxToolBar_GetToolSeparation(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetToolSeparation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolSeparation();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetToolSeparation, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetToolShortHelp, "GetToolShortHelp(toolId) -> String\n"
"\n"
"Returns the short help for the given tool.");

extern "C" {static PyObject *meth_wxToolBar_GetToolShortHelp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetToolShortHelp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetToolShortHelp(toolId));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetToolShortHelp, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetToolSize, "GetToolSize() -> Size\n"
"\n"
"Returns the size of a whole button, which is usually larger than a\n"
"tool bitmap because of added 3D effects.");

extern "C" {static PyObject *meth_wxToolBar_GetToolSize(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetToolSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetToolSize());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetToolSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetToolState, "GetToolState(toolId) -> bool\n"
"\n"
"Gets the on/off state of a toggle tool.");

extern "C" {static PyObject *meth_wxToolBar_GetToolState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetToolState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolState(toolId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetToolState, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetToolsCount, "GetToolsCount() -> size_t\n"
"\n"
"Returns the number of tools in the toolbar.");

extern "C" {static PyObject *meth_wxToolBar_GetToolsCount(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetToolsCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            size_t sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolsCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetToolsCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_InsertControl, "InsertControl(pos, control, label=EmptyString) -> ToolBarToolBase\n"
"\n"
"Inserts the control into the toolbar at the given position.");

extern "C" {static PyObject *meth_wxToolBar_InsertControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_InsertControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t pos;
         ::wxControl* control;
        const  ::wxString& labeldef = wxEmptyString;
        const  ::wxString* label = &labeldef;
        int labelState = 0;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_control,
            sipName_label,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=J8|J1", &sipSelf, sipType_wxToolBar, &sipCpp, &pos, sipType_wxControl, &control, sipType_wxString,&label, &labelState))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertControl(pos,control,*label);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_InsertControl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_InsertSeparator, "InsertSeparator(pos) -> ToolBarToolBase\n"
"\n"
"Inserts the separator into the toolbar at the given position.");

extern "C" {static PyObject *meth_wxToolBar_InsertSeparator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_InsertSeparator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t pos;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=", &sipSelf, sipType_wxToolBar, &sipCpp, &pos))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertSeparator(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_InsertSeparator, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_InsertStretchableSpace, "InsertStretchableSpace(pos) -> ToolBarToolBase\n"
"\n"
"Inserts a stretchable space at the given position.");

extern "C" {static PyObject *meth_wxToolBar_InsertStretchableSpace(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_InsertStretchableSpace(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        size_t pos;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B=", &sipSelf, sipType_wxToolBar, &sipCpp, &pos))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertStretchableSpace(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_InsertStretchableSpace, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_Realize, "Realize() -> bool\n"
"\n"
"This function should be called after you have added tools.");

extern "C" {static PyObject *meth_wxToolBar_Realize(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_Realize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Realize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_Realize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_RemoveTool, "RemoveTool(id) -> ToolBarToolBase\n"
"\n"
"Removes the given tool from the toolbar but doesn't delete it.");

extern "C" {static PyObject *meth_wxToolBar_RemoveTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_RemoveTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int id;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxToolBar, &sipCpp, &id))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->RemoveTool(id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_RemoveTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_SetDropdownMenu, "SetDropdownMenu(id, menu) -> bool\n"
"\n"
"Sets the dropdown menu for the tool given by its id.");

extern "C" {static PyObject *meth_wxToolBar_SetDropdownMenu(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_SetDropdownMenu(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int id;
         ::wxMenu* menu;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
            sipName_menu,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ:", &sipSelf, sipType_wxToolBar, &sipCpp, &id, sipType_wxMenu, &menu))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetDropdownMenu(id,menu);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_SetDropdownMenu, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_SetToolBitmapSize, "SetToolBitmapSize(size)\n"
"\n"
"Sets the default size of each tool bitmap.");

extern "C" {static PyObject *meth_wxToolBar_SetToolBitmapSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_SetToolBitmapSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSize* size;
        int sizeState = 0;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxToolBar, &sipCpp, sipType_wxSize, &size, &sizeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolBitmapSize(*size);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_SetToolBitmapSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_SetToolClientData, "SetToolClientData(id, clientData)\n"
"\n"
"Sets the client data associated with the tool.");

extern "C" {static PyObject *meth_wxToolBar_SetToolClientData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_SetToolClientData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int id;
         ::wxPyUserData* clientData;
        int clientDataState = 0;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
            sipName_clientData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ2", &sipSelf, sipType_wxToolBar, &sipCpp, &id, sipType_wxPyUserData,&clientData, &clientDataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolClientData(id,clientData);
            Py_END_ALLOW_THREADS
            sipReleaseType(clientData,sipType_wxPyUserData,clientDataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_SetToolClientData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_SetToolDisabledBitmap, "SetToolDisabledBitmap(id, bitmap)\n"
"\n"
"Sets the bitmap to be used by the tool with the given ID when the tool\n"
"is in a disabled state.");

extern "C" {static PyObject *meth_wxToolBar_SetToolDisabledBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_SetToolDisabledBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int id;
        const  ::wxBitmap* bitmap;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ9", &sipSelf, sipType_wxToolBar, &sipCpp, &id, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolDisabledBitmap(id,*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_SetToolDisabledBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_SetToolLongHelp, "SetToolLongHelp(toolId, helpString)\n"
"\n"
"Sets the long help for the given tool.");

extern "C" {static PyObject *meth_wxToolBar_SetToolLongHelp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_SetToolLongHelp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxString* helpString;
        int helpStringState = 0;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_helpString,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId, sipType_wxString,&helpString, &helpStringState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolLongHelp(toolId,*helpString);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(helpString),sipType_wxString,helpStringState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_SetToolLongHelp, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_SetToolNormalBitmap, "SetToolNormalBitmap(id, bitmap)\n"
"\n"
"Sets the bitmap to be used by the tool with the given ID.");

extern "C" {static PyObject *meth_wxToolBar_SetToolNormalBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_SetToolNormalBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int id;
        const  ::wxBitmap* bitmap;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ9", &sipSelf, sipType_wxToolBar, &sipCpp, &id, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolNormalBitmap(id,*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_SetToolNormalBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_SetToolPacking, "SetToolPacking(packing)\n"
"\n"
"Sets the value used for spacing tools.");

extern "C" {static PyObject *meth_wxToolBar_SetToolPacking(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_SetToolPacking(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int packing;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_packing,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxToolBar, &sipCpp, &packing))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolPacking(packing);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_SetToolPacking, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_SetToolSeparation, "SetToolSeparation(separation)\n"
"\n"
"Sets the default separator size.");

extern "C" {static PyObject *meth_wxToolBar_SetToolSeparation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_SetToolSeparation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int separation;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_separation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxToolBar, &sipCpp, &separation))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolSeparation(separation);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_SetToolSeparation, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_SetToolShortHelp, "SetToolShortHelp(toolId, helpString)\n"
"\n"
"Sets the short help for the given tool.");

extern "C" {static PyObject *meth_wxToolBar_SetToolShortHelp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_SetToolShortHelp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxString* helpString;
        int helpStringState = 0;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_helpString,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId, sipType_wxString,&helpString, &helpStringState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolShortHelp(toolId,*helpString);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(helpString),sipType_wxString,helpStringState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_SetToolShortHelp, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_ToggleTool, "ToggleTool(toolId, toggle)\n"
"\n"
"Toggles a tool on or off.");

extern "C" {static PyObject *meth_wxToolBar_ToggleTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_ToggleTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        bool toggle;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_toggle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bib", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId, &toggle))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ToggleTool(toolId,toggle);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_ToggleTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_CreateTool, "CreateTool(toolId, label, bmpNormal, bmpDisabled=NullBitmap, kind=ITEM_NORMAL, clientData=None, shortHelp=EmptyString, longHelp=EmptyString) -> ToolBarToolBase\n"
"CreateTool(control, label) -> ToolBarToolBase\n"
"\n"
"Factory function to create a new toolbar tool.\n"
"");

extern "C" {static PyObject *meth_wxToolBar_CreateTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_CreateTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int toolId;
        const  ::wxString* label;
        int labelState = 0;
        const  ::wxBitmap* bmpNormal;
        const  ::wxBitmap& bmpDisableddef = wxNullBitmap;
        const  ::wxBitmap* bmpDisabled = &bmpDisableddef;
         ::wxItemKind kind = wxITEM_NORMAL;
         ::wxPyUserData* clientData = 0;
        int clientDataState = 0;
        const  ::wxString& shortHelpdef = wxEmptyString;
        const  ::wxString* shortHelp = &shortHelpdef;
        int shortHelpState = 0;
        const  ::wxString& longHelpdef = wxEmptyString;
        const  ::wxString* longHelp = &longHelpdef;
        int longHelpState = 0;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toolId,
            sipName_label,
            sipName_bmpNormal,
            sipName_bmpDisabled,
            sipName_kind,
            sipName_clientData,
            sipName_shortHelp,
            sipName_longHelp,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1J9|J9EJ2J1J1", &sipSelf, sipType_wxToolBar, &sipCpp, &toolId, sipType_wxString,&label, &labelState, sipType_wxBitmap, &bmpNormal, sipType_wxBitmap, &bmpDisabled, sipType_wxItemKind, &kind, sipType_wxPyUserData,&clientData, &clientDataState, sipType_wxString,&shortHelp, &shortHelpState, sipType_wxString,&longHelp, &longHelpState))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CreateTool(toolId,*label,*bmpNormal,*bmpDisabled,kind,clientData,*shortHelp,*longHelp);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);
            sipReleaseType(clientData,sipType_wxPyUserData,clientDataState);
            sipReleaseType(const_cast< ::wxString *>(shortHelp),sipType_wxString,shortHelpState);
            sipReleaseType(const_cast< ::wxString *>(longHelp),sipType_wxString,longHelpState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    {
         ::wxControl* control;
        const  ::wxString* label;
        int labelState = 0;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_control,
            sipName_label,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1", &sipSelf, sipType_wxToolBar, &sipCpp, sipType_wxControl, &control, sipType_wxString,&label, &labelState))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CreateTool(control,*label);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_CreateTool, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_CreateSeparator, "CreateSeparator() -> ToolBarToolBase\n"
"\n"
"Factory function to create a new separator toolbar tool.");

extern "C" {static PyObject *meth_wxToolBar_CreateSeparator(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_CreateSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CreateSeparator();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxToolBarToolBase,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_CreateSeparator, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxToolBar_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxToolBar::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetClientAreaOrigin, doc_wxToolBar_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxToolBar_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxToolBar::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_Validate, doc_wxToolBar_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxToolBar_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxToolBar::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_TransferDataToWindow, doc_wxToolBar_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxToolBar_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxToolBar::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_TransferDataFromWindow, doc_wxToolBar_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxToolBar_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxToolBar::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_InitDialog, doc_wxToolBar_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxToolBar_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxToolBar::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_AcceptsFocus, doc_wxToolBar_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxToolBar_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxToolBar::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_AcceptsFocusRecursively, doc_wxToolBar_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxToolBar_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxToolBar::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_AcceptsFocusFromKeyboard, doc_wxToolBar_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxToolBar_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxToolBar, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxToolBar::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_AddChild, doc_wxToolBar_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxToolBar_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxToolBar, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxToolBar::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_RemoveChild, doc_wxToolBar_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxToolBar_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxToolBar::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_InheritAttributes, doc_wxToolBar_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxToolBar_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxToolBar::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_ShouldInheritColours, doc_wxToolBar_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxToolBar_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxToolBar::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_OnInternalIdle, doc_wxToolBar_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxToolBar_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxToolBar::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetMainWindowOfCompositeControl, doc_wxToolBar_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxToolBar_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxToolBar, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxToolBar::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_InformFirstDirection, doc_wxToolBar_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxToolBar_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxToolBar, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxToolBar::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_SetCanFocus, doc_wxToolBar_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxToolBar_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxToolBar::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_Destroy, doc_wxToolBar_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxToolBar_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxToolBar, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxToolBar::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_SetValidator, doc_wxToolBar_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxToolBar_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxToolBar::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetValidator, doc_wxToolBar_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth_wxToolBar_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
         ::wxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxToolBar, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxToolBar::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_EnableVisibleFocus, doc_wxToolBar_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxToolBar_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxToolBar, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_ProcessEvent, doc_wxToolBar_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxToolBar_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxToolBar, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoEnable, doc_wxToolBar_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxToolBar_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoGetPosition, doc_wxToolBar_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxToolBar_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoGetSize, doc_wxToolBar_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxToolBar_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoGetClientSize, doc_wxToolBar_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxToolBar_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoGetBestSize, doc_wxToolBar_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxToolBar_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoGetBestClientSize, doc_wxToolBar_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxToolBar_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxToolBar, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoSetSize, doc_wxToolBar_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxToolBar_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxToolBar, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoSetClientSize, doc_wxToolBar_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxToolBar_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxToolBar, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoSetSizeHints, doc_wxToolBar_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxToolBar_DoGetBorderSize(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoGetBorderSize, doc_wxToolBar_DoGetBorderSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxToolBar_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxToolBar, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoMoveWindow, doc_wxToolBar_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxToolBar_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxToolBar, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoSetWindowVariant, doc_wxToolBar_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxToolBar_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetDefaultBorder, doc_wxToolBar_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxToolBar_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetDefaultBorderForControl, doc_wxToolBar_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxToolBar_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoFreeze, doc_wxToolBar_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxToolBar_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_DoThaw, doc_wxToolBar_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxToolBar_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_HasTransparentBackground, doc_wxToolBar_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxToolBar_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxToolBar, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_TryBefore, doc_wxToolBar_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxToolBar_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxToolBar, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_TryAfter, doc_wxToolBar_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxToolBar_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxToolBar_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxToolBar_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxToolBar::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ToolBar, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxToolBar(void *, const sipTypeDef *);}
static void *cast_wxToolBar(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxToolBar *sipCpp = reinterpret_cast< ::wxToolBar *>(sipCppV);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxToolBar(void *, int);}
static void release_wxToolBar(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxToolBar *>(sipCppV);
    else
        delete reinterpret_cast< ::wxToolBar *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxToolBar(Py_ssize_t);}
static void *array_wxToolBar(Py_ssize_t sipNrElem)
{
    return new  ::wxToolBar[sipNrElem];
}


extern "C" {static void dealloc_wxToolBar(sipSimpleWrapper *);}
static void dealloc_wxToolBar(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxToolBar *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxToolBar(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxToolBar(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxToolBar(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxToolBar *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxToolBar();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxTB_HORIZONTAL;
        const  ::wxString& namedef = wxToolBarNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1lJ1", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxToolBar(parent,id,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxToolBar[] = {{93, 255, 1}};


static PyMethodDef methods_wxToolBar[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxToolBar_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxToolBar_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxToolBar_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddCheckTool), SIP_MLMETH_CAST(meth_wxToolBar_AddCheckTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_AddCheckTool)},
    {SIP_MLNAME_CAST(sipName_AddChild), SIP_MLMETH_CAST(meth_wxToolBar_AddChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_AddChild)},
    {SIP_MLNAME_CAST(sipName_AddControl), SIP_MLMETH_CAST(meth_wxToolBar_AddControl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_AddControl)},
    {SIP_MLNAME_CAST(sipName_AddRadioTool), SIP_MLMETH_CAST(meth_wxToolBar_AddRadioTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_AddRadioTool)},
    {SIP_MLNAME_CAST(sipName_AddSeparator), meth_wxToolBar_AddSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_AddSeparator)},
    {SIP_MLNAME_CAST(sipName_AddStretchableSpace), meth_wxToolBar_AddStretchableSpace, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_AddStretchableSpace)},
    {SIP_MLNAME_CAST(sipName_AddTool), SIP_MLMETH_CAST(meth_wxToolBar_AddTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_AddTool)},
    {SIP_MLNAME_CAST(sipName_ClearTools), meth_wxToolBar_ClearTools, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_ClearTools)},
    {SIP_MLNAME_CAST(sipName_CreateSeparator), meth_wxToolBar_CreateSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_CreateSeparator)},
    {SIP_MLNAME_CAST(sipName_CreateTool), SIP_MLMETH_CAST(meth_wxToolBar_CreateTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_CreateTool)},
    {SIP_MLNAME_CAST(sipName_DeleteTool), SIP_MLMETH_CAST(meth_wxToolBar_DeleteTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_DeleteTool)},
    {SIP_MLNAME_CAST(sipName_DeleteToolByPos), SIP_MLMETH_CAST(meth_wxToolBar_DeleteToolByPos), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_DeleteToolByPos)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxToolBar_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), SIP_MLMETH_CAST(meth_wxToolBar_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), meth_wxToolBar_DoFreeze, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), meth_wxToolBar_DoGetBestClientSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), meth_wxToolBar_DoGetBestSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), meth_wxToolBar_DoGetBorderSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), SIP_MLMETH_CAST(meth_wxToolBar_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), SIP_MLMETH_CAST(meth_wxToolBar_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), SIP_MLMETH_CAST(meth_wxToolBar_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), SIP_MLMETH_CAST(meth_wxToolBar_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), SIP_MLMETH_CAST(meth_wxToolBar_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), SIP_MLMETH_CAST(meth_wxToolBar_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), SIP_MLMETH_CAST(meth_wxToolBar_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), SIP_MLMETH_CAST(meth_wxToolBar_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), meth_wxToolBar_DoThaw, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EnableTool), SIP_MLMETH_CAST(meth_wxToolBar_EnableTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_EnableTool)},
    {SIP_MLNAME_CAST(sipName_EnableVisibleFocus), SIP_MLMETH_CAST(meth_wxToolBar_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_EnableVisibleFocus)},
    {SIP_MLNAME_CAST(sipName_FindById), SIP_MLMETH_CAST(meth_wxToolBar_FindById), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_FindById)},
    {SIP_MLNAME_CAST(sipName_FindControl), SIP_MLMETH_CAST(meth_wxToolBar_FindControl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_FindControl)},
    {SIP_MLNAME_CAST(sipName_FindToolForPosition), SIP_MLMETH_CAST(meth_wxToolBar_FindToolForPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_FindToolForPosition)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), SIP_MLMETH_CAST(meth_wxToolBar_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxToolBar_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), meth_wxToolBar_GetDefaultBorder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), meth_wxToolBar_GetDefaultBorderForControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxToolBar_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetMargins), meth_wxToolBar_GetMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_GetMargins)},
    {SIP_MLNAME_CAST(sipName_GetToolBitmapSize), meth_wxToolBar_GetToolBitmapSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_GetToolBitmapSize)},
    {SIP_MLNAME_CAST(sipName_GetToolByPos), SIP_MLMETH_CAST(meth_wxToolBar_GetToolByPos), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_GetToolByPos)},
    {SIP_MLNAME_CAST(sipName_GetToolClientData), SIP_MLMETH_CAST(meth_wxToolBar_GetToolClientData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_GetToolClientData)},
    {SIP_MLNAME_CAST(sipName_GetToolEnabled), SIP_MLMETH_CAST(meth_wxToolBar_GetToolEnabled), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_GetToolEnabled)},
    {SIP_MLNAME_CAST(sipName_GetToolLongHelp), SIP_MLMETH_CAST(meth_wxToolBar_GetToolLongHelp), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_GetToolLongHelp)},
    {SIP_MLNAME_CAST(sipName_GetToolPacking), meth_wxToolBar_GetToolPacking, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_GetToolPacking)},
    {SIP_MLNAME_CAST(sipName_GetToolPos), SIP_MLMETH_CAST(meth_wxToolBar_GetToolPos), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_GetToolPos)},
    {SIP_MLNAME_CAST(sipName_GetToolSeparation), meth_wxToolBar_GetToolSeparation, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_GetToolSeparation)},
    {SIP_MLNAME_CAST(sipName_GetToolShortHelp), SIP_MLMETH_CAST(meth_wxToolBar_GetToolShortHelp), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_GetToolShortHelp)},
    {SIP_MLNAME_CAST(sipName_GetToolSize), meth_wxToolBar_GetToolSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_GetToolSize)},
    {SIP_MLNAME_CAST(sipName_GetToolState), SIP_MLMETH_CAST(meth_wxToolBar_GetToolState), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_GetToolState)},
    {SIP_MLNAME_CAST(sipName_GetToolsCount), meth_wxToolBar_GetToolsCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_GetToolsCount)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxToolBar_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_GetValidator)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), meth_wxToolBar_HasTransparentBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), SIP_MLMETH_CAST(meth_wxToolBar_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxToolBar_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxToolBar_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_InitDialog)},
    {SIP_MLNAME_CAST(sipName_InsertControl), SIP_MLMETH_CAST(meth_wxToolBar_InsertControl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_InsertControl)},
    {SIP_MLNAME_CAST(sipName_InsertSeparator), SIP_MLMETH_CAST(meth_wxToolBar_InsertSeparator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_InsertSeparator)},
    {SIP_MLNAME_CAST(sipName_InsertStretchableSpace), SIP_MLMETH_CAST(meth_wxToolBar_InsertStretchableSpace), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_InsertStretchableSpace)},
    {SIP_MLNAME_CAST(sipName_InsertTool), SIP_MLMETH_CAST(meth_wxToolBar_InsertTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_InsertTool)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxToolBar_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), SIP_MLMETH_CAST(meth_wxToolBar_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_Realize), meth_wxToolBar_Realize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_Realize)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), SIP_MLMETH_CAST(meth_wxToolBar_RemoveChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_RemoveTool), SIP_MLMETH_CAST(meth_wxToolBar_RemoveTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_RemoveTool)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), meth_wxToolBar_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), SIP_MLMETH_CAST(meth_wxToolBar_SetCanFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetDropdownMenu), SIP_MLMETH_CAST(meth_wxToolBar_SetDropdownMenu), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_SetDropdownMenu)},
    {SIP_MLNAME_CAST(sipName_SetMargins), SIP_MLMETH_CAST(meth_wxToolBar_SetMargins), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_SetMargins)},
    {SIP_MLNAME_CAST(sipName_SetToolBitmapSize), SIP_MLMETH_CAST(meth_wxToolBar_SetToolBitmapSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_SetToolBitmapSize)},
    {SIP_MLNAME_CAST(sipName_SetToolClientData), SIP_MLMETH_CAST(meth_wxToolBar_SetToolClientData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_SetToolClientData)},
    {SIP_MLNAME_CAST(sipName_SetToolDisabledBitmap), SIP_MLMETH_CAST(meth_wxToolBar_SetToolDisabledBitmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_SetToolDisabledBitmap)},
    {SIP_MLNAME_CAST(sipName_SetToolLongHelp), SIP_MLMETH_CAST(meth_wxToolBar_SetToolLongHelp), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_SetToolLongHelp)},
    {SIP_MLNAME_CAST(sipName_SetToolNormalBitmap), SIP_MLMETH_CAST(meth_wxToolBar_SetToolNormalBitmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_SetToolNormalBitmap)},
    {SIP_MLNAME_CAST(sipName_SetToolPacking), SIP_MLMETH_CAST(meth_wxToolBar_SetToolPacking), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_SetToolPacking)},
    {SIP_MLNAME_CAST(sipName_SetToolSeparation), SIP_MLMETH_CAST(meth_wxToolBar_SetToolSeparation), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_SetToolSeparation)},
    {SIP_MLNAME_CAST(sipName_SetToolShortHelp), SIP_MLMETH_CAST(meth_wxToolBar_SetToolShortHelp), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_SetToolShortHelp)},
    {SIP_MLNAME_CAST(sipName_SetValidator), SIP_MLMETH_CAST(meth_wxToolBar_SetValidator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxToolBar_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_ToggleTool), SIP_MLMETH_CAST(meth_wxToolBar_ToggleTool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_ToggleTool)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxToolBar_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxToolBar_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth_wxToolBar_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth_wxToolBar_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxToolBar_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxToolBar_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxToolBar_Validate)}
};

sipVariableDef variables_wxToolBar[] = {
    {PropertyVariable, sipName_ToolsCount, &methods_wxToolBar[52], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ToolSize, &methods_wxToolBar[50], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ToolSeparation, &methods_wxToolBar[48], &methods_wxToolBar[77], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ToolPacking, &methods_wxToolBar[46], &methods_wxToolBar[76], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ToolBitmapSize, &methods_wxToolBar[41], &methods_wxToolBar[71], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Margins, &methods_wxToolBar[40], &methods_wxToolBar[70], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxToolBar, "ToolBar()\n"
"ToolBar(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=TB_HORIZONTAL, name=ToolBarNameStr)\n"
"\n"
"A toolbar is a bar of buttons and/or other controls usually placed\n"
"below the menu bar in a wxFrame.");


sipClassTypeDef sipTypeDef__core_wxToolBar = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxToolBar,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_ToolBar,
        {0, 0, 1},
        87, methods_wxToolBar,
        0, SIP_NULLPTR,
        6, variables_wxToolBar,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxToolBar,
    -1,
    -1,
    supers_wxToolBar,
    SIP_NULLPTR,
    init_type_wxToolBar,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxToolBar,
    SIP_NULLPTR,
    array_wxToolBar,
    SIP_NULLPTR,
    release_wxToolBar,
    cast_wxToolBar,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
