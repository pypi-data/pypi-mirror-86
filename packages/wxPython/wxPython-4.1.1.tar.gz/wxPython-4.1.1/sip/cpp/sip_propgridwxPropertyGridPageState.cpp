/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_propgrid.h"

        #include <wx/propgrid/propgridpagestate.h>

        #include <wx/propgrid/property.h>
        #include <wx/object.h>
        #include <wx/propgrid/propgridpagestate.h>
        #include <wx/gdicmn.h>
        #include <wx/dcclient.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/propgrid.h>
        #include <wx/gdicmn.h>


class sipwxPropertyGridPageState : public  ::wxPropertyGridPageState
{
public:
    sipwxPropertyGridPageState();
    sipwxPropertyGridPageState(const  ::wxPropertyGridPageState&);
    virtual ~sipwxPropertyGridPageState();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void DoSetSplitterPosition(int,int,int) SIP_OVERRIDE;
     ::wxPGProperty* DoInsert( ::wxPGProperty*,int, ::wxPGProperty*) SIP_OVERRIDE;
    void DoDelete( ::wxPGProperty*,bool) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxPropertyGridPageState(const sipwxPropertyGridPageState &);
    sipwxPropertyGridPageState &operator = (const sipwxPropertyGridPageState &);

    char sipPyMethods[3];
};

sipwxPropertyGridPageState::sipwxPropertyGridPageState():  ::wxPropertyGridPageState(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPropertyGridPageState::sipwxPropertyGridPageState(const  ::wxPropertyGridPageState& a0):  ::wxPropertyGridPageState(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPropertyGridPageState::~sipwxPropertyGridPageState()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxPropertyGridPageState::DoSetSplitterPosition(int pos,int splitterColumn,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_DoSetSplitterPosition);

    if (!sipMeth)
    {
         ::wxPropertyGridPageState::DoSetSplitterPosition(pos,splitterColumn,flags);
        return;
    }

    extern void sipVH__propgrid_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    sipVH__propgrid_53(sipGILState, 0, sipPySelf, sipMeth, pos, splitterColumn, flags);
}

 ::wxPGProperty* sipwxPropertyGridPageState::DoInsert( ::wxPGProperty*parent,int index, ::wxPGProperty*property)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_DoInsert);

    if (!sipMeth)
        return  ::wxPropertyGridPageState::DoInsert(parent,index,property);

    extern  ::wxPGProperty* sipVH__propgrid_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGProperty*,int, ::wxPGProperty*);

    return sipVH__propgrid_52(sipGILState, 0, sipPySelf, sipMeth, parent, index, property);
}

void sipwxPropertyGridPageState::DoDelete( ::wxPGProperty*item,bool doDelete)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_DoDelete);

    if (!sipMeth)
    {
         ::wxPropertyGridPageState::DoDelete(item,doDelete);
        return;
    }

    extern void sipVH__propgrid_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGProperty*,bool);

    sipVH__propgrid_51(sipGILState, 0, sipPySelf, sipMeth, item, doDelete);
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_CheckColumnWidths, "CheckColumnWidths(widthChange=0)\n"
"\n"
"Makes sure all columns have minimum width.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_CheckColumnWidths(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_CheckColumnWidths(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int widthChange = 0;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_widthChange,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &widthChange))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->CheckColumnWidths(widthChange);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_CheckColumnWidths, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoDelete, "DoDelete(item, doDelete=True)\n"
"\n"
"Override this member function to add custom behaviour on property\n"
"deletion.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoDelete(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoDelete(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGProperty* item;
        bool doDelete = 1;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_doDelete,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|b", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &item, &doDelete))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGridPageState::DoDelete(item,doDelete) : sipCpp->DoDelete(item,doDelete));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoDelete, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoFitColumns, "DoFitColumns(allowGridResize=False) -> wx.Size");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoFitColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoFitColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool allowGridResize = 0;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_allowGridResize,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &allowGridResize))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->DoFitColumns(allowGridResize));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoFitColumns, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoGetItemAtY, "DoGetItemAtY(y) -> PGProperty");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoGetItemAtY(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoGetItemAtY(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int y;
        const  ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &y))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DoGetItemAtY(y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoGetItemAtY, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoInsert, "DoInsert(parent, index, property) -> PGProperty\n"
"\n"
"Override this member function to add custom behaviour on property\n"
"insertion.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoInsert(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoInsert(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGProperty* parent;
        int index;
         ::wxPGProperty* property;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_index,
            sipName_property,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8iJ8", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &parent, &index, sipType_wxPGProperty, &property))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGridPageState::DoInsert(parent,index,property) : sipCpp->DoInsert(parent,index,property));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoInsert, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoSetSplitterPosition, "DoSetSplitterPosition(pos, splitterColumn=0, flags=0)\n"
"\n"
"This needs to be overridden in grid used the manager so that splitter\n"
"changes can be propagated to other pages.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoSetSplitterPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoSetSplitterPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int pos;
        int splitterColumn = 0;
        int flags = 0;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_splitterColumn,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|ii", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &pos, &splitterColumn, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGridPageState::DoSetSplitterPosition(pos,splitterColumn,flags) : sipCpp->DoSetSplitterPosition(pos,splitterColumn,flags));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoSetSplitterPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_EnableCategories, "EnableCategories(enable) -> bool");

extern "C" {static PyObject *meth_wxPropertyGridPageState_EnableCategories(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_EnableCategories(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &enable))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EnableCategories(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_EnableCategories, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_EnsureVirtualHeight, "EnsureVirtualHeight()\n"
"\n"
"Make sure virtual height is up-to-date.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_EnsureVirtualHeight(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_EnsureVirtualHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnsureVirtualHeight();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_EnsureVirtualHeight, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_GetVirtualHeight, "GetVirtualHeight() -> unsignedint\n"
"\n"
"Returns (precalculated) height of contained visible properties.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_GetVirtualHeight(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_GetVirtualHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVirtualHeight();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_GetVirtualHeight, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_GetActualVirtualHeight, "GetActualVirtualHeight() -> unsignedint\n"
"\n"
"Returns actual height of contained visible properties.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_GetActualVirtualHeight(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_GetActualVirtualHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetActualVirtualHeight();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_GetActualVirtualHeight, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_GetColumnCount, "GetColumnCount() -> unsignedint");

extern "C" {static PyObject *meth_wxPropertyGridPageState_GetColumnCount(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_GetColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_GetColumnCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_GetColumnWidth, "GetColumnWidth(column) -> int");

extern "C" {static PyObject *meth_wxPropertyGridPageState_GetColumnWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_GetColumnWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint column;
        const  ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &column))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnWidth(column);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_GetColumnWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_GetGrid, "GetGrid() -> PropertyGrid");

extern "C" {static PyObject *meth_wxPropertyGridPageState_GetGrid(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_GetGrid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
             ::wxPropertyGrid*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetGrid();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPropertyGrid,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_GetGrid, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_GetLastItem, "GetLastItem(flags=PG_ITERATE_DEFAULT) -> PGProperty\n"
"\n"
"Returns last item which could be iterated using given flags.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_GetLastItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_GetLastItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int flags = wxPG_ITERATE_DEFAULT;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &flags))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetLastItem(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_GetLastItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_GetSelection, "GetSelection() -> PGProperty\n"
"\n"
"Returns currently selected property.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_GetSelection(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_GetSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSelection();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_GetSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoSetSelection, "DoSetSelection(prop)");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoSetSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoSetSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* prop;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_prop,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &prop))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoSetSelection(prop);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoSetSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoClearSelection, "DoClearSelection() -> bool");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoClearSelection(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoClearSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DoClearSelection();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoClearSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoRemoveFromSelection, "DoRemoveFromSelection(prop)");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoRemoveFromSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoRemoveFromSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* prop;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_prop,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &prop))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoRemoveFromSelection(prop);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoRemoveFromSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoSetColumnProportion, "DoSetColumnProportion(column, proportion)");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoSetColumnProportion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoSetColumnProportion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint column;
        int proportion;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
            sipName_proportion,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bui", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &column, &proportion))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoSetColumnProportion(column,proportion);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoSetColumnProportion, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoGetColumnProportion, "DoGetColumnProportion(column) -> int");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoGetColumnProportion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoGetColumnProportion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint column;
        const  ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &column))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DoGetColumnProportion(column);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoGetColumnProportion, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_ResetColumnSizes, "ResetColumnSizes(setSplitterFlags)");

extern "C" {static PyObject *meth_wxPropertyGridPageState_ResetColumnSizes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_ResetColumnSizes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int setSplitterFlags;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_setSplitterFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &setSplitterFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ResetColumnSizes(setSplitterFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_ResetColumnSizes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_GetPropertyCategory, "GetPropertyCategory(p) -> PropertyCategory");

extern "C" {static PyObject *meth_wxPropertyGridPageState_GetPropertyCategory(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_GetPropertyCategory(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGProperty* p;
        const  ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &p))
        {
             ::wxPropertyCategory*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPropertyCategory(p);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPropertyCategory,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_GetPropertyCategory, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoGetPropertyValues, "DoGetPropertyValues(listname, baseparent, flags) -> PGVariant");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoGetPropertyValues(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoGetPropertyValues(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* listname;
        int listnameState = 0;
         ::wxPGProperty* baseparent;
        long flags;
        const  ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_listname,
            sipName_baseparent,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J8l", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxString,&listname, &listnameState, sipType_wxPGProperty, &baseparent, &flags))
        {
             ::wxPGVariant*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGVariant(sipCpp->DoGetPropertyValues(*listname,baseparent,flags));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(listname),sipType_wxString,listnameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoGetPropertyValues, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoGetRoot, "DoGetRoot() -> PGProperty");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoGetRoot(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoGetRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DoGetRoot();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoGetRoot, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoSetPropertyName, "DoSetPropertyName(p, newName)");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoSetPropertyName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoSetPropertyName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* p;
        const  ::wxString* newName;
        int newNameState = 0;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
            sipName_newName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &p, sipType_wxString,&newName, &newNameState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoSetPropertyName(p,*newName);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(newName),sipType_wxString,newNameState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoSetPropertyName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_GetVirtualWidth, "GetVirtualWidth() -> int\n"
"\n"
"Returns combined width of margin and all the columns.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_GetVirtualWidth(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_GetVirtualWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVirtualWidth();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_GetVirtualWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_GetColumnFitWidth, "GetColumnFitWidth(dc, pwc, col, subProps) -> int\n"
"\n"
"Returns minimal width for given column so that all images and texts\n"
"will fit entirely.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_GetColumnFitWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_GetColumnFitWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxClientDC* dc;
         ::wxPGProperty* pwc;
        uint col;
        bool subProps;
        const  ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_pwc,
            sipName_col,
            sipName_subProps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J8ub", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxClientDC, &dc, sipType_wxPGProperty, &pwc, &col, &subProps))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnFitWidth(*dc,pwc,col,subProps);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_GetColumnFitWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_GetColumnFullWidth, "GetColumnFullWidth(dc, p, col) -> int");

extern "C" {static PyObject *meth_wxPropertyGridPageState_GetColumnFullWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_GetColumnFullWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxClientDC* dc;
         ::wxPGProperty* p;
        uint col;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_p,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J8u", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxClientDC, &dc, sipType_wxPGProperty, &p, &col))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnFullWidth(*dc,p,col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_GetColumnFullWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_HitTest, "HitTest(pt) -> PropertyGridHitTestResult\n"
"\n"
"Returns information about arbitrary position in the grid.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_HitTest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_HitTest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint* pt;
        int ptState = 0;
        const  ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
             ::wxPropertyGridHitTestResult*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPropertyGridHitTestResult(sipCpp->HitTest(*pt));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPropertyGridHitTestResult,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_HitTest, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_IsDisplayed, "IsDisplayed() -> bool\n"
"\n"
"Returns true if page is visibly displayed.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_IsDisplayed(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_IsDisplayed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsDisplayed();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_IsDisplayed, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_IsInNonCatMode, "IsInNonCatMode() -> bool");

extern "C" {static PyObject *meth_wxPropertyGridPageState_IsInNonCatMode(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_IsInNonCatMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsInNonCatMode();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_IsInNonCatMode, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoLimitPropertyEditing, "DoLimitPropertyEditing(p, limit=True)");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoLimitPropertyEditing(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoLimitPropertyEditing(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* p;
        bool limit = 1;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
            sipName_limit,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|b", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &p, &limit))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoLimitPropertyEditing(p,limit);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoLimitPropertyEditing, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoSelectProperty, "DoSelectProperty(p, flags=0) -> bool");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoSelectProperty(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoSelectProperty(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* p;
        uint flags = 0;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|u", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &p, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DoSelectProperty(p,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoSelectProperty, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_OnClientWidthChange, "OnClientWidthChange(newWidth, widthChange, fromOnResize=False)\n"
"\n"
"widthChange is non-client.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_OnClientWidthChange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_OnClientWidthChange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int newWidth;
        int widthChange;
        bool fromOnResize = 0;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_newWidth,
            sipName_widthChange,
            sipName_fromOnResize,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|b", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &newWidth, &widthChange, &fromOnResize))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->OnClientWidthChange(newWidth,widthChange,fromOnResize);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_OnClientWidthChange, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_RecalculateVirtualHeight, "RecalculateVirtualHeight()\n"
"\n"
"Recalculates m_virtualHeight.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_RecalculateVirtualHeight(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_RecalculateVirtualHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RecalculateVirtualHeight();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_RecalculateVirtualHeight, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_SetColumnCount, "SetColumnCount(colCount)");

extern "C" {static PyObject *meth_wxPropertyGridPageState_SetColumnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_SetColumnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int colCount;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colCount,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &colCount))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetColumnCount(colCount);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_SetColumnCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_PropagateColSizeDec, "PropagateColSizeDec(column, decrease, dir)");

extern "C" {static PyObject *meth_wxPropertyGridPageState_PropagateColSizeDec(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_PropagateColSizeDec(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int column;
        int decrease;
        int dir;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
            sipName_decrease,
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &column, &decrease, &dir))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->PropagateColSizeDec(column,decrease,dir);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_PropagateColSizeDec, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoHideProperty, "DoHideProperty(p, hide, flags=PG_RECURSE) -> bool");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoHideProperty(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoHideProperty(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* p;
        bool hide;
        int flags = wxPG_RECURSE;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
            sipName_hide,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8b|i", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &p, &hide, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DoHideProperty(p,hide,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoHideProperty, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoSetPropertyValueString, "DoSetPropertyValueString(p, value) -> bool");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoSetPropertyValueString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoSetPropertyValueString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* p;
        const  ::wxString* value;
        int valueState = 0;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &p, sipType_wxString,&value, &valueState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DoSetPropertyValueString(p,*value);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(value),sipType_wxString,valueState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoSetPropertyValueString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoSetPropertyValue, "DoSetPropertyValue(p, value) -> bool");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoSetPropertyValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoSetPropertyValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* p;
         ::wxPGVariant* value;
        int valueState = 0;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &p, sipType_wxPGVariant,&value, &valueState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DoSetPropertyValue(p,*value);
            Py_END_ALLOW_THREADS
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoSetPropertyValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoSetPropertyValueWxObjectPtr, "DoSetPropertyValueWxObjectPtr(p, value) -> bool");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoSetPropertyValueWxObjectPtr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoSetPropertyValueWxObjectPtr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* p;
         ::wxObject* value;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J8", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &p, sipType_wxObject, &value))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DoSetPropertyValueWxObjectPtr(p,value);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoSetPropertyValueWxObjectPtr, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoSetPropertyValues, "DoSetPropertyValues(list, default_category)");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoSetPropertyValues(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoSetPropertyValues(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGVariantList* list;
        int listState = 0;
         ::wxPGProperty* default_category;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_list,
            sipName_default_category,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J8", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGVariantList,&list, &listState, sipType_wxPGProperty, &default_category))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoSetPropertyValues(*list,default_category);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGVariantList *>(list),sipType_wxPGVariantList,listState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoSetPropertyValues, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_SetSplitterLeft, "SetSplitterLeft(subProps=False)");

extern "C" {static PyObject *meth_wxPropertyGridPageState_SetSplitterLeft(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_SetSplitterLeft(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool subProps = 0;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_subProps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &subProps))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSplitterLeft(subProps);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_SetSplitterLeft, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_SetVirtualWidth, "SetVirtualWidth(width)\n"
"\n"
"Set virtual width for this particular page.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_SetVirtualWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_SetVirtualWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int width;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &width))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetVirtualWidth(width);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_SetVirtualWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoSortChildren, "DoSortChildren(p, flags=0)");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoSortChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoSortChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* p;
        int flags = 0;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|i", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &p, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoSortChildren(p,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoSortChildren, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoSort, "DoSort(flags=0)");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoSort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoSort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int flags = 0;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoSort(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoSort, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_PrepareAfterItemsAdded, "PrepareAfterItemsAdded() -> bool");

extern "C" {static PyObject *meth_wxPropertyGridPageState_PrepareAfterItemsAdded(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_PrepareAfterItemsAdded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrepareAfterItemsAdded();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_PrepareAfterItemsAdded, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_VirtualHeightChanged, "VirtualHeightChanged()\n"
"\n"
"Called after virtual height needs to be recalculated.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_VirtualHeightChanged(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_VirtualHeightChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->VirtualHeightChanged();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_VirtualHeightChanged, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoAppend, "DoAppend(property) -> PGProperty\n"
"\n"
"Base append.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoAppend(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoAppend(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* property;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_property,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &property))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DoAppend(property);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoAppend, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_BaseGetPropertyByName, "BaseGetPropertyByName(name) -> PGProperty\n"
"\n"
"Returns property by its name.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_BaseGetPropertyByName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_BaseGetPropertyByName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;
        const  ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxString,&name, &nameState))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BaseGetPropertyByName(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_BaseGetPropertyByName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoClear, "DoClear()\n"
"\n"
"Called in, for example, wxPropertyGrid::Clear.");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoClear(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoClear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGridPageState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoClear();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoClear, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoIsPropertySelected, "DoIsPropertySelected(prop) -> bool");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoIsPropertySelected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoIsPropertySelected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* prop;
        const  ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_prop,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &prop))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DoIsPropertySelected(prop);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoIsPropertySelected, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoCollapse, "DoCollapse(p) -> bool");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoCollapse(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoCollapse(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* p;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &p))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DoCollapse(p);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoCollapse, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_DoExpand, "DoExpand(p) -> bool");

extern "C" {static PyObject *meth_wxPropertyGridPageState_DoExpand(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_DoExpand(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* p;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, sipType_wxPGProperty, &p))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DoExpand(p);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_DoExpand, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGridPageState_CalculateFontAndBitmapStuff, "CalculateFontAndBitmapStuff(vspacing)");

extern "C" {static PyObject *meth_wxPropertyGridPageState_CalculateFontAndBitmapStuff(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGridPageState_CalculateFontAndBitmapStuff(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int vspacing;
         ::wxPropertyGridPageState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_vspacing,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPropertyGridPageState, &sipCpp, &vspacing))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->CalculateFontAndBitmapStuff(vspacing);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGridPageState, sipName_CalculateFontAndBitmapStuff, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxPropertyGridPageState(void *, int);}
static void release_wxPropertyGridPageState(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxPropertyGridPageState *>(sipCppV);
    else
        delete reinterpret_cast< ::wxPropertyGridPageState *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxPropertyGridPageState(Py_ssize_t);}
static void *array_wxPropertyGridPageState(Py_ssize_t sipNrElem)
{
    return new  ::wxPropertyGridPageState[sipNrElem];
}


extern "C" {static void assign_wxPropertyGridPageState(void *, SIP_SSIZE_T, void *);}
static void assign_wxPropertyGridPageState(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxPropertyGridPageState *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxPropertyGridPageState *>(sipSrc);
}


extern "C" {static void *copy_wxPropertyGridPageState(const void *, SIP_SSIZE_T);}
static void *copy_wxPropertyGridPageState(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxPropertyGridPageState(reinterpret_cast<const  ::wxPropertyGridPageState *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxPropertyGridPageState(sipSimpleWrapper *);}
static void dealloc_wxPropertyGridPageState(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxPropertyGridPageState *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxPropertyGridPageState(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxPropertyGridPageState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxPropertyGridPageState(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxPropertyGridPageState *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPropertyGridPageState();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxPropertyGridPageState* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxPropertyGridPageState, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPropertyGridPageState(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_wxPropertyGridPageState[] = {
    {SIP_MLNAME_CAST(sipName_BaseGetPropertyByName), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_BaseGetPropertyByName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_BaseGetPropertyByName)},
    {SIP_MLNAME_CAST(sipName_CalculateFontAndBitmapStuff), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_CalculateFontAndBitmapStuff), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_CalculateFontAndBitmapStuff)},
    {SIP_MLNAME_CAST(sipName_CheckColumnWidths), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_CheckColumnWidths), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_CheckColumnWidths)},
    {SIP_MLNAME_CAST(sipName_DoAppend), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoAppend), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoAppend)},
    {SIP_MLNAME_CAST(sipName_DoClear), meth_wxPropertyGridPageState_DoClear, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoClear)},
    {SIP_MLNAME_CAST(sipName_DoClearSelection), meth_wxPropertyGridPageState_DoClearSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoClearSelection)},
    {SIP_MLNAME_CAST(sipName_DoCollapse), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoCollapse), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoCollapse)},
    {SIP_MLNAME_CAST(sipName_DoDelete), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoDelete), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoDelete)},
    {SIP_MLNAME_CAST(sipName_DoExpand), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoExpand), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoExpand)},
    {SIP_MLNAME_CAST(sipName_DoFitColumns), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoFitColumns), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoFitColumns)},
    {SIP_MLNAME_CAST(sipName_DoGetColumnProportion), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoGetColumnProportion), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoGetColumnProportion)},
    {SIP_MLNAME_CAST(sipName_DoGetItemAtY), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoGetItemAtY), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoGetItemAtY)},
    {SIP_MLNAME_CAST(sipName_DoGetPropertyValues), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoGetPropertyValues), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoGetPropertyValues)},
    {SIP_MLNAME_CAST(sipName_DoGetRoot), meth_wxPropertyGridPageState_DoGetRoot, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoGetRoot)},
    {SIP_MLNAME_CAST(sipName_DoHideProperty), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoHideProperty), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoHideProperty)},
    {SIP_MLNAME_CAST(sipName_DoInsert), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoInsert), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoInsert)},
    {SIP_MLNAME_CAST(sipName_DoIsPropertySelected), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoIsPropertySelected), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoIsPropertySelected)},
    {SIP_MLNAME_CAST(sipName_DoLimitPropertyEditing), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoLimitPropertyEditing), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoLimitPropertyEditing)},
    {SIP_MLNAME_CAST(sipName_DoRemoveFromSelection), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoRemoveFromSelection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoRemoveFromSelection)},
    {SIP_MLNAME_CAST(sipName_DoSelectProperty), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoSelectProperty), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoSelectProperty)},
    {SIP_MLNAME_CAST(sipName_DoSetColumnProportion), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoSetColumnProportion), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoSetColumnProportion)},
    {SIP_MLNAME_CAST(sipName_DoSetPropertyName), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoSetPropertyName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoSetPropertyName)},
    {SIP_MLNAME_CAST(sipName_DoSetPropertyValue), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoSetPropertyValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoSetPropertyValue)},
    {SIP_MLNAME_CAST(sipName_DoSetPropertyValueString), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoSetPropertyValueString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoSetPropertyValueString)},
    {SIP_MLNAME_CAST(sipName_DoSetPropertyValueWxObjectPtr), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoSetPropertyValueWxObjectPtr), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoSetPropertyValueWxObjectPtr)},
    {SIP_MLNAME_CAST(sipName_DoSetPropertyValues), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoSetPropertyValues), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoSetPropertyValues)},
    {SIP_MLNAME_CAST(sipName_DoSetSelection), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoSetSelection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoSetSelection)},
    {SIP_MLNAME_CAST(sipName_DoSetSplitterPosition), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoSetSplitterPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoSetSplitterPosition)},
    {SIP_MLNAME_CAST(sipName_DoSort), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoSort), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoSort)},
    {SIP_MLNAME_CAST(sipName_DoSortChildren), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_DoSortChildren), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_DoSortChildren)},
    {SIP_MLNAME_CAST(sipName_EnableCategories), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_EnableCategories), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_EnableCategories)},
    {SIP_MLNAME_CAST(sipName_EnsureVirtualHeight), meth_wxPropertyGridPageState_EnsureVirtualHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_EnsureVirtualHeight)},
    {SIP_MLNAME_CAST(sipName_GetActualVirtualHeight), meth_wxPropertyGridPageState_GetActualVirtualHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_GetActualVirtualHeight)},
    {SIP_MLNAME_CAST(sipName_GetColumnCount), meth_wxPropertyGridPageState_GetColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_GetColumnCount)},
    {SIP_MLNAME_CAST(sipName_GetColumnFitWidth), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_GetColumnFitWidth), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_GetColumnFitWidth)},
    {SIP_MLNAME_CAST(sipName_GetColumnFullWidth), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_GetColumnFullWidth), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_GetColumnFullWidth)},
    {SIP_MLNAME_CAST(sipName_GetColumnWidth), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_GetColumnWidth), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_GetColumnWidth)},
    {SIP_MLNAME_CAST(sipName_GetGrid), meth_wxPropertyGridPageState_GetGrid, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_GetGrid)},
    {SIP_MLNAME_CAST(sipName_GetLastItem), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_GetLastItem), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_GetLastItem)},
    {SIP_MLNAME_CAST(sipName_GetPropertyCategory), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_GetPropertyCategory), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_GetPropertyCategory)},
    {SIP_MLNAME_CAST(sipName_GetSelection), meth_wxPropertyGridPageState_GetSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_GetSelection)},
    {SIP_MLNAME_CAST(sipName_GetVirtualHeight), meth_wxPropertyGridPageState_GetVirtualHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_GetVirtualHeight)},
    {SIP_MLNAME_CAST(sipName_GetVirtualWidth), meth_wxPropertyGridPageState_GetVirtualWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_GetVirtualWidth)},
    {SIP_MLNAME_CAST(sipName_HitTest), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_HitTest), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_HitTest)},
    {SIP_MLNAME_CAST(sipName_IsDisplayed), meth_wxPropertyGridPageState_IsDisplayed, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_IsDisplayed)},
    {SIP_MLNAME_CAST(sipName_IsInNonCatMode), meth_wxPropertyGridPageState_IsInNonCatMode, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_IsInNonCatMode)},
    {SIP_MLNAME_CAST(sipName_OnClientWidthChange), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_OnClientWidthChange), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_OnClientWidthChange)},
    {SIP_MLNAME_CAST(sipName_PrepareAfterItemsAdded), meth_wxPropertyGridPageState_PrepareAfterItemsAdded, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_PrepareAfterItemsAdded)},
    {SIP_MLNAME_CAST(sipName_PropagateColSizeDec), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_PropagateColSizeDec), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_PropagateColSizeDec)},
    {SIP_MLNAME_CAST(sipName_RecalculateVirtualHeight), meth_wxPropertyGridPageState_RecalculateVirtualHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_RecalculateVirtualHeight)},
    {SIP_MLNAME_CAST(sipName_ResetColumnSizes), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_ResetColumnSizes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_ResetColumnSizes)},
    {SIP_MLNAME_CAST(sipName_SetColumnCount), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_SetColumnCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_SetColumnCount)},
    {SIP_MLNAME_CAST(sipName_SetSplitterLeft), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_SetSplitterLeft), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_SetSplitterLeft)},
    {SIP_MLNAME_CAST(sipName_SetVirtualWidth), SIP_MLMETH_CAST(meth_wxPropertyGridPageState_SetVirtualWidth), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_SetVirtualWidth)},
    {SIP_MLNAME_CAST(sipName_VirtualHeightChanged), meth_wxPropertyGridPageState_VirtualHeightChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPropertyGridPageState_VirtualHeightChanged)}
};

sipVariableDef variables_wxPropertyGridPageState[] = {
    {PropertyVariable, sipName_VirtualWidth, &methods_wxPropertyGridPageState[42], &methods_wxPropertyGridPageState[53], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_VirtualHeight, &methods_wxPropertyGridPageState[41], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Selection, &methods_wxPropertyGridPageState[40], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_LastItem, &methods_wxPropertyGridPageState[38], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Grid, &methods_wxPropertyGridPageState[37], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ColumnCount, &methods_wxPropertyGridPageState[33], &methods_wxPropertyGridPageState[51], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ActualVirtualHeight, &methods_wxPropertyGridPageState[32], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxPropertyGridPageState, "PropertyGridPageState()\n"
"\n"
"Contains low-level property page information (properties, column\n"
"widths, etc.) of a single wxPropertyGrid or single wxPropertyGridPage.");


sipClassTypeDef sipTypeDef__propgrid_wxPropertyGridPageState = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxPropertyGridPageState,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_PropertyGridPageState,
        {0, 0, 1},
        55, methods_wxPropertyGridPageState,
        0, SIP_NULLPTR,
        7, variables_wxPropertyGridPageState,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxPropertyGridPageState,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_wxPropertyGridPageState,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxPropertyGridPageState,
    assign_wxPropertyGridPageState,
    array_wxPropertyGridPageState,
    copy_wxPropertyGridPageState,
    release_wxPropertyGridPageState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
