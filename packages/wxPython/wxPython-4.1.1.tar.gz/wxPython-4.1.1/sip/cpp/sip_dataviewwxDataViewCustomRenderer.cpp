/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_dataview.h"

        #include <wx/dataview.h>

        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dc.h>
        #include <wx/window.h>
        #include <wx/dataview.h>
        #include <wx/event.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxDataViewCustomRenderer : public  ::wxDataViewCustomRenderer
{
public:
    sipwxDataViewCustomRenderer(const  ::wxString&, ::wxDataViewCellMode,int);
    virtual ~sipwxDataViewCustomRenderer();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::wxDataViewCtrl* sipProtect_GetView() const;
     ::wxSize sipProtect_GetTextExtent(const  ::wxString&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool StartDrag(const  ::wxPoint&,const  ::wxRect&, ::wxDataViewModel*,const  ::wxDataViewItem&,uint) SIP_OVERRIDE;
    bool Render( ::wxRect, ::wxDC*,int) SIP_OVERRIDE;
    bool Activate( ::wxRect, ::wxDataViewModel*,const  ::wxDataViewItem&,uint) SIP_OVERRIDE;
    bool LeftClick( ::wxPoint, ::wxRect, ::wxDataViewModel*,const  ::wxDataViewItem&,uint) SIP_OVERRIDE;
     ::wxSize GetSize() const SIP_OVERRIDE;
    bool ActivateCell(const  ::wxRect&, ::wxDataViewModel*,const  ::wxDataViewItem&,uint,const  ::wxMouseEvent*) SIP_OVERRIDE;
    int GetAlignment() const SIP_OVERRIDE;
     ::wxDataViewCellMode GetMode() const SIP_OVERRIDE;
    bool GetValue( ::wxVariant&) const SIP_OVERRIDE;
    void SetAlignment(int) SIP_OVERRIDE;
    bool SetValue(const  ::wxVariant&) SIP_OVERRIDE;
    bool Validate( ::wxDVCVariant&) SIP_OVERRIDE;
    bool HasEditorCtrl() const SIP_OVERRIDE;
     ::wxWindow* CreateEditorCtrl( ::wxWindow*, ::wxRect,const  ::wxVariant&) SIP_OVERRIDE;
    bool GetValueFromEditorCtrl( ::wxWindow*, ::wxVariant&) SIP_OVERRIDE;
    bool StartEditing(const  ::wxDataViewItem&, ::wxRect) SIP_OVERRIDE;
    void CancelEditing() SIP_OVERRIDE;
    bool FinishEditing() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxDataViewCustomRenderer(const sipwxDataViewCustomRenderer &);
    sipwxDataViewCustomRenderer &operator = (const sipwxDataViewCustomRenderer &);

    char sipPyMethods[18];
};

sipwxDataViewCustomRenderer::sipwxDataViewCustomRenderer(const  ::wxString& varianttype, ::wxDataViewCellMode mode,int align):  ::wxDataViewCustomRenderer(varianttype,mode,align), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDataViewCustomRenderer::~sipwxDataViewCustomRenderer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxDataViewCustomRenderer::StartDrag(const  ::wxPoint& cursor,const  ::wxRect& cell, ::wxDataViewModel*model,const  ::wxDataViewItem& item,uint col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_StartDrag);

    if (!sipMeth)
        return  ::wxDataViewCustomRenderer::StartDrag(cursor,cell,model,item,col);

    extern bool sipVH__dataview_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPoint&,const  ::wxRect&, ::wxDataViewModel*,const  ::wxDataViewItem&,uint);

    return sipVH__dataview_36(sipGILState, 0, sipPySelf, sipMeth, cursor, cell, model, item, col);
}

bool sipwxDataViewCustomRenderer::Render( ::wxRect cell, ::wxDC*dc,int state)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_DataViewCustomRenderer,sipName_Render);

    if (!sipMeth)
        return 0;

    extern bool sipVH__dataview_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRect, ::wxDC*,int);

    return sipVH__dataview_35(sipGILState, 0, sipPySelf, sipMeth, cell, dc, state);
}

bool sipwxDataViewCustomRenderer::Activate( ::wxRect cell, ::wxDataViewModel*model,const  ::wxDataViewItem& item,uint col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_Activate);

    if (!sipMeth)
        return  ::wxDataViewCustomRenderer::Activate(cell,model,item,col);

    extern bool sipVH__dataview_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRect, ::wxDataViewModel*,const  ::wxDataViewItem&,uint);

    return sipVH__dataview_34(sipGILState, 0, sipPySelf, sipMeth, cell, model, item, col);
}

bool sipwxDataViewCustomRenderer::LeftClick( ::wxPoint cursor, ::wxRect cell, ::wxDataViewModel*model,const  ::wxDataViewItem& item,uint col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_LeftClick);

    if (!sipMeth)
        return  ::wxDataViewCustomRenderer::LeftClick(cursor,cell,model,item,col);

    extern bool sipVH__dataview_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPoint, ::wxRect, ::wxDataViewModel*,const  ::wxDataViewItem&,uint);

    return sipVH__dataview_33(sipGILState, 0, sipPySelf, sipMeth, cursor, cell, model, item, col);
}

 ::wxSize sipwxDataViewCustomRenderer::GetSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_DataViewCustomRenderer,sipName_GetSize);

    if (!sipMeth)
        return  ::wxSize();

    extern  ::wxSize sipVH__dataview_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_32(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewCustomRenderer::ActivateCell(const  ::wxRect& cell, ::wxDataViewModel*model,const  ::wxDataViewItem& item,uint col,const  ::wxMouseEvent*mouseEvent)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_ActivateCell);

    if (!sipMeth)
        return  ::wxDataViewCustomRenderer::ActivateCell(cell,model,item,col,mouseEvent);

    extern bool sipVH__dataview_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRect&, ::wxDataViewModel*,const  ::wxDataViewItem&,uint,const  ::wxMouseEvent*);

    return sipVH__dataview_31(sipGILState, 0, sipPySelf, sipMeth, cell, model, item, col, mouseEvent);
}

int sipwxDataViewCustomRenderer::GetAlignment() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_GetAlignment);

    if (!sipMeth)
        return  ::wxDataViewCustomRenderer::GetAlignment();

    extern int sipVH__dataview_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_21(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxDataViewCellMode sipwxDataViewCustomRenderer::GetMode() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_GetMode);

    if (!sipMeth)
        return  ::wxDataViewCustomRenderer::GetMode();

    extern  ::wxDataViewCellMode sipVH__dataview_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_22(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewCustomRenderer::GetValue( ::wxVariant& value) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,sipName_DataViewCustomRenderer,sipName_GetValue);

    if (!sipMeth)
        return 0;

    extern bool sipVH__dataview_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxVariant&);

    return sipVH__dataview_23(sipGILState, 0, sipPySelf, sipMeth, value);
}

void sipwxDataViewCustomRenderer::SetAlignment(int align)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_SetAlignment);

    if (!sipMeth)
    {
         ::wxDataViewCustomRenderer::SetAlignment(align);
        return;
    }

    extern void sipVH__dataview_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__dataview_24(sipGILState, 0, sipPySelf, sipMeth, align);
}

bool sipwxDataViewCustomRenderer::SetValue(const  ::wxVariant& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_DataViewCustomRenderer,sipName_SetValue);

    if (!sipMeth)
        return 0;

    extern bool sipVH__dataview_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxVariant&);

    return sipVH__dataview_25(sipGILState, 0, sipPySelf, sipMeth, value);
}

bool sipwxDataViewCustomRenderer::Validate( ::wxDVCVariant& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::wxDataViewCustomRenderer::Validate(value);

    extern bool sipVH__dataview_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDVCVariant&);

    return sipVH__dataview_26(sipGILState, 0, sipPySelf, sipMeth, value);
}

bool sipwxDataViewCustomRenderer::HasEditorCtrl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_HasEditorCtrl);

    if (!sipMeth)
        return  ::wxDataViewCustomRenderer::HasEditorCtrl();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sipwxDataViewCustomRenderer::CreateEditorCtrl( ::wxWindow*parent, ::wxRect labelRect,const  ::wxVariant& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_CreateEditorCtrl);

    if (!sipMeth)
        return  ::wxDataViewCustomRenderer::CreateEditorCtrl(parent,labelRect,value);

    extern  ::wxWindow* sipVH__dataview_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*, ::wxRect,const  ::wxVariant&);

    return sipVH__dataview_27(sipGILState, 0, sipPySelf, sipMeth, parent, labelRect, value);
}

bool sipwxDataViewCustomRenderer::GetValueFromEditorCtrl( ::wxWindow*editor, ::wxVariant& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_GetValueFromEditorCtrl);

    if (!sipMeth)
        return  ::wxDataViewCustomRenderer::GetValueFromEditorCtrl(editor,value);

    extern bool sipVH__dataview_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*, ::wxVariant&);

    return sipVH__dataview_30(sipGILState, 0, sipPySelf, sipMeth, editor, value);
}

bool sipwxDataViewCustomRenderer::StartEditing(const  ::wxDataViewItem& item, ::wxRect labelRect)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_StartEditing);

    if (!sipMeth)
        return  ::wxDataViewCustomRenderer::StartEditing(item,labelRect);

    extern bool sipVH__dataview_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&, ::wxRect);

    return sipVH__dataview_29(sipGILState, 0, sipPySelf, sipMeth, item, labelRect);
}

void sipwxDataViewCustomRenderer::CancelEditing()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_CancelEditing);

    if (!sipMeth)
    {
         ::wxDataViewCustomRenderer::CancelEditing();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewCustomRenderer::FinishEditing()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_FinishEditing);

    if (!sipMeth)
        return  ::wxDataViewCustomRenderer::FinishEditing();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxDataViewCtrl* sipwxDataViewCustomRenderer::sipProtect_GetView() const
{
    return  ::wxDataViewRenderer::GetView();
}

 ::wxSize sipwxDataViewCustomRenderer::sipProtect_GetTextExtent(const  ::wxString& str) const
{
    return  ::wxDataViewCustomRenderer::GetTextExtent(str);
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_GetView, "GetView() -> DataViewCtrl");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_GetView(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_GetView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const sipwxDataViewCustomRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCustomRenderer, &sipCpp))
        {
             ::wxDataViewCtrl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_GetView();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewCtrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_GetView, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_GetDefaultType, "GetDefaultType() -> String\n"
"\n"
"Returns the wxVariant type used with this renderer.");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_GetDefaultType(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_GetDefaultType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString( ::wxDataViewCustomRenderer::GetDefaultType());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_GetDefaultType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_ActivateCell, "ActivateCell(cell, model, item, col, mouseEvent) -> bool\n"
"\n"
"Override this to react to cell activation.");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_ActivateCell(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_ActivateCell(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRect* cell;
        int cellState = 0;
         ::wxDataViewModel* model;
        const  ::wxDataViewItem* item;
        uint col;
        const  ::wxMouseEvent* mouseEvent;
         ::wxDataViewCustomRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cell,
            sipName_model,
            sipName_item,
            sipName_col,
            sipName_mouseEvent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J8J9uJ8", &sipSelf, sipType_wxDataViewCustomRenderer, &sipCpp, sipType_wxRect, &cell, &cellState, sipType_wxDataViewModel, &model, sipType_wxDataViewItem, &item, &col, sipType_wxMouseEvent, &mouseEvent))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCustomRenderer::ActivateCell(*cell,model,*item,col,mouseEvent) : sipCpp->ActivateCell(*cell,model,*item,col,mouseEvent));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(cell),sipType_wxRect,cellState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_ActivateCell, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_CreateEditorCtrl, "CreateEditorCtrl(parent, labelRect, value) -> wx.Window\n"
"\n"
"Override this to create the actual editor control once editing is\n"
"about to start.");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_CreateEditorCtrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_CreateEditorCtrl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindow* parent;
         ::wxRect* labelRect;
        int labelRectState = 0;
        const  ::wxDVCVariant* value;
        int valueState = 0;
         ::wxDataViewCustomRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_labelRect,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1J1", &sipSelf, sipType_wxDataViewCustomRenderer, &sipCpp, sipType_wxWindow, &parent, sipType_wxRect, &labelRect, &labelRectState, sipType_wxDVCVariant,&value, &valueState))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCustomRenderer::CreateEditorCtrl(parent,*labelRect,*value) : sipCpp->CreateEditorCtrl(parent,*labelRect,*value));
            Py_END_ALLOW_THREADS
            sipReleaseType(labelRect,sipType_wxRect,labelRectState);
            sipReleaseType(const_cast< ::wxDVCVariant *>(value),sipType_wxDVCVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_CreateEditorCtrl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_GetAttr, "GetAttr() -> DataViewItemAttr\n"
"\n"
"Return the attribute to be used for rendering.");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_GetAttr(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_GetAttr(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewCustomRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCustomRenderer, &sipCpp))
        {
             ::wxDataViewItemAttr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataViewItemAttr(sipCpp->GetAttr());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataViewItemAttr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_GetAttr, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_GetSize, "GetSize() -> wx.Size\n"
"\n"
"Return size required to show content.");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_GetSize(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_GetSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxDataViewCustomRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCustomRenderer, &sipCpp))
        {
             ::wxSize*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_DataViewCustomRenderer, sipName_GetSize);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetSize());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_GetSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_GetValueFromEditorCtrl, "GetValueFromEditorCtrl(editor) -> value\n"
"\n"
"Override this so that the renderer can get the value from the editor\n"
"control (pointed to by editor):");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_GetValueFromEditorCtrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_GetValueFromEditorCtrl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindow* editor;
         ::wxDVCVariant* value;
         ::wxDataViewCustomRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_editor,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxDataViewCustomRenderer, &sipCpp, sipType_wxWindow, &editor))
        {
            value = new  ::wxDVCVariant();

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewCustomRenderer::GetValueFromEditorCtrl(editor,*value) : sipCpp->GetValueFromEditorCtrl(editor,*value));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(value,sipType_wxDVCVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_GetValueFromEditorCtrl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_HasEditorCtrl, "HasEditorCtrl() -> bool\n"
"\n"
"Override this and make it return true in order to indicate that this\n"
"renderer supports in-place editing.");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_HasEditorCtrl(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_HasEditorCtrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewCustomRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCustomRenderer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCustomRenderer::HasEditorCtrl() : sipCpp->HasEditorCtrl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_HasEditorCtrl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_LeftClick, "LeftClick(cursor, cell, model, item, col) -> bool\n"
"\n"
"Override this to react to a left click.");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_LeftClick(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_LeftClick(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPoint* cursor;
        int cursorState = 0;
         ::wxRect* cell;
        int cellState = 0;
         ::wxDataViewModel* model;
        const  ::wxDataViewItem* item;
        uint col;
         ::wxDataViewCustomRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cursor,
            sipName_cell,
            sipName_model,
            sipName_item,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1J8J9u", &sipSelf, sipType_wxDataViewCustomRenderer, &sipCpp, sipType_wxPoint, &cursor, &cursorState, sipType_wxRect, &cell, &cellState, sipType_wxDataViewModel, &model, sipType_wxDataViewItem, &item, &col))
        {
            bool sipRes;

            if (sipDeprecated(sipName_DataViewCustomRenderer,sipName_LeftClick) < 0)
                return SIP_NULLPTR;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCustomRenderer::LeftClick(*cursor,*cell,model,*item,col) : sipCpp->LeftClick(*cursor,*cell,model,*item,col));
            Py_END_ALLOW_THREADS
            sipReleaseType(cursor,sipType_wxPoint,cursorState);
            sipReleaseType(cell,sipType_wxRect,cellState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_LeftClick, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_Activate, "Activate(cell, model, item, col) -> bool\n"
"\n"
"Override this to react to the activation of a cell.");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_Activate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_Activate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRect* cell;
        int cellState = 0;
         ::wxDataViewModel* model;
        const  ::wxDataViewItem* item;
        uint col;
         ::wxDataViewCustomRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cell,
            sipName_model,
            sipName_item,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J8J9u", &sipSelf, sipType_wxDataViewCustomRenderer, &sipCpp, sipType_wxRect, &cell, &cellState, sipType_wxDataViewModel, &model, sipType_wxDataViewItem, &item, &col))
        {
            bool sipRes;

            if (sipDeprecated(sipName_DataViewCustomRenderer,sipName_Activate) < 0)
                return SIP_NULLPTR;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCustomRenderer::Activate(*cell,model,*item,col) : sipCpp->Activate(*cell,model,*item,col));
            Py_END_ALLOW_THREADS
            sipReleaseType(cell,sipType_wxRect,cellState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_Activate, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_Render, "Render(cell, dc, state) -> bool\n"
"\n"
"Override this to render the cell.");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_Render(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_Render(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxRect* cell;
        int cellState = 0;
         ::wxDC* dc;
        int state;
         ::wxDataViewCustomRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cell,
            sipName_dc,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J8i", &sipSelf, sipType_wxDataViewCustomRenderer, &sipCpp, sipType_wxRect, &cell, &cellState, sipType_wxDC, &dc, &state))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_DataViewCustomRenderer, sipName_Render);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Render(*cell,dc,state);
            Py_END_ALLOW_THREADS
            sipReleaseType(cell,sipType_wxRect,cellState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_Render, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_RenderText, "RenderText(text, xoffset, cell, dc, state)\n"
"\n"
"This method should be called from within Render() whenever you need to\n"
"render simple text.");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_RenderText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_RenderText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* text;
        int textState = 0;
        int xoffset;
         ::wxRect* cell;
        int cellState = 0;
         ::wxDC* dc;
        int state;
         ::wxDataViewCustomRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
            sipName_xoffset,
            sipName_cell,
            sipName_dc,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1iJ1J8i", &sipSelf, sipType_wxDataViewCustomRenderer, &sipCpp, sipType_wxString,&text, &textState, &xoffset, sipType_wxRect, &cell, &cellState, sipType_wxDC, &dc, &state))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RenderText(*text,xoffset,*cell,dc,state);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);
            sipReleaseType(cell,sipType_wxRect,cellState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_RenderText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_StartDrag, "StartDrag(cursor, cell, model, item, col) -> bool\n"
"\n"
"Override this to start a drag operation.");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_StartDrag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_StartDrag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPoint* cursor;
        int cursorState = 0;
        const  ::wxRect* cell;
        int cellState = 0;
         ::wxDataViewModel* model;
        const  ::wxDataViewItem* item;
        uint col;
         ::wxDataViewCustomRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cursor,
            sipName_cell,
            sipName_model,
            sipName_item,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1J8J9u", &sipSelf, sipType_wxDataViewCustomRenderer, &sipCpp, sipType_wxPoint, &cursor, &cursorState, sipType_wxRect, &cell, &cellState, sipType_wxDataViewModel, &model, sipType_wxDataViewItem, &item, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCustomRenderer::StartDrag(*cursor,*cell,model,*item,col) : sipCpp->StartDrag(*cursor,*cell,model,*item,col));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(cursor),sipType_wxPoint,cursorState);
            sipReleaseType(const_cast< ::wxRect *>(cell),sipType_wxRect,cellState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_StartDrag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewCustomRenderer_GetTextExtent, "GetTextExtent(str) -> wx.Size\n"
"\n"
"Helper for GetSize() implementations, respects attributes.");

extern "C" {static PyObject *meth_wxDataViewCustomRenderer_GetTextExtent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCustomRenderer_GetTextExtent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* str;
        int strState = 0;
        const sipwxDataViewCustomRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_str,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxDataViewCustomRenderer, &sipCpp, sipType_wxString,&str, &strState))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtect_GetTextExtent(*str));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(str),sipType_wxString,strState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewCustomRenderer, sipName_GetTextExtent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxDataViewCustomRenderer(void *, const sipTypeDef *);}
static void *cast_wxDataViewCustomRenderer(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxDataViewCustomRenderer *sipCpp = reinterpret_cast< ::wxDataViewCustomRenderer *>(sipCppV);

    if (targetType == sipType_wxDataViewRenderer)
        return static_cast< ::wxDataViewRenderer *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxDataViewCustomRenderer(void *, int);}
static void release_wxDataViewCustomRenderer(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxDataViewCustomRenderer *>(sipCppV);
    else
        delete reinterpret_cast< ::wxDataViewCustomRenderer *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxDataViewCustomRenderer(sipSimpleWrapper *);}
static void dealloc_wxDataViewCustomRenderer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxDataViewCustomRenderer *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxDataViewCustomRenderer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxDataViewCustomRenderer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxDataViewCustomRenderer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxDataViewCustomRenderer *sipCpp = SIP_NULLPTR;

    {
        const  ::wxString& varianttypedef = wxDataViewCustomRenderer::GetDefaultType();
        const  ::wxString* varianttype = &varianttypedef;
        int varianttypeState = 0;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int align = wxDVR_DEFAULT_ALIGNMENT;

        static const char *sipKwdList[] = {
            sipName_varianttype,
            sipName_mode,
            sipName_align,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1Ei", sipType_wxString,&varianttype, &varianttypeState, sipType_wxDataViewCellMode, &mode, &align))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxDataViewCustomRenderer(*varianttype,mode,align);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(varianttype),sipType_wxString,varianttypeState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxDataViewCustomRenderer[] = {{24, 255, 1}};


static PyMethodDef methods_wxDataViewCustomRenderer[] = {
    {SIP_MLNAME_CAST(sipName_Activate), SIP_MLMETH_CAST(meth_wxDataViewCustomRenderer_Activate), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCustomRenderer_Activate)},
    {SIP_MLNAME_CAST(sipName_ActivateCell), SIP_MLMETH_CAST(meth_wxDataViewCustomRenderer_ActivateCell), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCustomRenderer_ActivateCell)},
    {SIP_MLNAME_CAST(sipName_CreateEditorCtrl), SIP_MLMETH_CAST(meth_wxDataViewCustomRenderer_CreateEditorCtrl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCustomRenderer_CreateEditorCtrl)},
    {SIP_MLNAME_CAST(sipName_GetAttr), meth_wxDataViewCustomRenderer_GetAttr, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCustomRenderer_GetAttr)},
    {SIP_MLNAME_CAST(sipName_GetDefaultType), meth_wxDataViewCustomRenderer_GetDefaultType, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCustomRenderer_GetDefaultType)},
    {SIP_MLNAME_CAST(sipName_GetSize), meth_wxDataViewCustomRenderer_GetSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCustomRenderer_GetSize)},
    {SIP_MLNAME_CAST(sipName_GetTextExtent), SIP_MLMETH_CAST(meth_wxDataViewCustomRenderer_GetTextExtent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCustomRenderer_GetTextExtent)},
    {SIP_MLNAME_CAST(sipName_GetValueFromEditorCtrl), SIP_MLMETH_CAST(meth_wxDataViewCustomRenderer_GetValueFromEditorCtrl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCustomRenderer_GetValueFromEditorCtrl)},
    {SIP_MLNAME_CAST(sipName_GetView), meth_wxDataViewCustomRenderer_GetView, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_HasEditorCtrl), meth_wxDataViewCustomRenderer_HasEditorCtrl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCustomRenderer_HasEditorCtrl)},
    {SIP_MLNAME_CAST(sipName_LeftClick), SIP_MLMETH_CAST(meth_wxDataViewCustomRenderer_LeftClick), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCustomRenderer_LeftClick)},
    {SIP_MLNAME_CAST(sipName_Render), SIP_MLMETH_CAST(meth_wxDataViewCustomRenderer_Render), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCustomRenderer_Render)},
    {SIP_MLNAME_CAST(sipName_RenderText), SIP_MLMETH_CAST(meth_wxDataViewCustomRenderer_RenderText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCustomRenderer_RenderText)},
    {SIP_MLNAME_CAST(sipName_StartDrag), SIP_MLMETH_CAST(meth_wxDataViewCustomRenderer_StartDrag), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCustomRenderer_StartDrag)}
};

sipVariableDef variables_wxDataViewCustomRenderer[] = {
    {PropertyVariable, sipName_Size, &methods_wxDataViewCustomRenderer[5], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Attr, &methods_wxDataViewCustomRenderer[3], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxDataViewCustomRenderer, "DataViewCustomRenderer(varianttype=DataViewCustomRenderer.GetDefaultType(), mode=DATAVIEW_CELL_INERT, align=DVR_DEFAULT_ALIGNMENT)\n"
"\n"
"You need to derive a new class from wxDataViewCustomRenderer in order\n"
"to write a new renderer.");


sipClassTypeDef sipTypeDef__dataview_wxDataViewCustomRenderer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxDataViewCustomRenderer,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_DataViewCustomRenderer,
        {0, 0, 1},
        14, methods_wxDataViewCustomRenderer,
        0, SIP_NULLPTR,
        2, variables_wxDataViewCustomRenderer,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxDataViewCustomRenderer,
    -1,
    -1,
    supers_wxDataViewCustomRenderer,
    SIP_NULLPTR,
    init_type_wxDataViewCustomRenderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxDataViewCustomRenderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxDataViewCustomRenderer,
    cast_wxDataViewCustomRenderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
