/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/dataobj.h>

        #include <wx/dataobj.h>
        #include <wx/dataobj.h>
        #include <wx/dataobj.h>
    PyObject* _wxDataObjectComposite_GetAllFormats(const wxDataObjectComposite* self, wxDataObject::Direction dir)
    {
        size_t count = self->GetFormatCount(dir);
        wxDataFormat* formats = new wxDataFormat[count];
        self->GetAllFormats(formats, dir);
        wxPyThreadBlocker blocker;
        PyObject* list = PyList_New(count);
        for (size_t i=0; i<count; i++) {
            wxDataFormat* format = new wxDataFormat(formats[i]);
            PyObject* obj = wxPyConstructObject((void*)format, wxT("wxDataFormat"), true);
            PyList_SET_ITEM(list, i, obj); // PyList_SET_ITEM steals a reference
        }
        delete [] formats;
        return list;
    }
    bool _wxDataObjectComposite_SetData(wxDataObjectComposite* self, const wxDataFormat* format, wxPyBuffer* buf)
    {
        return self->SetData(*format, buf->m_len, buf->m_ptr);
    }


class sipwxDataObjectComposite : public  ::wxDataObjectComposite
{
public:
    sipwxDataObjectComposite();
    virtual ~sipwxDataObjectComposite();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void GetAllFormats( ::wxDataFormat*, ::wxDataObject::Direction) const SIP_OVERRIDE;
    size_t GetFormatCount( ::wxDataObject::Direction) const SIP_OVERRIDE;
     ::wxDataFormat GetPreferredFormat( ::wxDataObject::Direction) const SIP_OVERRIDE;
    bool SetData(const  ::wxDataFormat&,size_t,const void*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxDataObjectComposite(const sipwxDataObjectComposite &);
    sipwxDataObjectComposite &operator = (const sipwxDataObjectComposite &);

    char sipPyMethods[4];
};

sipwxDataObjectComposite::sipwxDataObjectComposite():  ::wxDataObjectComposite(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDataObjectComposite::~sipwxDataObjectComposite()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxDataObjectComposite::GetAllFormats( ::wxDataFormat*formats, ::wxDataObject::Direction dir) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_GetAllFormats);

    if (!sipMeth)
    {
         ::wxDataObjectComposite::GetAllFormats(formats,dir);
        return;
    }

    extern void sipVH__core_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDataFormat*, ::wxDataObject::Direction);

    sipVH__core_61(sipGILState, 0, sipPySelf, sipMeth, formats, dir);
}

size_t sipwxDataObjectComposite::GetFormatCount( ::wxDataObject::Direction dir) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_GetFormatCount);

    if (!sipMeth)
        return  ::wxDataObjectComposite::GetFormatCount(dir);

    extern size_t sipVH__core_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDataObject::Direction);

    return sipVH__core_64(sipGILState, 0, sipPySelf, sipMeth, dir);
}

 ::wxDataFormat sipwxDataObjectComposite::GetPreferredFormat( ::wxDataObject::Direction dir) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_GetPreferredFormat);

    if (!sipMeth)
        return  ::wxDataObjectComposite::GetPreferredFormat(dir);

    extern  ::wxDataFormat sipVH__core_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDataObject::Direction);

    return sipVH__core_65(sipGILState, 0, sipPySelf, sipMeth, dir);
}

bool sipwxDataObjectComposite::SetData(const  ::wxDataFormat& format,size_t len,const void*buf)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_SetData);

    if (!sipMeth)
        return  ::wxDataObjectComposite::SetData(format,len,buf);

    extern bool sipVH__core_74(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataFormat&,size_t,const void*);

    return sipVH__core_74(sipGILState, 0, sipPySelf, sipMeth, format, len, buf);
}


PyDoc_STRVAR(doc_wxDataObjectComposite_Add, "Add(dataObject, preferred=False)\n"
"\n"
"Adds the dataObject to the list of supported objects and it becomes\n"
"the preferred object if preferred is true.");

extern "C" {static PyObject *meth_wxDataObjectComposite_Add(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataObjectComposite_Add(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDataObjectSimple* dataObject;
        bool preferred = 0;
         ::wxDataObjectComposite *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dataObject,
            sipName_preferred,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:|b", &sipSelf, sipType_wxDataObjectComposite, &sipCpp, sipType_wxDataObjectSimple, &dataObject, &preferred))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Add(dataObject,preferred);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataObjectComposite, sipName_Add, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataObjectComposite_GetReceivedFormat, "GetReceivedFormat() -> DataFormat\n"
"\n"
"Report the format passed to the SetData() method.");

extern "C" {static PyObject *meth_wxDataObjectComposite_GetReceivedFormat(PyObject *, PyObject *);}
static PyObject *meth_wxDataObjectComposite_GetReceivedFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataObjectComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataObjectComposite, &sipCpp))
        {
             ::wxDataFormat*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataFormat(sipCpp->GetReceivedFormat());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataObjectComposite, sipName_GetReceivedFormat, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataObjectComposite_GetObject, "GetObject(format, dir=DataObject.Get) -> DataObjectSimple\n"
"\n"
"Returns the pointer to the object which supports the passed format for\n"
"the specified direction.");

extern "C" {static PyObject *meth_wxDataObjectComposite_GetObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataObjectComposite_GetObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataFormat* format;
         ::wxDataObject::Direction dir = wxDataObject::Get;
        const  ::wxDataObjectComposite *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_wxDataObjectComposite, &sipCpp, sipType_wxDataFormat, &format, sipType_wxDataObject_Direction, &dir))
        {
             ::wxDataObjectSimple*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetObject(*format,dir);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataObjectSimple,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataObjectComposite, sipName_GetObject, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataObjectComposite_GetAllFormats, "GetAllFormats(dir=DataObject.Get)\n"
"\n"
"Returns a list of wx.DataFormat objects which this data object\n"
"supports transferring in the given direction.");

extern "C" {static PyObject *meth_wxDataObjectComposite_GetAllFormats(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataObjectComposite_GetAllFormats(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataObject::Direction dir = wxDataObject::Get;
        const  ::wxDataObjectComposite *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_wxDataObjectComposite, &sipCpp, sipType_wxDataObject_Direction, &dir))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataObjectComposite_GetAllFormats(sipCpp, dir);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataObjectComposite, sipName_GetAllFormats, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataObjectComposite_SetData, "SetData(format, buf) -> bool");

extern "C" {static PyObject *meth_wxDataObjectComposite_SetData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataObjectComposite_SetData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataFormat* format;
         ::wxPyBuffer* buf;
        int bufState = 0;
         ::wxDataObjectComposite *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
            sipName_buf,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J0", &sipSelf, sipType_wxDataObjectComposite, &sipCpp, sipType_wxDataFormat, &format, sipType_wxPyBuffer,&buf, &bufState))
        {
            bool sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataObjectComposite_SetData(sipCpp, format, buf);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
            sipReleaseType(buf,sipType_wxPyBuffer,bufState);

            if (sipIsErr)
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataObjectComposite, sipName_SetData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataObjectComposite_GetFormatCount, "GetFormatCount(self, dir: DataObject.Direction = wxDataObject.Get) -> int");

extern "C" {static PyObject *meth_wxDataObjectComposite_GetFormatCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataObjectComposite_GetFormatCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataObject::Direction dir =  ::wxDataObject::Get;
        const  ::wxDataObjectComposite *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_wxDataObjectComposite, &sipCpp, sipType_wxDataObject_Direction, &dir))
        {
            size_t sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataObjectComposite::GetFormatCount(dir) : sipCpp->GetFormatCount(dir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataObjectComposite, sipName_GetFormatCount, doc_wxDataObjectComposite_GetFormatCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataObjectComposite_GetPreferredFormat, "GetPreferredFormat(self, dir: DataObject.Direction = wxDataObject.Get) -> DataFormat");

extern "C" {static PyObject *meth_wxDataObjectComposite_GetPreferredFormat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataObjectComposite_GetPreferredFormat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataObject::Direction dir =  ::wxDataObject::Get;
        const  ::wxDataObjectComposite *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_wxDataObjectComposite, &sipCpp, sipType_wxDataObject_Direction, &dir))
        {
             ::wxDataFormat*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataFormat((sipSelfWasArg ? sipCpp-> ::wxDataObjectComposite::GetPreferredFormat(dir) : sipCpp->GetPreferredFormat(dir)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataFormat,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataObjectComposite, sipName_GetPreferredFormat, doc_wxDataObjectComposite_GetPreferredFormat);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_wxDataObjectComposite_GetDataSize(PyObject *, PyObject *);}
static PyObject *meth_wxDataObjectComposite_GetDataSize(PyObject *, PyObject *)
{

    sipNoMethod(SIP_NULLPTR, sipName_DataObjectComposite, sipName_GetDataSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_wxDataObjectComposite_GetDataHere(PyObject *, PyObject *);}
static PyObject *meth_wxDataObjectComposite_GetDataHere(PyObject *, PyObject *)
{

    sipNoMethod(SIP_NULLPTR, sipName_DataObjectComposite, sipName_GetDataHere, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxDataObjectComposite(void *, const sipTypeDef *);}
static void *cast_wxDataObjectComposite(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxDataObjectComposite *sipCpp = reinterpret_cast< ::wxDataObjectComposite *>(sipCppV);

    if (targetType == sipType_wxDataObject)
        return static_cast< ::wxDataObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxDataObjectComposite(void *, int);}
static void release_wxDataObjectComposite(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxDataObjectComposite *>(sipCppV);
    else
        delete reinterpret_cast< ::wxDataObjectComposite *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxDataObjectComposite(Py_ssize_t);}
static void *array_wxDataObjectComposite(Py_ssize_t sipNrElem)
{
    return new  ::wxDataObjectComposite[sipNrElem];
}


extern "C" {static void dealloc_wxDataObjectComposite(sipSimpleWrapper *);}
static void dealloc_wxDataObjectComposite(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxDataObjectComposite *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxDataObjectComposite(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxDataObjectComposite(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxDataObjectComposite(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxDataObjectComposite *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxDataObjectComposite();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxDataObjectComposite[] = {{110, 255, 1}};


static PyMethodDef methods_wxDataObjectComposite[] = {
    {SIP_MLNAME_CAST(sipName_Add), SIP_MLMETH_CAST(meth_wxDataObjectComposite_Add), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataObjectComposite_Add)},
    {SIP_MLNAME_CAST(sipName_GetAllFormats), SIP_MLMETH_CAST(meth_wxDataObjectComposite_GetAllFormats), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataObjectComposite_GetAllFormats)},
    {SIP_MLNAME_CAST(sipName_GetDataHere), meth_wxDataObjectComposite_GetDataHere, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_GetDataSize), meth_wxDataObjectComposite_GetDataSize, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_GetFormatCount), SIP_MLMETH_CAST(meth_wxDataObjectComposite_GetFormatCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataObjectComposite_GetFormatCount)},
    {SIP_MLNAME_CAST(sipName_GetObject), SIP_MLMETH_CAST(meth_wxDataObjectComposite_GetObject), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataObjectComposite_GetObject)},
    {SIP_MLNAME_CAST(sipName_GetPreferredFormat), SIP_MLMETH_CAST(meth_wxDataObjectComposite_GetPreferredFormat), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataObjectComposite_GetPreferredFormat)},
    {SIP_MLNAME_CAST(sipName_GetReceivedFormat), meth_wxDataObjectComposite_GetReceivedFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataObjectComposite_GetReceivedFormat)},
    {SIP_MLNAME_CAST(sipName_SetData), SIP_MLMETH_CAST(meth_wxDataObjectComposite_SetData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataObjectComposite_SetData)}
};

sipVariableDef variables_wxDataObjectComposite[] = {
    {PropertyVariable, sipName_ReceivedFormat, &methods_wxDataObjectComposite[7], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_AllFormats, &methods_wxDataObjectComposite[1], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxDataObjectComposite, "DataObjectComposite()\n"
"\n"
"wxDataObjectComposite is the simplest wxDataObject derivation which\n"
"may be used to support multiple formats.");


sipClassTypeDef sipTypeDef__core_wxDataObjectComposite = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxDataObjectComposite,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_DataObjectComposite,
        {0, 0, 1},
        9, methods_wxDataObjectComposite,
        0, SIP_NULLPTR,
        2, variables_wxDataObjectComposite,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxDataObjectComposite,
    -1,
    -1,
    supers_wxDataObjectComposite,
    SIP_NULLPTR,
    init_type_wxDataObjectComposite,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxDataObjectComposite,
    SIP_NULLPTR,
    array_wxDataObjectComposite,
    SIP_NULLPTR,
    release_wxDataObjectComposite,
    cast_wxDataObjectComposite,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
