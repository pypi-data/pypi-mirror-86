/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_adv.h"

        #include <wx/laywin.h>

        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxQueryLayoutInfoEvent : public  ::wxQueryLayoutInfoEvent
{
public:
    sipwxQueryLayoutInfoEvent( ::wxWindowID);
    sipwxQueryLayoutInfoEvent(const  ::wxQueryLayoutInfoEvent&);
    virtual ~sipwxQueryLayoutInfoEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEvent* Clone() const SIP_OVERRIDE;
     ::wxEventCategory GetEventCategory() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxQueryLayoutInfoEvent(const sipwxQueryLayoutInfoEvent &);
    sipwxQueryLayoutInfoEvent &operator = (const sipwxQueryLayoutInfoEvent &);

    char sipPyMethods[2];
};

sipwxQueryLayoutInfoEvent::sipwxQueryLayoutInfoEvent( ::wxWindowID id):  ::wxQueryLayoutInfoEvent(id), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxQueryLayoutInfoEvent::sipwxQueryLayoutInfoEvent(const  ::wxQueryLayoutInfoEvent& a0):  ::wxQueryLayoutInfoEvent(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxQueryLayoutInfoEvent::~sipwxQueryLayoutInfoEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEvent* sipwxQueryLayoutInfoEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_Clone);

    if (!sipMeth)
        return  ::wxQueryLayoutInfoEvent::Clone();

    extern  ::wxEvent* sipVH__adv_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_27(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEventCategory sipwxQueryLayoutInfoEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxQueryLayoutInfoEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__adv_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_28(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxQueryLayoutInfoEvent_GetAlignment, "GetAlignment() -> LayoutAlignment\n"
"\n"
"Specifies the alignment of the window (which side of the remaining\n"
"parent client area the window sticks to).");

extern "C" {static PyObject *meth_wxQueryLayoutInfoEvent_GetAlignment(PyObject *, PyObject *);}
static PyObject *meth_wxQueryLayoutInfoEvent_GetAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxQueryLayoutInfoEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxQueryLayoutInfoEvent, &sipCpp))
        {
             ::wxLayoutAlignment sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetAlignment();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxLayoutAlignment);
        }
    }

    sipNoMethod(sipParseErr, sipName_QueryLayoutInfoEvent, sipName_GetAlignment, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxQueryLayoutInfoEvent_GetFlags, "GetFlags() -> int\n"
"\n"
"Returns the flags associated with this event.");

extern "C" {static PyObject *meth_wxQueryLayoutInfoEvent_GetFlags(PyObject *, PyObject *);}
static PyObject *meth_wxQueryLayoutInfoEvent_GetFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxQueryLayoutInfoEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxQueryLayoutInfoEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFlags();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QueryLayoutInfoEvent, sipName_GetFlags, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxQueryLayoutInfoEvent_GetOrientation, "GetOrientation() -> LayoutOrientation\n"
"\n"
"Returns the orientation that the event handler specified to the event\n"
"object.");

extern "C" {static PyObject *meth_wxQueryLayoutInfoEvent_GetOrientation(PyObject *, PyObject *);}
static PyObject *meth_wxQueryLayoutInfoEvent_GetOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxQueryLayoutInfoEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxQueryLayoutInfoEvent, &sipCpp))
        {
             ::wxLayoutOrientation sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetOrientation();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxLayoutOrientation);
        }
    }

    sipNoMethod(sipParseErr, sipName_QueryLayoutInfoEvent, sipName_GetOrientation, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxQueryLayoutInfoEvent_GetRequestedLength, "GetRequestedLength() -> int\n"
"\n"
"Returns the requested length of the window in the direction of the\n"
"window orientation.");

extern "C" {static PyObject *meth_wxQueryLayoutInfoEvent_GetRequestedLength(PyObject *, PyObject *);}
static PyObject *meth_wxQueryLayoutInfoEvent_GetRequestedLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxQueryLayoutInfoEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxQueryLayoutInfoEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetRequestedLength();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_QueryLayoutInfoEvent, sipName_GetRequestedLength, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxQueryLayoutInfoEvent_GetSize, "GetSize() -> wx.Size\n"
"\n"
"Returns the size that the event handler specified to the event object\n"
"as being the requested size of the window.");

extern "C" {static PyObject *meth_wxQueryLayoutInfoEvent_GetSize(PyObject *, PyObject *);}
static PyObject *meth_wxQueryLayoutInfoEvent_GetSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxQueryLayoutInfoEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxQueryLayoutInfoEvent, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetSize());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QueryLayoutInfoEvent, sipName_GetSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxQueryLayoutInfoEvent_SetAlignment, "SetAlignment(alignment)\n"
"\n"
"Call this to specify the alignment of the window (which side of the\n"
"remaining parent client area the window sticks to).");

extern "C" {static PyObject *meth_wxQueryLayoutInfoEvent_SetAlignment(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxQueryLayoutInfoEvent_SetAlignment(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxLayoutAlignment alignment;
         ::wxQueryLayoutInfoEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_alignment,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxQueryLayoutInfoEvent, &sipCpp, sipType_wxLayoutAlignment, &alignment))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetAlignment(alignment);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QueryLayoutInfoEvent, sipName_SetAlignment, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxQueryLayoutInfoEvent_SetFlags, "SetFlags(flags)\n"
"\n"
"Sets the flags associated with this event.");

extern "C" {static PyObject *meth_wxQueryLayoutInfoEvent_SetFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxQueryLayoutInfoEvent_SetFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int flags;
         ::wxQueryLayoutInfoEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxQueryLayoutInfoEvent, &sipCpp, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFlags(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QueryLayoutInfoEvent, sipName_SetFlags, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxQueryLayoutInfoEvent_SetOrientation, "SetOrientation(orientation)\n"
"\n"
"Call this to specify the orientation of the window.");

extern "C" {static PyObject *meth_wxQueryLayoutInfoEvent_SetOrientation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxQueryLayoutInfoEvent_SetOrientation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxLayoutOrientation orientation;
         ::wxQueryLayoutInfoEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_orientation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxQueryLayoutInfoEvent, &sipCpp, sipType_wxLayoutOrientation, &orientation))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetOrientation(orientation);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QueryLayoutInfoEvent, sipName_SetOrientation, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxQueryLayoutInfoEvent_SetRequestedLength, "SetRequestedLength(length)\n"
"\n"
"Sets the requested length of the window in the direction of the window\n"
"orientation.");

extern "C" {static PyObject *meth_wxQueryLayoutInfoEvent_SetRequestedLength(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxQueryLayoutInfoEvent_SetRequestedLength(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int length;
         ::wxQueryLayoutInfoEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxQueryLayoutInfoEvent, &sipCpp, &length))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetRequestedLength(length);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QueryLayoutInfoEvent, sipName_SetRequestedLength, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxQueryLayoutInfoEvent_SetSize, "SetSize(size)\n"
"\n"
"Call this to let the calling code know what the size of the window is.");

extern "C" {static PyObject *meth_wxQueryLayoutInfoEvent_SetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxQueryLayoutInfoEvent_SetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSize* size;
        int sizeState = 0;
         ::wxQueryLayoutInfoEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxQueryLayoutInfoEvent, &sipCpp, sipType_wxSize, &size, &sizeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSize(*size);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_QueryLayoutInfoEvent, sipName_SetSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxQueryLayoutInfoEvent_Clone, "Clone(self) -> Event");

extern "C" {static PyObject *meth_wxQueryLayoutInfoEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxQueryLayoutInfoEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxQueryLayoutInfoEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxQueryLayoutInfoEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxQueryLayoutInfoEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_QueryLayoutInfoEvent, sipName_Clone, doc_wxQueryLayoutInfoEvent_Clone);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxQueryLayoutInfoEvent(void *, const sipTypeDef *);}
static void *cast_wxQueryLayoutInfoEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxQueryLayoutInfoEvent *sipCpp = reinterpret_cast< ::wxQueryLayoutInfoEvent *>(sipCppV);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxQueryLayoutInfoEvent(void *, int);}
static void release_wxQueryLayoutInfoEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxQueryLayoutInfoEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxQueryLayoutInfoEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxQueryLayoutInfoEvent(sipSimpleWrapper *);}
static void dealloc_wxQueryLayoutInfoEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxQueryLayoutInfoEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxQueryLayoutInfoEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxQueryLayoutInfoEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxQueryLayoutInfoEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxQueryLayoutInfoEvent *sipCpp = SIP_NULLPTR;

    {
         ::wxWindowID id = 0;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &id))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxQueryLayoutInfoEvent(id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxQueryLayoutInfoEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxQueryLayoutInfoEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxQueryLayoutInfoEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxQueryLayoutInfoEvent[] = {{20, 0, 1}};


static PyMethodDef methods_wxQueryLayoutInfoEvent[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxQueryLayoutInfoEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxQueryLayoutInfoEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_GetAlignment), meth_wxQueryLayoutInfoEvent_GetAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_wxQueryLayoutInfoEvent_GetAlignment)},
    {SIP_MLNAME_CAST(sipName_GetFlags), meth_wxQueryLayoutInfoEvent_GetFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_wxQueryLayoutInfoEvent_GetFlags)},
    {SIP_MLNAME_CAST(sipName_GetOrientation), meth_wxQueryLayoutInfoEvent_GetOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_wxQueryLayoutInfoEvent_GetOrientation)},
    {SIP_MLNAME_CAST(sipName_GetRequestedLength), meth_wxQueryLayoutInfoEvent_GetRequestedLength, METH_VARARGS, SIP_MLDOC_CAST(doc_wxQueryLayoutInfoEvent_GetRequestedLength)},
    {SIP_MLNAME_CAST(sipName_GetSize), meth_wxQueryLayoutInfoEvent_GetSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxQueryLayoutInfoEvent_GetSize)},
    {SIP_MLNAME_CAST(sipName_SetAlignment), SIP_MLMETH_CAST(meth_wxQueryLayoutInfoEvent_SetAlignment), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxQueryLayoutInfoEvent_SetAlignment)},
    {SIP_MLNAME_CAST(sipName_SetFlags), SIP_MLMETH_CAST(meth_wxQueryLayoutInfoEvent_SetFlags), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxQueryLayoutInfoEvent_SetFlags)},
    {SIP_MLNAME_CAST(sipName_SetOrientation), SIP_MLMETH_CAST(meth_wxQueryLayoutInfoEvent_SetOrientation), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxQueryLayoutInfoEvent_SetOrientation)},
    {SIP_MLNAME_CAST(sipName_SetRequestedLength), SIP_MLMETH_CAST(meth_wxQueryLayoutInfoEvent_SetRequestedLength), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxQueryLayoutInfoEvent_SetRequestedLength)},
    {SIP_MLNAME_CAST(sipName_SetSize), SIP_MLMETH_CAST(meth_wxQueryLayoutInfoEvent_SetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxQueryLayoutInfoEvent_SetSize)}
};

sipVariableDef variables_wxQueryLayoutInfoEvent[] = {
    {PropertyVariable, sipName_Size, &methods_wxQueryLayoutInfoEvent[5], &methods_wxQueryLayoutInfoEvent[10], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_RequestedLength, &methods_wxQueryLayoutInfoEvent[4], &methods_wxQueryLayoutInfoEvent[9], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Orientation, &methods_wxQueryLayoutInfoEvent[3], &methods_wxQueryLayoutInfoEvent[8], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Flags, &methods_wxQueryLayoutInfoEvent[2], &methods_wxQueryLayoutInfoEvent[7], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Alignment, &methods_wxQueryLayoutInfoEvent[1], &methods_wxQueryLayoutInfoEvent[6], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxQueryLayoutInfoEvent, "QueryLayoutInfoEvent(id=0)\n"
"\n"
"This event is sent when wxLayoutAlgorithm wishes to get the size,\n"
"orientation and alignment of a window.");


sipClassTypeDef sipTypeDef__adv_wxQueryLayoutInfoEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxQueryLayoutInfoEvent,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_QueryLayoutInfoEvent,
        {0, 0, 1},
        11, methods_wxQueryLayoutInfoEvent,
        0, SIP_NULLPTR,
        5, variables_wxQueryLayoutInfoEvent,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxQueryLayoutInfoEvent,
    -1,
    -1,
    supers_wxQueryLayoutInfoEvent,
    SIP_NULLPTR,
    init_type_wxQueryLayoutInfoEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxQueryLayoutInfoEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxQueryLayoutInfoEvent,
    cast_wxQueryLayoutInfoEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
