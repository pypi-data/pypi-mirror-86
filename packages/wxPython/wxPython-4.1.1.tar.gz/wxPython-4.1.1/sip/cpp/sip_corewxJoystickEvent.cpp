/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/event.h>

        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxJoystickEvent : public  ::wxJoystickEvent
{
public:
    sipwxJoystickEvent( ::wxEventType,int,int,int);
    sipwxJoystickEvent(const  ::wxJoystickEvent&);
    virtual ~sipwxJoystickEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEvent* Clone() const SIP_OVERRIDE;
     ::wxEventCategory GetEventCategory() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxJoystickEvent(const sipwxJoystickEvent &);
    sipwxJoystickEvent &operator = (const sipwxJoystickEvent &);

    char sipPyMethods[2];
};

sipwxJoystickEvent::sipwxJoystickEvent( ::wxEventType eventType,int state,int joystick,int change):  ::wxJoystickEvent(eventType,state,joystick,change), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxJoystickEvent::sipwxJoystickEvent(const  ::wxJoystickEvent& a0):  ::wxJoystickEvent(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxJoystickEvent::~sipwxJoystickEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEvent* sipwxJoystickEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_Clone);

    if (!sipMeth)
        return  ::wxJoystickEvent::Clone();

    extern  ::wxEvent* sipVH__core_98(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_98(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEventCategory sipwxJoystickEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxJoystickEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__core_99(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_99(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxJoystickEvent_ButtonDown, "ButtonDown(button=JOY_BUTTON_ANY) -> bool\n"
"\n"
"Returns true if the event was a down event from the specified button\n"
"(or any button).");

extern "C" {static PyObject *meth_wxJoystickEvent_ButtonDown(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxJoystickEvent_ButtonDown(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int button = wxJOY_BUTTON_ANY;
        const  ::wxJoystickEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_button,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_wxJoystickEvent, &sipCpp, &button))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ButtonDown(button);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_JoystickEvent, sipName_ButtonDown, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxJoystickEvent_ButtonIsDown, "ButtonIsDown(button=JOY_BUTTON_ANY) -> bool\n"
"\n"
"Returns true if the specified button (or any button) was in a down\n"
"state.");

extern "C" {static PyObject *meth_wxJoystickEvent_ButtonIsDown(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxJoystickEvent_ButtonIsDown(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int button = wxJOY_BUTTON_ANY;
        const  ::wxJoystickEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_button,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_wxJoystickEvent, &sipCpp, &button))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ButtonIsDown(button);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_JoystickEvent, sipName_ButtonIsDown, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxJoystickEvent_ButtonUp, "ButtonUp(button=JOY_BUTTON_ANY) -> bool\n"
"\n"
"Returns true if the event was an up event from the specified button\n"
"(or any button).");

extern "C" {static PyObject *meth_wxJoystickEvent_ButtonUp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxJoystickEvent_ButtonUp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int button = wxJOY_BUTTON_ANY;
        const  ::wxJoystickEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_button,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_wxJoystickEvent, &sipCpp, &button))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ButtonUp(button);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_JoystickEvent, sipName_ButtonUp, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxJoystickEvent_GetButtonChange, "GetButtonChange() -> int\n"
"\n"
"Returns the identifier of the button changing state.");

extern "C" {static PyObject *meth_wxJoystickEvent_GetButtonChange(PyObject *, PyObject *);}
static PyObject *meth_wxJoystickEvent_GetButtonChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxJoystickEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxJoystickEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetButtonChange();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_JoystickEvent, sipName_GetButtonChange, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxJoystickEvent_GetButtonOrdinal, "GetButtonOrdinal() -> int\n"
"\n"
"Returns the 0-indexed ordinal of the button changing state.");

extern "C" {static PyObject *meth_wxJoystickEvent_GetButtonOrdinal(PyObject *, PyObject *);}
static PyObject *meth_wxJoystickEvent_GetButtonOrdinal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxJoystickEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxJoystickEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetButtonOrdinal();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_JoystickEvent, sipName_GetButtonOrdinal, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxJoystickEvent_GetButtonState, "GetButtonState() -> int\n"
"\n"
"Returns the down state of the buttons.");

extern "C" {static PyObject *meth_wxJoystickEvent_GetButtonState(PyObject *, PyObject *);}
static PyObject *meth_wxJoystickEvent_GetButtonState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxJoystickEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxJoystickEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetButtonState();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_JoystickEvent, sipName_GetButtonState, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxJoystickEvent_GetJoystick, "GetJoystick() -> int\n"
"\n"
"Returns the identifier of the joystick generating the event - one of\n"
"wxJOYSTICK1 and wxJOYSTICK2.");

extern "C" {static PyObject *meth_wxJoystickEvent_GetJoystick(PyObject *, PyObject *);}
static PyObject *meth_wxJoystickEvent_GetJoystick(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxJoystickEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxJoystickEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetJoystick();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_JoystickEvent, sipName_GetJoystick, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxJoystickEvent_GetPosition, "GetPosition() -> Point\n"
"\n"
"Returns the x, y position of the joystick event.");

extern "C" {static PyObject *meth_wxJoystickEvent_GetPosition(PyObject *, PyObject *);}
static PyObject *meth_wxJoystickEvent_GetPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxJoystickEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxJoystickEvent, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint(sipCpp->GetPosition());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_JoystickEvent, sipName_GetPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxJoystickEvent_GetZPosition, "GetZPosition() -> int\n"
"\n"
"Returns the z position of the joystick event.");

extern "C" {static PyObject *meth_wxJoystickEvent_GetZPosition(PyObject *, PyObject *);}
static PyObject *meth_wxJoystickEvent_GetZPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxJoystickEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxJoystickEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetZPosition();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_JoystickEvent, sipName_GetZPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxJoystickEvent_IsButton, "IsButton() -> bool\n"
"\n"
"Returns true if this was a button up or down event (not 'is any button\n"
"down?').");

extern "C" {static PyObject *meth_wxJoystickEvent_IsButton(PyObject *, PyObject *);}
static PyObject *meth_wxJoystickEvent_IsButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxJoystickEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxJoystickEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsButton();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_JoystickEvent, sipName_IsButton, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxJoystickEvent_IsMove, "IsMove() -> bool\n"
"\n"
"Returns true if this was an x, y move event.");

extern "C" {static PyObject *meth_wxJoystickEvent_IsMove(PyObject *, PyObject *);}
static PyObject *meth_wxJoystickEvent_IsMove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxJoystickEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxJoystickEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsMove();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_JoystickEvent, sipName_IsMove, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxJoystickEvent_IsZMove, "IsZMove() -> bool\n"
"\n"
"Returns true if this was a z move event.");

extern "C" {static PyObject *meth_wxJoystickEvent_IsZMove(PyObject *, PyObject *);}
static PyObject *meth_wxJoystickEvent_IsZMove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxJoystickEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxJoystickEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsZMove();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_JoystickEvent, sipName_IsZMove, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxJoystickEvent_Clone, "Clone(self) -> Event");

extern "C" {static PyObject *meth_wxJoystickEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxJoystickEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxJoystickEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxJoystickEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxJoystickEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_JoystickEvent, sipName_Clone, doc_wxJoystickEvent_Clone);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxJoystickEvent(void *, const sipTypeDef *);}
static void *cast_wxJoystickEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxJoystickEvent *sipCpp = reinterpret_cast< ::wxJoystickEvent *>(sipCppV);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxJoystickEvent(void *, int);}
static void release_wxJoystickEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxJoystickEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxJoystickEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxJoystickEvent(sipSimpleWrapper *);}
static void dealloc_wxJoystickEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxJoystickEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxJoystickEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxJoystickEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxJoystickEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxJoystickEvent *sipCpp = SIP_NULLPTR;

    {
         ::wxEventType eventType = wxEVT_NULL;
        int state = 0;
        int joystick = wxJOYSTICK1;
        int change = 0;

        static const char *sipKwdList[] = {
            sipName_eventType,
            sipName_state,
            sipName_joystick,
            sipName_change,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|iiii", &eventType, &state, &joystick, &change))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxJoystickEvent(eventType,state,joystick,change);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxJoystickEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxJoystickEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxJoystickEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxJoystickEvent[] = {{147, 255, 1}};


static PyMethodDef methods_wxJoystickEvent[] = {
    {SIP_MLNAME_CAST(sipName_ButtonDown), SIP_MLMETH_CAST(meth_wxJoystickEvent_ButtonDown), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxJoystickEvent_ButtonDown)},
    {SIP_MLNAME_CAST(sipName_ButtonIsDown), SIP_MLMETH_CAST(meth_wxJoystickEvent_ButtonIsDown), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxJoystickEvent_ButtonIsDown)},
    {SIP_MLNAME_CAST(sipName_ButtonUp), SIP_MLMETH_CAST(meth_wxJoystickEvent_ButtonUp), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxJoystickEvent_ButtonUp)},
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxJoystickEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxJoystickEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_GetButtonChange), meth_wxJoystickEvent_GetButtonChange, METH_VARARGS, SIP_MLDOC_CAST(doc_wxJoystickEvent_GetButtonChange)},
    {SIP_MLNAME_CAST(sipName_GetButtonOrdinal), meth_wxJoystickEvent_GetButtonOrdinal, METH_VARARGS, SIP_MLDOC_CAST(doc_wxJoystickEvent_GetButtonOrdinal)},
    {SIP_MLNAME_CAST(sipName_GetButtonState), meth_wxJoystickEvent_GetButtonState, METH_VARARGS, SIP_MLDOC_CAST(doc_wxJoystickEvent_GetButtonState)},
    {SIP_MLNAME_CAST(sipName_GetJoystick), meth_wxJoystickEvent_GetJoystick, METH_VARARGS, SIP_MLDOC_CAST(doc_wxJoystickEvent_GetJoystick)},
    {SIP_MLNAME_CAST(sipName_GetPosition), meth_wxJoystickEvent_GetPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_wxJoystickEvent_GetPosition)},
    {SIP_MLNAME_CAST(sipName_GetZPosition), meth_wxJoystickEvent_GetZPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_wxJoystickEvent_GetZPosition)},
    {SIP_MLNAME_CAST(sipName_IsButton), meth_wxJoystickEvent_IsButton, METH_VARARGS, SIP_MLDOC_CAST(doc_wxJoystickEvent_IsButton)},
    {SIP_MLNAME_CAST(sipName_IsMove), meth_wxJoystickEvent_IsMove, METH_VARARGS, SIP_MLDOC_CAST(doc_wxJoystickEvent_IsMove)},
    {SIP_MLNAME_CAST(sipName_IsZMove), meth_wxJoystickEvent_IsZMove, METH_VARARGS, SIP_MLDOC_CAST(doc_wxJoystickEvent_IsZMove)}
};

sipVariableDef variables_wxJoystickEvent[] = {
    {PropertyVariable, sipName_ZPosition, &methods_wxJoystickEvent[9], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Position, &methods_wxJoystickEvent[8], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Joystick, &methods_wxJoystickEvent[7], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ButtonState, &methods_wxJoystickEvent[6], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ButtonOrdinal, &methods_wxJoystickEvent[5], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ButtonChange, &methods_wxJoystickEvent[4], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxJoystickEvent, "JoystickEvent(eventType=wxEVT_NULL, state=0, joystick=JOYSTICK1, change=0)\n"
"\n"
"This event class contains information about joystick events,\n"
"particularly events received by windows.");


sipClassTypeDef sipTypeDef__core_wxJoystickEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxJoystickEvent,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_JoystickEvent,
        {0, 0, 1},
        13, methods_wxJoystickEvent,
        0, SIP_NULLPTR,
        6, variables_wxJoystickEvent,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxJoystickEvent,
    -1,
    -1,
    supers_wxJoystickEvent,
    SIP_NULLPTR,
    init_type_wxJoystickEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxJoystickEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxJoystickEvent,
    cast_wxJoystickEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
