/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_richtext.h"

        #include <wx/richtext/richtextbuffer.h>

        #include <wx/bitmap.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/gdicmn.h>
        #include <wx/dc.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/window.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxRichTextFieldTypeStandard : public  ::wxRichTextFieldTypeStandard
{
public:
    sipwxRichTextFieldTypeStandard(const  ::wxString&,const  ::wxString&,int);
    sipwxRichTextFieldTypeStandard(const  ::wxString&,const  ::wxBitmap&,int);
    sipwxRichTextFieldTypeStandard();
    sipwxRichTextFieldTypeStandard(const  ::wxRichTextFieldTypeStandard&);
    virtual ~sipwxRichTextFieldTypeStandard();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool Draw( ::wxRichTextField*, ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRichTextRange&,const  ::wxRichTextSelection&,const  ::wxRect&,int,int) SIP_OVERRIDE;
    bool Layout( ::wxRichTextField*, ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&,const  ::wxRect&,int) SIP_OVERRIDE;
    bool GetRangeSize( ::wxRichTextField*,const  ::wxRichTextRange&, ::wxSize&,int&, ::wxDC&, ::wxRichTextDrawingContext&,int,const  ::wxPoint&,const  ::wxSize&, ::wxArrayInt*) const SIP_OVERRIDE;
    bool CanEditProperties( ::wxRichTextField*) const SIP_OVERRIDE;
    bool EditProperties( ::wxRichTextField*, ::wxWindow*, ::wxRichTextBuffer*) SIP_OVERRIDE;
     ::wxString GetPropertiesMenuLabel( ::wxRichTextField*) const SIP_OVERRIDE;
    bool UpdateField( ::wxRichTextBuffer*, ::wxRichTextField*) SIP_OVERRIDE;
    bool IsTopLevel( ::wxRichTextField*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRichTextFieldTypeStandard(const sipwxRichTextFieldTypeStandard &);
    sipwxRichTextFieldTypeStandard &operator = (const sipwxRichTextFieldTypeStandard &);

    char sipPyMethods[8];
};

sipwxRichTextFieldTypeStandard::sipwxRichTextFieldTypeStandard(const  ::wxString& name,const  ::wxString& label,int displayStyle):  ::wxRichTextFieldTypeStandard(name,label,displayStyle), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextFieldTypeStandard::sipwxRichTextFieldTypeStandard(const  ::wxString& name,const  ::wxBitmap& bitmap,int displayStyle):  ::wxRichTextFieldTypeStandard(name,bitmap,displayStyle), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextFieldTypeStandard::sipwxRichTextFieldTypeStandard():  ::wxRichTextFieldTypeStandard(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextFieldTypeStandard::sipwxRichTextFieldTypeStandard(const  ::wxRichTextFieldTypeStandard& field):  ::wxRichTextFieldTypeStandard(field), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextFieldTypeStandard::~sipwxRichTextFieldTypeStandard()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxRichTextFieldTypeStandard::Draw( ::wxRichTextField*obj, ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRichTextRange& range,const  ::wxRichTextSelection& selection,const  ::wxRect& rect,int descent,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_Draw);

    if (!sipMeth)
        return  ::wxRichTextFieldTypeStandard::Draw(obj,dc,context,range,selection,rect,descent,style);

    extern bool sipVH__richtext_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextField*, ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRichTextRange&,const  ::wxRichTextSelection&,const  ::wxRect&,int,int);

    return sipVH__richtext_75(sipGILState, 0, sipPySelf, sipMeth, obj, dc, context, range, selection, rect, descent, style);
}

bool sipwxRichTextFieldTypeStandard::Layout( ::wxRichTextField*obj, ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRect& rect,const  ::wxRect& parentRect,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_Layout);

    if (!sipMeth)
        return  ::wxRichTextFieldTypeStandard::Layout(obj,dc,context,rect,parentRect,style);

    extern bool sipVH__richtext_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextField*, ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&,const  ::wxRect&,int);

    return sipVH__richtext_76(sipGILState, 0, sipPySelf, sipMeth, obj, dc, context, rect, parentRect, style);
}

bool sipwxRichTextFieldTypeStandard::GetRangeSize( ::wxRichTextField*obj,const  ::wxRichTextRange& range, ::wxSize& size,int& descent, ::wxDC& dc, ::wxRichTextDrawingContext& context,int flags,const  ::wxPoint& position,const  ::wxSize& parentSize, ::wxArrayInt*partialExtents) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_GetRangeSize);

    if (!sipMeth)
        return  ::wxRichTextFieldTypeStandard::GetRangeSize(obj,range,size,descent,dc,context,flags,position,parentSize,partialExtents);

    extern bool sipVH__richtext_77(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextField*,const  ::wxRichTextRange&, ::wxSize&,int&, ::wxDC&, ::wxRichTextDrawingContext&,int,const  ::wxPoint&,const  ::wxSize&, ::wxArrayInt*);

    return sipVH__richtext_77(sipGILState, 0, sipPySelf, sipMeth, obj, range, size, descent, dc, context, flags, position, parentSize, partialExtents);
}

bool sipwxRichTextFieldTypeStandard::CanEditProperties( ::wxRichTextField*obj) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_CanEditProperties);

    if (!sipMeth)
        return  ::wxRichTextFieldTypeStandard::CanEditProperties(obj);

    extern bool sipVH__richtext_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextField*);

    return sipVH__richtext_78(sipGILState, 0, sipPySelf, sipMeth, obj);
}

bool sipwxRichTextFieldTypeStandard::EditProperties( ::wxRichTextField*obj, ::wxWindow*parent, ::wxRichTextBuffer*buffer)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_EditProperties);

    if (!sipMeth)
        return  ::wxRichTextFieldTypeStandard::EditProperties(obj,parent,buffer);

    extern bool sipVH__richtext_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextField*, ::wxWindow*, ::wxRichTextBuffer*);

    return sipVH__richtext_79(sipGILState, 0, sipPySelf, sipMeth, obj, parent, buffer);
}

 ::wxString sipwxRichTextFieldTypeStandard::GetPropertiesMenuLabel( ::wxRichTextField*obj) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_GetPropertiesMenuLabel);

    if (!sipMeth)
        return  ::wxRichTextFieldTypeStandard::GetPropertiesMenuLabel(obj);

    extern  ::wxString sipVH__richtext_80(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextField*);

    return sipVH__richtext_80(sipGILState, 0, sipPySelf, sipMeth, obj);
}

bool sipwxRichTextFieldTypeStandard::UpdateField( ::wxRichTextBuffer*buffer, ::wxRichTextField*obj)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_UpdateField);

    if (!sipMeth)
        return  ::wxRichTextFieldTypeStandard::UpdateField(buffer,obj);

    extern bool sipVH__richtext_81(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextBuffer*, ::wxRichTextField*);

    return sipVH__richtext_81(sipGILState, 0, sipPySelf, sipMeth, buffer, obj);
}

bool sipwxRichTextFieldTypeStandard::IsTopLevel( ::wxRichTextField*obj) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_IsTopLevel);

    if (!sipMeth)
        return  ::wxRichTextFieldTypeStandard::IsTopLevel(obj);

    extern bool sipVH__richtext_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextField*);

    return sipVH__richtext_78(sipGILState, 0, sipPySelf, sipMeth, obj);
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_Init, "Init()\n"
"\n"
"Initialises the object.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_Init(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_Init(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextFieldTypeStandard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Init();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_Init, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_Copy, "Copy(field)\n"
"\n"
"Copies the object.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_Copy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_Copy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFieldTypeStandard* field;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_field,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, sipType_wxRichTextFieldTypeStandard, &field))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Copy(*field);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_Copy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_Draw, "Draw(obj, dc, context, range, selection, rect, descent, style) -> bool\n"
"\n"
"Draw the item, within the given range.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_Draw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_Draw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextField* obj;
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextSelection* selection;
        const  ::wxRect* rect;
        int rectState = 0;
        int descent;
        int style;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
            sipName_dc,
            sipName_context,
            sipName_range,
            sipName_selection,
            sipName_rect,
            sipName_descent,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J9J1J9J1ii", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, sipType_wxRichTextField, &obj, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextSelection, &selection, sipType_wxRect, &rect, &rectState, &descent, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFieldTypeStandard::Draw(obj,*dc,*context,*range,*selection,*rect,descent,style) : sipCpp->Draw(obj,*dc,*context,*range,*selection,*rect,descent,style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_Draw, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_Layout, "Layout(obj, dc, context, rect, parentRect, style) -> bool\n"
"\n"
"Lay the item out at the specified position with the given size\n"
"constraint.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_Layout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_Layout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextField* obj;
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRect* rect;
        int rectState = 0;
        const  ::wxRect* parentRect;
        int parentRectState = 0;
        int style;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
            sipName_dc,
            sipName_context,
            sipName_rect,
            sipName_parentRect,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J9J1J1i", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, sipType_wxRichTextField, &obj, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRect, &rect, &rectState, sipType_wxRect, &parentRect, &parentRectState, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFieldTypeStandard::Layout(obj,*dc,*context,*rect,*parentRect,style) : sipCpp->Layout(obj,*dc,*context,*rect,*parentRect,style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);
            sipReleaseType(const_cast< ::wxRect *>(parentRect),sipType_wxRect,parentRectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_Layout, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_GetRangeSize, "GetRangeSize(obj, range, size, descent, dc, context, flags, position=wx.Point(0,0), parentSize=wx.DefaultSize, partialExtents=None) -> bool\n"
"\n"
"Returns the object size for the given range.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_GetRangeSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_GetRangeSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextField* obj;
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxSize* size;
        int sizeState = 0;
        int descent;
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        int flags;
        const  ::wxPoint& positiondef = wxPoint(0,0);
        const  ::wxPoint* position = &positiondef;
        int positionState = 0;
        const  ::wxSize& parentSizedef = wxDefaultSize;
        const  ::wxSize* parentSize = &parentSizedef;
        int parentSizeState = 0;
         ::wxArrayInt* partialExtents = 0;
        int partialExtentsState = 0;
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
            sipName_range,
            sipName_size,
            sipName_dc,
            sipName_context,
            sipName_flags,
            sipName_position,
            sipName_parentSize,
            sipName_partialExtents,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1J1J9J9i|J1J1J0", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, sipType_wxRichTextField, &obj, sipType_wxRichTextRange, &range, &rangeState, sipType_wxSize, &size, &sizeState, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, &flags, sipType_wxPoint, &position, &positionState, sipType_wxSize, &parentSize, &parentSizeState, sipType_wxArrayInt,&partialExtents, &partialExtentsState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFieldTypeStandard::GetRangeSize(obj,*range,*size,descent,*dc,*context,flags,*position,*parentSize,partialExtents) : sipCpp->GetRangeSize(obj,*range,*size,descent,*dc,*context,flags,*position,*parentSize,partialExtents));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);
            sipReleaseType(size,sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxPoint *>(position),sipType_wxPoint,positionState);
            sipReleaseType(const_cast< ::wxSize *>(parentSize),sipType_wxSize,parentSizeState);
            sipReleaseType(partialExtents,sipType_wxArrayInt,partialExtentsState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bi)",sipRes,descent);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_GetRangeSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_GetSize, "GetSize(obj, dc, context, style) -> wx.Size\n"
"\n"
"Get the size of the field, given the label, font size, and so on.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_GetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_GetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextField* obj;
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        int style;
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
            sipName_dc,
            sipName_context,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J9i", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, sipType_wxRichTextField, &obj, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, &style))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetSize(obj,*dc,*context,style));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_GetSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_IsTopLevel, "IsTopLevel(obj) -> bool\n"
"\n"
"Returns true if the display type is wxRICHTEXT_FIELD_STYLE_COMPOSITE,\n"
"false otherwise.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_IsTopLevel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_IsTopLevel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextField* obj;
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, sipType_wxRichTextField, &obj))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextFieldTypeStandard::IsTopLevel(obj) : sipCpp->IsTopLevel(obj));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_IsTopLevel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_SetLabel, "SetLabel(label)\n"
"\n"
"Sets the text label for fields of this type.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_SetLabel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_SetLabel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* label;
        int labelState = 0;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, sipType_wxString,&label, &labelState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetLabel(*label);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_SetLabel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_GetLabel, "GetLabel() -> String\n"
"\n"
"Returns the text label for fields of this type.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_GetLabel(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_GetLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetLabel());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_GetLabel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_SetBitmap, "SetBitmap(bitmap)\n"
"\n"
"Sets the bitmap label for fields of this type.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_SetBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_SetBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxBitmap* bitmap;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmap(*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_SetBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_GetBitmap, "GetBitmap() -> wx.Bitmap\n"
"\n"
"Gets the bitmap label for fields of this type.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_GetBitmap(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_GetBitmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetBitmap());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_GetBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_GetDisplayStyle, "GetDisplayStyle() -> int\n"
"\n"
"Gets the display style for fields of this type.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_GetDisplayStyle(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_GetDisplayStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDisplayStyle();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_GetDisplayStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_SetDisplayStyle, "SetDisplayStyle(displayStyle)\n"
"\n"
"Sets the display style for fields of this type.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_SetDisplayStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_SetDisplayStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int displayStyle;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_displayStyle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, &displayStyle))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetDisplayStyle(displayStyle);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_SetDisplayStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_GetFont, "GetFont() -> wx.Font\n"
"\n"
"Gets the font used for drawing the text label.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_GetFont(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_GetFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp))
        {
             ::wxFont*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxFont(sipCpp->GetFont());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxFont,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_GetFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_SetFont, "SetFont(font)\n"
"\n"
"Sets the font used for drawing the text label.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_SetFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_SetFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxFont* font;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, sipType_wxFont, &font))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFont(*font);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_SetFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_GetTextColour, "GetTextColour() -> wx.Colour\n"
"\n"
"Gets the colour used for drawing the text label.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_GetTextColour(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_GetTextColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetTextColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_GetTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_SetTextColour, "SetTextColour(colour)\n"
"\n"
"Sets the colour used for drawing the text label.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_SetTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_SetTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* colour;
        int colourState = 0;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colour,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, sipType_wxColour, &colour, &colourState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTextColour(*colour);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(colour),sipType_wxColour,colourState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_SetTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_GetBorderColour, "GetBorderColour() -> wx.Colour\n"
"\n"
"Gets the colour used for drawing the field border.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_GetBorderColour(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_GetBorderColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetBorderColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_GetBorderColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_SetBorderColour, "SetBorderColour(colour)\n"
"\n"
"Sets the colour used for drawing the field border.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_SetBorderColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_SetBorderColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* colour;
        int colourState = 0;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colour,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, sipType_wxColour, &colour, &colourState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBorderColour(*colour);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(colour),sipType_wxColour,colourState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_SetBorderColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_GetBackgroundColour, "GetBackgroundColour() -> wx.Colour\n"
"\n"
"Gets the colour used for drawing the field background.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_GetBackgroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_GetBackgroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetBackgroundColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_GetBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_SetBackgroundColour, "SetBackgroundColour(colour)\n"
"\n"
"Sets the colour used for drawing the field background.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_SetBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_SetBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* colour;
        int colourState = 0;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colour,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, sipType_wxColour, &colour, &colourState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBackgroundColour(*colour);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(colour),sipType_wxColour,colourState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_SetBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_SetVerticalPadding, "SetVerticalPadding(padding)\n"
"\n"
"Sets the vertical padding (the distance between the border and the\n"
"text).");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_SetVerticalPadding(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_SetVerticalPadding(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int padding;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_padding,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, &padding))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetVerticalPadding(padding);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_SetVerticalPadding, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_GetVerticalPadding, "GetVerticalPadding() -> int\n"
"\n"
"Gets the vertical padding (the distance between the border and the\n"
"text).");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_GetVerticalPadding(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_GetVerticalPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVerticalPadding();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_GetVerticalPadding, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_SetHorizontalPadding, "SetHorizontalPadding(padding)\n"
"\n"
"Sets the horizontal padding (the distance between the border and the\n"
"text).");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_SetHorizontalPadding(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_SetHorizontalPadding(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int padding;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_padding,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, &padding))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetHorizontalPadding(padding);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_SetHorizontalPadding, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_GetHorizontalPadding, "GetHorizontalPadding() -> int\n"
"\n"
"Sets the horizontal padding (the distance between the border and the\n"
"text).");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_GetHorizontalPadding(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_GetHorizontalPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetHorizontalPadding();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_GetHorizontalPadding, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_SetHorizontalMargin, "SetHorizontalMargin(margin)\n"
"\n"
"Sets the horizontal margin surrounding the field object.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_SetHorizontalMargin(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_SetHorizontalMargin(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int margin;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_margin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, &margin))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetHorizontalMargin(margin);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_SetHorizontalMargin, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_GetHorizontalMargin, "GetHorizontalMargin() -> int\n"
"\n"
"Gets the horizontal margin surrounding the field object.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_GetHorizontalMargin(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_GetHorizontalMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetHorizontalMargin();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_GetHorizontalMargin, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_SetVerticalMargin, "SetVerticalMargin(margin)\n"
"\n"
"Sets the vertical margin surrounding the field object.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_SetVerticalMargin(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_SetVerticalMargin(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int margin;
         ::wxRichTextFieldTypeStandard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_margin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp, &margin))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetVerticalMargin(margin);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_SetVerticalMargin, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard_GetVerticalMargin, "GetVerticalMargin() -> int\n"
"\n"
"Gets the vertical margin surrounding the field object.");

extern "C" {static PyObject *meth_wxRichTextFieldTypeStandard_GetVerticalMargin(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextFieldTypeStandard_GetVerticalMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFieldTypeStandard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextFieldTypeStandard, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVerticalMargin();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextFieldTypeStandard, sipName_GetVerticalMargin, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRichTextFieldTypeStandard(void *, const sipTypeDef *);}
static void *cast_wxRichTextFieldTypeStandard(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRichTextFieldTypeStandard *sipCpp = reinterpret_cast< ::wxRichTextFieldTypeStandard *>(sipCppV);

    if (targetType == sipType_wxRichTextFieldType)
        return static_cast< ::wxRichTextFieldType *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRichTextFieldTypeStandard(void *, int);}
static void release_wxRichTextFieldTypeStandard(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRichTextFieldTypeStandard *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRichTextFieldTypeStandard *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxRichTextFieldTypeStandard(Py_ssize_t);}
static void *array_wxRichTextFieldTypeStandard(Py_ssize_t sipNrElem)
{
    return new  ::wxRichTextFieldTypeStandard[sipNrElem];
}


extern "C" {static void assign_wxRichTextFieldTypeStandard(void *, SIP_SSIZE_T, void *);}
static void assign_wxRichTextFieldTypeStandard(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxRichTextFieldTypeStandard *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxRichTextFieldTypeStandard *>(sipSrc);
}


extern "C" {static void *copy_wxRichTextFieldTypeStandard(const void *, SIP_SSIZE_T);}
static void *copy_wxRichTextFieldTypeStandard(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxRichTextFieldTypeStandard(reinterpret_cast<const  ::wxRichTextFieldTypeStandard *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxRichTextFieldTypeStandard(sipSimpleWrapper *);}
static void dealloc_wxRichTextFieldTypeStandard(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRichTextFieldTypeStandard *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRichTextFieldTypeStandard(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRichTextFieldTypeStandard(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRichTextFieldTypeStandard(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxRichTextFieldTypeStandard *sipCpp = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;
        const  ::wxString* label;
        int labelState = 0;
        int displayStyle =  ::wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_RECTANGLE;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_label,
            sipName_displayStyle,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1|i", sipType_wxString,&name, &nameState, sipType_wxString,&label, &labelState, &displayStyle))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextFieldTypeStandard(*name,*label,displayStyle);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxString* name;
        int nameState = 0;
        const  ::wxBitmap* bitmap;
        int displayStyle =  ::wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_NO_BORDER;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_bitmap,
            sipName_displayStyle,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J9|i", sipType_wxString,&name, &nameState, sipType_wxBitmap, &bitmap, &displayStyle))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextFieldTypeStandard(*name,*bitmap,displayStyle);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextFieldTypeStandard();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxRichTextFieldTypeStandard* field;

        static const char *sipKwdList[] = {
            sipName_field,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_wxRichTextFieldTypeStandard, &field))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextFieldTypeStandard(*field);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRichTextFieldTypeStandard[] = {{22, 255, 1}};


static PyMethodDef methods_wxRichTextFieldTypeStandard[] = {
    {SIP_MLNAME_CAST(sipName_Copy), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_Copy), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_Copy)},
    {SIP_MLNAME_CAST(sipName_Draw), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_Draw), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_Draw)},
    {SIP_MLNAME_CAST(sipName_GetBackgroundColour), meth_wxRichTextFieldTypeStandard_GetBackgroundColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_GetBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_GetBitmap), meth_wxRichTextFieldTypeStandard_GetBitmap, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_GetBitmap)},
    {SIP_MLNAME_CAST(sipName_GetBorderColour), meth_wxRichTextFieldTypeStandard_GetBorderColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_GetBorderColour)},
    {SIP_MLNAME_CAST(sipName_GetDisplayStyle), meth_wxRichTextFieldTypeStandard_GetDisplayStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_GetDisplayStyle)},
    {SIP_MLNAME_CAST(sipName_GetFont), meth_wxRichTextFieldTypeStandard_GetFont, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_GetFont)},
    {SIP_MLNAME_CAST(sipName_GetHorizontalMargin), meth_wxRichTextFieldTypeStandard_GetHorizontalMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_GetHorizontalMargin)},
    {SIP_MLNAME_CAST(sipName_GetHorizontalPadding), meth_wxRichTextFieldTypeStandard_GetHorizontalPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_GetHorizontalPadding)},
    {SIP_MLNAME_CAST(sipName_GetLabel), meth_wxRichTextFieldTypeStandard_GetLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_GetLabel)},
    {SIP_MLNAME_CAST(sipName_GetRangeSize), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_GetRangeSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_GetRangeSize)},
    {SIP_MLNAME_CAST(sipName_GetSize), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_GetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_GetSize)},
    {SIP_MLNAME_CAST(sipName_GetTextColour), meth_wxRichTextFieldTypeStandard_GetTextColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_GetTextColour)},
    {SIP_MLNAME_CAST(sipName_GetVerticalMargin), meth_wxRichTextFieldTypeStandard_GetVerticalMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_GetVerticalMargin)},
    {SIP_MLNAME_CAST(sipName_GetVerticalPadding), meth_wxRichTextFieldTypeStandard_GetVerticalPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_GetVerticalPadding)},
    {SIP_MLNAME_CAST(sipName_Init), meth_wxRichTextFieldTypeStandard_Init, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_Init)},
    {SIP_MLNAME_CAST(sipName_IsTopLevel), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_IsTopLevel), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_IsTopLevel)},
    {SIP_MLNAME_CAST(sipName_Layout), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_Layout), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_Layout)},
    {SIP_MLNAME_CAST(sipName_SetBackgroundColour), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_SetBackgroundColour), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_SetBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_SetBitmap), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_SetBitmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_SetBitmap)},
    {SIP_MLNAME_CAST(sipName_SetBorderColour), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_SetBorderColour), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_SetBorderColour)},
    {SIP_MLNAME_CAST(sipName_SetDisplayStyle), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_SetDisplayStyle), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_SetDisplayStyle)},
    {SIP_MLNAME_CAST(sipName_SetFont), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_SetFont), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_SetFont)},
    {SIP_MLNAME_CAST(sipName_SetHorizontalMargin), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_SetHorizontalMargin), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_SetHorizontalMargin)},
    {SIP_MLNAME_CAST(sipName_SetHorizontalPadding), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_SetHorizontalPadding), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_SetHorizontalPadding)},
    {SIP_MLNAME_CAST(sipName_SetLabel), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_SetLabel), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_SetLabel)},
    {SIP_MLNAME_CAST(sipName_SetTextColour), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_SetTextColour), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_SetTextColour)},
    {SIP_MLNAME_CAST(sipName_SetVerticalMargin), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_SetVerticalMargin), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_SetVerticalMargin)},
    {SIP_MLNAME_CAST(sipName_SetVerticalPadding), SIP_MLMETH_CAST(meth_wxRichTextFieldTypeStandard_SetVerticalPadding), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextFieldTypeStandard_SetVerticalPadding)}
};

static sipEnumMemberDef enummembers_wxRichTextFieldTypeStandard[] = {
    {sipName_RICHTEXT_FIELD_STYLE_COMPOSITE, static_cast<int>( ::wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_COMPOSITE), -1},
    {sipName_RICHTEXT_FIELD_STYLE_END_TAG, static_cast<int>( ::wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_END_TAG), -1},
    {sipName_RICHTEXT_FIELD_STYLE_NO_BORDER, static_cast<int>( ::wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_NO_BORDER), -1},
    {sipName_RICHTEXT_FIELD_STYLE_RECTANGLE, static_cast<int>( ::wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_RECTANGLE), -1},
    {sipName_RICHTEXT_FIELD_STYLE_START_TAG, static_cast<int>( ::wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_START_TAG), -1},
};

sipVariableDef variables_wxRichTextFieldTypeStandard[] = {
    {PropertyVariable, sipName_VerticalPadding, &methods_wxRichTextFieldTypeStandard[14], &methods_wxRichTextFieldTypeStandard[28], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_VerticalMargin, &methods_wxRichTextFieldTypeStandard[13], &methods_wxRichTextFieldTypeStandard[27], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_TextColour, &methods_wxRichTextFieldTypeStandard[12], &methods_wxRichTextFieldTypeStandard[26], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Label, &methods_wxRichTextFieldTypeStandard[9], &methods_wxRichTextFieldTypeStandard[25], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_HorizontalPadding, &methods_wxRichTextFieldTypeStandard[8], &methods_wxRichTextFieldTypeStandard[24], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_HorizontalMargin, &methods_wxRichTextFieldTypeStandard[7], &methods_wxRichTextFieldTypeStandard[23], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Font, &methods_wxRichTextFieldTypeStandard[6], &methods_wxRichTextFieldTypeStandard[22], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_DisplayStyle, &methods_wxRichTextFieldTypeStandard[5], &methods_wxRichTextFieldTypeStandard[21], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BorderColour, &methods_wxRichTextFieldTypeStandard[4], &methods_wxRichTextFieldTypeStandard[20], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Bitmap, &methods_wxRichTextFieldTypeStandard[3], &methods_wxRichTextFieldTypeStandard[19], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BackgroundColour, &methods_wxRichTextFieldTypeStandard[2], &methods_wxRichTextFieldTypeStandard[18], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxRichTextFieldTypeStandard, "RichTextFieldTypeStandard(name, label, displayStyle=RICHTEXT_FIELD_STYLE_RECTANGLE)\n"
"RichTextFieldTypeStandard(name, bitmap, displayStyle=RICHTEXT_FIELD_STYLE_NO_BORDER)\n"
"RichTextFieldTypeStandard()\n"
"RichTextFieldTypeStandard(field)\n"
"\n"
"A field type that can handle fields with text or bitmap labels, with a\n"
"small range of styles for implementing rectangular fields and fields\n"
"that can be used for start and end tags.");


sipClassTypeDef sipTypeDef__richtext_wxRichTextFieldTypeStandard = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRichTextFieldTypeStandard,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_RichTextFieldTypeStandard,
        {0, 0, 1},
        29, methods_wxRichTextFieldTypeStandard,
        5, enummembers_wxRichTextFieldTypeStandard,
        11, variables_wxRichTextFieldTypeStandard,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxRichTextFieldTypeStandard,
    -1,
    -1,
    supers_wxRichTextFieldTypeStandard,
    SIP_NULLPTR,
    init_type_wxRichTextFieldTypeStandard,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxRichTextFieldTypeStandard,
    assign_wxRichTextFieldTypeStandard,
    array_wxRichTextFieldTypeStandard,
    copy_wxRichTextFieldTypeStandard,
    release_wxRichTextFieldTypeStandard,
    cast_wxRichTextFieldTypeStandard,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
