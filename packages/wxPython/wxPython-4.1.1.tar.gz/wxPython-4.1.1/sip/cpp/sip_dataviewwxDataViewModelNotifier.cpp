/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_dataview.h"

        #include <wx/dataview.h>

        #include <wx/dataview.h>
        #include <wx/dataview.h>


class sipwxDataViewModelNotifier : public  ::wxDataViewModelNotifier
{
public:
    sipwxDataViewModelNotifier();
    sipwxDataViewModelNotifier(const  ::wxDataViewModelNotifier&);
    virtual ~sipwxDataViewModelNotifier();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool ValueChanged(const  ::wxDataViewItem&,uint) SIP_OVERRIDE;
    void Resort() SIP_OVERRIDE;
    bool ItemsDeleted(const  ::wxDataViewItem&,const  ::wxDataViewItemArray&) SIP_OVERRIDE;
    bool ItemsChanged(const  ::wxDataViewItemArray&) SIP_OVERRIDE;
    bool ItemsAdded(const  ::wxDataViewItem&,const  ::wxDataViewItemArray&) SIP_OVERRIDE;
    bool ItemDeleted(const  ::wxDataViewItem&,const  ::wxDataViewItem&) SIP_OVERRIDE;
    bool ItemChanged(const  ::wxDataViewItem&) SIP_OVERRIDE;
    bool ItemAdded(const  ::wxDataViewItem&,const  ::wxDataViewItem&) SIP_OVERRIDE;
    bool Cleared() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxDataViewModelNotifier(const sipwxDataViewModelNotifier &);
    sipwxDataViewModelNotifier &operator = (const sipwxDataViewModelNotifier &);

    char sipPyMethods[9];
};

sipwxDataViewModelNotifier::sipwxDataViewModelNotifier():  ::wxDataViewModelNotifier(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDataViewModelNotifier::sipwxDataViewModelNotifier(const  ::wxDataViewModelNotifier& a0):  ::wxDataViewModelNotifier(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDataViewModelNotifier::~sipwxDataViewModelNotifier()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxDataViewModelNotifier::ValueChanged(const  ::wxDataViewItem& item,uint col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_DataViewModelNotifier,sipName_ValueChanged);

    if (!sipMeth)
        return 0;

    extern bool sipVH__dataview_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&,uint);

    return sipVH__dataview_6(sipGILState, 0, sipPySelf, sipMeth, item, col);
}

void sipwxDataViewModelNotifier::Resort()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_DataViewModelNotifier,sipName_Resort);

    if (!sipMeth)
        return;

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewModelNotifier::ItemsDeleted(const  ::wxDataViewItem& parent,const  ::wxDataViewItemArray& items)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_ItemsDeleted);

    if (!sipMeth)
        return  ::wxDataViewModelNotifier::ItemsDeleted(parent,items);

    extern bool sipVH__dataview_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&,const  ::wxDataViewItemArray&);

    return sipVH__dataview_3(sipGILState, 0, sipPySelf, sipMeth, parent, items);
}

bool sipwxDataViewModelNotifier::ItemsChanged(const  ::wxDataViewItemArray& items)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_ItemsChanged);

    if (!sipMeth)
        return  ::wxDataViewModelNotifier::ItemsChanged(items);

    extern bool sipVH__dataview_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItemArray&);

    return sipVH__dataview_4(sipGILState, 0, sipPySelf, sipMeth, items);
}

bool sipwxDataViewModelNotifier::ItemsAdded(const  ::wxDataViewItem& parent,const  ::wxDataViewItemArray& items)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_ItemsAdded);

    if (!sipMeth)
        return  ::wxDataViewModelNotifier::ItemsAdded(parent,items);

    extern bool sipVH__dataview_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&,const  ::wxDataViewItemArray&);

    return sipVH__dataview_3(sipGILState, 0, sipPySelf, sipMeth, parent, items);
}

bool sipwxDataViewModelNotifier::ItemDeleted(const  ::wxDataViewItem& parent,const  ::wxDataViewItem& item)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_DataViewModelNotifier,sipName_ItemDeleted);

    if (!sipMeth)
        return 0;

    extern bool sipVH__dataview_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&,const  ::wxDataViewItem&);

    return sipVH__dataview_1(sipGILState, 0, sipPySelf, sipMeth, parent, item);
}

bool sipwxDataViewModelNotifier::ItemChanged(const  ::wxDataViewItem& item)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_DataViewModelNotifier,sipName_ItemChanged);

    if (!sipMeth)
        return 0;

    extern bool sipVH__dataview_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&);

    return sipVH__dataview_2(sipGILState, 0, sipPySelf, sipMeth, item);
}

bool sipwxDataViewModelNotifier::ItemAdded(const  ::wxDataViewItem& parent,const  ::wxDataViewItem& item)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_DataViewModelNotifier,sipName_ItemAdded);

    if (!sipMeth)
        return 0;

    extern bool sipVH__dataview_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&,const  ::wxDataViewItem&);

    return sipVH__dataview_1(sipGILState, 0, sipPySelf, sipMeth, parent, item);
}

bool sipwxDataViewModelNotifier::Cleared()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_DataViewModelNotifier,sipName_Cleared);

    if (!sipMeth)
        return 0;

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxDataViewModelNotifier_Cleared, "Cleared() -> bool\n"
"\n"
"Called by owning model.");

extern "C" {static PyObject *meth_wxDataViewModelNotifier_Cleared(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewModelNotifier_Cleared(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDataViewModelNotifier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewModelNotifier, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_DataViewModelNotifier, sipName_Cleared);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Cleared();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewModelNotifier, sipName_Cleared, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewModelNotifier_GetOwner, "GetOwner() -> DataViewModel\n"
"\n"
"Get owning wxDataViewModel.");

extern "C" {static PyObject *meth_wxDataViewModelNotifier_GetOwner(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewModelNotifier_GetOwner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewModelNotifier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewModelNotifier, &sipCpp))
        {
             ::wxDataViewModel*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetOwner();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewModel,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewModelNotifier, sipName_GetOwner, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewModelNotifier_ItemAdded, "ItemAdded(parent, item) -> bool\n"
"\n"
"Called by owning model.");

extern "C" {static PyObject *meth_wxDataViewModelNotifier_ItemAdded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewModelNotifier_ItemAdded(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxDataViewItem* parent;
        const  ::wxDataViewItem* item;
         ::wxDataViewModelNotifier *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9", &sipSelf, sipType_wxDataViewModelNotifier, &sipCpp, sipType_wxDataViewItem, &parent, sipType_wxDataViewItem, &item))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_DataViewModelNotifier, sipName_ItemAdded);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ItemAdded(*parent,*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewModelNotifier, sipName_ItemAdded, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewModelNotifier_ItemChanged, "ItemChanged(item) -> bool\n"
"\n"
"Called by owning model.");

extern "C" {static PyObject *meth_wxDataViewModelNotifier_ItemChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewModelNotifier_ItemChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxDataViewItem* item;
         ::wxDataViewModelNotifier *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewModelNotifier, &sipCpp, sipType_wxDataViewItem, &item))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_DataViewModelNotifier, sipName_ItemChanged);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ItemChanged(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewModelNotifier, sipName_ItemChanged, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewModelNotifier_ItemDeleted, "ItemDeleted(parent, item) -> bool\n"
"\n"
"Called by owning model.");

extern "C" {static PyObject *meth_wxDataViewModelNotifier_ItemDeleted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewModelNotifier_ItemDeleted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxDataViewItem* parent;
        const  ::wxDataViewItem* item;
         ::wxDataViewModelNotifier *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9", &sipSelf, sipType_wxDataViewModelNotifier, &sipCpp, sipType_wxDataViewItem, &parent, sipType_wxDataViewItem, &item))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_DataViewModelNotifier, sipName_ItemDeleted);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ItemDeleted(*parent,*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewModelNotifier, sipName_ItemDeleted, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewModelNotifier_ItemsAdded, "ItemsAdded(parent, items) -> bool\n"
"\n"
"Called by owning model.");

extern "C" {static PyObject *meth_wxDataViewModelNotifier_ItemsAdded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewModelNotifier_ItemsAdded(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewItem* parent;
        const  ::wxDataViewItemArray* items;
         ::wxDataViewModelNotifier *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_items,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9", &sipSelf, sipType_wxDataViewModelNotifier, &sipCpp, sipType_wxDataViewItem, &parent, sipType_wxDataViewItemArray, &items))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewModelNotifier::ItemsAdded(*parent,*items) : sipCpp->ItemsAdded(*parent,*items));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewModelNotifier, sipName_ItemsAdded, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewModelNotifier_ItemsChanged, "ItemsChanged(items) -> bool\n"
"\n"
"Called by owning model.");

extern "C" {static PyObject *meth_wxDataViewModelNotifier_ItemsChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewModelNotifier_ItemsChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewItemArray* items;
         ::wxDataViewModelNotifier *sipCpp;

        static const char *sipKwdList[] = {
            sipName_items,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewModelNotifier, &sipCpp, sipType_wxDataViewItemArray, &items))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewModelNotifier::ItemsChanged(*items) : sipCpp->ItemsChanged(*items));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewModelNotifier, sipName_ItemsChanged, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewModelNotifier_ItemsDeleted, "ItemsDeleted(parent, items) -> bool\n"
"\n"
"Called by owning model.");

extern "C" {static PyObject *meth_wxDataViewModelNotifier_ItemsDeleted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewModelNotifier_ItemsDeleted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewItem* parent;
        const  ::wxDataViewItemArray* items;
         ::wxDataViewModelNotifier *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_items,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9", &sipSelf, sipType_wxDataViewModelNotifier, &sipCpp, sipType_wxDataViewItem, &parent, sipType_wxDataViewItemArray, &items))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewModelNotifier::ItemsDeleted(*parent,*items) : sipCpp->ItemsDeleted(*parent,*items));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewModelNotifier, sipName_ItemsDeleted, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewModelNotifier_Resort, "Resort()\n"
"\n"
"Called by owning model.");

extern "C" {static PyObject *meth_wxDataViewModelNotifier_Resort(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewModelNotifier_Resort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDataViewModelNotifier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewModelNotifier, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_DataViewModelNotifier, sipName_Resort);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Resort();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewModelNotifier, sipName_Resort, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewModelNotifier_SetOwner, "SetOwner(owner)\n"
"\n"
"Set owner of this notifier.");

extern "C" {static PyObject *meth_wxDataViewModelNotifier_SetOwner(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewModelNotifier_SetOwner(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDataViewModel* owner;
         ::wxDataViewModelNotifier *sipCpp;

        static const char *sipKwdList[] = {
            sipName_owner,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxDataViewModelNotifier, &sipCpp, sipType_wxDataViewModel, &owner))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetOwner(owner);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewModelNotifier, sipName_SetOwner, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewModelNotifier_ValueChanged, "ValueChanged(item, col) -> bool\n"
"\n"
"Called by owning model.");

extern "C" {static PyObject *meth_wxDataViewModelNotifier_ValueChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewModelNotifier_ValueChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxDataViewItem* item;
        uint col;
         ::wxDataViewModelNotifier *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9u", &sipSelf, sipType_wxDataViewModelNotifier, &sipCpp, sipType_wxDataViewItem, &item, &col))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_DataViewModelNotifier, sipName_ValueChanged);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ValueChanged(*item,col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewModelNotifier, sipName_ValueChanged, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxDataViewModelNotifier(void *, int);}
static void release_wxDataViewModelNotifier(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxDataViewModelNotifier *>(sipCppV);
    else
        delete reinterpret_cast< ::wxDataViewModelNotifier *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxDataViewModelNotifier(sipSimpleWrapper *);}
static void dealloc_wxDataViewModelNotifier(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxDataViewModelNotifier *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxDataViewModelNotifier(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxDataViewModelNotifier(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxDataViewModelNotifier(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxDataViewModelNotifier *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxDataViewModelNotifier();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxDataViewModelNotifier* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxDataViewModelNotifier, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxDataViewModelNotifier(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_wxDataViewModelNotifier[] = {
    {SIP_MLNAME_CAST(sipName_Cleared), meth_wxDataViewModelNotifier_Cleared, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewModelNotifier_Cleared)},
    {SIP_MLNAME_CAST(sipName_GetOwner), meth_wxDataViewModelNotifier_GetOwner, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewModelNotifier_GetOwner)},
    {SIP_MLNAME_CAST(sipName_ItemAdded), SIP_MLMETH_CAST(meth_wxDataViewModelNotifier_ItemAdded), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewModelNotifier_ItemAdded)},
    {SIP_MLNAME_CAST(sipName_ItemChanged), SIP_MLMETH_CAST(meth_wxDataViewModelNotifier_ItemChanged), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewModelNotifier_ItemChanged)},
    {SIP_MLNAME_CAST(sipName_ItemDeleted), SIP_MLMETH_CAST(meth_wxDataViewModelNotifier_ItemDeleted), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewModelNotifier_ItemDeleted)},
    {SIP_MLNAME_CAST(sipName_ItemsAdded), SIP_MLMETH_CAST(meth_wxDataViewModelNotifier_ItemsAdded), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewModelNotifier_ItemsAdded)},
    {SIP_MLNAME_CAST(sipName_ItemsChanged), SIP_MLMETH_CAST(meth_wxDataViewModelNotifier_ItemsChanged), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewModelNotifier_ItemsChanged)},
    {SIP_MLNAME_CAST(sipName_ItemsDeleted), SIP_MLMETH_CAST(meth_wxDataViewModelNotifier_ItemsDeleted), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewModelNotifier_ItemsDeleted)},
    {SIP_MLNAME_CAST(sipName_Resort), meth_wxDataViewModelNotifier_Resort, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewModelNotifier_Resort)},
    {SIP_MLNAME_CAST(sipName_SetOwner), SIP_MLMETH_CAST(meth_wxDataViewModelNotifier_SetOwner), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewModelNotifier_SetOwner)},
    {SIP_MLNAME_CAST(sipName_ValueChanged), SIP_MLMETH_CAST(meth_wxDataViewModelNotifier_ValueChanged), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewModelNotifier_ValueChanged)}
};

sipVariableDef variables_wxDataViewModelNotifier[] = {
    {PropertyVariable, sipName_Owner, &methods_wxDataViewModelNotifier[1], &methods_wxDataViewModelNotifier[9], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxDataViewModelNotifier, "DataViewModelNotifier()\n"
"\n"
"A wxDataViewModelNotifier instance is owned by a wxDataViewModel and\n"
"mirrors its notification interface.");


sipClassTypeDef sipTypeDef__dataview_wxDataViewModelNotifier = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_wxDataViewModelNotifier,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_DataViewModelNotifier,
        {0, 0, 1},
        11, methods_wxDataViewModelNotifier,
        0, SIP_NULLPTR,
        1, variables_wxDataViewModelNotifier,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxDataViewModelNotifier,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_wxDataViewModelNotifier,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxDataViewModelNotifier,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxDataViewModelNotifier,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
