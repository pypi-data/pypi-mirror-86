/*
 * Module code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_propgrid.h"

        #include <wx/object.h>
        #include <wx/propgrid/editors.h>
        #include <wx/dc.h>
        #include <wx/gdicmn.h>
        #include <wx/propgrid/propgrid.h>
        #include <wx/propgrid/property.h>
        #include <wx/gdicmn.h>
        #include <wx/propgrid/propgrid.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/editors.h>
        #include <wx/gdicmn.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/propgridpagestate.h>
        #include <wx/propgrid/propgridpagestate.h>
        #include <wx/statusbr.h>
        #include <wx/event.h>
        #include <wx/unichar.h>
        #include <wx/propgrid/props.h>
        #include <wx/colour.h>
        #include <wx/propgrid/manager.h>
        #include <wx/bitmap.h>
        #include <wx/propgrid/propgridiface.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/propgridpagestate.h>
        #include <wx/propgrid/propgridpagestate.h>
        #include <wx/propgrid/propgridpagestate.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/props.h>
        #include <wx/propgrid/advprops.h>
        #include <wx/propgrid/advprops.h>
        #include <wx/propgrid/advprops.h>
        #include <wx/propgrid/advprops.h>
        #include <wx/propgrid/advprops.h>
        #include <wx/propgrid/advprops.h>
        #include <wx/propgrid/advprops.h>
        #include <wx/propgrid/advprops.h>
        #include <wx/propgrid/advprops.h>
        #include <wx/propgrid/manager.h>

/* Define the strings used by this module. */
const char sipStrings__propgrid[] = {
    'w', 'x', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', ':', ':', 'E', 'd', 'i', 't', 'a', 'b', 'l', 'e', 'S', 't', 'a', 't', 'e', 'F', 'l', 'a', 'g', 's', 0,
    'w', 'x', 'N', 'u', 'm', 'e', 'r', 'i', 'c', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', ':', ':', 'N', 'u', 'm', 'e', 'r', 'i', 'c', 'T', 'y', 'p', 'e', 0,
    'w', 'x', 'A', 'r', 'r', 'a', 'y', 'S', 't', 'r', 'i', 'n', 'g', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', ':', ':', 'C', 'o', 'n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 's', 0,
    'w', 'x', 'P', 'G', '_', 'V', 'A', 'L', 'I', 'D', 'A', 'T', 'I', 'O', 'N', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '_', 'B', 'E', 'H', 'A', 'V', 'I', 'O', 'R', '_', 'F', 'L', 'A', 'G', 'S', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', '_', 'V', 'A', 'L', 'I', 'D', 'A', 'T', 'I', 'O', 'N', '_', 'E', 'R', 'R', 'O', 'R', '_', 'M', 'E', 'S', 'S', 'A', 'G', 'E', 0,
    'P', 'G', '_', 'E', 'X', '_', 'W', 'R', 'I', 'T', 'E', 'O', 'N', 'L', 'Y', '_', 'B', 'U', 'I', 'L', 'T', 'I', 'N', '_', 'A', 'T', 'T', 'R', 'I', 'B', 'U', 'T', 'E', 'S', 0,
    'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'E', '_', 'A', 'L', 'L', '_', 'P', 'A', 'R', 'E', 'N', 'T', 'S', '_', 'R', 'E', 'C', 'U', 'R', 'S', 'I', 'V', 'E', 'L', 'Y', 0,
    'P', 'G', '_', 'V', 'F', 'B', '_', 'S', 'H', 'O', 'W', '_', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '_', 'O', 'N', '_', 'S', 'T', 'A', 'T', 'U', 'S', 'B', 'A', 'R', 0,
    'P', 'G', '_', 'U', 'N', 'E', 'D', 'I', 'T', 'A', 'B', 'L', 'E', '_', 'C', 'O', 'M', 'P', 'O', 'S', 'I', 'T', 'E', '_', 'F', 'R', 'A', 'G', 'M', 'E', 'N', 'T', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', '_', 'V', 'A', 'L', 'I', 'D', 'A', 'T', 'I', 'O', 'N', '_', 'S', 'A', 'T', 'U', 'R', 'A', 'T', 'E', 0,
    'G', 'e', 't', 'S', 'i', 'z', 'e', 'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'F', 'o', 'r', 'S', 'c', 'r', 'o', 'l', 'l', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'G', 'e', 't', 'M', 'a', 'i', 'n', 'W', 'i', 'n', 'd', 'o', 'w', 'O', 'f', 'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'e', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'w', 'x', 'P', 'G', 'N', 'u', 'm', 'e', 'r', 'i', 'c', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'n', 's', 't', 'a', 'n', 't', 's', 0,
    'S', 'e', 't', 'U', 'n', 's', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 'V', 'a', 'l', 'u', 'e', 'A', 'p', 'p', 'e', 'a', 'r', 'a', 'n', 'c', 'e', 0,
    'G', 'e', 't', 'U', 'n', 's', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 'V', 'a', 'l', 'u', 'e', 'A', 'p', 'p', 'e', 'a', 'r', 'a', 'n', 'c', 'e', 0,
    'P', 'G', '_', 'E', 'X', '_', 'W', 'I', 'N', 'D', 'O', 'W', '_', 'P', 'G', 'M', 'A', 'N', '_', 'S', 'T', 'Y', 'L', 'E', '_', 'M', 'A', 'S', 'K', 0,
    'P', 'G', '_', 'E', 'X', '_', 'A', 'U', 'T', 'O', '_', 'U', 'N', 'S', 'P', 'E', 'C', 'I', 'F', 'I', 'E', 'D', '_', 'V', 'A', 'L', 'U', 'E', 'S', 0,
    'P', 'G', '_', 'E', 'X', '_', 'N', 'A', 'T', 'I', 'V', 'E', '_', 'D', 'O', 'U', 'B', 'L', 'E', '_', 'B', 'U', 'F', 'F', 'E', 'R', 'I', 'N', 'G', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'A', 'r', 'r', 'a', 'y', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'D', 'o', 'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'W', 'x', 'O', 'b', 'j', 'e', 'c', 't', 'P', 't', 'r', 0,
    'G', 'e', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 'F', 'a', 'i', 'l', 'u', 'r', 'e', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'S', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'F', 'o', 'r', 'e', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'S', 'e', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 'F', 'a', 'i', 'l', 'u', 'r', 'e', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'G', 'e', 't', 'D', 'i', 's', 'p', 'l', 'a', 'y', 'e', 'd', 'C', 'o', 'm', 'm', 'o', 'n', 'V', 'a', 'l', 'u', 'e', 'C', 'o', 'u', 'n', 't', 0,
    'w', 'x', 'P', 'G', '_', 'G', 'E', 'T', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', 'V', 'A', 'L', 'U', 'E', 'S', '_', 'F', 'L', 'A', 'G', 'S', 0,
    'w', 'x', 'P', 'G', 'A', 'r', 'r', 'a', 'y', 'S', 't', 'r', 'i', 'n', 'g', 'E', 'd', 'i', 't', 'o', 'r', 'D', 'i', 'a', 'l', 'o', 'g', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', '_', 'V', 'A', 'L', 'I', 'D', 'A', 'T', 'I', 'O', 'N', '_', 'W', 'R', 'A', 'P', 0,
    'S', 'e', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 'F', 'a', 'i', 'l', 'u', 'r', 'e', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    'G', 'e', 't', 'U', 'n', 'c', 'o', 'm', 'm', 'i', 't', 't', 'e', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 0,
    'P', 'G', '_', 'A', 'C', 'T', 'I', 'O', 'N', '_', 'C', 'O', 'L', 'L', 'A', 'P', 'S', 'E', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'U', 'n', 's', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'C', 'o', 'l', 'o', 'u', 'r', 's', 'T', 'o', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'U', 'L', 'o', 'n', 'g', 'L', 'o', 'n', 'g', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'C', 'a', 'l', 'c', 'u', 'l', 'a', 't', 'e', 'F', 'o', 'n', 't', 'A', 'n', 'd', 'B', 'i', 't', 'm', 'a', 'p', 'S', 't', 'u', 'f', 'f', 0,
    'w', 'x', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 'H', 'i', 't', 'T', 'e', 's', 't', 'R', 'e', 's', 'u', 'l', 't', 0,
    'w', 'x', 'P', 'G', 'T', 'e', 'x', 't', 'C', 't', 'r', 'l', 'A', 'n', 'd', 'B', 'u', 't', 't', 'o', 'n', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'G', 'e', 't', 'T', 'e', 'x', 't', 'C', 't', 'r', 'l', 'V', 'a', 'l', 'u', 'e', 'F', 'r', 'o', 'm', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'C', 'H', 'I', 'L', 'D', 'R', 'E', 'N', '_', 'A', 'R', 'E', '_', 'C', 'O', 'P', 'I', 'E', 'S', 0,
    'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 'N', 'a', 'm', 'e', 'S', 't', 'r', 0,
    'w', 'x', 'N', 'u', 'm', 'e', 'r', 'i', 'c', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'S', 'H', 'O', 'W', '_', 'F', 'U', 'L', 'L', '_', 'F', 'I', 'L', 'E', 'N', 'A', 'M', 'E', 0,
    'S', 'e', 't', 'C', 'a', 'p', 't', 'i', 'o', 'n', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'C', 'a', 'p', 't', 'i', 'o', 'n', 'F', 'o', 'r', 'e', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'C', 'a', 'p', 't', 'i', 'o', 'n', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'E', 'd', 'i', 't', 'o', 'r', 's', 'V', 'a', 'l', 'u', 'e', 'W', 'a', 's', 'N', 'o', 't', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'D', 'o', 'O', 'n', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 'F', 'a', 'i', 'l', 'u', 'r', 'e', 'R', 'e', 's', 'e', 't', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'L', 'A', 'B', 'E', 'L', '_', 'E', 'D', 'I', 'T', '_', 'E', 'N', 'D', 'I', 'N', 'G', 0,
    'P', 'G', '_', 'E', 'X', '_', 'W', 'I', 'N', 'D', 'O', 'W', '_', 'P', 'G', '_', 'S', 'T', 'Y', 'L', 'E', '_', 'M', 'A', 'S', 'K', 0,
    'I', 's', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'U', 'n', 's', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'L', 'o', 'n', 'g', 'L', 'o', 'n', 'g', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'A', 'r', 'r', 'a', 'y', 'I', 'n', 't', 0,
    'w', 'x', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 'B', 'a', 's', 'e', 0,
    'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'O', 'R', '_', 'M', 'A', 'S', 'K', '_', 'O', 'P', '_', 'P', 'A', 'R', 'E', 'N', 'T', 0,
    'P', 'G', 'E', 'd', 'i', 't', 'o', 'r', '_', 'T', 'e', 'x', 't', 'C', 't', 'r', 'l', 'A', 'n', 'd', 'B', 'u', 't', 't', 'o', 'n', 0,
    'S', 'h', 'o', 'u', 'l', 'd', 'S', 'c', 'r', 'o', 'l', 'l', 'T', 'o', 'C', 'h', 'i', 'l', 'd', 'O', 'n', 'F', 'o', 'c', 'u', 's', 0,
    'G', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'B', 'o', 'r', 'd', 'e', 'r', 'F', 'o', 'r', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'P', 'G', 'G', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'I', 'm', 'a', 'g', 'e', 'W', 'i', 'l', 'd', 'c', 'a', 'r', 'd', 0,
    'S', 'e', 't', 'C', 'e', 'l', 'l', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'd', 'T', 'e', 'x', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'C', 'e', 'l', 'l', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'd', 'T', 'e', 'x', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'L', 'A', 'B', 'E', 'L', '_', 'E', 'D', 'I', 'T', '_', 'B', 'E', 'G', 'I', 'N', 0,
    'P', 'G', '_', 'A', 'C', 'T', 'I', 'O', 'N', '_', 'E', 'X', 'P', 'A', 'N', 'D', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', 0,
    'P', 'G', '_', 'E', 'X', '_', 'E', 'N', 'A', 'B', 'L', 'E', '_', 'T', 'L', 'P', '_', 'T', 'R', 'A', 'C', 'K', 'I', 'N', 'G', 0,
    'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'A', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'E', 'd', 'i', 't', 'o', 'r', 's', 0,
    'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'E', '_', 'F', 'I', 'X', 'E', 'D', '_', 'C', 'H', 'I', 'L', 'D', 'R', 'E', 'N', 0,
    'w', 'x', 'P', 'G', 'C', 'h', 'o', 'i', 'c', 'e', 'A', 'n', 'd', 'B', 'u', 't', 't', 'o', 'n', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'U', 'S', 'E', 'S', '_', 'C', 'O', 'M', 'M', 'O', 'N', '_', 'V', 'A', 'L', 'U', 'E', 0,
    'G', 'e', 't', 'C', 'l', 'a', 's', 's', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'T', 'R', 'A', 'N', 'S', 'L', 'A', 'T', 'E', '_', 'C', 'U', 'S', 'T', 'O', 'M', 0,
    'P', 'G', '_', 'E', 'X', '_', 'A', 'L', 'W', 'A', 'Y', 'S', '_', 'A', 'L', 'L', 'O', 'W', '_', 'F', 'O', 'C', 'U', 'S', 0,
    'P', 'G', '_', 'E', 'X', '_', 'N', 'O', '_', 'T', 'O', 'O', 'L', 'B', 'A', 'R', '_', 'D', 'I', 'V', 'I', 'D', 'E', 'R', 0,
    'P', 'G', '_', 'E', 'X', '_', 'M', 'U', 'L', 'T', 'I', 'P', 'L', 'E', '_', 'S', 'E', 'L', 'E', 'C', 'T', 'I', 'O', 'N', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'D', 'o', 'u', 'b', 'l', 'e', 0,
    'D', 'o', 'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'R', 'e', 'c', 'a', 'l', 'c', 'u', 'l', 'a', 't', 'e', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'O', 'R', '_', 'M', 'A', 'S', 'K', '_', 'O', 'P', '_', 'I', 'T', 'E', 'M', 0,
    'P', 'G', 'E', 'd', 'i', 't', 'o', 'r', '_', 'C', 'h', 'o', 'i', 'c', 'e', 'A', 'n', 'd', 'B', 'u', 't', 't', 'o', 'n', 0,
    'D', 'r', 'a', 'w', 'C', 'a', 'p', 't', 'i', 'o', 'n', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'R', 'e', 'c', 't', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'C', 'L', 'A', 'S', 'S', '_', 'S', 'P', 'E', 'C', 'I', 'F', 'I', 'C', '_', '2', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'C', 'L', 'A', 'S', 'S', '_', 'S', 'P', 'E', 'C', 'I', 'F', 'I', 'C', '_', '1', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'A', 'U', 'T', 'O', '_', 'U', 'N', 'S', 'P', 'E', 'C', 'I', 'F', 'I', 'E', 'D', 0,
    'P', 'G', '_', 'S', 'E', 'T', 'V', 'A', 'L', '_', 'R', 'E', 'F', 'R', 'E', 'S', 'H', '_', 'E', 'D', 'I', 'T', 'O', 'R', 0,
    'D', 'i', 's', 'a', 'b', 'l', 'e', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'S', 'c', 'r', 'o', 'l', 'l', 'i', 'n', 'g', 0,
    'H', 'a', 's', 'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'A', 'c', 'c', 'e', 'p', 't', 's', 'F', 'o', 'c', 'u', 's', 'F', 'r', 'o', 'm', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 0,
    'S', 'e', 't', 'P', 'a', 'g', 'e', 'S', 'p', 'l', 'i', 't', 't', 'e', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'P', 'G', 'E', 'd', 'i', 't', 'o', 'r', '_', 'D', 'a', 't', 'e', 'P', 'i', 'c', 'k', 'e', 'r', 'C', 't', 'r', 'l', 0,
    'w', 'x', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 'P', 'o', 'p', 'u', 'l', 'a', 't', 'o', 'r', 0,
    'D', 'r', 'a', 'w', 'I', 't', 'e', 'm', 'A', 'n', 'd', 'V', 'a', 'l', 'u', 'e', 'R', 'e', 'l', 'a', 't', 'e', 'd', 0,
    'S', 'e', 't', 'C', 'e', 'l', 'l', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'U', 'n', 's', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 'V', 'a', 'l', 'u', 'e', 'T', 'e', 'x', 't', 0,
    'G', 'e', 't', 'C', 'e', 'l', 'l', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'C', 'o', 'm', 'm', 'i', 't', 'C', 'h', 'a', 'n', 'g', 'e', 's', 'F', 'r', 'o', 'm', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'E', 'd', 'i', 't', 'o', 'r', 's', 'V', 'a', 'l', 'u', 'e', 'W', 'a', 's', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'C', 'O', 'L', '_', 'B', 'E', 'G', 'I', 'N', '_', 'D', 'R', 'A', 'G', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'I', 'T', 'E', 'M', '_', 'C', 'O', 'L', 'L', 'A', 'P', 'S', 'E', 'D', 0,
    'P', 'G', '_', 'A', 'C', 'T', 'I', 'O', 'N', '_', 'P', 'R', 'E', 'V', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', 0,
    'P', 'G', '_', 'A', 'C', 'T', 'I', 'O', 'N', '_', 'N', 'E', 'X', 'T', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', 0,
    'P', 'G', '_', 'V', 'F', 'B', '_', 'S', 'T', 'A', 'Y', '_', 'I', 'N', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', 0,
    'P', 'G', '_', 'E', 'X', '_', 'W', 'I', 'N', 'D', 'O', 'W', '_', 'S', 'T', 'Y', 'L', 'E', '_', 'M', 'A', 'S', 'K', 0,
    'P', 'G', '_', 'E', 'X', '_', 'T', 'O', 'O', 'L', 'B', 'A', 'R', '_', 'S', 'E', 'P', 'A', 'R', 'A', 'T', 'O', 'R', 0,
    'P', 'G', '_', 'E', 'X', '_', 'H', 'I', 'D', 'E', '_', 'P', 'A', 'G', 'E', '_', 'B', 'U', 'T', 'T', 'O', 'N', 'S', 0,
    'P', 'G', '_', 'S', 'P', 'L', 'I', 'T', 'T', 'E', 'R', '_', 'A', 'U', 'T', 'O', '_', 'C', 'E', 'N', 'T', 'E', 'R', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'A', 'l', 'l', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'U', 'L', 'o', 'n', 'g', 0,
    'w', 'x', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', 0,
    'w', 'x', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 'P', 'a', 'g', 'e', 'S', 't', 'a', 't', 'e', 0,
    'w', 'x', 'P', 'G', 'E', 'd', 'i', 't', 'o', 'r', 'D', 'i', 'a', 'l', 'o', 'g', 'A', 'd', 'a', 'p', 't', 'e', 'r', 0,
    'A', 'r', 'e', 'A', 'l', 'l', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 'S', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 0,
    'A', 'c', 'c', 'e', 'p', 't', 's', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 'l', 'y', 0,
    'w', 'x', 'S', 'y', 's', 't', 'e', 'm', 'C', 'o', 'l', 'o', 'u', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'w', 'x', 'E', 'd', 'i', 't', 'o', 'r', 'D', 'i', 'a', 'l', 'o', 'g', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'S', 'T', 'A', 'T', 'I', 'C', '_', 'C', 'H', 'O', 'I', 'C', 'E', 'S', 0,
    'S', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'e', 'x', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'W', 'a', 's', 'V', 'a', 'l', 'u', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 'I', 'n', 'E', 'v', 'e', 'n', 't', 0,
    'I', 's', 'E', 'd', 'i', 't', 'o', 'r', 's', 'V', 'a', 'l', 'u', 'e', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'I', 'T', 'E', 'M', '_', 'E', 'X', 'P', 'A', 'N', 'D', 'E', 'D', 0,
    'P', 'G', '_', 'A', 'C', 'T', 'I', 'O', 'N', '_', 'P', 'R', 'E', 'S', 'S', '_', 'B', 'U', 'T', 'T', 'O', 'N', 0,
    'P', 'G', '_', 'V', 'F', 'B', '_', 'S', 'H', 'O', 'W', '_', 'M', 'E', 'S', 'S', 'A', 'G', 'E', 'B', 'O', 'X', 0,
    'P', 'G', '_', 'E', 'X', '_', 'H', 'E', 'L', 'P', '_', 'A', 'S', '_', 'T', 'O', 'O', 'L', 'T', 'I', 'P', 'S', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'L', 'o', 'n', 'g', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'B', 'o', 'o', 'l', 0,
    'P', 'r', 'e', 'p', 'a', 'r', 'e', 'A', 'f', 't', 'e', 'r', 'I', 't', 'e', 'm', 's', 'A', 'd', 'd', 'e', 'd', 0,
    'D', 'o', 'L', 'i', 'm', 'i', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'E', 'd', 'i', 't', 'i', 'n', 'g', 0,
    'G', 'e', 't', 'A', 'c', 't', 'u', 'a', 'l', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'w', 'x', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'E', '_', 'A', 'L', 'L', '_', 'P', 'A', 'R', 'E', 'N', 'T', 'S', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'C', 'O', 'M', 'P', 'O', 'S', 'E', 'D', '_', 'V', 'A', 'L', 'U', 'E', 0,
    'P', 'G', '_', 'S', 'T', 'R', 'I', 'N', 'G', '_', 'S', 'T', 'O', 'R', 'E', 'D', '_', 'F', 'L', 'A', 'G', 'S', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'P', 'A', 'R', 'E', 'N', 'T', 'A', 'L', '_', 'F', 'L', 'A', 'G', 'S', 0,
    'P', 'G', '_', 'S', 'O', 'R', 'T', '_', 'T', 'O', 'P', '_', 'L', 'E', 'V', 'E', 'L', '_', 'O', 'N', 'L', 'Y', 0,
    'G', 'e', 't', 'S', 'c', 'r', 'o', 'l', 'l', 'P', 'i', 'x', 'e', 'l', 's', 'P', 'e', 'r', 'U', 'n', 'i', 't', 0,
    'C', 'a', 'l', 'c', 'U', 'n', 's', 'c', 'r', 'o', 'l', 'l', 'e', 'd', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'e', 'r', 'D', 'a', 't', 'a', 'F', 'r', 'o', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'w', 'x', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 0,
    'w', 'x', 'M', 'u', 'l', 't', 'i', 'C', 'h', 'o', 'i', 'c', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'w', 'x', 'C', 'o', 'l', 'o', 'u', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 0,
    'P', 'G', '_', 'C', 'O', 'L', 'O', 'U', 'R', '_', 'U', 'N', 'S', 'P', 'E', 'C', 'I', 'F', 'I', 'E', 'D', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'C', 'u', 's', 't', 'o', 'm', 'N', 'e', 'w', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'w', 'x', 'P', 'G', 'A', 'r', 'r', 'a', 'y', 'E', 'd', 'i', 't', 'o', 'r', 'D', 'i', 'a', 'l', 'o', 'g', 0,
    'G', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'w', 'x', 'A', 'r', 'r', 'a', 'y', 'S', 't', 'r', 'i', 'n', 'g', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'w', 'x', 'P', 'G', 'I', 'n', 'D', 'i', 'a', 'l', 'o', 'g', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'D', 'o', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'E', 'd', 'i', 't', 'o', 'r', 'C', 'l', 'a', 's', 's', 0,
    'D', 'o', 'O', 'n', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 'F', 'a', 'i', 'l', 'u', 'r', 'e', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'C', 'O', 'L', '_', 'E', 'N', 'D', '_', 'D', 'R', 'A', 'G', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'C', 'O', 'L', '_', 'D', 'R', 'A', 'G', 'G', 'I', 'N', 'G', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'D', 'O', 'U', 'B', 'L', 'E', '_', 'C', 'L', 'I', 'C', 'K', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'P', 'A', 'G', 'E', '_', 'C', 'H', 'A', 'N', 'G', 'E', 'D', 0,
    'P', 'G', '_', 'A', 'C', 'T', 'I', 'O', 'N', '_', 'C', 'A', 'N', 'C', 'E', 'L', '_', 'E', 'D', 'I', 'T', 0,
    'w', 'x', 'P', 'G', '_', 'K', 'E', 'Y', 'B', 'O', 'A', 'R', 'D', '_', 'A', 'C', 'T', 'I', 'O', 'N', 'S', 0,
    'P', 'G', '_', 'E', 'X', '_', 'N', 'O', '_', 'F', 'L', 'A', 'T', '_', 'T', 'O', 'O', 'L', 'B', 'A', 'R', 0,
    'w', 'x', 'P', 'G', '_', 'E', 'X', '_', 'W', 'I', 'N', 'D', 'O', 'W', '_', 'S', 'T', 'Y', 'L', 'E', 'S', 0,
    'P', 'G', '_', 'N', 'O', '_', 'I', 'N', 'T', 'E', 'R', 'N', 'A', 'L', '_', 'B', 'O', 'R', 'D', 'E', 'R', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'T', 'e', 'x', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'H', 'e', 'l', 'p', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'G', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'I', 'n', 't', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'T', 'e', 'x', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'H', 'e', 'l', 'p', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 'W', 'i', 't', 'h', 'F', 'l', 'a', 'g', 0,
    'B', 'a', 's', 'e', 'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'B', 'y', 'N', 'a', 'm', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'P', 'r', 'o', 'p', 'o', 'r', 't', 'i', 'o', 'n', 0,
    'D', 'o', 'S', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'P', 'r', 'o', 'p', 'o', 'r', 't', 'i', 'o', 'n', 0,
    'D', 'o', 'R', 'e', 'm', 'o', 'v', 'e', 'F', 'r', 'o', 'm', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'D', 'o', 'S', 'e', 't', 'S', 'p', 'l', 'i', 't', 't', 'e', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'O', 'R', '_', 'F', 'L', 'A', 'G', 'S', '_', 'A', 'L', 'L', 0,
    'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'E', '_', 'C', 'A', 'T', 'E', 'G', 'O', 'R', 'I', 'E', 'S', 0,
    'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'E', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'I', 'E', 'S', 0,
    'C', 'a', 'n', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'C', 'u', 's', 't', 'o', 'm', 'I', 'm', 'a', 'g', 'e', 0,
    'S', 'e', 't', 'C', 'o', 'n', 't', 'r', 'o', 'l', 'S', 't', 'r', 'i', 'n', 'g', 'V', 'a', 'l', 'u', 'e', 0,
    'S', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'T', 'o', 'U', 'n', 's', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 0,
    'G', 'e', 't', 'L', 'a', 's', 't', 'V', 'i', 's', 'i', 'b', 'l', 'e', 'S', 'u', 'b', 'I', 't', 'e', 'm', 0,
    'G', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'C', 'o', 'm', 'p', 'o', 's', 'e', 'd', 'V', 'a', 'l', 'u', 'e', 0,
    'A', 'r', 'e', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 's', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'B', 'E', 'I', 'N', 'G', '_', 'D', 'E', 'L', 'E', 'T', 'E', 'D', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '_', 'V', 'A', 'L', 'U', 'E', 0,
    'P', 'G', '_', 'S', 'E', 'T', 'V', 'A', 'L', '_', 'F', 'R', 'O', 'M', '_', 'P', 'A', 'R', 'E', 'N', 'T', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'G', 'R', 'A', 'M', 'M', 'A', 'T', 'I', 'C', '_', 'V', 'A', 'L', 'U', 'E', 0,
    'P', 'G', '_', 'C', 'O', 'M', 'P', 'O', 'S', 'I', 'T', 'E', '_', 'F', 'R', 'A', 'G', 'M', 'E', 'N', 'T', 0,
    'P', 'G', '_', 'P', 'R', 'E', 'F', 'I', 'X', '_', 'D', 'O', 'L', 'L', 'A', 'R', '_', 'S', 'I', 'G', 'N', 0,
    't', 'e', 's', 't', 'P', 'G', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'T', 'y', 'p', 'e', 'N', 'a', 'm', 'e', 0,
    'G', 'e', 't', 'C', 'u', 's', 't', 'o', 'm', 'C', 'o', 'l', 'o', 'u', 'r', 'I', 'n', 'd', 'e', 'x', 0,
    'G', 'e', 't', 'T', 'e', 'x', 't', 'C', 't', 'r', 'l', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'C', 'o', 'n', 'v', 'e', 'r', 't', 'A', 'r', 'r', 'a', 'y', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'w', 'x', 'L', 'o', 'n', 'g', 'S', 't', 'r', 'i', 'n', 'g', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'U', 'S', 'E', '_', 'C', 'H', 'E', 'C', 'K', 'B', 'O', 'X', 0,
    'S', 'e', 't', 'C', 'a', 'p', 't', 'i', 'o', 'n', 'T', 'e', 'x', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'R', 'I', 'G', 'H', 'T', '_', 'C', 'L', 'I', 'C', 'K', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'H', 'I', 'G', 'H', 'L', 'I', 'G', 'H', 'T', 'E', 'D', 0,
    'P', 'G', '_', 'W', 'I', 'N', 'D', 'O', 'W', '_', 'S', 'T', 'Y', 'L', 'E', '_', 'M', 'A', 'S', 'K', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'M', 'a', 'x', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'R', 'e', 's', 't', 'o', 'r', 'e', 'E', 'd', 'i', 't', 'a', 'b', 'l', 'e', 'S', 't', 'a', 't', 'e', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'D', 'o', 'I', 's', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 0,
    'V', 'i', 'r', 't', 'u', 'a', 'l', 'H', 'e', 'i', 'g', 'h', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'G', 'e', 't', 'S', 'p', 'l', 'i', 't', 't', 'e', 'r', 'H', 'i', 't', 'O', 'f', 'f', 's', 'e', 't', 0,
    'S', 'e', 't', 'C', 'o', 'n', 't', 'r', 'o', 'l', 'A', 'p', 'p', 'e', 'a', 'r', 'a', 'n', 'c', 'e', 0,
    'G', 'e', 't', 'I', 'n', 'd', 'i', 'c', 'e', 's', 'F', 'o', 'r', 'S', 't', 'r', 'i', 'n', 'g', 's', 0,
    'G', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'A', 's', 'D', 'o', 'u', 'b', 'l', 'e', 0,
    'w', 'x', 'P', 'G', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'S', 't', 'o', 'r', 'a', 'g', 'e', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'W', 'A', 'S', '_', 'M', 'O', 'D', 'I', 'F', 'I', 'E', 'D', 0,
    'P', 'G', '_', 'S', 'E', 'T', 'V', 'A', 'L', '_', 'A', 'G', 'G', 'R', 'E', 'G', 'A', 'T', 'E', 'D', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', '_', 'S', 'P', 'E', 'C', 'I', 'F', 'I', 'C', 0,
    't', 'e', 's', 't', 'P', 'G', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'T', 'y', 'p', 'e', 'm', 'a', 'p', 0,
    'S', 'h', 'o', 'u', 'l', 'd', 'P', 'r', 'e', 'v', 'e', 'n', 't', 'A', 'p', 'p', 'E', 'x', 'i', 't', 0,
    'S', 'e', 'n', 'd', 'A', 'u', 't', 'o', 'S', 'c', 'r', 'o', 'l', 'l', 'E', 'v', 'e', 'n', 't', 's', 0,
    'C', 'a', 'l', 'c', 'S', 'c', 'r', 'o', 'l', 'l', 'e', 'd', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'e', 'r', 'D', 'a', 't', 'a', 'T', 'o', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'S', 'h', 'o', 'u', 'l', 'd', 'I', 'n', 'h', 'e', 'r', 'i', 't', 'C', 'o', 'l', 'o', 'u', 'r', 's', 0,
    'I', 'n', 'f', 'o', 'r', 'm', 'F', 'i', 'r', 's', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'S', 'e', 't', 'P', 'a', 'g', 'e', 'S', 'p', 'l', 'i', 't', 't', 'e', 'r', 'L', 'e', 'f', 't', 0,
    'I', 's', 'H', 'a', 'n', 'd', 'l', 'i', 'n', 'g', 'A', 'l', 'l', 'E', 'v', 'e', 'n', 't', 's', 0,
    'w', 'x', 'I', 'm', 'a', 'g', 'e', 'F', 'i', 'l', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'Q', 'u', 'e', 'r', 'y', 'C', 'o', 'l', 'o', 'u', 'r', 'F', 'r', 'o', 'm', 'U', 's', 'e', 'r', 0,
    'A', 'r', 'r', 'a', 'y', 'S', 't', 'r', 'i', 'n', 'g', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'D', 'i', 's', 'p', 'l', 'a', 'y', 'E', 'd', 'i', 't', 'o', 'r', 'D', 'i', 'a', 'l', 'o', 'g', 0,
    'w', 'x', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'S', 'e', 't', 'E', 'm', 'p', 't', 'y', 'S', 'p', 'a', 'c', 'e', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'S', 'p', 'l', 'i', 't', 't', 'e', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'G', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'G', 'e', 't', 'E', 'm', 'p', 't', 'y', 'S', 'p', 'a', 'c', 'e', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'C', 'l', 'e', 'a', 'r', 'A', 'c', 't', 'i', 'o', 'n', 'T', 'r', 'i', 'g', 'g', 'e', 'r', 's', 0,
    'D', 'o', 'H', 'i', 'd', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'E', 'r', 'r', 'o', 'r', 0,
    'D', 'o', 'S', 'h', 'o', 'w', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'E', 'r', 'r', 'o', 'r', 0,
    'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 'N', 'a', 'm', 'e', 'S', 't', 'r', 0,
    'P', 'G', '_', 'V', 'F', 'B', '_', 'S', 'H', 'O', 'W', '_', 'M', 'E', 'S', 'S', 'A', 'G', 'E', 0,
    'P', 'G', 'M', 'A', 'N', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', '_', 'S', 'T', 'Y', 'L', 'E', 0,
    'I', 'n', 'i', 't', 'A', 'l', 'l', 'T', 'y', 'p', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 's', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'R', 'e', 'a', 'd', 'O', 'n', 'l', 'y', 0,
    'C', 'h', 'a', 'n', 'g', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 0,
    'C', 'l', 'e', 'a', 'r', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 'S', 't', 'a', 't', 'u', 's', 0,
    'D', 'o', 'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'P', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'e', 'C', 'o', 'l', 'S', 'i', 'z', 'e', 'D', 'e', 'c', 0,
    'O', 'n', 'C', 'l', 'i', 'e', 'n', 't', 'W', 'i', 'd', 't', 'h', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'E', 'n', 's', 'u', 'r', 'e', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'w', 'x', 'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'O', 'R', '_', 'F', 'L', 'A', 'G', 'S', 0,
    'G', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'F', 'r', 'o', 'm', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'G', 'e', 't', 'V', 'a', 'l', 'u', 'e', 's', 'F', 'o', 'r', 'S', 't', 'r', 'i', 'n', 'g', 's', 0,
    'U', 's', 'e', 's', 'A', 'u', 't', 'o', 'U', 'n', 's', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 0,
    'G', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 'A', 's', 'L', 'i', 's', 't', 0,
    'w', 'x', 'P', 'G', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'M', 'I', 'S', 'C', '_', 'P', 'A', 'R', 'E', 'N', 'T', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'C', 'U', 'S', 'T', 'O', 'M', 'I', 'M', 'A', 'G', 'E', 0,
    'w', 'x', 'P', 'G', '_', 'S', 'E', 'T', 'V', 'A', 'L', 'U', 'E', '_', 'F', 'L', 'A', 'G', 'S', 0,
    'P', 'G', '_', 'V', 'A', 'L', 'U', 'E', '_', 'I', 'S', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', 0,
    'w', 'x', 'P', 'G', '_', 'M', 'I', 'S', 'C', '_', 'A', 'R', 'G', '_', 'F', 'L', 'A', 'G', 'S', 0,
    'D', 'o', 'G', 'e', 't', 'B', 'e', 's', 't', 'C', 'l', 'i', 'e', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'S', 'e', 't', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'C', 'l', 'i', 'e', 'n', 't', 'A', 'r', 'e', 'a', 'O', 'r', 'i', 'g', 'i', 'n', 0,
    'C', 'r', 'e', 'a', 't', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 0,
    'w', 'x', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 'P', 'a', 'g', 'e', 0,
    'w', 'x', 'P', 'G', 'S', 'p', 'i', 'n', 'C', 't', 'r', 'l', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'G', 'e', 't', 'D', 'a', 't', 'e', 'P', 'i', 'c', 'k', 'e', 'r', 'S', 't', 'y', 'l', 'e', 0,
    'G', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'A', 'r', 'r', 'a', 'y', 'I', 'n', 't', 0,
    'P', 'G', '_', 'C', 'O', 'L', 'O', 'U', 'R', '_', 'W', 'E', 'B', '_', 'B', 'A', 'S', 'E', 0,
    'C', 'r', 'e', 'a', 't', 'e', 'E', 'd', 'i', 't', 'o', 'r', 'D', 'i', 'a', 'l', 'o', 'g', 0,
    'O', 'n', 'C', 'u', 's', 't', 'o', 'm', 'S', 't', 'r', 'i', 'n', 'g', 'E', 'd', 'i', 't', 0,
    'w', 'x', 'E', 'd', 'i', 't', 'E', 'n', 'u', 'm', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'B', 'T', 'N', 0,
    'A', 'u', 't', 'o', 'G', 'e', 't', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'i', 'o', 'n', 0,
    'S', 'e', 't', 'u', 'p', 'T', 'e', 'x', 't', 'C', 't', 'r', 'l', 'V', 'a', 'l', 'u', 'e', 0,
    'S', 'e', 't', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'p', 'r', 'i', 'v', 'a', 't', 'e', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 'T', 'o', 'o', 0,
    'S', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'M', 'a', 'k', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 'E', 'd', 'i', 't', 'a', 'b', 'l', 'e', 0,
    'G', 'e', 't', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'A', 'u', 't', 'o', 'R', 'e', 's', 'i', 'z', 'i', 'n', 'g', 0,
    'V', 'a', 'l', 'u', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'I', 'n', 'E', 'v', 'e', 'n', 't', 0,
    'S', 'e', 't', 'F', 'a', 'i', 'l', 'u', 'r', 'e', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'G', 'e', 't', 'F', 'a', 'i', 'l', 'u', 'r', 'e', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'w', 'x', 'P', 'G', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 0,
    'P', 'G', '_', 'E', 'X', '_', 'M', 'O', 'D', 'E', '_', 'B', 'U', 'T', 'T', 'O', 'N', 'S', 0,
    'P', 'G', '_', 'L', 'I', 'M', 'I', 'T', 'E', 'D', '_', 'E', 'D', 'I', 'T', 'I', 'N', 'G', 0,
    'P', 'G', '_', 'S', 'T', 'A', 'T', 'I', 'C', '_', 'S', 'P', 'L', 'I', 'T', 'T', 'E', 'R', 0,
    'P', 'G', '_', 'A', 'L', 'P', 'H', 'A', 'B', 'E', 'T', 'I', 'C', '_', 'M', 'O', 'D', 'E', 0,
    'P', 'G', '_', 'H', 'I', 'D', 'E', '_', 'C', 'A', 'T', 'E', 'G', 'O', 'R', 'I', 'E', 'S', 0,
    'w', 'x', 'P', 'G', '_', 'W', 'I', 'N', 'D', 'O', 'W', '_', 'S', 'T', 'Y', 'L', 'E', 'S', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'B', 'y', 'N', 'a', 'm', 'e', 'A', 0,
    'I', 's', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'I', 's', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'E', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 0,
    'I', 's', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'B', 'y', 'L', 'a', 'b', 'e', 'l', 0,
    'D', 'o', 'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'F', 'u', 'l', 'l', 'W', 'i', 'd', 't', 'h', 0,
    'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'E', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', 0,
    'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'E', '_', 'V', 'I', 'S', 'I', 'B', 'L', 'E', 0,
    'w', 'x', 'P', 'G', 'C', 'h', 'e', 'c', 'k', 'B', 'o', 'x', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'w', 'x', 'P', 'G', 'C', 'o', 'm', 'b', 'o', 'B', 'o', 'x', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'C', 'r', 'e', 'a', 't', 'e', 'C', 'o', 'n', 't', 'r', 'o', 'l', 's', 'B', 'a', 's', 'e', 0,
    'w', 'x', 'P', 'G', 'T', 'e', 'x', 't', 'C', 't', 'r', 'l', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'S', 'e', 't', 'C', 'o', 'n', 't', 'r', 'o', 'l', 'I', 'n', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'w', 'x', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'U', 'p', 'd', 'a', 't', 'e', 'P', 'a', 'r', 'e', 'n', 't', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'S', 'e', 't', 'F', 'l', 'a', 'g', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 'l', 'y', 0,
    'S', 'e', 't', 'F', 'l', 'a', 'g', 's', 'F', 'r', 'o', 'm', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'S', 'e', 't', 'C', 'h', 'o', 'i', 'c', 'e', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'S', 'e', 't', 'A', 'u', 't', 'o', 'U', 'n', 's', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 0,
    'I', 's', 'V', 'a', 'l', 'u', 'e', 'U', 'n', 's', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 0,
    'H', 'a', 's', 'V', 'i', 's', 'i', 'b', 'l', 'e', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'G', 'e', 't', 'G', 'r', 'i', 'd', 'I', 'f', 'D', 'i', 's', 'p', 'l', 'a', 'y', 'e', 'd', 0,
    'G', 'e', 't', 'D', 'i', 's', 'p', 'l', 'a', 'y', 'e', 'd', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'G', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'A', 's', 'L', 'o', 'n', 'g', 0,
    'G', 'e', 't', 'C', 'h', 'o', 'i', 'c', 'e', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'S', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'F', 'r', 'o', 'm', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'D', 'o', 'n', 't', 'U', 's', 'e', 'C', 'e', 'l', 'l', 'C', 'o', 'l', 'o', 'u', 'r', 's', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'e', 'r', 'F', 'r', 'o', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'D', 'o', 'S', 'e', 't', 'W', 'i', 'n', 'd', 'o', 'w', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'V', 'i', 's', 'i', 'b', 'l', 'e', 'F', 'o', 'c', 'u', 's', 0,
    'P', 'G', 'E', 'd', 'i', 't', 'o', 'r', '_', 'S', 'p', 'i', 'n', 'C', 't', 'r', 'l', 0,
    'O', 'n', 'C', 'u', 's', 't', 'o', 'm', 'N', 'e', 'w', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'G', 'e', 't', 'C', 'l', 'a', 's', 's', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'w', 'x', 'N', 'u', 'm', 'e', 'r', 'i', 'c', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'D', 'o', 'S', 'c', 'a', 'n', 'F', 'o', 'r', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'S', 'e', 't', 'C', 'e', 'l', 'l', 'T', 'e', 'x', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'E', 'd', 'i', 't', 'o', 'r', 'T', 'e', 'x', 't', 'C', 't', 'r', 'l', 0,
    'G', 'e', 't', 'C', 'e', 'l', 'l', 'T', 'e', 'x', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'S', 'e', 't', 'F', 'a', 'i', 'l', 'u', 'r', 'e', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    'G', 'e', 't', 'F', 'a', 'i', 'l', 'u', 'r', 'e', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'C', 'H', 'A', 'N', 'G', 'I', 'N', 'G', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'S', 'E', 'L', 'E', 'C', 'T', 'E', 'D', 0,
    'P', 'G', '_', 'A', 'C', 'T', 'I', 'O', 'N', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', 0,
    'w', 'x', 'A', 'r', 'r', 'a', 'y', 'P', 'G', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'S', 'a', 'v', 'e', 'E', 'd', 'i', 't', 'a', 'b', 'l', 'e', 'S', 't', 'a', 't', 'e', 0,
    'I', 's', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'F', 'i', 't', 'W', 'i', 'd', 't', 'h', 0,
    'D', 'o', 'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'N', 'a', 'm', 'e', 0,
    'C', 'h', 'e', 'c', 'k', 'C', 'o', 'l', 'u', 'm', 'n', 'W', 'i', 'd', 't', 'h', 's', 0,
    'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'E', '_', 'N', 'O', 'R', 'M', 'A', 'L', 0,
    'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'E', '_', 'H', 'I', 'D', 'D', 'E', 'N', 0,
    'P', 'G', 'E', 'd', 'i', 't', 'o', 'r', '_', 'C', 'h', 'e', 'c', 'k', 'B', 'o', 'x', 0,
    'P', 'G', 'E', 'd', 'i', 't', 'o', 'r', '_', 'C', 'o', 'm', 'b', 'o', 'B', 'o', 'x', 0,
    'P', 'G', 'E', 'd', 'i', 't', 'o', 'r', '_', 'T', 'e', 'x', 't', 'C', 't', 'r', 'l', 0,
    'S', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'o', 'l', 'o', 'u', 'r', 's', 0,
    'S', 'e', 't', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 'S', 't', 'a', 't', 'u', 's', 0,
    'G', 'e', 't', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'C', 'o', 'm', 'm', 'o', 'n', 'V', 'a', 'l', 'u', 'e', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'A', 'G', 'G', 'R', 'E', 'G', 'A', 'T', 'E', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'C', 'O', 'L', 'L', 'A', 'P', 'S', 'E', 'D', 0,
    'w', 'x', 'P', 'G', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'F', 'l', 'a', 'g', 's', 0,
    'P', 'G', '_', 'S', 'E', 'T', 'V', 'A', 'L', '_', 'B', 'Y', '_', 'U', 'S', 'E', 'R', 0,
    'P', 'G', '_', 'E', 'D', 'I', 'T', 'A', 'B', 'L', 'E', '_', 'V', 'A', 'L', 'U', 'E', 0,
    'P', 'G', '_', 'R', 'E', 'C', 'U', 'R', 'S', 'E', '_', 'S', 'T', 'A', 'R', 'T', 'S', 0,
    'P', 'G', '_', 'I', 'N', 'C', '_', 'A', 'T', 'T', 'R', 'I', 'B', 'U', 'T', 'E', 'S', 0,
    'P', 'G', '_', 'K', 'E', 'E', 'P', '_', 'S', 'T', 'R', 'U', 'C', 'T', 'U', 'R', 'E', 0,
    'S', 't', 'o', 'p', 'A', 'u', 't', 'o', 'S', 'c', 'r', 'o', 'l', 'l', 'i', 'n', 'g', 0,
    'S', 'e', 't', 'S', 'c', 'r', 'o', 'l', 'l', 'P', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 0,
    'G', 'e', 't', 'S', 'c', 'r', 'o', 'l', 'l', 'P', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 0,
    'I', 'n', 'h', 'e', 'r', 'i', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'O', 't', 'h', 'e', 'r', 'D', 'i', 'r', 0,
    'S', 'e', 't', 'D', 'e', 's', 'c', 'B', 'o', 'x', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'G', 'e', 't', 'D', 'e', 's', 'c', 'B', 'o', 'x', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'w', 'x', 'C', 'u', 'r', 's', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'w', 'x', 'C', 'o', 'l', 'o', 'u', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'P', 'G', '_', 'C', 'O', 'L', 'O', 'U', 'R', '_', 'C', 'U', 'S', 'T', 'O', 'M', 0,
    'S', 'e', 't', 'N', 'e', 'w', 'B', 'u', 't', 't', 'o', 'n', 'T', 'e', 'x', 't', 0,
    'G', 'e', 't', 'I', 'n', 'd', 'e', 'x', 'F', 'o', 'r', 'V', 'a', 'l', 'u', 'e', 0,
    'A', 'd', 'd', 'S', 'p', 'i', 'n', 'S', 't', 'e', 'p', 'V', 'a', 'l', 'u', 'e', 0,
    'w', 'x', 'S', 't', 'r', 'i', 'n', 'g', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'P', 'A', 'S', 'S', 'W', 'O', 'R', 'D', 0,
    'A', 'd', 'd', 'A', 'c', 't', 'i', 'o', 'n', 'T', 'r', 'i', 'g', 'g', 'e', 'r', 0,
    'w', 'x', 'E', 'V', 'T', '_', 'P', 'G', '_', 'C', 'H', 'A', 'N', 'G', 'E', 'D', 0,
    'P', 'G', '_', 'V', 'F', 'B', '_', 'M', 'A', 'R', 'K', '_', 'C', 'E', 'L', 'L', 0,
    'P', 'G', '_', 'E', 'X', '_', 'I', 'N', 'I', 'T', '_', 'N', 'O', 'C', 'A', 'T', 0,
    'P', 'G', '_', 'S', 'T', 'A', 'T', 'I', 'C', '_', 'L', 'A', 'Y', 'O', 'U', 'T', 0,
    'P', 'G', '_', 'B', 'O', 'L', 'D', '_', 'M', 'O', 'D', 'I', 'F', 'I', 'E', 'D', 0,
    'P', 'G', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', '_', 'S', 'T', 'Y', 'L', 'E', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'I', 'm', 'a', 'g', 'e', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'L', 'a', 'b', 'e', 'l', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'L', 'a', 'b', 'e', 'l', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'I', 'm', 'a', 'g', 'e', 0,
    'B', 'e', 'g', 'i', 'n', 'A', 'd', 'd', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'S', 'p', 'l', 'i', 't', 't', 'e', 'r', 'P', 'o', 's', 'S', 't', 'a', 't', 'e', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', '_', 'c', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'D', 'o', 'S', 'e', 'l', 'e', 'c', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'R', 'e', 's', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'S', 'i', 'z', 'e', 's', 0,
    's', 'e', 't', 'S', 'p', 'l', 'i', 't', 't', 'e', 'r', 'F', 'l', 'a', 'g', 's', 0,
    'D', 'o', 'C', 'l', 'e', 'a', 'r', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'G', 'e', 't', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'i', 'e', 's', 0,
    'w', 'x', 'P', 'G', 'C', 'h', 'o', 'i', 'c', 'e', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'G', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'A', 's', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'G', 'e', 't', 'I', 'n', 'd', 'e', 'x', 'I', 'n', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'G', 'e', 't', 'F', 'l', 'a', 'g', 's', 'A', 's', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'A', 'd', 'a', 'p', 't', 'L', 'i', 's', 't', 'T', 'o', 'V', 'a', 'l', 'u', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'E', 'd', 'i', 't', 'o', 'r', 'C', 'l', 'a', 's', 's', 0,
    'D', 'o', 'n', 't', 'U', 's', 'e', 'C', 'e', 'l', 'l', 'B', 'g', 'C', 'o', 'l', 0,
    'D', 'o', 'n', 't', 'U', 's', 'e', 'C', 'e', 'l', 'l', 'F', 'g', 'C', 'o', 'l', 0,
    'w', 'x', 'P', 'G', 'C', 'e', 'l', 'l', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'R', 'E', 'A', 'D', 'O', 'N', 'L', 'Y', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'C', 'A', 'T', 'E', 'G', 'O', 'R', 'Y', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'N', 'O', 'E', 'D', 'I', 'T', 'O', 'R', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'D', 'I', 'S', 'A', 'B', 'L', 'E', 'D', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'M', 'O', 'D', 'I', 'F', 'I', 'E', 'D', 0,
    'P', 'G', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '_', 'V', 'A', 'L', 'U', 'E', 0,
    'G', 'e', 't', 'C', 'o', 'n', 't', 'e', 'n', 't', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'A', 'd', 'j', 'u', 's', 't', 'S', 'c', 'r', 'o', 'l', 'l', 'b', 'a', 'r', 's', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'e', 'r', 'T', 'o', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'S', 'e', 'n', 'd', 'D', 'e', 's', 't', 'r', 'o', 'y', 'E', 'v', 'e', 'n', 't', 0,
    'G', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'B', 'o', 'r', 'd', 'e', 'r', 0,
    'G', 'e', 't', 'E', 'v', 'e', 'n', 't', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'G', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 'P', 'a', 'g', 'e', 0,
    'S', 'e', 't', 'C', 'u', 's', 't', 'o', 'm', 'B', 'u', 't', 't', 'o', 'n', 0,
    'w', 'x', 'F', 'l', 'a', 'g', 's', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'w', 'x', 'F', 'l', 'o', 'a', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'U', 'S', 'E', '_', 'D', 'C', 'C', 0,
    'S', 'e', 't', 'M', 'a', 'r', 'g', 'i', 'n', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'I', 's', 'E', 'd', 'i', 't', 'o', 'r', 'F', 'o', 'c', 'u', 's', 'e', 'd', 0,
    'G', 'e', 't', 'M', 'a', 'r', 'g', 'i', 'n', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'f', 'a', 'i', 'l', 'u', 'r', 'e', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'G', 'e', 't', 'E', 'd', 'i', 't', 'o', 'r', 'B', 'y', 'N', 'a', 'm', 'e', 0,
    'R', 'e', 'f', 'r', 'e', 's', 'h', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'C', 'e', 'l', 'l', 0,
    'R', 'e', 'p', 'l', 'a', 'c', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'I', 's', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'S', 'h', 'o', 'w', 'n', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'N', 'a', 'm', 'e', 0,
    'D', 'i', 's', 'a', 'b', 'l', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'S', 'e', 't', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'W', 'i', 'd', 't', 'h', 0,
    'S', 'e', 't', 'S', 'p', 'l', 'i', 't', 't', 'e', 'r', 'L', 'e', 'f', 't', 0,
    'G', 'e', 't', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'W', 'i', 'd', 't', 'h', 0,
    'a', 'l', 'l', 'o', 'w', 'G', 'r', 'i', 'd', 'R', 'e', 's', 'i', 'z', 'e', 0,
    'i', 't', 'e', 'r', 'a', 't', 'e', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'P', 'G', 'E', 'd', 'i', 't', 'o', 'r', '_', 'C', 'h', 'o', 'i', 'c', 'e', 0,
    'w', 'x', 'P', 'G', 'M', 'u', 'l', 't', 'i', 'B', 'u', 't', 't', 'o', 'n', 0,
    'O', 'n', 'T', 'e', 'x', 't', 'C', 't', 'r', 'l', 'E', 'v', 'e', 'n', 't', 0,
    'w', 'x', 'P', 'G', 'C', 'h', 'o', 'i', 'c', 'e', 's', 'D', 'a', 't', 'a', 0,
    'w', 'x', 'P', 'G', 'C', 'h', 'o', 'i', 'c', 'e', 'E', 'n', 't', 'r', 'y', 0,
    'S', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'I', 'n', 'E', 'v', 'e', 'n', 't', 0,
    'S', 'e', 't', 'P', 'a', 'r', 'e', 'n', 't', 'a', 'l', 'T', 'y', 'p', 'e', 0,
    'S', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'c', 'a', 'n', 'd', 'i', 'd', 'a', 't', 'e', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'G', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'G', 'e', 't', 'O', 'r', 'C', 'r', 'e', 'a', 't', 'e', 'C', 'e', 'l', 'l', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'A', 'd', 'd', 'P', 'r', 'i', 'v', 'a', 't', 'e', 'C', 'h', 'i', 'l', 'd', 0,
    'G', 'e', 't', 'E', 'd', 'i', 't', 'o', 'r', 'D', 'i', 'a', 'l', 'o', 'g', 0,
    'R', 'e', 'f', 'r', 'e', 's', 'h', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'G', 'e', 't', 'C', 'e', 'l', 'l', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'S', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'F', 'r', 'o', 'm', 'I', 'n', 't', 0,
    'D', 'r', 'a', 'w', 'E', 'd', 'i', 't', 'o', 'r', 'V', 'a', 'l', 'u', 'e', 0,
    'P', 'G', '_', 'R', 'E', 'P', 'O', 'R', 'T', '_', 'E', 'R', 'R', 'O', 'R', 0,
    'P', 'G', '_', 'D', 'O', 'N', 'T', '_', 'R', 'E', 'C', 'U', 'R', 'S', 'E', 0,
    'w', 'x', 'P', 'G', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'L', 'i', 's', 't', 0,
    'I', 's', 'A', 'u', 't', 'o', 'S', 'c', 'r', 'o', 'l', 'l', 'i', 'n', 'g', 0,
    'G', 'e', 't', 'T', 'a', 'r', 'g', 'e', 't', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'S', 'e', 't', 'T', 'a', 'r', 'g', 'e', 't', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'S', 'c', 'r', 'o', 'l', 'l', 'i', 'n', 'g', 0,
    'D', 'o', 'G', 'e', 't', 'B', 'o', 'r', 'd', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'D', 'o', 'S', 'e', 't', 'C', 'l', 'i', 'e', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'C', 'l', 'i', 'e', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'S', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'T', 'i', 't', 'l', 'e', 0,
    'I', 's', 'P', 'a', 'g', 'e', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'G', 'e', 't', 'P', 'a', 'g', 'e', 'B', 'y', 'S', 't', 'a', 't', 'e', 0,
    'w', 'x', 'D', 'a', 't', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'C', 'o', 'l', 'o', 'u', 'r', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'w', 'x', 'F', 'o', 'n', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'G', 'e', 't', 'D', 'i', 'a', 'l', 'o', 'g', 'V', 'a', 'l', 'u', 'e', 0,
    'S', 'e', 't', 'D', 'i', 'a', 'l', 'o', 'g', 'V', 'a', 'l', 'u', 'e', 0,
    'w', 'x', 'F', 'i', 'l', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'w', 'x', 'E', 'n', 'u', 'm', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'w', 'x', 'B', 'o', 'o', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'w', 'x', 'U', 'I', 'n', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'A', 'E', 'D', 'I', 'A', 'L', 'O', 'G', '_', 'S', 'T', 'Y', 'L', 'E', 0,
    'G', 'e', 't', 'C', 'a', 'p', 't', 'i', 'o', 'n', 'F', 'o', 'n', 't', 0,
    'G', 'e', 't', 'L', 'a', 'b', 'e', 'l', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'C', 'e', 'n', 't', 'e', 'r', 'S', 'p', 'l', 'i', 't', 't', 'e', 'r', 0,
    'B', 'e', 'g', 'i', 'n', 'L', 'a', 'b', 'e', 'l', 'E', 'd', 'i', 't', 0,
    'A', 'd', 'd', 'T', 'o', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'w', 'x', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 0,
    'P', 'G', '_', 'A', 'C', 'T', 'I', 'O', 'N', '_', 'E', 'D', 'I', 'T', 0,
    'P', 'G', '_', 'V', 'F', 'B', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', 0,
    'P', 'G', '_', 'D', 'E', 'S', 'C', 'R', 'I', 'P', 'T', 'I', 'O', 'N', 0,
    'P', 'G', '_', 'H', 'I', 'D', 'E', '_', 'M', 'A', 'R', 'G', 'I', 'N', 0,
    'S', 'e', 't', 'B', 'o', 'o', 'l', 'C', 'h', 'o', 'i', 'c', 'e', 's', 0,
    'i', 'n', 'c', 'l', 'u', 'd', 'e', 'd', 'S', 't', 'a', 't', 'e', 's', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'E', 'n', 'd', 'A', 'd', 'd', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'E', 'd', 'i', 't', 'o', 'r', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 0,
    'D', 'e', 'l', 'e', 't', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'P', 'o', 's', 'S', 't', 'a', 't', 'e', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'S', 't', 'a', 't', 'e', 0,
    'w', 'x', 'P', 'G', 'P', 'r', 'o', 'p', 'A', 'r', 'g', 'C', 'l', 's', 0,
    'D', 'o', 'S', 'o', 'r', 't', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'D', 'o', 'H', 'i', 'd', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'I', 's', 'I', 'n', 'N', 'o', 'n', 'C', 'a', 't', 'M', 'o', 'd', 'e', 0,
    'D', 'o', 'S', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    's', 'p', 'l', 'i', 't', 't', 'e', 'r', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'P', 'G', '_', 'I', 'T', 'E', 'R', 'A', 'T', 'E', '_', 'A', 'L', 'L', 0,
    'G', 'e', 't', 'P', 'r', 'i', 'm', 'a', 'r', 'y', 'S', 'i', 'z', 'e', 0,
    'C', 'r', 'e', 'a', 't', 'e', 'C', 'o', 'n', 't', 'r', 'o', 'l', 's', 0,
    'w', 'x', 'P', 'G', 'W', 'i', 'n', 'd', 'o', 'w', 'L', 'i', 's', 't', 0,
    'A', 'l', 'l', 'o', 'c', 'E', 'x', 'c', 'l', 'u', 's', 'i', 'v', 'e', 0,
    'S', 'e', 't', 'W', 'a', 's', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'S', 'e', 't', 'C', 'o', 'm', 'm', 'o', 'n', 'V', 'a', 'l', 'u', 'e', 0,
    'R', 'e', 'c', 'r', 'e', 'a', 't', 'e', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'I', 's', 'T', 'e', 'x', 't', 'E', 'd', 'i', 't', 'a', 'b', 'l', 'e', 0,
    'G', 'e', 't', 'I', 'm', 'a', 'g', 'e', 'O', 'f', 'f', 's', 'e', 't', 0,
    'G', 'e', 't', 'C', 'o', 'm', 'm', 'o', 'n', 'V', 'a', 'l', 'u', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'D', 'o', 'S', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'O', 'n', 'M', 'e', 'a', 's', 'u', 'r', 'e', 'I', 'm', 'a', 'g', 'e', 0,
    'v', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'H', 'I', 'D', 'D', 'E', 'N', 0,
    'P', 'G', '_', 'P', 'R', 'E', 'F', 'I', 'X', '_', 'N', 'O', 'N', 'E', 0,
    'S', 'e', 't', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'D', 'e', 'l', 'e', 't', 'e', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'W', 'i', 'd', 't', 'h', 0,
    'G', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'P', 'a', 'g', 'e', 0,
    'S', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'C', 'o', 'u', 'n', 't', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'C', 'o', 'u', 'n', 't', 0,
    'G', 'e', 't', 'S', 'c', 'r', 'o', 'l', 'l', 'L', 'i', 'n', 'e', 's', 0,
    'p', 'i', 'x', 'e', 'l', 's', 'P', 'e', 'r', 'U', 'n', 'i', 't', 'Y', 0,
    'p', 'i', 'x', 'e', 'l', 's', 'P', 'e', 'r', 'U', 'n', 'i', 't', 'X', 0,
    'S', 'h', 'o', 'w', 'S', 'c', 'r', 'o', 'l', 'l', 'b', 'a', 'r', 's', 0,
    'G', 'e', 't', 'M', 'a', 'r', 'g', 'i', 'n', 'W', 'i', 'd', 't', 'h', 0,
    'D', 'o', 'S', 'e', 't', 'S', 'i', 'z', 'e', 'H', 'i', 'n', 't', 's', 0,
    'O', 'n', 'I', 'n', 't', 'e', 'r', 'n', 'a', 'l', 'I', 'd', 'l', 'e', 0,
    'G', 'e', 't', 'P', 'a', 'g', 'e', 'B', 'y', 'N', 'a', 'm', 'e', 0,
    'A', 'r', 'r', 'a', 'y', 'R', 'e', 'm', 'o', 'v', 'e', 'A', 't', 0,
    'A', 'r', 'r', 'a', 'y', 'G', 'e', 't', 'C', 'o', 'u', 'n', 't', 0,
    'w', 'x', 'D', 'i', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'w', 'x', 'I', 'n', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'U', 's', 'e', 'S', 'p', 'i', 'n', 'M', 'o', 't', 'i', 'o', 'n', 0,
    'c', 'h', 'o', 'i', 'c', 'e', 's', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'U', 'n', 'f', 'o', 'c', 'u', 's', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'S', 'e', 't', 'L', 'i', 'n', 'e', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'O', 'n', 'T', 'L', 'P', 'C', 'h', 'a', 'n', 'g', 'i', 'n', 'g', 0,
    'I', 's', 'A', 'n', 'y', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    's', 'p', 'l', 'i', 't', 't', 'e', 'r', 'I', 'n', 'd', 'e', 'x', 0,
    'G', 'e', 't', 'L', 'i', 'n', 'e', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'G', 'e', 't', 'F', 'o', 'n', 't', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'P', 'G', '_', 'A', 'C', 'T', 'I', 'O', 'N', '_', 'M', 'A', 'X', 0,
    'r', 'e', 's', 't', 'o', 'r', 'e', 'S', 't', 'a', 't', 'e', 's', 0,
    'E', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 'S', 't', 'a', 't', 'e', 0,
    'w', 'x', 'P', 'G', 'V', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'S', 'e', 't', 'B', 'a', 's', 'e', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'o', 'l', 'd', 'A', 'p', 'p', 'e', 'a', 'r', 'a', 'n', 'c', 'e', 0,
    'U', 'p', 'd', 'a', 't', 'e', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'S', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'I', 'm', 'a', 'g', 'e', 0,
    'R', 'e', 'f', 'r', 'e', 's', 'h', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'I', 's', 'S', 'u', 'b', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'H', 'a', 's', 'F', 'l', 'a', 'g', 's', 'E', 'x', 'a', 'c', 't', 0,
    'G', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'I', 'm', 'a', 'g', 'e', 0,
    'G', 'e', 't', 'M', 'a', 'i', 'n', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'G', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'c', 'h', 'i', 'l', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'O', 'n', 'C', 'u', 's', 't', 'o', 'm', 'P', 'a', 'i', 'n', 't', 0,
    'V', 'a', 'l', 'u', 'e', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'S', 't', 'r', 'i', 'n', 'g', 'T', 'o', 'V', 'a', 'l', 'u', 'e', 0,
    'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'm', '_', 'd', 'r', 'a', 'w', 'n', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'w', 'x', 'P', 'G', 'P', 'a', 'i', 'n', 't', 'D', 'a', 't', 'a', 0,
    'P', 'G', '_', 'F', 'U', 'L', 'L', '_', 'V', 'A', 'L', 'U', 'E', 0,
    'G', 'e', 't', 'F', 'i', 'r', 's', 't', 'C', 'h', 'i', 'l', 'd', 0,
    'E', 'n', 's', 'u', 'r', 'e', 'V', 'i', 's', 'i', 'b', 'l', 'e', 0,
    'G', 'e', 't', 'T', 'a', 'r', 'g', 'e', 't', 'R', 'e', 'c', 't', 0,
    'S', 'e', 't', 'T', 'a', 'r', 'g', 'e', 't', 'R', 'e', 'c', 't', 0,
    'S', 'e', 't', 'S', 'c', 'r', 'o', 'l', 'l', 'b', 'a', 'r', 's', 0,
    'S', 'e', 't', 'S', 'c', 'r', 'o', 'l', 'l', 'R', 'a', 't', 'e', 0,
    'S', 'e', 't', 'H', 'e', 'l', 'p', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'G', 'e', 't', 'H', 'e', 'l', 'p', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'S', 'e', 't', 'T', 'e', 'x', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'D', 'o', 'G', 'e', 't', 'B', 'e', 's', 't', 'S', 'i', 'z', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'G', 'e', 't', 'C', 'h', 'i', 'l', 'd', 'C', 'o', 'u', 'n', 't', 0,
    'G', 'e', 't', 'T', 'e', 'x', 't', 'E', 'x', 't', 'e', 'n', 't', 0,
    'S', 'e', 't', 'C', 'l', 'i', 'e', 'n', 't', 'D', 'a', 't', 'a', 0,
    'G', 'e', 't', 'C', 'l', 'i', 'e', 'n', 't', 'D', 'a', 't', 'a', 0,
    'G', 'e', 't', 'D', 'a', 't', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'S', 'e', 't', 'D', 'a', 't', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'Q', 'u', 'o', 't', 'e', 'S', 't', 'r', 'i', 'n', 'g', 's', 0,
    'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'P', 'a', 'r', 's', 'e', 'C', 'h', 'o', 'i', 'c', 'e', 's', 0,
    'G', 'e', 't', 'C', 'u', 'r', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'A', 'd', 'd', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'n', 'e', 'w', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'R', 'e', 's', 'e', 't', 'C', 'o', 'l', 'o', 'u', 'r', 's', 0,
    'G', 'e', 't', 'R', 'o', 'w', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'E', 'n', 'd', 'L', 'a', 'b', 'e', 'l', 'E', 'd', 'i', 't', 0,
    'i', 'n', 'v', 'a', 'l', 'i', 'd', 'V', 'a', 'l', 'u', 'e', 0,
    'P', 'G', '_', 'A', 'U', 'T', 'O', '_', 'S', 'O', 'R', 'T', 0,
    'n', 'e', 'w', 'p', 'r', 'o', 'p', 'l', 'a', 'b', 'e', 'l', 0,
    'G', 'e', 't', 'V', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'D', 'e', 's', 'c', 'B', 'o', 'x', 'S', 't', 'a', 't', 'e', 0,
    'f', 'r', 'o', 'm', 'O', 'n', 'R', 'e', 's', 'i', 'z', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'I', 't', 'e', 'm', 'A', 't', 'Y', 0,
    'D', 'o', 'F', 'i', 't', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'D', 'o', 'S', 'h', 'o', 'w', 'D', 'i', 'a', 'l', 'o', 'g', 0,
    'G', 'e', 't', 'S', 'e', 'c', 'o', 'n', 'd', 'a', 'r', 'y', 0,
    'S', 'e', 't', 'S', 'e', 'c', 'o', 'n', 'd', 'a', 'r', 'y', 0,
    'C', 'o', 'p', 'y', 'D', 'a', 't', 'a', 'F', 'r', 'o', 'm', 0,
    'I', 's', 'S', 'o', 'm', 'e', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'I', 'n', 's', 'e', 'r', 't', 'C', 'h', 'o', 'i', 'c', 'e', 0,
    'G', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'T', 'y', 'p', 'e', 0,
    'G', 'e', 't', 'M', 'a', 'x', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'D', 'e', 'l', 'e', 't', 'e', 'C', 'h', 'o', 'i', 'c', 'e', 0,
    'p', 'e', 'n', 'd', 'i', 'n', 'g', 'V', 'a', 'l', 'u', 'e', 0,
    'C', 'h', 'i', 'l', 'd', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'm', '_', 'c', 'l', 'i', 'e', 'n', 't', 'D', 'a', 't', 'a', 0,
    'w', 'x', 'P', 'G', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'S', 'e', 't', 'E', 'm', 'p', 't', 'y', 'D', 'a', 't', 'a', 0,
    'w', 'x', 'P', 'G', 'C', 'e', 'l', 'l', 'D', 'a', 't', 'a', 0,
    'P', 'o', 's', 't', 'D', 'r', 'a', 'w', 'C', 'e', 'l', 'l', 0,
    'G', 'e', 't', 'I', 'm', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'G', 'r', 'i', 'd', 0,
    'm', '_', 'd', 'r', 'a', 'w', 'n', 'W', 'i', 'd', 't', 'h', 0,
    'm', '_', 'c', 'h', 'o', 'i', 'c', 'e', 'I', 't', 'e', 'm', 0,
    'P', 'G', '_', 'P', 'R', 'E', 'F', 'I', 'X', '_', '0', 'x', 0,
    'P', 'G', '_', 'B', 'A', 'S', 'E', '_', 'H', 'E', 'X', 'L', 0,
    'G', 'e', 't', 'I', 'm', 'a', 'g', 'e', 'R', 'e', 'c', 't', 0,
    'G', 'e', 't', 'S', 't', 'a', 't', 'u', 's', 'B', 'a', 'r', 0,
    'S', 'e', 't', 'M', 'a', 'x', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'G', 'e', 't', 'P', 'a', 'g', 'e', 'C', 'o', 'u', 'n', 't', 0,
    'G', 'e', 't', 'V', 'i', 'e', 'w', 'S', 't', 'a', 'r', 't', 0,
    'D', 'o', 'M', 'o', 'v', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'S', 'e', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'A', 'c', 'c', 'e', 'p', 't', 's', 'F', 'o', 'c', 'u', 's', 0,
    'G', 'e', 't', 'I', 't', 'e', 'm', 'C', 'o', 'u', 'n', 't', 0,
    'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 0,
    'G', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    '_', '_', 'c', 'o', 'n', 't', 'a', 'i', 'n', 's', '_', '_', 0,
    'w', 'x', '.', '_', 'p', 'r', 'o', 'p', 'g', 'r', 'i', 'd', 0,
    'G', 'e', 't', 'P', 'a', 'g', 'e', 'R', 'o', 'o', 't', 0,
    'G', 'e', 't', 'P', 'a', 'g', 'e', 'N', 'a', 'm', 'e', 0,
    's', 'p', 'l', 'i', 't', 't', 'e', 'r', 'P', 'o', 's', 0,
    'G', 'e', 't', 'S', 't', 'a', 't', 'e', 'P', 't', 'r', 0,
    'A', 'r', 'r', 'a', 'y', 'I', 'n', 's', 'e', 'r', 't', 0,
    'n', 'u', 'm', 'e', 'r', 'i', 'c', 'T', 'y', 'p', 'e', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'D', 'e', 'd', 'i', 'c', 'a', 't', 'e', 'K', 'e', 'y', 0,
    'P', 'G', '_', 'V', 'F', 'B', '_', 'B', 'E', 'E', 'P', 0,
    'P', 'G', '_', 'T', 'O', 'O', 'L', 'T', 'I', 'P', 'S', 0,
    'f', 'a', 'l', 's', 'e', 'C', 'h', 'o', 'i', 'c', 'e', 0,
    'R', 'e', 'f', 'r', 'e', 's', 'h', 'G', 'r', 'i', 'd', 0,
    'n', 'e', 'w', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'G', 'e', 't', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'I', 's', 'D', 'i', 's', 'p', 'l', 'a', 'y', 'e', 'd', 0,
    'G', 'e', 't', 'L', 'a', 's', 't', 'I', 't', 'e', 'm', 0,
    'w', 'i', 'd', 't', 'h', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'G', 'e', 't', 'S', 'p', 'l', 'i', 't', 't', 'e', 'r', 0,
    'G', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'u', 'n', 's', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 0,
    'E', 'x', 't', 'r', 'a', 'c', 't', 'D', 'a', 't', 'a', 0,
    'A', 'd', 'd', 'A', 's', 'S', 'o', 'r', 't', 'e', 'd', 0,
    'w', 'x', 'P', 'G', 'C', 'h', 'o', 'i', 'c', 'e', 's', 0,
    'S', 'e', 't', 'E', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 0,
    'c', 'o', 'm', 'm', 'o', 'n', 'V', 'a', 'l', 'u', 'e', 0,
    'I', 'n', 's', 'e', 'r', 't', 'C', 'h', 'i', 'l', 'd', 0,
    'G', 'e', 't', 'H', 'i', 'n', 't', 'T', 'e', 'x', 't', 0,
    'G', 'e', 't', 'B', 'a', 's', 'e', 'N', 'a', 'm', 'e', 0,
    'p', 'e', 'n', 'd', 'i', 'n', 'g', 'L', 'i', 's', 't', 0,
    'A', 'p', 'p', 'e', 'n', 'd', 'C', 'h', 'i', 'l', 'd', 0,
    'w', 'n', 'd', '_', 'p', 'r', 'i', 'm', 'a', 'r', 'y', 0,
    'P', 'r', 'e', 'D', 'r', 'a', 'w', 'C', 'e', 'l', 'l', 0,
    'C', 'h', 'o', 'i', 'c', 'e', 'P', 'o', 'p', 'u', 'p', 0,
    'P', 'G', '_', 'P', 'R', 'O', 'P', '_', 'M', 'A', 'X', 0,
    'P', 'G', '_', 'B', 'A', 'S', 'E', '_', 'H', 'E', 'X', 0,
    'P', 'G', '_', 'B', 'A', 'S', 'E', '_', 'D', 'E', 'C', 0,
    'P', 'G', '_', 'B', 'A', 'S', 'E', '_', 'O', 'C', 'T', 0,
    'w', 'x', 'P', 'G', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'C', 'o', 'l', 'l', 'a', 'p', 's', 'e', 'A', 'l', 'l', 0,
    'G', 'e', 't', 'B', 'u', 't', 't', 'o', 'n', 'I', 'd', 0,
    'D', 'o', 'P', 'r', 'e', 'p', 'a', 'r', 'e', 'D', 'C', 0,
    'S', 'e', 't', 'C', 'a', 'n', 'F', 'o', 'c', 'u', 's', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'C', 'h', 'i', 'l', 'd', 0,
    'c', 'o', 'm', 'm', 'a', 'n', 'd', 'T', 'y', 'p', 'e', 0,
    'G', 'e', 't', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    '_', '_', 'g', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    'S', 'h', 'o', 'w', 'H', 'e', 'a', 'd', 'e', 'r', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'P', 'a', 'g', 'e', 0,
    'c', 'u', 's', 't', 'B', 't', 'T', 'e', 'x', 't', 0,
    'D', 'o', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 0,
    'n', 'o', 'D', 'e', 'f', 'C', 'h', 'e', 'c', 'k', 0,
    'P', 'G', '_', 'T', 'O', 'O', 'L', 'B', 'A', 'R', 0,
    't', 'r', 'u', 'e', 'C', 'h', 'o', 'i', 'c', 'e', 0,
    'S', 'e', 't', 'P', 'r', 'o', 'p', 'V', 'a', 'l', 0,
    'v', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 0,
    'D', 'o', 'C', 'o', 'l', 'l', 'a', 'p', 's', 'e', 0,
    'b', 'a', 's', 'e', 'p', 'a', 'r', 'e', 'n', 't', 0,
    'b', 'a', 's', 'e', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'e', 'x', 't', 'r', 'a', 'S', 't', 'y', 'l', 'e', 0,
    'a', 'p', 'p', 'e', 'a', 'r', 'a', 'n', 'c', 'e', 0,
    'w', 'x', 'P', 'G', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'G', 'e', 't', 'P', 'r', 'i', 'm', 'a', 'r', 'y', 0,
    'G', 'e', 't', 'D', 'a', 't', 'a', 'P', 't', 'r', 0,
    'E', 'n', 's', 'u', 'r', 'e', 'D', 'a', 't', 'a', 0,
    'A', 's', 's', 'i', 'g', 'n', 'D', 'a', 't', 'a', 0,
    'S', 'e', 't', 'C', 'h', 'o', 'i', 'c', 'e', 's', 0,
    'e', 'd', 'i', 't', 'o', 'r', 'N', 'a', 'm', 'e', 0,
    'I', 's', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'G', 'e', 't', 'C', 'h', 'o', 'i', 'c', 'e', 's', 0,
    'c', 'h', 'i', 'l', 'd', 'V', 'a', 'l', 'u', 'e', 0,
    'c', 'h', 'i', 'l', 'd', 'I', 'n', 'd', 'e', 'x', 0,
    'I', 'n', 't', 'T', 'o', 'V', 'a', 'l', 'u', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'O', 'n', 'S', 'e', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'i', 'm', 'a', 'g', 'e', 'W', 'i', 'd', 't', 'h', 0,
    'P', 'G', '_', 'R', 'E', 'C', 'U', 'R', 'S', 'E', 0,
    'I', 'n', 's', 'e', 'r', 't', 'I', 't', 'e', 'm', 0,
    'D', 'e', 'l', 'e', 't', 'e', 'I', 't', 'e', 'm', 0,
    'G', 'e', 't', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 0,
    'w', 'i', 'd', 't', 'h', 'T', 'i', 't', 'l', 'e', 0,
    'C', 'h', 'a', 'n', 'g', 'e', 'F', 'l', 'a', 'g', 0,
    'I', 's', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'I', 's', 'E', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'P', 'a', 'g', 'e', 0,
    'I', 'n', 's', 'e', 'r', 't', 'P', 'a', 'g', 'e', 0,
    'y', 'S', 'c', 'r', 'o', 'l', 'l', 'i', 'n', 'g', 0,
    'x', 'S', 'c', 'r', 'o', 'l', 'l', 'i', 'n', 'g', 0,
    'h', 'e', 'l', 'p', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'I', 's', 'R', 'e', 't', 'a', 'i', 'n', 'e', 'd', 0,
    'I', 'n', 'i', 't', 'D', 'i', 'a', 'l', 'o', 'g', 0,
    'p', 'r', 'o', 'p', 'o', 'r', 't', 'i', 'o', 'n', 0,
    'S', 'e', 't', 'C', 'a', 'n', 'V', 'e', 't', 'o', 0,
    'C', 'l', 'e', 'a', 'r', 'P', 'a', 'g', 'e', 0,
    'G', 'e', 't', 'T', 'o', 'o', 'l', 'I', 'd', 0,
    'r', 'e', 's', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'A', 'r', 'r', 'a', 'y', 'S', 'w', 'a', 'p', 0,
    'd', 'e', 'l', 'i', 'm', 'i', 't', 'e', 'r', 0,
    's', 't', 'e', 'p', 'S', 'c', 'a', 'l', 'e', 0,
    'T', 'o', 'L', 'o', 'n', 'g', 'P', 'C', 'T', 0,
    'p', 'r', 'o', 'p', 'V', 'a', 'l', 'u', 'e', 0,
    'p', 'r', 'o', 'p', 'L', 'a', 'b', 'e', 'l', 0,
    'p', 'r', 'o', 'p', 'C', 'l', 'a', 's', 's', 0,
    'W', 'a', 's', 'V', 'e', 't', 'o', 'e', 'd', 0,
    'p', 'r', 'i', 'o', 'r', 'T', 'h', 'i', 's', 0,
    'i', 't', 'e', 'r', 'F', 'l', 'a', 'g', 's', 0,
    't', 'a', 'r', 'g', 'e', 't', 'A', 'r', 'r', 0,
    'f', 'i', 'r', 's', 't', 'P', 'r', 'o', 'p', 0,
    'A', 'l', 'l', 'S', 't', 'a', 't', 'e', 's', 0,
    'D', 'o', 'G', 'e', 't', 'R', 'o', 'o', 't', 0,
    'D', 'r', 'a', 'w', 'V', 'a', 'l', 'u', 'e', 0,
    's', 'e', 'c', 'o', 'n', 'd', 'a', 'r', 'y', 0,
    'G', 'e', 't', 'L', 'a', 'b', 'e', 'l', 's', 0,
    'u', 'n', 'm', 'a', 't', 'c', 'h', 'e', 'd', 0,
    'S', 'e', 't', 'E', 'd', 'i', 't', 'o', 'r', 0,
    'f', 'l', 'a', 'g', 's', 'M', 'a', 's', 'k', 0,
    'A', 'd', 'd', 'C', 'h', 'o', 'i', 'c', 'e', 0,
    'p', 'a', 'i', 'n', 't', 'd', 'a', 't', 'a', 0,
    't', 'h', 'i', 's', 'V', 'a', 'l', 'u', 'e', 0,
    'F', 'i', 'n', 'd', 'V', 'a', 'l', 'u', 'e', 0,
    'M', 'e', 'r', 'g', 'e', 'F', 'r', 'o', 'm', 0,
    'E', 'x', 'p', 'a', 'n', 'd', 'A', 'l', 'l', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'M', 'a', 'x', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'M', 'i', 'n', 0,
    'I', 's', 'V', 'i', 's', 'i', 'b', 'l', 'e', 0,
    'G', 'e', 't', 'S', 'c', 'a', 'l', 'e', 'Y', 0,
    'G', 'e', 't', 'S', 'c', 'a', 'l', 'e', 'X', 0,
    'n', 'o', 'R', 'e', 'f', 'r', 'e', 's', 'h', 0,
    'D', 'o', 'S', 'e', 't', 'S', 'i', 'z', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'S', 'i', 'z', 'e', 0,
    'm', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 's', 0,
    'v', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    's', 'i', 'z', 'e', 'F', 'l', 'a', 'g', 's', 0,
    'G', 'e', 't', 'B', 'u', 't', 't', 'o', 'n', 0,
    'T', 'r', 'y', 'B', 'e', 'f', 'o', 'r', 'e', 0,
    'S', 'e', 't', 'B', 'i', 't', 'm', 'a', 'p', 0,
    'S', 'e', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'G', 'e', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'I', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'S', 'e', 't', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'G', 'e', 't', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'G', 'e', 't', 'B', 'i', 't', 'm', 'a', 'p', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'a', 'l', 'l', 'P', 'a', 'g', 'e', 's', 0,
    'p', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'm', '_', 'c', 'o', 'l', 'o', 'u', 'r', 0,
    'A', 'r', 'r', 'a', 'y', 'S', 'e', 't', 0,
    'A', 'r', 'r', 'a', 'y', 'G', 'e', 't', 0,
    'U', 'n', 's', 'i', 'g', 'n', 'e', 'd', 0,
    'i', 'd', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'p', 'C', 'h', 'o', 'i', 'c', 'e', 's', 0,
    'p', 'r', 'o', 'p', 'N', 'a', 'm', 'e', 0,
    'G', 'e', 't', 'P', 'a', 'n', 'e', 'l', 0,
    'c', 'o', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'v', 'f', 'b', 'F', 'l', 'a', 'g', 's', 0,
    'a', 't', 't', 'r', 'N', 'a', 'm', 'e', 0,
    'A', 'p', 'p', 'e', 'n', 'd', 'I', 'n', 0,
    'G', 'e', 't', 'F', 'i', 'r', 's', 't', 0,
    'v', 's', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'D', 'o', 'E', 'x', 'p', 'a', 'n', 'd', 0,
    'D', 'o', 'A', 'p', 'p', 'e', 'n', 'd', 0,
    'd', 'e', 'c', 'r', 'e', 'a', 's', 'e', 0,
    'c', 'o', 'l', 'C', 'o', 'u', 'n', 't', 0,
    'n', 'e', 'w', 'W', 'i', 'd', 't', 'h', 0,
    's', 'u', 'b', 'P', 'r', 'o', 'p', 's', 0,
    'l', 'i', 's', 't', 'n', 'a', 'm', 'e', 0,
    'D', 'o', 'I', 'n', 's', 'e', 'r', 't', 0,
    'D', 'o', 'D', 'e', 'l', 'e', 't', 'e', 0,
    'd', 'o', 'D', 'e', 'l', 'e', 't', 'e', 0,
    'F', 'i', 'n', 'a', 'l', 'i', 'z', 'e', 0,
    'e', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 0,
    'n', 'e', 'w', 'V', 'a', 'l', 'u', 'e', 0,
    'a', 'r', 'g', 'F', 'l', 'a', 'g', 's', 0,
    'G', 'e', 't', 'B', 'g', 'C', 'o', 'l', 0,
    'G', 'e', 't', 'F', 'g', 'C', 'o', 'l', 0,
    'w', 'x', 'P', 'G', 'C', 'e', 'l', 'l', 0,
    'S', 'e', 't', 'B', 'g', 'C', 'o', 'l', 0,
    'S', 'e', 't', 'F', 'g', 'C', 'o', 'l', 0,
    'p', 'r', 'o', 'p', 'G', 'r', 'i', 'd', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'D', 'i', 's', 'a', 'b', 'l', 'e', 'd', 0,
    'm', '_', 'p', 'a', 'r', 'e', 'n', 't', 0,
    'P', 'G', '_', 'F', 'O', 'R', 'C', 'E', 0,
    's', 't', 'a', 'r', 't', 'P', 'o', 's', 0,
    'm', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'e', 'd', 'i', 't', 'a', 'b', 'l', 'e', 0,
    'S', 'e', 't', 'S', 'c', 'a', 'l', 'e', 0,
    'p', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 0,
    'n', 'o', 'U', 'n', 'i', 't', 's', 'Y', 0,
    'n', 'o', 'U', 'n', 'i', 't', 's', 'X', 0,
    'D', 'o', 'F', 'r', 'e', 'e', 'z', 'e', 0,
    'D', 'o', 'E', 'n', 'a', 'b', 'l', 'e', 0,
    'S', 'e', 't', 'L', 'a', 'b', 'e', 'l', 0,
    'G', 'e', 't', 'L', 'a', 'b', 'e', 'l', 0,
    'I', 's', 'F', 'r', 'o', 'z', 'e', 'n', 0,
    'c', 'a', 'n', 'F', 'o', 'c', 'u', 's', 0,
    'A', 'd', 'd', 'C', 'h', 'i', 'l', 'd', 0,
    'T', 'r', 'y', 'A', 'f', 't', 'e', 'r', 0,
    'S', 'e', 't', 'S', 't', 'a', 't', 'e', 0,
    'G', 'e', 't', 'S', 't', 'a', 't', 'e', 0,
    'D', 'r', 'a', 'w', 'T', 'e', 'x', 't', 0,
    'G', 'e', 't', 'I', 'n', 'd', 'e', 'x', 0,
    'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'G', 'e', 't', 'D', 'e', 'p', 't', 'h', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 0,
    'p', 'a', 'g', 'e', 'O', 'b', 'j', 0,
    'S', 'e', 't', 'G', 'r', 'i', 'd', 0,
    'n', 'e', 'w', 'x', 'p', 'o', 's', 0,
    's', 'u', 'b', 'n', 'a', 'm', 'e', 0,
    'i', 'n', 'v', 'e', 'r', 's', 'e', 0,
    'H', 'a', 's', 'N', 'a', 'm', 'e', 0,
    'G', 'e', 't', 'P', 't', 'r', '0', 0,
    'D', 'o', 'C', 'l', 'e', 'a', 'r', 0,
    's', 't', 'r', 'i', 'n', 'g', 's', 0,
    'm', '_', 'v', 'a', 'l', 'u', 'e', 0,
    'S', 'e', 't', 'C', 'e', 'l', 'l', 0,
    'G', 'e', 't', 'G', 'r', 'i', 'd', 0,
    'G', 'e', 't', 'C', 'e', 'l', 'l', 0,
    'O', 'n', 'E', 'v', 'e', 'n', 't', 0,
    's', 'r', 'c', 'C', 'e', 'l', 'l', 0,
    'H', 'a', 's', 'T', 'e', 'x', 't', 0,
    'x', 'O', 'f', 'f', 's', 'e', 't', 0,
    'k', 'e', 'y', 'c', 'o', 'd', 'e', 0,
    'c', 'a', 'p', 't', 'i', 'o', 'n', 0,
    'G', 'e', 't', 'P', 'a', 'g', 'e', 0,
    'A', 'd', 'd', 'P', 'a', 'g', 'e', 0,
    'c', 'h', 'o', 'i', 'c', 'e', 's', 0,
    'u', 'n', 'i', 't', 'M', 'a', 'x', 0,
    'u', 'n', 'i', 't', 'M', 'i', 'n', 0,
    'v', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'H', 'a', 's', 'F', 'l', 'a', 'g', 0,
    'c', 'a', 'n', 'V', 'e', 't', 'o', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'n', 'e', 'w', 'N', 'a', 'm', 'e', 0,
    'S', 'e', 't', 'T', 'e', 'x', 't', 0,
    'G', 'e', 't', 'T', 'e', 'x', 't', 0,
    'm', 'e', 's', 's', 'a', 'g', 'e', 0,
    'S', 'e', 't', 'F', 'o', 'n', 't', 0,
    'S', 'e', 't', 'N', 'a', 'm', 'e', 0,
    'G', 'e', 't', 'D', 'a', 't', 'a', 0,
    'G', 'e', 't', 'N', 'a', 'm', 'e', 0,
    '_', '_', 'l', 'e', 'n', '_', '_', 0,
    'r', 'e', 'f', 'r', 'e', 's', 'h', 0,
    'G', 'e', 't', 'F', 'o', 'n', 't', 0,
    'D', 'e', 's', 't', 'r', 'o', 'y', 0,
    'H', 'i', 't', 'T', 'e', 's', 't', 0,
    'p', 's', 't', 'a', 't', 'e', 0,
    'O', 'n', 'S', 'h', 'o', 'w', 0,
    'G', 'e', 't', 'V', 'a', 'l', 0,
    'm', '_', 't', 'y', 'p', 'e', 0,
    'E', 's', 'c', 'a', 'p', 'e', 0,
    'S', 'i', 'g', 'n', 'e', 'd', 0,
    'n', 'e', 'w', 'T', 'L', 'P', 0,
    'c', 'o', 'm', 'm', 'i', 't', 0,
    'G', 'e', 't', 'P', 't', 'r', 0,
    'D', 'o', 'S', 'o', 'r', 't', 0,
    'n', 'I', 'n', 'd', 'e', 'x', 0,
    'A', 's', 's', 'i', 'g', 'n', 0,
    'a', 'r', 'r', 'i', 'n', 't', 0,
    'v', 'a', 'l', 'u', 'e', 's', 0,
    'l', 'a', 'b', 'e', 'l', 's', 0,
    'm', 'a', 'x', 'L', 'e', 'n', 0,
    'I', 's', 'R', 'o', 'o', 't', 0,
    'd', 'e', 'f', 'V', 'a', 'l', 0,
    'e', 'd', 'i', 't', 'o', 'r', 0,
    'R', 'e', 'n', 'd', 'e', 'r', 0,
    'c', 'l', 'i', 'e', 'n', 't', 0,
    'd', 'i', 'a', 'l', 'o', 'g', 0,
    'e', 'x', 'p', 'a', 'n', 'd', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 0,
    'r', 'o', 'w', 'M', 'a', 'x', 0,
    'r', 'o', 'w', 'M', 'i', 'n', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 0,
    'O', 'n', 'D', 'r', 'a', 'w', 0,
    'D', 'o', 'T', 'h', 'a', 'w', 0,
    'a', 'c', 't', 'i', 'o', 'n', 0,
    'o', 'r', 'i', 'e', 'n', 't', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 0,
    'C', 'r', 'e', 'a', 't', 'e', 0,
    'b', 'i', 't', 'm', 'a', 'p', 0,
    's', 't', 'r', 'e', 'a', 'm', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 0,
    'h', 'e', 'i', 'g', 'h', 't', 0,
    'f', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 'c', 'o', 'n', 'd', 0,
    'f', 'i', 'r', 's', 't', 0,
    'F', 'l', 'o', 'a', 't', 0,
    'i', 'f', 'a', 'c', 'e', 0,
    'l', 'i', 'm', 'i', 't', 0,
    'A', 't', 'E', 'n', 'd', 0,
    'p', 'L', 'i', 's', 't', 0,
    'b', 'g', 'C', 'o', 'l', 0,
    'f', 'g', 'C', 'o', 'l', 0,
    'f', 'o', 'c', 'u', 's', 0,
    'p', 'o', 'p', 'u', 'p', 0,
    'y', 's', 't', 'e', 'p', 0,
    'x', 's', 't', 'e', 'p', 0,
    'y', 'U', 'n', 'i', 't', 0,
    'x', 'U', 'n', 'i', 't', 0,
    's', 'i', 'z', 'e', 'r', 0,
    'C', 'l', 'o', 'n', 'e', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'l', 'e', 'v', 'e', 'l', 0,
    'e', 'n', 't', 'r', 'y', 0,
    'c', 'h', 'i', 'l', 'd', 0,
    't', 'i', 't', 'l', 'e', 0,
    's', 't', 'y', 'l', 'e', 0,
    'i', 'n', 'd', 'e', 'x', 0,
    'w', 'i', 'd', 't', 'h', 0,
    'G', 'e', 't', 'I', 'd', 0,
    'c', 'o', 'u', 'n', 't', 0,
    'f', 'l', 'a', 'g', 's', 0,
    'U', 'n', 'R', 'e', 'f', 0,
    'o', 't', 'h', 'e', 'r', 0,
    'p', 'v', 'a', 'l', 0,
    'P', 'r', 'e', 'v', 0,
    'c', 't', 'r', 'l', 0,
    'L', 'a', 's', 't', 0,
    'h', 'i', 'd', 'e', 0,
    'i', 'M', 'a', 'x', 0,
    'l', 'i', 's', 't', 0,
    'c', 'e', 'l', 'l', 0,
    'u', 'n', 'i', 't', 0,
    'y', 'P', 'o', 's', 0,
    'x', 'P', 'o', 's', 0,
    'v', 'e', 'r', 't', 0,
    'h', 'o', 'r', 'z', 0,
    'i', 'n', 'c', 'H', 0,
    'i', 'n', 'c', 'W', 0,
    'm', 'a', 'x', 'H', 0,
    'm', 'a', 'x', 'W', 0,
    'm', 'i', 'n', 'H', 0,
    'm', 'i', 'n', 'W', 0,
    'H', 'i', 'd', 'e', 0,
    'p', 'r', 'o', 'p', 0,
    'v', 'e', 't', 'o', 0,
    's', 'h', 'o', 'w', 0,
    't', 'e', 'x', 't', 0,
    'N', 'e', 'x', 't', 0,
    'b', 'a', 's', 'e', 0,
    'f', 'o', 'n', 't', 0,
    'C', 'o', 'p', 'y', 0,
    'G', 'e', 't', 'Y', 0,
    'r', 'e', 'c', 't', 0,
    'p', 'a', 'g', 'e', 0,
    'f', 'l', 'a', 'g', 0,
    'I', 'n', 'i', 't', 0,
    'I', 's', 'O', 'k', 0,
    't', 'i', 'm', 'e', 0,
    'i', 't', 'e', 'm', 0,
    'i', 'n', 'f', 'o', 0,
    'p', 'c', 'c', 0,
    'd', 's', 't', 0,
    's', 'r', 'c', 0,
    'p', 'w', 'c', 0,
    't', 'x', 't', 0,
    'i', 'n', 'd', 0,
    'w', 'n', 'd', 0,
    'i', 'd', 'x', 0,
    'v', 'a', 'r', 0,
    'm', 's', 'g', 0,
    'm', 'a', 'x', 0,
    'b', 'm', 'p', 0,
    'c', 'o', 'l', 0,
    'r', 'o', 'w', 0,
    'd', 'i', 'r', 0,
    'A', 'd', 'd', 0,
    'a', 'r', 'r', 0,
    's', 't', 'r', 0,
    'o', 'b', 'j', 0,
    'p', 'g', 0,
    'l', 'h', 0,
    'y', 's', 0,
    'x', 's', 0,
    'y', 'y', 0,
    'x', 'x', 0,
    'd', 'c', 0,
    's', 'z', 0,
    'p', 't', 0,
    'd', 't', 0,
    'i', 0,
};
wxVariant wxPGVariant_in_helper(PyObject* obj)
{
    wxVariant value;
    int state = 0;
    int isErr = 0;

    // Always check for None first so we don't just get NULL pointers for the
    // other types.
    if (obj == Py_None)
        value.MakeNull();

    else if (wxPyWrappedPtr_TypeCheck(obj, wxT("wxFont"))) {
        wxFont* ptr;
        wxPyConvertWrappedPtr(obj, (void**)&ptr, wxT("wxFont"));
        value << *ptr;
    }

    else if (wxPyWrappedPtr_TypeCheck(obj, wxT("wxPoint"))) {
        wxPoint* ptr;
        wxPyConvertWrappedPtr(obj, (void**)&ptr, wxT("wxPoint"));
        value << *ptr;
    }

    else if (wxPyWrappedPtr_TypeCheck(obj, wxT("wxSize"))) {
        wxSize* ptr;
        wxPyConvertWrappedPtr(obj, (void**)&ptr, wxT("wxSize"));
        value << *ptr;
    }

    else if (wxPyWrappedPtr_TypeCheck(obj, wxT("wxColourPropertyValue"))) {
        wxColourPropertyValue* ptr;
        wxPyConvertWrappedPtr(obj, (void**)&ptr, wxT("wxColourPropertyValue"));
        value << *ptr;
    }

    else if (wxPyCheckNumberSequence(obj)) {
        wxArrayInt* ptr;
        ptr = (wxArrayInt*)sipConvertToType(obj, sipType_wxArrayInt, NULL, 0, &state, &isErr);
        if (!isErr) {
            value << *ptr;
            sipReleaseType(ptr, sipType_wxArrayInt, state);
        }
    }

    else
        value = wxVariant_in_helper(obj);
    return value;
}


PyObject* wxPGVariant_out_helper(const wxVariant& value)
{
    PyObject* obj;


    if (value.IsNull()) {
        obj = Py_None;
        Py_INCREF(obj);
    }

    else if ( value.IsType("wxFont") ) {
        wxFont val;
        val << value;
        obj = wxPyConstructObject(new wxFont(val), "wxFont", true);
    }

    else if ( value.IsType("wxPoint") ) {
        const wxPoint& val = wxPointRefFromVariant(value);
        obj = wxPyConstructObject(new wxPoint(val), "wxPoint", true);
    }

    else if ( value.IsType("wxSize") ) {
        const wxSize& val = wxSizeRefFromVariant(value);
        obj = wxPyConstructObject(new wxSize(val), "wxSize", true);
    }

    else if ( value.IsType("wxColourPropertyValue") ) {
        wxColourPropertyValue val;
         val << value;
        obj = wxPyConstructObject(new wxColourPropertyValue(val), "wxColourPropertyValue", true);
    }

    else if ( value.IsType("wxArrayInt") ) {
        const wxArrayInt& arr = wxArrayIntRefFromVariant(value);
        obj = sipConvertFromType((void*)&arr, sipType_wxArrayInt, NULL);
    }

    else
        obj = wxVariant_out_helper(value);
    return obj;
}
wxPGVariant testPGVariantTypemap(const wxPGVariant& var)
{
    wxVariant local = var;  // force a copy
    return local;
}

wxString testPGVariantTypeName(const wxPGVariant& var)
{
    return var.GetType();
}

 ::wxPropertyGrid* sipVH__propgrid_90(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxPropertyGrid* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxPropertyGrid, &sipRes);

    return sipRes;
}

bool sipVH__propgrid_89(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int page)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "i", page);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__propgrid_88(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxPGPropArgCls& id)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::wxPGPropArgCls(id), sipType_wxPGPropArgCls, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::wxPropertyGridPage* sipVH__propgrid_87(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int index,const  ::wxString& label,const  ::wxBitmap& bmp, ::wxPropertyGridPage*pageObj)
{
     ::wxPropertyGridPage* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "iNND", index, new  ::wxString(label), sipType_wxString, SIP_NULLPTR, new  ::wxBitmap(bmp), sipType_wxBitmap, SIP_NULLPTR, pageObj, sipType_wxPropertyGridPage, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxPropertyGridPage, &sipRes);

    return sipRes;
}

 ::wxColour sipVH__propgrid_86(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int index)
{
     ::wxColour sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "i", index);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxColour, &sipRes);

    return sipRes;
}

 ::wxString sipVH__propgrid_85(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxColour& col,int index,int argFlags)
{
     ::wxString sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "Nii", new  ::wxColour(col), sipType_wxColour, SIP_NULLPTR, index, argFlags);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxString, &sipRes);

    return sipRes;
}

bool sipVH__propgrid_84(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxString*resString)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", resString, sipType_wxString, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH__propgrid_83(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, size_t first,size_t second)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "==", first, second);
}

void sipVH__propgrid_82(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int index)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "i", index);
}

bool sipVH__propgrid_81(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, size_t index,const  ::wxString& str)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "=N", index, new  ::wxString(str), sipType_wxString, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__propgrid_80(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxString& str,int index)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "Ni", new  ::wxString(str), sipType_wxString, SIP_NULLPTR, index);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

size_t sipVH__propgrid_79(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    size_t sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "=", &sipRes);

    return sipRes;
}

 ::wxString sipVH__propgrid_78(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, size_t index)
{
     ::wxString sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "=", index);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxString, &sipRes);

    return sipRes;
}

void sipVH__propgrid_77(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxPGVariant& value)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::wxPGVariant(value), sipType_wxPGVariant, SIP_NULLPTR);
}

 ::wxPGArrayEditorDialog* sipVH__propgrid_76(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxPGArrayEditorDialog* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxPGArrayEditorDialog, &sipRes);

    return sipRes;
}

bool sipVH__propgrid_75(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindow*parent, ::wxString& value)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", parent, sipType_wxWindow, SIP_NULLPTR, &value, sipType_wxString, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH__propgrid_74(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxArrayString& arr, ::wxString*pString,const  ::wxUniChar& delimiter)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "NDN", new  ::wxArrayString(arr), sipType_wxArrayString, SIP_NULLPTR, pString, sipType_wxString, SIP_NULLPTR, new  ::wxUniChar(delimiter), sipType_wxUniChar, SIP_NULLPTR);
}

bool sipVH__propgrid_73(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPropertyGrid*pg, ::wxPGVariant& value)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", pg, sipType_wxPropertyGrid, SIP_NULLPTR, &value, sipType_wxPGVariant, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(bH5)", &sipRes, sipType_wxPGVariant, &value);

    return sipRes;
}

bool sipVH__propgrid_72(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPropertyGrid*pg, ::wxPGVariant& value)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", pg, sipType_wxPropertyGrid, SIP_NULLPTR, &value, sipType_wxPGVariant, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

int sipVH__propgrid_71(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int value)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "i", value);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

 ::wxObject* sipVH__propgrid_70(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxObject* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_wxObject, &sipRes);

    return sipRes;
}

void sipVH__propgrid_69(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindow*window)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", window, sipType_wxWindow, SIP_NULLPTR);
}

 ::wxPGVariant sipVH__propgrid_68(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, long stepScale)
{
     ::wxPGVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "l", stepScale);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxPGVariant, &sipRes);

    return sipRes;
}

void sipVH__propgrid_67(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxString& msg)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::wxString(msg), sipType_wxString, SIP_NULLPTR);
}

 ::wxEventCategory sipVH__propgrid_66(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxEventCategory sipRes = ::wxEVT_CATEGORY_UI;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_wxEventCategory, &sipRes);

    return sipRes;
}

 ::wxEvent* sipVH__propgrid_65(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxEvent* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_wxEvent, &sipRes);

    return sipRes;
}

 ::wxSize sipVH__propgrid_64(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxSize& size)
{
     ::wxSize sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::wxSize(size), sipType_wxSize, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxSize, &sipRes);

    return sipRes;
}

bool sipVH__propgrid_63(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindow*child)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", child, sipType_wxWindow, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__propgrid_62(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxScrollWinEvent& event)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", &event, sipType_wxScrollWinEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH__propgrid_61(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxDC& dc)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", &dc, sipType_wxDC, SIP_NULLPTR);
}

bool sipVH__propgrid_60(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxUint32 flags)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "u", flags);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__propgrid_59(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGProperty*property, ::wxPGVariant& invalidValue)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", property, sipType_wxPGProperty, SIP_NULLPTR, &invalidValue, sipType_wxPGVariant, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::wxStatusBar* sipVH__propgrid_58(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxStatusBar* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxStatusBar, &sipRes);

    return sipRes;
}

void sipVH__propgrid_57(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGProperty*property,const  ::wxString& msg)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "DN", property, sipType_wxPGProperty, SIP_NULLPTR, new  ::wxString(msg), sipType_wxString, SIP_NULLPTR);
}

void sipVH__propgrid_56(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGProperty*p)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", p, sipType_wxPGProperty, SIP_NULLPTR);
}

void sipVH__propgrid_55(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPropertyGridPageState*state)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", state, sipType_wxPropertyGridPageState, SIP_NULLPTR);
}

 ::wxPGVIterator sipVH__propgrid_54(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int flags)
{
     ::wxPGVIterator sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "i", flags);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxPGVIterator, &sipRes);

    return sipRes;
}

void sipVH__propgrid_53(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int pos,int splitterColumn,int flags)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iii", pos, splitterColumn, flags);
}

 ::wxPGProperty* sipVH__propgrid_52(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGProperty*parent,int index, ::wxPGProperty*property)
{
     ::wxPGProperty* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DiD", parent, sipType_wxPGProperty, SIP_NULLPTR, index, property, sipType_wxPGProperty, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxPGProperty, &sipRes);

    return sipRes;
}

void sipVH__propgrid_51(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGProperty*item,bool doDelete)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "Db", item, sipType_wxPGProperty, SIP_NULLPTR, doDelete);
}

void sipVH__propgrid_50(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindowBase*child)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", child, sipType_wxWindowBase, SIP_NULLPTR);
}

bool sipVH__propgrid_49(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxEvent& event)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", &event, sipType_wxEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__propgrid_48(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int direction,int size,int availableOtherDir)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "iii", direction, size, availableOtherDir);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::wxPoint sipVH__propgrid_47(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxPoint sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxPoint, &sipRes);

    return sipRes;
}

void sipVH__propgrid_46(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxValidator& validator)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", const_cast< ::wxValidator *>(&validator), sipType_wxValidator, SIP_NULLPTR);
}

 ::wxWindow* sipVH__propgrid_45(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxWindow* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxWindow, &sipRes);

    return sipRes;
}

void sipVH__propgrid_44(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, bool enable)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "b", enable);
}

void sipVH__propgrid_43(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int*width,int*height)
{
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(ii)", width, height);
}

void sipVH__propgrid_42(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int x,int y,int width,int height,int sizeFlags)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iiiii", x, y, width, height, sizeFlags);
}

void sipVH__propgrid_41(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int width,int height)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "ii", width, height);
}

void sipVH__propgrid_40(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iiiiii", minW, minH, maxW, maxH, incW, incH);
}

void sipVH__propgrid_39(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int x,int y,int width,int height)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iiii", x, y, width, height);
}

void sipVH__propgrid_38(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindowVariant variant)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "F", variant, sipType_wxWindowVariant);
}

 ::wxBorder sipVH__propgrid_37(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxBorder sipRes = ::wxBORDER_DEFAULT;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_wxBorder, &sipRes);

    return sipRes;
}

 ::wxSize sipVH__propgrid_36(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxSize sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxSize, &sipRes);

    return sipRes;
}

bool sipVH__propgrid_35(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPropertyGrid*propGrid, ::wxPGProperty*property)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", propGrid, sipType_wxPropertyGrid, SIP_NULLPTR, property, sipType_wxPGProperty, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__propgrid_34(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGVariant& variant, ::wxPGProperty*property, ::wxWindow*ctrl)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DDD", &variant, sipType_wxPGVariant, SIP_NULLPTR, property, sipType_wxPGProperty, SIP_NULLPTR, ctrl, sipType_wxWindow, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__propgrid_33(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH__propgrid_32(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindow*ctrl,int index)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "Di", ctrl, sipType_wxWindow, SIP_NULLPTR, index);
}

int sipVH__propgrid_31(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindow*ctrl,const  ::wxString& label,int index)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DNi", ctrl, sipType_wxWindow, SIP_NULLPTR, new  ::wxString(label), sipType_wxString, SIP_NULLPTR, index);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

void sipVH__propgrid_30(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGProperty*property, ::wxWindow*ctrl,int value)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "DDi", property, sipType_wxPGProperty, SIP_NULLPTR, ctrl, sipType_wxWindow, SIP_NULLPTR, value);
}

void sipVH__propgrid_29(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGProperty*property, ::wxWindow*ctrl,const  ::wxString& txt)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "DDN", property, sipType_wxPGProperty, SIP_NULLPTR, ctrl, sipType_wxWindow, SIP_NULLPTR, new  ::wxString(txt), sipType_wxString, SIP_NULLPTR);
}

void sipVH__propgrid_28(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPropertyGrid*pg, ::wxPGProperty*property, ::wxWindow*ctrl,const  ::wxPGCell& appearance,const  ::wxPGCell& oldAppearance,bool unspecified)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "DDDNNb", pg, sipType_wxPropertyGrid, SIP_NULLPTR, property, sipType_wxPGProperty, SIP_NULLPTR, ctrl, sipType_wxWindow, SIP_NULLPTR, new  ::wxPGCell(appearance), sipType_wxPGCell, SIP_NULLPTR, new  ::wxPGCell(oldAppearance), sipType_wxPGCell, SIP_NULLPTR, unspecified);
}

bool sipVH__propgrid_27(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxVariant& variant, ::wxPGProperty*property, ::wxWindow*ctrl)
{
    bool sipRes = 0;
    int sipIsErr = 0;

        PyObject *sipResObj = sipCallMethod(&sipIsErr, sipMethod, "DD",
                                            property, sipType_wxPGProperty, NULL,
                                            ctrl, sipType_wxWindow, NULL);
        if (sipResObj == NULL) {
            if (PyErr_Occurred())
                PyErr_Print();
            sipRes = false;
        }
        else if (sipResObj == Py_None) {
            sipRes = false;
        } else if (sipResObj && !sipIsErr) {
            sipParseResult(&sipIsErr, sipMethod, sipResObj, "(bH5)", &sipRes, sipType_wxPGVariant, &variant);
        }

    Py_DECREF(sipMethod);

    if (sipIsErr)
        sipCallErrorHandler(sipErrorHandler, sipPySelf, sipGILState);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH__propgrid_26(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPropertyGrid*propgrid, ::wxPGProperty*property, ::wxWindow*wnd_primary, ::wxEvent& event)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DDDD", propgrid, sipType_wxPropertyGrid, SIP_NULLPTR, property, sipType_wxPGProperty, SIP_NULLPTR, wnd_primary, sipType_wxWindow, SIP_NULLPTR, &event, sipType_wxEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH__propgrid_25(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxDC& dc,const  ::wxRect& rect, ::wxPGProperty*property,const  ::wxString& text)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "DNDN", &dc, sipType_wxDC, SIP_NULLPTR, new  ::wxRect(rect), sipType_wxRect, SIP_NULLPTR, property, sipType_wxPGProperty, SIP_NULLPTR, new  ::wxString(text), sipType_wxString, SIP_NULLPTR);
}

void sipVH__propgrid_24(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGProperty*property, ::wxWindow*ctrl)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "DD", property, sipType_wxPGProperty, SIP_NULLPTR, ctrl, sipType_wxWindow, SIP_NULLPTR);
}

 ::wxPGWindowList sipVH__propgrid_23(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPropertyGrid*propgrid, ::wxPGProperty*property,const  ::wxPoint& pos,const  ::wxSize& size)
{
     ::wxPGWindowList sipRes(static_cast< ::wxWindow*>(0));
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DDNN", propgrid, sipType_wxPropertyGrid, SIP_NULLPTR, property, sipType_wxPGProperty, SIP_NULLPTR, new  ::wxPoint(pos), sipType_wxPoint, SIP_NULLPTR, new  ::wxSize(size), sipType_wxSize, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxPGWindowList, &sipRes);

    return sipRes;
}

 ::wxString sipVH__propgrid_22(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxString sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxString, &sipRes);

    return sipRes;
}

 ::wxString sipVH__propgrid_21(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int argFlags)
{
     ::wxString sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "i", argFlags);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxString, &sipRes);

    return sipRes;
}

void sipVH__propgrid_20(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGVariant& pendingValue)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", &pendingValue, sipType_wxPGVariant, SIP_NULLPTR);
}

 ::wxPGEditorDialogAdapter* sipVH__propgrid_19(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxPGEditorDialogAdapter* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_wxPGEditorDialogAdapter, &sipRes);

    return sipRes;
}

 ::wxPGVariant sipVH__propgrid_18(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxString& name)
{
     ::wxPGVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::wxString(name), sipType_wxString, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxPGVariant, &sipRes);

    return sipRes;
}

bool sipVH__propgrid_17(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxString& name, ::wxPGVariant& value)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "ND", new  ::wxString(name), sipType_wxString, SIP_NULLPTR, &value, sipType_wxPGVariant, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

int sipVH__propgrid_16(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

 ::wxPGCellRenderer* sipVH__propgrid_15(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int column)
{
     ::wxPGCellRenderer* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "i", column);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxPGCellRenderer, &sipRes);

    return sipRes;
}

void sipVH__propgrid_14(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxDC& dc,const  ::wxRect& rect, ::wxPGPaintData& paintdata)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "DND", &dc, sipType_wxDC, SIP_NULLPTR, new  ::wxRect(rect), sipType_wxRect, SIP_NULLPTR, &paintdata, sipType_wxPGPaintData, SIP_NULLPTR);
}

 ::wxValidator* sipVH__propgrid_13(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxValidator* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxValidator, &sipRes);

    return sipRes;
}

const  ::wxPGEditor* sipVH__propgrid_12(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxPGEditor* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxPGEditor, &sipRes);

    return sipRes;
}

 ::wxPGVariant sipVH__propgrid_11(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGVariant& thisValue,int childIndex, ::wxPGVariant& childValue)
{
     ::wxPGVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DiD", &thisValue, sipType_wxPGVariant, SIP_NULLPTR, childIndex, &childValue, sipType_wxPGVariant, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxPGVariant, &sipRes);

    return sipRes;
}

bool sipVH__propgrid_10(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPropertyGrid*propgrid, ::wxWindow*wnd_primary, ::wxEvent& event)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DDD", propgrid, sipType_wxPropertyGrid, SIP_NULLPTR, wnd_primary, sipType_wxWindow, SIP_NULLPTR, &event, sipType_wxEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::wxSize sipVH__propgrid_9(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int item)
{
     ::wxSize sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "i", item);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxSize, &sipRes);

    return sipRes;
}

 ::wxString sipVH__propgrid_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGVariant& value,int argFlags)
{
     ::wxString sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "Di", &value, sipType_wxPGVariant, SIP_NULLPTR, argFlags);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxString, &sipRes);

    return sipRes;
}

bool sipVH__propgrid_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGVariant& variant,int number,int argFlags)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "ii", number, argFlags);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(bH5)", &sipRes, sipType_wxPGVariant, &variant);

    return sipRes;
}

bool sipVH__propgrid_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGVariant& variant,const  ::wxString& text,int argFlags)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "Ni", new  ::wxString(text), sipType_wxString, SIP_NULLPTR, argFlags);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(bH5)", &sipRes, sipType_wxPGVariant, &variant);

    return sipRes;
}

bool sipVH__propgrid_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxPGVariant& value, ::wxPGValidationInfo& validationInfo)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", &value, sipType_wxPGVariant, SIP_NULLPTR, &validationInfo, sipType_wxPGValidationInfo, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::wxPGVariant sipVH__propgrid_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxPGVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxPGVariant, &sipRes);

    return sipRes;
}

void sipVH__propgrid_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "");
}

void sipVH__propgrid_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxDC& dc,int x,int y,int w,int h)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "Diiii", &dc, sipType_wxDC, SIP_NULLPTR, x, y, w, h);
}

 ::wxSize sipVH__propgrid_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxPGProperty*property,int column,int item)
{
     ::wxSize sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "Dii", const_cast< ::wxPGProperty *>(property), sipType_wxPGProperty, SIP_NULLPTR, column, item);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxSize, &sipRes);

    return sipRes;
}

bool sipVH__propgrid_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxDC& dc,const  ::wxRect& rect,const  ::wxPropertyGrid*propertyGrid, ::wxPGProperty*property,int column,int item,int flags)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DNDDiii", &dc, sipType_wxDC, SIP_NULLPTR, new  ::wxRect(rect), sipType_wxRect, SIP_NULLPTR, const_cast< ::wxPropertyGrid *>(propertyGrid), sipType_wxPropertyGrid, SIP_NULLPTR, property, sipType_wxPGProperty, SIP_NULLPTR, column, item, flags);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}


PyDoc_STRVAR(doc_PGGetDefaultImageWildcard, "PGGetDefaultImageWildcard() -> String");

extern "C" {static PyObject *func_PGGetDefaultImageWildcard(PyObject *,PyObject *);}
static PyObject *func_PGGetDefaultImageWildcard(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(wxPGGetDefaultImageWildcard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_PGGetDefaultImageWildcard, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_testPGVariantTypeName, "testPGVariantTypeName(var: object) -> object");

extern "C" {static PyObject *func_testPGVariantTypeName(PyObject *,PyObject *, PyObject *);}
static PyObject *func_testPGVariantTypeName(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGVariant* var;
        int varState = 0;

        static const char *sipKwdList[] = {
            sipName_var,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1", sipType_wxPGVariant,&var, &varState))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(testPGVariantTypeName(*var));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGVariant *>(var),sipType_wxPGVariant,varState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_testPGVariantTypeName, doc_testPGVariantTypeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_testPGVariantTypemap, "testPGVariantTypemap(var: object) -> object");

extern "C" {static PyObject *func_testPGVariantTypemap(PyObject *,PyObject *, PyObject *);}
static PyObject *func_testPGVariantTypemap(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGVariant* var;
        int varState = 0;

        static const char *sipKwdList[] = {
            sipName_var,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1", sipType_wxPGVariant,&var, &varState))
        {
             ::wxPGVariant*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGVariant(testPGVariantTypemap(*var));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGVariant *>(var),sipType_wxPGVariant,varState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_testPGVariantTypemap, doc_testPGVariantTypemap);

    return SIP_NULLPTR;
}
static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxArrayStringProperty__ConversionFlags, {0}, 0}, sipNameNr_ConversionFlags, 1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxNumericPropertyValidator__NumericType, {0}, 0}, sipNameNr_NumericType, 21, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxPGNumericValidationConstants, {0}, 0}, sipNameNr_PGNumericValidationConstants, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxPG_KEYBOARD_ACTIONS, {0}, 0}, sipNameNr_PG_KEYBOARD_ACTIONS, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxPG_VALIDATION_FAILURE_BEHAVIOR_FLAGS, {0}, 0}, sipNameNr_PG_VALIDATION_FAILURE_BEHAVIOR_FLAGS, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxPG_EX_WINDOW_STYLES, {0}, 0}, sipNameNr_PG_EX_WINDOW_STYLES, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxPG_WINDOW_STYLES, {0}, 0}, sipNameNr_PG_WINDOW_STYLES, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxPropertyGridInterface__EditableStateFlags, {0}, 0}, sipNameNr_EditableStateFlags, 66, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxPG_ITERATOR_FLAGS, {0}, 0}, sipNameNr_PG_ITERATOR_FLAGS, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxPGPropertyFlags, {0}, 0}, sipNameNr_PGPropertyFlags, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxPG_SETVALUE_FLAGS, {0}, 0}, sipNameNr_PG_SETVALUE_FLAGS, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxPG_MISC_ARG_FLAGS, {0}, 0}, sipNameNr_PG_MISC_ARG_FLAGS, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxPG_GETPROPERTYVALUES_FLAGS, {0}, 0}, sipNameNr_PG_GETPROPERTYVALUES_FLAGS, -1, SIP_NULLPTR},
};

/* These are the enum members of all global enums. */
static sipEnumMemberDef enummembers[] = {
    {sipName_PG_ACTION_CANCEL_EDIT, static_cast<int>(::wxPG_ACTION_CANCEL_EDIT), 57},
    {sipName_PG_ACTION_COLLAPSE_PROPERTY, static_cast<int>(::wxPG_ACTION_COLLAPSE_PROPERTY), 57},
    {sipName_PG_ACTION_EDIT, static_cast<int>(::wxPG_ACTION_EDIT), 57},
    {sipName_PG_ACTION_EXPAND_PROPERTY, static_cast<int>(::wxPG_ACTION_EXPAND_PROPERTY), 57},
    {sipName_PG_ACTION_INVALID, static_cast<int>(::wxPG_ACTION_INVALID), 57},
    {sipName_PG_ACTION_MAX, static_cast<int>(::wxPG_ACTION_MAX), 57},
    {sipName_PG_ACTION_NEXT_PROPERTY, static_cast<int>(::wxPG_ACTION_NEXT_PROPERTY), 57},
    {sipName_PG_ACTION_PRESS_BUTTON, static_cast<int>(::wxPG_ACTION_PRESS_BUTTON), 57},
    {sipName_PG_ACTION_PREV_PROPERTY, static_cast<int>(::wxPG_ACTION_PREV_PROPERTY), 57},
    {sipName_PG_ALPHABETIC_MODE, static_cast<int>(::wxPG_ALPHABETIC_MODE), 61},
    {sipName_PG_AUTO_SORT, static_cast<int>(::wxPG_AUTO_SORT), 61},
    {sipName_PG_BOLD_MODIFIED, static_cast<int>(::wxPG_BOLD_MODIFIED), 61},
    {sipName_PG_COMPOSITE_FRAGMENT, static_cast<int>(::wxPG_COMPOSITE_FRAGMENT), 58},
    {sipName_PG_DESCRIPTION, static_cast<int>(::wxPG_DESCRIPTION), 61},
    {sipName_PG_DONT_RECURSE, static_cast<int>(::wxPG_DONT_RECURSE), 55},
    {sipName_PG_EDITABLE_VALUE, static_cast<int>(::wxPG_EDITABLE_VALUE), 58},
    {sipName_PG_EX_ALWAYS_ALLOW_FOCUS, static_cast<int>(::wxPG_EX_ALWAYS_ALLOW_FOCUS), 54},
    {sipName_PG_EX_AUTO_UNSPECIFIED_VALUES, static_cast<int>(::wxPG_EX_AUTO_UNSPECIFIED_VALUES), 54},
    {sipName_PG_EX_ENABLE_TLP_TRACKING, static_cast<int>(::wxPG_EX_ENABLE_TLP_TRACKING), 54},
    {sipName_PG_EX_HELP_AS_TOOLTIPS, static_cast<int>(::wxPG_EX_HELP_AS_TOOLTIPS), 54},
    {sipName_PG_EX_HIDE_PAGE_BUTTONS, static_cast<int>(::wxPG_EX_HIDE_PAGE_BUTTONS), 54},
    {sipName_PG_EX_INIT_NOCAT, static_cast<int>(::wxPG_EX_INIT_NOCAT), 54},
    {sipName_PG_EX_MODE_BUTTONS, static_cast<int>(::wxPG_EX_MODE_BUTTONS), 54},
    {sipName_PG_EX_MULTIPLE_SELECTION, static_cast<int>(::wxPG_EX_MULTIPLE_SELECTION), 54},
    {sipName_PG_EX_NATIVE_DOUBLE_BUFFERING, static_cast<int>(::wxPG_EX_NATIVE_DOUBLE_BUFFERING), 54},
    {sipName_PG_EX_NO_FLAT_TOOLBAR, static_cast<int>(::wxPG_EX_NO_FLAT_TOOLBAR), 54},
    {sipName_PG_EX_NO_TOOLBAR_DIVIDER, static_cast<int>(::wxPG_EX_NO_TOOLBAR_DIVIDER), 54},
    {sipName_PG_EX_TOOLBAR_SEPARATOR, static_cast<int>(::wxPG_EX_TOOLBAR_SEPARATOR), 54},
    {sipName_PG_EX_WINDOW_PGMAN_STYLE_MASK, static_cast<int>(::wxPG_EX_WINDOW_PGMAN_STYLE_MASK), 54},
    {sipName_PG_EX_WINDOW_PG_STYLE_MASK, static_cast<int>(::wxPG_EX_WINDOW_PG_STYLE_MASK), 54},
    {sipName_PG_EX_WINDOW_STYLE_MASK, static_cast<int>(::wxPG_EX_WINDOW_STYLE_MASK), 54},
    {sipName_PG_EX_WRITEONLY_BUILTIN_ATTRIBUTES, static_cast<int>(::wxPG_EX_WRITEONLY_BUILTIN_ATTRIBUTES), 54},
    {sipName_PG_FORCE, static_cast<int>(::wxPG_FORCE), 55},
    {sipName_PG_FULL_VALUE, static_cast<int>(::wxPG_FULL_VALUE), 58},
    {sipName_PG_HIDE_CATEGORIES, static_cast<int>(::wxPG_HIDE_CATEGORIES), 61},
    {sipName_PG_HIDE_MARGIN, static_cast<int>(::wxPG_HIDE_MARGIN), 61},
    {sipName_PG_INC_ATTRIBUTES, static_cast<int>(::wxPG_INC_ATTRIBUTES), 55},
    {sipName_PG_ITERATE_ALL, static_cast<int>(::wxPG_ITERATE_ALL), 56},
    {sipName_PG_ITERATE_ALL_PARENTS, static_cast<int>(::wxPG_ITERATE_ALL_PARENTS), 56},
    {sipName_PG_ITERATE_ALL_PARENTS_RECURSIVELY, static_cast<int>(::wxPG_ITERATE_ALL_PARENTS_RECURSIVELY), 56},
    {sipName_PG_ITERATE_CATEGORIES, static_cast<int>(::wxPG_ITERATE_CATEGORIES), 56},
    {sipName_PG_ITERATE_DEFAULT, static_cast<int>(::wxPG_ITERATE_DEFAULT), 56},
    {sipName_PG_ITERATE_FIXED_CHILDREN, static_cast<int>(::wxPG_ITERATE_FIXED_CHILDREN), 56},
    {sipName_PG_ITERATE_HIDDEN, static_cast<int>(::wxPG_ITERATE_HIDDEN), 56},
    {sipName_PG_ITERATE_NORMAL, static_cast<int>(::wxPG_ITERATE_NORMAL), 56},
    {sipName_PG_ITERATE_PROPERTIES, static_cast<int>(::wxPG_ITERATE_PROPERTIES), 56},
    {sipName_PG_ITERATE_VISIBLE, static_cast<int>(::wxPG_ITERATE_VISIBLE), 56},
    {sipName_PG_ITERATOR_FLAGS_ALL, static_cast<int>(::wxPG_ITERATOR_FLAGS_ALL), 56},
    {sipName_PG_ITERATOR_MASK_OP_ITEM, static_cast<int>(::wxPG_ITERATOR_MASK_OP_ITEM), 56},
    {sipName_PG_ITERATOR_MASK_OP_PARENT, static_cast<int>(::wxPG_ITERATOR_MASK_OP_PARENT), 56},
    {sipName_PG_KEEP_STRUCTURE, static_cast<int>(::wxPG_KEEP_STRUCTURE), 55},
    {sipName_PG_LIMITED_EDITING, static_cast<int>(::wxPG_LIMITED_EDITING), 61},
    {sipName_PG_NO_INTERNAL_BORDER, static_cast<int>(::wxPG_NO_INTERNAL_BORDER), 61},
    {sipName_PG_PROGRAMMATIC_VALUE, static_cast<int>(::wxPG_PROGRAMMATIC_VALUE), 58},
    {sipName_PG_PROPERTY_SPECIFIC, static_cast<int>(::wxPG_PROPERTY_SPECIFIC), 58},
    {sipName_PG_PROPERTY_VALIDATION_ERROR_MESSAGE, static_cast<int>(::wxPG_PROPERTY_VALIDATION_ERROR_MESSAGE), 41},
    {sipName_PG_PROPERTY_VALIDATION_SATURATE, static_cast<int>(::wxPG_PROPERTY_VALIDATION_SATURATE), 41},
    {sipName_PG_PROPERTY_VALIDATION_WRAP, static_cast<int>(::wxPG_PROPERTY_VALIDATION_WRAP), 41},
    {sipName_PG_PROP_AGGREGATE, static_cast<int>(::wxPG_PROP_AGGREGATE), 45},
    {sipName_PG_PROP_AUTO_UNSPECIFIED, static_cast<int>(::wxPG_PROP_AUTO_UNSPECIFIED), 45},
    {sipName_PG_PROP_BEING_DELETED, static_cast<int>(::wxPG_PROP_BEING_DELETED), 45},
    {sipName_PG_PROP_CATEGORY, static_cast<int>(::wxPG_PROP_CATEGORY), 45},
    {sipName_PG_PROP_CHILDREN_ARE_COPIES, static_cast<int>(::wxPG_PROP_CHILDREN_ARE_COPIES), 45},
    {sipName_PG_PROP_CLASS_SPECIFIC_1, static_cast<int>(::wxPG_PROP_CLASS_SPECIFIC_1), 45},
    {sipName_PG_PROP_CLASS_SPECIFIC_2, static_cast<int>(::wxPG_PROP_CLASS_SPECIFIC_2), 45},
    {sipName_PG_PROP_COLLAPSED, static_cast<int>(::wxPG_PROP_COLLAPSED), 45},
    {sipName_PG_PROP_COMPOSED_VALUE, static_cast<int>(::wxPG_PROP_COMPOSED_VALUE), 45},
    {sipName_PG_PROP_CUSTOMIMAGE, static_cast<int>(::wxPG_PROP_CUSTOMIMAGE), 45},
    {sipName_PG_PROP_DISABLED, static_cast<int>(::wxPG_PROP_DISABLED), 45},
    {sipName_PG_PROP_HIDDEN, static_cast<int>(::wxPG_PROP_HIDDEN), 45},
    {sipName_PG_PROP_INVALID_VALUE, static_cast<int>(::wxPG_PROP_INVALID_VALUE), 45},
    {sipName_PG_PROP_MISC_PARENT, static_cast<int>(::wxPG_PROP_MISC_PARENT), 45},
    {sipName_PG_PROP_MODIFIED, static_cast<int>(::wxPG_PROP_MODIFIED), 45},
    {sipName_PG_PROP_NOEDITOR, static_cast<int>(::wxPG_PROP_NOEDITOR), 45},
    {sipName_PG_PROP_PROPERTY, static_cast<int>(::wxPG_PROP_PROPERTY), 45},
    {sipName_PG_PROP_READONLY, static_cast<int>(::wxPG_PROP_READONLY), 45},
    {sipName_PG_PROP_USES_COMMON_VALUE, static_cast<int>(::wxPG_PROP_USES_COMMON_VALUE), 45},
    {sipName_PG_PROP_WAS_MODIFIED, static_cast<int>(::wxPG_PROP_WAS_MODIFIED), 45},
    {sipName_PG_RECURSE, static_cast<int>(::wxPG_RECURSE), 55},
    {sipName_PG_RECURSE_STARTS, static_cast<int>(::wxPG_RECURSE_STARTS), 55},
    {sipName_PG_REPORT_ERROR, static_cast<int>(::wxPG_REPORT_ERROR), 58},
    {sipName_PG_SETVAL_AGGREGATED, static_cast<int>(::wxPG_SETVAL_AGGREGATED), 59},
    {sipName_PG_SETVAL_BY_USER, static_cast<int>(::wxPG_SETVAL_BY_USER), 59},
    {sipName_PG_SETVAL_FROM_PARENT, static_cast<int>(::wxPG_SETVAL_FROM_PARENT), 59},
    {sipName_PG_SETVAL_REFRESH_EDITOR, static_cast<int>(::wxPG_SETVAL_REFRESH_EDITOR), 59},
    {sipName_PG_SORT_TOP_LEVEL_ONLY, static_cast<int>(::wxPG_SORT_TOP_LEVEL_ONLY), 55},
    {sipName_PG_SPLITTER_AUTO_CENTER, static_cast<int>(::wxPG_SPLITTER_AUTO_CENTER), 61},
    {sipName_PG_STATIC_LAYOUT, static_cast<int>(::wxPG_STATIC_LAYOUT), 61},
    {sipName_PG_STATIC_SPLITTER, static_cast<int>(::wxPG_STATIC_SPLITTER), 61},
    {sipName_PG_TOOLBAR, static_cast<int>(::wxPG_TOOLBAR), 61},
    {sipName_PG_TOOLTIPS, static_cast<int>(::wxPG_TOOLTIPS), 61},
    {sipName_PG_UNEDITABLE_COMPOSITE_FRAGMENT, static_cast<int>(::wxPG_UNEDITABLE_COMPOSITE_FRAGMENT), 58},
    {sipName_PG_VALUE_IS_CURRENT, static_cast<int>(::wxPG_VALUE_IS_CURRENT), 58},
    {sipName_PG_VFB_BEEP, static_cast<int>(::wxPG_VFB_BEEP), 60},
    {sipName_PG_VFB_DEFAULT, static_cast<int>(::wxPG_VFB_DEFAULT), 60},
    {sipName_PG_VFB_MARK_CELL, static_cast<int>(::wxPG_VFB_MARK_CELL), 60},
    {sipName_PG_VFB_SHOW_MESSAGE, static_cast<int>(::wxPG_VFB_SHOW_MESSAGE), 60},
    {sipName_PG_VFB_SHOW_MESSAGEBOX, static_cast<int>(::wxPG_VFB_SHOW_MESSAGEBOX), 60},
    {sipName_PG_VFB_SHOW_MESSAGE_ON_STATUSBAR, static_cast<int>(::wxPG_VFB_SHOW_MESSAGE_ON_STATUSBAR), 60},
    {sipName_PG_VFB_STAY_IN_PROPERTY, static_cast<int>(::wxPG_VFB_STAY_IN_PROPERTY), 60},
    {sipName_PG_WINDOW_STYLE_MASK, static_cast<int>(::wxPG_WINDOW_STYLE_MASK), 61},
};


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes__propgrid[] = {
    &sipTypeDef__propgrid_wxArrayPGProperty.ctd_base,
    &sipTypeDef__propgrid_wxArrayStringProperty.ctd_base,
    &enumTypes[0].etd_base,
    &sipTypeDef__propgrid_wxBoolProperty.ctd_base,
    &sipTypeDef__propgrid_wxColourProperty.ctd_base,
    &sipTypeDef__propgrid_wxColourPropertyValue.ctd_base,
    &sipTypeDef__propgrid_wxCursorProperty.ctd_base,
    &sipTypeDef__propgrid_wxDateProperty.ctd_base,
    &sipTypeDef__propgrid_wxDirProperty.ctd_base,
    &sipTypeDef__propgrid_wxEditEnumProperty.ctd_base,
    &sipTypeDef__propgrid_wxEditorDialogProperty.ctd_base,
    &sipTypeDef__propgrid_wxEnumProperty.ctd_base,
    &sipTypeDef__propgrid_wxFileProperty.ctd_base,
    &sipTypeDef__propgrid_wxFlagsProperty.ctd_base,
    &sipTypeDef__propgrid_wxFloatProperty.ctd_base,
    &sipTypeDef__propgrid_wxFontProperty.ctd_base,
    &sipTypeDef__propgrid_wxImageFileProperty.ctd_base,
    &sipTypeDef__propgrid_wxIntProperty.ctd_base,
    &sipTypeDef__propgrid_wxLongStringProperty.ctd_base,
    &sipTypeDef__propgrid_wxMultiChoiceProperty.ctd_base,
    &sipTypeDef__propgrid_wxNumericProperty.ctd_base,
    &sipTypeDef__propgrid_wxNumericPropertyValidator.ctd_base,
    &enumTypes[1].etd_base,
    &sipTypeDef__propgrid_wxPGArrayEditorDialog.ctd_base,
    &sipTypeDef__propgrid_wxPGArrayStringEditorDialog.ctd_base,
    &sipTypeDef__propgrid_wxPGAttributeStorage.ctd_base,
    &sipTypeDef__propgrid_wxPGCell.ctd_base,
    &sipTypeDef__propgrid_wxPGCellData.ctd_base,
    &sipTypeDef__propgrid_wxPGCellRenderer.ctd_base,
    &sipTypeDef__propgrid_wxPGCheckBoxEditor.ctd_base,
    &sipTypeDef__propgrid_wxPGChoiceAndButtonEditor.ctd_base,
    &sipTypeDef__propgrid_wxPGChoiceEditor.ctd_base,
    &sipTypeDef__propgrid_wxPGChoiceEntry.ctd_base,
    &sipTypeDef__propgrid_wxPGChoices.ctd_base,
    &sipTypeDef__propgrid_wxPGChoicesData.ctd_base,
    &sipTypeDef__propgrid_wxPGComboBoxEditor.ctd_base,
    &sipTypeDef__propgrid_wxPGDefaultRenderer.ctd_base,
    &sipTypeDef__propgrid_wxPGEditor.ctd_base,
    &sipTypeDef__propgrid_wxPGEditorDialogAdapter.ctd_base,
    &sipTypeDef__propgrid_wxPGInDialogValidator.ctd_base,
    &sipTypeDef__propgrid_wxPGMultiButton.ctd_base,
    &enumTypes[2].etd_base,
    &sipTypeDef__propgrid_wxPGPaintData.ctd_base,
    &sipTypeDef__propgrid_wxPGPropArgCls.ctd_base,
    &sipTypeDef__propgrid_wxPGProperty.ctd_base,
    &enumTypes[9].etd_base,
    &sipTypeDef__propgrid_wxPGSpinCtrlEditor.ctd_base,
    &sipTypeDef__propgrid_wxPGTextCtrlAndButtonEditor.ctd_base,
    &sipTypeDef__propgrid_wxPGTextCtrlEditor.ctd_base,
    &sipTypeDef__propgrid_wxPGVIterator.ctd_base,
    &sipTypeDef__propgrid_wxPGValidationInfo.ctd_base,
    &sipTypeDef__propgrid_wxPGVariant.mtd_base,
    &sipTypeDef__propgrid_wxPGVariantList.mtd_base,
    &sipTypeDef__propgrid_wxPGWindowList.ctd_base,
    &enumTypes[5].etd_base,
    &enumTypes[12].etd_base,
    &enumTypes[8].etd_base,
    &enumTypes[3].etd_base,
    &enumTypes[11].etd_base,
    &enumTypes[10].etd_base,
    &enumTypes[4].etd_base,
    &enumTypes[6].etd_base,
    &sipTypeDef__propgrid_wxPropertyCategory.ctd_base,
    &sipTypeDef__propgrid_wxPropertyGrid.ctd_base,
    &sipTypeDef__propgrid_wxPropertyGridEvent.ctd_base,
    &sipTypeDef__propgrid_wxPropertyGridHitTestResult.ctd_base,
    &sipTypeDef__propgrid_wxPropertyGridInterface.ctd_base,
    &enumTypes[7].etd_base,
    &sipTypeDef__propgrid_wxPropertyGridIterator.ctd_base,
    &sipTypeDef__propgrid_wxPropertyGridIteratorBase.ctd_base,
    &sipTypeDef__propgrid_wxPropertyGridManager.ctd_base,
    &sipTypeDef__propgrid_wxPropertyGridPage.ctd_base,
    &sipTypeDef__propgrid_wxPropertyGridPageState.ctd_base,
    &sipTypeDef__propgrid_wxPropertyGridPopulator.ctd_base,
    &sipTypeDef__propgrid_wxStringProperty.ctd_base,
    &sipTypeDef__propgrid_wxSystemColourProperty.ctd_base,
    &sipTypeDef__propgrid_wxUIntProperty.ctd_base,
};


/*
 * These define each typedef in this module.
 */
static sipTypedefDef typedefsTable[] = {
    {"wxPGChoices::ValArrItem", "long"},
    {"wxPGProperty::FlagType", "uint"},
};


/* This defines the types that this module needs to import from _core. */
sipImportedTypeDef sipImportedTypes__propgrid__core[] = {
    {"wxArrayInt"},
    {"wxArrayString"},
    {"wxBitmap"},
    {"wxBorder"},
    {"wxClientDC"},
    {"wxClientData"},
    {"wxColour"},
    {"wxCommandEvent"},
    {"wxControl"},
    {"wxDC"},
    {"wxDateTime"},
    {"wxDialog"},
    {"wxEvent"},
    {"wxEventCategory"},
    {"wxEvtHandler"},
    {"wxFileName"},
    {"wxFont"},
    {"wxIntPtr"},
    {"wxLongLong"},
    {"wxNonOwnedWindow"},
    {"wxObject"},
    {"wxPanel"},
    {"wxPoint"},
    {"wxRect"},
    {"wxRefCounter"},
    {"wxScrollWinEvent"},
    {"wxScrollbarVisibility"},
    {"wxSize"},
    {"wxStatusBar"},
    {"wxString"},
    {"wxTextCtrl"},
    {"wxToolBar"},
    {"wxTopLevelWindow"},
    {"wxTrackable"},
    {"wxULongLong"},
    {"wxUniChar"},
    {"wxValidator"},
    {"wxVariant"},
    {"wxVisualAttributes"},
    {"wxWindow"},
    {"wxWindowBase"},
    {"wxWindowVariant"},
    {SIP_NULLPTR}
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"wx._core", sipImportedTypes__propgrid__core, SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


/* Define the class and enum instances to be added to this module dictionary. */
static sipTypeInstanceDef typeInstances[] = {
    {sipName_PGEditor_CheckBox, & ::wxPGEditor_CheckBox, &sipType_wxPGEditor, SIP_INDIRECT},
    {sipName_PGEditor_Choice, & ::wxPGEditor_Choice, &sipType_wxPGEditor, SIP_INDIRECT},
    {sipName_PGEditor_ChoiceAndButton, & ::wxPGEditor_ChoiceAndButton, &sipType_wxPGEditor, SIP_INDIRECT},
    {sipName_PGEditor_ComboBox, & ::wxPGEditor_ComboBox, &sipType_wxPGEditor, SIP_INDIRECT},
    {sipName_PGEditor_DatePickerCtrl, & ::wxPGEditor_DatePickerCtrl, &sipType_wxPGEditor, SIP_INDIRECT},
    {sipName_PGEditor_SpinCtrl, & ::wxPGEditor_SpinCtrl, &sipType_wxPGEditor, SIP_INDIRECT},
    {sipName_PGEditor_TextCtrl, & ::wxPGEditor_TextCtrl, &sipType_wxPGEditor, SIP_INDIRECT},
    {sipName_PGEditor_TextCtrlAndButton, & ::wxPGEditor_TextCtrlAndButton, &sipType_wxPGEditor, SIP_INDIRECT},
    {0, 0, 0, 0}
};


/* Define the strings to be added to this module dictionary. */
static sipStringInstanceDef stringInstances[] = {
    {sipName_PropertyGridManagerNameStr, wxPropertyGridManagerNameStr, 'N'},
    {sipName_PropertyGridNameStr, wxPropertyGridNameStr, 'N'},
    {0, 0, 0}
};


/* Define the ints to be added to this module dictionary. */
static sipIntInstanceDef intInstances[] = {
    {sipName_AEDIALOG_STYLE, wxAEDIALOG_STYLE},
    {sipName_PGMAN_DEFAULT_STYLE, wxPGMAN_DEFAULT_STYLE},
    {sipName_PG_BASE_DEC, wxPG_BASE_DEC},
    {sipName_PG_BASE_HEX, wxPG_BASE_HEX},
    {sipName_PG_BASE_HEXL, wxPG_BASE_HEXL},
    {sipName_PG_BASE_OCT, wxPG_BASE_OCT},
    {sipName_PG_COLOUR_CUSTOM, wxPG_COLOUR_CUSTOM},
    {sipName_PG_COLOUR_UNSPECIFIED, wxPG_COLOUR_UNSPECIFIED},
    {sipName_PG_COLOUR_WEB_BASE, wxPG_COLOUR_WEB_BASE},
    {sipName_PG_DEFAULT_STYLE, wxPG_DEFAULT_STYLE},
    {sipName_PG_INVALID_VALUE, wxPG_INVALID_VALUE},
    {sipName_PG_PREFIX_0x, wxPG_PREFIX_0x},
    {sipName_PG_PREFIX_DOLLAR_SIGN, wxPG_PREFIX_DOLLAR_SIGN},
    {sipName_PG_PREFIX_NONE, wxPG_PREFIX_NONE},
    {sipName_PG_PROP_ACTIVE_BTN, wxPG_PROP_ACTIVE_BTN},
    {sipName_PG_PROP_MAX, wxPG_PROP_MAX},
    {sipName_PG_PROP_PARENTAL_FLAGS, wxPG_PROP_PARENTAL_FLAGS},
    {sipName_PG_PROP_PASSWORD, wxPG_PROP_PASSWORD},
    {sipName_PG_PROP_SHOW_FULL_FILENAME, wxPG_PROP_SHOW_FULL_FILENAME},
    {sipName_PG_PROP_STATIC_CHOICES, wxPG_PROP_STATIC_CHOICES},
    {sipName_PG_PROP_TRANSLATE_CUSTOM, wxPG_PROP_TRANSLATE_CUSTOM},
    {sipName_PG_PROP_USE_CHECKBOX, wxPG_PROP_USE_CHECKBOX},
    {sipName_PG_PROP_USE_DCC, wxPG_PROP_USE_DCC},
    {sipName_PG_STRING_STORED_FLAGS, wxPG_STRING_STORED_FLAGS},
    {sipName_wxEVT_PG_CHANGED, wxEVT_PG_CHANGED},
    {sipName_wxEVT_PG_CHANGING, wxEVT_PG_CHANGING},
    {sipName_wxEVT_PG_COL_BEGIN_DRAG, wxEVT_PG_COL_BEGIN_DRAG},
    {sipName_wxEVT_PG_COL_DRAGGING, wxEVT_PG_COL_DRAGGING},
    {sipName_wxEVT_PG_COL_END_DRAG, wxEVT_PG_COL_END_DRAG},
    {sipName_wxEVT_PG_DOUBLE_CLICK, wxEVT_PG_DOUBLE_CLICK},
    {sipName_wxEVT_PG_HIGHLIGHTED, wxEVT_PG_HIGHLIGHTED},
    {sipName_wxEVT_PG_ITEM_COLLAPSED, wxEVT_PG_ITEM_COLLAPSED},
    {sipName_wxEVT_PG_ITEM_EXPANDED, wxEVT_PG_ITEM_EXPANDED},
    {sipName_wxEVT_PG_LABEL_EDIT_BEGIN, wxEVT_PG_LABEL_EDIT_BEGIN},
    {sipName_wxEVT_PG_LABEL_EDIT_ENDING, wxEVT_PG_LABEL_EDIT_ENDING},
    {sipName_wxEVT_PG_PAGE_CHANGED, wxEVT_PG_PAGE_CHANGED},
    {sipName_wxEVT_PG_RIGHT_CLICK, wxEVT_PG_RIGHT_CLICK},
    {sipName_wxEVT_PG_SELECTED, wxEVT_PG_SELECTED},
    {0, 0}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI__propgrid = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_wx__propgrid,
    0,
    sipStrings__propgrid,
    importsTable,
    SIP_NULLPTR,
    77,
    sipExportedTypes__propgrid,
    SIP_NULLPTR,
    101,
    enummembers,
    2,
    typedefsTable,
    SIP_NULLPTR,
    SIP_NULLPTR,
    {typeInstances, SIP_NULLPTR, SIP_NULLPTR, stringInstances, intInstances, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI__propgrid;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit__propgrid
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        init_propgrid
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_MLNAME_CAST(sipName_PGGetDefaultImageWildcard), func_PGGetDefaultImageWildcard, METH_VARARGS, SIP_MLDOC_CAST(doc_PGGetDefaultImageWildcard)},
        {SIP_MLNAME_CAST(sipName_testPGVariantTypeName), SIP_MLMETH_CAST(func_testPGVariantTypeName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_testPGVariantTypeName)},
        {SIP_MLNAME_CAST(sipName_testPGVariantTypemap), SIP_MLMETH_CAST(func_testPGVariantTypemap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_testPGVariantTypemap)},
        {SIP_NULLPTR, SIP_NULLPTR, 0, SIP_NULLPTR}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "wx._propgrid",
        SIP_NULLPTR,
        -1,
        sip_methods,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_wx__propgrid, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_wx__propgrid), sip_methods);
#endif

    if (sipModule == SIP_NULLPTR)
        SIP_MODULE_RETURN(SIP_NULLPTR);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("wx.siplib");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("wx.siplib"));
#endif

    if (sip_sipmod == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == SIP_NULLPTR || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == SIP_NULLPTR || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI__propgrid = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, "wx.siplib._C_API"));
#else
    sipAPI__propgrid = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI__propgrid == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#endif

        wxPGInitResourceModule();
        
    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI__propgrid,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI__propgrid,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    SIP_MODULE_RETURN(sipModule);
}
