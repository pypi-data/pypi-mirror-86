/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/anybutton.h>

        #include <wx/gdicmn.h>
        #include <wx/bitmap.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


PyDoc_STRVAR(doc_wxAnyButton_SetBitmapMargins, "SetBitmapMargins(x, y)\n"
"SetBitmapMargins(sz)\n"
"\n"
"Set the margins between the bitmap and the text of the button.\n"
"");

extern "C" {static PyObject *meth_wxAnyButton_SetBitmapMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_SetBitmapMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxCoord x;
         ::wxCoord y;
         ::wxAnyButton *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxAnyButton, &sipCpp, &x, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmapMargins(x,y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::wxSize* sz;
        int szState = 0;
         ::wxAnyButton *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sz,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxAnyButton, &sipCpp, sipType_wxSize, &sz, &szState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmapMargins(*sz);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(sz),sipType_wxSize,szState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_SetBitmapMargins, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_GetBitmap, "GetBitmap() -> Bitmap\n"
"\n"
"Return the bitmap shown by the button.");

extern "C" {static PyObject *meth_wxAnyButton_GetBitmap(PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_GetBitmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAnyButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAnyButton, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetBitmap());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_GetBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_GetBitmapCurrent, "GetBitmapCurrent() -> Bitmap\n"
"\n"
"Returns the bitmap used when the mouse is over the button, which may\n"
"be invalid.");

extern "C" {static PyObject *meth_wxAnyButton_GetBitmapCurrent(PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_GetBitmapCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAnyButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAnyButton, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetBitmapCurrent());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_GetBitmapCurrent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_GetBitmapDisabled, "GetBitmapDisabled() -> Bitmap\n"
"\n"
"Returns the bitmap for the disabled state, which may be invalid.");

extern "C" {static PyObject *meth_wxAnyButton_GetBitmapDisabled(PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_GetBitmapDisabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAnyButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAnyButton, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetBitmapDisabled());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_GetBitmapDisabled, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_GetBitmapFocus, "GetBitmapFocus() -> Bitmap\n"
"\n"
"Returns the bitmap for the focused state, which may be invalid.");

extern "C" {static PyObject *meth_wxAnyButton_GetBitmapFocus(PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_GetBitmapFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAnyButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAnyButton, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetBitmapFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_GetBitmapFocus, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_GetBitmapLabel, "GetBitmapLabel() -> Bitmap\n"
"\n"
"Returns the bitmap for the normal state.");

extern "C" {static PyObject *meth_wxAnyButton_GetBitmapLabel(PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_GetBitmapLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAnyButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAnyButton, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetBitmapLabel());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_GetBitmapLabel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_GetBitmapPressed, "GetBitmapPressed() -> Bitmap\n"
"\n"
"Returns the bitmap for the pressed state, which may be invalid.");

extern "C" {static PyObject *meth_wxAnyButton_GetBitmapPressed(PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_GetBitmapPressed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAnyButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAnyButton, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetBitmapPressed());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_GetBitmapPressed, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_SetBitmap, "SetBitmap(bitmap, dir=LEFT)\n"
"\n"
"Sets the bitmap to display in the button.");

extern "C" {static PyObject *meth_wxAnyButton_SetBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_SetBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxBitmap* bitmap;
         ::wxDirection dir = wxLEFT;
         ::wxAnyButton *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bitmap,
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_wxAnyButton, &sipCpp, sipType_wxBitmap, &bitmap, sipType_wxDirection, &dir))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmap(*bitmap,dir);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_SetBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_SetBitmapCurrent, "SetBitmapCurrent(bitmap)\n"
"\n"
"Sets the bitmap to be shown when the mouse is over the button.");

extern "C" {static PyObject *meth_wxAnyButton_SetBitmapCurrent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_SetBitmapCurrent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxBitmap* bitmap;
         ::wxAnyButton *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAnyButton, &sipCpp, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmapCurrent(*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_SetBitmapCurrent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_SetBitmapDisabled, "SetBitmapDisabled(bitmap)\n"
"\n"
"Sets the bitmap for the disabled button appearance.");

extern "C" {static PyObject *meth_wxAnyButton_SetBitmapDisabled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_SetBitmapDisabled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxBitmap* bitmap;
         ::wxAnyButton *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAnyButton, &sipCpp, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmapDisabled(*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_SetBitmapDisabled, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_SetBitmapFocus, "SetBitmapFocus(bitmap)\n"
"\n"
"Sets the bitmap for the button appearance when it has the keyboard\n"
"focus.");

extern "C" {static PyObject *meth_wxAnyButton_SetBitmapFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_SetBitmapFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxBitmap* bitmap;
         ::wxAnyButton *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAnyButton, &sipCpp, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmapFocus(*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_SetBitmapFocus, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_SetBitmapLabel, "SetBitmapLabel(bitmap)\n"
"\n"
"Sets the bitmap label for the button.");

extern "C" {static PyObject *meth_wxAnyButton_SetBitmapLabel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_SetBitmapLabel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxBitmap* bitmap;
         ::wxAnyButton *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAnyButton, &sipCpp, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmapLabel(*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_SetBitmapLabel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_SetBitmapPressed, "SetBitmapPressed(bitmap)\n"
"\n"
"Sets the bitmap for the selected (depressed) button appearance.");

extern "C" {static PyObject *meth_wxAnyButton_SetBitmapPressed(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_SetBitmapPressed(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxBitmap* bitmap;
         ::wxAnyButton *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAnyButton, &sipCpp, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmapPressed(*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_SetBitmapPressed, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_GetBitmapMargins, "GetBitmapMargins() -> Size\n"
"\n"
"Get the margins between the bitmap and the text of the button.");

extern "C" {static PyObject *meth_wxAnyButton_GetBitmapMargins(PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_GetBitmapMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAnyButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAnyButton, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetBitmapMargins());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_GetBitmapMargins, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAnyButton_SetBitmapPosition, "SetBitmapPosition(dir)\n"
"\n"
"Set the position at which the bitmap is displayed.");

extern "C" {static PyObject *meth_wxAnyButton_SetBitmapPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAnyButton_SetBitmapPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDirection dir;
         ::wxAnyButton *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxAnyButton, &sipCpp, sipType_wxDirection, &dir))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmapPosition(dir);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AnyButton, sipName_SetBitmapPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxAnyButton(void *, const sipTypeDef *);}
static void *cast_wxAnyButton(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxAnyButton *sipCpp = reinterpret_cast< ::wxAnyButton *>(sipCppV);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxAnyButton(void *, int);}
static void release_wxAnyButton(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxAnyButton *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxAnyButton(sipSimpleWrapper *);}
static void dealloc_wxAnyButton(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxAnyButton(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxAnyButton[] = {{93, 255, 1}};


static PyMethodDef methods_wxAnyButton[] = {
    {SIP_MLNAME_CAST(sipName_GetBitmap), meth_wxAnyButton_GetBitmap, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAnyButton_GetBitmap)},
    {SIP_MLNAME_CAST(sipName_GetBitmapCurrent), meth_wxAnyButton_GetBitmapCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAnyButton_GetBitmapCurrent)},
    {SIP_MLNAME_CAST(sipName_GetBitmapDisabled), meth_wxAnyButton_GetBitmapDisabled, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAnyButton_GetBitmapDisabled)},
    {SIP_MLNAME_CAST(sipName_GetBitmapFocus), meth_wxAnyButton_GetBitmapFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAnyButton_GetBitmapFocus)},
    {SIP_MLNAME_CAST(sipName_GetBitmapLabel), meth_wxAnyButton_GetBitmapLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAnyButton_GetBitmapLabel)},
    {SIP_MLNAME_CAST(sipName_GetBitmapMargins), meth_wxAnyButton_GetBitmapMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAnyButton_GetBitmapMargins)},
    {SIP_MLNAME_CAST(sipName_GetBitmapPressed), meth_wxAnyButton_GetBitmapPressed, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAnyButton_GetBitmapPressed)},
    {SIP_MLNAME_CAST(sipName_SetBitmap), SIP_MLMETH_CAST(meth_wxAnyButton_SetBitmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAnyButton_SetBitmap)},
    {SIP_MLNAME_CAST(sipName_SetBitmapCurrent), SIP_MLMETH_CAST(meth_wxAnyButton_SetBitmapCurrent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAnyButton_SetBitmapCurrent)},
    {SIP_MLNAME_CAST(sipName_SetBitmapDisabled), SIP_MLMETH_CAST(meth_wxAnyButton_SetBitmapDisabled), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAnyButton_SetBitmapDisabled)},
    {SIP_MLNAME_CAST(sipName_SetBitmapFocus), SIP_MLMETH_CAST(meth_wxAnyButton_SetBitmapFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAnyButton_SetBitmapFocus)},
    {SIP_MLNAME_CAST(sipName_SetBitmapLabel), SIP_MLMETH_CAST(meth_wxAnyButton_SetBitmapLabel), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAnyButton_SetBitmapLabel)},
    {SIP_MLNAME_CAST(sipName_SetBitmapMargins), SIP_MLMETH_CAST(meth_wxAnyButton_SetBitmapMargins), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAnyButton_SetBitmapMargins)},
    {SIP_MLNAME_CAST(sipName_SetBitmapPosition), SIP_MLMETH_CAST(meth_wxAnyButton_SetBitmapPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAnyButton_SetBitmapPosition)},
    {SIP_MLNAME_CAST(sipName_SetBitmapPressed), SIP_MLMETH_CAST(meth_wxAnyButton_SetBitmapPressed), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAnyButton_SetBitmapPressed)}
};

sipVariableDef variables_wxAnyButton[] = {
    {PropertyVariable, sipName_BitmapPressed, &methods_wxAnyButton[6], &methods_wxAnyButton[14], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BitmapMargins, &methods_wxAnyButton[5], &methods_wxAnyButton[12], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BitmapLabel, &methods_wxAnyButton[4], &methods_wxAnyButton[11], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BitmapFocus, &methods_wxAnyButton[3], &methods_wxAnyButton[10], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BitmapDisabled, &methods_wxAnyButton[2], &methods_wxAnyButton[9], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BitmapCurrent, &methods_wxAnyButton[1], &methods_wxAnyButton[8], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Bitmap, &methods_wxAnyButton[0], &methods_wxAnyButton[7], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxAnyButton, "AnyButton()\n"
"\n"
"A class for common button functionality used as the base for the\n"
"various button classes.");


sipClassTypeDef sipTypeDef__core_wxAnyButton = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxAnyButton,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_AnyButton,
        {0, 0, 1},
        15, methods_wxAnyButton,
        0, SIP_NULLPTR,
        7, variables_wxAnyButton,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxAnyButton,
    -1,
    -1,
    supers_wxAnyButton,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxAnyButton,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxAnyButton,
    cast_wxAnyButton,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
