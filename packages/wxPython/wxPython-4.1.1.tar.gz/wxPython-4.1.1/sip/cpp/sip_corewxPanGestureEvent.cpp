/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/event.h>

        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxPanGestureEvent : public  ::wxPanGestureEvent
{
public:
    sipwxPanGestureEvent( ::wxWindowID);
    sipwxPanGestureEvent(const  ::wxPanGestureEvent&);
    virtual ~sipwxPanGestureEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEventCategory GetEventCategory() const SIP_OVERRIDE;
     ::wxEvent* Clone() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxPanGestureEvent(const sipwxPanGestureEvent &);
    sipwxPanGestureEvent &operator = (const sipwxPanGestureEvent &);

    char sipPyMethods[2];
};

sipwxPanGestureEvent::sipwxPanGestureEvent( ::wxWindowID winid):  ::wxPanGestureEvent(winid), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPanGestureEvent::sipwxPanGestureEvent(const  ::wxPanGestureEvent& a0):  ::wxPanGestureEvent(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPanGestureEvent::~sipwxPanGestureEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEventCategory sipwxPanGestureEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxPanGestureEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__core_99(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_99(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEvent* sipwxPanGestureEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_Clone);

    if (!sipMeth)
        return  ::wxPanGestureEvent::Clone();

    extern  ::wxEvent* sipVH__core_98(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_98(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxPanGestureEvent_GetDelta, "GetDelta() -> Point\n"
"\n"
"Returns the distance covered since the previous panning event.");

extern "C" {static PyObject *meth_wxPanGestureEvent_GetDelta(PyObject *, PyObject *);}
static PyObject *meth_wxPanGestureEvent_GetDelta(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPanGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPanGestureEvent, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint(sipCpp->GetDelta());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PanGestureEvent, sipName_GetDelta, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPanGestureEvent_SetDelta, "SetDelta(delta)\n"
"\n"
"Sets the distance covered since the previous panning event.");

extern "C" {static PyObject *meth_wxPanGestureEvent_SetDelta(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPanGestureEvent_SetDelta(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint* delta;
        int deltaState = 0;
         ::wxPanGestureEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_delta,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPanGestureEvent, &sipCpp, sipType_wxPoint, &delta, &deltaState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetDelta(*delta);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(delta),sipType_wxPoint,deltaState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PanGestureEvent, sipName_SetDelta, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPanGestureEvent_Clone, "Clone(self) -> Event");

extern "C" {static PyObject *meth_wxPanGestureEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxPanGestureEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPanGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPanGestureEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPanGestureEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PanGestureEvent, sipName_Clone, doc_wxPanGestureEvent_Clone);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxPanGestureEvent(void *, const sipTypeDef *);}
static void *cast_wxPanGestureEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxPanGestureEvent *sipCpp = reinterpret_cast< ::wxPanGestureEvent *>(sipCppV);

    if (targetType == sipType_wxGestureEvent)
        return static_cast< ::wxGestureEvent *>(sipCpp);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxPanGestureEvent(void *, int);}
static void release_wxPanGestureEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxPanGestureEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxPanGestureEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxPanGestureEvent(sipSimpleWrapper *);}
static void dealloc_wxPanGestureEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxPanGestureEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxPanGestureEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxPanGestureEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxPanGestureEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxPanGestureEvent *sipCpp = SIP_NULLPTR;

    {
         ::wxWindowID winid = 0;

        static const char *sipKwdList[] = {
            sipName_winid,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &winid))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPanGestureEvent(winid);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxPanGestureEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxPanGestureEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPanGestureEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxPanGestureEvent[] = {{220, 255, 1}};


static PyMethodDef methods_wxPanGestureEvent[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxPanGestureEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPanGestureEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_GetDelta), meth_wxPanGestureEvent_GetDelta, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPanGestureEvent_GetDelta)},
    {SIP_MLNAME_CAST(sipName_SetDelta), SIP_MLMETH_CAST(meth_wxPanGestureEvent_SetDelta), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPanGestureEvent_SetDelta)}
};

sipVariableDef variables_wxPanGestureEvent[] = {
    {PropertyVariable, sipName_Delta, &methods_wxPanGestureEvent[1], &methods_wxPanGestureEvent[2], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxPanGestureEvent, "PanGestureEvent(winid=0)\n"
"\n"
"This event is generated when the user moves a finger on the surface.");


sipClassTypeDef sipTypeDef__core_wxPanGestureEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxPanGestureEvent,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_PanGestureEvent,
        {0, 0, 1},
        3, methods_wxPanGestureEvent,
        0, SIP_NULLPTR,
        1, variables_wxPanGestureEvent,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxPanGestureEvent,
    -1,
    -1,
    supers_wxPanGestureEvent,
    SIP_NULLPTR,
    init_type_wxPanGestureEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxPanGestureEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxPanGestureEvent,
    cast_wxPanGestureEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
