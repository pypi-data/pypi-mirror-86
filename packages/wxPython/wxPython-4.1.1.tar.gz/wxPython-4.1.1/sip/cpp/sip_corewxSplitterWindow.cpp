/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/splitter.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxSplitterWindow : public  ::wxSplitterWindow
{
public:
    sipwxSplitterWindow();
    sipwxSplitterWindow( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxString&);
    virtual ~sipwxSplitterWindow();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
     ::wxSize DoGetBorderSize() const SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxSplitterWindow(const sipwxSplitterWindow &);
    sipwxSplitterWindow &operator = (const sipwxSplitterWindow &);

    char sipPyMethods[40];
};

sipwxSplitterWindow::sipwxSplitterWindow():  ::wxSplitterWindow(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxSplitterWindow::sipwxSplitterWindow( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxString& name):  ::wxSplitterWindow(parent,id,pos,size,style,name), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxSplitterWindow::~sipwxSplitterWindow()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxSplitterWindow::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxSplitterWindow::RemoveChild(child);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxSplitterWindow::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxSplitterWindow::AddChild(child);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sipwxSplitterWindow::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxSplitterWindow::ProcessEvent(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxSplitterWindow::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxSplitterWindow::TryBefore(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxSplitterWindow::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxSplitterWindow::TryAfter(event);

    extern bool sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxSplitterWindow::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxSplitterWindow::AcceptsFocus();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSplitterWindow::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxSplitterWindow::AcceptsFocusFromKeyboard();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSplitterWindow::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxSplitterWindow::AcceptsFocusRecursively();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxSplitterWindow::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxSplitterWindow::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

void sipwxSplitterWindow::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxSplitterWindow::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

bool sipwxSplitterWindow::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxSplitterWindow::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__core_121(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__core_121(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

 ::wxPoint sipwxSplitterWindow::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxSplitterWindow::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__core_122(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_122(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSplitterWindow::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxSplitterWindow::HasTransparentBackground();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSplitterWindow::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxSplitterWindow::ShouldInheritColours();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxValidator* sipwxSplitterWindow::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxSplitterWindow::GetValidator();

    extern  ::wxValidator* sipVH__core_123(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_123(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxSplitterWindow::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxSplitterWindow::SetValidator(validator);
        return;
    }

    extern void sipVH__core_124(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__core_124(sipGILState, 0, sipPySelf, sipMeth, validator);
}

bool sipwxSplitterWindow::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxSplitterWindow::TransferDataFromWindow();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSplitterWindow::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxSplitterWindow::TransferDataToWindow();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSplitterWindow::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::wxSplitterWindow::Validate();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSplitterWindow::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_Destroy);

    if (!sipMeth)
        return  ::wxSplitterWindow::Destroy();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxSplitterWindow::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxSplitterWindow::InheritAttributes();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxSplitterWindow::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxSplitterWindow::InitDialog();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxSplitterWindow::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxSplitterWindow::OnInternalIdle();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sipwxSplitterWindow::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxSplitterWindow::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__core_125(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_125(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxSplitterWindow::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxSplitterWindow::DoEnable(enable);
        return;
    }

    extern void sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, enable);
}

void sipwxSplitterWindow::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxSplitterWindow::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxSplitterWindow::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,SIP_NULLPTR,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxSplitterWindow::DoGetSize(width,height);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxSplitterWindow::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxSplitterWindow::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxSplitterWindow::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxSplitterWindow::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__core_127(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__core_127(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxSplitterWindow::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxSplitterWindow::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__core_128(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__core_128(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxSplitterWindow::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxSplitterWindow::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__core_129(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__core_129(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

 ::wxSize sipwxSplitterWindow::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,SIP_NULLPTR,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxSplitterWindow::DoGetBorderSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxSplitterWindow::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxSplitterWindow::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__core_130(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__core_130(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sipwxSplitterWindow::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxSplitterWindow::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__core_131(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__core_131(sipGILState, 0, sipPySelf, sipMeth, variant);
}

 ::wxBorder sipwxSplitterWindow::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxSplitterWindow::GetDefaultBorder();

    extern  ::wxBorder sipVH__core_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_132(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxSplitterWindow::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxSplitterWindow::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__core_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_132(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxSplitterWindow::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxSplitterWindow::DoFreeze();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxSplitterWindow::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxSplitterWindow::DoThaw();
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxSplitterWindow::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxSplitterWindow::DoGetBestSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxSplitterWindow::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxSplitterWindow::DoGetBestClientSize();

    extern  ::wxSize sipVH__core_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_100(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxSplitterWindow::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxSplitterWindow::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxSplitterWindow::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxSplitterWindow::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxSplitterWindow::DoEnable(enable) : DoEnable(enable));
}

void sipwxSplitterWindow::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxSplitterWindow::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxSplitterWindow::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxSplitterWindow::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxSplitterWindow::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxSplitterWindow::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxSplitterWindow::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxSplitterWindow::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxSplitterWindow::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxSplitterWindow::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxSplitterWindow::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxSplitterWindow::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxSplitterWindow::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxSplitterWindow::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxSplitterWindow::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxSplitterWindow::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxSplitterWindow::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxSplitterWindow::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxSplitterWindow::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxSplitterWindow::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxSplitterWindow::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxSplitterWindow::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxSplitterWindow::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxSplitterWindow::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxSplitterWindow::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxSplitterWindow::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxSplitterWindow::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxSplitterWindow::DoFreeze() : DoFreeze());
}

void sipwxSplitterWindow::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxSplitterWindow::DoThaw() : DoThaw());
}

bool sipwxSplitterWindow::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxSplitterWindow::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxSplitterWindow::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxSplitterWindow::TryBefore(event) : TryBefore(event));
}

bool sipwxSplitterWindow::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxSplitterWindow::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxSplitterWindow_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxSplitterWindow_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_Create, "Create(parent, id=ID_ANY, point=DefaultPosition, size=DefaultSize, style=SP_3D, name=\"splitter\") -> bool\n"
"\n"
"Creation function, for two-step construction.");

extern "C" {static PyObject *meth_wxSplitterWindow_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& pointdef = wxDefaultPosition;
        const  ::wxPoint* point = &pointdef;
        int pointState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxSP_3D;
        const  ::wxString& namedef = "splitter";
        const  ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_point,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|iJ1J1lJ1", &sipSelf, sipType_wxSplitterWindow, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &point, &pointState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*point,*size,style,*name);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(point),sipType_wxPoint,pointState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetMinimumPaneSize, "GetMinimumPaneSize() -> int\n"
"\n"
"Returns the current minimum pane size (defaults to zero).");

extern "C" {static PyObject *meth_wxSplitterWindow_GetMinimumPaneSize(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetMinimumPaneSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetMinimumPaneSize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetMinimumPaneSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetSashGravity, "GetSashGravity() -> double\n"
"\n"
"Returns the current sash gravity.");

extern "C" {static PyObject *meth_wxSplitterWindow_GetSashGravity(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetSashGravity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            double sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSashGravity();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetSashGravity, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetSashPosition, "GetSashPosition() -> int\n"
"\n"
"Returns the current sash position.");

extern "C" {static PyObject *meth_wxSplitterWindow_GetSashPosition(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetSashPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSashPosition();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetSashPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetSashSize, "GetSashSize() -> int\n"
"\n"
"Returns the default sash size in pixels or 0 if it is invisible.");

extern "C" {static PyObject *meth_wxSplitterWindow_GetSashSize(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetSashSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSashSize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetSashSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetDefaultSashSize, "GetDefaultSashSize() -> int\n"
"\n"
"Returns the default sash size in pixels.");

extern "C" {static PyObject *meth_wxSplitterWindow_GetDefaultSashSize(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetDefaultSashSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDefaultSashSize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetDefaultSashSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetSplitMode, "GetSplitMode() -> SplitMode\n"
"\n"
"Gets the split mode.");

extern "C" {static PyObject *meth_wxSplitterWindow_GetSplitMode(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetSplitMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
             ::wxSplitMode sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSplitMode();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxSplitMode);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetSplitMode, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetWindow1, "GetWindow1() -> Window\n"
"\n"
"Returns the left/top or only pane.");

extern "C" {static PyObject *meth_wxSplitterWindow_GetWindow1(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetWindow1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetWindow1();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetWindow1, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetWindow2, "GetWindow2() -> Window\n"
"\n"
"Returns the right/bottom pane.");

extern "C" {static PyObject *meth_wxSplitterWindow_GetWindow2(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetWindow2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetWindow2();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetWindow2, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_Initialize, "Initialize(window)\n"
"\n"
"Initializes the splitter window to have one pane.");

extern "C" {static PyObject *meth_wxSplitterWindow_Initialize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_Initialize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* window;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxSplitterWindow, &sipCpp, sipType_wxWindow, &window))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Initialize(window);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_Initialize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_IsSashInvisible, "IsSashInvisible() -> bool\n"
"\n"
"Returns true if the sash is invisible even when the window is split,\n"
"false otherwise.");

extern "C" {static PyObject *meth_wxSplitterWindow_IsSashInvisible(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_IsSashInvisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsSashInvisible();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_IsSashInvisible, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_IsSplit, "IsSplit() -> bool\n"
"\n"
"Returns true if the window is split, false otherwise.");

extern "C" {static PyObject *meth_wxSplitterWindow_IsSplit(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_IsSplit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsSplit();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_IsSplit, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_ReplaceWindow, "ReplaceWindow(winOld, winNew) -> bool\n"
"\n"
"This function replaces one of the windows managed by the\n"
"wxSplitterWindow with another one.");

extern "C" {static PyObject *meth_wxSplitterWindow_ReplaceWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_ReplaceWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* winOld;
         ::wxWindow* winNew;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_winOld,
            sipName_winNew,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J8", &sipSelf, sipType_wxSplitterWindow, &sipCpp, sipType_wxWindow, &winOld, sipType_wxWindow, &winNew))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ReplaceWindow(winOld,winNew);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_ReplaceWindow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_SetMinimumPaneSize, "SetMinimumPaneSize(paneSize)\n"
"\n"
"Sets the minimum pane size.");

extern "C" {static PyObject *meth_wxSplitterWindow_SetMinimumPaneSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_SetMinimumPaneSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int paneSize;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_paneSize,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxSplitterWindow, &sipCpp, &paneSize))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMinimumPaneSize(paneSize);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_SetMinimumPaneSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_SetSashGravity, "SetSashGravity(gravity)\n"
"\n"
"Sets the sash gravity.");

extern "C" {static PyObject *meth_wxSplitterWindow_SetSashGravity(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_SetSashGravity(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double gravity;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_gravity,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd", &sipSelf, sipType_wxSplitterWindow, &sipCpp, &gravity))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSashGravity(gravity);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_SetSashGravity, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_SetSashPosition, "SetSashPosition(position, redraw=True)\n"
"\n"
"Sets the sash position.");

extern "C" {static PyObject *meth_wxSplitterWindow_SetSashPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_SetSashPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int position;
        bool redraw = 1;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_position,
            sipName_redraw,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|b", &sipSelf, sipType_wxSplitterWindow, &sipCpp, &position, &redraw))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSashPosition(position,redraw);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_SetSashPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_SetSplitMode, "SetSplitMode(mode)\n"
"\n"
"Sets the split mode.");

extern "C" {static PyObject *meth_wxSplitterWindow_SetSplitMode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_SetSplitMode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int mode;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxSplitterWindow, &sipCpp, &mode))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSplitMode(mode);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_SetSplitMode, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_SetSashInvisible, "SetSashInvisible(invisible=True)\n"
"\n"
"Sets whether the sash should be invisible, even when the window is\n"
"split.");

extern "C" {static PyObject *meth_wxSplitterWindow_SetSashInvisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_SetSashInvisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool invisible = 1;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_invisible,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxSplitterWindow, &sipCpp, &invisible))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSashInvisible(invisible);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_SetSashInvisible, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_SplitHorizontally, "SplitHorizontally(window1, window2, sashPosition=0) -> bool\n"
"\n"
"Initializes the top and bottom panes of the splitter window.");

extern "C" {static PyObject *meth_wxSplitterWindow_SplitHorizontally(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_SplitHorizontally(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* window1;
         ::wxWindow* window2;
        int sashPosition = 0;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window1,
            sipName_window2,
            sipName_sashPosition,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J8|i", &sipSelf, sipType_wxSplitterWindow, &sipCpp, sipType_wxWindow, &window1, sipType_wxWindow, &window2, &sashPosition))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SplitHorizontally(window1,window2,sashPosition);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_SplitHorizontally, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_SplitVertically, "SplitVertically(window1, window2, sashPosition=0) -> bool\n"
"\n"
"Initializes the left and right panes of the splitter window.");

extern "C" {static PyObject *meth_wxSplitterWindow_SplitVertically(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_SplitVertically(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* window1;
         ::wxWindow* window2;
        int sashPosition = 0;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window1,
            sipName_window2,
            sipName_sashPosition,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J8|i", &sipSelf, sipType_wxSplitterWindow, &sipCpp, sipType_wxWindow, &window1, sipType_wxWindow, &window2, &sashPosition))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SplitVertically(window1,window2,sashPosition);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_SplitVertically, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_Unsplit, "Unsplit(toRemove=None) -> bool\n"
"\n"
"Unsplits the window.");

extern "C" {static PyObject *meth_wxSplitterWindow_Unsplit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_Unsplit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* toRemove = 0;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_toRemove,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J8", &sipSelf, sipType_wxSplitterWindow, &sipCpp, sipType_wxWindow, &toRemove))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Unsplit(toRemove);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_Unsplit, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_UpdateSize, "UpdateSize()\n"
"\n"
"Causes any pending sizing of the sash and child panes to take place\n"
"immediately.");

extern "C" {static PyObject *meth_wxSplitterWindow_UpdateSize(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_UpdateSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->UpdateSize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_UpdateSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxSplitterWindow_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetClientAreaOrigin, doc_wxSplitterWindow_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxSplitterWindow_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_Validate, doc_wxSplitterWindow_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxSplitterWindow_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_TransferDataToWindow, doc_wxSplitterWindow_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxSplitterWindow_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_TransferDataFromWindow, doc_wxSplitterWindow_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxSplitterWindow_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_InitDialog, doc_wxSplitterWindow_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxSplitterWindow_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_AcceptsFocus, doc_wxSplitterWindow_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxSplitterWindow_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_AcceptsFocusRecursively, doc_wxSplitterWindow_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxSplitterWindow_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_AcceptsFocusFromKeyboard, doc_wxSplitterWindow_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxSplitterWindow_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxSplitterWindow, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_AddChild, doc_wxSplitterWindow_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxSplitterWindow_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxSplitterWindow, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_RemoveChild, doc_wxSplitterWindow_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxSplitterWindow_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_InheritAttributes, doc_wxSplitterWindow_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxSplitterWindow_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_ShouldInheritColours, doc_wxSplitterWindow_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxSplitterWindow_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_OnInternalIdle, doc_wxSplitterWindow_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxSplitterWindow_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetMainWindowOfCompositeControl, doc_wxSplitterWindow_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxSplitterWindow_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxSplitterWindow, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_InformFirstDirection, doc_wxSplitterWindow_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxSplitterWindow_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxSplitterWindow, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_SetCanFocus, doc_wxSplitterWindow_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxSplitterWindow_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_Destroy, doc_wxSplitterWindow_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxSplitterWindow_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxSplitterWindow, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_SetValidator, doc_wxSplitterWindow_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxSplitterWindow_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetValidator, doc_wxSplitterWindow_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth_wxSplitterWindow_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
         ::wxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxSplitterWindow, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxSplitterWindow::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_EnableVisibleFocus, doc_wxSplitterWindow_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxSplitterWindow_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxSplitterWindow, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_ProcessEvent, doc_wxSplitterWindow_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxSplitterWindow_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxSplitterWindow, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoEnable, doc_wxSplitterWindow_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxSplitterWindow_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxSplitterWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoGetPosition, doc_wxSplitterWindow_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxSplitterWindow_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxSplitterWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoGetSize, doc_wxSplitterWindow_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxSplitterWindow_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxSplitterWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoGetClientSize, doc_wxSplitterWindow_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxSplitterWindow_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoGetBestSize, doc_wxSplitterWindow_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxSplitterWindow_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoGetBestClientSize, doc_wxSplitterWindow_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxSplitterWindow_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxSplitterWindow, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoSetSize, doc_wxSplitterWindow_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxSplitterWindow_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxSplitterWindow, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoSetClientSize, doc_wxSplitterWindow_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxSplitterWindow_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxSplitterWindow, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoSetSizeHints, doc_wxSplitterWindow_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxSplitterWindow_DoGetBorderSize(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoGetBorderSize, doc_wxSplitterWindow_DoGetBorderSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxSplitterWindow_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxSplitterWindow, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoMoveWindow, doc_wxSplitterWindow_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxSplitterWindow_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxSplitterWindow, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoSetWindowVariant, doc_wxSplitterWindow_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxSplitterWindow_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetDefaultBorder, doc_wxSplitterWindow_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxSplitterWindow_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetDefaultBorderForControl, doc_wxSplitterWindow_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxSplitterWindow_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoFreeze, doc_wxSplitterWindow_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxSplitterWindow_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_DoThaw, doc_wxSplitterWindow_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxSplitterWindow_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxSplitterWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_HasTransparentBackground, doc_wxSplitterWindow_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxSplitterWindow_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxSplitterWindow, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_TryBefore, doc_wxSplitterWindow_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxSplitterWindow_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxSplitterWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxSplitterWindow, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_TryAfter, doc_wxSplitterWindow_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxSplitterWindow_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxSplitterWindow_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterWindow_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxSplitterWindow::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_SplitterWindow, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxSplitterWindow(void *, const sipTypeDef *);}
static void *cast_wxSplitterWindow(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxSplitterWindow *sipCpp = reinterpret_cast< ::wxSplitterWindow *>(sipCppV);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxSplitterWindow(void *, int);}
static void release_wxSplitterWindow(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxSplitterWindow *>(sipCppV);
    else
        delete reinterpret_cast< ::wxSplitterWindow *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxSplitterWindow(Py_ssize_t);}
static void *array_wxSplitterWindow(Py_ssize_t sipNrElem)
{
    return new  ::wxSplitterWindow[sipNrElem];
}


extern "C" {static void dealloc_wxSplitterWindow(sipSimpleWrapper *);}
static void dealloc_wxSplitterWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxSplitterWindow *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxSplitterWindow(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxSplitterWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxSplitterWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxSplitterWindow *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxSplitterWindow();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxSP_3D;
        const  ::wxString& namedef = "splitterWindow";
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1lJ1", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxSplitterWindow(parent,id,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxSplitterWindow[] = {{604, 255, 1}};


static PyMethodDef methods_wxSplitterWindow[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxSplitterWindow_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxSplitterWindow_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxSplitterWindow_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), SIP_MLMETH_CAST(meth_wxSplitterWindow_AddChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_AddChild)},
    {SIP_MLNAME_CAST(sipName_Create), SIP_MLMETH_CAST(meth_wxSplitterWindow_Create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_Create)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxSplitterWindow_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), SIP_MLMETH_CAST(meth_wxSplitterWindow_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), meth_wxSplitterWindow_DoFreeze, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), meth_wxSplitterWindow_DoGetBestClientSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), meth_wxSplitterWindow_DoGetBestSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), meth_wxSplitterWindow_DoGetBorderSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), SIP_MLMETH_CAST(meth_wxSplitterWindow_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), SIP_MLMETH_CAST(meth_wxSplitterWindow_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), SIP_MLMETH_CAST(meth_wxSplitterWindow_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), SIP_MLMETH_CAST(meth_wxSplitterWindow_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), SIP_MLMETH_CAST(meth_wxSplitterWindow_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), SIP_MLMETH_CAST(meth_wxSplitterWindow_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), SIP_MLMETH_CAST(meth_wxSplitterWindow_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), SIP_MLMETH_CAST(meth_wxSplitterWindow_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), meth_wxSplitterWindow_DoThaw, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EnableVisibleFocus), SIP_MLMETH_CAST(meth_wxSplitterWindow_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_EnableVisibleFocus)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), SIP_MLMETH_CAST(meth_wxSplitterWindow_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxSplitterWindow_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), meth_wxSplitterWindow_GetDefaultBorder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), meth_wxSplitterWindow_GetDefaultBorderForControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetDefaultSashSize), meth_wxSplitterWindow_GetDefaultSashSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetDefaultSashSize)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxSplitterWindow_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetMinimumPaneSize), meth_wxSplitterWindow_GetMinimumPaneSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetMinimumPaneSize)},
    {SIP_MLNAME_CAST(sipName_GetSashGravity), meth_wxSplitterWindow_GetSashGravity, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetSashGravity)},
    {SIP_MLNAME_CAST(sipName_GetSashPosition), meth_wxSplitterWindow_GetSashPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetSashPosition)},
    {SIP_MLNAME_CAST(sipName_GetSashSize), meth_wxSplitterWindow_GetSashSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetSashSize)},
    {SIP_MLNAME_CAST(sipName_GetSplitMode), meth_wxSplitterWindow_GetSplitMode, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetSplitMode)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxSplitterWindow_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetValidator)},
    {SIP_MLNAME_CAST(sipName_GetWindow1), meth_wxSplitterWindow_GetWindow1, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetWindow1)},
    {SIP_MLNAME_CAST(sipName_GetWindow2), meth_wxSplitterWindow_GetWindow2, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_GetWindow2)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), meth_wxSplitterWindow_HasTransparentBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), SIP_MLMETH_CAST(meth_wxSplitterWindow_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxSplitterWindow_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxSplitterWindow_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_InitDialog)},
    {SIP_MLNAME_CAST(sipName_Initialize), SIP_MLMETH_CAST(meth_wxSplitterWindow_Initialize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_Initialize)},
    {SIP_MLNAME_CAST(sipName_IsSashInvisible), meth_wxSplitterWindow_IsSashInvisible, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_IsSashInvisible)},
    {SIP_MLNAME_CAST(sipName_IsSplit), meth_wxSplitterWindow_IsSplit, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_IsSplit)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxSplitterWindow_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), SIP_MLMETH_CAST(meth_wxSplitterWindow_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), SIP_MLMETH_CAST(meth_wxSplitterWindow_RemoveChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_ReplaceWindow), SIP_MLMETH_CAST(meth_wxSplitterWindow_ReplaceWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_ReplaceWindow)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), meth_wxSplitterWindow_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), SIP_MLMETH_CAST(meth_wxSplitterWindow_SetCanFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetMinimumPaneSize), SIP_MLMETH_CAST(meth_wxSplitterWindow_SetMinimumPaneSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_SetMinimumPaneSize)},
    {SIP_MLNAME_CAST(sipName_SetSashGravity), SIP_MLMETH_CAST(meth_wxSplitterWindow_SetSashGravity), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_SetSashGravity)},
    {SIP_MLNAME_CAST(sipName_SetSashInvisible), SIP_MLMETH_CAST(meth_wxSplitterWindow_SetSashInvisible), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_SetSashInvisible)},
    {SIP_MLNAME_CAST(sipName_SetSashPosition), SIP_MLMETH_CAST(meth_wxSplitterWindow_SetSashPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_SetSashPosition)},
    {SIP_MLNAME_CAST(sipName_SetSplitMode), SIP_MLMETH_CAST(meth_wxSplitterWindow_SetSplitMode), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_SetSplitMode)},
    {SIP_MLNAME_CAST(sipName_SetValidator), SIP_MLMETH_CAST(meth_wxSplitterWindow_SetValidator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxSplitterWindow_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_SplitHorizontally), SIP_MLMETH_CAST(meth_wxSplitterWindow_SplitHorizontally), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_SplitHorizontally)},
    {SIP_MLNAME_CAST(sipName_SplitVertically), SIP_MLMETH_CAST(meth_wxSplitterWindow_SplitVertically), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_SplitVertically)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxSplitterWindow_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxSplitterWindow_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth_wxSplitterWindow_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth_wxSplitterWindow_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Unsplit), SIP_MLMETH_CAST(meth_wxSplitterWindow_Unsplit), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterWindow_Unsplit)},
    {SIP_MLNAME_CAST(sipName_UpdateSize), meth_wxSplitterWindow_UpdateSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_UpdateSize)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxSplitterWindow_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterWindow_Validate)}
};

sipVariableDef variables_wxSplitterWindow[] = {
    {PropertyVariable, sipName_SashInvisible, &methods_wxSplitterWindow[40], &methods_wxSplitterWindow[50], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Window2, &methods_wxSplitterWindow[34], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Window1, &methods_wxSplitterWindow[33], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_SplitMode, &methods_wxSplitterWindow[31], &methods_wxSplitterWindow[52], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_SashSize, &methods_wxSplitterWindow[30], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_SashPosition, &methods_wxSplitterWindow[29], &methods_wxSplitterWindow[51], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_SashGravity, &methods_wxSplitterWindow[28], &methods_wxSplitterWindow[49], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_MinimumPaneSize, &methods_wxSplitterWindow[27], &methods_wxSplitterWindow[48], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_DefaultSashSize, &methods_wxSplitterWindow[25], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxSplitterWindow, "SplitterWindow()\n"
"SplitterWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=SP_3D, name=\"splitterWindow\")\n"
"\n"
"This class manages up to two subwindows.");


sipClassTypeDef sipTypeDef__core_wxSplitterWindow = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxSplitterWindow,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_SplitterWindow,
        {0, 0, 1},
        64, methods_wxSplitterWindow,
        0, SIP_NULLPTR,
        9, variables_wxSplitterWindow,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxSplitterWindow,
    -1,
    -1,
    supers_wxSplitterWindow,
    SIP_NULLPTR,
    init_type_wxSplitterWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxSplitterWindow,
    SIP_NULLPTR,
    array_wxSplitterWindow,
    SIP_NULLPTR,
    release_wxSplitterWindow,
    cast_wxSplitterWindow,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
