/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_aui.h"

        #include <wx/aui/framemanager.h>

        #include <wx/event.h>
        #include <wx/aui/framemanager.h>
        #include <wx/aui/framemanager.h>
        #include <wx/dc.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxAuiManagerEvent : public  ::wxAuiManagerEvent
{
public:
    sipwxAuiManagerEvent( ::wxEventType);
    sipwxAuiManagerEvent(const  ::wxAuiManagerEvent&);
    virtual ~sipwxAuiManagerEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEvent* Clone() const SIP_OVERRIDE;
     ::wxEventCategory GetEventCategory() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxAuiManagerEvent(const sipwxAuiManagerEvent &);
    sipwxAuiManagerEvent &operator = (const sipwxAuiManagerEvent &);

    char sipPyMethods[2];
};

sipwxAuiManagerEvent::sipwxAuiManagerEvent( ::wxEventType type):  ::wxAuiManagerEvent(type), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiManagerEvent::sipwxAuiManagerEvent(const  ::wxAuiManagerEvent& a0):  ::wxAuiManagerEvent(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiManagerEvent::~sipwxAuiManagerEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEvent* sipwxAuiManagerEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_Clone);

    if (!sipMeth)
        return  ::wxAuiManagerEvent::Clone();

    extern  ::wxEvent* sipVH__aui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_7(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEventCategory sipwxAuiManagerEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxAuiManagerEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__aui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_6(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxAuiManagerEvent_CanVeto, "CanVeto() -> bool");

extern "C" {static PyObject *meth_wxAuiManagerEvent_CanVeto(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManagerEvent_CanVeto(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiManagerEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManagerEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CanVeto();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManagerEvent, sipName_CanVeto, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManagerEvent_GetButton, "GetButton() -> int");

extern "C" {static PyObject *meth_wxAuiManagerEvent_GetButton(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManagerEvent_GetButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiManagerEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManagerEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetButton();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManagerEvent, sipName_GetButton, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManagerEvent_GetDC, "GetDC() -> wx.DC");

extern "C" {static PyObject *meth_wxAuiManagerEvent_GetDC(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManagerEvent_GetDC(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiManagerEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManagerEvent, &sipCpp))
        {
             ::wxDC*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDC();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDC,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManagerEvent, sipName_GetDC, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManagerEvent_GetVeto, "GetVeto() -> bool");

extern "C" {static PyObject *meth_wxAuiManagerEvent_GetVeto(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManagerEvent_GetVeto(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiManagerEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManagerEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVeto();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManagerEvent, sipName_GetVeto, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManagerEvent_GetManager, "GetManager() -> AuiManager");

extern "C" {static PyObject *meth_wxAuiManagerEvent_GetManager(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManagerEvent_GetManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiManagerEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManagerEvent, &sipCpp))
        {
             ::wxAuiManager*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetManager();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiManager,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManagerEvent, sipName_GetManager, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManagerEvent_GetPane, "GetPane() -> AuiPaneInfo");

extern "C" {static PyObject *meth_wxAuiManagerEvent_GetPane(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManagerEvent_GetPane(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiManagerEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManagerEvent, &sipCpp))
        {
             ::wxAuiPaneInfo*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPane();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiPaneInfo,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManagerEvent, sipName_GetPane, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManagerEvent_SetButton, "SetButton(button)\n"
"\n"
"Sets the ID of the button clicked that triggered this event.");

extern "C" {static PyObject *meth_wxAuiManagerEvent_SetButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManagerEvent_SetButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int button;
         ::wxAuiManagerEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_button,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxAuiManagerEvent, &sipCpp, &button))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetButton(button);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManagerEvent, sipName_SetButton, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManagerEvent_SetCanVeto, "SetCanVeto(can_veto)\n"
"\n"
"Sets whether or not this event can be vetoed.");

extern "C" {static PyObject *meth_wxAuiManagerEvent_SetCanVeto(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManagerEvent_SetCanVeto(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool can_veto;
         ::wxAuiManagerEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_can_veto,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxAuiManagerEvent, &sipCpp, &can_veto))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCanVeto(can_veto);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManagerEvent, sipName_SetCanVeto, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManagerEvent_SetDC, "SetDC(pdc)");

extern "C" {static PyObject *meth_wxAuiManagerEvent_SetDC(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManagerEvent_SetDC(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDC* pdc;
         ::wxAuiManagerEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pdc,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiManagerEvent, &sipCpp, sipType_wxDC, &pdc))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetDC(pdc);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManagerEvent, sipName_SetDC, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManagerEvent_SetManager, "SetManager(manager)\n"
"\n"
"Sets the wxAuiManager this event is associated with.");

extern "C" {static PyObject *meth_wxAuiManagerEvent_SetManager(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManagerEvent_SetManager(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiManager* manager;
         ::wxAuiManagerEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_manager,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiManagerEvent, &sipCpp, sipType_wxAuiManager, &manager))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetManager(manager);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManagerEvent, sipName_SetManager, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManagerEvent_SetPane, "SetPane(pane)\n"
"\n"
"Sets the pane this event is associated with.");

extern "C" {static PyObject *meth_wxAuiManagerEvent_SetPane(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManagerEvent_SetPane(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiPaneInfo* pane;
         ::wxAuiManagerEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pane,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiManagerEvent, &sipCpp, sipType_wxAuiPaneInfo, &pane))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetPane(pane);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManagerEvent, sipName_SetPane, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManagerEvent_Veto, "Veto(veto=True)\n"
"\n"
"Cancels the action indicated by this event if CanVeto() is true.");

extern "C" {static PyObject *meth_wxAuiManagerEvent_Veto(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManagerEvent_Veto(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool veto = 1;
         ::wxAuiManagerEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_veto,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxAuiManagerEvent, &sipCpp, &veto))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Veto(veto);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManagerEvent, sipName_Veto, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManagerEvent_Clone, "Clone(self) -> Event");

extern "C" {static PyObject *meth_wxAuiManagerEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManagerEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiManagerEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManagerEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiManagerEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManagerEvent, sipName_Clone, doc_wxAuiManagerEvent_Clone);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxAuiManagerEvent(void *, const sipTypeDef *);}
static void *cast_wxAuiManagerEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxAuiManagerEvent *sipCpp = reinterpret_cast< ::wxAuiManagerEvent *>(sipCppV);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxAuiManagerEvent(void *, int);}
static void release_wxAuiManagerEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxAuiManagerEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxAuiManagerEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxAuiManagerEvent(sipSimpleWrapper *);}
static void dealloc_wxAuiManagerEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxAuiManagerEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxAuiManagerEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxAuiManagerEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxAuiManagerEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxAuiManagerEvent *sipCpp = SIP_NULLPTR;

    {
         ::wxEventType type = wxEVT_NULL;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &type))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiManagerEvent(type);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxAuiManagerEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxAuiManagerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiManagerEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxAuiManagerEvent[] = {{9, 0, 1}};


static PyMethodDef methods_wxAuiManagerEvent[] = {
    {SIP_MLNAME_CAST(sipName_CanVeto), meth_wxAuiManagerEvent_CanVeto, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManagerEvent_CanVeto)},
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxAuiManagerEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManagerEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_GetButton), meth_wxAuiManagerEvent_GetButton, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManagerEvent_GetButton)},
    {SIP_MLNAME_CAST(sipName_GetDC), meth_wxAuiManagerEvent_GetDC, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManagerEvent_GetDC)},
    {SIP_MLNAME_CAST(sipName_GetManager), meth_wxAuiManagerEvent_GetManager, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManagerEvent_GetManager)},
    {SIP_MLNAME_CAST(sipName_GetPane), meth_wxAuiManagerEvent_GetPane, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManagerEvent_GetPane)},
    {SIP_MLNAME_CAST(sipName_GetVeto), meth_wxAuiManagerEvent_GetVeto, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManagerEvent_GetVeto)},
    {SIP_MLNAME_CAST(sipName_SetButton), SIP_MLMETH_CAST(meth_wxAuiManagerEvent_SetButton), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManagerEvent_SetButton)},
    {SIP_MLNAME_CAST(sipName_SetCanVeto), SIP_MLMETH_CAST(meth_wxAuiManagerEvent_SetCanVeto), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManagerEvent_SetCanVeto)},
    {SIP_MLNAME_CAST(sipName_SetDC), SIP_MLMETH_CAST(meth_wxAuiManagerEvent_SetDC), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManagerEvent_SetDC)},
    {SIP_MLNAME_CAST(sipName_SetManager), SIP_MLMETH_CAST(meth_wxAuiManagerEvent_SetManager), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManagerEvent_SetManager)},
    {SIP_MLNAME_CAST(sipName_SetPane), SIP_MLMETH_CAST(meth_wxAuiManagerEvent_SetPane), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManagerEvent_SetPane)},
    {SIP_MLNAME_CAST(sipName_Veto), SIP_MLMETH_CAST(meth_wxAuiManagerEvent_Veto), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManagerEvent_Veto)}
};

sipVariableDef variables_wxAuiManagerEvent[] = {
    {PropertyVariable, sipName_Pane, &methods_wxAuiManagerEvent[5], &methods_wxAuiManagerEvent[11], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Manager, &methods_wxAuiManagerEvent[4], &methods_wxAuiManagerEvent[10], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_DC, &methods_wxAuiManagerEvent[3], &methods_wxAuiManagerEvent[9], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Button, &methods_wxAuiManagerEvent[2], &methods_wxAuiManagerEvent[7], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxAuiManagerEvent, "AuiManagerEvent(type=wx.wxEVT_NULL)\n"
"\n"
"Event used to indicate various actions taken with wxAuiManager.");


sipClassTypeDef sipTypeDef__aui_wxAuiManagerEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxAuiManagerEvent,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_AuiManagerEvent,
        {0, 0, 1},
        13, methods_wxAuiManagerEvent,
        0, SIP_NULLPTR,
        4, variables_wxAuiManagerEvent,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxAuiManagerEvent,
    -1,
    -1,
    supers_wxAuiManagerEvent,
    SIP_NULLPTR,
    init_type_wxAuiManagerEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxAuiManagerEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxAuiManagerEvent,
    cast_wxAuiManagerEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
