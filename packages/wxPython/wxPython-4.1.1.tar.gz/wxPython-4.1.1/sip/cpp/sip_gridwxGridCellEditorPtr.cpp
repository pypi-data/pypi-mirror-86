/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_grid.h"

        #include <wx/object.h>

        #include <wx/grid.h>


PyDoc_STRVAR(doc_wxGridCellEditorPtr_get, "get() -> T\n"
"\n"
"Gets a pointer to the reference counted object to which this class\n"
"points.");

extern "C" {static PyObject *meth_wxGridCellEditorPtr_get(PyObject *, PyObject *);}
static PyObject *meth_wxGridCellEditorPtr_get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxGridCellEditorPtr *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridCellEditorPtr, &sipCpp))
        {
             ::wxGridCellEditor*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGridCellEditor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridCellEditorPtr, sipName_get, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridCellEditorPtr_reset, "reset(ptr)\n"
"\n"
"Reset this class to ptr which points to a reference counted object and\n"
"calls T::DecRef() on the previously owned object.");

extern "C" {static PyObject *meth_wxGridCellEditorPtr_reset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridCellEditorPtr_reset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxGridCellEditor* ptr;
         ::wxGridCellEditorPtr *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ptr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxGridCellEditorPtr, &sipCpp, sipType_wxGridCellEditor, &ptr))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->reset(ptr);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridCellEditorPtr, sipName_reset, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridCellEditorPtr_release, "release() -> T\n"
"\n"
"Release the owned pointer, making caller responsible for decrementing\n"
"its reference count.");

extern "C" {static PyObject *meth_wxGridCellEditorPtr_release(PyObject *, PyObject *);}
static PyObject *meth_wxGridCellEditorPtr_release(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxGridCellEditorPtr *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridCellEditorPtr, &sipCpp))
        {
             ::wxGridCellEditor*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->release();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGridCellEditor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridCellEditorPtr, sipName_release, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxGridCellEditorPtr(void *, int);}
static void release_wxGridCellEditorPtr(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxGridCellEditorPtr *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxGridCellEditorPtr(Py_ssize_t);}
static void *array_wxGridCellEditorPtr(Py_ssize_t sipNrElem)
{
    return new  ::wxGridCellEditorPtr[sipNrElem];
}


extern "C" {static void assign_wxGridCellEditorPtr(void *, SIP_SSIZE_T, void *);}
static void assign_wxGridCellEditorPtr(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxGridCellEditorPtr *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxGridCellEditorPtr *>(sipSrc);
}


extern "C" {static void *copy_wxGridCellEditorPtr(const void *, SIP_SSIZE_T);}
static void *copy_wxGridCellEditorPtr(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxGridCellEditorPtr(reinterpret_cast<const  ::wxGridCellEditorPtr *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxGridCellEditorPtr(sipSimpleWrapper *);}
static void dealloc_wxGridCellEditorPtr(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxGridCellEditorPtr(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxGridCellEditorPtr(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxGridCellEditorPtr(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::wxGridCellEditorPtr *sipCpp = SIP_NULLPTR;

    {
         ::wxGridCellEditor* ptr = 0;

        static const char *sipKwdList[] = {
            sipName_ptr,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8", sipType_wxGridCellEditor, &ptr))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxGridCellEditorPtr(ptr);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            return sipCpp;
        }
    }

    {
        const  ::wxGridCellEditorPtr* tocopy;

        static const char *sipKwdList[] = {
            sipName_tocopy,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_wxGridCellEditorPtr, &tocopy))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxGridCellEditorPtr(*tocopy);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_wxGridCellEditorPtr[] = {
    {SIP_MLNAME_CAST(sipName_get), meth_wxGridCellEditorPtr_get, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridCellEditorPtr_get)},
    {SIP_MLNAME_CAST(sipName_release), meth_wxGridCellEditorPtr_release, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridCellEditorPtr_release)},
    {SIP_MLNAME_CAST(sipName_reset), SIP_MLMETH_CAST(meth_wxGridCellEditorPtr_reset), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridCellEditorPtr_reset)}
};

PyDoc_STRVAR(doc_wxGridCellEditorPtr, "ObjectDataPtr(ptr=None)\n"
"ObjectDataPtr(tocopy)\n"
"\n"
"This is an helper template class primarily written to avoid memory\n"
"leaks because of missing calls to wxRefCounter::DecRef() and\n"
"wxObjectRefData::DecRef().");


sipClassTypeDef sipTypeDef__grid_wxGridCellEditorPtr = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxGridCellEditorPtr,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_GridCellEditorPtr,
        {0, 0, 1},
        3, methods_wxGridCellEditorPtr,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxGridCellEditorPtr,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_wxGridCellEditorPtr,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxGridCellEditorPtr,
    assign_wxGridCellEditorPtr,
    array_wxGridCellEditorPtr,
    copy_wxGridCellEditorPtr,
    release_wxGridCellEditorPtr,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
