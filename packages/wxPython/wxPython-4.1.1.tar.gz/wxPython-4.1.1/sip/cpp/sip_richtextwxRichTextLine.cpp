/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_richtext.h"

        #include <wx/richtext/richtextbuffer.h>

        #include <wx/richtext/richtextbuffer.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/richtext/richtextbuffer.h>


class sipwxRichTextLine : public  ::wxRichTextLine
{
public:
    sipwxRichTextLine( ::wxRichTextParagraph*);
    sipwxRichTextLine(const  ::wxRichTextLine&);
    virtual ~sipwxRichTextLine();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxRichTextLine* Clone() const SIP_OVERRIDE;
     ::wxRect GetRect() const SIP_OVERRIDE;
     ::wxPoint GetAbsolutePosition() const SIP_OVERRIDE;
    void SetPosition(const  ::wxPoint&) SIP_OVERRIDE;
     ::wxPoint GetPosition() const SIP_OVERRIDE;
    void SetSize(const  ::wxSize&) SIP_OVERRIDE;
     ::wxSize GetSize() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRichTextLine(const sipwxRichTextLine &);
    sipwxRichTextLine &operator = (const sipwxRichTextLine &);

    char sipPyMethods[7];
};

sipwxRichTextLine::sipwxRichTextLine( ::wxRichTextParagraph*parent):  ::wxRichTextLine(parent), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextLine::sipwxRichTextLine(const  ::wxRichTextLine& obj):  ::wxRichTextLine(obj), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextLine::~sipwxRichTextLine()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxRichTextLine* sipwxRichTextLine::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_Clone);

    if (!sipMeth)
        return  ::wxRichTextLine::Clone();

    extern  ::wxRichTextLine* sipVH__richtext_82(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_82(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRect sipwxRichTextLine::GetRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_GetRect);

    if (!sipMeth)
        return  ::wxRichTextLine::GetRect();

    extern  ::wxRect sipVH__richtext_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_24(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxRichTextLine::GetAbsolutePosition() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_GetAbsolutePosition);

    if (!sipMeth)
        return  ::wxRichTextLine::GetAbsolutePosition();

    extern  ::wxPoint sipVH__richtext_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_22(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextLine::SetPosition(const  ::wxPoint& pos)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_SetPosition);

    if (!sipMeth)
    {
         ::wxRichTextLine::SetPosition(pos);
        return;
    }

    extern void sipVH__richtext_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPoint&);

    sipVH__richtext_23(sipGILState, 0, sipPySelf, sipMeth, pos);
}

 ::wxPoint sipwxRichTextLine::GetPosition() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_GetPosition);

    if (!sipMeth)
        return  ::wxRichTextLine::GetPosition();

    extern  ::wxPoint sipVH__richtext_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_22(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextLine::SetSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_SetSize);

    if (!sipMeth)
    {
         ::wxRichTextLine::SetSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextLine::GetSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_GetSize);

    if (!sipMeth)
        return  ::wxRichTextLine::GetSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxRichTextLine_SetRange, "SetRange(range)\n"
"SetRange(from_, to_)\n"
"\n"
"Sets the range associated with this line.\n"
"");

extern "C" {static PyObject *meth_wxRichTextLine_SetRange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_SetRange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxRichTextLine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextLine, &sipCpp, sipType_wxRichTextRange, &range, &rangeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetRange(*range);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        long from_;
        long to_;
         ::wxRichTextLine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_from_,
            sipName_to_,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bll", &sipSelf, sipType_wxRichTextLine, &sipCpp, &from_, &to_))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetRange(from_,to_);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_SetRange, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_GetParent, "GetParent() -> RichTextParagraph\n"
"\n"
"Returns the parent paragraph.");

extern "C" {static PyObject *meth_wxRichTextLine_GetParent(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_GetParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextLine, &sipCpp))
        {
             ::wxRichTextParagraph*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetParent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextParagraph,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_GetParent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_GetRange, "GetRange() -> RichTextRange\n"
"\n"
"Returns the range.");

extern "C" {static PyObject *meth_wxRichTextLine_GetRange(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_GetRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextLine, &sipCpp))
        {
             ::wxRichTextRange*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetRange();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextRange,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_GetRange, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_GetAbsoluteRange, "GetAbsoluteRange() -> RichTextRange\n"
"\n"
"Returns the absolute range.");

extern "C" {static PyObject *meth_wxRichTextLine_GetAbsoluteRange(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_GetAbsoluteRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextLine, &sipCpp))
        {
             ::wxRichTextRange*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRichTextRange(sipCpp->GetAbsoluteRange());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextRange,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_GetAbsoluteRange, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_GetSize, "GetSize() -> wx.Size\n"
"\n"
"Returns the line size as calculated by Layout.");

extern "C" {static PyObject *meth_wxRichTextLine_GetSize(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_GetSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextLine, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize((sipSelfWasArg ? sipCpp-> ::wxRichTextLine::GetSize() : sipCpp->GetSize()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_GetSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_SetSize, "SetSize(sz)\n"
"\n"
"Sets the line size as calculated by Layout.");

extern "C" {static PyObject *meth_wxRichTextLine_SetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_SetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxSize* sz;
        int szState = 0;
         ::wxRichTextLine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sz,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextLine, &sipCpp, sipType_wxSize, &sz, &szState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextLine::SetSize(*sz) : sipCpp->SetSize(*sz));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(sz),sipType_wxSize,szState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_SetSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_GetPosition, "GetPosition() -> wx.Point\n"
"\n"
"Returns the object position relative to the parent.");

extern "C" {static PyObject *meth_wxRichTextLine_GetPosition(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_GetPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextLine, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxRichTextLine::GetPosition() : sipCpp->GetPosition()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_GetPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_SetPosition, "SetPosition(pos)\n"
"\n"
"Sets the object position relative to the parent.");

extern "C" {static PyObject *meth_wxRichTextLine_SetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_SetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPoint* pos;
        int posState = 0;
         ::wxRichTextLine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextLine, &sipCpp, sipType_wxPoint, &pos, &posState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextLine::SetPosition(*pos) : sipCpp->SetPosition(*pos));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_SetPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_GetAbsolutePosition, "GetAbsolutePosition() -> wx.Point\n"
"\n"
"Returns the absolute object position.");

extern "C" {static PyObject *meth_wxRichTextLine_GetAbsolutePosition(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_GetAbsolutePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextLine, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxRichTextLine::GetAbsolutePosition() : sipCpp->GetAbsolutePosition()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_GetAbsolutePosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_GetRect, "GetRect() -> wx.Rect\n"
"\n"
"Returns the rectangle enclosing the line.");

extern "C" {static PyObject *meth_wxRichTextLine_GetRect(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_GetRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextLine, &sipCpp))
        {
             ::wxRect*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRect((sipSelfWasArg ? sipCpp-> ::wxRichTextLine::GetRect() : sipCpp->GetRect()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_GetRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_SetDescent, "SetDescent(descent)\n"
"\n"
"Sets the stored descent.");

extern "C" {static PyObject *meth_wxRichTextLine_SetDescent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_SetDescent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int descent;
         ::wxRichTextLine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_descent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextLine, &sipCpp, &descent))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetDescent(descent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_SetDescent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_GetDescent, "GetDescent() -> int\n"
"\n"
"Returns the stored descent.");

extern "C" {static PyObject *meth_wxRichTextLine_GetDescent(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_GetDescent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextLine, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDescent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_GetDescent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_Init, "Init(parent)\n"
"\n"
"Initialises the object.");

extern "C" {static PyObject *meth_wxRichTextLine_Init(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_Init(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextParagraph* parent;
         ::wxRichTextLine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextLine, &sipCpp, sipType_wxRichTextParagraph, &parent))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Init(parent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_Init, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_Copy, "Copy(obj)\n"
"\n"
"Copies from obj.");

extern "C" {static PyObject *meth_wxRichTextLine_Copy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_Copy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextLine* obj;
         ::wxRichTextLine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextLine, &sipCpp, sipType_wxRichTextLine, &obj))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Copy(*obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_Copy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextLine_Clone, "Clone() -> RichTextLine");

extern "C" {static PyObject *meth_wxRichTextLine_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextLine_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextLine, &sipCpp))
        {
             ::wxRichTextLine*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextLine::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextLine,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextLine, sipName_Clone, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRichTextLine(void *, int);}
static void release_wxRichTextLine(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRichTextLine *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRichTextLine *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxRichTextLine(void *, SIP_SSIZE_T, void *);}
static void assign_wxRichTextLine(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxRichTextLine *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxRichTextLine *>(sipSrc);
}


extern "C" {static void *copy_wxRichTextLine(const void *, SIP_SSIZE_T);}
static void *copy_wxRichTextLine(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxRichTextLine(reinterpret_cast<const  ::wxRichTextLine *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxRichTextLine(sipSimpleWrapper *);}
static void dealloc_wxRichTextLine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRichTextLine *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRichTextLine(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRichTextLine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRichTextLine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxRichTextLine *sipCpp = SIP_NULLPTR;

    {
         ::wxRichTextParagraph* parent;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8", sipType_wxRichTextParagraph, &parent))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextLine(parent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxRichTextLine* obj;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_wxRichTextLine, &obj))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextLine(*obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_wxRichTextLine[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxRichTextLine_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextLine_Clone)},
    {SIP_MLNAME_CAST(sipName_Copy), SIP_MLMETH_CAST(meth_wxRichTextLine_Copy), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextLine_Copy)},
    {SIP_MLNAME_CAST(sipName_GetAbsolutePosition), meth_wxRichTextLine_GetAbsolutePosition, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextLine_GetAbsolutePosition)},
    {SIP_MLNAME_CAST(sipName_GetAbsoluteRange), meth_wxRichTextLine_GetAbsoluteRange, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextLine_GetAbsoluteRange)},
    {SIP_MLNAME_CAST(sipName_GetDescent), meth_wxRichTextLine_GetDescent, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextLine_GetDescent)},
    {SIP_MLNAME_CAST(sipName_GetParent), meth_wxRichTextLine_GetParent, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextLine_GetParent)},
    {SIP_MLNAME_CAST(sipName_GetPosition), meth_wxRichTextLine_GetPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextLine_GetPosition)},
    {SIP_MLNAME_CAST(sipName_GetRange), meth_wxRichTextLine_GetRange, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextLine_GetRange)},
    {SIP_MLNAME_CAST(sipName_GetRect), meth_wxRichTextLine_GetRect, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextLine_GetRect)},
    {SIP_MLNAME_CAST(sipName_GetSize), meth_wxRichTextLine_GetSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextLine_GetSize)},
    {SIP_MLNAME_CAST(sipName_Init), SIP_MLMETH_CAST(meth_wxRichTextLine_Init), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextLine_Init)},
    {SIP_MLNAME_CAST(sipName_SetDescent), SIP_MLMETH_CAST(meth_wxRichTextLine_SetDescent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextLine_SetDescent)},
    {SIP_MLNAME_CAST(sipName_SetPosition), SIP_MLMETH_CAST(meth_wxRichTextLine_SetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextLine_SetPosition)},
    {SIP_MLNAME_CAST(sipName_SetRange), SIP_MLMETH_CAST(meth_wxRichTextLine_SetRange), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextLine_SetRange)},
    {SIP_MLNAME_CAST(sipName_SetSize), SIP_MLMETH_CAST(meth_wxRichTextLine_SetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextLine_SetSize)}
};

sipVariableDef variables_wxRichTextLine[] = {
    {PropertyVariable, sipName_Size, &methods_wxRichTextLine[9], &methods_wxRichTextLine[14], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Rect, &methods_wxRichTextLine[8], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Range, &methods_wxRichTextLine[7], &methods_wxRichTextLine[13], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Position, &methods_wxRichTextLine[6], &methods_wxRichTextLine[12], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Parent, &methods_wxRichTextLine[5], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Descent, &methods_wxRichTextLine[4], &methods_wxRichTextLine[11], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_AbsoluteRange, &methods_wxRichTextLine[3], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_AbsolutePosition, &methods_wxRichTextLine[2], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxRichTextLine, "RichTextLine(parent)\n"
"RichTextLine(obj)\n"
"\n"
"This object represents a line in a paragraph, and stores offsets from\n"
"the start of the paragraph representing the start and end positions of\n"
"the line.");


sipClassTypeDef sipTypeDef__richtext_wxRichTextLine = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxRichTextLine,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_RichTextLine,
        {0, 0, 1},
        15, methods_wxRichTextLine,
        0, SIP_NULLPTR,
        8, variables_wxRichTextLine,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxRichTextLine,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_wxRichTextLine,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxRichTextLine,
    assign_wxRichTextLine,
    SIP_NULLPTR,
    copy_wxRichTextLine,
    release_wxRichTextLine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
