/*
 * Module code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_xrc.h"

        #include <wx/object.h>
        #include <wx/xml/xml.h>
        #include <wx/xrc/xmlres.h>

/* Define the strings used by this module. */
const char sipStrings__xrc[] = {
    'C', 'r', 'e', 'a', 't', 'e', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 'P', 'r', 'i', 'v', 'a', 't', 'e', 'l', 'y', 0,
    'L', 'o', 'a', 'd', 'O', 'b', 'j', 'e', 'c', 't', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 'l', 'y', 0,
    'w', 'x', 'X', 'm', 'l', 'S', 'u', 'b', 'c', 'l', 'a', 's', 's', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    'w', 'x', 'X', 'm', 'l', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'A', 't', 't', 'a', 'c', 'h', 'U', 'n', 'k', 'n', 'o', 'w', 'n', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'v', 'a', 'l', 'u', 'e', '_', 'i', 'f', '_', 'n', 'o', 't', '_', 'f', 'o', 'u', 'n', 'd', 0,
    'A', 'd', 'd', 'S', 'u', 'b', 'c', 'l', 'a', 's', 's', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    'X', 'R', 'C', '_', 'N', 'O', '_', 'S', 'U', 'B', 'C', 'L', 'A', 'S', 'S', 'I', 'N', 'G', 0,
    'w', 'x', 'X', 'm', 'l', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'F', 'l', 'a', 'g', 's', 0,
    'G', 'e', 't', 'P', 'a', 'r', 'e', 'n', 't', 'A', 's', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'C', 'r', 'e', 'a', 't', 'e', 'R', 'e', 's', 'F', 'r', 'o', 'm', 'N', 'o', 'd', 'e', 0,
    'S', 'e', 't', 'P', 'a', 'r', 'e', 'n', 't', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'R', 'e', 'p', 'o', 'r', 't', 'P', 'a', 'r', 'a', 'm', 'E', 'r', 'r', 'o', 'r', 0,
    'G', 'e', 't', 'C', 'u', 'r', 'F', 'i', 'l', 'e', 'S', 'y', 's', 't', 'e', 'm', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'A', 'r', 't', 'C', 'l', 'i', 'e', 'n', 't', 0,
    'D', 'o', 'C', 'r', 'e', 'a', 't', 'e', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'X', 'R', 'C', '_', 'N', 'O', '_', 'R', 'E', 'L', 'O', 'A', 'D', 'I', 'N', 'G', 0,
    'G', 'e', 't', 'N', 'o', 'd', 'e', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'A', 'd', 'd', 'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'y', 'l', 'e', 's', 0,
    'I', 'n', 'i', 't', 'A', 'l', 'l', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 's', 0,
    'G', 'e', 't', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'N', 'o', 'd', 'e', 0,
    'X', 'R', 'C', '_', 'U', 'S', 'E', '_', 'E', 'N', 'V', 'V', 'A', 'R', 'S', 0,
    'w', 'x', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 'C', 't', 'r', 'l', 0,
    'C', 'r', 'e', 'a', 't', 'e', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'L', 'o', 'a', 'd', 'F', 'r', 'o', 'm', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'C', 'o', 'm', 'p', 'a', 'r', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'X', 'R', 'C', '_', 'U', 'S', 'E', '_', 'L', 'O', 'C', 'A', 'L', 'E', 0,
    'G', 'e', 't', 'N', 'o', 'd', 'e', 'C', 'o', 'n', 't', 'e', 'n', 't', 0,
    'G', 'e', 't', 'N', 'o', 'd', 'e', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    't', 'h', 'i', 's', '_', 'h', 'n', 'd', '_', 'o', 'n', 'l', 'y', 0,
    'F', 'i', 'n', 'd', 'X', 'R', 'C', 'I', 'D', 'B', 'y', 'I', 'd', 0,
    'C', 'l', 'e', 'a', 'r', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 's', 0,
    'w', 'x', 'X', 'm', 'l', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'G', 'e', 't', 'P', 'a', 'r', 'a', 'm', 'V', 'a', 'l', 'u', 'e', 0,
    'G', 'e', 't', 'I', 'c', 'o', 'n', 'B', 'u', 'n', 'd', 'l', 'e', 0,
    'I', 'n', 's', 'e', 'r', 't', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'G', 'e', 't', 'P', 'a', 'r', 'a', 'm', 'N', 'o', 'd', 'e', 0,
    'I', 's', 'O', 'b', 'j', 'e', 'c', 't', 'N', 'o', 'd', 'e', 0,
    'G', 'e', 't', 'D', 'i', 'm', 'e', 'n', 's', 'i', 'o', 'n', 0,
    'G', 'e', 't', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'L', 'o', 'a', 'd', 'A', 'l', 'l', 'F', 'i', 'l', 'e', 's', 0,
    'G', 'e', 't', 'I', 'm', 'a', 'g', 'e', 'L', 'i', 's', 't', 0,
    'G', 'e', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'G', 'e', 't', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'S', 'e', 't', 'u', 'p', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'G', 'e', 't', 'N', 'o', 'd', 'e', 'N', 'e', 'x', 't', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 'T', 'o', 'U', 's', 'e', 0,
    'L', 'o', 'a', 'd', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 0,
    'L', 'o', 'a', 'd', 'M', 'e', 'n', 'u', 'B', 'a', 'r', 0,
    'w', 'x', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'R', 'e', 'p', 'o', 'r', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'G', 'e', 't', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 0,
    'G', 'e', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'd', 'i', 'r', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'L', 'o', 'a', 'd', 'D', 'i', 'a', 'l', 'o', 'g', 0,
    'L', 'o', 'a', 'd', 'B', 'i', 't', 'm', 'a', 'p', 0,
    'L', 'o', 'a', 'd', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'w', 'i', 'd', 't', 'h', 'T', 'i', 't', 'l', 'e', 0,
    'G', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'A', 'd', 'd', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'I', 's', 'O', 'f', 'C', 'l', 'a', 's', 's', 0,
    't', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 0,
    'C', 'a', 'n', 'H', 'a', 'n', 'd', 'l', 'e', 0,
    'S', 'e', 't', 'D', 'o', 'm', 'a', 'i', 'n', 0,
    'L', 'o', 'a', 'd', 'P', 'a', 'n', 'e', 'l', 0,
    'L', 'o', 'a', 'd', 'F', 'r', 'a', 'm', 'e', 0,
    'G', 'e', 't', 'D', 'o', 'm', 'a', 'i', 'n', 0,
    'c', 'l', 'a', 's', 's', 'n', 'a', 'm', 'e', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'M', 'a', 'x', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'M', 'i', 'n', 0,
    's', 'i', 'z', 'e', 'F', 'l', 'a', 'g', 's', 0,
    'G', 'e', 't', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'G', 'e', 't', 'B', 'i', 't', 'm', 'a', 'p', 0,
    'G', 'e', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'c', 'l', 'a', 's', 's', 'N', 'a', 'm', 'e', 0,
    'G', 'e', 't', 'C', 'l', 'a', 's', 's', 0,
    'H', 'a', 's', 'P', 'a', 'r', 'a', 'm', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 's', 0,
    'G', 'e', 't', 'F', 'l', 'o', 'a', 't', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'v', 0,
    'r', 'o', 'o', 't', 'n', 'o', 'd', 'e', 0,
    'A', 'd', 'd', 'S', 't', 'y', 'l', 'e', 0,
    'G', 'e', 't', 'X', 'R', 'C', 'I', 'D', 0,
    'L', 'o', 'a', 'd', 'M', 'e', 'n', 'u', 0,
    'L', 'o', 'a', 'd', 'I', 'c', 'o', 'n', 0,
    'r', 'e', 'v', 'i', 's', 'i', 'o', 'n', 0,
    'f', 'i', 'l', 'e', 'm', 'a', 's', 'k', 0,
    'S', 'e', 't', 'F', 'l', 'a', 'g', 's', 0,
    'G', 'e', 't', 'F', 'l', 'a', 'g', 's', 0,
    'G', 'e', 't', 'S', 't', 'y', 'l', 'e', 0,
    'L', 'o', 'a', 'd', 'F', 'i', 'l', 'e', 0,
    'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'f', 'i', 'l', 'e', 'n', 'a', 'm', 'e', 0,
    'i', 'n', 's', 't', 'a', 'n', 'c', 'e', 0,
    'G', 'e', 't', 'N', 'o', 'd', 'e', 0,
    'G', 'e', 't', 'L', 'o', 'n', 'g', 0,
    'G', 'e', 't', 'B', 'o', 'o', 'l', 0,
    'f', 'a', 'c', 't', 'o', 'r', 'y', 0,
    'd', 'i', 'r', 'n', 'a', 'm', 'e', 0,
    'c', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'u', 'n', 'i', 't', 'M', 'a', 'x', 0,
    'u', 'n', 'i', 't', 'M', 'i', 'n', 0,
    'v', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'G', 'e', 't', 'T', 'e', 'x', 't', 0,
    'm', 'e', 's', 's', 'a', 'g', 'e', 0,
    'G', 'e', 't', 'I', 'c', 'o', 'n', 0,
    'h', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 0,
    'G', 'e', 't', 'N', 'a', 'm', 'e', 0,
    'G', 'e', 't', 'F', 'o', 'n', 't', 0,
    'r', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'G', 'e', 't', 'S', 'i', 'z', 'e', 0,
    'w', 'x', '.', '_', 'x', 'r', 'c', 0,
    's', 't', 'r', '_', 'i', 'd', 0,
    'U', 'n', 'l', 'o', 'a', 'd', 0,
    'c', 'l', 'i', 'e', 'n', 't', 0,
    'd', 'i', 'a', 'l', 'o', 'g', 0,
    'r', 'o', 'w', 'M', 'a', 'x', 0,
    'r', 'o', 'w', 'M', 'i', 'n', 0,
    'p', 'a', 'r', 'e', 'n', 't', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 0,
    'C', 'r', 'e', 'a', 't', 'e', 0,
    's', 't', 'r', 'e', 'a', 'm', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 0,
    'd', 'o', 'm', 'a', 'i', 'n', 0,
    'h', 'e', 'i', 'g', 'h', 't', 0,
    'p', 'a', 'r', 'a', 'm', 0,
    'n', 'u', 'm', 'I', 'd', 0,
    'p', 'a', 'n', 'e', 'l', 0,
    'p', 'o', 'p', 'u', 'p', 0,
    'G', 'e', 't', 'I', 'D', 0,
    'o', 'r', 'd', 'e', 'r', 0,
    's', 'i', 'z', 'e', 'r', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'f', 'r', 'a', 'm', 'e', 0,
    'l', 'e', 'v', 'e', 'l', 0,
    'c', 'h', 'i', 'l', 'd', 0,
    's', 't', 'y', 'l', 'e', 0,
    'w', 'i', 'd', 't', 'h', 0,
    'm', 'i', 'n', 'o', 'r', 0,
    'm', 'a', 'j', 'o', 'r', 0,
    'c', 'o', 'u', 'n', 't', 0,
    'f', 'l', 'a', 'g', 's', 0,
    'v', 'a', 'l', 'u', 'e', 0,
    'c', 't', 'r', 'l', 0,
    'u', 'n', 'i', 't', 0,
    'i', 'n', 'c', 'H', 0,
    'i', 'n', 'c', 'W', 0,
    'm', 'a', 'x', 'H', 0,
    'm', 'a', 'x', 'W', 0,
    'm', 'i', 'n', 'H', 0,
    'm', 'i', 'n', 'W', 0,
    's', 'h', 'o', 'w', 0,
    'L', 'o', 'a', 'd', 0,
    'f', 'i', 'l', 'e', 0,
    'r', 'e', 'c', 't', 0,
    's', 'i', 'z', 'e', 0,
    't', 'i', 'm', 'e', 0,
    'i', 't', 'e', 'm', 0,
    'i', 'n', 'f', 'o', 0,
    'd', 'a', 't', 'a', 0,
    'w', 'n', 'd', 0,
    'd', 'l', 'g', 0,
    'i', 'd', 'x', 0,
    'r', 'e', 's', 0,
    'm', 's', 'g', 0,
    'r', 'o', 'w', 0,
    'p', 'o', 's', 0,
    'G', 'e', 't', 0,
    'S', 'e', 't', 0,
    'd', 'c', 0,
};

 ::wxObject* sipVH__xrc_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxString& className)
{
     ::wxObject* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::wxString(className), sipType_wxString, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_wxObject, &sipRes);

    return sipRes;
}

bool sipVH__xrc_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxXmlNode*node)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", node, sipType_wxXmlNode, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::wxObject* sipVH__xrc_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxObject* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_wxObject, &sipRes);

    return sipRes;
}
static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_wxXmlResourceFlags, {0}, 0}, sipNameNr_XmlResourceFlags, -1, SIP_NULLPTR},
};

/* These are the enum members of all global enums. */
static sipEnumMemberDef enummembers[] = {
    {sipName_XRC_NO_RELOADING, static_cast<int>(::wxXRC_NO_RELOADING), 3},
    {sipName_XRC_NO_SUBCLASSING, static_cast<int>(::wxXRC_NO_SUBCLASSING), 3},
    {sipName_XRC_USE_ENVVARS, static_cast<int>(::wxXRC_USE_ENVVARS), 3},
    {sipName_XRC_USE_LOCALE, static_cast<int>(::wxXRC_USE_LOCALE), 3},
};


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes__xrc[] = {
    &sipTypeDef__xrc_wxAnimation.ctd_base,
    &sipTypeDef__xrc_wxAnimationCtrl.ctd_base,
    &sipTypeDef__xrc_wxXmlResource.ctd_base,
    &enumTypes[0].etd_base,
    &sipTypeDef__xrc_wxXmlResourceHandler.ctd_base,
    &sipTypeDef__xrc_wxXmlSubclassFactory.ctd_base,
};


/* This defines the types that this module needs to import from _core. */
sipImportedTypeDef sipImportedTypes__xrc__core[] = {
    {"wxBitmap"},
    {"wxColour"},
    {"wxDialog"},
    {"wxDirection"},
    {"wxFileName"},
    {"wxFileSystem"},
    {"wxFont"},
    {"wxFrame"},
    {"wxIcon"},
    {"wxIconBundle"},
    {"wxImageList"},
    {"wxMenu"},
    {"wxMenuBar"},
    {"wxObject"},
    {"wxPanel"},
    {"wxPoint"},
    {"wxPyBuffer"},
    {"wxSize"},
    {"wxString"},
    {"wxToolBar"},
    {"wxWindow"},
    {SIP_NULLPTR}
};


/* This defines the types that this module needs to import from _xml. */
sipImportedTypeDef sipImportedTypes__xrc__xml[] = {
    {"wxXmlNode"},
    {SIP_NULLPTR}
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"wx._core", sipImportedTypes__xrc__core, SIP_NULLPTR, SIP_NULLPTR},
    {"wx._xml", sipImportedTypes__xrc__xml, SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI__xrc = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_wx__xrc,
    0,
    sipStrings__xrc,
    importsTable,
    SIP_NULLPTR,
    6,
    sipExportedTypes__xrc,
    SIP_NULLPTR,
    4,
    enummembers,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI__xrc;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit__xrc
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        init_xrc
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_NULLPTR, SIP_NULLPTR, 0, SIP_NULLPTR}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "wx._xrc",
        SIP_NULLPTR,
        -1,
        sip_methods,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_wx__xrc, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_wx__xrc), sip_methods);
#endif

    if (sipModule == SIP_NULLPTR)
        SIP_MODULE_RETURN(SIP_NULLPTR);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("wx.siplib");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("wx.siplib"));
#endif

    if (sip_sipmod == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == SIP_NULLPTR || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == SIP_NULLPTR || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI__xrc = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, "wx.siplib._C_API"));
#else
    sipAPI__xrc = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI__xrc == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#endif

        wxXmlInitResourceModule();
        wxXmlResource::Get()->InitAllHandlers();
        
    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI__xrc,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI__xrc,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    SIP_MODULE_RETURN(sipModule);
}
