/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_aui.h"

        #include <wx/aui/framemanager.h>

        #include <wx/window.h>
        #include <wx/aui/framemanager.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/aui/dockart.h>
        #include <wx/aui/floatpane.h>
        #include <wx/event.h>
        #include <wx/eventfilter.h>
        #include <wx/event.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxAuiManager : public  ::wxAuiManager
{
public:
    sipwxAuiManager( ::wxWindow*,uint);
    virtual ~sipwxAuiManager();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);
    bool sipProtectVirt_ProcessDockResult(bool, ::wxAuiPaneInfo&,const  ::wxAuiPaneInfo&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool ProcessDockResult( ::wxAuiPaneInfo&,const  ::wxAuiPaneInfo&) SIP_OVERRIDE;
    void ShowHint(const  ::wxRect&) SIP_OVERRIDE;
    void HideHint() SIP_OVERRIDE;
     ::wxAuiFloatingFrame* CreateFloatingFrame( ::wxWindow*,const  ::wxAuiPaneInfo&) SIP_OVERRIDE;
    bool CanDockPanel(const  ::wxAuiPaneInfo&) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxAuiManager(const sipwxAuiManager &);
    sipwxAuiManager &operator = (const sipwxAuiManager &);

    char sipPyMethods[8];
};

sipwxAuiManager::sipwxAuiManager( ::wxWindow*managed_wnd,uint flags):  ::wxAuiManager(managed_wnd,flags), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiManager::~sipwxAuiManager()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxAuiManager::ProcessDockResult( ::wxAuiPaneInfo& target,const  ::wxAuiPaneInfo& new_pos)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_ProcessDockResult);

    if (!sipMeth)
        return  ::wxAuiManager::ProcessDockResult(target,new_pos);

    extern bool sipVH__aui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxAuiPaneInfo&,const  ::wxAuiPaneInfo&);

    return sipVH__aui_5(sipGILState, 0, sipPySelf, sipMeth, target, new_pos);
}

void sipwxAuiManager::ShowHint(const  ::wxRect& rect)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_ShowHint);

    if (!sipMeth)
    {
         ::wxAuiManager::ShowHint(rect);
        return;
    }

    extern void sipVH__aui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRect&);

    sipVH__aui_4(sipGILState, 0, sipPySelf, sipMeth, rect);
}

void sipwxAuiManager::HideHint()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_HideHint);

    if (!sipMeth)
    {
         ::wxAuiManager::HideHint();
        return;
    }

    extern void sipVH__aui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxAuiFloatingFrame* sipwxAuiManager::CreateFloatingFrame( ::wxWindow*parent,const  ::wxAuiPaneInfo& p)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_CreateFloatingFrame);

    if (!sipMeth)
        return  ::wxAuiManager::CreateFloatingFrame(parent,p);

    extern  ::wxAuiFloatingFrame* sipVH__aui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*,const  ::wxAuiPaneInfo&);

    return sipVH__aui_2(sipGILState, 0, sipPySelf, sipMeth, parent, p);
}

bool sipwxAuiManager::CanDockPanel(const  ::wxAuiPaneInfo& p)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_CanDockPanel);

    if (!sipMeth)
        return  ::wxAuiManager::CanDockPanel(p);

    extern bool sipVH__aui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxAuiPaneInfo&);

    return sipVH__aui_1(sipGILState, 0, sipPySelf, sipMeth, p);
}

bool sipwxAuiManager::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxAuiManager::ProcessEvent(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxAuiManager::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxAuiManager::TryBefore(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxAuiManager::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxAuiManager::TryAfter(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxAuiManager::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxEvtHandler::TryBefore(event) : TryBefore(event));
}

bool sipwxAuiManager::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxEvtHandler::TryAfter(event) : TryAfter(event));
}

bool sipwxAuiManager::sipProtectVirt_ProcessDockResult(bool sipSelfWasArg, ::wxAuiPaneInfo& target,const  ::wxAuiPaneInfo& new_pos)
{
    return (sipSelfWasArg ?  ::wxAuiManager::ProcessDockResult(target,new_pos) : ProcessDockResult(target,new_pos));
}


PyDoc_STRVAR(doc_wxAuiManager_TryBefore, "TryBefore(event) -> bool\n"
"\n"
"Method called by ProcessEvent() before examining this object event\n"
"tables.");

extern "C" {static PyObject *meth_wxAuiManager_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_TryBefore, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_TryAfter, "TryAfter(event) -> bool\n"
"\n"
"Method called by ProcessEvent() as last resort.");

extern "C" {static PyObject *meth_wxAuiManager_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_TryAfter, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_AddPane, "AddPane(window, pane_info) -> bool\n"
"AddPane(window, direction=wx.LEFT, caption=wx.EmptyString) -> bool\n"
"AddPane(window, pane_info, drop_pos) -> bool\n"
"\n"
"AddPane() tells the frame manager to start managing a child window.\n"
"\n"
"");

extern "C" {static PyObject *meth_wxAuiManager_AddPane(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_AddPane(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* window;
        const  ::wxAuiPaneInfo* pane_info;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_pane_info,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxWindow, &window, sipType_wxAuiPaneInfo, &pane_info))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddPane(window,*pane_info);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::wxWindow* window;
        int direction = wxLEFT;
        const  ::wxString& captiondef = wxEmptyString;
        const  ::wxString* caption = &captiondef;
        int captionState = 0;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_direction,
            sipName_caption,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|iJ1", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxWindow, &window, &direction, sipType_wxString,&caption, &captionState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddPane(window,direction,*caption);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(caption),sipType_wxString,captionState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::wxWindow* window;
        const  ::wxAuiPaneInfo* pane_info;
        const  ::wxPoint* drop_pos;
        int drop_posState = 0;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_pane_info,
            sipName_drop_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxWindow, &window, sipType_wxAuiPaneInfo, &pane_info, sipType_wxPoint, &drop_pos, &drop_posState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddPane(window,*pane_info,*drop_pos);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(drop_pos),sipType_wxPoint,drop_posState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_AddPane, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_GetPane, "GetPane(window) -> AuiPaneInfo\n"
"GetPane(name) -> AuiPaneInfo\n"
"\n"
"GetPane() is used to lookup a wxAuiPaneInfo object either by window\n"
"pointer or by pane name, which acts as a unique id for a window pane.\n"
"");

extern "C" {static PyObject *meth_wxAuiManager_GetPane(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_GetPane(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* window;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxWindow, &window))
        {
             ::wxAuiPaneInfo*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetPane(window);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiPaneInfo,SIP_NULLPTR);
        }
    }

    {
        const  ::wxString* name;
        int nameState = 0;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxString,&name, &nameState))
        {
             ::wxAuiPaneInfo*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetPane(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiPaneInfo,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_GetPane, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_CalculateHintRect, "CalculateHintRect(paneWindow, pt, offset) -> wx.Rect\n"
"\n"
"This function is used by controls to calculate the drop hint\n"
"rectangle.");

extern "C" {static PyObject *meth_wxAuiManager_CalculateHintRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_CalculateHintRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* paneWindow;
        const  ::wxPoint* pt;
        int ptState = 0;
        const  ::wxPoint* offset;
        int offsetState = 0;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_paneWindow,
            sipName_pt,
            sipName_offset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1J1", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxWindow, &paneWindow, sipType_wxPoint, &pt, &ptState, sipType_wxPoint, &offset, &offsetState))
        {
             ::wxRect*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRect(sipCpp->CalculateHintRect(paneWindow,*pt,*offset));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);
            sipReleaseType(const_cast< ::wxPoint *>(offset),sipType_wxPoint,offsetState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_CalculateHintRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_CanDockPanel, "CanDockPanel(p) -> bool\n"
"\n"
"Check if a key modifier is pressed (actually WXK_CONTROL or WXK_ALT)\n"
"while dragging the frame to not dock the window.");

extern "C" {static PyObject *meth_wxAuiManager_CanDockPanel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_CanDockPanel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiPaneInfo* p;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxAuiPaneInfo, &p))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiManager::CanDockPanel(*p) : sipCpp->CanDockPanel(*p));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_CanDockPanel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_ClosePane, "ClosePane(paneInfo)\n"
"\n"
"Destroys or hides the given pane depending on its flags.");

extern "C" {static PyObject *meth_wxAuiManager_ClosePane(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_ClosePane(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiPaneInfo* paneInfo;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_paneInfo,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxAuiPaneInfo, &paneInfo))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClosePane(*paneInfo);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_ClosePane, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_CreateFloatingFrame, "CreateFloatingFrame(parent, p) -> AuiFloatingFrame\n"
"\n"
"Creates a floating frame in this wxAuiManager with the given parent\n"
"and wxAuiPaneInfo.");

extern "C" {static PyObject *meth_wxAuiManager_CreateFloatingFrame(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_CreateFloatingFrame(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindow* parent;
        const  ::wxAuiPaneInfo* p;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_p,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxWindow, &parent, sipType_wxAuiPaneInfo, &p))
        {
             ::wxAuiFloatingFrame*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiManager::CreateFloatingFrame(parent,*p) : sipCpp->CreateFloatingFrame(parent,*p));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiFloatingFrame,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_CreateFloatingFrame, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_DetachPane, "DetachPane(window) -> bool\n"
"\n"
"Tells the wxAuiManager to stop managing the pane specified by window.");

extern "C" {static PyObject *meth_wxAuiManager_DetachPane(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_DetachPane(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* window;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxWindow, &window))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DetachPane(window);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_DetachPane, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_DrawHintRect, "DrawHintRect(paneWindow, pt, offset)\n"
"\n"
"This function is used by controls to draw the hint window.");

extern "C" {static PyObject *meth_wxAuiManager_DrawHintRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_DrawHintRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* paneWindow;
        const  ::wxPoint* pt;
        int ptState = 0;
        const  ::wxPoint* offset;
        int offsetState = 0;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_paneWindow,
            sipName_pt,
            sipName_offset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1J1", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxWindow, &paneWindow, sipType_wxPoint, &pt, &ptState, sipType_wxPoint, &offset, &offsetState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawHintRect(paneWindow,*pt,*offset);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);
            sipReleaseType(const_cast< ::wxPoint *>(offset),sipType_wxPoint,offsetState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_DrawHintRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_GetAllPanes, "GetAllPanes() -> AuiPaneInfoArray\n"
"\n"
"Returns an array of all panes managed by the frame manager.");

extern "C" {static PyObject *meth_wxAuiManager_GetAllPanes(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_GetAllPanes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManager, &sipCpp))
        {
             ::wxAuiPaneInfoArray*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetAllPanes();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiPaneInfoArray,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_GetAllPanes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_GetArtProvider, "GetArtProvider() -> AuiDockArt\n"
"\n"
"Returns the current art provider being used.");

extern "C" {static PyObject *meth_wxAuiManager_GetArtProvider(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_GetArtProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManager, &sipCpp))
        {
             ::wxAuiDockArt*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetArtProvider();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiDockArt,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_GetArtProvider, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_GetDockSizeConstraint, "GetDockSizeConstraint(widthpct, heightpct)\n"
"\n"
"Returns the current dock constraint values.");

extern "C" {static PyObject *meth_wxAuiManager_GetDockSizeConstraint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_GetDockSizeConstraint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double widthpct;
        double heightpct;
        const  ::wxAuiManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxAuiManager, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->GetDockSizeConstraint(&widthpct,&heightpct);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(dd)",widthpct,heightpct);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_GetDockSizeConstraint, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_GetFlags, "GetFlags() -> unsignedint\n"
"\n"
"Returns the current wxAuiManagerOption's flags.");

extern "C" {static PyObject *meth_wxAuiManager_GetFlags(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_GetFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManager, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFlags();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_GetFlags, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_GetManagedWindow, "GetManagedWindow() -> wx.Window\n"
"\n"
"Returns the frame currently being managed by wxAuiManager.");

extern "C" {static PyObject *meth_wxAuiManager_GetManagedWindow(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_GetManagedWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManager, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetManagedWindow();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_GetManagedWindow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_HasLiveResize, "HasLiveResize() -> bool\n"
"\n"
"Returns true if windows are resized live.");

extern "C" {static PyObject *meth_wxAuiManager_HasLiveResize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_HasLiveResize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManager, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasLiveResize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_HasLiveResize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_HideHint, "HideHint()\n"
"\n"
"HideHint() hides any docking hint that may be visible.");

extern "C" {static PyObject *meth_wxAuiManager_HideHint(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_HideHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManager, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiManager::HideHint() : sipCpp->HideHint());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_HideHint, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_InsertPane, "InsertPane(window, insert_location, insert_level=AUI_INSERT_PANE) -> bool\n"
"\n"
"This method is used to insert either a previously unmanaged pane\n"
"window into the frame manager, or to insert a currently managed pane\n"
"somewhere else.");

extern "C" {static PyObject *meth_wxAuiManager_InsertPane(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_InsertPane(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* window;
        const  ::wxAuiPaneInfo* insert_location;
        int insert_level = wxAUI_INSERT_PANE;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_insert_location,
            sipName_insert_level,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9|i", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxWindow, &window, sipType_wxAuiPaneInfo, &insert_location, &insert_level))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertPane(window,*insert_location,insert_level);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_InsertPane, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_LoadPaneInfo, "LoadPaneInfo(pane_part, pane)\n"
"\n"
"LoadPaneInfo() is similar to LoadPerspective, with the exception that\n"
"it only loads information about a single pane.");

extern "C" {static PyObject *meth_wxAuiManager_LoadPaneInfo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_LoadPaneInfo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxString* pane_part;
        int pane_partState = 0;
         ::wxAuiPaneInfo* pane;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pane_part,
            sipName_pane,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxString,&pane_part, &pane_partState, sipType_wxAuiPaneInfo, &pane))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->LoadPaneInfo(*pane_part,*pane);
            Py_END_ALLOW_THREADS
            sipReleaseType(pane_part,sipType_wxString,pane_partState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_LoadPaneInfo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_LoadPerspective, "LoadPerspective(perspective, update=True) -> bool\n"
"\n"
"Loads a saved perspective.");

extern "C" {static PyObject *meth_wxAuiManager_LoadPerspective(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_LoadPerspective(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* perspective;
        int perspectiveState = 0;
        bool update = 1;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_perspective,
            sipName_update,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|b", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxString,&perspective, &perspectiveState, &update))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->LoadPerspective(*perspective,update);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(perspective),sipType_wxString,perspectiveState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_LoadPerspective, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_MaximizePane, "MaximizePane(paneInfo)\n"
"\n"
"Maximize the given pane.");

extern "C" {static PyObject *meth_wxAuiManager_MaximizePane(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_MaximizePane(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiPaneInfo* paneInfo;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_paneInfo,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxAuiPaneInfo, &paneInfo))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->MaximizePane(*paneInfo);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_MaximizePane, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_RestorePane, "RestorePane(paneInfo)\n"
"\n"
"Restore the last state of the given pane.");

extern "C" {static PyObject *meth_wxAuiManager_RestorePane(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_RestorePane(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiPaneInfo* paneInfo;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_paneInfo,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxAuiPaneInfo, &paneInfo))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RestorePane(*paneInfo);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_RestorePane, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_RestoreMaximizedPane, "RestoreMaximizedPane()\n"
"\n"
"Restore the previously maximized pane.");

extern "C" {static PyObject *meth_wxAuiManager_RestoreMaximizedPane(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_RestoreMaximizedPane(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManager, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RestoreMaximizedPane();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_RestoreMaximizedPane, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_SavePaneInfo, "SavePaneInfo(pane) -> String\n"
"\n"
"SavePaneInfo() is similar to SavePerspective, with the exception that\n"
"it only saves information about a single pane.");

extern "C" {static PyObject *meth_wxAuiManager_SavePaneInfo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_SavePaneInfo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxAuiPaneInfo* pane;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pane,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxAuiPaneInfo, &pane))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->SavePaneInfo(*pane));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_SavePaneInfo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_SavePerspective, "SavePerspective() -> String\n"
"\n"
"Saves the entire user interface layout into an encoded wxString, which\n"
"can then be stored by the application (probably using wxConfig).");

extern "C" {static PyObject *meth_wxAuiManager_SavePerspective(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_SavePerspective(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManager, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->SavePerspective());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_SavePerspective, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_SetArtProvider, "SetArtProvider(art_provider)\n"
"\n"
"Instructs wxAuiManager to use art provider specified by parameter\n"
"art_provider for all drawing calls.");

extern "C" {static PyObject *meth_wxAuiManager_SetArtProvider(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_SetArtProvider(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiDockArt* art_provider;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_art_provider,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxAuiDockArt, &art_provider))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetArtProvider(art_provider);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_SetArtProvider, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_SetDockSizeConstraint, "SetDockSizeConstraint(widthpct, heightpct)\n"
"\n"
"When a user creates a new dock by dragging a window into a docked\n"
"position, often times the large size of the window will create a dock\n"
"that is unwieldy large.");

extern "C" {static PyObject *meth_wxAuiManager_SetDockSizeConstraint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_SetDockSizeConstraint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double widthpct;
        double heightpct;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_widthpct,
            sipName_heightpct,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bdd", &sipSelf, sipType_wxAuiManager, &sipCpp, &widthpct, &heightpct))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetDockSizeConstraint(widthpct,heightpct);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_SetDockSizeConstraint, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_SetFlags, "SetFlags(flags)\n"
"\n"
"This method is used to specify wxAuiManagerOption's flags.");

extern "C" {static PyObject *meth_wxAuiManager_SetFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_SetFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint flags;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxAuiManager, &sipCpp, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFlags(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_SetFlags, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_SetManagedWindow, "SetManagedWindow(managed_wnd)\n"
"\n"
"Called to specify the frame or window which is to be managed by\n"
"wxAuiManager.");

extern "C" {static PyObject *meth_wxAuiManager_SetManagedWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_SetManagedWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* managed_wnd;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_managed_wnd,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxWindow, &managed_wnd))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetManagedWindow(managed_wnd);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_SetManagedWindow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_ShowHint, "ShowHint(rect)\n"
"\n"
"This function is used by controls to explicitly show a hint window at\n"
"the specified rectangle.");

extern "C" {static PyObject *meth_wxAuiManager_ShowHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_ShowHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxRect, &rect, &rectState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiManager::ShowHint(*rect) : sipCpp->ShowHint(*rect));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_ShowHint, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_StartPaneDrag, "StartPaneDrag(paneWindow, offset)\n"
"\n"
"Mostly used internally to define the drag action parameters.");

extern "C" {static PyObject *meth_wxAuiManager_StartPaneDrag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_StartPaneDrag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* paneWindow;
        const  ::wxPoint* offset;
        int offsetState = 0;
         ::wxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_paneWindow,
            sipName_offset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxWindow, &paneWindow, sipType_wxPoint, &offset, &offsetState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->StartPaneDrag(paneWindow,*offset);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(offset),sipType_wxPoint,offsetState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_StartPaneDrag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_UnInit, "UnInit()\n"
"\n"
"Dissociate the managed window from the manager.");

extern "C" {static PyObject *meth_wxAuiManager_UnInit(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_UnInit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManager, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->UnInit();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_UnInit, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_Update, "Update()\n"
"\n"
"This method is called after any number of changes are made to any of\n"
"the managed panes.");

extern "C" {static PyObject *meth_wxAuiManager_Update(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_Update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxAuiManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiManager, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Update();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_Update, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_AlwaysUsesLiveResize, "AlwaysUsesLiveResize() -> bool\n"
"\n"
"Returns true if live resize is always used on the current platform.");

extern "C" {static PyObject *meth_wxAuiManager_AlwaysUsesLiveResize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_AlwaysUsesLiveResize(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxAuiManager::AlwaysUsesLiveResize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_AlwaysUsesLiveResize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_GetManager, "GetManager(window) -> AuiManager\n"
"\n"
"Calling this method will return the wxAuiManager for a given window.");

extern "C" {static PyObject *meth_wxAuiManager_GetManager(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_GetManager(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* window;

        static const char *sipKwdList[] = {
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8", sipType_wxWindow, &window))
        {
             ::wxAuiManager*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxAuiManager::GetManager(window);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiManager,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_GetManager, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiManager_ProcessDockResult, "ProcessDockResult(target, new_pos) -> bool\n"
"\n"
"ProcessDockResult() is a protected member of the wxAUI layout manager.");

extern "C" {static PyObject *meth_wxAuiManager_ProcessDockResult(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiManager_ProcessDockResult(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiPaneInfo* target;
        const  ::wxAuiPaneInfo* new_pos;
        sipwxAuiManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_target,
            sipName_new_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9", &sipSelf, sipType_wxAuiManager, &sipCpp, sipType_wxAuiPaneInfo, &target, sipType_wxAuiPaneInfo, &new_pos))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessDockResult(sipSelfWasArg,*target,*new_pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiManager, sipName_ProcessDockResult, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxAuiManager(void *, const sipTypeDef *);}
static void *cast_wxAuiManager(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxAuiManager *sipCpp = reinterpret_cast< ::wxAuiManager *>(sipCppV);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxAuiManager(void *, int);}
static void release_wxAuiManager(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxAuiManager *>(sipCppV);
    else
        delete reinterpret_cast< ::wxAuiManager *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxAuiManager(Py_ssize_t);}
static void *array_wxAuiManager(Py_ssize_t sipNrElem)
{
    return new  ::wxAuiManager[sipNrElem];
}


extern "C" {static void dealloc_wxAuiManager(sipSimpleWrapper *);}
static void dealloc_wxAuiManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxAuiManager *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxAuiManager(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxAuiManager(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxAuiManager(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxAuiManager *sipCpp = SIP_NULLPTR;

    {
         ::wxWindow* managed_wnd = 0;
        uint flags = wxAUI_MGR_DEFAULT;

        static const char *sipKwdList[] = {
            sipName_managed_wnd,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8u", sipType_wxWindow, &managed_wnd, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiManager(managed_wnd,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxAuiManager[] = {{11, 0, 1}};


static PyMethodDef methods_wxAuiManager[] = {
    {SIP_MLNAME_CAST(sipName_AddPane), SIP_MLMETH_CAST(meth_wxAuiManager_AddPane), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_AddPane)},
    {SIP_MLNAME_CAST(sipName_AlwaysUsesLiveResize), meth_wxAuiManager_AlwaysUsesLiveResize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManager_AlwaysUsesLiveResize)},
    {SIP_MLNAME_CAST(sipName_CalculateHintRect), SIP_MLMETH_CAST(meth_wxAuiManager_CalculateHintRect), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_CalculateHintRect)},
    {SIP_MLNAME_CAST(sipName_CanDockPanel), SIP_MLMETH_CAST(meth_wxAuiManager_CanDockPanel), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_CanDockPanel)},
    {SIP_MLNAME_CAST(sipName_ClosePane), SIP_MLMETH_CAST(meth_wxAuiManager_ClosePane), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_ClosePane)},
    {SIP_MLNAME_CAST(sipName_CreateFloatingFrame), SIP_MLMETH_CAST(meth_wxAuiManager_CreateFloatingFrame), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_CreateFloatingFrame)},
    {SIP_MLNAME_CAST(sipName_DetachPane), SIP_MLMETH_CAST(meth_wxAuiManager_DetachPane), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_DetachPane)},
    {SIP_MLNAME_CAST(sipName_DrawHintRect), SIP_MLMETH_CAST(meth_wxAuiManager_DrawHintRect), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_DrawHintRect)},
    {SIP_MLNAME_CAST(sipName_GetAllPanes), meth_wxAuiManager_GetAllPanes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManager_GetAllPanes)},
    {SIP_MLNAME_CAST(sipName_GetArtProvider), meth_wxAuiManager_GetArtProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManager_GetArtProvider)},
    {SIP_MLNAME_CAST(sipName_GetDockSizeConstraint), SIP_MLMETH_CAST(meth_wxAuiManager_GetDockSizeConstraint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_GetDockSizeConstraint)},
    {SIP_MLNAME_CAST(sipName_GetFlags), meth_wxAuiManager_GetFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManager_GetFlags)},
    {SIP_MLNAME_CAST(sipName_GetManagedWindow), meth_wxAuiManager_GetManagedWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManager_GetManagedWindow)},
    {SIP_MLNAME_CAST(sipName_GetManager), SIP_MLMETH_CAST(meth_wxAuiManager_GetManager), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_GetManager)},
    {SIP_MLNAME_CAST(sipName_GetPane), SIP_MLMETH_CAST(meth_wxAuiManager_GetPane), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_GetPane)},
    {SIP_MLNAME_CAST(sipName_HasLiveResize), meth_wxAuiManager_HasLiveResize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManager_HasLiveResize)},
    {SIP_MLNAME_CAST(sipName_HideHint), meth_wxAuiManager_HideHint, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManager_HideHint)},
    {SIP_MLNAME_CAST(sipName_InsertPane), SIP_MLMETH_CAST(meth_wxAuiManager_InsertPane), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_InsertPane)},
    {SIP_MLNAME_CAST(sipName_LoadPaneInfo), SIP_MLMETH_CAST(meth_wxAuiManager_LoadPaneInfo), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_LoadPaneInfo)},
    {SIP_MLNAME_CAST(sipName_LoadPerspective), SIP_MLMETH_CAST(meth_wxAuiManager_LoadPerspective), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_LoadPerspective)},
    {SIP_MLNAME_CAST(sipName_MaximizePane), SIP_MLMETH_CAST(meth_wxAuiManager_MaximizePane), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_MaximizePane)},
    {SIP_MLNAME_CAST(sipName_ProcessDockResult), SIP_MLMETH_CAST(meth_wxAuiManager_ProcessDockResult), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_ProcessDockResult)},
    {SIP_MLNAME_CAST(sipName_RestoreMaximizedPane), meth_wxAuiManager_RestoreMaximizedPane, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManager_RestoreMaximizedPane)},
    {SIP_MLNAME_CAST(sipName_RestorePane), SIP_MLMETH_CAST(meth_wxAuiManager_RestorePane), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_RestorePane)},
    {SIP_MLNAME_CAST(sipName_SavePaneInfo), SIP_MLMETH_CAST(meth_wxAuiManager_SavePaneInfo), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_SavePaneInfo)},
    {SIP_MLNAME_CAST(sipName_SavePerspective), meth_wxAuiManager_SavePerspective, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManager_SavePerspective)},
    {SIP_MLNAME_CAST(sipName_SetArtProvider), SIP_MLMETH_CAST(meth_wxAuiManager_SetArtProvider), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_SetArtProvider)},
    {SIP_MLNAME_CAST(sipName_SetDockSizeConstraint), SIP_MLMETH_CAST(meth_wxAuiManager_SetDockSizeConstraint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_SetDockSizeConstraint)},
    {SIP_MLNAME_CAST(sipName_SetFlags), SIP_MLMETH_CAST(meth_wxAuiManager_SetFlags), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_SetFlags)},
    {SIP_MLNAME_CAST(sipName_SetManagedWindow), SIP_MLMETH_CAST(meth_wxAuiManager_SetManagedWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_SetManagedWindow)},
    {SIP_MLNAME_CAST(sipName_ShowHint), SIP_MLMETH_CAST(meth_wxAuiManager_ShowHint), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_ShowHint)},
    {SIP_MLNAME_CAST(sipName_StartPaneDrag), SIP_MLMETH_CAST(meth_wxAuiManager_StartPaneDrag), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiManager_StartPaneDrag)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth_wxAuiManager_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth_wxAuiManager_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_UnInit), meth_wxAuiManager_UnInit, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManager_UnInit)},
    {SIP_MLNAME_CAST(sipName_Update), meth_wxAuiManager_Update, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiManager_Update)}
};

sipVariableDef variables_wxAuiManager[] = {
    {PropertyVariable, sipName_ManagedWindow, &methods_wxAuiManager[12], &methods_wxAuiManager[29], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Flags, &methods_wxAuiManager[11], &methods_wxAuiManager[28], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ArtProvider, &methods_wxAuiManager[9], &methods_wxAuiManager[26], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_AllPanes, &methods_wxAuiManager[8], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxAuiManager, "AuiManager(managed_wnd=None, flags=AUI_MGR_DEFAULT)\n"
"\n"
"wxAuiManager is the central class of the wxAUI class framework.");


sipClassTypeDef sipTypeDef__aui_wxAuiManager = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxAuiManager,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_AuiManager,
        {0, 0, 1},
        36, methods_wxAuiManager,
        0, SIP_NULLPTR,
        4, variables_wxAuiManager,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxAuiManager,
    -1,
    -1,
    supers_wxAuiManager,
    SIP_NULLPTR,
    init_type_wxAuiManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxAuiManager,
    SIP_NULLPTR,
    array_wxAuiManager,
    SIP_NULLPTR,
    release_wxAuiManager,
    cast_wxAuiManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
