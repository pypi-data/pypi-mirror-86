/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_dataview.h"

        #include <wx/dataview.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/validate.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/dataview.h>
        #include <wx/icon.h>
        #include <wx/imaglist.h>
        #include <wx/dataview.h>
        #include <wx/itemattr.h>
        #include <wx/dataview.h>
        #include <wx/colour.h>
        #include <wx/dataview.h>
        #include <wx/gdicmn.h>
        #include <wx/dataobj.h>
        #include <wx/bitmap.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxDataViewTreeCtrl : public  ::wxDataViewTreeCtrl
{
public:
    sipwxDataViewTreeCtrl();
    sipwxDataViewTreeCtrl( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxValidator&);
    virtual ~sipwxDataViewTreeCtrl();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
     ::wxSize DoGetBorderSize() const SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxDataViewTreeCtrl(const sipwxDataViewTreeCtrl &);
    sipwxDataViewTreeCtrl &operator = (const sipwxDataViewTreeCtrl &);

    char sipPyMethods[40];
};

sipwxDataViewTreeCtrl::sipwxDataViewTreeCtrl():  ::wxDataViewTreeCtrl(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDataViewTreeCtrl::sipwxDataViewTreeCtrl( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxValidator& validator):  ::wxDataViewTreeCtrl(parent,id,pos,size,style,validator), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDataViewTreeCtrl::~sipwxDataViewTreeCtrl()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxDataViewTreeCtrl::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::RemoveChild(child);
        return;
    }

    extern void sipVH__dataview_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__dataview_44(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxDataViewTreeCtrl::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::AddChild(child);
        return;
    }

    extern void sipVH__dataview_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__dataview_44(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sipwxDataViewTreeCtrl::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::ProcessEvent(event);

    extern bool sipVH__dataview_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__dataview_45(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxDataViewTreeCtrl::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::TryBefore(event);

    extern bool sipVH__dataview_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__dataview_45(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxDataViewTreeCtrl::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::TryAfter(event);

    extern bool sipVH__dataview_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__dataview_45(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxDataViewTreeCtrl::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::AcceptsFocus();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewTreeCtrl::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::AcceptsFocusFromKeyboard();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewTreeCtrl::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::AcceptsFocusRecursively();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewTreeCtrl::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__dataview_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__dataview_37(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

void sipwxDataViewTreeCtrl::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__dataview_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__dataview_37(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

bool sipwxDataViewTreeCtrl::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__dataview_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__dataview_46(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

 ::wxPoint sipwxDataViewTreeCtrl::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__dataview_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_47(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewTreeCtrl::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::HasTransparentBackground();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewTreeCtrl::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::ShouldInheritColours();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxValidator* sipwxDataViewTreeCtrl::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::GetValidator();

    extern  ::wxValidator* sipVH__dataview_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_48(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewTreeCtrl::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::SetValidator(validator);
        return;
    }

    extern void sipVH__dataview_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__dataview_49(sipGILState, 0, sipPySelf, sipMeth, validator);
}

bool sipwxDataViewTreeCtrl::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::TransferDataFromWindow();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewTreeCtrl::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::TransferDataToWindow();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewTreeCtrl::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::Validate();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewTreeCtrl::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_Destroy);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::Destroy();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewTreeCtrl::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::InheritAttributes();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewTreeCtrl::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::InitDialog();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewTreeCtrl::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::OnInternalIdle();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sipwxDataViewTreeCtrl::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__dataview_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_50(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewTreeCtrl::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::DoEnable(enable);
        return;
    }

    extern void sipVH__dataview_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__dataview_37(sipGILState, 0, sipPySelf, sipMeth, enable);
}

void sipwxDataViewTreeCtrl::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__dataview_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__dataview_51(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxDataViewTreeCtrl::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,SIP_NULLPTR,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::DoGetSize(width,height);
        return;
    }

    extern void sipVH__dataview_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__dataview_51(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxDataViewTreeCtrl::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__dataview_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__dataview_51(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxDataViewTreeCtrl::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__dataview_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__dataview_52(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxDataViewTreeCtrl::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__dataview_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__dataview_53(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxDataViewTreeCtrl::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__dataview_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__dataview_54(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

 ::wxSize sipwxDataViewTreeCtrl::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,SIP_NULLPTR,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::DoGetBorderSize();

    extern  ::wxSize sipVH__dataview_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_32(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewTreeCtrl::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__dataview_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__dataview_55(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sipwxDataViewTreeCtrl::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__dataview_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__dataview_56(sipGILState, 0, sipPySelf, sipMeth, variant);
}

 ::wxBorder sipwxDataViewTreeCtrl::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::GetDefaultBorder();

    extern  ::wxBorder sipVH__dataview_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_57(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxDataViewTreeCtrl::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__dataview_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_57(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewTreeCtrl::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::DoFreeze();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewTreeCtrl::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxDataViewTreeCtrl::DoThaw();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxDataViewTreeCtrl::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::DoGetBestSize();

    extern  ::wxSize sipVH__dataview_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_32(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxDataViewTreeCtrl::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxDataViewTreeCtrl::DoGetBestClientSize();

    extern  ::wxSize sipVH__dataview_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_32(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewTreeCtrl::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxDataViewTreeCtrl::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxDataViewTreeCtrl::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxDataViewTreeCtrl::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoEnable(enable) : DoEnable(enable));
}

void sipwxDataViewTreeCtrl::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxDataViewTreeCtrl::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxDataViewTreeCtrl::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxDataViewTreeCtrl::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxDataViewTreeCtrl::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxDataViewTreeCtrl::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxDataViewTreeCtrl::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxDataViewTreeCtrl::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxDataViewTreeCtrl::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxDataViewTreeCtrl::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxDataViewTreeCtrl::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxDataViewTreeCtrl::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewTreeCtrl::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxDataViewTreeCtrl::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewTreeCtrl::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxDataViewTreeCtrl::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoFreeze() : DoFreeze());
}

void sipwxDataViewTreeCtrl::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxDataViewTreeCtrl::DoThaw() : DoThaw());
}

bool sipwxDataViewTreeCtrl::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxDataViewTreeCtrl::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxDataViewTreeCtrl::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxDataViewTreeCtrl::TryBefore(event) : TryBefore(event));
}

bool sipwxDataViewTreeCtrl::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxDataViewTreeCtrl::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetStore, "GetStore() -> DataViewTreeStore\n"
"\n"
"Returns the store.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetStore(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetStore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
             ::wxDataViewTreeStore*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetStore();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewTreeStore,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetStore, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_AppendContainer, "AppendContainer(parent, text, icon=-1, expanded=-1, data=None) -> DataViewItem\n"
"\n"
"Appends a container to the given parent.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_AppendContainer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_AppendContainer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* parent;
        const  ::wxString* text;
        int textState = 0;
        int icon = -1;
        int expanded = -1;
         ::wxClientData* data = 0;
        int dataState = 0;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_text,
            sipName_icon,
            sipName_expanded,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|iiJ2", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &parent, sipType_wxString,&text, &textState, &icon, &expanded, sipType_wxClientData,&data, &dataState))
        {
             ::wxDataViewItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataViewItem(sipCpp->AppendContainer(*parent,*text,icon,expanded,data));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);
            sipReleaseType(data,sipType_wxClientData,dataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataViewItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_AppendContainer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_AppendItem, "AppendItem(parent, text, icon=-1, data=None) -> DataViewItem\n"
"\n"
"Appends an item to the given parent.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_AppendItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_AppendItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* parent;
        const  ::wxString* text;
        int textState = 0;
        int icon = -1;
         ::wxClientData* data = 0;
        int dataState = 0;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_text,
            sipName_icon,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|iJ2", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &parent, sipType_wxString,&text, &textState, &icon, sipType_wxClientData,&data, &dataState))
        {
             ::wxDataViewItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataViewItem(sipCpp->AppendItem(*parent,*text,icon,data));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);
            sipReleaseType(data,sipType_wxClientData,dataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataViewItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_AppendItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_Create, "Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=DV_NO_HEADER|DV_ROW_LINES, validator=wx.DefaultValidator) -> bool\n"
"\n"
"Creates the control and a wxDataViewTreeStore as its internal model.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxDV_NO_HEADER|wxDV_ROW_LINES;
        const  ::wxValidator& validatordef = wxDefaultValidator;
        const  ::wxValidator* validator = &validatordef;
        sipWrapper *sipOwner = SIP_NULLPTR;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|iJ1J1lJ9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxValidator, &validator))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*pos,*size,style,*validator);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DeleteAllItems, "DeleteAllItems()\n"
"\n"
"Calls the identical method from wxDataViewTreeStore.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DeleteAllItems(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DeleteAllItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DeleteAllItems();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DeleteAllItems, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DeleteChildren, "DeleteChildren(item)\n"
"\n"
"Calls the identical method from wxDataViewTreeStore.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DeleteChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DeleteChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* item;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DeleteChildren(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DeleteChildren, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DeleteItem, "DeleteItem(item)\n"
"\n"
"Calls the identical method from wxDataViewTreeStore.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DeleteItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DeleteItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* item;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DeleteItem(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DeleteItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetChildCount, "GetChildCount(parent) -> int\n"
"\n"
"Calls the identical method from wxDataViewTreeStore.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetChildCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetChildCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* parent;
        const  ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &parent))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetChildCount(*parent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetChildCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetImageList, "GetImageList() -> wx.ImageList\n"
"\n"
"Returns the image list.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetImageList(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetImageList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
             ::wxImageList*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetImageList();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxImageList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetImageList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetItemData, "GetItemData(item) -> ClientData\n"
"\n"
"Calls the identical method from wxDataViewTreeStore.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetItemData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetItemData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
             ::wxClientData*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetItemData(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxClientData,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetItemData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetItemExpandedIcon, "GetItemExpandedIcon(item) -> wx.Icon\n"
"\n"
"Calls the identical method from wxDataViewTreeStore.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetItemExpandedIcon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetItemExpandedIcon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
             ::wxIcon*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxIcon(sipCpp->GetItemExpandedIcon(*item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxIcon,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetItemExpandedIcon, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetItemIcon, "GetItemIcon(item) -> wx.Icon\n"
"\n"
"Calls the identical method from wxDataViewTreeStore.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetItemIcon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetItemIcon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
             ::wxIcon*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxIcon(sipCpp->GetItemIcon(*item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxIcon,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetItemIcon, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetItemText, "GetItemText(item) -> String\n"
"\n"
"Calls the identical method from wxDataViewTreeStore.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetItemText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetItemText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetItemText(*item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetItemText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetNthChild, "GetNthChild(parent, pos) -> DataViewItem\n"
"\n"
"Calls the identical method from wxDataViewTreeStore.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetNthChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetNthChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* parent;
        uint pos;
        const  ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9u", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &parent, &pos))
        {
             ::wxDataViewItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataViewItem(sipCpp->GetNthChild(*parent,pos));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataViewItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetNthChild, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_InsertContainer, "InsertContainer(parent, previous, text, icon=-1, expanded=-1, data=None) -> DataViewItem\n"
"\n"
"Calls the same method from wxDataViewTreeStore but uses an index\n"
"position in the image list instead of a wxIcon.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_InsertContainer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_InsertContainer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* parent;
        const  ::wxDataViewItem* previous;
        const  ::wxString* text;
        int textState = 0;
        int icon = -1;
        int expanded = -1;
         ::wxClientData* data = 0;
        int dataState = 0;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_previous,
            sipName_text,
            sipName_icon,
            sipName_expanded,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J1|iiJ2", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &parent, sipType_wxDataViewItem, &previous, sipType_wxString,&text, &textState, &icon, &expanded, sipType_wxClientData,&data, &dataState))
        {
             ::wxDataViewItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataViewItem(sipCpp->InsertContainer(*parent,*previous,*text,icon,expanded,data));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);
            sipReleaseType(data,sipType_wxClientData,dataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataViewItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_InsertContainer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_InsertItem, "InsertItem(parent, previous, text, icon=-1, data=None) -> DataViewItem\n"
"\n"
"Calls the same method from wxDataViewTreeStore but uses an index\n"
"position in the image list instead of a wxIcon.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_InsertItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_InsertItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* parent;
        const  ::wxDataViewItem* previous;
        const  ::wxString* text;
        int textState = 0;
        int icon = -1;
         ::wxClientData* data = 0;
        int dataState = 0;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_previous,
            sipName_text,
            sipName_icon,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J1|iJ2", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &parent, sipType_wxDataViewItem, &previous, sipType_wxString,&text, &textState, &icon, sipType_wxClientData,&data, &dataState))
        {
             ::wxDataViewItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataViewItem(sipCpp->InsertItem(*parent,*previous,*text,icon,data));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);
            sipReleaseType(data,sipType_wxClientData,dataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataViewItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_InsertItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_IsContainer, "IsContainer(item) -> bool\n"
"\n"
"Returns true if item is a container.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_IsContainer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_IsContainer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* item;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsContainer(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_IsContainer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_PrependContainer, "PrependContainer(parent, text, icon=-1, expanded=-1, data=None) -> DataViewItem\n"
"\n"
"Calls the same method from wxDataViewTreeStore but uses an index\n"
"position in the image list instead of a wxIcon.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_PrependContainer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_PrependContainer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* parent;
        const  ::wxString* text;
        int textState = 0;
        int icon = -1;
        int expanded = -1;
         ::wxClientData* data = 0;
        int dataState = 0;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_text,
            sipName_icon,
            sipName_expanded,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|iiJ2", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &parent, sipType_wxString,&text, &textState, &icon, &expanded, sipType_wxClientData,&data, &dataState))
        {
             ::wxDataViewItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataViewItem(sipCpp->PrependContainer(*parent,*text,icon,expanded,data));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);
            sipReleaseType(data,sipType_wxClientData,dataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataViewItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_PrependContainer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_PrependItem, "PrependItem(parent, text, icon=-1, data=None) -> DataViewItem\n"
"\n"
"Calls the same method from wxDataViewTreeStore but uses an index\n"
"position in the image list instead of a wxIcon.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_PrependItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_PrependItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* parent;
        const  ::wxString* text;
        int textState = 0;
        int icon = -1;
         ::wxClientData* data = 0;
        int dataState = 0;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_text,
            sipName_icon,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|iJ2", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &parent, sipType_wxString,&text, &textState, &icon, sipType_wxClientData,&data, &dataState))
        {
             ::wxDataViewItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataViewItem(sipCpp->PrependItem(*parent,*text,icon,data));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);
            sipReleaseType(data,sipType_wxClientData,dataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataViewItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_PrependItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_SetImageList, "SetImageList(imagelist)\n"
"\n"
"Sets the image list.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_SetImageList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_SetImageList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxImageList* imagelist;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_imagelist,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxImageList, &imagelist))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetImageList(imagelist);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_SetImageList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_SetItemData, "SetItemData(item, data)\n"
"\n"
"Calls the identical method from wxDataViewTreeStore.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_SetItemData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_SetItemData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* item;
         ::wxClientData* data;
        int dataState = 0;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J2", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &item, sipType_wxClientData,&data, &dataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemData(*item,data);
            Py_END_ALLOW_THREADS
            sipReleaseType(data,sipType_wxClientData,dataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_SetItemData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_SetItemExpandedIcon, "SetItemExpandedIcon(item, icon)\n"
"\n"
"Calls the identical method from wxDataViewTreeStore.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_SetItemExpandedIcon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_SetItemExpandedIcon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* item;
        const  ::wxIcon* icon;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_icon,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &item, sipType_wxIcon, &icon))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemExpandedIcon(*item,*icon);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_SetItemExpandedIcon, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_SetItemIcon, "SetItemIcon(item, icon)\n"
"\n"
"Calls the identical method from wxDataViewTreeStore.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_SetItemIcon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_SetItemIcon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* item;
        const  ::wxIcon* icon;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_icon,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &item, sipType_wxIcon, &icon))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemIcon(*item,*icon);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_SetItemIcon, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_SetItemText, "SetItemText(item, text)\n"
"\n"
"Calls the identical method from wxDataViewTreeStore.");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_SetItemText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_SetItemText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxDataViewItem* item;
        const  ::wxString* text;
        int textState = 0;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxDataViewItem, &item, sipType_wxString,&text, &textState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemText(*item,*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_SetItemText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetClientAreaOrigin, doc_wxDataViewTreeCtrl_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_Validate, doc_wxDataViewTreeCtrl_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_TransferDataToWindow, doc_wxDataViewTreeCtrl_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_TransferDataFromWindow, doc_wxDataViewTreeCtrl_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_InitDialog, doc_wxDataViewTreeCtrl_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_AcceptsFocus, doc_wxDataViewTreeCtrl_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_AcceptsFocusRecursively, doc_wxDataViewTreeCtrl_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_AcceptsFocusFromKeyboard, doc_wxDataViewTreeCtrl_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_AddChild, doc_wxDataViewTreeCtrl_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_RemoveChild, doc_wxDataViewTreeCtrl_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_InheritAttributes, doc_wxDataViewTreeCtrl_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_ShouldInheritColours, doc_wxDataViewTreeCtrl_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_OnInternalIdle, doc_wxDataViewTreeCtrl_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetMainWindowOfCompositeControl, doc_wxDataViewTreeCtrl_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_InformFirstDirection, doc_wxDataViewTreeCtrl_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_SetCanFocus, doc_wxDataViewTreeCtrl_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_Destroy, doc_wxDataViewTreeCtrl_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_SetValidator, doc_wxDataViewTreeCtrl_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetValidator, doc_wxDataViewTreeCtrl_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
         ::wxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewTreeCtrl::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_EnableVisibleFocus, doc_wxDataViewTreeCtrl_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_ProcessEvent, doc_wxDataViewTreeCtrl_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoEnable, doc_wxDataViewTreeCtrl_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxDataViewTreeCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoGetPosition, doc_wxDataViewTreeCtrl_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxDataViewTreeCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoGetSize, doc_wxDataViewTreeCtrl_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxDataViewTreeCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoGetClientSize, doc_wxDataViewTreeCtrl_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoGetBestSize, doc_wxDataViewTreeCtrl_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoGetBestClientSize, doc_wxDataViewTreeCtrl_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoSetSize, doc_wxDataViewTreeCtrl_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoSetClientSize, doc_wxDataViewTreeCtrl_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoSetSizeHints, doc_wxDataViewTreeCtrl_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoGetBorderSize(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoGetBorderSize, doc_wxDataViewTreeCtrl_DoGetBorderSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoMoveWindow, doc_wxDataViewTreeCtrl_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoSetWindowVariant, doc_wxDataViewTreeCtrl_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetDefaultBorder, doc_wxDataViewTreeCtrl_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetDefaultBorderForControl, doc_wxDataViewTreeCtrl_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoFreeze, doc_wxDataViewTreeCtrl_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_DoThaw, doc_wxDataViewTreeCtrl_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxDataViewTreeCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_HasTransparentBackground, doc_wxDataViewTreeCtrl_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_TryBefore, doc_wxDataViewTreeCtrl_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxDataViewTreeCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxDataViewTreeCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_TryAfter, doc_wxDataViewTreeCtrl_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxDataViewTreeCtrl_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes");

extern "C" {static PyObject *meth_wxDataViewTreeCtrl_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewTreeCtrl_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxDataViewTreeCtrl::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_DataViewTreeCtrl, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxDataViewTreeCtrl(void *, const sipTypeDef *);}
static void *cast_wxDataViewTreeCtrl(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxDataViewTreeCtrl *sipCpp = reinterpret_cast< ::wxDataViewTreeCtrl *>(sipCppV);

    if (targetType == sipType_wxDataViewCtrl)
        return static_cast< ::wxDataViewCtrl *>(sipCpp);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxDataViewTreeCtrl(void *, int);}
static void release_wxDataViewTreeCtrl(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxDataViewTreeCtrl *>(sipCppV);
    else
        delete reinterpret_cast< ::wxDataViewTreeCtrl *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxDataViewTreeCtrl(Py_ssize_t);}
static void *array_wxDataViewTreeCtrl(Py_ssize_t sipNrElem)
{
    return new  ::wxDataViewTreeCtrl[sipNrElem];
}


extern "C" {static void dealloc_wxDataViewTreeCtrl(sipSimpleWrapper *);}
static void dealloc_wxDataViewTreeCtrl(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxDataViewTreeCtrl *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxDataViewTreeCtrl(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxDataViewTreeCtrl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxDataViewTreeCtrl(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxDataViewTreeCtrl *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxDataViewTreeCtrl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxDV_NO_HEADER|wxDV_ROW_LINES;
        const  ::wxValidator& validatordef = wxDefaultValidator;
        const  ::wxValidator* validator = &validatordef;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_validator,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1lJ9", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxValidator, &validator))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxDataViewTreeCtrl(parent,id,*pos,*size,style,*validator);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxDataViewTreeCtrl[] = {{8, 255, 1}};


static PyMethodDef methods_wxDataViewTreeCtrl[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxDataViewTreeCtrl_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxDataViewTreeCtrl_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxDataViewTreeCtrl_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_AddChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_AddChild)},
    {SIP_MLNAME_CAST(sipName_AppendContainer), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_AppendContainer), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_AppendContainer)},
    {SIP_MLNAME_CAST(sipName_AppendItem), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_AppendItem), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_AppendItem)},
    {SIP_MLNAME_CAST(sipName_Create), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_Create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_Create)},
    {SIP_MLNAME_CAST(sipName_DeleteAllItems), meth_wxDataViewTreeCtrl_DeleteAllItems, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DeleteAllItems)},
    {SIP_MLNAME_CAST(sipName_DeleteChildren), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_DeleteChildren), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DeleteChildren)},
    {SIP_MLNAME_CAST(sipName_DeleteItem), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_DeleteItem), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DeleteItem)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxDataViewTreeCtrl_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), meth_wxDataViewTreeCtrl_DoFreeze, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), meth_wxDataViewTreeCtrl_DoGetBestClientSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), meth_wxDataViewTreeCtrl_DoGetBestSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), meth_wxDataViewTreeCtrl_DoGetBorderSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), meth_wxDataViewTreeCtrl_DoThaw, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EnableVisibleFocus), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_EnableVisibleFocus)},
    {SIP_MLNAME_CAST(sipName_GetChildCount), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_GetChildCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetChildCount)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxDataViewTreeCtrl_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), meth_wxDataViewTreeCtrl_GetDefaultBorder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), meth_wxDataViewTreeCtrl_GetDefaultBorderForControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetImageList), meth_wxDataViewTreeCtrl_GetImageList, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetImageList)},
    {SIP_MLNAME_CAST(sipName_GetItemData), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_GetItemData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetItemData)},
    {SIP_MLNAME_CAST(sipName_GetItemExpandedIcon), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_GetItemExpandedIcon), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetItemExpandedIcon)},
    {SIP_MLNAME_CAST(sipName_GetItemIcon), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_GetItemIcon), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetItemIcon)},
    {SIP_MLNAME_CAST(sipName_GetItemText), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_GetItemText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetItemText)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxDataViewTreeCtrl_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetNthChild), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_GetNthChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetNthChild)},
    {SIP_MLNAME_CAST(sipName_GetStore), meth_wxDataViewTreeCtrl_GetStore, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetStore)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxDataViewTreeCtrl_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_GetValidator)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), meth_wxDataViewTreeCtrl_HasTransparentBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxDataViewTreeCtrl_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxDataViewTreeCtrl_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_InitDialog)},
    {SIP_MLNAME_CAST(sipName_InsertContainer), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_InsertContainer), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_InsertContainer)},
    {SIP_MLNAME_CAST(sipName_InsertItem), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_InsertItem), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_InsertItem)},
    {SIP_MLNAME_CAST(sipName_IsContainer), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_IsContainer), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_IsContainer)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxDataViewTreeCtrl_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_PrependContainer), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_PrependContainer), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_PrependContainer)},
    {SIP_MLNAME_CAST(sipName_PrependItem), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_PrependItem), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_PrependItem)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_RemoveChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), meth_wxDataViewTreeCtrl_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_SetCanFocus), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetImageList), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_SetImageList), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_SetImageList)},
    {SIP_MLNAME_CAST(sipName_SetItemData), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_SetItemData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_SetItemData)},
    {SIP_MLNAME_CAST(sipName_SetItemExpandedIcon), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_SetItemExpandedIcon), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_SetItemExpandedIcon)},
    {SIP_MLNAME_CAST(sipName_SetItemIcon), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_SetItemIcon), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_SetItemIcon)},
    {SIP_MLNAME_CAST(sipName_SetItemText), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_SetItemText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_SetItemText)},
    {SIP_MLNAME_CAST(sipName_SetValidator), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_SetValidator), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxDataViewTreeCtrl_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxDataViewTreeCtrl_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxDataViewTreeCtrl_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth_wxDataViewTreeCtrl_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxDataViewTreeCtrl_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewTreeCtrl_Validate)}
};

sipVariableDef variables_wxDataViewTreeCtrl[] = {
    {PropertyVariable, sipName_Store, &methods_wxDataViewTreeCtrl[38], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ImageList, &methods_wxDataViewTreeCtrl[31], &methods_wxDataViewTreeCtrl[54], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxDataViewTreeCtrl, "DataViewTreeCtrl()\n"
"DataViewTreeCtrl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=DV_NO_HEADER|DV_ROW_LINES, validator=wx.DefaultValidator)\n"
"\n"
"This class is a wxDataViewCtrl which internally uses a\n"
"wxDataViewTreeStore and forwards most of its API to that class.");


sipClassTypeDef sipTypeDef__dataview_wxDataViewTreeCtrl = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxDataViewTreeCtrl,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_DataViewTreeCtrl,
        {0, 0, 1},
        66, methods_wxDataViewTreeCtrl,
        0, SIP_NULLPTR,
        2, variables_wxDataViewTreeCtrl,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxDataViewTreeCtrl,
    -1,
    -1,
    supers_wxDataViewTreeCtrl,
    SIP_NULLPTR,
    init_type_wxDataViewTreeCtrl,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxDataViewTreeCtrl,
    SIP_NULLPTR,
    array_wxDataViewTreeCtrl,
    SIP_NULLPTR,
    release_wxDataViewTreeCtrl,
    cast_wxDataViewTreeCtrl,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
