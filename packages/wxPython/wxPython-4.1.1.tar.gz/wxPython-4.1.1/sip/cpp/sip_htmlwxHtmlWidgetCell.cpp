/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_html.h"

        #include <wx/html/htmlcell.h>

        #include <wx/window.h>
        #include <wx/cursor.h>
        #include <wx/html/htmlwin.h>
        #include <wx/dc.h>
        #include <wx/html/htmlcell.h>
        #include <wx/html/htmlcell.h>
        #include <wx/gdicmn.h>
        #include <wx/html/htmlcell.h>
        #include <wx/html/htmlcell.h>
        #include <wx/html/htmlcell.h>
        #include <wx/event.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxHtmlWidgetCell : public  ::wxHtmlWidgetCell
{
public:
    sipwxHtmlWidgetCell( ::wxWindow*,int);
    virtual ~sipwxHtmlWidgetCell();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool AdjustPagebreak(int*,int) const SIP_OVERRIDE;
    void Draw( ::wxDC&,int,int,int,int, ::wxHtmlRenderingInfo&) SIP_OVERRIDE;
    void DrawInvisible( ::wxDC&,int,int, ::wxHtmlRenderingInfo&) SIP_OVERRIDE;
    const  ::wxHtmlCell* Find(int,const void*) const SIP_OVERRIDE;
     ::wxHtmlCell* FindCellByPos( ::wxCoord, ::wxCoord,uint) const SIP_OVERRIDE;
     ::wxHtmlCell* GetFirstChild() const SIP_OVERRIDE;
     ::wxHtmlLinkInfo* GetLink(int,int) const SIP_OVERRIDE;
     ::wxCursor GetMouseCursor( ::wxHtmlWindowInterface*) const SIP_OVERRIDE;
     ::wxCursor GetMouseCursorAt( ::wxHtmlWindowInterface*,const  ::wxPoint&) const SIP_OVERRIDE;
    void Layout(int) SIP_OVERRIDE;
    bool ProcessMouseClick( ::wxHtmlWindowInterface*,const  ::wxPoint&,const  ::wxMouseEvent&) SIP_OVERRIDE;
    void SetPos(int,int) SIP_OVERRIDE;
     ::wxString ConvertToText( ::wxHtmlSelection*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxHtmlWidgetCell(const sipwxHtmlWidgetCell &);
    sipwxHtmlWidgetCell &operator = (const sipwxHtmlWidgetCell &);

    char sipPyMethods[13];
};

sipwxHtmlWidgetCell::sipwxHtmlWidgetCell( ::wxWindow*wnd,int w):  ::wxHtmlWidgetCell(wnd,w), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHtmlWidgetCell::~sipwxHtmlWidgetCell()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxHtmlWidgetCell::AdjustPagebreak(int*pagebreak,int pageHeight) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_AdjustPagebreak);

    if (!sipMeth)
        return  ::wxHtmlWidgetCell::AdjustPagebreak(pagebreak,pageHeight);

    extern bool sipVH__html_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int);

    return sipVH__html_1(sipGILState, 0, sipPySelf, sipMeth, pagebreak, pageHeight);
}

void sipwxHtmlWidgetCell::Draw( ::wxDC& dc,int x,int y,int view_y1,int view_y2, ::wxHtmlRenderingInfo& info)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_Draw);

    if (!sipMeth)
    {
         ::wxHtmlWidgetCell::Draw(dc,x,y,view_y1,view_y2,info);
        return;
    }

    extern void sipVH__html_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&,int,int,int,int, ::wxHtmlRenderingInfo&);

    sipVH__html_2(sipGILState, 0, sipPySelf, sipMeth, dc, x, y, view_y1, view_y2, info);
}

void sipwxHtmlWidgetCell::DrawInvisible( ::wxDC& dc,int x,int y, ::wxHtmlRenderingInfo& info)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_DrawInvisible);

    if (!sipMeth)
    {
         ::wxHtmlWidgetCell::DrawInvisible(dc,x,y,info);
        return;
    }

    extern void sipVH__html_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&,int,int, ::wxHtmlRenderingInfo&);

    sipVH__html_3(sipGILState, 0, sipPySelf, sipMeth, dc, x, y, info);
}

const  ::wxHtmlCell* sipwxHtmlWidgetCell::Find(int condition,const void*param) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_Find);

    if (!sipMeth)
        return  ::wxHtmlWidgetCell::Find(condition,param);

    extern const  ::wxHtmlCell* sipVH__html_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const void*);

    return sipVH__html_4(sipGILState, 0, sipPySelf, sipMeth, condition, param);
}

 ::wxHtmlCell* sipwxHtmlWidgetCell::FindCellByPos( ::wxCoord x, ::wxCoord y,uint flags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_FindCellByPos);

    if (!sipMeth)
        return  ::wxHtmlWidgetCell::FindCellByPos(x,y,flags);

    extern  ::wxHtmlCell* sipVH__html_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxCoord, ::wxCoord,uint);

    return sipVH__html_5(sipGILState, 0, sipPySelf, sipMeth, x, y, flags);
}

 ::wxHtmlCell* sipwxHtmlWidgetCell::GetFirstChild() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_GetFirstChild);

    if (!sipMeth)
        return  ::wxHtmlWidgetCell::GetFirstChild();

    extern  ::wxHtmlCell* sipVH__html_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_6(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxHtmlLinkInfo* sipwxHtmlWidgetCell::GetLink(int x,int y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_GetLink);

    if (!sipMeth)
        return  ::wxHtmlWidgetCell::GetLink(x,y);

    extern  ::wxHtmlLinkInfo* sipVH__html_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__html_7(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

 ::wxCursor sipwxHtmlWidgetCell::GetMouseCursor( ::wxHtmlWindowInterface*window) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_GetMouseCursor);

    if (!sipMeth)
        return  ::wxHtmlWidgetCell::GetMouseCursor(window);

    extern  ::wxCursor sipVH__html_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlWindowInterface*);

    return sipVH__html_8(sipGILState, 0, sipPySelf, sipMeth, window);
}

 ::wxCursor sipwxHtmlWidgetCell::GetMouseCursorAt( ::wxHtmlWindowInterface*window,const  ::wxPoint& rePos) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_GetMouseCursorAt);

    if (!sipMeth)
        return  ::wxHtmlWidgetCell::GetMouseCursorAt(window,rePos);

    extern  ::wxCursor sipVH__html_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlWindowInterface*,const  ::wxPoint&);

    return sipVH__html_9(sipGILState, 0, sipPySelf, sipMeth, window, rePos);
}

void sipwxHtmlWidgetCell::Layout(int w)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_Layout);

    if (!sipMeth)
    {
         ::wxHtmlWidgetCell::Layout(w);
        return;
    }

    extern void sipVH__html_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__html_10(sipGILState, 0, sipPySelf, sipMeth, w);
}

bool sipwxHtmlWidgetCell::ProcessMouseClick( ::wxHtmlWindowInterface*window,const  ::wxPoint& pos,const  ::wxMouseEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_ProcessMouseClick);

    if (!sipMeth)
        return  ::wxHtmlWidgetCell::ProcessMouseClick(window,pos,event);

    extern bool sipVH__html_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlWindowInterface*,const  ::wxPoint&,const  ::wxMouseEvent&);

    return sipVH__html_11(sipGILState, 0, sipPySelf, sipMeth, window, pos, event);
}

void sipwxHtmlWidgetCell::SetPos(int x,int y)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_SetPos);

    if (!sipMeth)
    {
         ::wxHtmlWidgetCell::SetPos(x,y);
        return;
    }

    extern void sipVH__html_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__html_12(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

 ::wxString sipwxHtmlWidgetCell::ConvertToText( ::wxHtmlSelection*sel) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_ConvertToText);

    if (!sipMeth)
        return  ::wxHtmlWidgetCell::ConvertToText(sel);

    extern  ::wxString sipVH__html_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlSelection*);

    return sipVH__html_13(sipGILState, 0, sipPySelf, sipMeth, sel);
}


PyDoc_STRVAR(doc_wxHtmlWidgetCell_Draw, "Draw(self, dc: DC, x: int, y: int, view_y1: int, view_y2: int, info: HtmlRenderingInfo)");

extern "C" {static PyObject *meth_wxHtmlWidgetCell_Draw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWidgetCell_Draw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
        int x;
        int y;
        int view_y1;
        int view_y2;
         ::wxHtmlRenderingInfo* info;
         ::wxHtmlWidgetCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_x,
            sipName_y,
            sipName_view_y1,
            sipName_view_y2,
            sipName_info,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iiiiJ9", &sipSelf, sipType_wxHtmlWidgetCell, &sipCpp, sipType_wxDC, &dc, &x, &y, &view_y1, &view_y2, sipType_wxHtmlRenderingInfo, &info))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWidgetCell::Draw(*dc,x,y,view_y1,view_y2,*info) : sipCpp->Draw(*dc,x,y,view_y1,view_y2,*info));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlWidgetCell, sipName_Draw, doc_wxHtmlWidgetCell_Draw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlWidgetCell_DrawInvisible, "DrawInvisible(self, dc: DC, x: int, y: int, info: HtmlRenderingInfo)");

extern "C" {static PyObject *meth_wxHtmlWidgetCell_DrawInvisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWidgetCell_DrawInvisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
        int x;
        int y;
         ::wxHtmlRenderingInfo* info;
         ::wxHtmlWidgetCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_x,
            sipName_y,
            sipName_info,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iiJ9", &sipSelf, sipType_wxHtmlWidgetCell, &sipCpp, sipType_wxDC, &dc, &x, &y, sipType_wxHtmlRenderingInfo, &info))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWidgetCell::DrawInvisible(*dc,x,y,*info) : sipCpp->DrawInvisible(*dc,x,y,*info));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlWidgetCell, sipName_DrawInvisible, doc_wxHtmlWidgetCell_DrawInvisible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlWidgetCell_GetMouseCursor, "GetMouseCursor(self, window: HtmlWindowInterface) -> Cursor");

extern "C" {static PyObject *meth_wxHtmlWidgetCell_GetMouseCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWidgetCell_GetMouseCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWindowInterface* window;
        const  ::wxHtmlWidgetCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxHtmlWidgetCell, &sipCpp, sipType_wxHtmlWindowInterface, &window))
        {
             ::wxCursor*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxCursor((sipSelfWasArg ? sipCpp-> ::wxHtmlWidgetCell::GetMouseCursor(window) : sipCpp->GetMouseCursor(window)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxCursor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlWidgetCell, sipName_GetMouseCursor, doc_wxHtmlWidgetCell_GetMouseCursor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxHtmlWidgetCell_Layout, "Layout(self, w: int)");

extern "C" {static PyObject *meth_wxHtmlWidgetCell_Layout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWidgetCell_Layout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int w;
         ::wxHtmlWidgetCell *sipCpp;

        static const char *sipKwdList[] = {
            sipName_w,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxHtmlWidgetCell, &sipCpp, &w))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWidgetCell::Layout(w) : sipCpp->Layout(w));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_HtmlWidgetCell, sipName_Layout, doc_wxHtmlWidgetCell_Layout);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxHtmlWidgetCell(void *, const sipTypeDef *);}
static void *cast_wxHtmlWidgetCell(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxHtmlWidgetCell *sipCpp = reinterpret_cast< ::wxHtmlWidgetCell *>(sipCppV);

    if (targetType == sipType_wxHtmlCell)
        return static_cast< ::wxHtmlCell *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxHtmlWidgetCell(void *, int);}
static void release_wxHtmlWidgetCell(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxHtmlWidgetCell *>(sipCppV);
    else
        delete reinterpret_cast< ::wxHtmlWidgetCell *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxHtmlWidgetCell(sipSimpleWrapper *);}
static void dealloc_wxHtmlWidgetCell(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxHtmlWidgetCell *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxHtmlWidgetCell(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxHtmlWidgetCell(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxHtmlWidgetCell(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxHtmlWidgetCell *sipCpp = SIP_NULLPTR;

    {
         ::wxWindow* wnd;
        int w = 0;

        static const char *sipKwdList[] = {
            sipName_wnd,
            sipName_w,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|i", sipType_wxWindow, &wnd, &w))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHtmlWidgetCell(wnd,w);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxHtmlWidgetCell[] = {{2, 255, 1}};


static PyMethodDef methods_wxHtmlWidgetCell[] = {
    {SIP_MLNAME_CAST(sipName_Draw), SIP_MLMETH_CAST(meth_wxHtmlWidgetCell_Draw), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWidgetCell_Draw)},
    {SIP_MLNAME_CAST(sipName_DrawInvisible), SIP_MLMETH_CAST(meth_wxHtmlWidgetCell_DrawInvisible), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWidgetCell_DrawInvisible)},
    {SIP_MLNAME_CAST(sipName_GetMouseCursor), SIP_MLMETH_CAST(meth_wxHtmlWidgetCell_GetMouseCursor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWidgetCell_GetMouseCursor)},
    {SIP_MLNAME_CAST(sipName_Layout), SIP_MLMETH_CAST(meth_wxHtmlWidgetCell_Layout), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWidgetCell_Layout)}
};

PyDoc_STRVAR(doc_wxHtmlWidgetCell, "HtmlWidgetCell(wnd, w=0)\n"
"\n"
"wxHtmlWidgetCell is a class that provides a connection between HTML\n"
"cells and widgets (an object derived from wxWindow).");


sipClassTypeDef sipTypeDef__html_wxHtmlWidgetCell = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxHtmlWidgetCell,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_HtmlWidgetCell,
        {0, 0, 1},
        4, methods_wxHtmlWidgetCell,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxHtmlWidgetCell,
    -1,
    -1,
    supers_wxHtmlWidgetCell,
    SIP_NULLPTR,
    init_type_wxHtmlWidgetCell,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxHtmlWidgetCell,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxHtmlWidgetCell,
    cast_wxHtmlWidgetCell,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
