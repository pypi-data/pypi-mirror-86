/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include "pyevent.h"

        #include <wx/event.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
        IMPLEMENT_DYNAMIC_CLASS(wxPyEvent, wxEvent);


class sipwxPyEvent : public  ::wxPyEvent
{
public:
    sipwxPyEvent(int, ::wxEventType);
    sipwxPyEvent(const  ::wxPyEvent&);
    virtual ~sipwxPyEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEvent* Clone() const SIP_OVERRIDE;
     ::wxEventCategory GetEventCategory() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxPyEvent(const sipwxPyEvent &);
    sipwxPyEvent &operator = (const sipwxPyEvent &);

    char sipPyMethods[2];
};

sipwxPyEvent::sipwxPyEvent(int id, ::wxEventType eventType):  ::wxPyEvent(id,eventType), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPyEvent::sipwxPyEvent(const  ::wxPyEvent& a0):  ::wxPyEvent(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPyEvent::~sipwxPyEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEvent* sipwxPyEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_Clone);

    if (!sipMeth)
        return  ::wxPyEvent::Clone();

    extern  ::wxEvent* sipVH__core_98(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_98(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEventCategory sipwxPyEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxPyEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__core_99(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_99(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxPyEvent___getattr__, "__getattr__(name) -> PyObject");

extern "C" {static PyObject *meth_wxPyEvent___getattr__(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPyEvent___getattr__(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * name;
         ::wxPyEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BP0", &sipSelf, sipType_wxPyEvent, &sipCpp, &name))
        {
            PyObject * sipRes = SIP_NULLPTR;

        sipRes = sipCpp->__getattr__(name);

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_PyEvent, sipName___getattr__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPyEvent_Clone, "Clone() -> Event");

extern "C" {static PyObject *meth_wxPyEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxPyEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPyEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPyEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PyEvent, sipName_Clone, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPyEvent__getAttrDict, "_getAttrDict() -> PyObject\n"
"\n"
"Gives access to the internal object that is tracking the event's\n"
"python attributes.");

extern "C" {static PyObject *meth_wxPyEvent__getAttrDict(PyObject *, PyObject *);}
static PyObject *meth_wxPyEvent__getAttrDict(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPyEvent, &sipCpp))
        {
            PyObject * sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->_getAttrDict();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_PyEvent, sipName__getAttrDict, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static int slot_wxPyEvent___setattr__(PyObject *,PyObject *,PyObject *);}
static int slot_wxPyEvent___setattr__(PyObject *sipSelf,PyObject *sipName,PyObject *sipValue)
{
     ::wxPyEvent *sipCpp = reinterpret_cast< ::wxPyEvent *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPyEvent));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * name;

        if (sipValue == SIP_NULLPTR && sipParsePair(&sipParseErr, sipName, SIP_NULLPTR, "P0", &name))
        {
        sipCpp->__delattr__(name);

            return 0;
        }
    }

    {
        PyObject * name;
        PyObject * value;

        if (sipValue != SIP_NULLPTR && sipParsePair(&sipParseErr, sipName, sipValue, "P0P0", &name, &value))
        {
        sipCpp->__setattr__(name, value);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_PyEvent, (sipValue != SIP_NULLPTR ? sipName___setattr__ : sipName___delattr__), SIP_NULLPTR);

    return -1;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxPyEvent(void *, const sipTypeDef *);}
static void *cast_wxPyEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxPyEvent *sipCpp = reinterpret_cast< ::wxPyEvent *>(sipCppV);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxPyEvent(void *, int);}
static void release_wxPyEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxPyEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxPyEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxPyEvent(sipSimpleWrapper *);}
static void dealloc_wxPyEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxPyEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxPyEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxPyEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxPyEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxPyEvent *sipCpp = SIP_NULLPTR;

    {
        int id = 0;
         ::wxEventType eventType = wxEVT_NULL;

        static const char *sipKwdList[] = {
            sipName_id,
            sipName_eventType,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|ii", &id, &eventType))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPyEvent(id,eventType);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxPyEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxPyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPyEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxPyEvent[] = {{147, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_wxPyEvent[] = {
    {(void *)slot_wxPyEvent___setattr__, setattr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_wxPyEvent[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxPyEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPyEvent_Clone)},
    {SIP_MLNAME_CAST(sipName___getattr__), SIP_MLMETH_CAST(meth_wxPyEvent___getattr__), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPyEvent___getattr__)},
    {SIP_MLNAME_CAST(sipName__getAttrDict), meth_wxPyEvent__getAttrDict, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPyEvent__getAttrDict)}
};

PyDoc_STRVAR(doc_wxPyEvent, "PyEvent(id=0, eventType=wxEVT_NULL)\n"
"\n"
":class:`PyEvent` can be used as a base class for implementing custom\n"
"event types in Python. You should derive from this class instead\n"
"of :class:`Event` because this class is Python-aware and is able to\n"
"transport its Python bits safely through the wxWidgets event\n"
"system and have them still be there when the event handler is\n"
"invoked. Note that since :class:`PyEvent` is taking care of preserving\n"
"the extra attributes that have been set then you do not need to\n"
"override the Clone method in your derived classes.\n"
"\n"
":see: :class:`PyCommandEvent`");


sipClassTypeDef sipTypeDef__core_wxPyEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_NONLAZY|SIP_TYPE_CLASS,
        sipNameNr_wxPyEvent,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_PyEvent,
        {0, 0, 1},
        3, methods_wxPyEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxPyEvent,
    -1,
    -1,
    supers_wxPyEvent,
    slots_wxPyEvent,
    init_type_wxPyEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxPyEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxPyEvent,
    cast_wxPyEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
