/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_richtext.h"

        #include <wx/richtext/richtextbuffer.h>

        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxRichTextDrawingHandler : public  ::wxRichTextDrawingHandler
{
public:
    sipwxRichTextDrawingHandler(const  ::wxString&);
    sipwxRichTextDrawingHandler(const  ::wxRichTextDrawingHandler&);
    virtual ~sipwxRichTextDrawingHandler();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool GetVirtualText(const  ::wxRichTextPlainText*, ::wxString&) const SIP_OVERRIDE;
    bool HasVirtualText(const  ::wxRichTextPlainText*) const SIP_OVERRIDE;
    int GetVirtualSubobjectAttributes( ::wxRichTextObject*, ::wxArrayInt&, ::wxRichTextAttrArray&) const SIP_OVERRIDE;
    int GetVirtualSubobjectAttributesCount( ::wxRichTextObject*) const SIP_OVERRIDE;
    bool GetVirtualAttributes( ::wxRichTextAttr&, ::wxRichTextObject*) const SIP_OVERRIDE;
    bool HasVirtualAttributes( ::wxRichTextObject*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRichTextDrawingHandler(const sipwxRichTextDrawingHandler &);
    sipwxRichTextDrawingHandler &operator = (const sipwxRichTextDrawingHandler &);

    char sipPyMethods[6];
};

sipwxRichTextDrawingHandler::sipwxRichTextDrawingHandler(const  ::wxString& name):  ::wxRichTextDrawingHandler(name), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextDrawingHandler::sipwxRichTextDrawingHandler(const  ::wxRichTextDrawingHandler& a0):  ::wxRichTextDrawingHandler(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextDrawingHandler::~sipwxRichTextDrawingHandler()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxRichTextDrawingHandler::GetVirtualText(const  ::wxRichTextPlainText*obj, ::wxString& text) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_RichTextDrawingHandler,sipName_GetVirtualText);

    if (!sipMeth)
        return 0;

    extern bool sipVH__richtext_116(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextPlainText*, ::wxString&);

    return sipVH__richtext_116(sipGILState, 0, sipPySelf, sipMeth, obj, text);
}

bool sipwxRichTextDrawingHandler::HasVirtualText(const  ::wxRichTextPlainText*obj) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_RichTextDrawingHandler,sipName_HasVirtualText);

    if (!sipMeth)
        return 0;

    extern bool sipVH__richtext_115(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextPlainText*);

    return sipVH__richtext_115(sipGILState, 0, sipPySelf, sipMeth, obj);
}

int sipwxRichTextDrawingHandler::GetVirtualSubobjectAttributes( ::wxRichTextObject*obj, ::wxArrayInt& positions, ::wxRichTextAttrArray& attributes) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_RichTextDrawingHandler,sipName_GetVirtualSubobjectAttributes);

    if (!sipMeth)
        return 0;

    extern int sipVH__richtext_114(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*, ::wxArrayInt&, ::wxRichTextAttrArray&);

    return sipVH__richtext_114(sipGILState, 0, sipPySelf, sipMeth, obj, positions, attributes);
}

int sipwxRichTextDrawingHandler::GetVirtualSubobjectAttributesCount( ::wxRichTextObject*obj) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_RichTextDrawingHandler,sipName_GetVirtualSubobjectAttributesCount);

    if (!sipMeth)
        return 0;

    extern int sipVH__richtext_113(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*);

    return sipVH__richtext_113(sipGILState, 0, sipPySelf, sipMeth, obj);
}

bool sipwxRichTextDrawingHandler::GetVirtualAttributes( ::wxRichTextAttr& attr, ::wxRichTextObject*obj) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_RichTextDrawingHandler,sipName_GetVirtualAttributes);

    if (!sipMeth)
        return 0;

    extern bool sipVH__richtext_112(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextAttr&, ::wxRichTextObject*);

    return sipVH__richtext_112(sipGILState, 0, sipPySelf, sipMeth, attr, obj);
}

bool sipwxRichTextDrawingHandler::HasVirtualAttributes( ::wxRichTextObject*obj) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,sipName_RichTextDrawingHandler,sipName_HasVirtualAttributes);

    if (!sipMeth)
        return 0;

    extern bool sipVH__richtext_111(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*);

    return sipVH__richtext_111(sipGILState, 0, sipPySelf, sipMeth, obj);
}


PyDoc_STRVAR(doc_wxRichTextDrawingHandler_HasVirtualAttributes, "HasVirtualAttributes(obj) -> bool\n"
"\n"
"Returns true if this object has virtual attributes that we can\n"
"provide.");

extern "C" {static PyObject *meth_wxRichTextDrawingHandler_HasVirtualAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingHandler_HasVirtualAttributes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxRichTextObject* obj;
        const  ::wxRichTextDrawingHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextDrawingHandler, &sipCpp, sipType_wxRichTextObject, &obj))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RichTextDrawingHandler, sipName_HasVirtualAttributes);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasVirtualAttributes(obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextDrawingHandler, sipName_HasVirtualAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextDrawingHandler_GetVirtualAttributes, "GetVirtualAttributes(attr, obj) -> bool\n"
"\n"
"Provides virtual attributes that we can provide.");

extern "C" {static PyObject *meth_wxRichTextDrawingHandler_GetVirtualAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingHandler_GetVirtualAttributes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxRichTextAttr* attr;
         ::wxRichTextObject* obj;
        const  ::wxRichTextDrawingHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_attr,
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J8", &sipSelf, sipType_wxRichTextDrawingHandler, &sipCpp, sipType_wxRichTextAttr, &attr, sipType_wxRichTextObject, &obj))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RichTextDrawingHandler, sipName_GetVirtualAttributes);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVirtualAttributes(*attr,obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextDrawingHandler, sipName_GetVirtualAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextDrawingHandler_GetVirtualSubobjectAttributesCount, "GetVirtualSubobjectAttributesCount(obj) -> int\n"
"\n"
"Gets the count for mixed virtual attributes for individual positions\n"
"within the object.");

extern "C" {static PyObject *meth_wxRichTextDrawingHandler_GetVirtualSubobjectAttributesCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingHandler_GetVirtualSubobjectAttributesCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxRichTextObject* obj;
        const  ::wxRichTextDrawingHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextDrawingHandler, &sipCpp, sipType_wxRichTextObject, &obj))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RichTextDrawingHandler, sipName_GetVirtualSubobjectAttributesCount);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVirtualSubobjectAttributesCount(obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextDrawingHandler, sipName_GetVirtualSubobjectAttributesCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextDrawingHandler_GetVirtualSubobjectAttributes, "GetVirtualSubobjectAttributes(obj, positions, attributes) -> int\n"
"\n"
"Gets the mixed virtual attributes for individual positions within the\n"
"object.");

extern "C" {static PyObject *meth_wxRichTextDrawingHandler_GetVirtualSubobjectAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingHandler_GetVirtualSubobjectAttributes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxRichTextObject* obj;
         ::wxArrayInt* positions;
        int positionsState = 0;
         ::wxRichTextAttrArray* attributes;
        const  ::wxRichTextDrawingHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
            sipName_positions,
            sipName_attributes,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1J9", &sipSelf, sipType_wxRichTextDrawingHandler, &sipCpp, sipType_wxRichTextObject, &obj, sipType_wxArrayInt,&positions, &positionsState, sipType_wxRichTextAttrArray, &attributes))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RichTextDrawingHandler, sipName_GetVirtualSubobjectAttributes);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVirtualSubobjectAttributes(obj,*positions,*attributes);
            Py_END_ALLOW_THREADS
            sipReleaseType(positions,sipType_wxArrayInt,positionsState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextDrawingHandler, sipName_GetVirtualSubobjectAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextDrawingHandler_HasVirtualText, "HasVirtualText(obj) -> bool\n"
"\n"
"Do we have virtual text for this object? Virtual text allows an\n"
"application to replace characters in an object for editing and display\n"
"purposes, for example for highlighting special characters.");

extern "C" {static PyObject *meth_wxRichTextDrawingHandler_HasVirtualText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingHandler_HasVirtualText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxRichTextPlainText* obj;
        const  ::wxRichTextDrawingHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextDrawingHandler, &sipCpp, sipType_wxRichTextPlainText, &obj))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RichTextDrawingHandler, sipName_HasVirtualText);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasVirtualText(obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextDrawingHandler, sipName_HasVirtualText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextDrawingHandler_GetVirtualText, "GetVirtualText(obj, text) -> bool\n"
"\n"
"Gets the virtual text for this object.");

extern "C" {static PyObject *meth_wxRichTextDrawingHandler_GetVirtualText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingHandler_GetVirtualText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxRichTextPlainText* obj;
         ::wxString* text;
        int textState = 0;
        const  ::wxRichTextDrawingHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1", &sipSelf, sipType_wxRichTextDrawingHandler, &sipCpp, sipType_wxRichTextPlainText, &obj, sipType_wxString,&text, &textState))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RichTextDrawingHandler, sipName_GetVirtualText);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVirtualText(obj,*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(text,sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextDrawingHandler, sipName_GetVirtualText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextDrawingHandler_SetName, "SetName(name)\n"
"\n"
"Sets the name of the handler.");

extern "C" {static PyObject *meth_wxRichTextDrawingHandler_SetName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingHandler_SetName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;
         ::wxRichTextDrawingHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextDrawingHandler, &sipCpp, sipType_wxString,&name, &nameState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetName(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextDrawingHandler, sipName_SetName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextDrawingHandler_GetName, "GetName() -> String\n"
"\n"
"Returns the name of the handler.");

extern "C" {static PyObject *meth_wxRichTextDrawingHandler_GetName(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingHandler_GetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextDrawingHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextDrawingHandler, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetName());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextDrawingHandler, sipName_GetName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRichTextDrawingHandler(void *, const sipTypeDef *);}
static void *cast_wxRichTextDrawingHandler(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRichTextDrawingHandler *sipCpp = reinterpret_cast< ::wxRichTextDrawingHandler *>(sipCppV);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRichTextDrawingHandler(void *, int);}
static void release_wxRichTextDrawingHandler(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRichTextDrawingHandler *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRichTextDrawingHandler *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxRichTextDrawingHandler(sipSimpleWrapper *);}
static void dealloc_wxRichTextDrawingHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRichTextDrawingHandler *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRichTextDrawingHandler(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRichTextDrawingHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRichTextDrawingHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxRichTextDrawingHandler *sipCpp = SIP_NULLPTR;

    {
        const  ::wxString& namedef = wxEmptyString;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1", sipType_wxString,&name, &nameState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextDrawingHandler(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxRichTextDrawingHandler* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxRichTextDrawingHandler, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextDrawingHandler(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRichTextDrawingHandler[] = {{42, 0, 1}};


static PyMethodDef methods_wxRichTextDrawingHandler[] = {
    {SIP_MLNAME_CAST(sipName_GetName), meth_wxRichTextDrawingHandler_GetName, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextDrawingHandler_GetName)},
    {SIP_MLNAME_CAST(sipName_GetVirtualAttributes), SIP_MLMETH_CAST(meth_wxRichTextDrawingHandler_GetVirtualAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingHandler_GetVirtualAttributes)},
    {SIP_MLNAME_CAST(sipName_GetVirtualSubobjectAttributes), SIP_MLMETH_CAST(meth_wxRichTextDrawingHandler_GetVirtualSubobjectAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingHandler_GetVirtualSubobjectAttributes)},
    {SIP_MLNAME_CAST(sipName_GetVirtualSubobjectAttributesCount), SIP_MLMETH_CAST(meth_wxRichTextDrawingHandler_GetVirtualSubobjectAttributesCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingHandler_GetVirtualSubobjectAttributesCount)},
    {SIP_MLNAME_CAST(sipName_GetVirtualText), SIP_MLMETH_CAST(meth_wxRichTextDrawingHandler_GetVirtualText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingHandler_GetVirtualText)},
    {SIP_MLNAME_CAST(sipName_HasVirtualAttributes), SIP_MLMETH_CAST(meth_wxRichTextDrawingHandler_HasVirtualAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingHandler_HasVirtualAttributes)},
    {SIP_MLNAME_CAST(sipName_HasVirtualText), SIP_MLMETH_CAST(meth_wxRichTextDrawingHandler_HasVirtualText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingHandler_HasVirtualText)},
    {SIP_MLNAME_CAST(sipName_SetName), SIP_MLMETH_CAST(meth_wxRichTextDrawingHandler_SetName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingHandler_SetName)}
};

sipVariableDef variables_wxRichTextDrawingHandler[] = {
    {PropertyVariable, sipName_Name, &methods_wxRichTextDrawingHandler[0], &methods_wxRichTextDrawingHandler[7], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxRichTextDrawingHandler, "RichTextDrawingHandler(name=wx.EmptyString)\n"
"\n"
"The base class for custom drawing handlers.");


sipClassTypeDef sipTypeDef__richtext_wxRichTextDrawingHandler = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRichTextDrawingHandler,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_RichTextDrawingHandler,
        {0, 0, 1},
        8, methods_wxRichTextDrawingHandler,
        0, SIP_NULLPTR,
        1, variables_wxRichTextDrawingHandler,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxRichTextDrawingHandler,
    -1,
    -1,
    supers_wxRichTextDrawingHandler,
    SIP_NULLPTR,
    init_type_wxRichTextDrawingHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxRichTextDrawingHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxRichTextDrawingHandler,
    cast_wxRichTextDrawingHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
