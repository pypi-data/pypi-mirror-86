/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/event.h>

        #include <wx/event.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxCommandEvent : public  ::wxCommandEvent
{
public:
    sipwxCommandEvent( ::wxEventType,int);
    sipwxCommandEvent(const  ::wxCommandEvent&);
    virtual ~sipwxCommandEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEvent* Clone() const SIP_OVERRIDE;
     ::wxEventCategory GetEventCategory() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxCommandEvent(const sipwxCommandEvent &);
    sipwxCommandEvent &operator = (const sipwxCommandEvent &);

    char sipPyMethods[2];
};

sipwxCommandEvent::sipwxCommandEvent( ::wxEventType commandEventType,int id):  ::wxCommandEvent(commandEventType,id), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxCommandEvent::sipwxCommandEvent(const  ::wxCommandEvent& a0):  ::wxCommandEvent(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxCommandEvent::~sipwxCommandEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEvent* sipwxCommandEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_Clone);

    if (!sipMeth)
        return  ::wxCommandEvent::Clone();

    extern  ::wxEvent* sipVH__core_98(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_98(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEventCategory sipwxCommandEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxCommandEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__core_99(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_99(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxCommandEvent_GetClientData, "GetClientData() -> ClientData\n"
"\n"
"Returns client object pointer for a listbox or choice selection event\n"
"(not valid for a deselection).");

extern "C" {static PyObject *meth_wxCommandEvent_GetClientData(PyObject *, PyObject *);}
static PyObject *meth_wxCommandEvent_GetClientData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxCommandEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxCommandEvent, &sipCpp))
        {
             ::wxClientData*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetClientObject();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxClientData,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_CommandEvent, sipName_GetClientData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxCommandEvent_GetExtraLong, "GetExtraLong() -> long\n"
"\n"
"Returns extra information dependent on the event objects type.");

extern "C" {static PyObject *meth_wxCommandEvent_GetExtraLong(PyObject *, PyObject *);}
static PyObject *meth_wxCommandEvent_GetExtraLong(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxCommandEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxCommandEvent, &sipCpp))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetExtraLong();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_CommandEvent, sipName_GetExtraLong, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxCommandEvent_GetInt, "GetInt() -> int\n"
"\n"
"Returns the integer identifier corresponding to a listbox, choice or\n"
"radiobox selection (only if the event was a selection, not a\n"
"deselection), or a boolean value representing the value of a checkbox.");

extern "C" {static PyObject *meth_wxCommandEvent_GetInt(PyObject *, PyObject *);}
static PyObject *meth_wxCommandEvent_GetInt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxCommandEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxCommandEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetInt();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_CommandEvent, sipName_GetInt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxCommandEvent_GetSelection, "GetSelection() -> int\n"
"\n"
"Returns item index for a listbox or choice selection event (not valid\n"
"for a deselection).");

extern "C" {static PyObject *meth_wxCommandEvent_GetSelection(PyObject *, PyObject *);}
static PyObject *meth_wxCommandEvent_GetSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxCommandEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxCommandEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSelection();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_CommandEvent, sipName_GetSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxCommandEvent_GetString, "GetString() -> String\n"
"\n"
"Returns item string for a listbox or choice selection event.");

extern "C" {static PyObject *meth_wxCommandEvent_GetString(PyObject *, PyObject *);}
static PyObject *meth_wxCommandEvent_GetString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxCommandEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxCommandEvent, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetString());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_CommandEvent, sipName_GetString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxCommandEvent_IsChecked, "IsChecked() -> bool\n"
"\n"
"This method can be used with checkbox and menu events: for the\n"
"checkboxes, the method returns true for a selection event and false\n"
"for a deselection one.");

extern "C" {static PyObject *meth_wxCommandEvent_IsChecked(PyObject *, PyObject *);}
static PyObject *meth_wxCommandEvent_IsChecked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxCommandEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxCommandEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsChecked();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_CommandEvent, sipName_IsChecked, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxCommandEvent_IsSelection, "IsSelection() -> bool\n"
"\n"
"For a listbox or similar event, returns true if it is a selection,\n"
"false if it is a deselection.");

extern "C" {static PyObject *meth_wxCommandEvent_IsSelection(PyObject *, PyObject *);}
static PyObject *meth_wxCommandEvent_IsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxCommandEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxCommandEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsSelection();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_CommandEvent, sipName_IsSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxCommandEvent_SetClientData, "SetClientData(data)\n"
"\n"
"Sets the client object for this event.");

extern "C" {static PyObject *meth_wxCommandEvent_SetClientData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxCommandEvent_SetClientData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxClientData* data;
        int dataState = 0;
         ::wxCommandEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ2", &sipSelf, sipType_wxCommandEvent, &sipCpp, sipType_wxClientData,&data, &dataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetClientObject(data);
            Py_END_ALLOW_THREADS
            sipReleaseType(data,sipType_wxClientData,dataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_CommandEvent, sipName_SetClientData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxCommandEvent_SetExtraLong, "SetExtraLong(extraLong)\n"
"\n"
"Sets the m_extraLong member.");

extern "C" {static PyObject *meth_wxCommandEvent_SetExtraLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxCommandEvent_SetExtraLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long extraLong;
         ::wxCommandEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_extraLong,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxCommandEvent, &sipCpp, &extraLong))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetExtraLong(extraLong);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_CommandEvent, sipName_SetExtraLong, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxCommandEvent_SetInt, "SetInt(intCommand)\n"
"\n"
"Sets the m_commandInt member.");

extern "C" {static PyObject *meth_wxCommandEvent_SetInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxCommandEvent_SetInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int intCommand;
         ::wxCommandEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_intCommand,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxCommandEvent, &sipCpp, &intCommand))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetInt(intCommand);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_CommandEvent, sipName_SetInt, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxCommandEvent_SetString, "SetString(string)\n"
"\n"
"Sets the m_commandString member.");

extern "C" {static PyObject *meth_wxCommandEvent_SetString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxCommandEvent_SetString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* string;
        int stringState = 0;
         ::wxCommandEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_string,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxCommandEvent, &sipCpp, sipType_wxString,&string, &stringState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetString(*string);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(string),sipType_wxString,stringState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_CommandEvent, sipName_SetString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxCommandEvent_Clone, "Clone(self) -> Event");

extern "C" {static PyObject *meth_wxCommandEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxCommandEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxCommandEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxCommandEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxCommandEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_CommandEvent, sipName_Clone, doc_wxCommandEvent_Clone);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxCommandEvent(void *, const sipTypeDef *);}
static void *cast_wxCommandEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxCommandEvent *sipCpp = reinterpret_cast< ::wxCommandEvent *>(sipCppV);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxCommandEvent(void *, int);}
static void release_wxCommandEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxCommandEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxCommandEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxCommandEvent(sipSimpleWrapper *);}
static void dealloc_wxCommandEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxCommandEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxCommandEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxCommandEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxCommandEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxCommandEvent *sipCpp = SIP_NULLPTR;

    {
         ::wxEventType commandEventType = wxEVT_NULL;
        int id = 0;

        static const char *sipKwdList[] = {
            sipName_commandEventType,
            sipName_id,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|ii", &commandEventType, &id))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxCommandEvent(commandEventType,id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxCommandEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxCommandEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxCommandEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxCommandEvent[] = {{147, 255, 1}};


static PyMethodDef methods_wxCommandEvent[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxCommandEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxCommandEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_GetClientData), meth_wxCommandEvent_GetClientData, METH_VARARGS, SIP_MLDOC_CAST(doc_wxCommandEvent_GetClientData)},
    {SIP_MLNAME_CAST(sipName_GetExtraLong), meth_wxCommandEvent_GetExtraLong, METH_VARARGS, SIP_MLDOC_CAST(doc_wxCommandEvent_GetExtraLong)},
    {SIP_MLNAME_CAST(sipName_GetInt), meth_wxCommandEvent_GetInt, METH_VARARGS, SIP_MLDOC_CAST(doc_wxCommandEvent_GetInt)},
    {SIP_MLNAME_CAST(sipName_GetSelection), meth_wxCommandEvent_GetSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxCommandEvent_GetSelection)},
    {SIP_MLNAME_CAST(sipName_GetString), meth_wxCommandEvent_GetString, METH_VARARGS, SIP_MLDOC_CAST(doc_wxCommandEvent_GetString)},
    {SIP_MLNAME_CAST(sipName_IsChecked), meth_wxCommandEvent_IsChecked, METH_VARARGS, SIP_MLDOC_CAST(doc_wxCommandEvent_IsChecked)},
    {SIP_MLNAME_CAST(sipName_IsSelection), meth_wxCommandEvent_IsSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxCommandEvent_IsSelection)},
    {SIP_MLNAME_CAST(sipName_SetClientData), SIP_MLMETH_CAST(meth_wxCommandEvent_SetClientData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxCommandEvent_SetClientData)},
    {SIP_MLNAME_CAST(sipName_SetExtraLong), SIP_MLMETH_CAST(meth_wxCommandEvent_SetExtraLong), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxCommandEvent_SetExtraLong)},
    {SIP_MLNAME_CAST(sipName_SetInt), SIP_MLMETH_CAST(meth_wxCommandEvent_SetInt), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxCommandEvent_SetInt)},
    {SIP_MLNAME_CAST(sipName_SetString), SIP_MLMETH_CAST(meth_wxCommandEvent_SetString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxCommandEvent_SetString)}
};

sipVariableDef variables_wxCommandEvent[] = {
    {PropertyVariable, sipName_String, &methods_wxCommandEvent[5], &methods_wxCommandEvent[11], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Selection, &methods_wxCommandEvent[4], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Int, &methods_wxCommandEvent[3], &methods_wxCommandEvent[10], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ExtraLong, &methods_wxCommandEvent[2], &methods_wxCommandEvent[9], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxCommandEvent, "CommandEvent(commandEventType=wxEVT_NULL, id=0)\n"
"\n"
"This event class contains information about command events, which\n"
"originate from a variety of simple controls.");


sipClassTypeDef sipTypeDef__core_wxCommandEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxCommandEvent,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_CommandEvent,
        {0, 0, 1},
        12, methods_wxCommandEvent,
        0, SIP_NULLPTR,
        4, variables_wxCommandEvent,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxCommandEvent,
    -1,
    -1,
    supers_wxCommandEvent,
    SIP_NULLPTR,
    init_type_wxCommandEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxCommandEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxCommandEvent,
    cast_wxCommandEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
