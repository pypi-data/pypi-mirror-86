/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_aui.h"

        #include <wx/aui/auibook.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/dc.h>
        #include <wx/bitmap.h>
        #include <wx/gdicmn.h>
        #include <wx/aui/auibook.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/aui/auibook.h>


class sipwxAuiSimpleTabArt : public  ::wxAuiSimpleTabArt
{
public:
    sipwxAuiSimpleTabArt();
    sipwxAuiSimpleTabArt(const  ::wxAuiSimpleTabArt&);
    virtual ~sipwxAuiSimpleTabArt();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxAuiTabArt* Clone() SIP_OVERRIDE;
    void DrawBackground( ::wxDC&, ::wxWindow*,const  ::wxRect&) SIP_OVERRIDE;
    void DrawButton( ::wxDC&, ::wxWindow*,const  ::wxRect&,int,int,int, ::wxRect*) SIP_OVERRIDE;
    void DrawTab( ::wxDC&, ::wxWindow*,const  ::wxAuiNotebookPage&,const  ::wxRect&,int, ::wxRect*, ::wxRect*,int*) SIP_OVERRIDE;
    int GetBestTabCtrlSize( ::wxWindow*,const  ::wxAuiNotebookPageArray&,const  ::wxSize&) SIP_OVERRIDE;
    int GetIndentSize() SIP_OVERRIDE;
     ::wxSize GetTabSize( ::wxDC&, ::wxWindow*,const  ::wxString&,const  ::wxBitmap&,bool,int,int*) SIP_OVERRIDE;
    void SetFlags(uint) SIP_OVERRIDE;
    void SetMeasuringFont(const  ::wxFont&) SIP_OVERRIDE;
    void SetNormalFont(const  ::wxFont&) SIP_OVERRIDE;
    void SetSelectedFont(const  ::wxFont&) SIP_OVERRIDE;
    void SetColour(const  ::wxColour&) SIP_OVERRIDE;
    void SetActiveColour(const  ::wxColour&) SIP_OVERRIDE;
    void SetSizingInfo(const  ::wxSize&,size_t) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxAuiSimpleTabArt(const sipwxAuiSimpleTabArt &);
    sipwxAuiSimpleTabArt &operator = (const sipwxAuiSimpleTabArt &);

    char sipPyMethods[14];
};

sipwxAuiSimpleTabArt::sipwxAuiSimpleTabArt():  ::wxAuiSimpleTabArt(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiSimpleTabArt::sipwxAuiSimpleTabArt(const  ::wxAuiSimpleTabArt& a0):  ::wxAuiSimpleTabArt(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiSimpleTabArt::~sipwxAuiSimpleTabArt()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxAuiTabArt* sipwxAuiSimpleTabArt::Clone()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_Clone);

    if (!sipMeth)
        return  ::wxAuiSimpleTabArt::Clone();

    extern  ::wxAuiTabArt* sipVH__aui_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_60(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiSimpleTabArt::DrawBackground( ::wxDC& dc, ::wxWindow*wnd,const  ::wxRect& rect)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_DrawBackground);

    if (!sipMeth)
    {
         ::wxAuiSimpleTabArt::DrawBackground(dc,wnd,rect);
        return;
    }

    extern void sipVH__aui_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxRect&);

    sipVH__aui_44(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, rect);
}

void sipwxAuiSimpleTabArt::DrawButton( ::wxDC& dc, ::wxWindow*wnd,const  ::wxRect& in_rect,int bitmap_id,int button_state,int orientation, ::wxRect*out_rect)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_DrawButton);

    if (!sipMeth)
    {
         ::wxAuiSimpleTabArt::DrawButton(dc,wnd,in_rect,bitmap_id,button_state,orientation,out_rect);
        return;
    }

    extern void sipVH__aui_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxRect&,int,int,int, ::wxRect*);

    sipVH__aui_61(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, in_rect, bitmap_id, button_state, orientation, out_rect);
}

void sipwxAuiSimpleTabArt::DrawTab( ::wxDC& dc, ::wxWindow*wnd,const  ::wxAuiNotebookPage& page,const  ::wxRect& rect,int close_button_state, ::wxRect*out_tab_rect, ::wxRect*out_button_rect,int*x_extent)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_DrawTab);

    if (!sipMeth)
    {
         ::wxAuiSimpleTabArt::DrawTab(dc,wnd,page,rect,close_button_state,out_tab_rect,out_button_rect,x_extent);
        return;
    }

    extern void sipVH__aui_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxAuiNotebookPage&,const  ::wxRect&,int, ::wxRect*, ::wxRect*,int*);

    sipVH__aui_62(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, page, rect, close_button_state, out_tab_rect, out_button_rect, x_extent);
}

int sipwxAuiSimpleTabArt::GetBestTabCtrlSize( ::wxWindow*a0,const  ::wxAuiNotebookPageArray& a1,const  ::wxSize& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_GetBestTabCtrlSize);

    if (!sipMeth)
        return  ::wxAuiSimpleTabArt::GetBestTabCtrlSize(a0,a1,a2);

    extern int sipVH__aui_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*,const  ::wxAuiNotebookPageArray&,const  ::wxSize&);

    return sipVH__aui_63(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

int sipwxAuiSimpleTabArt::GetIndentSize()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_GetIndentSize);

    if (!sipMeth)
        return  ::wxAuiSimpleTabArt::GetIndentSize();

    extern int sipVH__aui_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_43(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxAuiSimpleTabArt::GetTabSize( ::wxDC& dc, ::wxWindow*wnd,const  ::wxString& caption,const  ::wxBitmap& bitmap,bool active,int close_button_state,int*x_extent)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_GetTabSize);

    if (!sipMeth)
        return  ::wxAuiSimpleTabArt::GetTabSize(dc,wnd,caption,bitmap,active,close_button_state,x_extent);

    extern  ::wxSize sipVH__aui_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxString&,const  ::wxBitmap&,bool,int,int*);

    return sipVH__aui_64(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, caption, bitmap, active, close_button_state, x_extent);
}

void sipwxAuiSimpleTabArt::SetFlags(uint flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_SetFlags);

    if (!sipMeth)
    {
         ::wxAuiSimpleTabArt::SetFlags(flags);
        return;
    }

    extern void sipVH__aui_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint);

    sipVH__aui_38(sipGILState, 0, sipPySelf, sipMeth, flags);
}

void sipwxAuiSimpleTabArt::SetMeasuringFont(const  ::wxFont& font)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_SetMeasuringFont);

    if (!sipMeth)
    {
         ::wxAuiSimpleTabArt::SetMeasuringFont(font);
        return;
    }

    extern void sipVH__aui_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxFont&);

    sipVH__aui_40(sipGILState, 0, sipPySelf, sipMeth, font);
}

void sipwxAuiSimpleTabArt::SetNormalFont(const  ::wxFont& font)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_SetNormalFont);

    if (!sipMeth)
    {
         ::wxAuiSimpleTabArt::SetNormalFont(font);
        return;
    }

    extern void sipVH__aui_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxFont&);

    sipVH__aui_40(sipGILState, 0, sipPySelf, sipMeth, font);
}

void sipwxAuiSimpleTabArt::SetSelectedFont(const  ::wxFont& font)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_SetSelectedFont);

    if (!sipMeth)
    {
         ::wxAuiSimpleTabArt::SetSelectedFont(font);
        return;
    }

    extern void sipVH__aui_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxFont&);

    sipVH__aui_40(sipGILState, 0, sipPySelf, sipMeth, font);
}

void sipwxAuiSimpleTabArt::SetColour(const  ::wxColour& colour)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_SetColour);

    if (!sipMeth)
    {
         ::wxAuiSimpleTabArt::SetColour(colour);
        return;
    }

    extern void sipVH__aui_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxColour&);

    sipVH__aui_65(sipGILState, 0, sipPySelf, sipMeth, colour);
}

void sipwxAuiSimpleTabArt::SetActiveColour(const  ::wxColour& colour)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_SetActiveColour);

    if (!sipMeth)
    {
         ::wxAuiSimpleTabArt::SetActiveColour(colour);
        return;
    }

    extern void sipVH__aui_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxColour&);

    sipVH__aui_65(sipGILState, 0, sipPySelf, sipMeth, colour);
}

void sipwxAuiSimpleTabArt::SetSizingInfo(const  ::wxSize& tab_ctrl_size,size_t tab_count)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_SetSizingInfo);

    if (!sipMeth)
    {
         ::wxAuiSimpleTabArt::SetSizingInfo(tab_ctrl_size,tab_count);
        return;
    }

    extern void sipVH__aui_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&,size_t);

    sipVH__aui_66(sipGILState, 0, sipPySelf, sipMeth, tab_ctrl_size, tab_count);
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_Clone, "Clone() -> AuiTabArt\n"
"\n"
"Clones the art object.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiSimpleTabArt *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp))
        {
             ::wxAuiTabArt*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiTabArt,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_Clone, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_SetFlags, "SetFlags(flags)\n"
"\n"
"Sets flags.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_SetFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_SetFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        uint flags;
         ::wxAuiSimpleTabArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::SetFlags(flags) : sipCpp->SetFlags(flags));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_SetFlags, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_SetSizingInfo, "SetSizingInfo(tab_ctrl_size, tab_count)\n"
"\n"
"Sets sizing information.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_SetSizingInfo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_SetSizingInfo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxSize* tab_ctrl_size;
        int tab_ctrl_sizeState = 0;
        size_t tab_count;
         ::wxAuiSimpleTabArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tab_ctrl_size,
            sipName_tab_count,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1=", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp, sipType_wxSize, &tab_ctrl_size, &tab_ctrl_sizeState, &tab_count))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::SetSizingInfo(*tab_ctrl_size,tab_count) : sipCpp->SetSizingInfo(*tab_ctrl_size,tab_count));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(tab_ctrl_size),sipType_wxSize,tab_ctrl_sizeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_SetSizingInfo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_SetNormalFont, "SetNormalFont(font)\n"
"\n"
"Sets the normal font for drawing labels.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_SetNormalFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_SetNormalFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxFont* font;
         ::wxAuiSimpleTabArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp, sipType_wxFont, &font))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::SetNormalFont(*font) : sipCpp->SetNormalFont(*font));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_SetNormalFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_SetSelectedFont, "SetSelectedFont(font)\n"
"\n"
"Sets the font for drawing text for selected UI elements.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_SetSelectedFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_SetSelectedFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxFont* font;
         ::wxAuiSimpleTabArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp, sipType_wxFont, &font))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::SetSelectedFont(*font) : sipCpp->SetSelectedFont(*font));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_SetSelectedFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_SetMeasuringFont, "SetMeasuringFont(font)\n"
"\n"
"Sets the font used for calculating measurements.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_SetMeasuringFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_SetMeasuringFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxFont* font;
         ::wxAuiSimpleTabArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp, sipType_wxFont, &font))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::SetMeasuringFont(*font) : sipCpp->SetMeasuringFont(*font));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_SetMeasuringFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_SetColour, "SetColour(colour)\n"
"\n"
"Sets the colour of the inactive tabs.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_SetColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_SetColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxColour* colour;
        int colourState = 0;
         ::wxAuiSimpleTabArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colour,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp, sipType_wxColour, &colour, &colourState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::SetColour(*colour) : sipCpp->SetColour(*colour));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(colour),sipType_wxColour,colourState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_SetColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_SetActiveColour, "SetActiveColour(colour)\n"
"\n"
"Sets the colour of the selected tab.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_SetActiveColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_SetActiveColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxColour* colour;
        int colourState = 0;
         ::wxAuiSimpleTabArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colour,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp, sipType_wxColour, &colour, &colourState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::SetActiveColour(*colour) : sipCpp->SetActiveColour(*colour));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(colour),sipType_wxColour,colourState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_SetActiveColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_DrawBackground, "DrawBackground(dc, wnd, rect)\n"
"\n"
"Draws a background on the given area.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_DrawBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_DrawBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxAuiSimpleTabArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J8J1", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxRect, &rect, &rectState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::DrawBackground(*dc,wnd,*rect) : sipCpp->DrawBackground(*dc,wnd,*rect));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_DrawBackground, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_DrawTab, "DrawTab(dc, wnd, page, rect, close_button_state, out_tab_rect, out_button_rect, x_extent)\n"
"\n"
"Draws a tab.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_DrawTab(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_DrawTab(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxAuiNotebookPage* page;
        const  ::wxRect* rect;
        int rectState = 0;
        int close_button_state;
         ::wxRect* out_tab_rect;
        int out_tab_rectState = 0;
         ::wxRect* out_button_rect;
        int out_button_rectState = 0;
        int x_extent;
         ::wxAuiSimpleTabArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_page,
            sipName_rect,
            sipName_close_button_state,
            sipName_out_tab_rect,
            sipName_out_button_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J8J9J1iJ0J0", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxAuiNotebookPage, &page, sipType_wxRect, &rect, &rectState, &close_button_state, sipType_wxRect, &out_tab_rect, &out_tab_rectState, sipType_wxRect, &out_button_rect, &out_button_rectState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::DrawTab(*dc,wnd,*page,*rect,close_button_state,out_tab_rect,out_button_rect,&x_extent) : sipCpp->DrawTab(*dc,wnd,*page,*rect,close_button_state,out_tab_rect,out_button_rect,&x_extent));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);
            sipReleaseType(out_tab_rect,sipType_wxRect,out_tab_rectState);
            sipReleaseType(out_button_rect,sipType_wxRect,out_button_rectState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(x_extent);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_DrawTab, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_DrawButton, "DrawButton(dc, wnd, in_rect, bitmap_id, button_state, orientation, out_rect)\n"
"\n"
"Draws a button.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_DrawButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_DrawButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxRect* in_rect;
        int in_rectState = 0;
        int bitmap_id;
        int button_state;
        int orientation;
         ::wxRect* out_rect;
        int out_rectState = 0;
         ::wxAuiSimpleTabArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_in_rect,
            sipName_bitmap_id,
            sipName_button_state,
            sipName_orientation,
            sipName_out_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J8J1iiiJ0", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxRect, &in_rect, &in_rectState, &bitmap_id, &button_state, &orientation, sipType_wxRect, &out_rect, &out_rectState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::DrawButton(*dc,wnd,*in_rect,bitmap_id,button_state,orientation,out_rect) : sipCpp->DrawButton(*dc,wnd,*in_rect,bitmap_id,button_state,orientation,out_rect));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(in_rect),sipType_wxRect,in_rectState);
            sipReleaseType(out_rect,sipType_wxRect,out_rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_DrawButton, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_GetIndentSize, "GetIndentSize() -> int\n"
"\n"
"Returns the indent size.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_GetIndentSize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_GetIndentSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiSimpleTabArt *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::GetIndentSize() : sipCpp->GetIndentSize());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_GetIndentSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_GetTabSize, "GetTabSize(dc, wnd, caption, bitmap, active, close_button_state, x_extent) -> wx.Size\n"
"\n"
"Returns the tab size for the given caption, bitmap and state.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_GetTabSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_GetTabSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxString* caption;
        int captionState = 0;
        const  ::wxBitmap* bitmap;
        bool active;
        int close_button_state;
        int x_extent;
         ::wxAuiSimpleTabArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_caption,
            sipName_bitmap,
            sipName_active,
            sipName_close_button_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J8J1J9bi", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxString,&caption, &captionState, sipType_wxBitmap, &bitmap, &active, &close_button_state))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize((sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::GetTabSize(*dc,wnd,*caption,*bitmap,active,close_button_state,&x_extent) : sipCpp->GetTabSize(*dc,wnd,*caption,*bitmap,active,close_button_state,&x_extent)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(caption),sipType_wxString,captionState);

            if (PyErr_Occurred())
                return 0;

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
            return sipBuildResult(0,"(Ri)",sipResObj,x_extent);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_GetTabSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_ShowDropDown, "ShowDropDown(wnd, items, activeIdx) -> int");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_ShowDropDown(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_ShowDropDown(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* wnd;
        const  ::wxAuiNotebookPageArray* items;
        int activeIdx;
         ::wxAuiSimpleTabArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_wnd,
            sipName_items,
            sipName_activeIdx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9i", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp, sipType_wxWindow, &wnd, sipType_wxAuiNotebookPageArray, &items, &activeIdx))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ShowDropDown(wnd,*items,activeIdx);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_ShowDropDown, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxAuiSimpleTabArt_GetBestTabCtrlSize, "GetBestTabCtrlSize(, , ) -> int\n"
"\n"
"Returns the tab control size.");

extern "C" {static PyObject *meth_wxAuiSimpleTabArt_GetBestTabCtrlSize(PyObject *, PyObject *);}
static PyObject *meth_wxAuiSimpleTabArt_GetBestTabCtrlSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindow* a0;
        const  ::wxAuiNotebookPageArray* a1;
        const  ::wxSize* a2;
        int a2State = 0;
         ::wxAuiSimpleTabArt *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9J1", &sipSelf, sipType_wxAuiSimpleTabArt, &sipCpp, sipType_wxWindow, &a0, sipType_wxAuiNotebookPageArray, &a1, sipType_wxSize, &a2, &a2State))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiSimpleTabArt::GetBestTabCtrlSize(a0,*a1,*a2) : sipCpp->GetBestTabCtrlSize(a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(a2),sipType_wxSize,a2State);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_AuiSimpleTabArt, sipName_GetBestTabCtrlSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxAuiSimpleTabArt(void *, const sipTypeDef *);}
static void *cast_wxAuiSimpleTabArt(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxAuiSimpleTabArt *sipCpp = reinterpret_cast< ::wxAuiSimpleTabArt *>(sipCppV);

    if (targetType == sipType_wxAuiTabArt)
        return static_cast< ::wxAuiTabArt *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxAuiSimpleTabArt(void *, int);}
static void release_wxAuiSimpleTabArt(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxAuiSimpleTabArt *>(sipCppV);
    else
        delete reinterpret_cast< ::wxAuiSimpleTabArt *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxAuiSimpleTabArt(Py_ssize_t);}
static void *array_wxAuiSimpleTabArt(Py_ssize_t sipNrElem)
{
    return new  ::wxAuiSimpleTabArt[sipNrElem];
}


extern "C" {static void assign_wxAuiSimpleTabArt(void *, SIP_SSIZE_T, void *);}
static void assign_wxAuiSimpleTabArt(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxAuiSimpleTabArt *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxAuiSimpleTabArt *>(sipSrc);
}


extern "C" {static void *copy_wxAuiSimpleTabArt(const void *, SIP_SSIZE_T);}
static void *copy_wxAuiSimpleTabArt(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxAuiSimpleTabArt(reinterpret_cast<const  ::wxAuiSimpleTabArt *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxAuiSimpleTabArt(sipSimpleWrapper *);}
static void dealloc_wxAuiSimpleTabArt(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxAuiSimpleTabArt *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxAuiSimpleTabArt(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxAuiSimpleTabArt(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxAuiSimpleTabArt(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxAuiSimpleTabArt *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiSimpleTabArt();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxAuiSimpleTabArt* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxAuiSimpleTabArt, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiSimpleTabArt(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxAuiSimpleTabArt[] = {{30, 255, 1}};


static PyMethodDef methods_wxAuiSimpleTabArt[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxAuiSimpleTabArt_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_Clone)},
    {SIP_MLNAME_CAST(sipName_DrawBackground), SIP_MLMETH_CAST(meth_wxAuiSimpleTabArt_DrawBackground), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_DrawBackground)},
    {SIP_MLNAME_CAST(sipName_DrawButton), SIP_MLMETH_CAST(meth_wxAuiSimpleTabArt_DrawButton), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_DrawButton)},
    {SIP_MLNAME_CAST(sipName_DrawTab), SIP_MLMETH_CAST(meth_wxAuiSimpleTabArt_DrawTab), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_DrawTab)},
    {SIP_MLNAME_CAST(sipName_GetBestTabCtrlSize), meth_wxAuiSimpleTabArt_GetBestTabCtrlSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_GetBestTabCtrlSize)},
    {SIP_MLNAME_CAST(sipName_GetIndentSize), meth_wxAuiSimpleTabArt_GetIndentSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_GetIndentSize)},
    {SIP_MLNAME_CAST(sipName_GetTabSize), SIP_MLMETH_CAST(meth_wxAuiSimpleTabArt_GetTabSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_GetTabSize)},
    {SIP_MLNAME_CAST(sipName_SetActiveColour), SIP_MLMETH_CAST(meth_wxAuiSimpleTabArt_SetActiveColour), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_SetActiveColour)},
    {SIP_MLNAME_CAST(sipName_SetColour), SIP_MLMETH_CAST(meth_wxAuiSimpleTabArt_SetColour), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_SetColour)},
    {SIP_MLNAME_CAST(sipName_SetFlags), SIP_MLMETH_CAST(meth_wxAuiSimpleTabArt_SetFlags), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_SetFlags)},
    {SIP_MLNAME_CAST(sipName_SetMeasuringFont), SIP_MLMETH_CAST(meth_wxAuiSimpleTabArt_SetMeasuringFont), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_SetMeasuringFont)},
    {SIP_MLNAME_CAST(sipName_SetNormalFont), SIP_MLMETH_CAST(meth_wxAuiSimpleTabArt_SetNormalFont), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_SetNormalFont)},
    {SIP_MLNAME_CAST(sipName_SetSelectedFont), SIP_MLMETH_CAST(meth_wxAuiSimpleTabArt_SetSelectedFont), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_SetSelectedFont)},
    {SIP_MLNAME_CAST(sipName_SetSizingInfo), SIP_MLMETH_CAST(meth_wxAuiSimpleTabArt_SetSizingInfo), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_SetSizingInfo)},
    {SIP_MLNAME_CAST(sipName_ShowDropDown), SIP_MLMETH_CAST(meth_wxAuiSimpleTabArt_ShowDropDown), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiSimpleTabArt_ShowDropDown)}
};

sipVariableDef variables_wxAuiSimpleTabArt[] = {
    {PropertyVariable, sipName_IndentSize, &methods_wxAuiSimpleTabArt[5], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxAuiSimpleTabArt, "AuiSimpleTabArt()\n"
"\n"
"Another standard tab art provider for wxAuiNotebook.");


sipClassTypeDef sipTypeDef__aui_wxAuiSimpleTabArt = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxAuiSimpleTabArt,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_AuiSimpleTabArt,
        {0, 0, 1},
        15, methods_wxAuiSimpleTabArt,
        0, SIP_NULLPTR,
        1, variables_wxAuiSimpleTabArt,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxAuiSimpleTabArt,
    -1,
    -1,
    supers_wxAuiSimpleTabArt,
    SIP_NULLPTR,
    init_type_wxAuiSimpleTabArt,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxAuiSimpleTabArt,
    assign_wxAuiSimpleTabArt,
    array_wxAuiSimpleTabArt,
    copy_wxAuiSimpleTabArt,
    release_wxAuiSimpleTabArt,
    cast_wxAuiSimpleTabArt,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
