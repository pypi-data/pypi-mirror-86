/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_adv.h"

        #include <wx/wizard.h>

        #include <wx/window.h>
        #include <wx/bitmap.h>
        #include <wx/gdicmn.h>
        #include <wx/wizard.h>
        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/colour.h>
        #include <wx/sizer.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/dialog.h>
        #include <wx/iconbndl.h>
        #include <wx/icon.h>
        #include <wx/sizer.h>
        #include <wx/toplevel.h>
            #include <wx/toplevel.h>
        #include <wx/region.h>
        #include <wx/graphics.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/font.h>
        
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxWizard : public  ::wxWizard
{
public:
    sipwxWizard();
    sipwxWizard( ::wxWindow*,int,const  ::wxString&,const  ::wxBitmap&,const  ::wxPoint&,long);
    virtual ~sipwxWizard();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool ShowPage( ::wxWizardPage*,bool) SIP_OVERRIDE;
    void SetPageSize(const  ::wxSize&) SIP_OVERRIDE;
    void SetBorder(int) SIP_OVERRIDE;
    bool RunWizard( ::wxWizardPage*) SIP_OVERRIDE;
    bool HasPrevPage( ::wxWizardPage*) SIP_OVERRIDE;
    bool HasNextPage( ::wxWizardPage*) SIP_OVERRIDE;
     ::wxSize GetPageSize() const SIP_OVERRIDE;
     ::wxSizer* GetPageAreaSizer() const SIP_OVERRIDE;
     ::wxWizardPage* GetCurrentPage() const SIP_OVERRIDE;
    void FitToPage(const  ::wxWizardPage*) SIP_OVERRIDE;
    bool ShouldPreventAppExit() const SIP_OVERRIDE;
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
     ::wxSize DoGetBorderSize() const SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;
     ::wxWindow* GetContentWindow() const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxWizard(const sipwxWizard &);
    sipwxWizard &operator = (const sipwxWizard &);

    char sipPyMethods[52];
};

sipwxWizard::sipwxWizard():  ::wxWizard(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxWizard::sipwxWizard( ::wxWindow*parent,int id,const  ::wxString& title,const  ::wxBitmap& bitmap,const  ::wxPoint& pos,long style):  ::wxWizard(parent,id,title,bitmap,pos,style), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxWizard::~sipwxWizard()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxWizard::ShowPage( ::wxWizardPage*page,bool goingForward)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_ShowPage);

    if (!sipMeth)
        return  ::wxWizard::ShowPage(page,goingForward);

    extern bool sipVH__adv_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWizardPage*,bool);

    return sipVH__adv_67(sipGILState, 0, sipPySelf, sipMeth, page, goingForward);
}

void sipwxWizard::SetPageSize(const  ::wxSize& sizePage)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_SetPageSize);

    if (!sipMeth)
    {
         ::wxWizard::SetPageSize(sizePage);
        return;
    }

    extern void sipVH__adv_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__adv_66(sipGILState, 0, sipPySelf, sipMeth, sizePage);
}

void sipwxWizard::SetBorder(int border)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_SetBorder);

    if (!sipMeth)
    {
         ::wxWizard::SetBorder(border);
        return;
    }

    extern void sipVH__adv_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__adv_57(sipGILState, 0, sipPySelf, sipMeth, border);
}

bool sipwxWizard::RunWizard( ::wxWizardPage*firstPage)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_RunWizard);

    if (!sipMeth)
        return  ::wxWizard::RunWizard(firstPage);

    extern bool sipVH__adv_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWizardPage*);

    return sipVH__adv_65(sipGILState, 0, sipPySelf, sipMeth, firstPage);
}

bool sipwxWizard::HasPrevPage( ::wxWizardPage*page)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_HasPrevPage);

    if (!sipMeth)
        return  ::wxWizard::HasPrevPage(page);

    extern bool sipVH__adv_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWizardPage*);

    return sipVH__adv_65(sipGILState, 0, sipPySelf, sipMeth, page);
}

bool sipwxWizard::HasNextPage( ::wxWizardPage*page)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_HasNextPage);

    if (!sipMeth)
        return  ::wxWizard::HasNextPage(page);

    extern bool sipVH__adv_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWizardPage*);

    return sipVH__adv_65(sipGILState, 0, sipPySelf, sipMeth, page);
}

 ::wxSize sipwxWizard::GetPageSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_GetPageSize);

    if (!sipMeth)
        return  ::wxWizard::GetPageSize();

    extern  ::wxSize sipVH__adv_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_23(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSizer* sipwxWizard::GetPageAreaSizer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_GetPageAreaSizer);

    if (!sipMeth)
        return  ::wxWizard::GetPageAreaSizer();

    extern  ::wxSizer* sipVH__adv_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_64(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWizardPage* sipwxWizard::GetCurrentPage() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_GetCurrentPage);

    if (!sipMeth)
        return  ::wxWizard::GetCurrentPage();

    extern  ::wxWizardPage* sipVH__adv_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_62(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxWizard::FitToPage(const  ::wxWizardPage*firstPage)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_FitToPage);

    if (!sipMeth)
    {
         ::wxWizard::FitToPage(firstPage);
        return;
    }

    extern void sipVH__adv_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxWizardPage*);

    sipVH__adv_63(sipGILState, 0, sipPySelf, sipMeth, firstPage);
}

bool sipwxWizard::ShouldPreventAppExit() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_ShouldPreventAppExit);

    if (!sipMeth)
        return  ::wxWizard::ShouldPreventAppExit();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxWizard::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxWizard::DoGetBestClientSize();

    extern  ::wxSize sipVH__adv_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_23(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxWizard::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxWizard::DoGetBestSize();

    extern  ::wxSize sipVH__adv_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_23(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxWizard::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxWizard::DoThaw();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxWizard::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxWizard::DoFreeze();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxWizard::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxWizard::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__adv_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_26(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxWizard::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxWizard::GetDefaultBorder();

    extern  ::wxBorder sipVH__adv_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_26(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxWizard::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxWizard::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__adv_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__adv_25(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxWizard::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxWizard::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__adv_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__adv_24(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

 ::wxSize sipwxWizard::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,SIP_NULLPTR,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxWizard::DoGetBorderSize();

    extern  ::wxSize sipVH__adv_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_23(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxWizard::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxWizard::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__adv_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__adv_22(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxWizard::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxWizard::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__adv_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__adv_21(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxWizard::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxWizard::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__adv_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__adv_20(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxWizard::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,SIP_NULLPTR,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxWizard::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__adv_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__adv_19(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxWizard::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,SIP_NULLPTR,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxWizard::DoGetSize(width,height);
        return;
    }

    extern void sipVH__adv_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__adv_19(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxWizard::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxWizard::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__adv_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__adv_19(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxWizard::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxWizard::DoEnable(enable);
        return;
    }

    extern void sipVH__adv_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__adv_14(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxWizard::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxWizard::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__adv_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_7(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxWizard::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxWizard::OnInternalIdle();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxWizard::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxWizard::InitDialog();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxWizard::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxWizard::InheritAttributes();
        return;
    }

    extern void sipVH__adv_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__adv_4(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxWizard::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_Destroy);

    if (!sipMeth)
        return  ::wxWizard::Destroy();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxWizard::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_Validate);

    if (!sipMeth)
        return  ::wxWizard::Validate();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxWizard::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxWizard::TransferDataToWindow();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxWizard::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxWizard::TransferDataFromWindow();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxWizard::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxWizard::SetValidator(validator);
        return;
    }

    extern void sipVH__adv_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__adv_18(sipGILState, 0, sipPySelf, sipMeth, validator);
}

 ::wxValidator* sipwxWizard::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxWizard::GetValidator();

    extern  ::wxValidator* sipVH__adv_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_17(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxWizard::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,SIP_NULLPTR,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxWizard::ShouldInheritColours();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxWizard::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxWizard::HasTransparentBackground();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxWizard::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,SIP_NULLPTR,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxWizard::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__adv_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxWizard::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,SIP_NULLPTR,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxWizard::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__adv_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__adv_15(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxWizard::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,SIP_NULLPTR,sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxWizard::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__adv_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__adv_14(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

void sipwxWizard::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,SIP_NULLPTR,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxWizard::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__adv_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__adv_14(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxWizard::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxWizard::AcceptsFocusRecursively();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxWizard::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxWizard::AcceptsFocusFromKeyboard();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxWizard::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,SIP_NULLPTR,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxWizard::AcceptsFocus();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxWizard::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,SIP_NULLPTR,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxWizard::TryAfter(event);

    extern bool sipVH__adv_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__adv_13(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxWizard::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,SIP_NULLPTR,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxWizard::TryBefore(event);

    extern bool sipVH__adv_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__adv_13(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxWizard::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,SIP_NULLPTR,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxWizard::ProcessEvent(event);

    extern bool sipVH__adv_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__adv_13(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxWizard::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,SIP_NULLPTR,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxWizard::AddChild(child);
        return;
    }

    extern void sipVH__adv_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__adv_12(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxWizard::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,SIP_NULLPTR,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxWizard::RemoveChild(child);
        return;
    }

    extern void sipVH__adv_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__adv_12(sipGILState, 0, sipPySelf, sipMeth, child);
}

 ::wxWindow* sipwxWizard::GetContentWindow() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,SIP_NULLPTR,sipName_GetContentWindow);

    if (!sipMeth)
        return  ::wxWizard::GetContentWindow();

    extern  ::wxWindow* sipVH__adv_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_7(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxWizard::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxWizard::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxDialog::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxWizard::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxDialog::DoEnable(enable) : DoEnable(enable));
}

void sipwxWizard::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxDialog::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxWizard::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxDialog::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxWizard::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxDialog::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxWizard::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDialog::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxWizard::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDialog::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxWizard::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxDialog::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxWizard::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxDialog::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxWizard::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxDialog::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxWizard::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDialog::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxWizard::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxDialog::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxWizard::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxDialog::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxWizard::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDialog::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxWizard::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDialog::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxWizard::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxDialog::DoFreeze() : DoFreeze());
}

void sipwxWizard::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxDialog::DoThaw() : DoThaw());
}

bool sipwxWizard::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxDialog::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxWizard::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxDialog::TryBefore(event) : TryBefore(event));
}

bool sipwxWizard::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxDialog::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxWizard_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxWizard_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxWizard_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxWizard, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_ProcessEvent, doc_wxWizard_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxWizard_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxWizard, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoEnable, doc_wxWizard_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxWizard_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxWizard *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoGetPosition, doc_wxWizard_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxWizard_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxWizard *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoGetSize, doc_wxWizard_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxWizard_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxWizard *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoGetClientSize, doc_wxWizard_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxWizard_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoGetBestSize, doc_wxWizard_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxWizard_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoGetBestClientSize, doc_wxWizard_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxWizard_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxWizard, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoSetSize, doc_wxWizard_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxWizard_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxWizard, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoSetClientSize, doc_wxWizard_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxWizard_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxWizard, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoSetSizeHints, doc_wxWizard_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxWizard_DoGetBorderSize(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoGetBorderSize, doc_wxWizard_DoGetBorderSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxWizard_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxWizard, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoMoveWindow, doc_wxWizard_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxWizard_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxWizard, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoSetWindowVariant, doc_wxWizard_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxWizard_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_GetDefaultBorder, doc_wxWizard_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxWizard_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_GetDefaultBorderForControl, doc_wxWizard_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxWizard_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoFreeze, doc_wxWizard_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxWizard_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_DoThaw, doc_wxWizard_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxWizard_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_HasTransparentBackground, doc_wxWizard_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxWizard_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxWizard, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_TryBefore, doc_wxWizard_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxWizard_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxWizard, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_TryAfter, doc_wxWizard_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_Create, "Create(parent, id=wx.ID_ANY, title=wx.EmptyString, bitmap=wx.NullBitmap, pos=wx.DefaultPosition, style=wx.DEFAULT_DIALOG_STYLE) -> bool\n"
"\n"
"Creates the wizard dialog.");

extern "C" {static PyObject *meth_wxWizard_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* parent;
        int id = wxID_ANY;
        const  ::wxString& titledef = wxEmptyString;
        const  ::wxString* title = &titledef;
        int titleState = 0;
        const  ::wxBitmap& bitmapdef = wxNullBitmap;
        const  ::wxBitmap* bitmap = &bitmapdef;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        long style = wxDEFAULT_DIALOG_STYLE;
        sipWrapper *sipOwner = SIP_NULLPTR;
         ::wxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_title,
            sipName_bitmap,
            sipName_pos,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|iJ1J9J1l", &sipSelf, sipType_wxWizard, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxString,&title, &titleState, sipType_wxBitmap, &bitmap, sipType_wxPoint, &pos, &posState, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*title,*bitmap,*pos,style);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_FitToPage, "FitToPage(firstPage)\n"
"\n"
"This method is obsolete, use GetPageAreaSizer() instead.");

extern "C" {static PyObject *meth_wxWizard_FitToPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_FitToPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxWizardPage* firstPage;
         ::wxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_firstPage,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxWizard, &sipCpp, sipType_wxWizardPage, &firstPage))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxWizard::FitToPage(firstPage) : sipCpp->FitToPage(firstPage));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_FitToPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_GetBitmap, "GetBitmap() -> wx.Bitmap\n"
"\n"
"Returns the bitmap used for the wizard.");

extern "C" {static PyObject *meth_wxWizard_GetBitmap(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_GetBitmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetBitmap());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_GetBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_GetBitmapBackgroundColour, "GetBitmapBackgroundColour() -> wx.Colour\n"
"\n"
"Returns the colour that should be used to fill the area not taken up\n"
"by the wizard or page bitmap, if a non-zero bitmap placement flag has\n"
"been set.");

extern "C" {static PyObject *meth_wxWizard_GetBitmapBackgroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_GetBitmapBackgroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetBitmapBackgroundColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_GetBitmapBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_GetBitmapPlacement, "GetBitmapPlacement() -> int\n"
"\n"
"Returns the flags indicating how the wizard or page bitmap should be\n"
"expanded and positioned to fit the page height.");

extern "C" {static PyObject *meth_wxWizard_GetBitmapPlacement(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_GetBitmapPlacement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetBitmapPlacement();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_GetBitmapPlacement, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_GetCurrentPage, "GetCurrentPage() -> WizardPage\n"
"\n"
"Get the current page while the wizard is running.");

extern "C" {static PyObject *meth_wxWizard_GetCurrentPage(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_GetCurrentPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
             ::wxWizardPage*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxWizard::GetCurrentPage() : sipCpp->GetCurrentPage());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWizardPage,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_GetCurrentPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_GetMinimumBitmapWidth, "GetMinimumBitmapWidth() -> int\n"
"\n"
"Returns the minimum width for the bitmap that will be constructed to\n"
"contain the actual wizard or page bitmap if a non-zero bitmap\n"
"placement flag has been set.");

extern "C" {static PyObject *meth_wxWizard_GetMinimumBitmapWidth(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_GetMinimumBitmapWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetMinimumBitmapWidth();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_GetMinimumBitmapWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_GetPageAreaSizer, "GetPageAreaSizer() -> wx.Sizer\n"
"\n"
"Returns pointer to page area sizer.");

extern "C" {static PyObject *meth_wxWizard_GetPageAreaSizer(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_GetPageAreaSizer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
             ::wxSizer*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxWizard::GetPageAreaSizer() : sipCpp->GetPageAreaSizer());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxSizer,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_GetPageAreaSizer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_GetPageSize, "GetPageSize() -> wx.Size\n"
"\n"
"Returns the size available for the pages.");

extern "C" {static PyObject *meth_wxWizard_GetPageSize(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_GetPageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize((sipSelfWasArg ? sipCpp-> ::wxWizard::GetPageSize() : sipCpp->GetPageSize()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_GetPageSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_HasNextPage, "HasNextPage(page) -> bool\n"
"\n"
"Return true if this page is not the last one in the wizard.");

extern "C" {static PyObject *meth_wxWizard_HasNextPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_HasNextPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWizardPage* page;
         ::wxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxWizard, &sipCpp, sipType_wxWizardPage, &page))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxWizard::HasNextPage(page) : sipCpp->HasNextPage(page));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_HasNextPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_HasPrevPage, "HasPrevPage(page) -> bool\n"
"\n"
"Returns true if this page is not the first one in the wizard.");

extern "C" {static PyObject *meth_wxWizard_HasPrevPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_HasPrevPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWizardPage* page;
         ::wxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxWizard, &sipCpp, sipType_wxWizardPage, &page))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxWizard::HasPrevPage(page) : sipCpp->HasPrevPage(page));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_HasPrevPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_RunWizard, "RunWizard(firstPage) -> bool\n"
"\n"
"Executes the wizard starting from the given page, returning true if it\n"
"was successfully finished or false if user cancelled it.");

extern "C" {static PyObject *meth_wxWizard_RunWizard(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_RunWizard(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWizardPage* firstPage;
         ::wxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_firstPage,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxWizard, &sipCpp, sipType_wxWizardPage, &firstPage))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxWizard::RunWizard(firstPage) : sipCpp->RunWizard(firstPage));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_RunWizard, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_SetBitmap, "SetBitmap(bitmap)\n"
"\n"
"Sets the bitmap used for the wizard.");

extern "C" {static PyObject *meth_wxWizard_SetBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_SetBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxBitmap* bitmap;
         ::wxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxWizard, &sipCpp, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmap(*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_SetBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_SetBitmapBackgroundColour, "SetBitmapBackgroundColour(colour)\n"
"\n"
"Sets the colour that should be used to fill the area not taken up by\n"
"the wizard or page bitmap, if a non-zero bitmap placement flag has\n"
"been set.");

extern "C" {static PyObject *meth_wxWizard_SetBitmapBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_SetBitmapBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* colour;
        int colourState = 0;
         ::wxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colour,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxWizard, &sipCpp, sipType_wxColour, &colour, &colourState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmapBackgroundColour(*colour);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(colour),sipType_wxColour,colourState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_SetBitmapBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_SetBitmapPlacement, "SetBitmapPlacement(placement)\n"
"\n"
"Sets the flags indicating how the wizard or page bitmap should be\n"
"expanded and positioned to fit the page height.");

extern "C" {static PyObject *meth_wxWizard_SetBitmapPlacement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_SetBitmapPlacement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int placement;
         ::wxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_placement,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxWizard, &sipCpp, &placement))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmapPlacement(placement);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_SetBitmapPlacement, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_SetBorder, "SetBorder(border)\n"
"\n"
"Sets width of border around page area.");

extern "C" {static PyObject *meth_wxWizard_SetBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_SetBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int border;
         ::wxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_border,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxWizard, &sipCpp, &border))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxWizard::SetBorder(border) : sipCpp->SetBorder(border));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_SetBorder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_SetMinimumBitmapWidth, "SetMinimumBitmapWidth(width)\n"
"\n"
"Sets the minimum width for the bitmap that will be constructed to\n"
"contain the actual wizard or page bitmap if a non-zero bitmap\n"
"placement flag has been set.");

extern "C" {static PyObject *meth_wxWizard_SetMinimumBitmapWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_SetMinimumBitmapWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int width;
         ::wxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxWizard, &sipCpp, &width))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMinimumBitmapWidth(width);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_SetMinimumBitmapWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_SetPageSize, "SetPageSize(sizePage)\n"
"\n"
"Sets the minimal size to be made available for the wizard pages.");

extern "C" {static PyObject *meth_wxWizard_SetPageSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_SetPageSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxSize* sizePage;
        int sizePageState = 0;
         ::wxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sizePage,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxWizard, &sipCpp, sipType_wxSize, &sizePage, &sizePageState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxWizard::SetPageSize(*sizePage) : sipCpp->SetPageSize(*sizePage));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(sizePage),sipType_wxSize,sizePageState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_SetPageSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes");

extern "C" {static PyObject *meth_wxWizard_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxWizard::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_ShowPage, "ShowPage(page, goingForward=True) -> bool\n"
"\n"
"Show the given wizard page.");

extern "C" {static PyObject *meth_wxWizard_ShowPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWizard_ShowPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWizardPage* page;
        bool goingForward = 1;
         ::wxWizard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
            sipName_goingForward,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|b", &sipSelf, sipType_wxWizard, &sipCpp, sipType_wxWizardPage, &page, &goingForward))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxWizard::ShowPage(page,goingForward) : sipCpp->ShowPage(page,goingForward));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_ShowPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxWizard_IsRunning, "IsRunning() -> bool");

extern "C" {static PyObject *meth_wxWizard_IsRunning(PyObject *, PyObject *);}
static PyObject *meth_wxWizard_IsRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWizard, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsRunning();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_Wizard, sipName_IsRunning, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxWizard(void *, const sipTypeDef *);}
static void *cast_wxWizard(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxWizard *sipCpp = reinterpret_cast< ::wxWizard *>(sipCppV);

    if (targetType == sipType_wxDialog)
        return static_cast< ::wxDialog *>(sipCpp);

    if (targetType == sipType_wxTopLevelWindow)
        return static_cast< ::wxTopLevelWindow *>(sipCpp);

    if (targetType == sipType_wxNonOwnedWindow)
        return static_cast< ::wxNonOwnedWindow *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxWizard(void *, int);}
static void release_wxWizard(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxWizard *>(sipCppV);
    else
        delete reinterpret_cast< ::wxWizard *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxWizard(Py_ssize_t);}
static void *array_wxWizard(Py_ssize_t sipNrElem)
{
    return new  ::wxWizard[sipNrElem];
}


extern "C" {static void dealloc_wxWizard(sipSimpleWrapper *);}
static void dealloc_wxWizard(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxWizard *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxWizard(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxWizard(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxWizard(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxWizard *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxWizard();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
        int id = wxID_ANY;
        const  ::wxString& titledef = wxEmptyString;
        const  ::wxString* title = &titledef;
        int titleState = 0;
        const  ::wxBitmap& bitmapdef = wxNullBitmap;
        const  ::wxBitmap* bitmap = &bitmapdef;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        long style = wxDEFAULT_DIALOG_STYLE;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_title,
            sipName_bitmap,
            sipName_pos,
            sipName_style,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J9J1l", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxString,&title, &titleState, sipType_wxBitmap, &bitmap, sipType_wxPoint, &pos, &posState, &style))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxWizard(parent,id,*title,*bitmap,*pos,style);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxWizard[] = {{18, 0, 1}};


static PyMethodDef methods_wxWizard[] = {
    {SIP_MLNAME_CAST(sipName_Create), SIP_MLMETH_CAST(meth_wxWizard_Create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWizard_Create)},
    {SIP_MLNAME_CAST(sipName_DoEnable), SIP_MLMETH_CAST(meth_wxWizard_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoFreeze), meth_wxWizard_DoFreeze, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), meth_wxWizard_DoGetBestClientSize, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), meth_wxWizard_DoGetBestSize, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), meth_wxWizard_DoGetBorderSize, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), SIP_MLMETH_CAST(meth_wxWizard_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), SIP_MLMETH_CAST(meth_wxWizard_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoGetSize), SIP_MLMETH_CAST(meth_wxWizard_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), SIP_MLMETH_CAST(meth_wxWizard_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), SIP_MLMETH_CAST(meth_wxWizard_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoSetSize), SIP_MLMETH_CAST(meth_wxWizard_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), SIP_MLMETH_CAST(meth_wxWizard_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), SIP_MLMETH_CAST(meth_wxWizard_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_DoThaw), meth_wxWizard_DoThaw, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_FitToPage), SIP_MLMETH_CAST(meth_wxWizard_FitToPage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWizard_FitToPage)},
    {SIP_MLNAME_CAST(sipName_GetBitmap), meth_wxWizard_GetBitmap, METH_VARARGS, SIP_MLDOC_CAST(doc_wxWizard_GetBitmap)},
    {SIP_MLNAME_CAST(sipName_GetBitmapBackgroundColour), meth_wxWizard_GetBitmapBackgroundColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxWizard_GetBitmapBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_GetBitmapPlacement), meth_wxWizard_GetBitmapPlacement, METH_VARARGS, SIP_MLDOC_CAST(doc_wxWizard_GetBitmapPlacement)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), SIP_MLMETH_CAST(meth_wxWizard_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWizard_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetCurrentPage), meth_wxWizard_GetCurrentPage, METH_VARARGS, SIP_MLDOC_CAST(doc_wxWizard_GetCurrentPage)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), meth_wxWizard_GetDefaultBorder, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), meth_wxWizard_GetDefaultBorderForControl, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_GetMinimumBitmapWidth), meth_wxWizard_GetMinimumBitmapWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_wxWizard_GetMinimumBitmapWidth)},
    {SIP_MLNAME_CAST(sipName_GetPageAreaSizer), meth_wxWizard_GetPageAreaSizer, METH_VARARGS, SIP_MLDOC_CAST(doc_wxWizard_GetPageAreaSizer)},
    {SIP_MLNAME_CAST(sipName_GetPageSize), meth_wxWizard_GetPageSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxWizard_GetPageSize)},
    {SIP_MLNAME_CAST(sipName_HasNextPage), SIP_MLMETH_CAST(meth_wxWizard_HasNextPage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWizard_HasNextPage)},
    {SIP_MLNAME_CAST(sipName_HasPrevPage), SIP_MLMETH_CAST(meth_wxWizard_HasPrevPage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWizard_HasPrevPage)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), meth_wxWizard_HasTransparentBackground, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_IsRunning), meth_wxWizard_IsRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_wxWizard_IsRunning)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), SIP_MLMETH_CAST(meth_wxWizard_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_RunWizard), SIP_MLMETH_CAST(meth_wxWizard_RunWizard), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWizard_RunWizard)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), meth_wxWizard_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_SetBitmap), SIP_MLMETH_CAST(meth_wxWizard_SetBitmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWizard_SetBitmap)},
    {SIP_MLNAME_CAST(sipName_SetBitmapBackgroundColour), SIP_MLMETH_CAST(meth_wxWizard_SetBitmapBackgroundColour), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWizard_SetBitmapBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_SetBitmapPlacement), SIP_MLMETH_CAST(meth_wxWizard_SetBitmapPlacement), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWizard_SetBitmapPlacement)},
    {SIP_MLNAME_CAST(sipName_SetBorder), SIP_MLMETH_CAST(meth_wxWizard_SetBorder), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWizard_SetBorder)},
    {SIP_MLNAME_CAST(sipName_SetMinimumBitmapWidth), SIP_MLMETH_CAST(meth_wxWizard_SetMinimumBitmapWidth), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWizard_SetMinimumBitmapWidth)},
    {SIP_MLNAME_CAST(sipName_SetPageSize), SIP_MLMETH_CAST(meth_wxWizard_SetPageSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWizard_SetPageSize)},
    {SIP_MLNAME_CAST(sipName_ShowPage), SIP_MLMETH_CAST(meth_wxWizard_ShowPage), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWizard_ShowPage)},
    {SIP_MLNAME_CAST(sipName_TryAfter), SIP_MLMETH_CAST(meth_wxWizard_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_TryBefore), SIP_MLMETH_CAST(meth_wxWizard_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR}
};

sipVariableDef variables_wxWizard[] = {
    {PropertyVariable, sipName_PageSize, &methods_wxWizard[25], &methods_wxWizard[38], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_PageAreaSizer, &methods_wxWizard[24], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_MinimumBitmapWidth, &methods_wxWizard[23], &methods_wxWizard[37], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CurrentPage, &methods_wxWizard[20], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BitmapPlacement, &methods_wxWizard[18], &methods_wxWizard[35], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BitmapBackgroundColour, &methods_wxWizard[17], &methods_wxWizard[34], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Bitmap, &methods_wxWizard[16], &methods_wxWizard[33], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxWizard, "Wizard()\n"
"Wizard(parent, id=wx.ID_ANY, title=wx.EmptyString, bitmap=wx.NullBitmap, pos=wx.DefaultPosition, style=wx.DEFAULT_DIALOG_STYLE)\n"
"\n"
"wxWizard is the central class for implementing 'wizard-like' dialogs.");


sipClassTypeDef sipTypeDef__adv_wxWizard = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxWizard,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_Wizard,
        {0, 0, 1},
        42, methods_wxWizard,
        0, SIP_NULLPTR,
        7, variables_wxWizard,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxWizard,
    -1,
    -1,
    supers_wxWizard,
    SIP_NULLPTR,
    init_type_wxWizard,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxWizard,
    SIP_NULLPTR,
    array_wxWizard,
    SIP_NULLPTR,
    release_wxWizard,
    cast_wxWizard,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
