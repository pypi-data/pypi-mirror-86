/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.24
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_grid.h"

        #include <wx/grid.h>

        #include <wx/gdicmn.h>
        #include <wx/grid.h>
        #include <wx/grid.h>
        #include <wx/dc.h>
        #include <wx/gdicmn.h>
        #include <wx/grid.h>


class sipwxGridCellBoolRenderer : public  ::wxGridCellBoolRenderer
{
public:
    sipwxGridCellBoolRenderer();
    virtual ~sipwxGridCellBoolRenderer();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxGridCellRenderer* Clone() const SIP_OVERRIDE;
    void Draw( ::wxGrid&, ::wxGridCellAttr&, ::wxDC&,const  ::wxRect&,int,int,bool) SIP_OVERRIDE;
     ::wxSize GetBestSize( ::wxGrid&, ::wxGridCellAttr&, ::wxDC&,int,int) SIP_OVERRIDE;
    int GetBestHeight( ::wxGrid&, ::wxGridCellAttr&, ::wxDC&,int,int,int) SIP_OVERRIDE;
    int GetBestWidth( ::wxGrid&, ::wxGridCellAttr&, ::wxDC&,int,int,int) SIP_OVERRIDE;
     ::wxSize GetMaxBestSize( ::wxGrid&, ::wxGridCellAttr&, ::wxDC&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxGridCellBoolRenderer(const sipwxGridCellBoolRenderer &);
    sipwxGridCellBoolRenderer &operator = (const sipwxGridCellBoolRenderer &);

    char sipPyMethods[6];
};

sipwxGridCellBoolRenderer::sipwxGridCellBoolRenderer():  ::wxGridCellBoolRenderer(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxGridCellBoolRenderer::~sipwxGridCellBoolRenderer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxGridCellRenderer* sipwxGridCellBoolRenderer::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_Clone);

    if (!sipMeth)
        return  ::wxGridCellBoolRenderer::Clone();

    extern  ::wxGridCellRenderer* sipVH__grid_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__grid_0(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxGridCellBoolRenderer::Draw( ::wxGrid& grid, ::wxGridCellAttr& attr, ::wxDC& dc,const  ::wxRect& rect,int row,int col,bool isSelected)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_Draw);

    if (!sipMeth)
    {
         ::wxGridCellBoolRenderer::Draw(grid,attr,dc,rect,row,col,isSelected);
        return;
    }

    extern void sipVH__grid_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGrid&, ::wxGridCellAttr&, ::wxDC&,const  ::wxRect&,int,int,bool);

    sipVH__grid_1(sipGILState, 0, sipPySelf, sipMeth, grid, attr, dc, rect, row, col, isSelected);
}

 ::wxSize sipwxGridCellBoolRenderer::GetBestSize( ::wxGrid& grid, ::wxGridCellAttr& attr, ::wxDC& dc,int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_GetBestSize);

    if (!sipMeth)
        return  ::wxGridCellBoolRenderer::GetBestSize(grid,attr,dc,row,col);

    extern  ::wxSize sipVH__grid_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGrid&, ::wxGridCellAttr&, ::wxDC&,int,int);

    return sipVH__grid_2(sipGILState, 0, sipPySelf, sipMeth, grid, attr, dc, row, col);
}

int sipwxGridCellBoolRenderer::GetBestHeight( ::wxGrid& grid, ::wxGridCellAttr& attr, ::wxDC& dc,int row,int col,int width)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_GetBestHeight);

    if (!sipMeth)
        return  ::wxGridCellBoolRenderer::GetBestHeight(grid,attr,dc,row,col,width);

    extern int sipVH__grid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGrid&, ::wxGridCellAttr&, ::wxDC&,int,int,int);

    return sipVH__grid_3(sipGILState, 0, sipPySelf, sipMeth, grid, attr, dc, row, col, width);
}

int sipwxGridCellBoolRenderer::GetBestWidth( ::wxGrid& grid, ::wxGridCellAttr& attr, ::wxDC& dc,int row,int col,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_GetBestWidth);

    if (!sipMeth)
        return  ::wxGridCellBoolRenderer::GetBestWidth(grid,attr,dc,row,col,height);

    extern int sipVH__grid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGrid&, ::wxGridCellAttr&, ::wxDC&,int,int,int);

    return sipVH__grid_3(sipGILState, 0, sipPySelf, sipMeth, grid, attr, dc, row, col, height);
}

 ::wxSize sipwxGridCellBoolRenderer::GetMaxBestSize( ::wxGrid& grid, ::wxGridCellAttr& attr, ::wxDC& dc)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_GetMaxBestSize);

    if (!sipMeth)
        return  ::wxGridCellBoolRenderer::GetMaxBestSize(grid,attr,dc);

    extern  ::wxSize sipVH__grid_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGrid&, ::wxGridCellAttr&, ::wxDC&);

    return sipVH__grid_4(sipGILState, 0, sipPySelf, sipMeth, grid, attr, dc);
}


PyDoc_STRVAR(doc_wxGridCellBoolRenderer_Clone, "Clone(self) -> GridCellRenderer");

extern "C" {static PyObject *meth_wxGridCellBoolRenderer_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxGridCellBoolRenderer_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxGridCellBoolRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridCellBoolRenderer, &sipCpp))
        {
             ::wxGridCellRenderer*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridCellBoolRenderer::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxGridCellRenderer,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridCellBoolRenderer, sipName_Clone, doc_wxGridCellBoolRenderer_Clone);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridCellBoolRenderer_Draw, "Draw(self, grid: Grid, attr: GridCellAttr, dc: DC, rect: Rect, row: int, col: int, isSelected: bool)");

extern "C" {static PyObject *meth_wxGridCellBoolRenderer_Draw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridCellBoolRenderer_Draw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGrid* grid;
         ::wxGridCellAttr* attr;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int row;
        int col;
        bool isSelected;
         ::wxGridCellBoolRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_grid,
            sipName_attr,
            sipName_dc,
            sipName_rect,
            sipName_row,
            sipName_col,
            sipName_isSelected,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J9J1iib", &sipSelf, sipType_wxGridCellBoolRenderer, &sipCpp, sipType_wxGrid, &grid, sipType_wxGridCellAttr, &attr, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &row, &col, &isSelected))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridCellBoolRenderer::Draw(*grid,*attr,*dc,*rect,row,col,isSelected) : sipCpp->Draw(*grid,*attr,*dc,*rect,row,col,isSelected));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_GridCellBoolRenderer, sipName_Draw, doc_wxGridCellBoolRenderer_Draw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridCellBoolRenderer_GetBestSize, "GetBestSize(self, grid: Grid, attr: GridCellAttr, dc: DC, row: int, col: int) -> Size");

extern "C" {static PyObject *meth_wxGridCellBoolRenderer_GetBestSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridCellBoolRenderer_GetBestSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGrid* grid;
         ::wxGridCellAttr* attr;
         ::wxDC* dc;
        int row;
        int col;
         ::wxGridCellBoolRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_grid,
            sipName_attr,
            sipName_dc,
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J9ii", &sipSelf, sipType_wxGridCellBoolRenderer, &sipCpp, sipType_wxGrid, &grid, sipType_wxGridCellAttr, &attr, sipType_wxDC, &dc, &row, &col))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize((sipSelfWasArg ? sipCpp-> ::wxGridCellBoolRenderer::GetBestSize(*grid,*attr,*dc,row,col) : sipCpp->GetBestSize(*grid,*attr,*dc,row,col)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_GridCellBoolRenderer, sipName_GetBestSize, doc_wxGridCellBoolRenderer_GetBestSize);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxGridCellBoolRenderer(void *, const sipTypeDef *);}
static void *cast_wxGridCellBoolRenderer(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxGridCellBoolRenderer *sipCpp = reinterpret_cast< ::wxGridCellBoolRenderer *>(sipCppV);

    if (targetType == sipType_wxGridCellRenderer)
        return static_cast< ::wxGridCellRenderer *>(sipCpp);

    if (targetType == sipType_wxClientDataContainer)
        return static_cast< ::wxClientDataContainer *>(sipCpp);

    if (targetType == sipType_wxRefCounter)
        return static_cast< ::wxRefCounter *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxGridCellBoolRenderer(void *, int);}
static void release_wxGridCellBoolRenderer(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxGridCellBoolRenderer *>(sipCppV);
    else
        delete reinterpret_cast< ::wxGridCellBoolRenderer *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxGridCellBoolRenderer(Py_ssize_t);}
static void *array_wxGridCellBoolRenderer(Py_ssize_t sipNrElem)
{
    return new  ::wxGridCellBoolRenderer[sipNrElem];
}


extern "C" {static void dealloc_wxGridCellBoolRenderer(sipSimpleWrapper *);}
static void dealloc_wxGridCellBoolRenderer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxGridCellBoolRenderer *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxGridCellBoolRenderer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxGridCellBoolRenderer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxGridCellBoolRenderer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxGridCellBoolRenderer *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxGridCellBoolRenderer();
            Py_END_ALLOW_THREADS

            *sipOwner = Py_None;

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxGridCellBoolRenderer[] = {{35, 255, 1}};


static PyMethodDef methods_wxGridCellBoolRenderer[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxGridCellBoolRenderer_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridCellBoolRenderer_Clone)},
    {SIP_MLNAME_CAST(sipName_Draw), SIP_MLMETH_CAST(meth_wxGridCellBoolRenderer_Draw), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridCellBoolRenderer_Draw)},
    {SIP_MLNAME_CAST(sipName_GetBestSize), SIP_MLMETH_CAST(meth_wxGridCellBoolRenderer_GetBestSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridCellBoolRenderer_GetBestSize)}
};

PyDoc_STRVAR(doc_wxGridCellBoolRenderer, "GridCellBoolRenderer()\n"
"\n"
"This class may be used to format boolean data in a cell.");


sipClassTypeDef sipTypeDef__grid_wxGridCellBoolRenderer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_CLASS,
        sipNameNr_wxGridCellBoolRenderer,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_GridCellBoolRenderer,
        {0, 0, 1},
        3, methods_wxGridCellBoolRenderer,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxGridCellBoolRenderer,
    -1,
    -1,
    supers_wxGridCellBoolRenderer,
    SIP_NULLPTR,
    init_type_wxGridCellBoolRenderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxGridCellBoolRenderer,
    SIP_NULLPTR,
    array_wxGridCellBoolRenderer,
    SIP_NULLPTR,
    release_wxGridCellBoolRenderer,
    cast_wxGridCellBoolRenderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
