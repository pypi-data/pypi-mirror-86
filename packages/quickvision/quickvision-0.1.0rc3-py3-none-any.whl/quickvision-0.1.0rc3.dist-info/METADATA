Metadata-Version: 2.1
Name: quickvision
Version: 0.1.0rc3
Summary: Computer Vision models and training
Home-page: UNKNOWN
Author: Aditya Oke
Author-email: okeaditya315@gmail.com
License: apache2
Download-URL: https://github.com/Quick-AI/quickvision
Project-URL: Bug Tracker, https://github.com/Quick-AI/quickvision/issues
Project-URL: Documentation, https://quick-ai.github.io/quickvision/
Project-URL: Source Code, https://github.com/Quick-AI/quickvision
Keywords: Deep Learning,PyTorch
Platform: UNKNOWN
Classifier: Environment :: Console
Classifier: Natural Language :: English
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Image Recognition
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: timm
Requires-Dist: pytorch-lightning
Requires-Dist: scipy

# Quickvision

- Faster Computer Vision.

<div align="center">

[![GitHub issues](https://img.shields.io/github/issues/Quick-AI/quickvision)](https://github.com/Quick-AI/quickvision/issues)
[![GitHub forks](https://img.shields.io/github/forks/Quick-AI/quickvision)](https://github.com/Quick-AI/quickvision/network)
[![GitHub stars](https://img.shields.io/github/stars/Quick-AI/quickvision)](https://github.com/Quick-AI/quickvision/stargazers)
[![GitHub license](https://img.shields.io/github/license/Quick-AI/quickvision)](https://github.com/Quick-AI/quickvision)
[![codecov](https://codecov.io/gh/Quick-AI/quickvision/branch/master/graph/badge.png?token=VAFPQTQK1I)](https://codecov.io/gh/Quick-AI/quickvision)

![PEP8](https://github.com/Quick-AI/quickvision/workflows/Check%20Code%20formatting/badge.png)
![CI Tests](https://github.com/Quick-AI/quickvision/workflows/CI%20Tests/badge.png)
![Docs](https://github.com/Quick-AI/quickvision/workflows/Deploy%20mkdocs/badge.png)
![PyPi Release](https://github.com/Quick-AI/quickvision/workflows/PyPi%20Release/badge.png)

</div>

![demo](/assets/demo.png)

### Install Quickvision

- Install directly from GitHub. Very soon it will be available over PyPi.

```
pip install -q git+https://github.com/Quick-AI/quickvision.git
```

## What is Quickvision?

- Quickvision makes Computer Vision tasks much faster and easier with PyTorch.

It provides: -

1. Easy to use torch native API, for `fit()`, `train_step()`, `val_step()` of models.
2. Easily customizable and configurable models with various backbones.
3. A complete torch native interface. All models are `nn.Module` all the training APIs are optional and not binded to models.
4. A lightning API which helps to accelerate training over multiple GPUs, TPUs.
5. A datasets API to common data format very easily and quickly to torch formats.
6. A minimal package, with very low dependencies.

- Train your models faster. Quickvision has already implmented the long learning in torch.

## Quickvision is just Torch!!

- Quickvision does not make you learn a new library. If you know PyTorch you are good to go!!!
- Quickvision does not abstract any code from torch, nor implements any custom classes over it.
- It keeps the data format in `Tensor` only. You don't need to convert it.

### Do you want just a model with some backbone configuration?

- Use model made by us. It's just a `nn.Module` which has Tensors only Input and Output format.
- Quickvision provides reference scripts too for training it!

### Do you want to train your model but not write lengthy loops?

- Just use our training methods such as `fit()`, `train_step()`, `val_step()`.

### Do you want multi GPU training but worried about model configuration?

- Just subclass the PyTorch Lightning model! 
- Implement the `train_step`, `val_step`.


