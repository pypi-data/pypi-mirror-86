# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _BoneEnhancementPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHessianGaussianImageFilterPython
else:
    import _itkHessianGaussianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHessianGaussianImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHessianGaussianImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.itkOffsetPython
import itk.itkIndexPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython

def itkHessianGaussianImageFilterID2_New():
    return itkHessianGaussianImageFilterID2.New()

class itkHessianGaussianImageFilterID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22):
    r"""Proxy of C++ itkHessianGaussianImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2_NormalizeAcrossScaleOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianGaussianImageFilterPython.delete_itkHessianGaussianImageFilterID2
    cast = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianGaussianImageFilterID2

        Create a new object of the class itkHessianGaussianImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianGaussianImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianGaussianImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianGaussianImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianGaussianImageFilterID2 in _itkHessianGaussianImageFilterPython:
_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2_swigregister(itkHessianGaussianImageFilterID2)
itkHessianGaussianImageFilterID2___New_orig__ = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2___New_orig__
itkHessianGaussianImageFilterID2_cast = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID2_cast


def itkHessianGaussianImageFilterID3_New():
    return itkHessianGaussianImageFilterID3.New()

class itkHessianGaussianImageFilterID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33):
    r"""Proxy of C++ itkHessianGaussianImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3_NormalizeAcrossScaleOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianGaussianImageFilterPython.delete_itkHessianGaussianImageFilterID3
    cast = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianGaussianImageFilterID3

        Create a new object of the class itkHessianGaussianImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianGaussianImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianGaussianImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianGaussianImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianGaussianImageFilterID3 in _itkHessianGaussianImageFilterPython:
_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3_swigregister(itkHessianGaussianImageFilterID3)
itkHessianGaussianImageFilterID3___New_orig__ = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3___New_orig__
itkHessianGaussianImageFilterID3_cast = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterID3_cast


def itkHessianGaussianImageFilterIF2_New():
    return itkHessianGaussianImageFilterIF2.New()

class itkHessianGaussianImageFilterIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22):
    r"""Proxy of C++ itkHessianGaussianImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2_NormalizeAcrossScaleOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianGaussianImageFilterPython.delete_itkHessianGaussianImageFilterIF2
    cast = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianGaussianImageFilterIF2

        Create a new object of the class itkHessianGaussianImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianGaussianImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianGaussianImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianGaussianImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianGaussianImageFilterIF2 in _itkHessianGaussianImageFilterPython:
_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2_swigregister(itkHessianGaussianImageFilterIF2)
itkHessianGaussianImageFilterIF2___New_orig__ = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2___New_orig__
itkHessianGaussianImageFilterIF2_cast = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF2_cast


def itkHessianGaussianImageFilterIF3_New():
    return itkHessianGaussianImageFilterIF3.New()

class itkHessianGaussianImageFilterIF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33):
    r"""Proxy of C++ itkHessianGaussianImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3_NormalizeAcrossScaleOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianGaussianImageFilterPython.delete_itkHessianGaussianImageFilterIF3
    cast = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianGaussianImageFilterIF3

        Create a new object of the class itkHessianGaussianImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianGaussianImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianGaussianImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianGaussianImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianGaussianImageFilterIF3 in _itkHessianGaussianImageFilterPython:
_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3_swigregister(itkHessianGaussianImageFilterIF3)
itkHessianGaussianImageFilterIF3___New_orig__ = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3___New_orig__
itkHessianGaussianImageFilterIF3_cast = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIF3_cast


def itkHessianGaussianImageFilterISS2_New():
    return itkHessianGaussianImageFilterISS2.New()

class itkHessianGaussianImageFilterISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22):
    r"""Proxy of C++ itkHessianGaussianImageFilterISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2_NormalizeAcrossScaleOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianGaussianImageFilterPython.delete_itkHessianGaussianImageFilterISS2
    cast = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianGaussianImageFilterISS2

        Create a new object of the class itkHessianGaussianImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianGaussianImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianGaussianImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianGaussianImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianGaussianImageFilterISS2 in _itkHessianGaussianImageFilterPython:
_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2_swigregister(itkHessianGaussianImageFilterISS2)
itkHessianGaussianImageFilterISS2___New_orig__ = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2___New_orig__
itkHessianGaussianImageFilterISS2_cast = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS2_cast


def itkHessianGaussianImageFilterISS3_New():
    return itkHessianGaussianImageFilterISS3.New()

class itkHessianGaussianImageFilterISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33):
    r"""Proxy of C++ itkHessianGaussianImageFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3_NormalizeAcrossScaleOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianGaussianImageFilterPython.delete_itkHessianGaussianImageFilterISS3
    cast = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianGaussianImageFilterISS3

        Create a new object of the class itkHessianGaussianImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianGaussianImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianGaussianImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianGaussianImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianGaussianImageFilterISS3 in _itkHessianGaussianImageFilterPython:
_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3_swigregister(itkHessianGaussianImageFilterISS3)
itkHessianGaussianImageFilterISS3___New_orig__ = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3___New_orig__
itkHessianGaussianImageFilterISS3_cast = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterISS3_cast


def itkHessianGaussianImageFilterIUC2_New():
    return itkHessianGaussianImageFilterIUC2.New()

class itkHessianGaussianImageFilterIUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22):
    r"""Proxy of C++ itkHessianGaussianImageFilterIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2_NormalizeAcrossScaleOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianGaussianImageFilterPython.delete_itkHessianGaussianImageFilterIUC2
    cast = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianGaussianImageFilterIUC2

        Create a new object of the class itkHessianGaussianImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianGaussianImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianGaussianImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianGaussianImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianGaussianImageFilterIUC2 in _itkHessianGaussianImageFilterPython:
_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2_swigregister(itkHessianGaussianImageFilterIUC2)
itkHessianGaussianImageFilterIUC2___New_orig__ = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2___New_orig__
itkHessianGaussianImageFilterIUC2_cast = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC2_cast


def itkHessianGaussianImageFilterIUC3_New():
    return itkHessianGaussianImageFilterIUC3.New()

class itkHessianGaussianImageFilterIUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33):
    r"""Proxy of C++ itkHessianGaussianImageFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3_NormalizeAcrossScaleOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianGaussianImageFilterPython.delete_itkHessianGaussianImageFilterIUC3
    cast = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianGaussianImageFilterIUC3

        Create a new object of the class itkHessianGaussianImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianGaussianImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianGaussianImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianGaussianImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianGaussianImageFilterIUC3 in _itkHessianGaussianImageFilterPython:
_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3_swigregister(itkHessianGaussianImageFilterIUC3)
itkHessianGaussianImageFilterIUC3___New_orig__ = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3___New_orig__
itkHessianGaussianImageFilterIUC3_cast = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUC3_cast


def itkHessianGaussianImageFilterIUS2_New():
    return itkHessianGaussianImageFilterIUS2.New()

class itkHessianGaussianImageFilterIUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22):
    r"""Proxy of C++ itkHessianGaussianImageFilterIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2_NormalizeAcrossScaleOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianGaussianImageFilterPython.delete_itkHessianGaussianImageFilterIUS2
    cast = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianGaussianImageFilterIUS2

        Create a new object of the class itkHessianGaussianImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianGaussianImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianGaussianImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianGaussianImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianGaussianImageFilterIUS2 in _itkHessianGaussianImageFilterPython:
_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2_swigregister(itkHessianGaussianImageFilterIUS2)
itkHessianGaussianImageFilterIUS2___New_orig__ = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2___New_orig__
itkHessianGaussianImageFilterIUS2_cast = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS2_cast


def itkHessianGaussianImageFilterIUS3_New():
    return itkHessianGaussianImageFilterIUS3.New()

class itkHessianGaussianImageFilterIUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33):
    r"""Proxy of C++ itkHessianGaussianImageFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3_NormalizeAcrossScaleOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianGaussianImageFilterPython.delete_itkHessianGaussianImageFilterIUS3
    cast = _swig_new_static_method(_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianGaussianImageFilterIUS3

        Create a new object of the class itkHessianGaussianImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianGaussianImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianGaussianImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianGaussianImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianGaussianImageFilterIUS3 in _itkHessianGaussianImageFilterPython:
_itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3_swigregister(itkHessianGaussianImageFilterIUS3)
itkHessianGaussianImageFilterIUS3___New_orig__ = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3___New_orig__
itkHessianGaussianImageFilterIUS3_cast = _itkHessianGaussianImageFilterPython.itkHessianGaussianImageFilterIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def hessian_gaussian_image_filter(*args, **kwargs):
    """Procedural interface for HessianGaussianImageFilter"""
    import itk
    instance = itk.HessianGaussianImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def hessian_gaussian_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HessianGaussianImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HessianGaussianImageFilter.values()[0]
    else:
        filter_object = itk.HessianGaussianImageFilter

    hessian_gaussian_image_filter.__doc__ = filter_object.__doc__
    hessian_gaussian_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    hessian_gaussian_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HessianGaussianImageFilter, itkTemplate.itkTemplate):
        hessian_gaussian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        hessian_gaussian_image_filter.__doc__ += "\n"
        hessian_gaussian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        hessian_gaussian_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



