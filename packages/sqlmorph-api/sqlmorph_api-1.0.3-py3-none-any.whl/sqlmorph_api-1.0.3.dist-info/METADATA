Metadata-Version: 2.1
Name: sqlmorph-api
Version: 1.0.3
Summary: SQLMorph translates from legacy SQL dialects to modern SQL dialects. This tool runs the translation in batch.
Home-page: https://www.phdata.io/sqlmorph/
Author: phData Internal Engineering
Author-email: sqlmorph-support@phdata.io
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: SQL
Classifier: Topic :: Database
Classifier: Operating System :: OS Independent
Requires-Python: >=3.2
Description-Content-Type: text/markdown

## How to Use SQLMorph

There are two primary ways to use the SQLMorph application, both of which require authentication via your [phData account](https://account.phdata.io):

- The [SQLMorph UI](https://sqlmorph.customer.phdata.io/)
- The [SQLMorph Python Script](https://pypi.org/project/sqlmorph-api/)

If you only need to run a few queries, the UI is going to be the easiest and most user friendly tool. However, if you have many queries, and want to run a batch job across a directory (recursively) or if you want to run an individual file through other scripted processes, SQLMorph also has a python script that can accomplish this.

### Using the Python Script

In order to interact with the script, you will have to retrieve your auth token from the UI. This can be done by navigating to the api page within the UI, and clicking the `Copy Auth Token` button.

Requirements for script:

- Python 3

At any point, if you'd like to view the parameters for the script, you can run your command with `python3 -m sqlmorph_api --help` and it will print the following:

```
usage: sqlmorph_api.py [-h] [--url URL] --source {mssql,hana,teradata,oracle,impala} --target {impala,snowflake} --auth-token AUTH --input INPUT

Utility for scripting access to the SQLMorph Api

optional arguments:
  -h, --help            show this help message and exit
  --url URL             SQLMorph API Url

required arguments:
  --source {mssql,hana,teradata,oracle,impala}
                        Source dialect
  --target {impala,snowflake}
                        Target dialect
  --auth-token AUTH     Okta Access Token
  --input INPUT         File or directory to translate
```

As you can see from this output, the script requires four input parameters, and you can optionally point the script at another environment besides production. The url flag defaults to production and should not need to be altered. Here are a couple example commands:

- Translate against an individual file
  - `python3 -m sqlmorph_api --source impala --target snowflake --auth-token <REDACTED_TOKEN> --input ./bin/statement.sql`
  - The above command will print to stdout the result of translating the `statement.sql` file. You can redirect this output as needed.
- Translate against a directory
  - `python3 -m sqlmorph_api --source impala --target snowflake --auth-token <REDACTED_TOKEN> --input ./bin/test`
  - The above command will take the input directory, walk every file in the directory, run a translation, and then create an output directory `<input>.<target>` with the same folder structure as the input directory. Each file in the new directory will have the target translation result. All errors will be printed to stdout at the end of the script.

While the python script runs, there is a lot of logging that takes place to stderr. If you would like to mute this, you can redirect stderr to `/dev/null`


