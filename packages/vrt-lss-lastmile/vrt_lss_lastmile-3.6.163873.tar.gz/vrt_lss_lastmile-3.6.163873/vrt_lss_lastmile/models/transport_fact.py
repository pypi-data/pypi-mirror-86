# coding: utf-8

"""
    VeeRoute.LSS Lastmile

    VeeRoute.LSS Lastmile API  # noqa: E501

    The version of the OpenAPI document: 3.6.163873
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_lss_lastmile.configuration import Configuration


class TransportFact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time': 'datetime',
        'transport_key': 'str',
        'position': 'TrackPoint'
    }

    attribute_map = {
        'time': 'time',
        'transport_key': 'transport_key',
        'position': 'position'
    }

    def __init__(self, time=None, transport_key=None, position=None, local_vars_configuration=None):  # noqa: E501
        """TransportFact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._time = None
        self._transport_key = None
        self._position = None
        self.discriminator = None

        self.time = time
        self.transport_key = transport_key
        self.position = position

    @property
    def time(self):
        """Gets the time of this TransportFact.  # noqa: E501

        Fact time in the [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6) format.  # noqa: E501

        :return: The time of this TransportFact.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TransportFact.

        Fact time in the [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6) format.  # noqa: E501

        :param time: The time of this TransportFact.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and time is None:  # noqa: E501
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def transport_key(self):
        """Gets the transport_key of this TransportFact.  # noqa: E501

        Transport's key.  # noqa: E501

        :return: The transport_key of this TransportFact.  # noqa: E501
        :rtype: str
        """
        return self._transport_key

    @transport_key.setter
    def transport_key(self, transport_key):
        """Sets the transport_key of this TransportFact.

        Transport's key.  # noqa: E501

        :param transport_key: The transport_key of this TransportFact.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and transport_key is None:  # noqa: E501
            raise ValueError("Invalid value for `transport_key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                transport_key is not None and len(transport_key) > 1024):
            raise ValueError("Invalid value for `transport_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                transport_key is not None and len(transport_key) < 1):
            raise ValueError("Invalid value for `transport_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._transport_key = transport_key

    @property
    def position(self):
        """Gets the position of this TransportFact.  # noqa: E501


        :return: The position of this TransportFact.  # noqa: E501
        :rtype: TrackPoint
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this TransportFact.


        :param position: The position of this TransportFact.  # noqa: E501
        :type: TrackPoint
        """

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportFact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransportFact):
            return True

        return self.to_dict() != other.to_dict()
