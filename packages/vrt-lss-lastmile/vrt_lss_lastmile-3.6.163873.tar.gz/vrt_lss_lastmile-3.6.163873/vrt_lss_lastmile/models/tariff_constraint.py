# coding: utf-8

"""
    VeeRoute.LSS Lastmile

    VeeRoute.LSS Lastmile API  # noqa: E501

    The version of the OpenAPI document: 3.6.163873
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_lss_lastmile.configuration import Configuration


class TariffConstraint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'stage_length': 'int',
        'cost_per_unit': 'float'
    }

    attribute_map = {
        'stage_length': 'stage_length',
        'cost_per_unit': 'cost_per_unit'
    }

    def __init__(self, stage_length=100000000, cost_per_unit=0.001, local_vars_configuration=None):  # noqa: E501
        """TariffConstraint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._stage_length = None
        self._cost_per_unit = None
        self.discriminator = None

        self.stage_length = stage_length
        self.cost_per_unit = cost_per_unit

    @property
    def stage_length(self):
        """Gets the stage_length of this TariffConstraint.  # noqa: E501

        Length of the paid period, minute for the performer, meters for the vehicle.  # noqa: E501

        :return: The stage_length of this TariffConstraint.  # noqa: E501
        :rtype: int
        """
        return self._stage_length

    @stage_length.setter
    def stage_length(self, stage_length):
        """Sets the stage_length of this TariffConstraint.

        Length of the paid period, minute for the performer, meters for the vehicle.  # noqa: E501

        :param stage_length: The stage_length of this TariffConstraint.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and stage_length is None:  # noqa: E501
            raise ValueError("Invalid value for `stage_length`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                stage_length is not None and stage_length > 100000000):  # noqa: E501
            raise ValueError("Invalid value for `stage_length`, must be a value less than or equal to `100000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                stage_length is not None and stage_length < 1):  # noqa: E501
            raise ValueError("Invalid value for `stage_length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._stage_length = stage_length

    @property
    def cost_per_unit(self):
        """Gets the cost_per_unit of this TariffConstraint.  # noqa: E501

        Cost within the paid period. for the performer - monetary unit per minute of work. for the vehicle - monetary unit per meter of track.   # noqa: E501

        :return: The cost_per_unit of this TariffConstraint.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_unit

    @cost_per_unit.setter
    def cost_per_unit(self, cost_per_unit):
        """Sets the cost_per_unit of this TariffConstraint.

        Cost within the paid period. for the performer - monetary unit per minute of work. for the vehicle - monetary unit per meter of track.   # noqa: E501

        :param cost_per_unit: The cost_per_unit of this TariffConstraint.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and cost_per_unit is None:  # noqa: E501
            raise ValueError("Invalid value for `cost_per_unit`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cost_per_unit is not None and cost_per_unit > 10000):  # noqa: E501
            raise ValueError("Invalid value for `cost_per_unit`, must be a value less than or equal to `10000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cost_per_unit is not None and cost_per_unit < 0):  # noqa: E501
            raise ValueError("Invalid value for `cost_per_unit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cost_per_unit = cost_per_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TariffConstraint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TariffConstraint):
            return True

        return self.to_dict() != other.to_dict()
