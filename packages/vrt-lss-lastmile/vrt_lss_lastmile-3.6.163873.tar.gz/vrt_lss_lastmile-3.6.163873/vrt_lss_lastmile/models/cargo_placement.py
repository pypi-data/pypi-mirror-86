# coding: utf-8

"""
    VeeRoute.LSS Lastmile

    VeeRoute.LSS Lastmile API  # noqa: E501

    The version of the OpenAPI document: 3.6.163873
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_lss_lastmile.configuration import Configuration


class CargoPlacement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'box_key': 'str',
        'cargo_key': 'str'
    }

    attribute_map = {
        'box_key': 'box_key',
        'cargo_key': 'cargo_key'
    }

    def __init__(self, box_key=None, cargo_key=None, local_vars_configuration=None):  # noqa: E501
        """CargoPlacement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._box_key = None
        self._cargo_key = None
        self.discriminator = None

        self.box_key = box_key
        self.cargo_key = cargo_key

    @property
    def box_key(self):
        """Gets the box_key of this CargoPlacement.  # noqa: E501

        Compartment key.  # noqa: E501

        :return: The box_key of this CargoPlacement.  # noqa: E501
        :rtype: str
        """
        return self._box_key

    @box_key.setter
    def box_key(self, box_key):
        """Sets the box_key of this CargoPlacement.

        Compartment key.  # noqa: E501

        :param box_key: The box_key of this CargoPlacement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and box_key is None:  # noqa: E501
            raise ValueError("Invalid value for `box_key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                box_key is not None and len(box_key) > 1024):
            raise ValueError("Invalid value for `box_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                box_key is not None and len(box_key) < 1):
            raise ValueError("Invalid value for `box_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._box_key = box_key

    @property
    def cargo_key(self):
        """Gets the cargo_key of this CargoPlacement.  # noqa: E501

        Cargo key.  # noqa: E501

        :return: The cargo_key of this CargoPlacement.  # noqa: E501
        :rtype: str
        """
        return self._cargo_key

    @cargo_key.setter
    def cargo_key(self, cargo_key):
        """Sets the cargo_key of this CargoPlacement.

        Cargo key.  # noqa: E501

        :param cargo_key: The cargo_key of this CargoPlacement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cargo_key is None:  # noqa: E501
            raise ValueError("Invalid value for `cargo_key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cargo_key is not None and len(cargo_key) > 1024):
            raise ValueError("Invalid value for `cargo_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cargo_key is not None and len(cargo_key) < 1):
            raise ValueError("Invalid value for `cargo_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._cargo_key = cargo_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CargoPlacement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CargoPlacement):
            return True

        return self.to_dict() != other.to_dict()
