# coding: utf-8

"""
    VeeRoute.LSS Lastmile

    VeeRoute.LSS Lastmile API  # noqa: E501

    The version of the OpenAPI document: 3.6.163909
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_lss_lastmile.configuration import Configuration


class Trip(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key': 'str',
        'assigned_shifts': 'list[AssignedShift]',
        'actions': 'list[TripAction]',
        'waitlist': 'list[str]',
        'start_location_key': 'str',
        'finish_location_key': 'str',
        'attributes': 'list[str]'
    }

    attribute_map = {
        'key': 'key',
        'assigned_shifts': 'assigned_shifts',
        'actions': 'actions',
        'waitlist': 'waitlist',
        'start_location_key': 'start_location_key',
        'finish_location_key': 'finish_location_key',
        'attributes': 'attributes'
    }

    def __init__(self, key=None, assigned_shifts=None, actions=None, waitlist=None, start_location_key=None, finish_location_key=None, attributes=[], local_vars_configuration=None):  # noqa: E501
        """Trip - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self._assigned_shifts = None
        self._actions = None
        self._waitlist = None
        self._start_location_key = None
        self._finish_location_key = None
        self._attributes = None
        self.discriminator = None

        self.key = key
        self.assigned_shifts = assigned_shifts
        if actions is not None:
            self.actions = actions
        if waitlist is not None:
            self.waitlist = waitlist
        if start_location_key is not None:
            self.start_location_key = start_location_key
        if finish_location_key is not None:
            self.finish_location_key = finish_location_key
        if attributes is not None:
            self.attributes = attributes

    @property
    def key(self):
        """Gets the key of this Trip.  # noqa: E501

        Unique trip ID.  # noqa: E501

        :return: The key of this Trip.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Trip.

        Unique trip ID.  # noqa: E501

        :param key: The key of this Trip.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and key is None:  # noqa: E501
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                key is not None and len(key) > 1024):
            raise ValueError("Invalid value for `key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                key is not None and len(key) < 1):
            raise ValueError("Invalid value for `key`, length must be greater than or equal to `1`")  # noqa: E501

        self._key = key

    @property
    def assigned_shifts(self):
        """Gets the assigned_shifts of this Trip.  # noqa: E501

        List of assigned shifts.  # noqa: E501

        :return: The assigned_shifts of this Trip.  # noqa: E501
        :rtype: list[AssignedShift]
        """
        return self._assigned_shifts

    @assigned_shifts.setter
    def assigned_shifts(self, assigned_shifts):
        """Sets the assigned_shifts of this Trip.

        List of assigned shifts.  # noqa: E501

        :param assigned_shifts: The assigned_shifts of this Trip.  # noqa: E501
        :type: list[AssignedShift]
        """
        if self.local_vars_configuration.client_side_validation and assigned_shifts is None:  # noqa: E501
            raise ValueError("Invalid value for `assigned_shifts`, must not be `None`")  # noqa: E501

        self._assigned_shifts = assigned_shifts

    @property
    def actions(self):
        """Gets the actions of this Trip.  # noqa: E501

        List of actions for orders.  # noqa: E501

        :return: The actions of this Trip.  # noqa: E501
        :rtype: list[TripAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Trip.

        List of actions for orders.  # noqa: E501

        :param actions: The actions of this Trip.  # noqa: E501
        :type: list[TripAction]
        """

        self._actions = actions

    @property
    def waitlist(self):
        """Gets the waitlist of this Trip.  # noqa: E501

        A list of keys assigned to orders, but not scheduled for a specific time.  # noqa: E501

        :return: The waitlist of this Trip.  # noqa: E501
        :rtype: list[str]
        """
        return self._waitlist

    @waitlist.setter
    def waitlist(self, waitlist):
        """Sets the waitlist of this Trip.

        A list of keys assigned to orders, but not scheduled for a specific time.  # noqa: E501

        :param waitlist: The waitlist of this Trip.  # noqa: E501
        :type: list[str]
        """

        self._waitlist = waitlist

    @property
    def start_location_key(self):
        """Gets the start_location_key of this Trip.  # noqa: E501

        Trip start location key.  # noqa: E501

        :return: The start_location_key of this Trip.  # noqa: E501
        :rtype: str
        """
        return self._start_location_key

    @start_location_key.setter
    def start_location_key(self, start_location_key):
        """Sets the start_location_key of this Trip.

        Trip start location key.  # noqa: E501

        :param start_location_key: The start_location_key of this Trip.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                start_location_key is not None and len(start_location_key) > 1024):
            raise ValueError("Invalid value for `start_location_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                start_location_key is not None and len(start_location_key) < 1):
            raise ValueError("Invalid value for `start_location_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._start_location_key = start_location_key

    @property
    def finish_location_key(self):
        """Gets the finish_location_key of this Trip.  # noqa: E501

        Trip finish location key.  # noqa: E501

        :return: The finish_location_key of this Trip.  # noqa: E501
        :rtype: str
        """
        return self._finish_location_key

    @finish_location_key.setter
    def finish_location_key(self, finish_location_key):
        """Sets the finish_location_key of this Trip.

        Trip finish location key.  # noqa: E501

        :param finish_location_key: The finish_location_key of this Trip.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                finish_location_key is not None and len(finish_location_key) > 1024):
            raise ValueError("Invalid value for `finish_location_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                finish_location_key is not None and len(finish_location_key) < 1):
            raise ValueError("Invalid value for `finish_location_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._finish_location_key = finish_location_key

    @property
    def attributes(self):
        """Gets the attributes of this Trip.  # noqa: E501

        Attributes, used to add service information that does not affect planning.  # noqa: E501

        :return: The attributes of this Trip.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Trip.

        Attributes, used to add service information that does not affect planning.  # noqa: E501

        :param attributes: The attributes of this Trip.  # noqa: E501
        :type: list[str]
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trip):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Trip):
            return True

        return self.to_dict() != other.to_dict()
