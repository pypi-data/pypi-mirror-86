# coding: utf-8

"""
    VeeRoute.LSS Lastmile

    VeeRoute.LSS Lastmile API  # noqa: E501

    The version of the OpenAPI document: 3.6.163909
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_lss_lastmile.configuration import Configuration


class DemandFact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'time': 'datetime',
        'demand_key': 'str',
        'job_facts': 'list[JobFact]'
    }

    attribute_map = {
        'type': 'type',
        'time': 'time',
        'demand_key': 'demand_key',
        'job_facts': 'job_facts'
    }

    def __init__(self, type=None, time=None, demand_key=None, job_facts=None, local_vars_configuration=None):  # noqa: E501
        """DemandFact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._time = None
        self._demand_key = None
        self._job_facts = None
        self.discriminator = None

        self.type = type
        self.time = time
        self.demand_key = demand_key
        if job_facts is not None:
            self.job_facts = job_facts

    @property
    def type(self):
        """Gets the type of this DemandFact.  # noqa: E501

        Fact type.  # noqa: E501

        :return: The type of this DemandFact.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DemandFact.

        Fact type.  # noqa: E501

        :param type: The type of this DemandFact.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["DONE", "CANCEL", "PROGRESS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def time(self):
        """Gets the time of this DemandFact.  # noqa: E501

        Fact time in the [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6) format.  # noqa: E501

        :return: The time of this DemandFact.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DemandFact.

        Fact time in the [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6) format.  # noqa: E501

        :param time: The time of this DemandFact.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and time is None:  # noqa: E501
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def demand_key(self):
        """Gets the demand_key of this DemandFact.  # noqa: E501

        Demand key.  # noqa: E501

        :return: The demand_key of this DemandFact.  # noqa: E501
        :rtype: str
        """
        return self._demand_key

    @demand_key.setter
    def demand_key(self, demand_key):
        """Sets the demand_key of this DemandFact.

        Demand key.  # noqa: E501

        :param demand_key: The demand_key of this DemandFact.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and demand_key is None:  # noqa: E501
            raise ValueError("Invalid value for `demand_key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                demand_key is not None and len(demand_key) > 1024):
            raise ValueError("Invalid value for `demand_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                demand_key is not None and len(demand_key) < 1):
            raise ValueError("Invalid value for `demand_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._demand_key = demand_key

    @property
    def job_facts(self):
        """Gets the job_facts of this DemandFact.  # noqa: E501

        List of job's facts.  # noqa: E501

        :return: The job_facts of this DemandFact.  # noqa: E501
        :rtype: list[JobFact]
        """
        return self._job_facts

    @job_facts.setter
    def job_facts(self, job_facts):
        """Sets the job_facts of this DemandFact.

        List of job's facts.  # noqa: E501

        :param job_facts: The job_facts of this DemandFact.  # noqa: E501
        :type: list[JobFact]
        """

        self._job_facts = job_facts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DemandFact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DemandFact):
            return True

        return self.to_dict() != other.to_dict()
