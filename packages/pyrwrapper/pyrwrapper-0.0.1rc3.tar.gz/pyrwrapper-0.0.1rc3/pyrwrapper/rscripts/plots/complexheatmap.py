# AUTOGENERATED! DO NOT EDIT! File to edit: 00_01_complexheatmap.ipynb (unless otherwise specified).

__all__ = ['complex_heatmap']

# Cell

from ...formats import list_to_r_vector,dict_to_r_list,dict_to_r_vector
from ...colors import get_color_list
import pandas as pd
import os

# Cell


def complex_heatmap(output,matrix_in,clinical_in,m_idx,c_idx,
                    show_row_names=True,show_column_names=True,value_name='TPM',
                    width=10, height=15,
                    row_split_by=None,
                    col_split_by=None,
                    row_anno_point=None,
                    row_anno_bar=None,
                    row_anno_normal=None,
                    col_anno_point=None,
                    col_anno_bar=None,
                    col_anno_normal=None,
                    sep_mi='\t',sep_ci='\t',tmp='./',rscript='/usr/bin/env Rscript'):
    '''

    '''
    m_df = pd.read_csv(matrix_in,sep=sep_mi,index_col=m_idx)
    c_df = pd.read_csv(clinical_in,sep=sep_ci,index_col=c_idx)
    tmp_m = f'{tmp}/m.csv'
    tmp_c = f'{tmp}/c.csv'
    m_df.to_csv(tmp_m,index=True)
    c_df.to_csv(tmp_c,index=True)
    if show_row_names:
        srn='TRUE'
    else:
        srn='FALSE'
    if show_column_names:
        scn='TRUE'
    else:
        scn='FALSE'

    addition=''
    if None is not row_split_by:
        if row_split_by in m_df.columns:
            addition += f'row_split=mat_df${row_split_by},'
        else:
            raise ValueError(f'{row_split_by} was not in {matrix_in}\'s columns')
    if None is not col_split_by:
        if col_split_by in c_df.columns:
            addition += f'column_split=clinical_df${col_split_by},'
        else:
            raise ValueError(f'{col_split_by} was not in {clinical_in}\'s columns')

    row_annotation='right_annotation = rowAnnotation('
    col_annotation='top_annotation = HeatmapAnnotation('
    row_annotation_col={}
    col_annotation_col={}


    if None is not row_anno_point:
        for key in row_anno_point:
            if row_anno_point[key] in m_df.columns:
                row_annotation+=f'{key}=anno_points(mat_df${row_anno_point[key]}),'
#                 unique = m_df[row_anno_point[key]].unique()
#                 print(unique)
#                 row_annotation_col[key] = {i:j for i,j in zip(unique,get_color_list(len(unique))) }
            else:
                raise ValueError(f'{key} was not in {matrix_in}\'s columns')
    if None is not row_anno_bar:
        for key in row_anno_bar:
            if row_anno_bar[key] in m_df.columns:
                row_annotation+=f'{key}=anno_barplot(mat_df${row_anno_bar[key]}),'
#                 unique = m_df[row_anno_point[key]].unique()
#                 row_annotation_col[key] = {i:j for i,j in zip(unique,get_color_list(len(unique))) }
            else:
                raise ValueError(f'{key} was not in {matrix_in}\'s columns')

    if None is not row_anno_normal:
        for key in row_anno_normal:
            if row_anno_normal[key] in m_df.columns:
                row_annotation+=f'{key}=mat_df${row_anno_normal[key]},'
                unique = m_df[row_anno_normal[key]].unique()
                row_annotation_col[key] = {i:j for i,j in zip(unique,get_color_list(len(unique))) }
            else:
                raise ValueError(f'{key} was not in {matrix_in}\'s columns')

    if None is not col_anno_point:
        for key in col_anno_point:
            if col_anno_point[key] in c_df.columns:
                col_annotation+=f'{key}=anno_points(clinical_df${col_anno_point[key]}),'
#                 unique = m_df[col_annotation[key]].unique()
#                 col_annotation_col[key] = {i:j for i,j in zip(unique,get_color_list(len(unique))) }
            else:
                raise ValueError(f'{key} was not in {clinical_in}\'s columns')
    if None is not col_anno_bar:
        for key in col_anno_bar:
            if col_anno_bar[key] in c_df.columns:
                col_annotation+=f'{key}=anno_barplot(clinical_df${col_anno_bar[key]}),'
#                 unique = m_df[col_annotation[key]].unique()
#                 col_annotation_col[key] = {i:j for i,j in zip(unique,get_color_list(len(unique))) }
            else:
                raise ValueError(f'{key} was not in {clinical_in}\'s columns')

    if None is not col_anno_normal:
        for key in col_anno_normal:
            if col_anno_normal[key] in c_df.columns:
                col_annotation+=f'{key}=clinical_df${col_anno_normal[key]},'
                unique = c_df[col_anno_normal[key]].unique()
                col_annotation_col[key] = {i:j for i,j in zip(unique,get_color_list(len(unique))) }
            else:
                raise ValueError(f'{key} was not in {clinical_in}\'s columns')

    annotations = ''
    if row_annotation != 'right_annotation = rowAnnotation(':
        annotations += row_annotation+'na_col = "black", border = TRUE,col={col_list}),\n'.format(col_list=dict_to_r_list(row_annotation_col,dict_to_r_vector))
    if col_annotation !='top_annotation = HeatmapAnnotation(':
        annotations += col_annotation+'na_col = "black", border = TRUE,col={col_list}),'.format(col_list=dict_to_r_list(col_annotation_col,dict_to_r_vector))
    return r'''#! {rscript}

library(ComplexHeatmap)

mat_df <-read.csv('{tmp_m}',row.names = 1)

clinical_df <- read.csv('{tmp_c}',row.names = 1)
mat <- as.matrix(mat_df[as.factor(rownames(clinical_df))])



clinical_df<-clinical_df[colnames(mat),]
pdf("{output}", width={width}, height={height})

Heatmap(mat, name = "{value_name}",
        row_dend_side = "right",column_dend_side = 'bottom',
        clustering_distance_rows = "euclidean",
        clustering_distance_columns = "euclidean",
        column_title_gp = gpar(fontsize = 20, fontface = "bold"),
        row_names_side = "left",
        column_names_side = "bottom",
        column_title = "{c_idx}",
        show_row_names={srn},
        show_column_names={scn},{addition}
        row_title= "{m_idx}",
        border = TRUE,
        {annotations}

        )

dev.off()

    '''.format(**locals())

