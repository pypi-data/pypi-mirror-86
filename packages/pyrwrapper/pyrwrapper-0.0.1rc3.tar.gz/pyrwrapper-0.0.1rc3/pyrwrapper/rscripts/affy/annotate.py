# AUTOGENERATED! DO NOT EDIT! File to edit: 00_03_affy_annotate.ipynb (unless otherwise specified).

__all__ = ['affy_annotate']

# Cell

import pandas as pd


# Cell


def affy_annotate(infofile,prefix,sep='\t',rscript='/usr/bin/env Rscript'):
    '''
    # sample file affy.type
    # s1  s1.xxx.cel hgu133plus2
    # s2  s2.xxx.cel hgu133a
    # s3  s3.xxx.cel.gz hgu133b
    '''

    return r'''#! {rscript}


fileinfo <- read.table('{infofile}',header=TRUE,sep='{sep}')
library(affy)
library(annotate)

# for different chip, using different method
unique_types <- unique(fileinfo['affy.type'])

for(ut in unlist(unique_types)){{
  subinfo <- fileinfo[fileinfo['affy.type']==ut,]
  Data<-ReadAffy(filenames=as.vector(unlist(subinfo['file'],use.names=FALSE)),
                sampleNames=as.vector(unlist(subinfo['sample'],use.names=FALSE)))
  eset<-mas5(Data)
  db.name<-paste(ut,'db',sep='.')
  library(db.name,character.only=TRUE)
  GS <- as.matrix(getSYMBOL(featureNames(eset),db.name))
  ematrix <-exprs(eset)
  rows <- GS
  cols <-  c("GeneSymbol",colnames(ematrix))
  ematrix <- cbind(rows,ematrix)
  ematrix <- ematrix[which(ematrix[,1] != "NA"),] #remove NAs
  ematrix <- ematrix[order(ematrix[,1]),] #sort by gene name
  ematrix <- rbind(cols, ematrix)
  write.table(ematrix,file=paste('{prefix}',db.name,"NormalizedExpressionArray.customCDF.csv",sep='-'),sep=",",
              col.names=F, row.names=F,quote=FALSE)
}}

    '''.format(**locals())

