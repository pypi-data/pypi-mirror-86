# AUTOGENERATED! DO NOT EDIT! File to edit: 10_02_pipelines.ipynb (unless otherwise specified).

__all__ = ['venn_plot', 'complexheatmap_plot', 'music_deconvolution']

# Cell

from .rscripts.plots.venn import venn_diagram
from .rscripts.plots.complexheatmap import complex_heatmap
from .rscripts.formatstrans.rds import table_to_rds
from .rscripts.debulk.music import music
from .rscripts.affy.annotate import affy_annotate
from .utils import run_cmd,run_script,write_script,make_dirs,dirname,list_to_dict


# Cell

def venn_plot(output,*,lists,tags,title='Venn Diagram',sub_title='',print_mode=['raw', 'percent'],rscript='/usr/bin/env Rscript'):
    '''
    venn diagram plot

    :param str output: figure output, the formats could be 'png','tiff','pdf'
    :param list[str] lists: lists file without title
    :param list[str] tags: tags corresponding to lists, the length of lists and tags should be the same
    :param str title: graph title
    :param str sub_title: graph subtitle
    :param list[str] print_mode: could only be 'raw' or 'percent' or ('raw' and  'percent')
    :param str rscript: the path of Rscript

    '''

    if len(lists) != len(tags):
        raise ValueError('the length of lists and tags should be the same')
    if len(lists)>5:
        raise ValueError('Venn diagram can only plot 5 sets')
    my_lists = [open(i,'r') for i in lists]
    script=venn_diagram(my_lists,tags,output, main=title ,sub=sub_title,print_mode=print_mode,rscript=rscript)
    command = output+'.R'
    write_script(script,command)
    run_script(command)


# Cell

def complexheatmap_plot(output,matrix_in,clinical_in,*,m_idx,c_idx,
                    show_row_names=True,show_column_names=True,value_name='TPM',
                    width=10, height=15,
                    row_split_by=None,
                    col_split_by=None,
                    row_anno_point=None,
                    row_anno_bar=None,
                    row_anno_normal=None,
                    col_anno_point=None,
                    col_anno_bar=None,
                    col_anno_normal=None,
                    sep_mi='\t',sep_ci='\t',tmp='./',rscript='/usr/bin/env Rscript'):
    '''
    ComplextHeatmap plot

    :param str output: figure output, the formats could only be 'pdf'
    :param str matrix_in: heatmap input data
    :param str clinical_in: clinical input data
    :param str m_idx: heatmap index column name, e.g. 'geneid'
    :param str c_idx: clinical index column name, which are used to identify the data columns in heatmap matrix
    :param bool show_row_names: whether to show row names, if row number are too large, maybe not show.
    :param bool show_column_names: whether to show column names, if row number are too large, maybe not show.
    :param str value_name: value name in the matrix, e.g. 'count', 'TPM'
    :param int width: width of the figure
    :param int height: height of the figure
    :param str row_split_by: can specific split rows into different blocks by specific column in the matrix data, e.g. 'Pathway of genes'
    :param str col_split_by: can specific split columns into different blocks by specific column in the clinical data, e.g. 'condition'
    :param list[str] row_anno_point: can specific annotate row by point plot, you can also specify the name of annotation by log2fc:foldchange, e.g. 'foldchange' 'pvalue'
    :param list[str] row_anno_bar: can specific annotate row by bar plot,you can also specify the name of annotation by name:colname, e.g. 'flodchange' 'pvalue'
    :param list[str] row_anno_normal: can specific annotate row by condition,you can also specify the name of annotation by name:colname, e.g. 'biotype'
    :param list[str] col_anno_point: can specific annotate column by point plot, you can also specify the name of annotation by name:colname, e.g. 'age'
    :param list[str] col_anno_bar: can specific annotate column by bar plot, you can also specify the name of annotation by name:colname,  e.g. 'age'
    :param list[str] col_anno_normal: can specific annotate column by condition, you can also specify the name of annotation by name:colname,  e.g. 'gender'
    :param str sep_mi: separation in matirx file
    :param str sep_ci: separation in clinical file
    :param str tmp: temporary direction
    :param str rscript: Rscript path
    '''
    make_dirs(tmp,*dirname(output))

    if None is not row_anno_point:
        row_anno_point = list_to_dict(row_anno_point)
    if None is not row_anno_bar:
        row_anno_bar = list_to_dict(row_anno_bar)
    if None is not row_anno_normal:
        row_anno_normal = list_to_dict(row_anno_normal)
    if None is not col_anno_point:
        col_anno_point = list_to_dict(col_anno_point)
    if None is not col_anno_bar:
        col_anno_bar = list_to_dict(col_anno_bar)
    if None is not col_anno_normal:
        col_anno_normal = list_to_dict(col_anno_normal)


    script=complex_heatmap(output=output,
                           matrix_in=matrix_in,
                           clinical_in=clinical_in,
                           m_idx=m_idx,
                           c_idx=c_idx,
                           show_row_names=show_row_names,
                           show_column_names=show_column_names,
                           value_name=value_name,
                           width=width,
                           height=height,
                           row_split_by=row_split_by,
                           col_split_by=col_split_by,
                           row_anno_point=row_anno_point,
                           row_anno_bar=row_anno_bar,
                           row_anno_normal=row_anno_normal,
                           col_anno_point=col_anno_point,
                           col_anno_bar=col_anno_bar,
                           col_anno_normal=col_anno_normal,
                           sep_mi=sep_mi,
                           sep_ci=sep_ci,
                           tmp=tmp,
                           rscript=rscript)
    command = f'{tmp}/complexheatmap.R'
    write_script(script,command)
    run_script(command)

# Cell

def music_deconvolution(bulk_count,sc_count,bulk_info,sc_info,output,*,cluster,samples,
                        select_ct='NULL',
                        bulk_filter=20,
                        sc_filter=20,
                        bulk_count_sep=',',
                        sc_count_sep=',',
                        bulk_info_sep=',',
                        sc_info_sep=',',
                        tmp='./',
                        rscript='/usr/bin/env Rscript'
                       ):
    '''
    Multi-subject Single Cell deconvolution  (MuSiC github.com/xuranw/MuSiC)

    :param str bulk_count: bulk RNA-seq count data, first columns should be the gene identification(unique)
    :param str sc_count: single-cell RNA-seq count data, first columns should be the gene identification(unique) same as bulk_count
    :param str bulk_info: bulk RNA-seq information
    :param str sc_info: single-cell RNA-seq information: samples, cell type ,etc. The first column should be the cell identification.
    :param str output: will write the result out in `.csv` format
    :param str cluster: column name of cell type in sc_info
    :param str samples: column name of sample name in sc_info, (need to know the single cell source, from which sample)
    :param list[str] select_ct: cell types to deconvolution
    :param int bulk_filter: bulk RNA-seq depth filter
    :param int sc_filter: single-cell RNA-seq depth filter
    :param str bulk_count_sep: bulk_count file separation
    :param str sc_count_sep: single-cell count file separation
    :param str bulk_info_sep: bulk_info file separation
    :param str sc_info_sep: single-cell info file separation
    :param str tmp: temporary file direction
    :param str rscript: Rscript path
    '''

    make_dirs(tmp,*dirname(output))

    bulk_rds=f'{tmp}/bulk.rds'
    sc_rds=f'{tmp}/sc.rds'

    script_bulk_to_rds = table_to_rds(bulk_count,bulk_info,bulk_rds,
                                      sep_c=bulk_count_sep,
                                      sep_i=bulk_info_sep,
                                      rscript=rscript)
    script_sc_to_rds = table_to_rds(sc_count,sc_info,sc_rds,
                                      sep_c=sc_count_sep,
                                      sep_i=sc_info_sep,
                                      rscript=rscript)

    script_music=music(bulk_rds,
                       sc_rds,
                       cluster,
                       samples,
                       output,
                       select_ct=select_ct,
                       bulk_filter=bulk_filter,
                       sc_filter=sc_filter,
                       rscript=rscript)

    command_b2r=f'{tmp}/b2r.R'
    command_s2r=f'{tmp}/s2r.R'
    command_de_music=f'{tmp}/music.R'


    write_script(script_bulk_to_rds,command_b2r)
    write_script(script_sc_to_rds,command_s2r)
    write_script(script_music,command_de_music)

    run_script(command_b2r)
    run_script(command_s2r)
    run_script(command_de_music)
