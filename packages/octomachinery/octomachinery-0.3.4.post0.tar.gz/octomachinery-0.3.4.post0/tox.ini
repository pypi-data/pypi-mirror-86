[tox]
envlist = python
minversion = 3.9.0
requires =
    setuptools >= 40.9.0
    pip >= 19.0.3
    # tox-venv >= 0.4.0
isolated_build = true


[testenv]
basepython = python3
isolated_build = true
usedevelop = false
extras =
    testing
commands =
    {envpython} -m pytest {posargs:--cov-report=term-missing:skip-covered}


[testenv:check-docs]
basepython = python3
isolated_build = true
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
## don't install octomachinery itself in this env
#skip_install = true
#usedevelop = true
extras =
    docs
#     testing
#deps =
#    pip >= 18
changedir = docs
commands =
    {envpython} -m sphinx \
      -b linkcheck \
      -j auto \
      --color \
      -n \
      -d {toxinidir}/build/.doctrees \
      . \
      {toxinidir}/build/html


[testenv:build-docs]
basepython = python3
isolated_build = true
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
## don't install octomachinery itself in this env
#skip_install = true
#usedevelop = true
extras =
    docs
#     testing
#deps =
#    pip >= 18
changedir = docs
commands =
    # FIXME: Add -W option below once all other warnings are gone
    {envpython} -m sphinx \
      -j auto \
      -b html \
      --color \
      -n \
      -d "{toxinidir}/build/.doctrees" \
      . \
      "{toxinidir}/build/html"

    # Print out the output docs dir and a way to serve html:
    -{envpython} -c \
    'import pathlib; docs_dir = pathlib.Path(r"{toxinidir}") / "build" / "html"; index_file = docs_dir / "index.html"; '\
    'print("\n" + "=" * 120 + f"\n\nDocumentation available under `file://\{index_file\}`\n\nTo serve docs, use `python3 -m http.server --directory \{docs_dir\} 0`\n\n" + "=" * 120)'


[testenv:build-dists]
basepython = python3
isolated_build = true
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false
# don't install octomachinery itself in this env
skip_install = true
deps =
    pep517 >= 0.5.0
setenv =
    PYPI_UPLOAD = true
commands =
    rm -rfv {toxinidir}/dist/
    {envpython} -m pep517.build \
      --source \
      --binary \
      --out-dir {toxinidir}/dist/ \
      {toxinidir}
whitelist_externals =
    rm


[testenv:pre-commit]
isolated_build = true
deps =
    pre-commit
    pylint
    pylint-pytest
commands =
    {envpython} -m pre_commit run --show-diff-on-failure {posargs:--all-files}

    # Print out the advise of how to install pre-commit from this env into Git:
    -{envpython} -c \
    'cmd = "{envpython} -m pre_commit install"; scr_width = len(cmd) + 10; sep = "=" * scr_width; cmd_str = "    $ " + cmd; '\
    'print("\n" + sep + "\nTo install pre-commit hooks into the Git repo, run:\n\n" + cmd_str + "\n\n" + sep + "\n")'


[testenv:pre-commit-ci]
isolated_build = true
deps =
    {[testenv:pre-commit]deps}
commands =
    {envpython} -m pre_commit run --show-diff-on-failure --config .pre-commit-config.ci.yaml {posargs:--all-files}
